/* jshint ignore:start */

window.EmberENV = {"FEATURES":{}};
var runningTests = false;

self.EmberENV.EXTEND_PROTOTYPES = false;

/* jshint ignore:end */

;var define, requireModule, require, requirejs;

(function() {

  var _isArray;
  if (!Array.isArray) {
    _isArray = function (x) {
      return Object.prototype.toString.call(x) === "[object Array]";
    };
  } else {
    _isArray = Array.isArray;
  }

  var registry = {}, seen = {};
  var FAILED = false;

  var uuid = 0;

  function tryFinally(tryable, finalizer) {
    try {
      return tryable();
    } finally {
      finalizer();
    }
  }

  function unsupportedModule(length) {
    throw new Error("an unsupported module was defined, expected `define(name, deps, module)` instead got: `" + length + "` arguments to define`");
  }

  var defaultDeps = ['require', 'exports', 'module'];

  function Module(name, deps, callback, exports) {
    this.id       = uuid++;
    this.name     = name;
    this.deps     = !deps.length && callback.length ? defaultDeps : deps;
    this.exports  = exports || { };
    this.callback = callback;
    this.state    = undefined;
    this._require  = undefined;
  }


  Module.prototype.makeRequire = function() {
    var name = this.name;

    return this._require || (this._require = function(dep) {
      return require(resolve(dep, name));
    });
  }

  define = function(name, deps, callback) {
    if (arguments.length < 2) {
      unsupportedModule(arguments.length);
    }

    if (!_isArray(deps)) {
      callback = deps;
      deps     =  [];
    }

    registry[name] = new Module(name, deps, callback);
  };

  // we don't support all of AMD
  // define.amd = {};
  // we will support petals...
  define.petal = { };

  function Alias(path) {
    this.name = path;
  }

  define.alias = function(path) {
    return new Alias(path);
  };

  function reify(mod, name, seen) {
    var deps = mod.deps;
    var length = deps.length;
    var reified = new Array(length);
    var dep;
    // TODO: new Module
    // TODO: seen refactor
    var module = { };

    for (var i = 0, l = length; i < l; i++) {
      dep = deps[i];
      if (dep === 'exports') {
        module.exports = reified[i] = seen;
      } else if (dep === 'require') {
        reified[i] = mod.makeRequire();
      } else if (dep === 'module') {
        mod.exports = seen;
        module = reified[i] = mod;
      } else {
        reified[i] = requireFrom(resolve(dep, name), name);
      }
    }

    return {
      deps: reified,
      module: module
    };
  }

  function requireFrom(name, origin) {
    var mod = registry[name];
    if (!mod) {
      throw new Error('Could not find module `' + name + '` imported from `' + origin + '`');
    }
    return require(name);
  }

  function missingModule(name) {
    throw new Error('Could not find module ' + name);
  }
  requirejs = require = requireModule = function(name) {
    var mod = registry[name];


    if (mod && mod.callback instanceof Alias) {
      mod = registry[mod.callback.name];
    }

    if (!mod) { missingModule(name); }

    if (mod.state !== FAILED &&
        seen.hasOwnProperty(name)) {
      return seen[name];
    }

    var reified;
    var module;
    var loaded = false;

    seen[name] = { }; // placeholder for run-time cycles

    tryFinally(function() {
      reified = reify(mod, name, seen[name]);
      module = mod.callback.apply(this, reified.deps);
      loaded = true;
    }, function() {
      if (!loaded) {
        mod.state = FAILED;
      }
    });

    var obj;
    if (module === undefined && reified.module.exports) {
      obj = reified.module.exports;
    } else {
      obj = seen[name] = module;
    }

    if (obj !== null &&
        (typeof obj === 'object' || typeof obj === 'function') &&
          obj['default'] === undefined) {
      obj['default'] = obj;
    }

    return (seen[name] = obj);
  };

  function resolve(child, name) {
    if (child.charAt(0) !== '.') { return child; }

    var parts = child.split('/');
    var nameParts = name.split('/');
    var parentBase = nameParts.slice(0, -1);

    for (var i = 0, l = parts.length; i < l; i++) {
      var part = parts[i];

      if (part === '..') {
        if (parentBase.length === 0) {
          throw new Error('Cannot access parent module of root');
        }
        parentBase.pop();
      } else if (part === '.') { continue; }
      else { parentBase.push(part); }
    }

    return parentBase.join('/');
  }

  requirejs.entries = requirejs._eak_seen = registry;
  requirejs.clear = function(){
    requirejs.entries = requirejs._eak_seen = registry = {};
    seen = state = {};
  };
})();

;/*!
 * jQuery JavaScript Library v1.11.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:19Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.11.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	// Minified: var a,b,c
	var input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		fragment = document.createDocumentFragment();

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== strundefined ) {
			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	// Minified: var b,c,d,e,f,g, h,i
	var div, style, a, pixelPositionVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal;

	// Setup
	div = document.createElement( "div" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];
	style = a && a.style;

	// Finish early in limited (non-browser) environments
	if ( !style ) {
		return;
	}

	style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
		style.WebkitBoxSizing === "";

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		// Support: Android 2.3
		reliableMarginRight: function() {
			if ( reliableMarginRightVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		// Minified: var b,c,d,j
		var div, body, container, contents;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = false;
		reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		contents = div.getElementsByTagName( "td" );
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		if ( reliableHiddenOffsetsVal ) {
			contents[ 0 ].style.display = "";
			contents[ 1 ].style.display = "none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		}

		body.removeChild( container );
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	// Minified: var a,b,c,d,e
	var input, div, select, a, opt;

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

;/*!
 * @overview  Ember - JavaScript Application Framework
 * @copyright Copyright 2011-2015 Tilde Inc. and contributors
 *            Portions Copyright 2006-2011 Strobe Inc.
 *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.
 * @license   Licensed under MIT license
 *            See https://raw.github.com/emberjs/ember.js/master/LICENSE
 * @version   1.13.2
 */

(function() {
var enifed, requireModule, eriuqer, requirejs, Ember;
var mainContext = this;

(function() {
  var isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

  if (!isNode) {
    Ember = this.Ember = this.Ember || {};
  }

  if (typeof Ember === 'undefined') { Ember = {}; };

  if (typeof Ember.__loader === 'undefined') {
    var registry = {};
    var seen = {};

    enifed = function(name, deps, callback) {
      var value = { };

      if (!callback) {
        value.deps = [];
        value.callback = deps;
      } else {
        value.deps = deps;
        value.callback = callback;
      }

        registry[name] = value;
    };

    requirejs = eriuqer = requireModule = function(name) {
      return internalRequire(name, null);
    }

    function internalRequire(name, referrerName) {
      var exports = seen[name];

      if (exports !== undefined) {
        return exports;
      }

      exports = seen[name] = {};

      if (!registry[name]) {
        if (referrerName) {
          throw new Error('Could not find module ' + name + ' required by: ' + referrerName);
        } else {
          throw new Error('Could not find module ' + name);
        }
      }

      var mod = registry[name];
      var deps = mod.deps;
      var callback = mod.callback;
      var reified = [];
      var length = deps.length;

      for (var i=0; i<length; i++) {
        if (deps[i] === 'exports') {
          reified.push(exports);
        } else {
          reified.push(internalRequire(resolve(deps[i], name), name));
        }
      }

      callback.apply(this, reified);

      return exports;
    };

    function resolve(child, name) {
      if (child.charAt(0) !== '.') {
        return child;
      }
      var parts = child.split('/');
      var parentBase = name.split('/').slice(0, -1);

      for (var i=0, l=parts.length; i<l; i++) {
        var part = parts[i];

        if (part === '..') {
          parentBase.pop();
        } else if (part === '.') {
          continue;
        } else {
          parentBase.push(part);
        }
      }

      return parentBase.join('/');
    }

    requirejs._eak_seen = registry;

    Ember.__loader = {
      define: enifed,
      require: eriuqer,
      registry: registry
    };
  } else {
    enifed = Ember.__loader.define;
    requirejs = eriuqer = requireModule = Ember.__loader.require;
  }
})();

enifed('backburner', ['exports', './backburner/utils', './backburner/platform', './backburner/binary-search', './backburner/deferred-action-queues'], function (exports, _backburnerUtils, _backburnerPlatform, _backburnerBinarySearch, _backburnerDeferredActionQueues) {
  exports["default"] = Backburner;

  function Backburner(queueNames, options) {
    this.queueNames = queueNames;
    this.options = options || {};
    if (!this.options.defaultQueue) {
      this.options.defaultQueue = queueNames[0];
    }
    this.instanceStack = [];
    this._debouncees = [];
    this._throttlers = [];
    this._timers = [];
  }

  Backburner.prototype = {
    begin: function () {
      var options = this.options;
      var onBegin = options && options.onBegin;
      var previousInstance = this.currentInstance;

      if (previousInstance) {
        this.instanceStack.push(previousInstance);
      }

      this.currentInstance = new _backburnerDeferredActionQueues["default"](this.queueNames, options);
      if (onBegin) {
        onBegin(this.currentInstance, previousInstance);
      }
    },

    end: function () {
      var options = this.options;
      var onEnd = options && options.onEnd;
      var currentInstance = this.currentInstance;
      var nextInstance = null;

      // Prevent double-finally bug in Safari 6.0.2 and iOS 6
      // This bug appears to be resolved in Safari 6.0.5 and iOS 7
      var finallyAlreadyCalled = false;
      try {
        currentInstance.flush();
      } finally {
        if (!finallyAlreadyCalled) {
          finallyAlreadyCalled = true;

          this.currentInstance = null;

          if (this.instanceStack.length) {
            nextInstance = this.instanceStack.pop();
            this.currentInstance = nextInstance;
          }

          if (onEnd) {
            onEnd(currentInstance, nextInstance);
          }
        }
      }
    },

    run: function () {
      var length = arguments.length;
      var method, target, args;

      if (length === 1) {
        method = arguments[0];
        target = null;
      } else {
        target = arguments[0];
        method = arguments[1];
      }

      if ((0, _backburnerUtils.isString)(method)) {
        method = target[method];
      }

      if (length > 2) {
        args = new Array(length - 2);
        for (var i = 0, l = length - 2; i < l; i++) {
          args[i] = arguments[i + 2];
        }
      } else {
        args = [];
      }

      var onError = getOnError(this.options);

      this.begin();

      // guard against Safari 6's double-finally bug
      var didFinally = false;

      if (onError) {
        try {
          return method.apply(target, args);
        } catch (error) {
          onError(error);
        } finally {
          if (!didFinally) {
            didFinally = true;
            this.end();
          }
        }
      } else {
        try {
          return method.apply(target, args);
        } finally {
          if (!didFinally) {
            didFinally = true;
            this.end();
          }
        }
      }
    },

    join: function () {
      if (this.currentInstance) {
        var length = arguments.length;
        var method, target;

        if (length === 1) {
          method = arguments[0];
          target = null;
        } else {
          target = arguments[0];
          method = arguments[1];
        }

        if ((0, _backburnerUtils.isString)(method)) {
          method = target[method];
        }

        if (length === 1) {
          return method();
        } else if (length === 2) {
          return method.call(target);
        } else {
          var args = new Array(length - 2);
          for (var i = 0, l = length - 2; i < l; i++) {
            args[i] = arguments[i + 2];
          }
          return method.apply(target, args);
        }
      } else {
        return this.run.apply(this, arguments);
      }
    },

    defer: function (queueName /* , target, method, args */) {
      var length = arguments.length;
      var method, target, args;

      if (length === 2) {
        method = arguments[1];
        target = null;
      } else {
        target = arguments[1];
        method = arguments[2];
      }

      if ((0, _backburnerUtils.isString)(method)) {
        method = target[method];
      }

      var stack = this.DEBUG ? new Error() : undefined;

      if (length > 3) {
        args = new Array(length - 3);
        for (var i = 3; i < length; i++) {
          args[i - 3] = arguments[i];
        }
      } else {
        args = undefined;
      }

      if (!this.currentInstance) {
        createAutorun(this);
      }
      return this.currentInstance.schedule(queueName, target, method, args, false, stack);
    },

    deferOnce: function (queueName /* , target, method, args */) {
      var length = arguments.length;
      var method, target, args;

      if (length === 2) {
        method = arguments[1];
        target = null;
      } else {
        target = arguments[1];
        method = arguments[2];
      }

      if ((0, _backburnerUtils.isString)(method)) {
        method = target[method];
      }

      var stack = this.DEBUG ? new Error() : undefined;

      if (length > 3) {
        args = new Array(length - 3);
        for (var i = 3; i < length; i++) {
          args[i - 3] = arguments[i];
        }
      } else {
        args = undefined;
      }

      if (!this.currentInstance) {
        createAutorun(this);
      }
      return this.currentInstance.schedule(queueName, target, method, args, true, stack);
    },

    setTimeout: function () {
      var l = arguments.length;
      var args = new Array(l);

      for (var x = 0; x < l; x++) {
        args[x] = arguments[x];
      }

      var length = args.length,
          method,
          wait,
          target,
          methodOrTarget,
          methodOrWait,
          methodOrArgs;

      if (length === 0) {
        return;
      } else if (length === 1) {
        method = args.shift();
        wait = 0;
      } else if (length === 2) {
        methodOrTarget = args[0];
        methodOrWait = args[1];

        if ((0, _backburnerUtils.isFunction)(methodOrWait) || (0, _backburnerUtils.isFunction)(methodOrTarget[methodOrWait])) {
          target = args.shift();
          method = args.shift();
          wait = 0;
        } else if ((0, _backburnerUtils.isCoercableNumber)(methodOrWait)) {
          method = args.shift();
          wait = args.shift();
        } else {
          method = args.shift();
          wait = 0;
        }
      } else {
        var last = args[args.length - 1];

        if ((0, _backburnerUtils.isCoercableNumber)(last)) {
          wait = args.pop();
        } else {
          wait = 0;
        }

        methodOrTarget = args[0];
        methodOrArgs = args[1];

        if ((0, _backburnerUtils.isFunction)(methodOrArgs) || (0, _backburnerUtils.isString)(methodOrArgs) && methodOrTarget !== null && methodOrArgs in methodOrTarget) {
          target = args.shift();
          method = args.shift();
        } else {
          method = args.shift();
        }
      }

      var executeAt = (0, _backburnerUtils.now)() + parseInt(wait, 10);

      if ((0, _backburnerUtils.isString)(method)) {
        method = target[method];
      }

      var onError = getOnError(this.options);

      function fn() {
        if (onError) {
          try {
            method.apply(target, args);
          } catch (e) {
            onError(e);
          }
        } else {
          method.apply(target, args);
        }
      }

      // find position to insert
      var i = (0, _backburnerBinarySearch["default"])(executeAt, this._timers);

      this._timers.splice(i, 0, executeAt, fn);

      updateLaterTimer(this, executeAt, wait);

      return fn;
    },

    throttle: function (target, method /* , args, wait, [immediate] */) {
      var backburner = this;
      var args = new Array(arguments.length);
      for (var i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      var immediate = args.pop();
      var wait, throttler, index, timer;

      if ((0, _backburnerUtils.isNumber)(immediate) || (0, _backburnerUtils.isString)(immediate)) {
        wait = immediate;
        immediate = true;
      } else {
        wait = args.pop();
      }

      wait = parseInt(wait, 10);

      index = findThrottler(target, method, this._throttlers);
      if (index > -1) {
        return this._throttlers[index];
      } // throttled

      timer = _backburnerPlatform["default"].setTimeout(function () {
        if (!immediate) {
          backburner.run.apply(backburner, args);
        }
        var index = findThrottler(target, method, backburner._throttlers);
        if (index > -1) {
          backburner._throttlers.splice(index, 1);
        }
      }, wait);

      if (immediate) {
        this.run.apply(this, args);
      }

      throttler = [target, method, timer];

      this._throttlers.push(throttler);

      return throttler;
    },

    debounce: function (target, method /* , args, wait, [immediate] */) {
      var backburner = this;
      var args = new Array(arguments.length);
      for (var i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      var immediate = args.pop();
      var wait, index, debouncee, timer;

      if ((0, _backburnerUtils.isNumber)(immediate) || (0, _backburnerUtils.isString)(immediate)) {
        wait = immediate;
        immediate = false;
      } else {
        wait = args.pop();
      }

      wait = parseInt(wait, 10);
      // Remove debouncee
      index = findDebouncee(target, method, this._debouncees);

      if (index > -1) {
        debouncee = this._debouncees[index];
        this._debouncees.splice(index, 1);
        clearTimeout(debouncee[2]);
      }

      timer = _backburnerPlatform["default"].setTimeout(function () {
        if (!immediate) {
          backburner.run.apply(backburner, args);
        }
        var index = findDebouncee(target, method, backburner._debouncees);
        if (index > -1) {
          backburner._debouncees.splice(index, 1);
        }
      }, wait);

      if (immediate && index === -1) {
        backburner.run.apply(backburner, args);
      }

      debouncee = [target, method, timer];

      backburner._debouncees.push(debouncee);

      return debouncee;
    },

    cancelTimers: function () {
      var clearItems = function (item) {
        clearTimeout(item[2]);
      };

      (0, _backburnerUtils.each)(this._throttlers, clearItems);
      this._throttlers = [];

      (0, _backburnerUtils.each)(this._debouncees, clearItems);
      this._debouncees = [];

      if (this._laterTimer) {
        clearTimeout(this._laterTimer);
        this._laterTimer = null;
      }
      this._timers = [];

      if (this._autorun) {
        clearTimeout(this._autorun);
        this._autorun = null;
      }
    },

    hasTimers: function () {
      return !!this._timers.length || !!this._debouncees.length || !!this._throttlers.length || this._autorun;
    },

    cancel: function (timer) {
      var timerType = typeof timer;

      if (timer && timerType === 'object' && timer.queue && timer.method) {
        // we're cancelling a deferOnce
        return timer.queue.cancel(timer);
      } else if (timerType === 'function') {
        // we're cancelling a setTimeout
        for (var i = 0, l = this._timers.length; i < l; i += 2) {
          if (this._timers[i + 1] === timer) {
            this._timers.splice(i, 2); // remove the two elements
            if (i === 0) {
              if (this._laterTimer) {
                // Active timer? Then clear timer and reset for future timer
                clearTimeout(this._laterTimer);
                this._laterTimer = null;
              }
              if (this._timers.length > 0) {
                // Update to next available timer when available
                updateLaterTimer(this, this._timers[0], this._timers[0] - (0, _backburnerUtils.now)());
              }
            }
            return true;
          }
        }
      } else if (Object.prototype.toString.call(timer) === '[object Array]') {
        // we're cancelling a throttle or debounce
        return this._cancelItem(findThrottler, this._throttlers, timer) || this._cancelItem(findDebouncee, this._debouncees, timer);
      } else {
        return; // timer was null or not a timer
      }
    },

    _cancelItem: function (findMethod, array, timer) {
      var item, index;

      if (timer.length < 3) {
        return false;
      }

      index = findMethod(timer[0], timer[1], array);

      if (index > -1) {

        item = array[index];

        if (item[2] === timer[2]) {
          array.splice(index, 1);
          clearTimeout(timer[2]);
          return true;
        }
      }

      return false;
    }
  };

  Backburner.prototype.schedule = Backburner.prototype.defer;
  Backburner.prototype.scheduleOnce = Backburner.prototype.deferOnce;
  Backburner.prototype.later = Backburner.prototype.setTimeout;

  if (_backburnerPlatform.needsIETryCatchFix) {
    var originalRun = Backburner.prototype.run;
    Backburner.prototype.run = (0, _backburnerUtils.wrapInTryCatch)(originalRun);

    var originalEnd = Backburner.prototype.end;
    Backburner.prototype.end = (0, _backburnerUtils.wrapInTryCatch)(originalEnd);
  }

  function getOnError(options) {
    return options.onError || options.onErrorTarget && options.onErrorTarget[options.onErrorMethod];
  }

  function createAutorun(backburner) {
    backburner.begin();
    backburner._autorun = _backburnerPlatform["default"].setTimeout(function () {
      backburner._autorun = null;
      backburner.end();
    });
  }

  function updateLaterTimer(backburner, executeAt, wait) {
    var n = (0, _backburnerUtils.now)();
    if (!backburner._laterTimer || executeAt < backburner._laterTimerExpiresAt || backburner._laterTimerExpiresAt < n) {

      if (backburner._laterTimer) {
        // Clear when:
        // - Already expired
        // - New timer is earlier
        clearTimeout(backburner._laterTimer);

        if (backburner._laterTimerExpiresAt < n) {
          // If timer was never triggered
          // Calculate the left-over wait-time
          wait = Math.max(0, executeAt - n);
        }
      }

      backburner._laterTimer = _backburnerPlatform["default"].setTimeout(function () {
        backburner._laterTimer = null;
        backburner._laterTimerExpiresAt = null;
        executeTimers(backburner);
      }, wait);

      backburner._laterTimerExpiresAt = n + wait;
    }
  }

  function executeTimers(backburner) {
    var n = (0, _backburnerUtils.now)();
    var fns, i, l;

    backburner.run(function () {
      i = (0, _backburnerBinarySearch["default"])(n, backburner._timers);

      fns = backburner._timers.splice(0, i);

      for (i = 1, l = fns.length; i < l; i += 2) {
        backburner.schedule(backburner.options.defaultQueue, null, fns[i]);
      }
    });

    if (backburner._timers.length) {
      updateLaterTimer(backburner, backburner._timers[0], backburner._timers[0] - n);
    }
  }

  function findDebouncee(target, method, debouncees) {
    return findItem(target, method, debouncees);
  }

  function findThrottler(target, method, throttlers) {
    return findItem(target, method, throttlers);
  }

  function findItem(target, method, collection) {
    var item;
    var index = -1;

    for (var i = 0, l = collection.length; i < l; i++) {
      item = collection[i];
      if (item[0] === target && item[1] === method) {
        index = i;
        break;
      }
    }

    return index;
  }
});
/* target, method, args */ /* target, method, args */
enifed("backburner/binary-search", ["exports"], function (exports) {
  exports["default"] = binarySearch;

  function binarySearch(time, timers) {
    var start = 0;
    var end = timers.length - 2;
    var middle, l;

    while (start < end) {
      // since timers is an array of pairs 'l' will always
      // be an integer
      l = (end - start) / 2;

      // compensate for the index in case even number
      // of pairs inside timers
      middle = start + l - l % 2;

      if (time >= timers[middle]) {
        start = middle + 2;
      } else {
        end = middle;
      }
    }

    return time >= timers[start] ? start + 2 : start;
  }
});
enifed('backburner/deferred-action-queues', ['exports', './utils', './queue'], function (exports, _utils, _queue) {
  exports["default"] = DeferredActionQueues;

  function DeferredActionQueues(queueNames, options) {
    var queues = this.queues = {};
    this.queueNames = queueNames = queueNames || [];

    this.options = options;

    (0, _utils.each)(queueNames, function (queueName) {
      queues[queueName] = new _queue["default"](queueName, options[queueName], options);
    });
  }

  function noSuchQueue(name) {
    throw new Error('You attempted to schedule an action in a queue (' + name + ') that doesn\'t exist');
  }

  DeferredActionQueues.prototype = {
    schedule: function (name, target, method, args, onceFlag, stack) {
      var queues = this.queues;
      var queue = queues[name];

      if (!queue) {
        noSuchQueue(name);
      }

      if (onceFlag) {
        return queue.pushUnique(target, method, args, stack);
      } else {
        return queue.push(target, method, args, stack);
      }
    },

    flush: function () {
      var queues = this.queues;
      var queueNames = this.queueNames;
      var queueName, queue, queueItems, priorQueueNameIndex;
      var queueNameIndex = 0;
      var numberOfQueues = queueNames.length;
      var options = this.options;

      while (queueNameIndex < numberOfQueues) {
        queueName = queueNames[queueNameIndex];
        queue = queues[queueName];

        var numberOfQueueItems = queue._queue.length;

        if (numberOfQueueItems === 0) {
          queueNameIndex++;
        } else {
          queue.flush(false /* async */);
          queueNameIndex = 0;
        }
      }
    }
  };
});
enifed('backburner/platform', ['exports'], function (exports) {
  // In IE 6-8, try/finally doesn't work without a catch.
  // Unfortunately, this is impossible to test for since wrapping it in a parent try/catch doesn't trigger the bug.
  // This tests for another broken try/catch behavior that only exhibits in the same versions of IE.
  var needsIETryCatchFix = (function (e, x) {
    try {
      x();
    } catch (e) {} // jshint ignore:line
    return !!e;
  })();

  exports.needsIETryCatchFix = needsIETryCatchFix;
  var platform;

  /* global self */
  if (typeof self === 'object') {
    platform = self;

    /* global global */
  } else if (typeof global === 'object') {
    platform = global;
  } else {
    throw new Error('no global: `self` or `global` found');
  }

  exports["default"] = platform;
});
enifed('backburner/queue', ['exports', './utils'], function (exports, _utils) {
  exports["default"] = Queue;

  function Queue(name, options, globalOptions) {
    this.name = name;
    this.globalOptions = globalOptions || {};
    this.options = options;
    this._queue = [];
    this.targetQueues = {};
    this._queueBeingFlushed = undefined;
  }

  Queue.prototype = {
    push: function (target, method, args, stack) {
      var queue = this._queue;
      queue.push(target, method, args, stack);

      return {
        queue: this,
        target: target,
        method: method
      };
    },

    pushUniqueWithoutGuid: function (target, method, args, stack) {
      var queue = this._queue;

      for (var i = 0, l = queue.length; i < l; i += 4) {
        var currentTarget = queue[i];
        var currentMethod = queue[i + 1];

        if (currentTarget === target && currentMethod === method) {
          queue[i + 2] = args; // replace args
          queue[i + 3] = stack; // replace stack
          return;
        }
      }

      queue.push(target, method, args, stack);
    },

    targetQueue: function (targetQueue, target, method, args, stack) {
      var queue = this._queue;

      for (var i = 0, l = targetQueue.length; i < l; i += 2) {
        var currentMethod = targetQueue[i];
        var currentIndex = targetQueue[i + 1];

        if (currentMethod === method) {
          queue[currentIndex + 2] = args; // replace args
          queue[currentIndex + 3] = stack; // replace stack
          return;
        }
      }

      targetQueue.push(method, queue.push(target, method, args, stack) - 4);
    },

    pushUniqueWithGuid: function (guid, target, method, args, stack) {
      var hasLocalQueue = this.targetQueues[guid];

      if (hasLocalQueue) {
        this.targetQueue(hasLocalQueue, target, method, args, stack);
      } else {
        this.targetQueues[guid] = [method, this._queue.push(target, method, args, stack) - 4];
      }

      return {
        queue: this,
        target: target,
        method: method
      };
    },

    pushUnique: function (target, method, args, stack) {
      var queue = this._queue,
          currentTarget,
          currentMethod,
          i,
          l;
      var KEY = this.globalOptions.GUID_KEY;

      if (target && KEY) {
        var guid = target[KEY];
        if (guid) {
          return this.pushUniqueWithGuid(guid, target, method, args, stack);
        }
      }

      this.pushUniqueWithoutGuid(target, method, args, stack);

      return {
        queue: this,
        target: target,
        method: method
      };
    },

    invoke: function (target, method, args, _, _errorRecordedForStack) {
      if (args && args.length > 0) {
        method.apply(target, args);
      } else {
        method.call(target);
      }
    },

    invokeWithOnError: function (target, method, args, onError, errorRecordedForStack) {
      try {
        if (args && args.length > 0) {
          method.apply(target, args);
        } else {
          method.call(target);
        }
      } catch (error) {
        onError(error, errorRecordedForStack);
      }
    },

    flush: function (sync) {
      var queue = this._queue;
      var length = queue.length;

      if (length === 0) {
        return;
      }

      var globalOptions = this.globalOptions;
      var options = this.options;
      var before = options && options.before;
      var after = options && options.after;
      var onError = globalOptions.onError || globalOptions.onErrorTarget && globalOptions.onErrorTarget[globalOptions.onErrorMethod];
      var target, method, args, errorRecordedForStack;
      var invoke = onError ? this.invokeWithOnError : this.invoke;

      this.targetQueues = Object.create(null);
      var queueItems = this._queueBeingFlushed = this._queue.slice();
      this._queue = [];

      if (before) {
        before();
      }

      for (var i = 0; i < length; i += 4) {
        target = queueItems[i];
        method = queueItems[i + 1];
        args = queueItems[i + 2];
        errorRecordedForStack = queueItems[i + 3]; // Debugging assistance

        if ((0, _utils.isString)(method)) {
          method = target[method];
        }

        // method could have been nullified / canceled during flush
        if (method) {
          //
          //    ** Attention intrepid developer **
          //
          //    To find out the stack of this task when it was scheduled onto
          //    the run loop, add the following to your app.js:
          //
          //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.
          //
          //    Once that is in place, when you are at a breakpoint and navigate
          //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,
          //    which will be the captured stack when this job was scheduled.
          //
          invoke(target, method, args, onError, errorRecordedForStack);
        }
      }

      if (after) {
        after();
      }

      this._queueBeingFlushed = undefined;

      if (sync !== false && this._queue.length > 0) {
        // check if new items have been added
        this.flush(true);
      }
    },

    cancel: function (actionToCancel) {
      var queue = this._queue,
          currentTarget,
          currentMethod,
          i,
          l;
      var target = actionToCancel.target;
      var method = actionToCancel.method;
      var GUID_KEY = this.globalOptions.GUID_KEY;

      if (GUID_KEY && this.targetQueues && target) {
        var targetQueue = this.targetQueues[target[GUID_KEY]];

        if (targetQueue) {
          for (i = 0, l = targetQueue.length; i < l; i++) {
            if (targetQueue[i] === method) {
              targetQueue.splice(i, 1);
            }
          }
        }
      }

      for (i = 0, l = queue.length; i < l; i += 4) {
        currentTarget = queue[i];
        currentMethod = queue[i + 1];

        if (currentTarget === target && currentMethod === method) {
          queue.splice(i, 4);
          return true;
        }
      }

      // if not found in current queue
      // could be in the queue that is being flushed
      queue = this._queueBeingFlushed;

      if (!queue) {
        return;
      }

      for (i = 0, l = queue.length; i < l; i += 4) {
        currentTarget = queue[i];
        currentMethod = queue[i + 1];

        if (currentTarget === target && currentMethod === method) {
          // don't mess with array during flush
          // just nullify the method
          queue[i + 1] = null;
          return true;
        }
      }
    }
  };
});
enifed('backburner/utils', ['exports'], function (exports) {
  exports.each = each;
  exports.isString = isString;
  exports.isFunction = isFunction;
  exports.isNumber = isNumber;
  exports.isCoercableNumber = isCoercableNumber;
  exports.wrapInTryCatch = wrapInTryCatch;
  var NUMBER = /\d+/;

  function each(collection, callback) {
    for (var i = 0; i < collection.length; i++) {
      callback(collection[i]);
    }
  }

  // Date.now is not available in browsers < IE9
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility
  var now = Date.now || function () {
    return new Date().getTime();
  };

  exports.now = now;

  function isString(suspect) {
    return typeof suspect === 'string';
  }

  function isFunction(suspect) {
    return typeof suspect === 'function';
  }

  function isNumber(suspect) {
    return typeof suspect === 'number';
  }

  function isCoercableNumber(number) {
    return isNumber(number) || NUMBER.test(number);
  }

  function wrapInTryCatch(func) {
    return function () {
      try {
        return func.apply(this, arguments);
      } catch (e) {
        throw e;
      }
    };
  }
});
enifed('calculateVersion', ['exports'], function (exports) {
  'use strict';

  var fs = eriuqer('fs');
  var path = eriuqer('path');

  module.exports = function () {
    var packageVersion = eriuqer('../package.json').version;
    var output = [packageVersion];
    var gitPath = path.join(__dirname, '..', '.git');
    var headFilePath = path.join(gitPath, 'HEAD');

    if (packageVersion.indexOf('+') > -1) {
      try {
        if (fs.existsSync(headFilePath)) {
          var headFile = fs.readFileSync(headFilePath, { encoding: 'utf8' });
          var branchName = headFile.split('/').slice(-1)[0].trim();
          var refPath = headFile.split(' ')[1];
          var branchSHA;

          if (refPath) {
            var branchPath = path.join(gitPath, refPath.trim());
            branchSHA = fs.readFileSync(branchPath);
          } else {
            branchSHA = branchName;
          }

          output.push(branchSHA.slice(0, 10));
        }
      } catch (err) {
        console.error(err.stack);
      }
      return output.join('.');
    } else {
      return packageVersion;
    }
  };
});
enifed('container', ['exports', 'container/registry', 'container/container'], function (exports, _containerRegistry, _containerContainer) {
  /*
  Public api for the container is still in flux.
  The public api, specified on the application namespace should be considered the stable api.
  // @module container
    @private
  */

  /*
   Flag to enable/disable model factory injections (disabled by default)
   If model factory injections are enabled, models should not be
   accessed globally (only through `container.lookupFactory('model:modelName'))`);
  */
  Ember.MODEL_FACTORY_INJECTIONS = false;

  if (Ember.ENV && typeof Ember.ENV.MODEL_FACTORY_INJECTIONS !== 'undefined') {
    Ember.MODEL_FACTORY_INJECTIONS = !!Ember.ENV.MODEL_FACTORY_INJECTIONS;
  }

  exports.Registry = _containerRegistry["default"];
  exports.Container = _containerContainer["default"];
});
enifed('container/container', ['exports', 'ember-metal/core', 'ember-metal/keys', 'ember-metal/dictionary'], function (exports, _emberMetalCore, _emberMetalKeys, _emberMetalDictionary) {

  // TODO - Temporary workaround for v0.4.0 of the ES6 transpiler, which lacks support for circular dependencies.
  // See the below usage of requireModule. Instead, it should be possible to simply `import Registry from './registry';`
  var Registry;

  /**
   A container used to instantiate and cache objects.
  
   Every `Container` must be associated with a `Registry`, which is referenced
   to determine the factory and options that should be used to instantiate
   objects.
  
   The public API for `Container` is still in flux and should not be considered
   stable.
  
   @private
   @class Container
   */
  function Container(registry, options) {
    this._registry = registry || (function () {
      _emberMetalCore["default"].deprecate('A container should only be created for an already instantiated registry. For backward compatibility, an isolated registry will be instantiated just for this container.');

      // TODO - See note above about transpiler import workaround.
      if (!Registry) {
        Registry = requireModule('container/registry')['default'];
      }

      return new Registry();
    })();

    this.cache = (0, _emberMetalDictionary["default"])(options && options.cache ? options.cache : null);
    this.factoryCache = (0, _emberMetalDictionary["default"])(options && options.factoryCache ? options.factoryCache : null);
    this.validationCache = (0, _emberMetalDictionary["default"])(options && options.validationCache ? options.validationCache : null);
  }

  Container.prototype = {
    /**
     @private
      @property _registry
     @type Registry
     @since 1.11.0
     */
    _registry: null,

    /**
     @private
      @property cache
     @type InheritingDict
     */
    cache: null,

    /**
     @private
     @property factoryCache
     @type InheritingDict
     */
    factoryCache: null,

    /**
     @private
     @property validationCache
     @type InheritingDict
     */
    validationCache: null,

    /**
     Given a fullName return a corresponding instance.
      The default behaviour is for lookup to return a singleton instance.
     The singleton is scoped to the container, allowing multiple containers
     to all have their own locally scoped singletons.
      ```javascript
     var registry = new Registry();
     var container = registry.container();
      registry.register('api:twitter', Twitter);
      var twitter = container.lookup('api:twitter');
      twitter instanceof Twitter; // => true
      // by default the container will return singletons
     var twitter2 = container.lookup('api:twitter');
     twitter2 instanceof Twitter; // => true
      twitter === twitter2; //=> true
     ```
      If singletons are not wanted an optional flag can be provided at lookup.
      ```javascript
     var registry = new Registry();
     var container = registry.container();
      registry.register('api:twitter', Twitter);
      var twitter = container.lookup('api:twitter', { singleton: false });
     var twitter2 = container.lookup('api:twitter', { singleton: false });
      twitter === twitter2; //=> false
     ```
      @private
     @method lookup
     @param {String} fullName
     @param {Object} options
     @return {any}
     */
    lookup: function (fullName, options) {
      _emberMetalCore["default"].assert('fullName must be a proper full name', this._registry.validateFullName(fullName));
      return lookup(this, this._registry.normalize(fullName), options);
    },

    /**
     Given a fullName return the corresponding factory.
      @private
     @method lookupFactory
     @param {String} fullName
     @return {any}
     */
    lookupFactory: function (fullName) {
      _emberMetalCore["default"].assert('fullName must be a proper full name', this._registry.validateFullName(fullName));
      return factoryFor(this, this._registry.normalize(fullName));
    },

    /**
     A depth first traversal, destroying the container, its descendant containers and all
     their managed objects.
      @private
     @method destroy
     */
    destroy: function () {
      eachDestroyable(this, function (item) {
        if (item.destroy) {
          item.destroy();
        }
      });

      this.isDestroyed = true;
    },

    /**
     Clear either the entire cache or just the cache for a particular key.
      @private
     @method reset
     @param {String} fullName optional key to reset; if missing, resets everything
     */
    reset: function (fullName) {
      if (arguments.length > 0) {
        resetMember(this, this._registry.normalize(fullName));
      } else {
        resetCache(this);
      }
    }
  };

  (function exposeRegistryMethods() {
    var methods = ['register', 'unregister', 'resolve', 'normalize', 'typeInjection', 'injection', 'factoryInjection', 'factoryTypeInjection', 'has', 'options', 'optionsForType'];

    function exposeRegistryMethod(method) {
      Container.prototype[method] = function () {
        _emberMetalCore["default"].deprecate(method + ' should be called on the registry instead of the container');
        return this._registry[method].apply(this._registry, arguments);
      };
    }

    for (var i = 0, l = methods.length; i < l; i++) {
      exposeRegistryMethod(methods[i]);
    }
  })();

  function lookup(container, fullName, options) {
    options = options || {};

    if (container.cache[fullName] && options.singleton !== false) {
      return container.cache[fullName];
    }

    var value = instantiate(container, fullName);

    if (value === undefined) {
      return;
    }

    if (container._registry.getOption(fullName, 'singleton') !== false && options.singleton !== false) {
      container.cache[fullName] = value;
    }

    return value;
  }

  function buildInjections(container) {
    var hash = {};

    if (arguments.length > 1) {
      var injectionArgs = Array.prototype.slice.call(arguments, 1);
      var injections = [];
      var injection;

      for (var i = 0, l = injectionArgs.length; i < l; i++) {
        if (injectionArgs[i]) {
          injections = injections.concat(injectionArgs[i]);
        }
      }

      container._registry.validateInjections(injections);

      for (i = 0, l = injections.length; i < l; i++) {
        injection = injections[i];
        hash[injection.property] = lookup(container, injection.fullName);
      }
    }

    return hash;
  }

  function factoryFor(container, fullName) {
    var cache = container.factoryCache;
    if (cache[fullName]) {
      return cache[fullName];
    }
    var registry = container._registry;
    var factory = registry.resolve(fullName);
    if (factory === undefined) {
      return;
    }

    var type = fullName.split(':')[0];
    if (!factory || typeof factory.extend !== 'function' || !_emberMetalCore["default"].MODEL_FACTORY_INJECTIONS && type === 'model') {
      if (factory && typeof factory._onLookup === 'function') {
        factory._onLookup(fullName);
      }

      // TODO: think about a 'safe' merge style extension
      // for now just fallback to create time injection
      cache[fullName] = factory;
      return factory;
    } else {
      var injections = injectionsFor(container, fullName);
      var factoryInjections = factoryInjectionsFor(container, fullName);

      factoryInjections._toString = registry.makeToString(factory, fullName);

      var injectedFactory = factory.extend(injections);
      injectedFactory.reopenClass(factoryInjections);

      if (factory && typeof factory._onLookup === 'function') {
        factory._onLookup(fullName);
      }

      cache[fullName] = injectedFactory;

      return injectedFactory;
    }
  }

  function injectionsFor(container, fullName) {
    var registry = container._registry;
    var splitName = fullName.split(':');
    var type = splitName[0];

    var injections = buildInjections(container, registry.getTypeInjections(type), registry.getInjections(fullName));
    injections._debugContainerKey = fullName;
    injections.container = container;

    return injections;
  }

  function factoryInjectionsFor(container, fullName) {
    var registry = container._registry;
    var splitName = fullName.split(':');
    var type = splitName[0];

    var factoryInjections = buildInjections(container, registry.getFactoryTypeInjections(type), registry.getFactoryInjections(fullName));
    factoryInjections._debugContainerKey = fullName;

    return factoryInjections;
  }

  function instantiate(container, fullName) {
    var factory = factoryFor(container, fullName);
    var lazyInjections, validationCache;

    if (container._registry.getOption(fullName, 'instantiate') === false) {
      return factory;
    }

    if (factory) {
      if (typeof factory.create !== 'function') {
        throw new Error('Failed to create an instance of \'' + fullName + '\'. ' + 'Most likely an improperly defined class or an invalid module export.');
      }

      validationCache = container.validationCache;

      // Ensure that all lazy injections are valid at instantiation time
      if (!validationCache[fullName] && typeof factory._lazyInjections === 'function') {
        lazyInjections = factory._lazyInjections();
        lazyInjections = container._registry.normalizeInjectionsHash(lazyInjections);

        container._registry.validateInjections(lazyInjections);
      }

      validationCache[fullName] = true;

      if (typeof factory.extend === 'function') {
        // assume the factory was extendable and is already injected
        return factory.create();
      } else {
        // assume the factory was extendable
        // to create time injections
        // TODO: support new'ing for instantiation and merge injections for pure JS Functions
        return factory.create(injectionsFor(container, fullName));
      }
    }
  }

  function eachDestroyable(container, callback) {
    var cache = container.cache;
    var keys = (0, _emberMetalKeys["default"])(cache);
    var key, value;

    for (var i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      value = cache[key];

      if (container._registry.getOption(key, 'instantiate') !== false) {
        callback(value);
      }
    }
  }

  function resetCache(container) {
    eachDestroyable(container, function (value) {
      if (value.destroy) {
        value.destroy();
      }
    });

    container.cache.dict = (0, _emberMetalDictionary["default"])(null);
  }

  function resetMember(container, fullName) {
    var member = container.cache[fullName];

    delete container.factoryCache[fullName];

    if (member) {
      delete container.cache[fullName];

      if (member.destroy) {
        member.destroy();
      }
    }
  }

  exports["default"] = Container;
});
// Ember.assert
enifed('container/registry', ['exports', 'ember-metal/core', 'ember-metal/dictionary', 'ember-metal/keys', 'ember-metal/merge', './container'], function (exports, _emberMetalCore, _emberMetalDictionary, _emberMetalKeys, _emberMetalMerge, _container) {

  var VALID_FULL_NAME_REGEXP = /^[^:]+.+:[^:]+$/;

  var instanceInitializersFeatureEnabled;
  if (_emberMetalCore["default"].FEATURES.isEnabled('ember-application-instance-initializers')) {
    instanceInitializersFeatureEnabled = true;
  }

  /**
   A registry used to store factory and option information keyed
   by type.
  
   A `Registry` stores the factory and option information needed by a
   `Container` to instantiate and cache objects.
  
   The public API for `Registry` is still in flux and should not be considered
   stable.
  
   @private
   @class Registry
   @since 1.11.0
  */
  function Registry(options) {
    this.fallback = options && options.fallback ? options.fallback : null;

    this.resolver = options && options.resolver ? options.resolver : function () {};

    this.registrations = (0, _emberMetalDictionary["default"])(options && options.registrations ? options.registrations : null);

    this._typeInjections = (0, _emberMetalDictionary["default"])(null);
    this._injections = (0, _emberMetalDictionary["default"])(null);
    this._factoryTypeInjections = (0, _emberMetalDictionary["default"])(null);
    this._factoryInjections = (0, _emberMetalDictionary["default"])(null);

    this._normalizeCache = (0, _emberMetalDictionary["default"])(null);
    this._resolveCache = (0, _emberMetalDictionary["default"])(null);
    this._failCache = (0, _emberMetalDictionary["default"])(null);

    this._options = (0, _emberMetalDictionary["default"])(null);
    this._typeOptions = (0, _emberMetalDictionary["default"])(null);
  }

  Registry.prototype = {
    /**
     A backup registry for resolving registrations when no matches can be found.
      @private
     @property fallback
     @type Registry
     */
    fallback: null,

    /**
     @private
     @property resolver
     @type function
     */
    resolver: null,

    /**
     @private
     @property registrations
     @type InheritingDict
     */
    registrations: null,

    /**
     @private
      @property _typeInjections
     @type InheritingDict
     */
    _typeInjections: null,

    /**
     @private
      @property _injections
     @type InheritingDict
     */
    _injections: null,

    /**
     @private
      @property _factoryTypeInjections
     @type InheritingDict
     */
    _factoryTypeInjections: null,

    /**
     @private
      @property _factoryInjections
     @type InheritingDict
     */
    _factoryInjections: null,

    /**
     @private
      @property _normalizeCache
     @type InheritingDict
     */
    _normalizeCache: null,

    /**
     @private
      @property _resolveCache
     @type InheritingDict
     */
    _resolveCache: null,

    /**
     @private
      @property _options
     @type InheritingDict
     */
    _options: null,

    /**
     @private
      @property _typeOptions
     @type InheritingDict
     */
    _typeOptions: null,

    /**
     The first container created for this registry.
      This allows deprecated access to `lookup` and `lookupFactory` to avoid
     breaking compatibility for Ember 1.x initializers.
      @private
     @property _defaultContainer
     @type Container
     */
    _defaultContainer: null,

    /**
     Creates a container based on this registry.
      @private
     @method container
     @param {Object} options
     @return {Container} created container
     */
    container: function (options) {
      var container = new _container["default"](this, options);

      // 2.0TODO - remove `registerContainer`
      this.registerContainer(container);

      return container;
    },

    /**
     Register the first container created for a registery to allow deprecated
     access to its `lookup` and `lookupFactory` methods to avoid breaking
     compatibility for Ember 1.x initializers.
      2.0TODO: Remove this method. The bookkeeping is only needed to support
              deprecated behavior.
      @private
     @param {Container} newly created container
     */
    registerContainer: function (container) {
      if (!this._defaultContainer) {
        this._defaultContainer = container;
      }
      if (this.fallback) {
        this.fallback.registerContainer(container);
      }
    },

    lookup: function (fullName, options) {
      _emberMetalCore["default"].assert('Create a container on the registry (with `registry.container()`) before calling `lookup`.', this._defaultContainer);

      if (instanceInitializersFeatureEnabled) {
        _emberMetalCore["default"].deprecate('`lookup` was called on a Registry. The `initializer` API no longer receives a container, and you should use an `instanceInitializer` to look up objects from the container.', false, { url: 'http://emberjs.com/guides/deprecations#toc_deprecate-access-to-instances-in-initializers' });
      }

      return this._defaultContainer.lookup(fullName, options);
    },

    lookupFactory: function (fullName) {
      _emberMetalCore["default"].assert('Create a container on the registry (with `registry.container()`) before calling `lookupFactory`.', this._defaultContainer);

      if (instanceInitializersFeatureEnabled) {
        _emberMetalCore["default"].deprecate('`lookupFactory` was called on a Registry. The `initializer` API no longer receives a container, and you should use an `instanceInitializer` to look up objects from the container.', false, { url: 'http://emberjs.com/guides/deprecations#toc_deprecate-access-to-instances-in-initializers' });
      }

      return this._defaultContainer.lookupFactory(fullName);
    },

    /**
     Registers a factory for later injection.
      Example:
      ```javascript
     var registry = new Registry();
      registry.register('model:user', Person, {singleton: false });
     registry.register('fruit:favorite', Orange);
     registry.register('communication:main', Email, {singleton: false});
     ```
      @private
     @method register
     @param {String} fullName
     @param {Function} factory
     @param {Object} options
     */
    register: function (fullName, factory, options) {
      _emberMetalCore["default"].assert('fullName must be a proper full name', this.validateFullName(fullName));

      if (factory === undefined) {
        throw new TypeError('Attempting to register an unknown factory: `' + fullName + '`');
      }

      var normalizedName = this.normalize(fullName);

      if (this._resolveCache[normalizedName]) {
        throw new Error('Cannot re-register: `' + fullName + '`, as it has already been resolved.');
      }

      delete this._failCache[normalizedName];
      this.registrations[normalizedName] = factory;
      this._options[normalizedName] = options || {};
    },

    /**
     Unregister a fullName
      ```javascript
     var registry = new Registry();
     registry.register('model:user', User);
      registry.resolve('model:user').create() instanceof User //=> true
      registry.unregister('model:user')
     registry.resolve('model:user') === undefined //=> true
     ```
      @private
     @method unregister
     @param {String} fullName
     */
    unregister: function (fullName) {
      _emberMetalCore["default"].assert('fullName must be a proper full name', this.validateFullName(fullName));

      var normalizedName = this.normalize(fullName);

      delete this.registrations[normalizedName];
      delete this._resolveCache[normalizedName];
      delete this._failCache[normalizedName];
      delete this._options[normalizedName];
    },

    /**
     Given a fullName return the corresponding factory.
      By default `resolve` will retrieve the factory from
     the registry.
      ```javascript
     var registry = new Registry();
     registry.register('api:twitter', Twitter);
      registry.resolve('api:twitter') // => Twitter
     ```
      Optionally the registry can be provided with a custom resolver.
     If provided, `resolve` will first provide the custom resolver
     the opportunity to resolve the fullName, otherwise it will fallback
     to the registry.
      ```javascript
     var registry = new Registry();
     registry.resolver = function(fullName) {
        // lookup via the module system of choice
      };
      // the twitter factory is added to the module system
     registry.resolve('api:twitter') // => Twitter
     ```
      @private
     @method resolve
     @param {String} fullName
     @return {Function} fullName's factory
     */
    resolve: function (fullName) {
      _emberMetalCore["default"].assert('fullName must be a proper full name', this.validateFullName(fullName));
      var factory = resolve(this, this.normalize(fullName));
      if (factory === undefined && this.fallback) {
        factory = this.fallback.resolve(fullName);
      }
      return factory;
    },

    /**
     A hook that can be used to describe how the resolver will
     attempt to find the factory.
      For example, the default Ember `.describe` returns the full
     class name (including namespace) where Ember's resolver expects
     to find the `fullName`.
      @private
     @method describe
     @param {String} fullName
     @return {string} described fullName
     */
    describe: function (fullName) {
      return fullName;
    },

    /**
     A hook to enable custom fullName normalization behaviour
      @private
     @method normalizeFullName
     @param {String} fullName
     @return {string} normalized fullName
     */
    normalizeFullName: function (fullName) {
      return fullName;
    },

    /**
     normalize a fullName based on the applications conventions
      @private
     @method normalize
     @param {String} fullName
     @return {string} normalized fullName
     */
    normalize: function (fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this.normalizeFullName(fullName));
    },

    /**
     @method makeToString
      @private
     @param {any} factory
     @param {string} fullName
     @return {function} toString function
     */
    makeToString: function (factory, fullName) {
      return factory.toString();
    },

    /**
     Given a fullName check if the container is aware of its factory
     or singleton instance.
      @private
     @method has
     @param {String} fullName
     @return {Boolean}
     */
    has: function (fullName) {
      _emberMetalCore["default"].assert('fullName must be a proper full name', this.validateFullName(fullName));
      return has(this, this.normalize(fullName));
    },

    /**
     Allow registering options for all factories of a type.
      ```javascript
     var registry = new Registry();
     var container = registry.container();
      // if all of type `connection` must not be singletons
     registry.optionsForType('connection', { singleton: false });
      registry.register('connection:twitter', TwitterConnection);
     registry.register('connection:facebook', FacebookConnection);
      var twitter = container.lookup('connection:twitter');
     var twitter2 = container.lookup('connection:twitter');
      twitter === twitter2; // => false
      var facebook = container.lookup('connection:facebook');
     var facebook2 = container.lookup('connection:facebook');
      facebook === facebook2; // => false
     ```
      @private
     @method optionsForType
     @param {String} type
     @param {Object} options
     */
    optionsForType: function (type, options) {
      this._typeOptions[type] = options;
    },

    getOptionsForType: function (type) {
      var optionsForType = this._typeOptions[type];
      if (optionsForType === undefined && this.fallback) {
        optionsForType = this.fallback.getOptionsForType(type);
      }
      return optionsForType;
    },

    /**
     @private
     @method options
     @param {String} fullName
     @param {Object} options
     */
    options: function (fullName, options) {
      options = options || {};
      var normalizedName = this.normalize(fullName);
      this._options[normalizedName] = options;
    },

    getOptions: function (fullName) {
      var normalizedName = this.normalize(fullName);
      var options = this._options[normalizedName];
      if (options === undefined && this.fallback) {
        options = this.fallback.getOptions(fullName);
      }
      return options;
    },

    getOption: function (fullName, optionName) {
      var options = this._options[fullName];

      if (options && options[optionName] !== undefined) {
        return options[optionName];
      }

      var type = fullName.split(':')[0];
      options = this._typeOptions[type];

      if (options && options[optionName] !== undefined) {
        return options[optionName];
      } else if (this.fallback) {
        return this.fallback.getOption(fullName, optionName);
      }
    },

    option: function (fullName, optionName) {
      _emberMetalCore["default"].deprecate('`Registry.option()` has been deprecated. Call `Registry.getOption()` instead.');
      return this.getOption(fullName, optionName);
    },

    /**
     Used only via `injection`.
      Provides a specialized form of injection, specifically enabling
     all objects of one type to be injected with a reference to another
     object.
      For example, provided each object of type `controller` needed a `router`.
     one would do the following:
      ```javascript
     var registry = new Registry();
     var container = registry.container();
      registry.register('router:main', Router);
     registry.register('controller:user', UserController);
     registry.register('controller:post', PostController);
      registry.typeInjection('controller', 'router', 'router:main');
      var user = container.lookup('controller:user');
     var post = container.lookup('controller:post');
      user.router instanceof Router; //=> true
     post.router instanceof Router; //=> true
      // both controllers share the same router
     user.router === post.router; //=> true
     ```
      @private
     @method typeInjection
     @param {String} type
     @param {String} property
     @param {String} fullName
     */
    typeInjection: function (type, property, fullName) {
      _emberMetalCore["default"].assert('fullName must be a proper full name', this.validateFullName(fullName));

      var fullNameType = fullName.split(':')[0];
      if (fullNameType === type) {
        throw new Error('Cannot inject a `' + fullName + '` on other ' + type + '(s).');
      }

      var injections = this._typeInjections[type] || (this._typeInjections[type] = []);

      injections.push({
        property: property,
        fullName: fullName
      });
    },

    /**
     Defines injection rules.
      These rules are used to inject dependencies onto objects when they
     are instantiated.
      Two forms of injections are possible:
      * Injecting one fullName on another fullName
     * Injecting one fullName on a type
      Example:
      ```javascript
     var registry = new Registry();
     var container = registry.container();
      registry.register('source:main', Source);
     registry.register('model:user', User);
     registry.register('model:post', Post);
      // injecting one fullName on another fullName
     // eg. each user model gets a post model
     registry.injection('model:user', 'post', 'model:post');
      // injecting one fullName on another type
     registry.injection('model', 'source', 'source:main');
      var user = container.lookup('model:user');
     var post = container.lookup('model:post');
      user.source instanceof Source; //=> true
     post.source instanceof Source; //=> true
      user.post instanceof Post; //=> true
      // and both models share the same source
     user.source === post.source; //=> true
     ```
      @private
     @method injection
     @param {String} factoryName
     @param {String} property
     @param {String} injectionName
     */
    injection: function (fullName, property, injectionName) {
      this.validateFullName(injectionName);
      var normalizedInjectionName = this.normalize(injectionName);

      if (fullName.indexOf(':') === -1) {
        return this.typeInjection(fullName, property, normalizedInjectionName);
      }

      _emberMetalCore["default"].assert('fullName must be a proper full name', this.validateFullName(fullName));
      var normalizedName = this.normalize(fullName);

      var injections = this._injections[normalizedName] || (this._injections[normalizedName] = []);

      injections.push({
        property: property,
        fullName: normalizedInjectionName
      });
    },

    /**
     Used only via `factoryInjection`.
      Provides a specialized form of injection, specifically enabling
     all factory of one type to be injected with a reference to another
     object.
      For example, provided each factory of type `model` needed a `store`.
     one would do the following:
      ```javascript
     var registry = new Registry();
      registry.register('store:main', SomeStore);
      registry.factoryTypeInjection('model', 'store', 'store:main');
      var store = registry.lookup('store:main');
     var UserFactory = registry.lookupFactory('model:user');
      UserFactory.store instanceof SomeStore; //=> true
     ```
      @private
     @method factoryTypeInjection
     @param {String} type
     @param {String} property
     @param {String} fullName
     */
    factoryTypeInjection: function (type, property, fullName) {
      var injections = this._factoryTypeInjections[type] || (this._factoryTypeInjections[type] = []);

      injections.push({
        property: property,
        fullName: this.normalize(fullName)
      });
    },

    /**
     Defines factory injection rules.
      Similar to regular injection rules, but are run against factories, via
     `Registry#lookupFactory`.
      These rules are used to inject objects onto factories when they
     are looked up.
      Two forms of injections are possible:
      * Injecting one fullName on another fullName
     * Injecting one fullName on a type
      Example:
      ```javascript
     var registry = new Registry();
     var container = registry.container();
      registry.register('store:main', Store);
     registry.register('store:secondary', OtherStore);
     registry.register('model:user', User);
     registry.register('model:post', Post);
      // injecting one fullName on another type
     registry.factoryInjection('model', 'store', 'store:main');
      // injecting one fullName on another fullName
     registry.factoryInjection('model:post', 'secondaryStore', 'store:secondary');
      var UserFactory = container.lookupFactory('model:user');
     var PostFactory = container.lookupFactory('model:post');
     var store = container.lookup('store:main');
      UserFactory.store instanceof Store; //=> true
     UserFactory.secondaryStore instanceof OtherStore; //=> false
      PostFactory.store instanceof Store; //=> true
     PostFactory.secondaryStore instanceof OtherStore; //=> true
      // and both models share the same source instance
     UserFactory.store === PostFactory.store; //=> true
     ```
      @private
     @method factoryInjection
     @param {String} factoryName
     @param {String} property
     @param {String} injectionName
     */
    factoryInjection: function (fullName, property, injectionName) {
      var normalizedName = this.normalize(fullName);
      var normalizedInjectionName = this.normalize(injectionName);

      this.validateFullName(injectionName);

      if (fullName.indexOf(':') === -1) {
        return this.factoryTypeInjection(normalizedName, property, normalizedInjectionName);
      }

      var injections = this._factoryInjections[normalizedName] || (this._factoryInjections[normalizedName] = []);

      injections.push({
        property: property,
        fullName: normalizedInjectionName
      });
    },

    /**
     @method knownForType
     @param {String} type the type to iterate over
     @private
    */
    knownForType: function (type) {
      var fallbackKnown = undefined,
          resolverKnown = undefined;

      var localKnown = (0, _emberMetalDictionary["default"])(null);
      var registeredNames = (0, _emberMetalKeys["default"])(this.registrations);
      for (var index = 0, _length = registeredNames.length; index < _length; index++) {
        var fullName = registeredNames[index];
        var itemType = fullName.split(':')[0];

        if (itemType === type) {
          localKnown[fullName] = true;
        }
      }

      if (this.fallback) {
        fallbackKnown = this.fallback.knownForType(type);
      }

      if (this.resolver.knownForType) {
        resolverKnown = this.resolver.knownForType(type);
      }

      return (0, _emberMetalMerge.assign)({}, fallbackKnown, localKnown, resolverKnown);
    },

    validateFullName: function (fullName) {
      if (!VALID_FULL_NAME_REGEXP.test(fullName)) {
        throw new TypeError('Invalid Fullname, expected: `type:name` got: ' + fullName);
      }
      return true;
    },

    validateInjections: function (injections) {
      if (!injections) {
        return;
      }

      var fullName;

      for (var i = 0, length = injections.length; i < length; i++) {
        fullName = injections[i].fullName;

        if (!this.has(fullName)) {
          throw new Error('Attempting to inject an unknown injection: `' + fullName + '`');
        }
      }
    },

    normalizeInjectionsHash: function (hash) {
      var injections = [];

      for (var key in hash) {
        if (hash.hasOwnProperty(key)) {
          _emberMetalCore["default"].assert('Expected a proper full name, given \'' + hash[key] + '\'', this.validateFullName(hash[key]));

          injections.push({
            property: key,
            fullName: hash[key]
          });
        }
      }

      return injections;
    },

    getInjections: function (fullName) {
      var injections = this._injections[fullName] || [];
      if (this.fallback) {
        injections = injections.concat(this.fallback.getInjections(fullName));
      }
      return injections;
    },

    getTypeInjections: function (type) {
      var injections = this._typeInjections[type] || [];
      if (this.fallback) {
        injections = injections.concat(this.fallback.getTypeInjections(type));
      }
      return injections;
    },

    getFactoryInjections: function (fullName) {
      var injections = this._factoryInjections[fullName] || [];
      if (this.fallback) {
        injections = injections.concat(this.fallback.getFactoryInjections(fullName));
      }
      return injections;
    },

    getFactoryTypeInjections: function (type) {
      var injections = this._factoryTypeInjections[type] || [];
      if (this.fallback) {
        injections = injections.concat(this.fallback.getFactoryTypeInjections(type));
      }
      return injections;
    }
  };

  function resolve(registry, normalizedName) {
    var cached = registry._resolveCache[normalizedName];
    if (cached) {
      return cached;
    }
    if (registry._failCache[normalizedName]) {
      return;
    }

    var resolved = registry.resolver(normalizedName) || registry.registrations[normalizedName];

    if (resolved) {
      registry._resolveCache[normalizedName] = resolved;
    } else {
      registry._failCache[normalizedName] = true;
    }

    return resolved;
  }

  function has(registry, fullName) {
    return registry.resolve(fullName) !== undefined;
  }

  exports["default"] = Registry;
});
// Ember.assert
enifed("dag-map", ["exports"], function (exports) {
  function visit(vertex, fn, visited, path) {
    var name = vertex.name;
    var vertices = vertex.incoming;
    var names = vertex.incomingNames;
    var len = names.length;
    var i;

    if (!visited) {
      visited = {};
    }
    if (!path) {
      path = [];
    }
    if (visited.hasOwnProperty(name)) {
      return;
    }
    path.push(name);
    visited[name] = true;
    for (i = 0; i < len; i++) {
      visit(vertices[names[i]], fn, visited, path);
    }
    fn(vertex, path);
    path.pop();
  }

  /**
   * DAG stands for Directed acyclic graph.
   *
   * It is used to build a graph of dependencies checking that there isn't circular
   * dependencies. p.e Registering initializers with a certain precedence order.
   *
   * @class DAG
   * @constructor
   */
  function DAG() {
    this.names = [];
    this.vertices = Object.create(null);
  }

  /**
   * DAG Vertex
   *
   * @class Vertex
   * @constructor
   */

  function Vertex(name) {
    this.name = name;
    this.incoming = {};
    this.incomingNames = [];
    this.hasOutgoing = false;
    this.value = null;
  }

  /**
   * Adds a vertex entry to the graph unless it is already added.
   *
   * @private
   * @method add
   * @param {String} name The name of the vertex to add
   */
  DAG.prototype.add = function (name) {
    if (!name) {
      throw new Error("Can't add Vertex without name");
    }
    if (this.vertices[name] !== undefined) {
      return this.vertices[name];
    }
    var vertex = new Vertex(name);
    this.vertices[name] = vertex;
    this.names.push(name);
    return vertex;
  };

  /**
   * Adds a vertex to the graph and sets its value.
   *
   * @private
   * @method map
   * @param {String} name The name of the vertex.
   * @param         value The value to put in the vertex.
   */
  DAG.prototype.map = function (name, value) {
    this.add(name).value = value;
  };

  /**
   * Connects the vertices with the given names, adding them to the graph if
   * necessary, only if this does not produce is any circular dependency.
   *
   * @private
   * @method addEdge
   * @param {String} fromName The name the vertex where the edge starts.
   * @param {String} toName The name the vertex where the edge ends.
   */
  DAG.prototype.addEdge = function (fromName, toName) {
    if (!fromName || !toName || fromName === toName) {
      return;
    }
    var from = this.add(fromName);
    var to = this.add(toName);
    if (to.incoming.hasOwnProperty(fromName)) {
      return;
    }
    function checkCycle(vertex, path) {
      if (vertex.name === toName) {
        throw new Error("cycle detected: " + toName + " <- " + path.join(" <- "));
      }
    }
    visit(from, checkCycle);
    from.hasOutgoing = true;
    to.incoming[fromName] = from;
    to.incomingNames.push(fromName);
  };

  /**
   * Visits all the vertex of the graph calling the given function with each one,
   * ensuring that the vertices are visited respecting their precedence.
   *
   * @method  topsort
   * @param {Function} fn The function to be invoked on each vertex.
   */
  DAG.prototype.topsort = function (fn) {
    var visited = {};
    var vertices = this.vertices;
    var names = this.names;
    var len = names.length;
    var i, vertex;

    for (i = 0; i < len; i++) {
      vertex = vertices[names[i]];
      if (!vertex.hasOutgoing) {
        visit(vertex, fn, visited);
      }
    }
  };

  /**
   * Adds a vertex with the given name and value to the graph and joins it with the
   * vertices referenced in _before_ and _after_. If there isn't vertices with those
   * names, they are added too.
   *
   * If either _before_ or _after_ are falsy/empty, the added vertex will not have
   * an incoming/outgoing edge.
   *
   * @method addEdges
   * @param {String} name The name of the vertex to be added.
   * @param         value The value of that vertex.
   * @param        before An string or array of strings with the names of the vertices before
   *                      which this vertex must be visited.
   * @param         after An string or array of strings with the names of the vertex after
   *                      which this vertex must be visited.
   *
   */
  DAG.prototype.addEdges = function (name, value, before, after) {
    var i;
    this.map(name, value);
    if (before) {
      if (typeof before === "string") {
        this.addEdge(name, before);
      } else {
        for (i = 0; i < before.length; i++) {
          this.addEdge(name, before[i]);
        }
      }
    }
    if (after) {
      if (typeof after === "string") {
        this.addEdge(after, name);
      } else {
        for (i = 0; i < after.length; i++) {
          this.addEdge(after[i], name);
        }
      }
    }
  };

  exports["default"] = DAG;
});
enifed('dag-map.umd', ['exports', './dag-map'], function (exports, _dagMap) {

  /* global define:true module:true window: true */
  if (typeof enifed === 'function' && enifed.amd) {
    enifed(function () {
      return _dagMap["default"];
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = _dagMap["default"];
  } else if (typeof this !== 'undefined') {
    this['DAG'] = _dagMap["default"];
  }
});
enifed("dom-helper", ["exports", "./htmlbars-runtime/morph", "./morph-attr", "./dom-helper/build-html-dom", "./dom-helper/classes", "./dom-helper/prop"], function (exports, _htmlbarsRuntimeMorph, _morphAttr, _domHelperBuildHtmlDom, _domHelperClasses, _domHelperProp) {

  var doc = typeof document === "undefined" ? false : document;

  var deletesBlankTextNodes = doc && (function (document) {
    var element = document.createElement("div");
    element.appendChild(document.createTextNode(""));
    var clonedElement = element.cloneNode(true);
    return clonedElement.childNodes.length === 0;
  })(doc);

  var ignoresCheckedAttribute = doc && (function (document) {
    var element = document.createElement("input");
    element.setAttribute("checked", "checked");
    var clonedElement = element.cloneNode(false);
    return !clonedElement.checked;
  })(doc);

  var canRemoveSvgViewBoxAttribute = doc && (doc.createElementNS ? (function (document) {
    var element = document.createElementNS(_domHelperBuildHtmlDom.svgNamespace, "svg");
    element.setAttribute("viewBox", "0 0 100 100");
    element.removeAttribute("viewBox");
    return !element.getAttribute("viewBox");
  })(doc) : true);

  var canClone = doc && (function (document) {
    var element = document.createElement("div");
    element.appendChild(document.createTextNode(" "));
    element.appendChild(document.createTextNode(" "));
    var clonedElement = element.cloneNode(true);
    return clonedElement.childNodes[0].nodeValue === " ";
  })(doc);

  // This is not the namespace of the element, but of
  // the elements inside that elements.
  function interiorNamespace(element) {
    if (element && element.namespaceURI === _domHelperBuildHtmlDom.svgNamespace && !_domHelperBuildHtmlDom.svgHTMLIntegrationPoints[element.tagName]) {
      return _domHelperBuildHtmlDom.svgNamespace;
    } else {
      return null;
    }
  }

  // The HTML spec allows for "omitted start tags". These tags are optional
  // when their intended child is the first thing in the parent tag. For
  // example, this is a tbody start tag:
  //
  // <table>
  //   <tbody>
  //     <tr>
  //
  // The tbody may be omitted, and the browser will accept and render:
  //
  // <table>
  //   <tr>
  //
  // However, the omitted start tag will still be added to the DOM. Here
  // we test the string and context to see if the browser is about to
  // perform this cleanup.
  //
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#optional-tags
  // describes which tags are omittable. The spec for tbody and colgroup
  // explains this behavior:
  //
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-tbody-element
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-colgroup-element
  //

  var omittedStartTagChildTest = /<([\w:]+)/;
  function detectOmittedStartTag(string, contextualElement) {
    // Omitted start tags are only inside table tags.
    if (contextualElement.tagName === "TABLE") {
      var omittedStartTagChildMatch = omittedStartTagChildTest.exec(string);
      if (omittedStartTagChildMatch) {
        var omittedStartTagChild = omittedStartTagChildMatch[1];
        // It is already asserted that the contextual element is a table
        // and not the proper start tag. Just see if a tag was omitted.
        return omittedStartTagChild === "tr" || omittedStartTagChild === "col";
      }
    }
  }

  function buildSVGDOM(html, dom) {
    var div = dom.document.createElement("div");
    div.innerHTML = "<svg>" + html + "</svg>";
    return div.firstChild.childNodes;
  }

  var guid = 1;

  function ElementMorph(element, dom, namespace) {
    this.element = element;
    this.dom = dom;
    this.namespace = namespace;
    this.guid = "element" + guid++;

    this.state = {};
    this.isDirty = true;
  }

  // renderAndCleanup calls `clear` on all items in the morph map
  // just before calling `destroy` on the morph.
  //
  // As a future refactor this could be changed to set the property
  // back to its original/default value.
  ElementMorph.prototype.clear = function () {};

  ElementMorph.prototype.destroy = function () {
    this.element = null;
    this.dom = null;
  };

  /*
   * A class wrapping DOM functions to address environment compatibility,
   * namespaces, contextual elements for morph un-escaped content
   * insertion.
   *
   * When entering a template, a DOMHelper should be passed:
   *
   *   template(context, { hooks: hooks, dom: new DOMHelper() });
   *
   * TODO: support foreignObject as a passed contextual element. It has
   * a namespace (svg) that does not match its internal namespace
   * (xhtml).
   *
   * @class DOMHelper
   * @constructor
   * @param {HTMLDocument} _document The document DOM methods are proxied to
   */
  function DOMHelper(_document) {
    this.document = _document || document;
    if (!this.document) {
      throw new Error("A document object must be passed to the DOMHelper, or available on the global scope");
    }
    this.canClone = canClone;
    this.namespace = null;
  }

  var prototype = DOMHelper.prototype;
  prototype.constructor = DOMHelper;

  prototype.getElementById = function (id, rootNode) {
    rootNode = rootNode || this.document;
    return rootNode.getElementById(id);
  };

  prototype.insertBefore = function (element, childElement, referenceChild) {
    return element.insertBefore(childElement, referenceChild);
  };

  prototype.appendChild = function (element, childElement) {
    return element.appendChild(childElement);
  };

  prototype.childAt = function (element, indices) {
    var child = element;

    for (var i = 0; i < indices.length; i++) {
      child = child.childNodes.item(indices[i]);
    }

    return child;
  };

  // Note to a Fellow Implementor:
  // Ahh, accessing a child node at an index. Seems like it should be so simple,
  // doesn't it? Unfortunately, this particular method has caused us a surprising
  // amount of pain. As you'll note below, this method has been modified to walk
  // the linked list of child nodes rather than access the child by index
  // directly, even though there are two (2) APIs in the DOM that do this for us.
  // If you're thinking to yourself, "What an oversight! What an opportunity to
  // optimize this code!" then to you I say: stop! For I have a tale to tell.
  //
  // First, this code must be compatible with simple-dom for rendering on the
  // server where there is no real DOM. Previously, we accessed a child node
  // directly via `element.childNodes[index]`. While we *could* in theory do a
  // full-fidelity simulation of a live `childNodes` array, this is slow,
  // complicated and error-prone.
  //
  // "No problem," we thought, "we'll just use the similar
  // `childNodes.item(index)` API." Then, we could just implement our own `item`
  // method in simple-dom and walk the child node linked list there, allowing
  // us to retain the performance advantages of the (surely optimized) `item()`
  // API in the browser.
  //
  // Unfortunately, an enterprising soul named Samy Alzahrani discovered that in
  // IE8, accessing an item out-of-bounds via `item()` causes an exception where
  // other browsers return null. This necessitated a... check of
  // `childNodes.length`, bringing us back around to having to support a
  // full-fidelity `childNodes` array!
  //
  // Worst of all, Kris Selden investigated how browsers are actualy implemented
  // and discovered that they're all linked lists under the hood anyway. Accessing
  // `childNodes` requires them to allocate a new live collection backed by that
  // linked list, which is itself a rather expensive operation. Our assumed
  // optimization had backfired! That is the danger of magical thinking about
  // the performance of native implementations.
  //
  // And this, my friends, is why the following implementation just walks the
  // linked list, as surprised as that may make you. Please ensure you understand
  // the above before changing this and submitting a PR.
  //
  // Tom Dale, January 18th, 2015, Portland OR
  prototype.childAtIndex = function (element, index) {
    var node = element.firstChild;

    for (var idx = 0; node && idx < index; idx++) {
      node = node.nextSibling;
    }

    return node;
  };

  prototype.appendText = function (element, text) {
    return element.appendChild(this.document.createTextNode(text));
  };

  prototype.setAttribute = function (element, name, value) {
    element.setAttribute(name, String(value));
  };

  prototype.getAttribute = function (element, name) {
    return element.getAttribute(name);
  };

  prototype.setAttributeNS = function (element, namespace, name, value) {
    element.setAttributeNS(namespace, name, String(value));
  };

  prototype.getAttributeNS = function (element, namespace, name) {
    return element.getAttributeNS(namespace, name);
  };

  if (canRemoveSvgViewBoxAttribute) {
    prototype.removeAttribute = function (element, name) {
      element.removeAttribute(name);
    };
  } else {
    prototype.removeAttribute = function (element, name) {
      if (element.tagName === "svg" && name === "viewBox") {
        element.setAttribute(name, null);
      } else {
        element.removeAttribute(name);
      }
    };
  }

  prototype.setPropertyStrict = function (element, name, value) {
    if (value === undefined) {
      value = null;
    }

    if (value === null && (name === "value" || name === "type" || name === "src")) {
      value = "";
    }

    element[name] = value;
  };

  prototype.getPropertyStrict = function (element, name) {
    return element[name];
  };

  prototype.setProperty = function (element, name, value, namespace) {
    var lowercaseName = name.toLowerCase();
    if (element.namespaceURI === _domHelperBuildHtmlDom.svgNamespace || lowercaseName === "style") {
      if ((0, _domHelperProp.isAttrRemovalValue)(value)) {
        element.removeAttribute(name);
      } else {
        if (namespace) {
          element.setAttributeNS(namespace, name, value);
        } else {
          element.setAttribute(name, value);
        }
      }
    } else {
      var normalized = (0, _domHelperProp.normalizeProperty)(element, name);
      if (normalized) {
        element[normalized] = value;
      } else {
        if ((0, _domHelperProp.isAttrRemovalValue)(value)) {
          element.removeAttribute(name);
        } else {
          if (namespace && element.setAttributeNS) {
            element.setAttributeNS(namespace, name, value);
          } else {
            element.setAttribute(name, value);
          }
        }
      }
    }
  };

  if (doc && doc.createElementNS) {
    // Only opt into namespace detection if a contextualElement
    // is passed.
    prototype.createElement = function (tagName, contextualElement) {
      var namespace = this.namespace;
      if (contextualElement) {
        if (tagName === "svg") {
          namespace = _domHelperBuildHtmlDom.svgNamespace;
        } else {
          namespace = interiorNamespace(contextualElement);
        }
      }
      if (namespace) {
        return this.document.createElementNS(namespace, tagName);
      } else {
        return this.document.createElement(tagName);
      }
    };
    prototype.setAttributeNS = function (element, namespace, name, value) {
      element.setAttributeNS(namespace, name, String(value));
    };
  } else {
    prototype.createElement = function (tagName) {
      return this.document.createElement(tagName);
    };
    prototype.setAttributeNS = function (element, namespace, name, value) {
      element.setAttribute(name, String(value));
    };
  }

  prototype.addClasses = _domHelperClasses.addClasses;
  prototype.removeClasses = _domHelperClasses.removeClasses;

  prototype.setNamespace = function (ns) {
    this.namespace = ns;
  };

  prototype.detectNamespace = function (element) {
    this.namespace = interiorNamespace(element);
  };

  prototype.createDocumentFragment = function () {
    return this.document.createDocumentFragment();
  };

  prototype.createTextNode = function (text) {
    return this.document.createTextNode(text);
  };

  prototype.createComment = function (text) {
    return this.document.createComment(text);
  };

  prototype.repairClonedNode = function (element, blankChildTextNodes, isChecked) {
    if (deletesBlankTextNodes && blankChildTextNodes.length > 0) {
      for (var i = 0, len = blankChildTextNodes.length; i < len; i++) {
        var textNode = this.document.createTextNode(""),
            offset = blankChildTextNodes[i],
            before = this.childAtIndex(element, offset);
        if (before) {
          element.insertBefore(textNode, before);
        } else {
          element.appendChild(textNode);
        }
      }
    }
    if (ignoresCheckedAttribute && isChecked) {
      element.setAttribute("checked", "checked");
    }
  };

  prototype.cloneNode = function (element, deep) {
    var clone = element.cloneNode(!!deep);
    return clone;
  };

  prototype.AttrMorphClass = _morphAttr["default"];

  prototype.createAttrMorph = function (element, attrName, namespace) {
    return new this.AttrMorphClass(element, attrName, this, namespace);
  };

  prototype.ElementMorphClass = ElementMorph;

  prototype.createElementMorph = function (element, namespace) {
    return new this.ElementMorphClass(element, this, namespace);
  };

  prototype.createUnsafeAttrMorph = function (element, attrName, namespace) {
    var morph = this.createAttrMorph(element, attrName, namespace);
    morph.escaped = false;
    return morph;
  };

  prototype.MorphClass = _htmlbarsRuntimeMorph["default"];

  prototype.createMorph = function (parent, start, end, contextualElement) {
    if (contextualElement && contextualElement.nodeType === 11) {
      throw new Error("Cannot pass a fragment as the contextual element to createMorph");
    }

    if (!contextualElement && parent && parent.nodeType === 1) {
      contextualElement = parent;
    }
    var morph = new this.MorphClass(this, contextualElement);
    morph.firstNode = start;
    morph.lastNode = end;
    return morph;
  };

  prototype.createFragmentMorph = function (contextualElement) {
    if (contextualElement && contextualElement.nodeType === 11) {
      throw new Error("Cannot pass a fragment as the contextual element to createMorph");
    }

    var fragment = this.createDocumentFragment();
    return _htmlbarsRuntimeMorph["default"].create(this, contextualElement, fragment);
  };

  prototype.replaceContentWithMorph = function (element) {
    var firstChild = element.firstChild;

    if (!firstChild) {
      var comment = this.createComment("");
      this.appendChild(element, comment);
      return _htmlbarsRuntimeMorph["default"].create(this, element, comment);
    } else {
      var morph = _htmlbarsRuntimeMorph["default"].attach(this, element, firstChild, element.lastChild);
      morph.clear();
      return morph;
    }
  };

  prototype.createUnsafeMorph = function (parent, start, end, contextualElement) {
    var morph = this.createMorph(parent, start, end, contextualElement);
    morph.parseTextAsHTML = true;
    return morph;
  };

  // This helper is just to keep the templates good looking,
  // passing integers instead of element references.
  prototype.createMorphAt = function (parent, startIndex, endIndex, contextualElement) {
    var single = startIndex === endIndex;
    var start = this.childAtIndex(parent, startIndex);
    var end = single ? start : this.childAtIndex(parent, endIndex);
    return this.createMorph(parent, start, end, contextualElement);
  };

  prototype.createUnsafeMorphAt = function (parent, startIndex, endIndex, contextualElement) {
    var morph = this.createMorphAt(parent, startIndex, endIndex, contextualElement);
    morph.parseTextAsHTML = true;
    return morph;
  };

  prototype.insertMorphBefore = function (element, referenceChild, contextualElement) {
    var insertion = this.document.createComment("");
    element.insertBefore(insertion, referenceChild);
    return this.createMorph(element, insertion, insertion, contextualElement);
  };

  prototype.appendMorph = function (element, contextualElement) {
    var insertion = this.document.createComment("");
    element.appendChild(insertion);
    return this.createMorph(element, insertion, insertion, contextualElement);
  };

  prototype.insertBoundary = function (fragment, index) {
    // this will always be null or firstChild
    var child = index === null ? null : this.childAtIndex(fragment, index);
    this.insertBefore(fragment, this.createTextNode(""), child);
  };

  prototype.parseHTML = function (html, contextualElement) {
    var childNodes;

    if (interiorNamespace(contextualElement) === _domHelperBuildHtmlDom.svgNamespace) {
      childNodes = buildSVGDOM(html, this);
    } else {
      var nodes = (0, _domHelperBuildHtmlDom.buildHTMLDOM)(html, contextualElement, this);
      if (detectOmittedStartTag(html, contextualElement)) {
        var node = nodes[0];
        while (node && node.nodeType !== 1) {
          node = node.nextSibling;
        }
        childNodes = node.childNodes;
      } else {
        childNodes = nodes;
      }
    }

    // Copy node list to a fragment.
    var fragment = this.document.createDocumentFragment();

    if (childNodes && childNodes.length > 0) {
      var currentNode = childNodes[0];

      // We prepend an <option> to <select> boxes to absorb any browser bugs
      // related to auto-select behavior. Skip past it.
      if (contextualElement.tagName === "SELECT") {
        currentNode = currentNode.nextSibling;
      }

      while (currentNode) {
        var tempNode = currentNode;
        currentNode = currentNode.nextSibling;

        fragment.appendChild(tempNode);
      }
    }

    return fragment;
  };

  var parsingNode;

  // Used to determine whether a URL needs to be sanitized.
  prototype.protocolForURL = function (url) {
    if (!parsingNode) {
      parsingNode = this.document.createElement("a");
    }

    parsingNode.href = url;
    return parsingNode.protocol;
  };

  exports["default"] = DOMHelper;
});
enifed('dom-helper/build-html-dom', ['exports'], function (exports) {
  /* global XMLSerializer:false */
  var svgHTMLIntegrationPoints = { foreignObject: 1, desc: 1, title: 1 };
  exports.svgHTMLIntegrationPoints = svgHTMLIntegrationPoints;
  var svgNamespace = 'http://www.w3.org/2000/svg';

  exports.svgNamespace = svgNamespace;
  var doc = typeof document === 'undefined' ? false : document;

  // Safari does not like using innerHTML on SVG HTML integration
  // points (desc/title/foreignObject).
  var needsIntegrationPointFix = doc && (function (document) {
    if (document.createElementNS === undefined) {
      return;
    }
    // In FF title will not accept innerHTML.
    var testEl = document.createElementNS(svgNamespace, 'title');
    testEl.innerHTML = '<div></div>';
    return testEl.childNodes.length === 0 || testEl.childNodes[0].nodeType !== 1;
  })(doc);

  // Internet Explorer prior to 9 does not allow setting innerHTML if the first element
  // is a "zero-scope" element. This problem can be worked around by making
  // the first node an invisible text node. We, like Modernizr, use &shy;
  var needsShy = doc && (function (document) {
    var testEl = document.createElement('div');
    testEl.innerHTML = '<div></div>';
    testEl.firstChild.innerHTML = '<script></script>';
    return testEl.firstChild.innerHTML === '';
  })(doc);

  // IE 8 (and likely earlier) likes to move whitespace preceeding
  // a script tag to appear after it. This means that we can
  // accidentally remove whitespace when updating a morph.
  var movesWhitespace = doc && (function (document) {
    var testEl = document.createElement('div');
    testEl.innerHTML = 'Test: <script type=\'text/x-placeholder\'></script>Value';
    return testEl.childNodes[0].nodeValue === 'Test:' && testEl.childNodes[2].nodeValue === ' Value';
  })(doc);

  var tagNamesRequiringInnerHTMLFix = doc && (function (document) {
    var tagNamesRequiringInnerHTMLFix;
    // IE 9 and earlier don't allow us to set innerHTML on col, colgroup, frameset,
    // html, style, table, tbody, tfoot, thead, title, tr. Detect this and add
    // them to an initial list of corrected tags.
    //
    // Here we are only dealing with the ones which can have child nodes.
    //
    var tableNeedsInnerHTMLFix;
    var tableInnerHTMLTestElement = document.createElement('table');
    try {
      tableInnerHTMLTestElement.innerHTML = '<tbody></tbody>';
    } catch (e) {} finally {
      tableNeedsInnerHTMLFix = tableInnerHTMLTestElement.childNodes.length === 0;
    }
    if (tableNeedsInnerHTMLFix) {
      tagNamesRequiringInnerHTMLFix = {
        colgroup: ['table'],
        table: [],
        tbody: ['table'],
        tfoot: ['table'],
        thead: ['table'],
        tr: ['table', 'tbody']
      };
    }

    // IE 8 doesn't allow setting innerHTML on a select tag. Detect this and
    // add it to the list of corrected tags.
    //
    var selectInnerHTMLTestElement = document.createElement('select');
    selectInnerHTMLTestElement.innerHTML = '<option></option>';
    if (!selectInnerHTMLTestElement.childNodes[0]) {
      tagNamesRequiringInnerHTMLFix = tagNamesRequiringInnerHTMLFix || {};
      tagNamesRequiringInnerHTMLFix.select = [];
    }
    return tagNamesRequiringInnerHTMLFix;
  })(doc);

  function scriptSafeInnerHTML(element, html) {
    // without a leading text node, IE will drop a leading script tag.
    html = '&shy;' + html;

    element.innerHTML = html;

    var nodes = element.childNodes;

    // Look for &shy; to remove it.
    var shyElement = nodes[0];
    while (shyElement.nodeType === 1 && !shyElement.nodeName) {
      shyElement = shyElement.firstChild;
    }
    // At this point it's the actual unicode character.
    if (shyElement.nodeType === 3 && shyElement.nodeValue.charAt(0) === '­') {
      var newValue = shyElement.nodeValue.slice(1);
      if (newValue.length) {
        shyElement.nodeValue = shyElement.nodeValue.slice(1);
      } else {
        shyElement.parentNode.removeChild(shyElement);
      }
    }

    return nodes;
  }

  function buildDOMWithFix(html, contextualElement) {
    var tagName = contextualElement.tagName;

    // Firefox versions < 11 do not have support for element.outerHTML.
    var outerHTML = contextualElement.outerHTML || new XMLSerializer().serializeToString(contextualElement);
    if (!outerHTML) {
      throw 'Can\'t set innerHTML on ' + tagName + ' in this browser';
    }

    html = fixSelect(html, contextualElement);

    var wrappingTags = tagNamesRequiringInnerHTMLFix[tagName.toLowerCase()];

    var startTag = outerHTML.match(new RegExp('<' + tagName + '([^>]*)>', 'i'))[0];
    var endTag = '</' + tagName + '>';

    var wrappedHTML = [startTag, html, endTag];

    var i = wrappingTags.length;
    var wrappedDepth = 1 + i;
    while (i--) {
      wrappedHTML.unshift('<' + wrappingTags[i] + '>');
      wrappedHTML.push('</' + wrappingTags[i] + '>');
    }

    var wrapper = document.createElement('div');
    scriptSafeInnerHTML(wrapper, wrappedHTML.join(''));
    var element = wrapper;
    while (wrappedDepth--) {
      element = element.firstChild;
      while (element && element.nodeType !== 1) {
        element = element.nextSibling;
      }
    }
    while (element && element.tagName !== tagName) {
      element = element.nextSibling;
    }
    return element ? element.childNodes : [];
  }

  var buildDOM;
  if (needsShy) {
    buildDOM = function buildDOM(html, contextualElement, dom) {
      html = fixSelect(html, contextualElement);

      contextualElement = dom.cloneNode(contextualElement, false);
      scriptSafeInnerHTML(contextualElement, html);
      return contextualElement.childNodes;
    };
  } else {
    buildDOM = function buildDOM(html, contextualElement, dom) {
      html = fixSelect(html, contextualElement);

      contextualElement = dom.cloneNode(contextualElement, false);
      contextualElement.innerHTML = html;
      return contextualElement.childNodes;
    };
  }

  function fixSelect(html, contextualElement) {
    if (contextualElement.tagName === 'SELECT') {
      html = '<option></option>' + html;
    }

    return html;
  }

  var buildIESafeDOM;
  if (tagNamesRequiringInnerHTMLFix || movesWhitespace) {
    buildIESafeDOM = function buildIESafeDOM(html, contextualElement, dom) {
      // Make a list of the leading text on script nodes. Include
      // script tags without any whitespace for easier processing later.
      var spacesBefore = [];
      var spacesAfter = [];
      if (typeof html === 'string') {
        html = html.replace(/(\s*)(<script)/g, function (match, spaces, tag) {
          spacesBefore.push(spaces);
          return tag;
        });

        html = html.replace(/(<\/script>)(\s*)/g, function (match, tag, spaces) {
          spacesAfter.push(spaces);
          return tag;
        });
      }

      // Fetch nodes
      var nodes;
      if (tagNamesRequiringInnerHTMLFix[contextualElement.tagName.toLowerCase()]) {
        // buildDOMWithFix uses string wrappers for problematic innerHTML.
        nodes = buildDOMWithFix(html, contextualElement);
      } else {
        nodes = buildDOM(html, contextualElement, dom);
      }

      // Build a list of script tags, the nodes themselves will be
      // mutated as we add test nodes.
      var i, j, node, nodeScriptNodes;
      var scriptNodes = [];
      for (i = 0; i < nodes.length; i++) {
        node = nodes[i];
        if (node.nodeType !== 1) {
          continue;
        }
        if (node.tagName === 'SCRIPT') {
          scriptNodes.push(node);
        } else {
          nodeScriptNodes = node.getElementsByTagName('script');
          for (j = 0; j < nodeScriptNodes.length; j++) {
            scriptNodes.push(nodeScriptNodes[j]);
          }
        }
      }

      // Walk the script tags and put back their leading text nodes.
      var scriptNode, textNode, spaceBefore, spaceAfter;
      for (i = 0; i < scriptNodes.length; i++) {
        scriptNode = scriptNodes[i];
        spaceBefore = spacesBefore[i];
        if (spaceBefore && spaceBefore.length > 0) {
          textNode = dom.document.createTextNode(spaceBefore);
          scriptNode.parentNode.insertBefore(textNode, scriptNode);
        }

        spaceAfter = spacesAfter[i];
        if (spaceAfter && spaceAfter.length > 0) {
          textNode = dom.document.createTextNode(spaceAfter);
          scriptNode.parentNode.insertBefore(textNode, scriptNode.nextSibling);
        }
      }

      return nodes;
    };
  } else {
    buildIESafeDOM = buildDOM;
  }

  var buildHTMLDOM;
  if (needsIntegrationPointFix) {
    exports.buildHTMLDOM = buildHTMLDOM = function buildHTMLDOM(html, contextualElement, dom) {
      if (svgHTMLIntegrationPoints[contextualElement.tagName]) {
        return buildIESafeDOM(html, document.createElement('div'), dom);
      } else {
        return buildIESafeDOM(html, contextualElement, dom);
      }
    };
  } else {
    exports.buildHTMLDOM = buildHTMLDOM = buildIESafeDOM;
  }

  exports.buildHTMLDOM = buildHTMLDOM;
});
enifed('dom-helper/classes', ['exports'], function (exports) {
  var doc = typeof document === 'undefined' ? false : document;

  // PhantomJS has a broken classList. See https://github.com/ariya/phantomjs/issues/12782
  var canClassList = doc && (function () {
    var d = document.createElement('div');
    if (!d.classList) {
      return false;
    }
    d.classList.add('boo');
    d.classList.add('boo', 'baz');
    return d.className === 'boo baz';
  })();

  function buildClassList(element) {
    var classString = element.getAttribute('class') || '';
    return classString !== '' && classString !== ' ' ? classString.split(' ') : [];
  }

  function intersect(containingArray, valuesArray) {
    var containingIndex = 0;
    var containingLength = containingArray.length;
    var valuesIndex = 0;
    var valuesLength = valuesArray.length;

    var intersection = new Array(valuesLength);

    // TODO: rewrite this loop in an optimal manner
    for (; containingIndex < containingLength; containingIndex++) {
      valuesIndex = 0;
      for (; valuesIndex < valuesLength; valuesIndex++) {
        if (valuesArray[valuesIndex] === containingArray[containingIndex]) {
          intersection[valuesIndex] = containingIndex;
          break;
        }
      }
    }

    return intersection;
  }

  function addClassesViaAttribute(element, classNames) {
    var existingClasses = buildClassList(element);

    var indexes = intersect(existingClasses, classNames);
    var didChange = false;

    for (var i = 0, l = classNames.length; i < l; i++) {
      if (indexes[i] === undefined) {
        didChange = true;
        existingClasses.push(classNames[i]);
      }
    }

    if (didChange) {
      element.setAttribute('class', existingClasses.length > 0 ? existingClasses.join(' ') : '');
    }
  }

  function removeClassesViaAttribute(element, classNames) {
    var existingClasses = buildClassList(element);

    var indexes = intersect(classNames, existingClasses);
    var didChange = false;
    var newClasses = [];

    for (var i = 0, l = existingClasses.length; i < l; i++) {
      if (indexes[i] === undefined) {
        newClasses.push(existingClasses[i]);
      } else {
        didChange = true;
      }
    }

    if (didChange) {
      element.setAttribute('class', newClasses.length > 0 ? newClasses.join(' ') : '');
    }
  }

  var addClasses, removeClasses;
  if (canClassList) {
    exports.addClasses = addClasses = function addClasses(element, classNames) {
      if (element.classList) {
        if (classNames.length === 1) {
          element.classList.add(classNames[0]);
        } else if (classNames.length === 2) {
          element.classList.add(classNames[0], classNames[1]);
        } else {
          element.classList.add.apply(element.classList, classNames);
        }
      } else {
        addClassesViaAttribute(element, classNames);
      }
    };
    exports.removeClasses = removeClasses = function removeClasses(element, classNames) {
      if (element.classList) {
        if (classNames.length === 1) {
          element.classList.remove(classNames[0]);
        } else if (classNames.length === 2) {
          element.classList.remove(classNames[0], classNames[1]);
        } else {
          element.classList.remove.apply(element.classList, classNames);
        }
      } else {
        removeClassesViaAttribute(element, classNames);
      }
    };
  } else {
    exports.addClasses = addClasses = addClassesViaAttribute;
    exports.removeClasses = removeClasses = removeClassesViaAttribute;
  }

  exports.addClasses = addClasses;
  exports.removeClasses = removeClasses;
});
enifed('dom-helper/prop', ['exports'], function (exports) {
  exports.isAttrRemovalValue = isAttrRemovalValue;
  exports.normalizeProperty = normalizeProperty;

  function isAttrRemovalValue(value) {
    return value === null || value === undefined;
  }

  function UNDEFINED() {}

  // TODO should this be an o_create kind of thing?
  var propertyCaches = {};

  exports.propertyCaches = propertyCaches;

  function normalizeProperty(element, attrName) {
    var tagName = element.tagName;
    var key, cachedAttrName;
    var cache = propertyCaches[tagName];
    if (!cache) {
      // TODO should this be an o_create kind of thing?
      cache = {};
      for (cachedAttrName in element) {
        key = cachedAttrName.toLowerCase();
        if (isSettable(element, cachedAttrName)) {
          cache[key] = cachedAttrName;
        } else {
          cache[key] = UNDEFINED;
        }
      }
      propertyCaches[tagName] = cache;
    }

    // presumes that the attrName has been lowercased.
    var value = cache[attrName];
    return value === UNDEFINED ? undefined : value;
  }

  // elements with a property that does not conform to the spec in certain
  // browsers. In these cases, we'll end up using setAttribute instead
  var badPairs = [{
    // phantomjs < 2.0 lets you set it as a prop but won't reflect it
    // back to the attribute. button.getAttribute('type') === null
    tagName: 'BUTTON',
    propName: 'type'
  }, {
    // Some version of IE (like IE9) actually throw an exception
    // if you set input.type = 'something-unknown'
    tagName: 'INPUT',
    propName: 'type'
  }, {
    // Some versions of IE (IE8) throw an exception when setting
    // `input.list = 'somestring'`:
    // https://github.com/emberjs/ember.js/issues/10908
    // https://github.com/emberjs/ember.js/issues/11364
    tagName: 'INPUT',
    propName: 'list'
  }];

  function isSettable(element, attrName) {
    for (var i = 0, l = badPairs.length; i < l; i++) {
      var pair = badPairs[i];
      if (pair.tagName === element.tagName && pair.propName === attrName) {
        return false;
      }
    }

    return true;
  }
});
enifed('ember-application', ['exports', 'ember-metal/core', 'ember-runtime/system/lazy_load', 'ember-application/system/resolver', 'ember-application/system/application', 'ember-application/ext/controller'], function (exports, _emberMetalCore, _emberRuntimeSystemLazy_load, _emberApplicationSystemResolver, _emberApplicationSystemApplication, _emberApplicationExtController) {
  // side effect of extending ControllerMixin

  _emberMetalCore["default"].Application = _emberApplicationSystemApplication["default"];
  _emberMetalCore["default"].Resolver = _emberApplicationSystemResolver.Resolver;
  _emberMetalCore["default"].DefaultResolver = _emberApplicationSystemResolver["default"];

  (0, _emberRuntimeSystemLazy_load.runLoadHooks)('Ember.Application', _emberApplicationSystemApplication["default"]);
});

/**
@module ember
@submodule ember-application
*/
enifed("ember-application/ext/controller", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/error", "ember-metal/utils", "ember-metal/computed", "ember-runtime/mixins/controller", "ember-routing/system/controller_for"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalError, _emberMetalUtils, _emberMetalComputed, _emberRuntimeMixinsController, _emberRoutingSystemController_for) {

  function verifyNeedsDependencies(controller, container, needs) {
    var dependency, i, l;
    var missing = [];

    for (i = 0, l = needs.length; i < l; i++) {
      dependency = needs[i];

      _emberMetalCore["default"].assert((0, _emberMetalUtils.inspect)(controller) + "#needs must not specify dependencies with periods in their names (" + dependency + ")", dependency.indexOf(".") === -1);

      if (dependency.indexOf(":") === -1) {
        dependency = "controller:" + dependency;
      }

      // Structure assert to still do verification but not string concat in production
      if (!container._registry.has(dependency)) {
        missing.push(dependency);
      }
    }
    if (missing.length) {
      throw new _emberMetalError["default"]((0, _emberMetalUtils.inspect)(controller) + " needs [ " + missing.join(", ") + " ] but " + (missing.length > 1 ? "they" : "it") + " could not be found");
    }
  }

  var defaultControllersComputedProperty = (0, _emberMetalComputed.computed)(function () {
    var controller = this;

    return {
      needs: (0, _emberMetalProperty_get.get)(controller, "needs"),
      container: (0, _emberMetalProperty_get.get)(controller, "container"),
      unknownProperty: function (controllerName) {
        var needs = this.needs;
        var dependency, i, l;

        for (i = 0, l = needs.length; i < l; i++) {
          dependency = needs[i];
          if (dependency === controllerName) {
            return this.container.lookup("controller:" + controllerName);
          }
        }

        var errorMessage = (0, _emberMetalUtils.inspect)(controller) + "#needs does not include `" + controllerName + "`. To access the " + controllerName + " controller from " + (0, _emberMetalUtils.inspect)(controller) + ", " + (0, _emberMetalUtils.inspect)(controller) + " should have a `needs` property that is an array of the controllers it has access to.";
        throw new ReferenceError(errorMessage);
      },
      setUnknownProperty: function (key, value) {
        throw new Error("You cannot overwrite the value of `controllers." + key + "` of " + (0, _emberMetalUtils.inspect)(controller));
      }
    };
  });

  /**
    @class ControllerMixin
    @namespace Ember
    @public
  */
  _emberRuntimeMixinsController["default"].reopen({
    concatenatedProperties: ["needs"],

    /**
      An array of other controller objects available inside
      instances of this controller via the `controllers`
      property:
       For example, when you define a controller:
       ```javascript
      App.CommentsController = Ember.ArrayController.extend({
        needs: ['post']
      });
      ```
       The application's single instance of these other
      controllers are accessible by name through the
      `controllers` property:
       ```javascript
      this.get('controllers.post'); // instance of App.PostController
      ```
       Given that you have a nested controller (nested resource):
       ```javascript
      App.CommentsNewController = Ember.ObjectController.extend({
      });
      ```
       When you define a controller that requires access to a nested one:
       ```javascript
      App.IndexController = Ember.ObjectController.extend({
        needs: ['commentsNew']
      });
      ```
       You will be able to get access to it:
       ```javascript
      this.get('controllers.commentsNew'); // instance of App.CommentsNewController
      ```
       This is only available for singleton controllers.
       @deprecated Use `Ember.inject.controller()` instead.
      @property {Array} needs
      @default []
      @public
    */
    needs: [],

    init: function () {
      var needs = (0, _emberMetalProperty_get.get)(this, "needs");
      var length = (0, _emberMetalProperty_get.get)(needs, "length");

      if (length > 0) {
        _emberMetalCore["default"].assert(" `" + (0, _emberMetalUtils.inspect)(this) + " specifies `needs`, but does " + "not have a container. Please ensure this controller was " + "instantiated with a container.", this.container || this.controllers !== defaultControllersComputedProperty);

        if (this.container) {
          verifyNeedsDependencies(this, this.container, needs);
        }

        // if needs then initialize controllers proxy
        (0, _emberMetalProperty_get.get)(this, "controllers");
      }

      this._super.apply(this, arguments);
    },

    /**
      @method controllerFor
      @see {Ember.Route#controllerFor}
      @deprecated Use `needs` instead
      @public
    */
    controllerFor: function (controllerName) {
      _emberMetalCore["default"].deprecate("Controller#controllerFor is deprecated, please use Controller#needs instead");
      return (0, _emberRoutingSystemController_for["default"])((0, _emberMetalProperty_get.get)(this, "container"), controllerName);
    },

    /**
      Stores the instances of other controllers available from within
      this controller. Any controller listed by name in the `needs`
      property will be accessible by name through this property.
       ```javascript
      App.CommentsController = Ember.ArrayController.extend({
        needs: ['post'],
        postTitle: function() {
          var currentPost = this.get('controllers.post'); // instance of App.PostController
          return currentPost.get('title');
        }.property('controllers.post.title')
      });
      ```
       @see {Ember.ControllerMixin#needs}
      @property {Object} controllers
      @default null
      @public
    */
    controllers: defaultControllersComputedProperty
  });

  exports["default"] = _emberRuntimeMixinsController["default"];
});
/**
@module ember
@submodule ember-application
@public
*/

// Ember.assert
enifed("ember-application/system/application-instance", ["exports", "ember-metal/property_get", "ember-metal/property_set", "ember-runtime/system/object", "ember-metal/run_loop", "ember-metal/computed", "container/registry"], function (exports, _emberMetalProperty_get, _emberMetalProperty_set, _emberRuntimeSystemObject, _emberMetalRun_loop, _emberMetalComputed, _containerRegistry) {

  /**
    The `ApplicationInstance` encapsulates all of the stateful aspects of a
    running `Application`.
  
    At a high-level, we break application boot into two distinct phases:
  
    * Definition time, where all of the classes, templates, and other
      dependencies are loaded (typically in the browser).
    * Run time, where we begin executing the application once everything
      has loaded.
  
    Definition time can be expensive and only needs to happen once since it is
    an idempotent operation. For example, between test runs and FastBoot
    requests, the application stays the same. It is only the state that we want
    to reset.
  
    That state is what the `ApplicationInstance` manages: it is responsible for
    creating the container that contains all application state, and disposing of
    it once the particular test run or FastBoot request has finished.
  
    @public
  */

  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    /**
      The application instance's container. The container stores all of the
      instance-specific state for this application run.
       @property {Ember.Container} container
      @public
    */
    container: null,

    /**
      The application's registry. The registry contains the classes, templates,
      and other code that makes up the application.
       @property {Ember.Registry} registry
      @private
    */
    applicationRegistry: null,

    /**
      The registry for this application instance. It should use the
      `applicationRegistry` as a fallback.
       @property {Ember.Registry} registry
      @private
    */
    registry: null,

    /**
      The DOM events for which the event dispatcher should listen.
       By default, the application's `Ember.EventDispatcher` listens
      for a set of standard DOM events, such as `mousedown` and
      `keyup`, and delegates them to your application's `Ember.View`
      instances.
       @private
      @property {Object} customEvents
    */
    customEvents: null,

    /**
      The root DOM element of the Application as an element or a
      [jQuery-compatible selector
      string](http://api.jquery.com/category/selectors/).
       @private
      @property {String|DOMElement} rootElement
    */
    rootElement: null,

    init: function () {
      this._super.apply(this, arguments);

      // Create a per-instance registry that will use the application's registry
      // as a fallback for resolving registrations.
      this.registry = new _containerRegistry["default"]({
        fallback: this.applicationRegistry,
        resolver: this.applicationRegistry.resolver
      });
      this.registry.normalizeFullName = this.applicationRegistry.normalizeFullName;
      this.registry.makeToString = this.applicationRegistry.makeToString;

      // Create a per-instance container from the instance's registry
      this.container = this.registry.container();

      // Register this instance in the per-instance registry.
      //
      // Why do we need to register the instance in the first place?
      // Because we need a good way for the root route (a.k.a ApplicationRoute)
      // to notify us when it has created the root-most view. That view is then
      // appended to the rootElement, in the case of apps, to the fixture harness
      // in tests, or rendered to a string in the case of FastBoot.
      this.registry.register("-application-instance:main", this, { instantiate: false });
    },

    router: (0, _emberMetalComputed.computed)(function () {
      return this.container.lookup("router:main");
    }).readOnly(),

    /**
      Instantiates and sets up the router, specifically overriding the default
      location. This is useful for manually starting the app in FastBoot or
      testing environments, where trying to modify the URL would be
      inappropriate.
       @param options
      @private
    */
    overrideRouterLocation: function (options) {
      var location = options && options.location;
      var router = (0, _emberMetalProperty_get.get)(this, "router");

      if (location) {
        (0, _emberMetalProperty_set.set)(router, "location", location);
      }
    },

    /**
      This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
      when it has finished creating the root View. By default, we simply take the
      view and append it to the `rootElement` specified on the Application.
       In cases like FastBoot and testing, we can override this hook and implement
      custom behavior, such as serializing to a string and sending over an HTTP
      socket rather than appending to DOM.
       @param view {Ember.View} the root-most view
      @private
    */
    didCreateRootView: function (view) {
      view.appendTo(this.rootElement);
    },

    /**
      Tells the router to start routing. The router will ask the location for the
      current URL of the page to determine the initial URL to start routing to.
      To start the app at a specific URL, call `handleURL` instead.
       @private
    */
    startRouting: function () {
      var router = (0, _emberMetalProperty_get.get)(this, "router");
      var isModuleBasedResolver = !!this.registry.resolver.moduleBasedResolver;

      router.startRouting(isModuleBasedResolver);
      this._didSetupRouter = true;
    },

    /**
      @private
       Sets up the router, initializing the child router and configuring the
      location before routing begins.
       Because setup should only occur once, multiple calls to `setupRouter`
      beyond the first call have no effect.
    */
    setupRouter: function () {
      if (this._didSetupRouter) {
        return;
      }
      this._didSetupRouter = true;

      var router = (0, _emberMetalProperty_get.get)(this, "router");
      var isModuleBasedResolver = !!this.registry.resolver.moduleBasedResolver;
      router.setupRouter(isModuleBasedResolver);
    },

    /**
      Directs the router to route to a particular URL. This is useful in tests,
      for example, to tell the app to start at a particular URL. Ensure that you
      have called `setupRouter()` before calling this method.
       @param url {String} the URL the router should route to
      @private
    */
    handleURL: function (url) {
      var router = (0, _emberMetalProperty_get.get)(this, "router");

      this.setupRouter();
      return router.handleURL(url);
    },

    /**
      @private
    */
    setupEventDispatcher: function () {
      var dispatcher = this.container.lookup("event_dispatcher:main");
      dispatcher.setup(this.customEvents, this.rootElement);

      return dispatcher;
    },

    /**
      @private
    */
    willDestroy: function () {
      this._super.apply(this, arguments);
      (0, _emberMetalRun_loop["default"])(this.container, "destroy");
    }
  });
});
/**
@module ember
@submodule ember-application
@private
*/
enifed('ember-application/system/application', ['exports', 'dag-map', 'container/registry', 'ember-metal', 'ember-metal/property_get', 'ember-metal/property_set', 'ember-runtime/system/lazy_load', 'ember-runtime/system/namespace', 'ember-runtime/mixins/deferred', 'ember-application/system/resolver', 'ember-metal/platform/create', 'ember-metal/run_loop', 'ember-metal/utils', 'ember-runtime/controllers/controller', 'ember-metal/enumerable_utils', 'ember-runtime/controllers/object_controller', 'ember-runtime/controllers/array_controller', 'ember-metal-views/renderer', 'ember-htmlbars/system/dom-helper', 'ember-views/views/select', 'ember-routing-views/views/outlet', 'ember-views/views/view', 'ember-views/system/event_dispatcher', 'ember-views/system/jquery', 'ember-routing/system/route', 'ember-routing/system/router', 'ember-routing/location/hash_location', 'ember-routing/location/history_location', 'ember-routing/location/auto_location', 'ember-routing/location/none_location', 'ember-routing/system/cache', 'ember-application/system/application-instance', 'ember-views/views/text_field', 'ember-views/views/text_area', 'ember-views/views/checkbox', 'ember-views/views/legacy_each_view', 'ember-routing-views/views/link', 'ember-routing/services/routing', 'ember-extension-support/container_debug_adapter', 'ember-metal/environment'], function (exports, _dagMap, _containerRegistry, _emberMetal, _emberMetalProperty_get, _emberMetalProperty_set, _emberRuntimeSystemLazy_load, _emberRuntimeSystemNamespace, _emberRuntimeMixinsDeferred, _emberApplicationSystemResolver, _emberMetalPlatformCreate, _emberMetalRun_loop, _emberMetalUtils, _emberRuntimeControllersController, _emberMetalEnumerable_utils, _emberRuntimeControllersObject_controller, _emberRuntimeControllersArray_controller, _emberMetalViewsRenderer, _emberHtmlbarsSystemDomHelper, _emberViewsViewsSelect, _emberRoutingViewsViewsOutlet, _emberViewsViewsView, _emberViewsSystemEvent_dispatcher, _emberViewsSystemJquery, _emberRoutingSystemRoute, _emberRoutingSystemRouter, _emberRoutingLocationHash_location, _emberRoutingLocationHistory_location, _emberRoutingLocationAuto_location, _emberRoutingLocationNone_location, _emberRoutingSystemCache, _emberApplicationSystemApplicationInstance, _emberViewsViewsText_field, _emberViewsViewsText_area, _emberViewsViewsCheckbox, _emberViewsViewsLegacy_each_view, _emberRoutingViewsViewsLink, _emberRoutingServicesRouting, _emberExtensionSupportContainer_debug_adapter, _emberMetalEnvironment) {

  function props(obj) {
    var properties = [];

    for (var key in obj) {
      properties.push(key);
    }

    return properties;
  }

  var librariesRegistered = false;

  /**
    An instance of `Ember.Application` is the starting point for every Ember
    application. It helps to instantiate, initialize and coordinate the many
    objects that make up your app.
  
    Each Ember app has one and only one `Ember.Application` object. In fact, the
    very first thing you should do in your application is create the instance:
  
    ```javascript
    window.App = Ember.Application.create();
    ```
  
    Typically, the application object is the only global variable. All other
    classes in your app should be properties on the `Ember.Application` instance,
    which highlights its first role: a global namespace.
  
    For example, if you define a view class, it might look like this:
  
    ```javascript
    App.MyView = Ember.View.extend();
    ```
  
    By default, calling `Ember.Application.create()` will automatically initialize
    your application by calling the `Ember.Application.initialize()` method. If
    you need to delay initialization, you can call your app's `deferReadiness()`
    method. When you are ready for your app to be initialized, call its
    `advanceReadiness()` method.
  
    You can define a `ready` method on the `Ember.Application` instance, which
    will be run by Ember when the application is initialized.
  
    Because `Ember.Application` inherits from `Ember.Namespace`, any classes
    you create will have useful string representations when calling `toString()`.
    See the `Ember.Namespace` documentation for more information.
  
    While you can think of your `Ember.Application` as a container that holds the
    other classes in your application, there are several other responsibilities
    going on under-the-hood that you may want to understand.
  
    ### Event Delegation
  
    Ember uses a technique called _event delegation_. This allows the framework
    to set up a global, shared event listener instead of requiring each view to
    do it manually. For example, instead of each view registering its own
    `mousedown` listener on its associated element, Ember sets up a `mousedown`
    listener on the `body`.
  
    If a `mousedown` event occurs, Ember will look at the target of the event and
    start walking up the DOM node tree, finding corresponding views and invoking
    their `mouseDown` method as it goes.
  
    `Ember.Application` has a number of default events that it listens for, as
    well as a mapping from lowercase events to camel-cased view method names. For
    example, the `keypress` event causes the `keyPress` method on the view to be
    called, the `dblclick` event causes `doubleClick` to be called, and so on.
  
    If there is a bubbling browser event that Ember does not listen for by
    default, you can specify custom events and their corresponding view method
    names by setting the application's `customEvents` property:
  
    ```javascript
    var App = Ember.Application.create({
      customEvents: {
        // add support for the paste event
        paste: 'paste'
      }
    });
    ```
  
    By default, the application sets up these event listeners on the document
    body. However, in cases where you are embedding an Ember application inside
    an existing page, you may want it to set up the listeners on an element
    inside the body.
  
    For example, if only events inside a DOM element with the ID of `ember-app`
    should be delegated, set your application's `rootElement` property:
  
    ```javascript
    var App = Ember.Application.create({
      rootElement: '#ember-app'
    });
    ```
  
    The `rootElement` can be either a DOM element or a jQuery-compatible selector
    string. Note that *views appended to the DOM outside the root element will
    not receive events.* If you specify a custom root element, make sure you only
    append views inside it!
  
    To learn more about the advantages of event delegation and the Ember view
    layer, and a list of the event listeners that are setup by default, visit the
    [Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).
  
    ### Initializers
  
    Libraries on top of Ember can add initializers, like so:
  
    ```javascript
    Ember.Application.initializer({
      name: 'api-adapter',
  
      initialize: function(container, application) {
        application.register('api-adapter:main', ApiAdapter);
      }
    });
    ```
  
    Initializers provide an opportunity to access the container, which
    organizes the different components of an Ember application. Additionally
    they provide a chance to access the instantiated application. Beyond
    being used for libraries, initializers are also a great way to organize
    dependency injection or setup in your own application.
  
    ### Routing
  
    In addition to creating your application's router, `Ember.Application` is
    also responsible for telling the router when to start routing. Transitions
    between routes can be logged with the `LOG_TRANSITIONS` flag, and more
    detailed intra-transition logging can be logged with
    the `LOG_TRANSITIONS_INTERNAL` flag:
  
    ```javascript
    var App = Ember.Application.create({
      LOG_TRANSITIONS: true, // basic logging of successful transitions
      LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
    });
    ```
  
    By default, the router will begin trying to translate the current URL into
    application state once the browser emits the `DOMContentReady` event. If you
    need to defer routing, you can call the application's `deferReadiness()`
    method. Once routing can begin, call the `advanceReadiness()` method.
  
    If there is any setup required before routing begins, you can implement a
    `ready()` method on your app that will be invoked immediately before routing
    begins.
  
    @class Application
    @namespace Ember
    @extends Ember.Namespace
    @public
  */

  var Application = _emberRuntimeSystemNamespace["default"].extend(_emberRuntimeMixinsDeferred["default"], {
    _suppressDeferredDeprecation: true,

    /**
      The root DOM element of the Application. This can be specified as an
      element or a
      [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).
       This is the element that will be passed to the Application's,
      `eventDispatcher`, which sets up the listeners for event delegation. Every
      view in your application should be a child of the element you specify here.
       @property rootElement
      @type DOMElement
      @default 'body'
      @public
    */
    rootElement: 'body',

    /**
      The `Ember.EventDispatcher` responsible for delegating events to this
      application's views.
       The event dispatcher is created by the application at initialization time
      and sets up event listeners on the DOM element described by the
      application's `rootElement` property.
       See the documentation for `Ember.EventDispatcher` for more information.
       @property eventDispatcher
      @type Ember.EventDispatcher
      @default null
      @public
    */
    eventDispatcher: null,

    /**
      The DOM events for which the event dispatcher should listen.
       By default, the application's `Ember.EventDispatcher` listens
      for a set of standard DOM events, such as `mousedown` and
      `keyup`, and delegates them to your application's `Ember.View`
      instances.
       If you would like additional bubbling events to be delegated to your
      views, set your `Ember.Application`'s `customEvents` property
      to a hash containing the DOM event name as the key and the
      corresponding view method name as the value. For example:
       ```javascript
      var App = Ember.Application.create({
        customEvents: {
          // add support for the paste event
          paste: 'paste'
        }
      });
      ```
       @property customEvents
      @type Object
      @default null
      @public
    */
    customEvents: null,

    /**
      Whether the application should automatically start routing and render
      templates to the `rootElement` on DOM ready. While default by true,
      other environments such as FastBoot or a testing harness can set this
      property to `false` and control the precise timing and behavior of the boot
      process.
       @property autoboot
      @type Boolean
      @default true
      @private
    */
    autoboot: true,

    init: function () {
      this._super.apply(this, arguments);

      if (!this.$) {
        this.$ = _emberViewsSystemJquery["default"];
      }

      this.buildRegistry();

      registerLibraries();
      logLibraryVersions();

      // Start off the number of deferrals at 1. This will be
      // decremented by the Application's own `initialize` method.
      this._readinessDeferrals = 1;

      if (_emberMetal["default"].FEATURES.isEnabled('ember-application-visit')) {
        if (this.autoboot) {
          // Create subclass of Ember.Router for this Application instance.
          // This is to ensure that someone reopening `App.Router` does not
          // tamper with the default `Ember.Router`.
          // 2.0TODO: Can we move this into a globals-mode-only library?
          this.Router = (this.Router || _emberRoutingSystemRouter["default"]).extend();
          this.buildDefaultInstance();
          this.waitForDOMReady();
        }
      } else {
        this.Router = (this.Router || _emberRoutingSystemRouter["default"]).extend();
        this.buildDefaultInstance();
        this.waitForDOMReady();
      }
    },

    /**
      Build and configure the registry for the current application.
       @private
      @method buildRegistry
      @return {Ember.Registry} the configured registry
    */
    buildRegistry: function () {
      var registry = this.registry = Application.buildRegistry(this);

      return registry;
    },

    /**
      Create a container for the current application's registry.
       @private
      @method buildInstance
      @return {Ember.Container} the configured container
    */
    buildInstance: function () {
      return _emberApplicationSystemApplicationInstance["default"].create({
        customEvents: (0, _emberMetalProperty_get.get)(this, 'customEvents'),
        rootElement: (0, _emberMetalProperty_get.get)(this, 'rootElement'),
        applicationRegistry: this.registry
      });
    },

    buildDefaultInstance: function () {
      var instance = this.buildInstance();

      // For the default instance only, set the view registry to the global
      // Ember.View.views hash for backwards-compatibility.
      _emberViewsViewsView["default"].views = instance.container.lookup('-view-registry:main');

      // TODO2.0: Legacy support for App.__container__
      // and global methods on App that rely on a single,
      // default instance.
      this.__deprecatedInstance__ = instance;
      this.__container__ = instance.container;

      return instance;
    },

    /**
      Automatically initialize the application once the DOM has
      become ready.
       The initialization itself is scheduled on the actions queue
      which ensures that application loading finishes before
      booting.
       If you are asynchronously loading code, you should call
      `deferReadiness()` to defer booting, and then call
      `advanceReadiness()` once all of your code has finished
      loading.
       @private
      @method waitForDOMReady
    */
    waitForDOMReady: function () {
      if (!this.$ || this.$.isReady) {
        _emberMetalRun_loop["default"].schedule('actions', this, 'domReady');
      } else {
        this.$().ready(_emberMetalRun_loop["default"].bind(this, 'domReady'));
      }
    },

    /**
      Use this to defer readiness until some condition is true.
       Example:
       ```javascript
      var App = Ember.Application.create();
       App.deferReadiness();
       // Ember.$ is a reference to the jQuery object/function
      Ember.$.getJSON('/auth-token', function(token) {
        App.token = token;
        App.advanceReadiness();
      });
      ```
       This allows you to perform asynchronous setup logic and defer
      booting your application until the setup has finished.
       However, if the setup requires a loading UI, it might be better
      to use the router for this purpose.
       @method deferReadiness
      @public
    */
    deferReadiness: function () {
      _emberMetal["default"].assert('You must call deferReadiness on an instance of Ember.Application', this instanceof Application);
      _emberMetal["default"].assert('You cannot defer readiness since the `ready()` hook has already been called.', this._readinessDeferrals > 0);
      this._readinessDeferrals++;
    },

    /**
      Call `advanceReadiness` after any asynchronous setup logic has completed.
      Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
      or the application will never become ready and routing will not begin.
       @method advanceReadiness
      @see {Ember.Application#deferReadiness}
      @public
    */
    advanceReadiness: function () {
      _emberMetal["default"].assert('You must call advanceReadiness on an instance of Ember.Application', this instanceof Application);
      this._readinessDeferrals--;

      if (this._readinessDeferrals === 0) {
        _emberMetalRun_loop["default"].once(this, this.didBecomeReady);
      }
    },

    /**
      Registers a factory that can be used for dependency injection (with
      `App.inject`) or for service lookup. Each factory is registered with
      a full name including two parts: `type:name`.
       A simple example:
       ```javascript
      var App = Ember.Application.create();
       App.Orange = Ember.Object.extend();
      App.register('fruit:favorite', App.Orange);
      ```
       Ember will resolve factories from the `App` namespace automatically.
      For example `App.CarsController` will be discovered and returned if
      an application requests `controller:cars`.
       An example of registering a controller with a non-standard name:
       ```javascript
      var App = Ember.Application.create();
      var Session = Ember.Controller.extend();
       App.register('controller:session', Session);
       // The Session controller can now be treated like a normal controller,
      // despite its non-standard name.
      App.ApplicationController = Ember.Controller.extend({
        needs: ['session']
      });
      ```
       Registered factories are **instantiated** by having `create`
      called on them. Additionally they are **singletons**, each time
      they are looked up they return the same instance.
       Some examples modifying that default behavior:
       ```javascript
      var App = Ember.Application.create();
       App.Person = Ember.Object.extend();
      App.Orange = Ember.Object.extend();
      App.Email = Ember.Object.extend();
      App.session = Ember.Object.create();
       App.register('model:user', App.Person, { singleton: false });
      App.register('fruit:favorite', App.Orange);
      App.register('communication:main', App.Email, { singleton: false });
      App.register('session', App.session, { instantiate: false });
      ```
       @method register
      @param  fullName {String} type:name (e.g., 'model:user')
      @param  factory {Function} (e.g., App.Person)
      @param  options {Object} (optional) disable instantiation or singleton usage
      @public
    **/
    register: function () {
      var _registry;

      (_registry = this.registry).register.apply(_registry, arguments);
    },

    /**
      Define a dependency injection onto a specific factory or all factories
      of a type.
       When Ember instantiates a controller, view, or other framework component
      it can attach a dependency to that component. This is often used to
      provide services to a set of framework components.
       An example of providing a session object to all controllers:
       ```javascript
      var App = Ember.Application.create();
      var Session = Ember.Object.extend({ isAuthenticated: false });
       // A factory must be registered before it can be injected
      App.register('session:main', Session);
       // Inject 'session:main' onto all factories of the type 'controller'
      // with the name 'session'
      App.inject('controller', 'session', 'session:main');
       App.IndexController = Ember.Controller.extend({
        isLoggedIn: Ember.computed.alias('session.isAuthenticated')
      });
      ```
       Injections can also be performed on specific factories.
       ```javascript
      App.inject(<full_name or type>, <property name>, <full_name>)
      App.inject('route', 'source', 'source:main')
      App.inject('route:application', 'email', 'model:email')
      ```
       It is important to note that injections can only be performed on
      classes that are instantiated by Ember itself. Instantiating a class
      directly (via `create` or `new`) bypasses the dependency injection
      system.
       **Note:** Ember-Data instantiates its models in a unique manner, and consequently
      injections onto models (or all models) will not work as expected. Injections
      on models can be enabled by setting `Ember.MODEL_FACTORY_INJECTIONS`
      to `true`.
       @method inject
      @param  factoryNameOrType {String}
      @param  property {String}
      @param  injectionName {String}
      @public
    **/
    inject: function () {
      var _registry2;

      (_registry2 = this.registry).injection.apply(_registry2, arguments);
    },

    /**
      Calling initialize manually is not supported.
       Please see Ember.Application#advanceReadiness and
      Ember.Application#deferReadiness.
       @private
      @deprecated
      @method initialize
     **/
    initialize: function () {
      _emberMetal["default"].deprecate('Calling initialize manually is not supported. Please see Ember.Application#advanceReadiness and Ember.Application#deferReadiness');
    },

    /**
      Initialize the application. This happens automatically.
       Run any initializers and run the application load hook. These hooks may
      choose to defer readiness. For example, an authentication hook might want
      to defer readiness until the auth token has been retrieved.
       @private
      @method domReady
    */
    domReady: function () {
      if (this.isDestroyed) {
        return;
      }

      this.boot();

      return this;
    },

    boot: function () {
      if (this._bootPromise) {
        return this._bootPromise;
      }

      var defer = new _emberMetal["default"].RSVP.defer();
      this._bootPromise = defer.promise;
      this._bootResolver = defer;

      this.runInitializers(this.registry);
      (0, _emberRuntimeSystemLazy_load.runLoadHooks)('application', this);

      this.advanceReadiness();

      return this._bootPromise;
    },

    /**
      Reset the application. This is typically used only in tests. It cleans up
      the application in the following order:
       1. Deactivate existing routes
      2. Destroy all objects in the container
      3. Create a new application container
      4. Re-route to the existing url
       Typical Example:
       ```javascript
      var App;
       run(function() {
        App = Ember.Application.create();
      });
       module('acceptance test', {
        setup: function() {
          App.reset();
        }
      });
       test('first test', function() {
        // App is freshly reset
      });
       test('second test', function() {
        // App is again freshly reset
      });
      ```
       Advanced Example:
       Occasionally you may want to prevent the app from initializing during
      setup. This could enable extra configuration, or enable asserting prior
      to the app becoming ready.
       ```javascript
      var App;
       run(function() {
        App = Ember.Application.create();
      });
       module('acceptance test', {
        setup: function() {
          run(function() {
            App.reset();
            App.deferReadiness();
          });
        }
      });
       test('first test', function() {
        ok(true, 'something before app is initialized');
         run(function() {
          App.advanceReadiness();
        });
         ok(true, 'something after app is initialized');
      });
      ```
       @method reset
      @public
    **/
    reset: function () {
      var instance = this.__deprecatedInstance__;

      this._readinessDeferrals = 1;
      this._bootPromise = null;
      this._bootResolver = null;

      function handleReset() {
        (0, _emberMetalRun_loop["default"])(instance, 'destroy');

        _emberMetalRun_loop["default"].schedule('actions', this, 'domReady', this.buildDefaultInstance());
      }

      _emberMetalRun_loop["default"].join(this, handleReset);
    },

    /**
      @private
      @method runInitializers
    */
    runInitializers: function (registry) {
      var App = this;
      this._runInitializer('initializers', function (name, initializer) {
        _emberMetal["default"].assert('No application initializer named \'' + name + '\'', !!initializer);

        if (_emberMetal["default"].FEATURES.isEnabled('ember-application-initializer-context')) {
          initializer.initialize(registry, App);
        } else {
          var ref = initializer.initialize;
          ref(registry, App);
        }
      });
    },

    runInstanceInitializers: function (instance) {
      this._runInitializer('instanceInitializers', function (name, initializer) {
        _emberMetal["default"].assert('No instance initializer named \'' + name + '\'', !!initializer);
        initializer.initialize(instance);
      });
    },

    _runInitializer: function (bucketName, cb) {
      var initializersByName = (0, _emberMetalProperty_get.get)(this.constructor, bucketName);
      var initializers = props(initializersByName);
      var graph = new _dagMap["default"]();
      var initializer;

      for (var i = 0; i < initializers.length; i++) {
        initializer = initializersByName[initializers[i]];
        graph.addEdges(initializer.name, initializer, initializer.before, initializer.after);
      }

      graph.topsort(function (vertex) {
        cb(vertex.name, vertex.value);
      });
    },

    /**
      @private
      @method didBecomeReady
    */
    didBecomeReady: function () {
      if (this.autoboot) {
        if (_emberMetalEnvironment["default"].hasDOM) {
          this.__deprecatedInstance__.setupEventDispatcher();
        }

        this.runInstanceInitializers(this.__deprecatedInstance__);
        this.ready(); // user hook
        this.__deprecatedInstance__.startRouting();

        if (!_emberMetal["default"].testing) {
          // Eagerly name all classes that are already loaded
          _emberMetal["default"].Namespace.processAll();
          _emberMetal["default"].BOOTED = true;
        }

        this.resolve(this);
      }

      this._bootResolver.resolve();
    },

    /**
      Called when the Application has become ready, immediately before routing
      begins. The call will be delayed until the DOM has become ready.
       @event ready
      @public
    */
    ready: function () {
      return this;
    },

    /**
      Set this to provide an alternate class to `Ember.DefaultResolver`
        @deprecated Use 'Resolver' instead
      @property resolver
      @public
    */
    resolver: null,

    /**
      Set this to provide an alternate class to `Ember.DefaultResolver`
       @property resolver
      @public
    */
    Resolver: null,

    // This method must be moved to the application instance object
    willDestroy: function () {
      this._super.apply(this, arguments);
      _emberMetal["default"].BOOTED = false;
      this._bootPromise = null;
      this._bootResolver = null;
      this.__deprecatedInstance__.destroy();
    },

    initializer: function (options) {
      this.constructor.initializer(options);
    },

    /**
      @method then
      @private
      @deprecated
    */
    then: function () {
      _emberMetal["default"].deprecate('Do not use `.then` on an instance of Ember.Application.  Please use the `.ready` hook instead.', false, { url: 'http://emberjs.com/guides/deprecations/#toc_deprecate-code-then-code-on-ember-application' });

      this._super.apply(this, arguments);
    }
  });

  if (_emberMetal["default"].FEATURES.isEnabled('ember-application-instance-initializers')) {
    Application.reopen({
      instanceInitializer: function (options) {
        this.constructor.instanceInitializer(options);
      }
    });

    Application.reopenClass({
      instanceInitializer: buildInitializerMethod('instanceInitializers', 'instance initializer')
    });
  }

  if (_emberMetal["default"].FEATURES.isEnabled('ember-application-visit')) {
    Application.reopen({
      /**
        Creates a new instance of the application and instructs it to route to the
        specified initial URL. This method returns a promise that will be resolved
        once rendering is complete. That promise is resolved with the instance.
         ```js
        App.visit('/users').then(function(instance) {
          var view = instance.view;
          view.appendTo('#qunit-test-fixtures');
        });
       ```
         @method visit
        @private
      */
      visit: function (url) {
        var instance = this.buildInstance();
        this.runInstanceInitializers(instance);

        var renderPromise = new _emberMetal["default"].RSVP.Promise(function (res, rej) {
          instance.didCreateRootView = function (view) {
            instance.view = view;
            res(instance);
          };
        });

        instance.overrideRouterLocation({ location: 'none' });

        return instance.handleURL(url).then(function () {
          return renderPromise;
        });
      }
    });
  }

  Application.reopenClass({
    initializers: (0, _emberMetalPlatformCreate["default"])(null),
    instanceInitializers: (0, _emberMetalPlatformCreate["default"])(null),

    /**
      Initializer receives an object which has the following attributes:
      `name`, `before`, `after`, `initialize`. The only required attribute is
      `initialize`, all others are optional.
       * `name` allows you to specify under which name the initializer is registered.
      This must be a unique name, as trying to register two initializers with the
      same name will result in an error.
       ```javascript
      Ember.Application.initializer({
        name: 'namedInitializer',
         initialize: function(container, application) {
          Ember.debug('Running namedInitializer!');
        }
      });
      ```
       * `before` and `after` are used to ensure that this initializer is ran prior
      or after the one identified by the value. This value can be a single string
      or an array of strings, referencing the `name` of other initializers.
       An example of ordering initializers, we create an initializer named `first`:
       ```javascript
      Ember.Application.initializer({
        name: 'first',
         initialize: function(container, application) {
          Ember.debug('First initializer!');
        }
      });
       // DEBUG: First initializer!
      ```
       We add another initializer named `second`, specifying that it should run
      after the initializer named `first`:
       ```javascript
      Ember.Application.initializer({
        name: 'second',
        after: 'first',
         initialize: function(container, application) {
          Ember.debug('Second initializer!');
        }
      });
       // DEBUG: First initializer!
      // DEBUG: Second initializer!
      ```
       Afterwards we add a further initializer named `pre`, this time specifying
      that it should run before the initializer named `first`:
       ```javascript
      Ember.Application.initializer({
        name: 'pre',
        before: 'first',
         initialize: function(container, application) {
          Ember.debug('Pre initializer!');
        }
      });
       // DEBUG: Pre initializer!
      // DEBUG: First initializer!
      // DEBUG: Second initializer!
      ```
       Finally we add an initializer named `post`, specifying it should run after
      both the `first` and the `second` initializers:
       ```javascript
      Ember.Application.initializer({
        name: 'post',
        after: ['first', 'second'],
         initialize: function(container, application) {
          Ember.debug('Post initializer!');
        }
      });
       // DEBUG: Pre initializer!
      // DEBUG: First initializer!
      // DEBUG: Second initializer!
      // DEBUG: Post initializer!
      ```
       * `initialize` is a callback function that receives two arguments, `container`
      and `application` on which you can operate.
       Example of using `container` to preload data into the store:
       ```javascript
      Ember.Application.initializer({
        name: 'preload-data',
         initialize: function(container, application) {
          var store = container.lookup('store:main');
           store.pushPayload(preloadedData);
        }
      });
      ```
       Example of using `application` to register an adapter:
       ```javascript
      Ember.Application.initializer({
        name: 'api-adapter',
         initialize: function(container, application) {
          application.register('api-adapter:main', ApiAdapter);
        }
      });
      ```
       @method initializer
      @param initializer {Object}
      @public
     */
    initializer: buildInitializerMethod('initializers', 'initializer'),

    /**
      This creates a registry with the default Ember naming conventions.
       It also configures the registry:
       * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
       @private
      @method buildRegistry
      @static
      @param {Ember.Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @public
    */
    buildRegistry: function (namespace) {
      var registry = new _containerRegistry["default"]();

      registry.set = _emberMetalProperty_set.set;
      registry.resolver = resolverFor(namespace);
      registry.normalizeFullName = registry.resolver.normalize;
      registry.describe = registry.resolver.describe;
      registry.makeToString = registry.resolver.makeToString;

      registry.optionsForType('component', { singleton: false });
      registry.optionsForType('view', { singleton: false });
      registry.optionsForType('template', { instantiate: false });

      registry.register('application:main', namespace, { instantiate: false });

      registry.register('controller:basic', _emberRuntimeControllersController["default"], { instantiate: false });
      registry.register('controller:object', _emberRuntimeControllersObject_controller["default"], { instantiate: false });
      registry.register('controller:array', _emberRuntimeControllersArray_controller["default"], { instantiate: false });

      registry.register('renderer:-dom', { create: function () {
          return new _emberMetalViewsRenderer["default"](new _emberHtmlbarsSystemDomHelper["default"]());
        } });

      registry.injection('view', 'renderer', 'renderer:-dom');
      registry.register('view:select', _emberViewsViewsSelect["default"]);
      registry.register('view:-outlet', _emberRoutingViewsViewsOutlet.OutletView);

      registry.register('-view-registry:main', { create: function () {
          return {};
        } });

      registry.injection('view', '_viewRegistry', '-view-registry:main');

      registry.register('view:toplevel', _emberViewsViewsView["default"].extend());

      registry.register('route:basic', _emberRoutingSystemRoute["default"], { instantiate: false });
      registry.register('event_dispatcher:main', _emberViewsSystemEvent_dispatcher["default"]);

      registry.injection('router:main', 'namespace', 'application:main');
      registry.injection('view:-outlet', 'namespace', 'application:main');

      registry.register('location:auto', _emberRoutingLocationAuto_location["default"]);
      registry.register('location:hash', _emberRoutingLocationHash_location["default"]);
      registry.register('location:history', _emberRoutingLocationHistory_location["default"]);
      registry.register('location:none', _emberRoutingLocationNone_location["default"]);

      registry.injection('controller', 'target', 'router:main');
      registry.injection('controller', 'namespace', 'application:main');

      registry.register('-bucket-cache:main', _emberRoutingSystemCache["default"]);
      registry.injection('router', '_bucketCache', '-bucket-cache:main');
      registry.injection('route', '_bucketCache', '-bucket-cache:main');
      registry.injection('controller', '_bucketCache', '-bucket-cache:main');

      registry.injection('route', 'router', 'router:main');

      registry.register('component:-text-field', _emberViewsViewsText_field["default"]);
      registry.register('component:-text-area', _emberViewsViewsText_area["default"]);
      registry.register('component:-checkbox', _emberViewsViewsCheckbox["default"]);
      registry.register('view:-legacy-each', _emberViewsViewsLegacy_each_view["default"]);
      registry.register('component:-link-to', _emberRoutingViewsViewsLink["default"]);

      // Register the routing service...
      registry.register('service:-routing', _emberRoutingServicesRouting["default"]);
      // Then inject the app router into it
      registry.injection('service:-routing', 'router', 'router:main');

      // DEBUGGING
      registry.register('resolver-for-debugging:main', registry.resolver.__resolver__, { instantiate: false });
      registry.injection('container-debug-adapter:main', 'resolver', 'resolver-for-debugging:main');
      registry.injection('data-adapter:main', 'containerDebugAdapter', 'container-debug-adapter:main');
      // Custom resolver authors may want to register their own ContainerDebugAdapter with this key

      registry.register('container-debug-adapter:main', _emberExtensionSupportContainer_debug_adapter["default"]);

      return registry;
    }
  });

  /**
    This function defines the default lookup rules for container lookups:
  
    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after classifying the name.
      For example, `controller:post` looks up `App.PostController` by default.
    * if the default lookup fails, look for registered classes on the container
  
    This allows the application to register default injections in the container
    that could be overridden by the normal naming convention.
  
    @private
    @method resolverFor
    @param {Ember.Namespace} namespace the namespace to look for classes
    @return {*} the resolved value for a given lookup
  */
  function resolverFor(namespace) {
    _emberMetal["default"].deprecate('Application.resolver is deprecated in favor of Application.Resolver', !namespace.get('resolver'));

    var ResolverClass = namespace.get('resolver') || namespace.get('Resolver') || _emberApplicationSystemResolver["default"];
    var resolver = ResolverClass.create({
      namespace: namespace
    });

    function resolve(fullName) {
      return resolver.resolve(fullName);
    }

    resolve.describe = function (fullName) {
      return resolver.lookupDescription(fullName);
    };

    resolve.makeToString = function (factory, fullName) {
      return resolver.makeToString(factory, fullName);
    };

    resolve.normalize = function (fullName) {
      if (resolver.normalize) {
        return resolver.normalize(fullName);
      } else {
        _emberMetal["default"].deprecate('The Resolver should now provide a \'normalize\' function', false);
        return fullName;
      }
    };

    resolve.knownForType = function knownForType(type) {
      if (resolver.knownForType) {
        return resolver.knownForType(type);
      }
    };

    resolve.moduleBasedResolver = resolver.moduleBasedResolver;

    resolve.__resolver__ = resolver;

    return resolve;
  }

  function registerLibraries() {
    if (!librariesRegistered) {
      librariesRegistered = true;

      if (_emberMetalEnvironment["default"].hasDOM) {
        _emberMetal["default"].libraries.registerCoreLibrary('jQuery', (0, _emberViewsSystemJquery["default"])().jquery);
      }
    }
  }

  function logLibraryVersions() {
    if (_emberMetal["default"].LOG_VERSION) {
      // we only need to see this once per Application#init
      _emberMetal["default"].LOG_VERSION = false;
      var libs = _emberMetal["default"].libraries._registry;

      var nameLengths = (0, _emberMetalEnumerable_utils.map)(libs, function (item) {
        return (0, _emberMetalProperty_get.get)(item, 'name.length');
      });

      var maxNameLength = Math.max.apply(this, nameLengths);

      _emberMetal["default"].debug('-------------------------------');
      for (var i = 0, l = libs.length; i < l; i++) {
        var lib = libs[i];
        var spaces = new Array(maxNameLength - lib.name.length + 1).join(' ');
        _emberMetal["default"].debug([lib.name, spaces, ' : ', lib.version].join(''));
      }
      _emberMetal["default"].debug('-------------------------------');
    }
  }

  function buildInitializerMethod(bucketName, humanName) {
    return function (initializer) {
      // If this is the first initializer being added to a subclass, we are going to reopen the class
      // to make sure we have a new `initializers` object, which extends from the parent class' using
      // prototypal inheritance. Without this, attempting to add initializers to the subclass would
      // pollute the parent class as well as other subclasses.
      if (this.superclass[bucketName] !== undefined && this.superclass[bucketName] === this[bucketName]) {
        var attrs = {};
        attrs[bucketName] = (0, _emberMetalPlatformCreate["default"])(this[bucketName]);
        this.reopenClass(attrs);
      }

      _emberMetal["default"].assert('The ' + humanName + ' \'' + initializer.name + '\' has already been registered', !this[bucketName][initializer.name]);
      _emberMetal["default"].assert('An ' + humanName + ' cannot be registered without an initialize function', (0, _emberMetalUtils.canInvoke)(initializer, 'initialize'));
      _emberMetal["default"].assert('An ' + humanName + ' cannot be registered without a name property', initializer.name !== undefined);

      this[bucketName][initializer.name] = initializer;
    };
  }

  exports["default"] = Application;
});
/**
@module ember
@submodule ember-application
*/
// Ember.FEATURES, Ember.deprecate, Ember.assert, Ember.libraries, LOG_VERSION, Namespace, BOOTED
enifed('ember-application/system/resolver', ['exports', 'ember-metal/core', 'ember-metal/property_get', 'ember-metal/logger', 'ember-metal/keys', 'ember-runtime/system/string', 'ember-runtime/system/object', 'ember-runtime/system/namespace', 'ember-htmlbars/helpers', 'ember-application/utils/validate-type', 'ember-metal/dictionary'], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalLogger, _emberMetalKeys, _emberRuntimeSystemString, _emberRuntimeSystemObject, _emberRuntimeSystemNamespace, _emberHtmlbarsHelpers, _emberApplicationUtilsValidateType, _emberMetalDictionary) {
  var Resolver = _emberRuntimeSystemObject["default"].extend({
    /*
      This will be set to the Application instance when it is
      created.
       @property namespace
    */
    namespace: null,
    normalize: null, // required
    resolve: null, // required
    parseName: null, // required
    lookupDescription: null, // required
    makeToString: null, // required
    resolveOther: null, // required
    _logLookup: null // required
  });

  exports.Resolver = Resolver;
  /**
    The DefaultResolver defines the default lookup rules to resolve
    container lookups before consulting the container for registered
    items:
  
    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after converting
      the name. For example, `controller:post` looks up
      `App.PostController` by default.
    * there are some nuances (see examples below)
  
    ### How Resolving Works
  
    The container calls this object's `resolve` method with the
    `fullName` argument.
  
    It first parses the fullName into an object using `parseName`.
  
    Then it checks for the presence of a type-specific instance
    method of the form `resolve[Type]` and calls it if it exists.
    For example if it was resolving 'template:post', it would call
    the `resolveTemplate` method.
  
    Its last resort is to call the `resolveOther` method.
  
    The methods of this object are designed to be easy to override
    in a subclass. For example, you could enhance how a template
    is resolved like so:
  
    ```javascript
    App = Ember.Application.create({
      Resolver: Ember.DefaultResolver.extend({
        resolveTemplate: function(parsedName) {
          var resolvedTemplate = this._super(parsedName);
          if (resolvedTemplate) { return resolvedTemplate; }
          return Ember.TEMPLATES['not_found'];
        }
      })
    });
    ```
  
    Some examples of how names are resolved:
  
    ```
    'template:post'           //=> Ember.TEMPLATES['post']
    'template:posts/byline'   //=> Ember.TEMPLATES['posts/byline']
    'template:posts.byline'   //=> Ember.TEMPLATES['posts/byline']
    'template:blogPost'       //=> Ember.TEMPLATES['blogPost']
                              //   OR
                              //   Ember.TEMPLATES['blog_post']
    'controller:post'         //=> App.PostController
    'controller:posts.index'  //=> App.PostsIndexController
    'controller:blog/post'    //=> Blog.PostController
    'controller:basic'        //=> Ember.Controller
    'route:post'              //=> App.PostRoute
    'route:posts.index'       //=> App.PostsIndexRoute
    'route:blog/post'         //=> Blog.PostRoute
    'route:basic'             //=> Ember.Route
    'view:post'               //=> App.PostView
    'view:posts.index'        //=> App.PostsIndexView
    'view:blog/post'          //=> Blog.PostView
    'view:basic'              //=> Ember.View
    'foo:post'                //=> App.PostFoo
    'model:post'              //=> App.Post
    ```
  
    @class DefaultResolver
    @namespace Ember
    @extends Ember.Object
    @public
  */

  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    /**
      This will be set to the Application instance when it is
      created.
       @property namespace
      @public
    */
    namespace: null,

    init: function () {
      this._parseNameCache = (0, _emberMetalDictionary["default"])(null);
    },
    normalize: function (fullName) {
      var _fullName$split = fullName.split(':', 2);

      var type = _fullName$split[0];
      var name = _fullName$split[1];

      _emberMetalCore["default"].assert('Tried to normalize a container name without a colon (:) in it.' + ' You probably tried to lookup a name that did not contain a type,' + ' a colon, and a name. A proper lookup name would be `view:post`.', fullName.split(':').length === 2);

      if (type !== 'template') {
        var result = name;

        if (result.indexOf('.') > -1) {
          result = result.replace(/\.(.)/g, function (m) {
            return m.charAt(1).toUpperCase();
          });
        }

        if (name.indexOf('_') > -1) {
          result = result.replace(/_(.)/g, function (m) {
            return m.charAt(1).toUpperCase();
          });
        }

        return type + ':' + result;
      } else {
        return fullName;
      }
    },

    /**
      This method is called via the container's resolver method.
      It parses the provided `fullName` and then looks up and
      returns the appropriate template or class.
       @method resolve
      @param {String} fullName the lookup string
      @return {Object} the resolved factory
      @public
    */
    resolve: function (fullName) {
      var parsedName = this.parseName(fullName);
      var resolveMethodName = parsedName.resolveMethodName;
      var resolved;

      if (this[resolveMethodName]) {
        resolved = this[resolveMethodName](parsedName);
      }

      resolved = resolved || this.resolveOther(parsedName);

      if (parsedName.root && parsedName.root.LOG_RESOLVER) {
        this._logLookup(resolved, parsedName);
      }

      if (resolved) {
        (0, _emberApplicationUtilsValidateType["default"])(resolved, parsedName);
      }

      return resolved;
    },

    /**
      Convert the string name of the form 'type:name' to
      a Javascript object with the parsed aspects of the name
      broken out.
       @protected
      @param {String} fullName the lookup string
      @method parseName
      @public
    */

    parseName: function (fullName) {
      return this._parseNameCache[fullName] || (this._parseNameCache[fullName] = this._parseName(fullName));
    },

    _parseName: function (fullName) {
      var _fullName$split2 = fullName.split(':');

      var type = _fullName$split2[0];
      var fullNameWithoutType = _fullName$split2[1];

      var name = fullNameWithoutType;
      var namespace = (0, _emberMetalProperty_get.get)(this, 'namespace');
      var root = namespace;

      if (type !== 'template' && name.indexOf('/') !== -1) {
        var parts = name.split('/');
        name = parts[parts.length - 1];
        var namespaceName = (0, _emberRuntimeSystemString.capitalize)(parts.slice(0, -1).join('.'));
        root = _emberRuntimeSystemNamespace["default"].byName(namespaceName);

        _emberMetalCore["default"].assert('You are looking for a ' + name + ' ' + type + ' in the ' + namespaceName + ' namespace, but the namespace could not be found', root);
      }

      var resolveMethodName = fullNameWithoutType === 'main' ? 'Main' : (0, _emberRuntimeSystemString.classify)(type);

      if (!(name && type)) {
        throw new TypeError('Invalid fullName: `' + fullName + '`, must be of the form `type:name` ');
      }

      return {
        fullName: fullName,
        type: type,
        fullNameWithoutType: fullNameWithoutType,
        name: name,
        root: root,
        resolveMethodName: 'resolve' + resolveMethodName
      };
    },

    /**
      Returns a human-readable description for a fullName. Used by the
      Application namespace in assertions to describe the
      precise name of the class that Ember is looking for, rather than
      container keys.
       @protected
      @param {String} fullName the lookup string
      @method lookupDescription
      @public
    */
    lookupDescription: function (fullName) {
      var parsedName = this.parseName(fullName);
      var description;

      if (parsedName.type === 'template') {
        return 'template at ' + parsedName.fullNameWithoutType.replace(/\./g, '/');
      }

      description = parsedName.root + '.' + (0, _emberRuntimeSystemString.classify)(parsedName.name).replace(/\./g, '');

      if (parsedName.type !== 'model') {
        description += (0, _emberRuntimeSystemString.classify)(parsedName.type);
      }

      return description;
    },

    makeToString: function (factory, fullName) {
      return factory.toString();
    },

    /**
      Given a parseName object (output from `parseName`), apply
      the conventions expected by `Ember.Router`
       @protected
      @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method useRouterNaming
      @public
    */
    useRouterNaming: function (parsedName) {
      parsedName.name = parsedName.name.replace(/\./g, '_');
      if (parsedName.name === 'basic') {
        parsedName.name = '';
      }
    },
    /**
      Look up the template in Ember.TEMPLATES
       @protected
      @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveTemplate
      @public
    */
    resolveTemplate: function (parsedName) {
      var templateName = parsedName.fullNameWithoutType.replace(/\./g, '/');

      if (_emberMetalCore["default"].TEMPLATES[templateName]) {
        return _emberMetalCore["default"].TEMPLATES[templateName];
      }

      templateName = (0, _emberRuntimeSystemString.decamelize)(templateName);
      if (_emberMetalCore["default"].TEMPLATES[templateName]) {
        return _emberMetalCore["default"].TEMPLATES[templateName];
      }
    },

    /**
      Lookup the view using `resolveOther`
       @protected
      @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveView
      @public
    */
    resolveView: function (parsedName) {
      this.useRouterNaming(parsedName);
      return this.resolveOther(parsedName);
    },

    /**
      Lookup the controller using `resolveOther`
       @protected
      @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveController
      @public
    */
    resolveController: function (parsedName) {
      this.useRouterNaming(parsedName);
      return this.resolveOther(parsedName);
    },
    /**
      Lookup the route using `resolveOther`
       @protected
      @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveRoute
      @public
    */
    resolveRoute: function (parsedName) {
      this.useRouterNaming(parsedName);
      return this.resolveOther(parsedName);
    },

    /**
      Lookup the model on the Application namespace
       @protected
      @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveModel
      @public
    */
    resolveModel: function (parsedName) {
      var className = (0, _emberRuntimeSystemString.classify)(parsedName.name);
      var factory = (0, _emberMetalProperty_get.get)(parsedName.root, className);

      if (factory) {
        return factory;
      }
    },
    /**
      Look up the specified object (from parsedName) on the appropriate
      namespace (usually on the Application)
       @protected
      @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveHelper
      @public
    */
    resolveHelper: function (parsedName) {
      return this.resolveOther(parsedName) || _emberHtmlbarsHelpers["default"][parsedName.fullNameWithoutType];
    },
    /**
      Look up the specified object (from parsedName) on the appropriate
      namespace (usually on the Application)
       @protected
      @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveOther
      @public
    */
    resolveOther: function (parsedName) {
      var className = (0, _emberRuntimeSystemString.classify)(parsedName.name) + (0, _emberRuntimeSystemString.classify)(parsedName.type);
      var factory = (0, _emberMetalProperty_get.get)(parsedName.root, className);
      if (factory) {
        return factory;
      }
    },

    resolveMain: function (parsedName) {
      var className = (0, _emberRuntimeSystemString.classify)(parsedName.type);
      return (0, _emberMetalProperty_get.get)(parsedName.root, className);
    },

    /**
     @method _logLookup
     @param {Boolean} found
     @param {Object} parsedName
     @private
    */
    _logLookup: function (found, parsedName) {
      var symbol, padding;

      if (found) {
        symbol = '[✓]';
      } else {
        symbol = '[ ]';
      }

      if (parsedName.fullName.length > 60) {
        padding = '.';
      } else {
        padding = new Array(60 - parsedName.fullName.length).join('.');
      }

      _emberMetalLogger["default"].info(symbol, parsedName.fullName, padding, this.lookupDescription(parsedName.fullName));
    },

    /**
     Used to iterate all items of a given type.
      @method knownForType
     @param {String} type the type to search for
     @private
     */
    knownForType: function (type) {
      var namespace = (0, _emberMetalProperty_get.get)(this, 'namespace');
      var suffix = (0, _emberRuntimeSystemString.classify)(type);
      var typeRegexp = new RegExp('' + suffix + '$');

      var known = (0, _emberMetalDictionary["default"])(null);
      var knownKeys = (0, _emberMetalKeys["default"])(namespace);
      for (var index = 0, _length = knownKeys.length; index < _length; index++) {
        var _name = knownKeys[index];

        if (typeRegexp.test(_name)) {
          var containerName = this.translateToContainerFullname(type, _name);

          known[containerName] = true;
        }
      }

      return known;
    },

    /**
     Converts provided name from the backing namespace into a container lookup name.
      Examples:
      App.FooBarHelper -> helper:foo-bar
     App.THelper -> helper:t
      @method translateToContainerFullname
     @param {String} type
     @param {String} name
     @private
     */

    translateToContainerFullname: function (type, name) {
      var suffix = (0, _emberRuntimeSystemString.classify)(type);
      var namePrefix = name.slice(0, suffix.length * -1);
      var dasherizedName = (0, _emberRuntimeSystemString.dasherize)(namePrefix);

      return '' + type + ':' + dasherizedName;
    }
  });
});
/**
@module ember
@submodule ember-application
*/

// Ember.TEMPLATES, Ember.assert
enifed('ember-application/utils/validate-type', ['exports'], function (exports) {
  exports["default"] = validateType;
  /**
  @module ember
  @submodule ember-application
  */

  var VALIDATED_TYPES = {
    route: ['assert', 'isRouteFactory', 'Ember.Route'],
    component: ['deprecate', 'isComponentFactory', 'Ember.Component'],
    view: ['deprecate', 'isViewFactory', 'Ember.View'],
    service: ['deprecate', 'isServiceFactory', 'Ember.Service']
  };

  function validateType(resolvedType, parsedName) {
    var validationAttributes = VALIDATED_TYPES[parsedName.type];

    if (!validationAttributes) {
      return;
    }

    var action = validationAttributes[0];
    var factoryFlag = validationAttributes[1];
    var expectedType = validationAttributes[2];

    if (action === 'deprecate') {
      Ember.deprecate('In Ember 2.0 ' + parsedName.type + ' factories must have an `' + factoryFlag + '` ' + ('property set to true. You registered ' + resolvedType + ' as a ' + parsedName.type + ' ') + ('factory. Either add the `' + factoryFlag + '` property to this factory or ') + ('extend from ' + expectedType + '.'), resolvedType[factoryFlag]);
    } else {
      Ember.assert('Expected ' + parsedName.fullName + ' to resolve to an ' + expectedType + ' but ' + ('instead it was ' + resolvedType + '.'), function () {
        return resolvedType[factoryFlag];
      });
    }
  }
});
enifed("ember-debug", ["exports", "ember-metal/core", "ember-metal/error", "ember-metal/logger", "ember-debug/deprecation-manager", "ember-metal/environment"], function (exports, _emberMetalCore, _emberMetalError, _emberMetalLogger, _emberDebugDeprecationManager, _emberMetalEnvironment) {
  exports._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags;

  /**
  @module ember
  @submodule ember-debug
  */

  /**
  @class Ember
  @public
  */

  function isPlainFunction(test) {
    return typeof test === "function" && test.PrototypeMixin === undefined;
  }

  /**
    Define an assertion that will throw an exception if the condition is not
    met. Ember build tools will remove any calls to `Ember.assert()` when
    doing a production build. Example:
  
    ```javascript
    // Test for truthiness
    Ember.assert('Must pass a valid object', obj);
  
    // Fail unconditionally
    Ember.assert('This code path should never be run');
    ```
  
    @method assert
    @param {String} desc A description of the assertion. This will become
      the text of the Error thrown if the assertion fails.
    @param {Boolean|Function} test Must be truthy for the assertion to pass. If
      falsy, an exception will be thrown. If this is a function, it will be executed and
      its return value will be used as condition.
    @public
  */
  _emberMetalCore["default"].assert = function (desc, test) {
    var throwAssertion;

    if (isPlainFunction(test)) {
      throwAssertion = !test();
    } else {
      throwAssertion = !test;
    }

    if (throwAssertion) {
      throw new _emberMetalError["default"]("Assertion Failed: " + desc);
    }
  };

  /**
    Display a warning with the provided message. Ember build tools will
    remove any calls to `Ember.warn()` when doing a production build.
  
    @method warn
    @param {String} message A warning to display.
    @param {Boolean} test An optional boolean. If falsy, the warning
      will be displayed.
    @public
  */
  _emberMetalCore["default"].warn = function (message, test) {
    if (!test) {
      _emberMetalLogger["default"].warn("WARNING: " + message);
      if ("trace" in _emberMetalLogger["default"]) {
        _emberMetalLogger["default"].trace();
      }
    }
  };

  /**
    Display a debug notice. Ember build tools will remove any calls to
    `Ember.debug()` when doing a production build.
  
    ```javascript
    Ember.debug('I\'m a debug notice!');
    ```
  
    @method debug
    @param {String} message A debug message to display.
    @public
  */
  _emberMetalCore["default"].debug = function (message) {
    _emberMetalLogger["default"].debug("DEBUG: " + message);
  };

  /**
    Display a deprecation warning with the provided message and a stack trace
    (Chrome and Firefox only). Ember build tools will remove any calls to
    `Ember.deprecate()` when doing a production build.
  
    @method deprecate
    @param {String} message A description of the deprecation.
    @param {Boolean|Function} test An optional boolean. If falsy, the deprecation
      will be displayed. If this is a function, it will be executed and its return
      value will be used as condition.
    @param {Object} options An optional object that can be used to pass
      in a `url` to the transition guide on the emberjs.com website, and a unique
      `id` for this deprecation. The `id` can be used by Ember debugging tools
      to change the behavior (raise, log or silence) for that specific deprecation.
      The `id` should be namespaced by dots, e.g. "view.helper.select".
    @public
  */
  _emberMetalCore["default"].deprecate = function (message, test, options) {
    if (_emberMetalCore["default"].ENV.RAISE_ON_DEPRECATION) {
      _emberDebugDeprecationManager["default"].setDefaultLevel(_emberDebugDeprecationManager.deprecationLevels.RAISE);
    }
    if (_emberDebugDeprecationManager["default"].getLevel(options && options.id) === _emberDebugDeprecationManager.deprecationLevels.SILENCE) {
      return;
    }

    var noDeprecation;

    if (isPlainFunction(test)) {
      noDeprecation = test();
    } else {
      noDeprecation = test;
    }

    if (noDeprecation) {
      return;
    }

    if (options && options.id) {
      message = message + (" [deprecation id: " + options.id + "]");
    }

    if (_emberDebugDeprecationManager["default"].getLevel(options && options.id) === _emberDebugDeprecationManager.deprecationLevels.RAISE) {
      throw new _emberMetalError["default"](message);
    }

    var error;

    // When using new Error, we can't do the arguments check for Chrome. Alternatives are welcome
    try {
      __fail__.fail();
    } catch (e) {
      error = e;
    }

    if (arguments.length === 3) {
      _emberMetalCore["default"].assert("options argument to Ember.deprecate should be an object", options && typeof options === "object");
      if (options.url) {
        message += " See " + options.url + " for more details.";
      }
    }

    if (_emberMetalCore["default"].LOG_STACKTRACE_ON_DEPRECATION && error.stack) {
      var stack;
      var stackStr = "";

      if (error["arguments"]) {
        // Chrome
        stack = error.stack.replace(/^\s+at\s+/gm, "").replace(/^([^\(]+?)([\n$])/gm, "{anonymous}($1)$2").replace(/^Object.<anonymous>\s*\(([^\)]+)\)/gm, "{anonymous}($1)").split("\n");
        stack.shift();
      } else {
        // Firefox
        stack = error.stack.replace(/(?:\n@:0)?\s+$/m, "").replace(/^\(/gm, "{anonymous}(").split("\n");
      }

      stackStr = "\n    " + stack.slice(2).join("\n    ");
      message = message + stackStr;
    }

    _emberMetalLogger["default"].warn("DEPRECATION: " + message);
  };

  /**
    Alias an old, deprecated method with its new counterpart.
  
    Display a deprecation warning with the provided message and a stack trace
    (Chrome and Firefox only) when the assigned method is called.
  
    Ember build tools will not remove calls to `Ember.deprecateFunc()`, though
    no warnings will be shown in production.
  
    ```javascript
    Ember.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);
    ```
  
    @method deprecateFunc
    @param {String} message A description of the deprecation.
    @param {Function} func The new function called to replace its deprecated counterpart.
    @return {Function} a new function that wrapped the original function with a deprecation warning
    @private
  */
  _emberMetalCore["default"].deprecateFunc = function (message, func) {
    return function () {
      _emberMetalCore["default"].deprecate(message);
      return func.apply(this, arguments);
    };
  };

  /**
    Run a function meant for debugging. Ember build tools will remove any calls to
    `Ember.runInDebug()` when doing a production build.
  
    ```javascript
    Ember.runInDebug(function() {
      Ember.Handlebars.EachView.reopen({
        didInsertElement: function() {
          console.log('I\'m happy');
        }
      });
    });
    ```
  
    @method runInDebug
    @param {Function} func The function to be executed.
    @since 1.5.0
    @public
  */
  _emberMetalCore["default"].runInDebug = function (func) {
    func();
  };

  /**
    Will call `Ember.warn()` if ENABLE_ALL_FEATURES, ENABLE_OPTIONAL_FEATURES, or
    any specific FEATURES flag is truthy.
  
    This method is called automatically in debug canary builds.
  
    @private
    @method _warnIfUsingStrippedFeatureFlags
    @return {void}
  */

  function _warnIfUsingStrippedFeatureFlags(FEATURES, featuresWereStripped) {
    if (featuresWereStripped) {
      _emberMetalCore["default"].warn("Ember.ENV.ENABLE_ALL_FEATURES is only available in canary builds.", !_emberMetalCore["default"].ENV.ENABLE_ALL_FEATURES);
      _emberMetalCore["default"].warn("Ember.ENV.ENABLE_OPTIONAL_FEATURES is only available in canary builds.", !_emberMetalCore["default"].ENV.ENABLE_OPTIONAL_FEATURES);

      for (var key in FEATURES) {
        if (FEATURES.hasOwnProperty(key) && key !== "isEnabled") {
          _emberMetalCore["default"].warn("FEATURE[\"" + key + "\"] is set as enabled, but FEATURE flags are only available in canary builds.", !FEATURES[key]);
        }
      }
    }
  }

  if (!_emberMetalCore["default"].testing) {
    // Complain if they're using FEATURE flags in builds other than canary
    _emberMetalCore["default"].FEATURES["features-stripped-test"] = true;
    var featuresWereStripped = true;

    if (_emberMetalCore["default"].FEATURES.isEnabled("features-stripped-test")) {
      featuresWereStripped = false;
    }

    delete _emberMetalCore["default"].FEATURES["features-stripped-test"];
    _warnIfUsingStrippedFeatureFlags(_emberMetalCore["default"].ENV.FEATURES, featuresWereStripped);

    // Inform the developer about the Ember Inspector if not installed.
    var isFirefox = _emberMetalEnvironment["default"].isFirefox;
    var isChrome = _emberMetalEnvironment["default"].isChrome;

    if (typeof window !== "undefined" && (isFirefox || isChrome) && window.addEventListener) {
      window.addEventListener("load", function () {
        if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset.emberExtension) {
          var downloadURL;

          if (isChrome) {
            downloadURL = "https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi";
          } else if (isFirefox) {
            downloadURL = "https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/";
          }

          _emberMetalCore["default"].debug("For more advanced debugging, install the Ember Inspector from " + downloadURL);
        }
      }, false);
    }
  }

  _emberMetalCore["default"].Debug = {
    _addDeprecationLevel: function (id, level) {
      _emberDebugDeprecationManager["default"].setLevel(id, level);
    },
    _deprecationLevels: _emberDebugDeprecationManager.deprecationLevels
  };

  /*
    We are transitioning away from `ember.js` to `ember.debug.js` to make
    it much clearer that it is only for local development purposes.
  
    This flag value is changed by the tooling (by a simple string replacement)
    so that if `ember.js` (which must be output for backwards compat reasons) is
    used a nice helpful warning message will be printed out.
  */
  var runningNonEmberDebugJS = false;
  exports.runningNonEmberDebugJS = runningNonEmberDebugJS;
  if (runningNonEmberDebugJS) {
    _emberMetalCore["default"].warn("Please use `ember.debug.js` instead of `ember.js` for development and debugging.");
  }
});
/*global __fail__*/
enifed('ember-debug/deprecation-manager', ['exports', 'ember-metal/dictionary', 'ember-metal/utils'], function (exports, _emberMetalDictionary, _emberMetalUtils) {
  var deprecationLevels = {
    RAISE: (0, _emberMetalUtils.symbol)('RAISE'),
    LOG: (0, _emberMetalUtils.symbol)('LOG'),
    SILENCE: (0, _emberMetalUtils.symbol)('SILENCE')
  };

  exports.deprecationLevels = deprecationLevels;
  exports["default"] = {
    defaultLevel: deprecationLevels.LOG,
    individualLevels: (0, _emberMetalDictionary["default"])(null),
    setDefaultLevel: function (level) {
      this.defaultLevel = level;
    },
    setLevel: function (id, level) {
      this.individualLevels[id] = level;
    },
    getLevel: function (id) {
      var level = this.individualLevels[id];
      if (!level) {
        level = this.defaultLevel;
      }
      return level;
    }
  };
});
enifed("ember-extension-support", ["exports", "ember-metal/core", "ember-extension-support/data_adapter", "ember-extension-support/container_debug_adapter"], function (exports, _emberMetalCore, _emberExtensionSupportData_adapter, _emberExtensionSupportContainer_debug_adapter) {

  _emberMetalCore["default"].DataAdapter = _emberExtensionSupportData_adapter["default"];
  _emberMetalCore["default"].ContainerDebugAdapter = _emberExtensionSupportContainer_debug_adapter["default"];
});
/**
@module ember
@submodule ember-extension-support
*/
enifed("ember-extension-support/container_debug_adapter", ["exports", "ember-metal/core", "ember-runtime/system/native_array", "ember-runtime/utils", "ember-runtime/system/string", "ember-runtime/system/namespace", "ember-runtime/system/object"], function (exports, _emberMetalCore, _emberRuntimeSystemNative_array, _emberRuntimeUtils, _emberRuntimeSystemString, _emberRuntimeSystemNamespace, _emberRuntimeSystemObject) {

  /**
  @module ember
  @submodule ember-extension-support
  */

  /**
    The `ContainerDebugAdapter` helps the container and resolver interface
    with tools that debug Ember such as the
    [Ember Extension](https://github.com/tildeio/ember-extension)
    for Chrome and Firefox.
  
    This class can be extended by a custom resolver implementer
    to override some of the methods with library-specific code.
  
    The methods likely to be overridden are:
  
    * `canCatalogEntriesByType`
    * `catalogEntriesByType`
  
    The adapter will need to be registered
    in the application's container as `container-debug-adapter:main`
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "containerDebugAdapter",
  
      initialize: function(container, application) {
        application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
      }
    });
    ```
  
    @class ContainerDebugAdapter
    @namespace Ember
    @extends Ember.Object
    @since 1.5.0
    @public
  */
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    /**
      The container of the application being debugged.
      This property will be injected
      on creation.
       @property container
      @default null
      @public
    */
    container: null,

    /**
      The resolver instance of the application
      being debugged. This property will be injected
      on creation.
       @property resolver
      @default null
      @public
    */
    resolver: null,

    /**
      Returns true if it is possible to catalog a list of available
      classes in the resolver for a given type.
       @method canCatalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route"
      @return {boolean} whether a list is available for this type.
      @public
    */
    canCatalogEntriesByType: function (type) {
      if (type === "model" || type === "template") {
        return false;
      }

      return true;
    },

    /**
      Returns the available classes a given type.
       @method catalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route"
      @return {Array} An array of strings.
      @public
    */
    catalogEntriesByType: function (type) {
      var namespaces = (0, _emberRuntimeSystemNative_array.A)(_emberRuntimeSystemNamespace["default"].NAMESPACES);
      var types = (0, _emberRuntimeSystemNative_array.A)();
      var typeSuffixRegex = new RegExp("" + (0, _emberRuntimeSystemString.classify)(type) + "$");

      namespaces.forEach(function (namespace) {
        if (namespace !== _emberMetalCore["default"]) {
          for (var key in namespace) {
            if (!namespace.hasOwnProperty(key)) {
              continue;
            }
            if (typeSuffixRegex.test(key)) {
              var klass = namespace[key];
              if ((0, _emberRuntimeUtils.typeOf)(klass) === "class") {
                types.push((0, _emberRuntimeSystemString.dasherize)(key.replace(typeSuffixRegex, "")));
              }
            }
          }
        }
      });
      return types;
    }
  });
});
enifed("ember-extension-support/data_adapter", ["exports", "ember-metal/property_get", "ember-metal/run_loop", "ember-runtime/system/string", "ember-runtime/system/namespace", "ember-runtime/system/object", "ember-runtime/system/native_array", "ember-application/system/application"], function (exports, _emberMetalProperty_get, _emberMetalRun_loop, _emberRuntimeSystemString, _emberRuntimeSystemNamespace, _emberRuntimeSystemObject, _emberRuntimeSystemNative_array, _emberApplicationSystemApplication) {

  /**
  @module ember
  @submodule ember-extension-support
  */

  /**
    The `DataAdapter` helps a data persistence library
    interface with tools that debug Ember such
    as the [Ember Extension](https://github.com/tildeio/ember-extension)
    for Chrome and Firefox.
  
    This class will be extended by a persistence library
    which will override some of the methods with
    library-specific code.
  
    The methods likely to be overridden are:
  
    * `getFilters`
    * `detect`
    * `columnsForType`
    * `getRecords`
    * `getRecordColumnValues`
    * `getRecordKeywords`
    * `getRecordFilterValues`
    * `getRecordColor`
    * `observeRecord`
  
    The adapter will need to be registered
    in the application's container as `dataAdapter:main`
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "data-adapter",
  
      initialize: function(container, application) {
        application.register('data-adapter:main', DS.DataAdapter);
      }
    });
    ```
  
    @class DataAdapter
    @namespace Ember
    @extends EmberObject
    @public
  */
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    init: function () {
      this._super.apply(this, arguments);
      this.releaseMethods = (0, _emberRuntimeSystemNative_array.A)();
    },

    /**
      The container of the application being debugged.
      This property will be injected
      on creation.
       @property container
      @default null
      @since 1.3.0
      @public
    */
    container: null,

    /**
      The container-debug-adapter which is used
      to list all models.
       @property containerDebugAdapter
      @default undefined
      @since 1.5.0
      @public
    **/
    containerDebugAdapter: undefined,

    /**
      Number of attributes to send
      as columns. (Enough to make the record
      identifiable).
       @private
      @property attributeLimit
      @default 3
      @since 1.3.0
    */
    attributeLimit: 3,

    /**
       Ember Data > v1.0.0-beta.18
       requires string model names to be passed
       around instead of the actual factories.
        This is a stamp for the Ember Inspector
       to differentiate between the versions
       to be able to support older versions too.
        @public
       @property acceptsModelName
     */
    acceptsModelName: true,

    /**
      Stores all methods that clear observers.
      These methods will be called on destruction.
       @private
      @property releaseMethods
      @since 1.3.0
    */
    releaseMethods: (0, _emberRuntimeSystemNative_array.A)(),

    /**
      Specifies how records can be filtered.
      Records returned will need to have a `filterValues`
      property with a key for every name in the returned array.
       @public
      @method getFilters
      @return {Array} List of objects defining filters.
       The object should have a `name` and `desc` property.
    */
    getFilters: function () {
      return (0, _emberRuntimeSystemNative_array.A)();
    },

    /**
      Fetch the model types and observe them for changes.
       @public
      @method watchModelTypes
       @param {Function} typesAdded Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
       @param {Function} typesUpdated Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
       @return {Function} Method to call to remove all observers
    */
    watchModelTypes: function (typesAdded, typesUpdated) {
      var _this = this;

      var modelTypes = this.getModelTypes();
      var releaseMethods = (0, _emberRuntimeSystemNative_array.A)();
      var typesToSend;

      typesToSend = modelTypes.map(function (type) {
        var klass = type.klass;
        var wrapped = _this.wrapModelType(klass, type.name);
        releaseMethods.push(_this.observeModelType(type.name, typesUpdated));
        return wrapped;
      });

      typesAdded(typesToSend);

      var release = function () {
        releaseMethods.forEach(function (fn) {
          return fn();
        });
        _this.releaseMethods.removeObject(release);
      };
      this.releaseMethods.pushObject(release);
      return release;
    },

    _nameToClass: function (type) {
      if (typeof type === "string") {
        type = this.container.lookupFactory("model:" + type);
      }
      return type;
    },

    /**
      Fetch the records of a given type and observe them for changes.
       @public
      @method watchRecords
       @param {String} modelName The model name
       @param {Function} recordsAdded Callback to call to add records.
      Takes an array of objects containing wrapped records.
      The object should have the following properties:
        columnValues: {Object} key and value of a table cell
        object: {Object} the actual record object
       @param {Function} recordsUpdated Callback to call when a record has changed.
      Takes an array of objects containing wrapped records.
       @param {Function} recordsRemoved Callback to call when a record has removed.
      Takes the following parameters:
        index: the array index where the records were removed
        count: the number of records removed
       @return {Function} Method to call to remove all observers
    */
    watchRecords: function (modelName, recordsAdded, recordsUpdated, recordsRemoved) {
      var _this2 = this;

      var releaseMethods = (0, _emberRuntimeSystemNative_array.A)();
      var klass = this._nameToClass(modelName);
      var records = this.getRecords(klass, modelName);
      var release;

      var recordUpdated = function (updatedRecord) {
        recordsUpdated([updatedRecord]);
      };

      var recordsToSend = records.map(function (record) {
        releaseMethods.push(_this2.observeRecord(record, recordUpdated));
        return _this2.wrapRecord(record);
      });

      var contentDidChange = function (array, idx, removedCount, addedCount) {
        for (var i = idx; i < idx + addedCount; i++) {
          var record = array.objectAt(i);
          var wrapped = _this2.wrapRecord(record);
          releaseMethods.push(_this2.observeRecord(record, recordUpdated));
          recordsAdded([wrapped]);
        }

        if (removedCount) {
          recordsRemoved(idx, removedCount);
        }
      };

      var observer = { didChange: contentDidChange, willChange: function () {
          return this;
        } };
      records.addArrayObserver(this, observer);

      release = function () {
        releaseMethods.forEach(function (fn) {
          fn();
        });
        records.removeArrayObserver(_this2, observer);
        _this2.releaseMethods.removeObject(release);
      };

      recordsAdded(recordsToSend);

      this.releaseMethods.pushObject(release);
      return release;
    },

    /**
      Clear all observers before destruction
      @private
      @method willDestroy
    */
    willDestroy: function () {
      this._super.apply(this, arguments);
      this.releaseMethods.forEach(function (fn) {
        fn();
      });
    },

    /**
      Detect whether a class is a model.
       Test that against the model class
      of your persistence library
       @private
      @method detect
      @param {Class} klass The class to test
      @return boolean Whether the class is a model class or not
    */
    detect: function (klass) {
      return false;
    },

    /**
      Get the columns for a given model type.
       @private
      @method columnsForType
      @param {Class} type The model type
      @return {Array} An array of columns of the following format:
       name: {String} name of the column
       desc: {String} Humanized description (what would show in a table column name)
    */
    columnsForType: function (type) {
      return (0, _emberRuntimeSystemNative_array.A)();
    },

    /**
      Adds observers to a model type class.
       @private
      @method observeModelType
      @param {String} modelName The model type name
      @param {Function} typesUpdated Called when a type is modified.
      @return {Function} The function to call to remove observers
    */

    observeModelType: function (modelName, typesUpdated) {
      var _this3 = this;

      var klass = this._nameToClass(modelName);
      var records = this.getRecords(klass, modelName);

      var onChange = function () {
        typesUpdated([_this3.wrapModelType(klass, modelName)]);
      };
      var observer = {
        didChange: function () {
          _emberMetalRun_loop["default"].scheduleOnce("actions", this, onChange);
        },
        willChange: function () {
          return this;
        }
      };

      records.addArrayObserver(this, observer);

      var release = function () {
        records.removeArrayObserver(_this3, observer);
      };

      return release;
    },

    /**
      Wraps a given model type and observes changes to it.
       @private
      @method wrapModelType
      @param {Class} klass A model class
      @param {String} modelName Name of the class
      @return {Object} contains the wrapped type and the function to remove observers
      Format:
        type: {Object} the wrapped type
          The wrapped type has the following format:
            name: {String} name of the type
            count: {Integer} number of records available
            columns: {Columns} array of columns to describe the record
            object: {Class} the actual Model type class
        release: {Function} The function to remove observers
    */
    wrapModelType: function (klass, name) {
      var records = this.getRecords(klass, name);
      var typeToSend;

      typeToSend = {
        name: name,
        count: (0, _emberMetalProperty_get.get)(records, "length"),
        columns: this.columnsForType(klass),
        object: klass
      };

      return typeToSend;
    },

    /**
      Fetches all models defined in the application.
       @private
      @method getModelTypes
      @return {Array} Array of model types
    */
    getModelTypes: function () {
      var _this4 = this;

      var containerDebugAdapter = this.get("containerDebugAdapter");
      var types;

      if (containerDebugAdapter.canCatalogEntriesByType("model")) {
        types = containerDebugAdapter.catalogEntriesByType("model");
      } else {
        types = this._getObjectsOnNamespaces();
      }

      // New adapters return strings instead of classes
      types = (0, _emberRuntimeSystemNative_array.A)(types).map(function (name) {
        return {
          klass: _this4._nameToClass(name),
          name: name
        };
      });
      types = (0, _emberRuntimeSystemNative_array.A)(types).filter(function (type) {
        return _this4.detect(type.klass);
      });

      return (0, _emberRuntimeSystemNative_array.A)(types);
    },

    /**
      Loops over all namespaces and all objects
      attached to them
       @private
      @method _getObjectsOnNamespaces
      @return {Array} Array of model type strings
    */
    _getObjectsOnNamespaces: function () {
      var _this5 = this;

      var namespaces = (0, _emberRuntimeSystemNative_array.A)(_emberRuntimeSystemNamespace["default"].NAMESPACES);
      var types = (0, _emberRuntimeSystemNative_array.A)();

      namespaces.forEach(function (namespace) {
        for (var key in namespace) {
          if (!namespace.hasOwnProperty(key)) {
            continue;
          }
          // Even though we will filter again in `getModelTypes`,
          // we should not call `lookupFactory` on non-models
          // (especially when `Ember.MODEL_FACTORY_INJECTIONS` is `true`)
          if (!_this5.detect(namespace[key])) {
            continue;
          }
          var name = (0, _emberRuntimeSystemString.dasherize)(key);
          if (!(namespace instanceof _emberApplicationSystemApplication["default"]) && namespace.toString()) {
            name = "" + namespace + "/" + name;
          }
          types.push(name);
        }
      });
      return types;
    },

    /**
      Fetches all loaded records for a given type.
       @private
      @method getRecords
      @return {Array} An array of records.
       This array will be observed for changes,
       so it should update when new records are added/removed.
    */
    getRecords: function (type) {
      return (0, _emberRuntimeSystemNative_array.A)();
    },

    /**
      Wraps a record and observers changes to it.
       @private
      @method wrapRecord
      @param {Object} record The record instance.
      @return {Object} The wrapped record. Format:
      columnValues: {Array}
      searchKeywords: {Array}
    */
    wrapRecord: function (record) {
      var recordToSend = { object: record };

      recordToSend.columnValues = this.getRecordColumnValues(record);
      recordToSend.searchKeywords = this.getRecordKeywords(record);
      recordToSend.filterValues = this.getRecordFilterValues(record);
      recordToSend.color = this.getRecordColor(record);

      return recordToSend;
    },

    /**
      Gets the values for each column.
       @private
      @method getRecordColumnValues
      @return {Object} Keys should match column names defined
      by the model type.
    */
    getRecordColumnValues: function (record) {
      return {};
    },

    /**
      Returns keywords to match when searching records.
       @private
      @method getRecordKeywords
      @return {Array} Relevant keywords for search.
    */
    getRecordKeywords: function (record) {
      return (0, _emberRuntimeSystemNative_array.A)();
    },

    /**
      Returns the values of filters defined by `getFilters`.
       @private
      @method getRecordFilterValues
      @param {Object} record The record instance
      @return {Object} The filter values
    */
    getRecordFilterValues: function (record) {
      return {};
    },

    /**
      Each record can have a color that represents its state.
       @private
      @method getRecordColor
      @param {Object} record The record instance
      @return {String} The record's color
        Possible options: black, red, blue, green
    */
    getRecordColor: function (record) {
      return null;
    },

    /**
      Observes all relevant properties and re-sends the wrapped record
      when a change occurs.
       @private
      @method observerRecord
      @param {Object} record The record instance
      @param {Function} recordUpdated The callback to call when a record is updated.
      @return {Function} The function to call to remove all observers.
    */
    observeRecord: function (record, recordUpdated) {
      return function () {};
    }
  });
});
enifed("ember-htmlbars", ["exports", "ember-metal/core", "ember-template-compiler", "ember-htmlbars/system/make-view-helper", "ember-htmlbars/system/make_bound_helper", "ember-htmlbars/helpers", "ember-htmlbars/helpers/if_unless", "ember-htmlbars/helpers/with", "ember-htmlbars/helpers/loc", "ember-htmlbars/helpers/log", "ember-htmlbars/helpers/each", "ember-htmlbars/helpers/-bind-attr-class", "ember-htmlbars/helpers/-normalize-class", "ember-htmlbars/helpers/-concat", "ember-htmlbars/helpers/-join-classes", "ember-htmlbars/helpers/-legacy-each-with-controller", "ember-htmlbars/helpers/-legacy-each-with-keyword", "ember-htmlbars/helpers/-html-safe", "ember-htmlbars/system/dom-helper", "ember-htmlbars/helper", "ember-htmlbars/system/bootstrap", "ember-htmlbars/compat"], function (exports, _emberMetalCore, _emberTemplateCompiler, _emberHtmlbarsSystemMakeViewHelper, _emberHtmlbarsSystemMake_bound_helper, _emberHtmlbarsHelpers, _emberHtmlbarsHelpersIf_unless, _emberHtmlbarsHelpersWith, _emberHtmlbarsHelpersLoc, _emberHtmlbarsHelpersLog, _emberHtmlbarsHelpersEach, _emberHtmlbarsHelpersBindAttrClass, _emberHtmlbarsHelpersNormalizeClass, _emberHtmlbarsHelpersConcat, _emberHtmlbarsHelpersJoinClasses, _emberHtmlbarsHelpersLegacyEachWithController, _emberHtmlbarsHelpersLegacyEachWithKeyword, _emberHtmlbarsHelpersHtmlSafe, _emberHtmlbarsSystemDomHelper, _emberHtmlbarsHelper, _emberHtmlbarsSystemBootstrap, _emberHtmlbarsCompat) {

  (0, _emberHtmlbarsHelpers.registerHelper)("if", _emberHtmlbarsHelpersIf_unless.ifHelper);
  (0, _emberHtmlbarsHelpers.registerHelper)("unless", _emberHtmlbarsHelpersIf_unless.unlessHelper);
  (0, _emberHtmlbarsHelpers.registerHelper)("with", _emberHtmlbarsHelpersWith["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("loc", _emberHtmlbarsHelpersLoc["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("log", _emberHtmlbarsHelpersLog["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("each", _emberHtmlbarsHelpersEach["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("-bind-attr-class", _emberHtmlbarsHelpersBindAttrClass["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("-normalize-class", _emberHtmlbarsHelpersNormalizeClass["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("concat", _emberHtmlbarsHelpersConcat["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("-join-classes", _emberHtmlbarsHelpersJoinClasses["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("-legacy-each-with-controller", _emberHtmlbarsHelpersLegacyEachWithController["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("-legacy-each-with-keyword", _emberHtmlbarsHelpersLegacyEachWithKeyword["default"]);
  (0, _emberHtmlbarsHelpers.registerHelper)("-html-safe", _emberHtmlbarsHelpersHtmlSafe["default"]);

  _emberMetalCore["default"].HTMLBars = {
    _registerHelper: _emberHtmlbarsHelpers.registerHelper,
    template: _emberTemplateCompiler.template,
    compile: _emberTemplateCompiler.compile,
    precompile: _emberTemplateCompiler.precompile,
    makeViewHelper: _emberHtmlbarsSystemMakeViewHelper["default"],
    makeBoundHelper: _emberHtmlbarsSystemMake_bound_helper["default"],
    registerPlugin: _emberTemplateCompiler.registerPlugin,
    DOMHelper: _emberHtmlbarsSystemDomHelper["default"]
  };

  if (_emberMetalCore["default"].FEATURES.isEnabled("ember-htmlbars-helper")) {
    _emberHtmlbarsHelper["default"].helper = _emberHtmlbarsHelper.helper;
    _emberMetalCore["default"].Helper = _emberHtmlbarsHelper["default"];
  }
});

// importing adds template bootstrapping
// initializer to enable embedded templates

// importing ember-htmlbars/compat updates the
// Ember.Handlebars global if htmlbars is enabled
enifed("ember-htmlbars/compat", ["exports", "ember-metal/core", "ember-htmlbars/helpers", "ember-htmlbars/compat/helper", "ember-htmlbars/compat/handlebars-get", "ember-htmlbars/compat/make-bound-helper", "ember-htmlbars/compat/register-bound-helper", "ember-htmlbars/system/make-view-helper", "ember-htmlbars/utils/string"], function (exports, _emberMetalCore, _emberHtmlbarsHelpers, _emberHtmlbarsCompatHelper, _emberHtmlbarsCompatHandlebarsGet, _emberHtmlbarsCompatMakeBoundHelper, _emberHtmlbarsCompatRegisterBoundHelper, _emberHtmlbarsSystemMakeViewHelper, _emberHtmlbarsUtilsString) {

  var EmberHandlebars = _emberMetalCore["default"].Handlebars = _emberMetalCore["default"].Handlebars || {};
  EmberHandlebars.helpers = _emberHtmlbarsHelpers["default"];
  EmberHandlebars.helper = _emberHtmlbarsCompatHelper.handlebarsHelper;
  EmberHandlebars.registerHelper = _emberHtmlbarsCompatHelper.registerHandlebarsCompatibleHelper;
  EmberHandlebars.registerBoundHelper = _emberHtmlbarsCompatRegisterBoundHelper["default"];
  EmberHandlebars.makeBoundHelper = _emberHtmlbarsCompatMakeBoundHelper["default"];
  EmberHandlebars.get = _emberHtmlbarsCompatHandlebarsGet["default"];
  EmberHandlebars.makeViewHelper = _emberHtmlbarsSystemMakeViewHelper["default"];

  EmberHandlebars.SafeString = _emberHtmlbarsUtilsString.SafeString;
  EmberHandlebars.Utils = {
    escapeExpression: _emberHtmlbarsUtilsString.escapeExpression
  };

  exports["default"] = EmberHandlebars;
});
enifed('ember-htmlbars/compat/handlebars-get', ['exports'], function (exports) {
  exports["default"] = handlebarsGet;
  /**
  @module ember
  @submodule ember-htmlbars
  */

  /**
    Lookup both on root and on window. If the path starts with
    a keyword, the corresponding object will be looked up in the
    template's data hash and used to resolve the path.
  
    @method get
    @for Ember.Handlebars
    @param {Object} root The object to look up the property on
    @param {String} path The path to be lookedup
    @param {Object} options The template's option hash
    @deprecated
    @public
  */

  function handlebarsGet(root, path, options) {
    Ember.deprecate('Usage of Ember.Handlebars.get is deprecated, use a Component or Ember.Handlebars.makeBoundHelper instead.');

    return options.legacyGetPath(path);
  }
});
enifed("ember-htmlbars/compat/helper", ["exports", "ember-htmlbars/helpers", "ember-views/views/view", "ember-views/views/component", "ember-htmlbars/system/make-view-helper", "ember-htmlbars/compat/make-bound-helper", "ember-metal/streams/utils", "ember-htmlbars/keywords"], function (exports, _emberHtmlbarsHelpers, _emberViewsViewsView, _emberViewsViewsComponent, _emberHtmlbarsSystemMakeViewHelper, _emberHtmlbarsCompatMakeBoundHelper, _emberMetalStreamsUtils, _emberHtmlbarsKeywords) {
  exports.registerHandlebarsCompatibleHelper = registerHandlebarsCompatibleHelper;
  exports.handlebarsHelper = handlebarsHelper;

  var slice = [].slice;

  function calculateCompatType(item) {
    if ((0, _emberMetalStreamsUtils.isStream)(item)) {
      return "ID";
    } else {
      var itemType = typeof item;

      return itemType.toUpperCase();
    }
  }

  function pathFor(param) {
    if ((0, _emberMetalStreamsUtils.isStream)(param)) {
      // param arguments to helpers may have their path prefixes with self. For
      // example {{box-thing foo}} may have a param path of `self.foo` depending
      // on scope.
      if (param.source && param.source.dependee && param.source.dependee.label === "self") {
        return param.path.slice(5);
      } else {
        return param.path;
      }
    } else {
      return param;
    }
  }

  /**
    Wraps an Handlebars helper with an HTMLBars helper for backwards compatibility.
  
    @class HandlebarsCompatibleHelper
    @constructor
    @private
  */
  function HandlebarsCompatibleHelper(fn) {
    this.helperFunction = function helperFunc(params, hash, options, env, scope) {
      var param, fnResult;
      var hasBlock = options.template && options.template.yield;

      var handlebarsOptions = {
        hash: {},
        types: new Array(params.length),
        hashTypes: {}
      };

      handlebarsOptions.hash = {};

      if (hasBlock) {
        handlebarsOptions.fn = function () {
          options.template.yield();
        };

        if (options.inverse.yield) {
          handlebarsOptions.inverse = function () {
            options.inverse.yield();
          };
        }
      }

      for (var prop in hash) {
        param = hash[prop];
        handlebarsOptions.hashTypes[prop] = calculateCompatType(param);
        handlebarsOptions.hash[prop] = pathFor(param);
      }

      var args = new Array(params.length);
      for (var i = 0, l = params.length; i < l; i++) {
        param = params[i];
        handlebarsOptions.types[i] = calculateCompatType(param);
        args[i] = pathFor(param);
      }

      handlebarsOptions.legacyGetPath = function (path) {
        return env.hooks.get(env, scope, path).value();
      };

      handlebarsOptions.data = {
        view: scope.view
      };

      args.push(handlebarsOptions);

      fnResult = fn.apply(this, args);

      if (options.element) {
        Ember.deprecate("Returning a string of attributes from a helper inside an element is deprecated.");
        applyAttributes(env.dom, options.element, fnResult);
      } else if (!options.template.yield) {
        return fnResult;
      }
    };

    this.isHTMLBars = true;
  }

  HandlebarsCompatibleHelper.prototype = {
    preprocessArguments: function () {}
  };

  function registerHandlebarsCompatibleHelper(name, value) {
    if (value && value.isLegacyViewHelper) {
      (0, _emberHtmlbarsKeywords.registerKeyword)(name, function (morph, env, scope, params, hash, template, inverse, visitor) {
        Ember.assert("You can only pass attributes (such as name=value) not bare " + "values to a helper for a View found in '" + value.viewClass + "'", params.length === 0);

        env.hooks.keyword("view", morph, env, scope, [value.viewClass], hash, template, inverse, visitor);
        return true;
      });
      return;
    }

    var helper;

    if (value && value.isHTMLBars) {
      helper = value;
    } else {
      helper = new HandlebarsCompatibleHelper(value);
    }

    _emberHtmlbarsHelpers["default"][name] = helper;
  }

  function handlebarsHelper(name, value) {
    Ember.assert("You tried to register a component named '" + name + "', but component names must include a '-'", !_emberViewsViewsComponent["default"].detect(value) || name.match(/-/));

    if (_emberViewsViewsView["default"].detect(value)) {
      _emberHtmlbarsHelpers["default"][name] = (0, _emberHtmlbarsSystemMakeViewHelper["default"])(value);
    } else {
      var boundHelperArgs = slice.call(arguments, 1);
      var boundFn = _emberHtmlbarsCompatMakeBoundHelper["default"].apply(this, boundHelperArgs);

      _emberHtmlbarsHelpers["default"][name] = boundFn;
    }
  }

  function applyAttributes(dom, element, innerString) {
    var string = "<" + element.tagName + " " + innerString + "></div>";
    var fragment = dom.parseHTML(string, dom.createElement(element.tagName));

    var attrs = fragment.firstChild.attributes;

    for (var i = 0, l = attrs.length; i < l; i++) {
      element.setAttributeNode(attrs[i].cloneNode());
    }
  }

  exports["default"] = HandlebarsCompatibleHelper;
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/compat/make-bound-helper", ["exports", "ember-metal/streams/utils"], function (exports, _emberMetalStreamsUtils) {
  exports["default"] = makeBoundHelper;

  /**
  @module ember
  @submodule ember-htmlbars
  */

  //import Helper from "ember-htmlbars/system/helper";

  /**
    A helper function used by `registerBoundHelper`. Takes the
    provided Handlebars helper function fn and returns it in wrapped
    bound helper form.
  
    The main use case for using this outside of `registerBoundHelper`
    is for registering helpers on the container:
  
    ```js
    var boundHelperFn = Ember.Handlebars.makeBoundHelper(function(word) {
      return word.toUpperCase();
    });
  
    container.register('helper:my-bound-helper', boundHelperFn);
    ```
  
    In the above example, if the helper function hadn't been wrapped in
    `makeBoundHelper`, the registered helper would be unbound.
  
    @method makeBoundHelper
    @for Ember.Handlebars
    @param {Function} fn
    @param {String} dependentKeys*
    @since 1.2.0
    @deprecated
    @private
  */

  function makeBoundHelper(fn) {
    for (var _len = arguments.length, dependentKeys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      dependentKeys[_key - 1] = arguments[_key];
    }

    return {
      _dependentKeys: dependentKeys,

      isHandlebarsCompat: true,
      isHTMLBars: true,

      helperFunction: function (params, hash, templates) {
        Ember.assert("registerBoundHelper-generated helpers do not support use with Handlebars blocks.", !templates.template.yield);

        var args = (0, _emberMetalStreamsUtils.readArray)(params);
        var properties = new Array(params.length);

        for (var i = 0, l = params.length; i < l; i++) {
          var param = params[i];

          if ((0, _emberMetalStreamsUtils.isStream)(param)) {
            properties[i] = param.label;
          } else {
            properties[i] = param;
          }
        }

        args.push({ hash: (0, _emberMetalStreamsUtils.readHash)(hash), templates: templates, data: { properties: properties } });
        return fn.apply(undefined, args);
      }
    };
  }
});
enifed("ember-htmlbars/compat/register-bound-helper", ["exports", "ember-htmlbars/helpers", "ember-htmlbars/compat/make-bound-helper"], function (exports, _emberHtmlbarsHelpers, _emberHtmlbarsCompatMakeBoundHelper) {
  exports["default"] = registerBoundHelper;

  var slice = [].slice;

  /**
    Register a bound handlebars helper. Bound helpers behave similarly to regular
    handlebars helpers, with the added ability to re-render when the underlying data
    changes.
  
    ## Simple example
  
    ```javascript
    Ember.Handlebars.registerBoundHelper('capitalize', function(value) {
      return Ember.String.capitalize(value);
    });
    ```
  
    The above bound helper can be used inside of templates as follows:
  
    ```handlebars
    {{capitalize name}}
    ```
  
    In this case, when the `name` property of the template's context changes,
    the rendered value of the helper will update to reflect this change.
  
    ## Example with options
  
    Like normal handlebars helpers, bound helpers have access to the options
    passed into the helper call.
  
    ```javascript
    Ember.Handlebars.registerBoundHelper('repeat', function(value, options) {
      var count = options.hash.count;
      var a = [];
      while(a.length < count) {
          a.push(value);
      }
      return a.join('');
    });
    ```
  
    This helper could be used in a template as follows:
  
    ```handlebars
    {{repeat text count=3}}
    ```
  
    ## Example with bound options
  
    Bound hash options are also supported. Example:
  
    ```handlebars
    {{repeat text count=numRepeats}}
    ```
  
    In this example, count will be bound to the value of
    the `numRepeats` property on the context. If that property
    changes, the helper will be re-rendered.
  
    ## Example with extra dependencies
  
    The `Ember.Handlebars.registerBoundHelper` method takes a variable length
    third parameter which indicates extra dependencies on the passed in value.
    This allows the handlebars helper to update when these dependencies change.
  
    ```javascript
    Ember.Handlebars.registerBoundHelper('capitalizeName', function(value) {
      return value.get('name').toUpperCase();
    }, 'name');
    ```
  
    ## Example with multiple bound properties
  
    `Ember.Handlebars.registerBoundHelper` supports binding to
    multiple properties, e.g.:
  
    ```javascript
    Ember.Handlebars.registerBoundHelper('concatenate', function() {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      return values.join('||');
    });
    ```
  
    Which allows for template syntax such as `{{concatenate prop1 prop2}}` or
    `{{concatenate prop1 prop2 prop3}}`. If any of the properties change,
    the helper will re-render.  Note that dependency keys cannot be
    using in conjunction with multi-property helpers, since it is ambiguous
    which property the dependent keys would belong to.
  
    ## Use with unbound helper
  
    The `{{unbound}}` helper can be used with bound helper invocations
    to render them in their unbound form, e.g.
  
    ```handlebars
    {{unbound capitalize name}}
    ```
  
    In this example, if the name property changes, the helper
    will not re-render.
  
    ## Use with blocks not supported
  
    Bound helpers do not support use with Handlebars blocks or
    the addition of child views of any kind.
  
    @method registerBoundHelper
    @for Ember.Handlebars
    @param {String} name
    @param {Function} fn
    @param {String} dependentKeys*
    @private
  */

  function registerBoundHelper(name, fn) {
    var boundHelperArgs = slice.call(arguments, 1);
    var boundFn = _emberHtmlbarsCompatMakeBoundHelper["default"].apply(this, boundHelperArgs);

    _emberHtmlbarsHelpers["default"][name] = boundFn;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/env", ["exports", "ember-metal/environment", "htmlbars-runtime", "ember-metal/merge", "ember-htmlbars/hooks/subexpr", "ember-htmlbars/hooks/concat", "ember-htmlbars/hooks/link-render-node", "ember-htmlbars/hooks/create-fresh-scope", "ember-htmlbars/hooks/bind-shadow-scope", "ember-htmlbars/hooks/bind-self", "ember-htmlbars/hooks/bind-scope", "ember-htmlbars/hooks/bind-local", "ember-htmlbars/hooks/update-self", "ember-htmlbars/hooks/get-root", "ember-htmlbars/hooks/get-child", "ember-htmlbars/hooks/get-value", "ember-htmlbars/hooks/get-cell-or-value", "ember-htmlbars/hooks/cleanup-render-node", "ember-htmlbars/hooks/destroy-render-node", "ember-htmlbars/hooks/did-render-node", "ember-htmlbars/hooks/will-cleanup-tree", "ember-htmlbars/hooks/did-cleanup-tree", "ember-htmlbars/hooks/classify", "ember-htmlbars/hooks/component", "ember-htmlbars/hooks/lookup-helper", "ember-htmlbars/hooks/has-helper", "ember-htmlbars/hooks/invoke-helper", "ember-htmlbars/hooks/element", "ember-htmlbars/helpers", "ember-htmlbars/keywords", "ember-htmlbars/system/dom-helper", "ember-htmlbars/keywords/debugger", "ember-htmlbars/keywords/with", "ember-htmlbars/keywords/outlet", "ember-htmlbars/keywords/real_outlet", "ember-htmlbars/keywords/customized_outlet", "ember-htmlbars/keywords/unbound", "ember-htmlbars/keywords/view", "ember-htmlbars/keywords/component", "ember-htmlbars/keywords/partial", "ember-htmlbars/keywords/input", "ember-htmlbars/keywords/textarea", "ember-htmlbars/keywords/collection", "ember-htmlbars/keywords/template", "ember-htmlbars/keywords/legacy-yield", "ember-htmlbars/keywords/mut", "ember-htmlbars/keywords/each", "ember-htmlbars/keywords/readonly"], function (exports, _emberMetalEnvironment, _htmlbarsRuntime, _emberMetalMerge, _emberHtmlbarsHooksSubexpr, _emberHtmlbarsHooksConcat, _emberHtmlbarsHooksLinkRenderNode, _emberHtmlbarsHooksCreateFreshScope, _emberHtmlbarsHooksBindShadowScope, _emberHtmlbarsHooksBindSelf, _emberHtmlbarsHooksBindScope, _emberHtmlbarsHooksBindLocal, _emberHtmlbarsHooksUpdateSelf, _emberHtmlbarsHooksGetRoot, _emberHtmlbarsHooksGetChild, _emberHtmlbarsHooksGetValue, _emberHtmlbarsHooksGetCellOrValue, _emberHtmlbarsHooksCleanupRenderNode, _emberHtmlbarsHooksDestroyRenderNode, _emberHtmlbarsHooksDidRenderNode, _emberHtmlbarsHooksWillCleanupTree, _emberHtmlbarsHooksDidCleanupTree, _emberHtmlbarsHooksClassify, _emberHtmlbarsHooksComponent, _emberHtmlbarsHooksLookupHelper, _emberHtmlbarsHooksHasHelper, _emberHtmlbarsHooksInvokeHelper, _emberHtmlbarsHooksElement, _emberHtmlbarsHelpers, _emberHtmlbarsKeywords, _emberHtmlbarsSystemDomHelper, _emberHtmlbarsKeywordsDebugger, _emberHtmlbarsKeywordsWith, _emberHtmlbarsKeywordsOutlet, _emberHtmlbarsKeywordsReal_outlet, _emberHtmlbarsKeywordsCustomized_outlet, _emberHtmlbarsKeywordsUnbound, _emberHtmlbarsKeywordsView, _emberHtmlbarsKeywordsComponent, _emberHtmlbarsKeywordsPartial, _emberHtmlbarsKeywordsInput, _emberHtmlbarsKeywordsTextarea, _emberHtmlbarsKeywordsCollection, _emberHtmlbarsKeywordsTemplate, _emberHtmlbarsKeywordsLegacyYield, _emberHtmlbarsKeywordsMut, _emberHtmlbarsKeywordsEach, _emberHtmlbarsKeywordsReadonly) {

  var emberHooks = (0, _emberMetalMerge["default"])({}, _htmlbarsRuntime.hooks);
  emberHooks.keywords = _emberHtmlbarsKeywords["default"];

  (0, _emberMetalMerge["default"])(emberHooks, {
    linkRenderNode: _emberHtmlbarsHooksLinkRenderNode["default"],
    createFreshScope: _emberHtmlbarsHooksCreateFreshScope["default"],
    bindShadowScope: _emberHtmlbarsHooksBindShadowScope["default"],
    bindSelf: _emberHtmlbarsHooksBindSelf["default"],
    bindScope: _emberHtmlbarsHooksBindScope["default"],
    bindLocal: _emberHtmlbarsHooksBindLocal["default"],
    updateSelf: _emberHtmlbarsHooksUpdateSelf["default"],
    getRoot: _emberHtmlbarsHooksGetRoot["default"],
    getChild: _emberHtmlbarsHooksGetChild["default"],
    getValue: _emberHtmlbarsHooksGetValue["default"],
    getCellOrValue: _emberHtmlbarsHooksGetCellOrValue["default"],
    subexpr: _emberHtmlbarsHooksSubexpr["default"],
    concat: _emberHtmlbarsHooksConcat["default"],
    cleanupRenderNode: _emberHtmlbarsHooksCleanupRenderNode["default"],
    destroyRenderNode: _emberHtmlbarsHooksDestroyRenderNode["default"],
    willCleanupTree: _emberHtmlbarsHooksWillCleanupTree["default"],
    didCleanupTree: _emberHtmlbarsHooksDidCleanupTree["default"],
    didRenderNode: _emberHtmlbarsHooksDidRenderNode["default"],
    classify: _emberHtmlbarsHooksClassify["default"],
    component: _emberHtmlbarsHooksComponent["default"],
    lookupHelper: _emberHtmlbarsHooksLookupHelper["default"],
    hasHelper: _emberHtmlbarsHooksHasHelper["default"],
    invokeHelper: _emberHtmlbarsHooksInvokeHelper["default"],
    element: _emberHtmlbarsHooksElement["default"]
  });

  (0, _emberHtmlbarsKeywords.registerKeyword)("debugger", _emberHtmlbarsKeywordsDebugger["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("with", _emberHtmlbarsKeywordsWith["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("outlet", _emberHtmlbarsKeywordsOutlet["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("@real_outlet", _emberHtmlbarsKeywordsReal_outlet["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("@customized_outlet", _emberHtmlbarsKeywordsCustomized_outlet["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("unbound", _emberHtmlbarsKeywordsUnbound["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("view", _emberHtmlbarsKeywordsView["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("component", _emberHtmlbarsKeywordsComponent["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("partial", _emberHtmlbarsKeywordsPartial["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("template", _emberHtmlbarsKeywordsTemplate["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("input", _emberHtmlbarsKeywordsInput["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("textarea", _emberHtmlbarsKeywordsTextarea["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("collection", _emberHtmlbarsKeywordsCollection["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("legacy-yield", _emberHtmlbarsKeywordsLegacyYield["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("mut", _emberHtmlbarsKeywordsMut["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("@mut", _emberHtmlbarsKeywordsMut.privateMut);
  (0, _emberHtmlbarsKeywords.registerKeyword)("each", _emberHtmlbarsKeywordsEach["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("readonly", _emberHtmlbarsKeywordsReadonly["default"]);

  exports["default"] = {
    hooks: emberHooks,
    helpers: _emberHtmlbarsHelpers["default"],
    useFragmentCache: true
  };

  var domHelper = _emberMetalEnvironment["default"].hasDOM ? new _emberHtmlbarsSystemDomHelper["default"]() : null;

  exports.domHelper = domHelper;
});
enifed("ember-htmlbars/helper", ["exports", "ember-runtime/system/object"], function (exports, _emberRuntimeSystemObject) {
  exports.helper = helper;

  // Ember.Helper.extend({ compute(params, hash) {} });
  var Helper = _emberRuntimeSystemObject["default"].extend({
    isHelper: true,
    recompute: function () {
      this._stream.notify();
    }
  });

  Helper.reopenClass({
    isHelperFactory: true
  });

  // Ember.Helper.helper(function(params, hash) {});

  function helper(helperFn) {
    return {
      isHelperInstance: true,
      compute: helperFn
    };
  }

  exports["default"] = Helper;
});
enifed("ember-htmlbars/helpers", ["exports", "ember-metal/platform/create"], function (exports, _emberMetalPlatformCreate) {
  exports.registerHelper = registerHelper;

  /**
   @private
   @property helpers
  */
  var helpers = (0, _emberMetalPlatformCreate["default"])(null);

  /**
  @module ember
  @submodule ember-htmlbars
  */

  /**
    @private
    @method _registerHelper
    @for Ember.HTMLBars
    @param {String} name
    @param {Object|Function} helperFunc the helper function to add
  */

  function registerHelper(name, helperFunc) {
    helpers[name] = helperFunc;
  }

  exports["default"] = helpers;
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed('ember-htmlbars/helpers/-bind-attr-class', ['exports', 'ember-metal/property_get', 'ember-metal/utils'], function (exports, _emberMetalProperty_get, _emberMetalUtils) {
  exports["default"] = bindAttrClassHelper;

  function bindAttrClassHelper(params) {
    var value = params[0];

    if ((0, _emberMetalUtils.isArray)(value)) {
      value = (0, _emberMetalProperty_get.get)(value, 'length') !== 0;
    }

    if (value === true) {
      return params[1];
    }if (value === false || value === undefined || value === null) {
      return '';
    } else {
      return value;
    }
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed('ember-htmlbars/helpers/-concat', ['exports'], function (exports) {
  exports["default"] = concat;
  /**
    Concatenates input params together.
  
    Example:
  
    ```handlebars
    {{some-component name=(concat firstName " " lastName)}}
  
    {{! would pass name="<first name value> <last name value>" to the component}}
    ```
  
    @public
    @method concat
    @for Ember.HTMLBars
  */

  function concat(params) {
    return params.join('');
  }
});
enifed("ember-htmlbars/helpers/-html-safe", ["exports", "htmlbars-util/safe-string"], function (exports, _htmlbarsUtilSafeString) {
  exports["default"] = htmlSafeHelper;

  /**
   This private helper is used internally to handle `isVisible: false` for
   Ember.View and Ember.Component.
  
   @private
   */

  function htmlSafeHelper(_ref) {
    var value = _ref[0];

    return new _htmlbarsUtilSafeString["default"](value);
  }
});
enifed('ember-htmlbars/helpers/-join-classes', ['exports'], function (exports) {
  exports["default"] = joinClasses;
  /*
    this private helper is used to join and compact a list of class names
  
    @private
  */

  function joinClasses(classNames) {
    var result = [];

    for (var i = 0, l = classNames.length; i < l; i++) {
      var className = classNames[i];
      if (className) {
        result.push(className);
      }
    }

    return result.join(' ');
  }
});
enifed("ember-htmlbars/helpers/-legacy-each-with-controller", ["exports", "ember-metal/property_get", "ember-metal/enumerable_utils", "ember-htmlbars/utils/normalize-self", "ember-htmlbars/utils/decode-each-key"], function (exports, _emberMetalProperty_get, _emberMetalEnumerable_utils, _emberHtmlbarsUtilsNormalizeSelf, _emberHtmlbarsUtilsDecodeEachKey) {
  exports["default"] = legacyEachWithControllerHelper;

  function legacyEachWithControllerHelper(params, hash, blocks) {
    var list = params[0];
    var keyPath = hash.key;

    // TODO: Correct falsy semantics
    if (!list || (0, _emberMetalProperty_get.get)(list, "length") === 0) {
      if (blocks.inverse.yield) {
        blocks.inverse.yield();
      }
      return;
    }

    (0, _emberMetalEnumerable_utils.forEach)(list, function (item, i) {
      var self;

      if (blocks.template.arity === 0) {
        Ember.deprecate(deprecation);
        self = (0, _emberHtmlbarsUtilsNormalizeSelf["default"])(item);
        self = bindController(self, true);
      }

      var key = (0, _emberHtmlbarsUtilsDecodeEachKey["default"])(item, keyPath, i);
      blocks.template.yieldItem(key, [item, i], self);
    });
  }

  function bindController(controller, isSelf) {
    return {
      controller: controller,
      hasBoundController: true,
      self: controller ? controller : undefined
    };
  }

  var deprecation = "Using the context switching form of {{each}} is deprecated. Please use the keyword form (`{{#each items as |item|}}`) instead.";
  exports.deprecation = deprecation;
});
enifed("ember-htmlbars/helpers/-legacy-each-with-keyword", ["exports", "ember-metal/enumerable_utils", "ember-views/streams/should_display", "ember-htmlbars/utils/decode-each-key"], function (exports, _emberMetalEnumerable_utils, _emberViewsStreamsShould_display, _emberHtmlbarsUtilsDecodeEachKey) {
  exports["default"] = legacyEachWithKeywordHelper;

  function legacyEachWithKeywordHelper(params, hash, blocks) {
    var list = params[0];
    var keyPath = hash.key;
    var legacyKeyword = hash["-legacy-keyword"];

    if ((0, _emberViewsStreamsShould_display["default"])(list)) {
      (0, _emberMetalEnumerable_utils.forEach)(list, function (item, i) {
        var self;
        if (legacyKeyword) {
          self = bindKeyword(self, legacyKeyword, item);
        }

        var key = (0, _emberHtmlbarsUtilsDecodeEachKey["default"])(item, keyPath, i);
        blocks.template.yieldItem(key, [item, i], self);
      });
    } else if (blocks.inverse.yield) {
      blocks.inverse.yield();
    }
  }

  function bindKeyword(self, keyword, item) {
    var _ref;

    return (_ref = {}, _ref.self = self, _ref[keyword] = item, _ref);
  }

  var deprecation = "Using the context switching form of {{each}} is deprecated. Please use the keyword form (`{{#each items as |item|}}`) instead.";
  exports.deprecation = deprecation;
});
enifed("ember-htmlbars/helpers/-normalize-class", ["exports", "ember-runtime/system/string", "ember-metal/path_cache"], function (exports, _emberRuntimeSystemString, _emberMetalPath_cache) {
  exports["default"] = normalizeClass;

  /*
    This private helper is used by ComponentNode to convert the classNameBindings
    microsyntax into a class name.
  
    When a component or view is created, we normalize class name bindings into a
    series of attribute nodes that use this helper.
  
    @private
  */

  function normalizeClass(params, hash) {
    var propName = params[0];
    var value = params[1];
    var activeClass = hash.activeClass;
    var inactiveClass = hash.inactiveClass;

    // When using the colon syntax, evaluate the truthiness or falsiness
    // of the value to determine which className to return
    if (activeClass || inactiveClass) {
      if (!!value) {
        return activeClass;
      } else {
        return inactiveClass;
      }

      // If value is a Boolean and true, return the dasherized property
      // name.
    } else if (value === true) {
      // Only apply to last segment in the path
      if (propName && (0, _emberMetalPath_cache.isPath)(propName)) {
        var segments = propName.split(".");
        propName = segments[segments.length - 1];
      }

      return (0, _emberRuntimeSystemString.dasherize)(propName);

      // If the value is not false, undefined, or null, return the current
      // value of the property.
    } else if (value !== false && value != null) {
      return value;

      // Nothing to display. Return null so that the old class is removed
      // but no new class is added.
    } else {
      return null;
    }
  }
});
enifed("ember-htmlbars/helpers/bind-attr", ["exports"], function (exports) {});
/**
@module ember
@submodule ember-htmlbars
*/

/**
  `bind-attr` allows you to create a binding between DOM element attributes and
  Ember objects. For example:

  ```handlebars
  <img {{bind-attr src=imageUrl alt=imageTitle}}>
  ```

  The above handlebars template will fill the `<img>`'s `src` attribute with
  the value of the property referenced with `imageUrl` and its `alt`
  attribute with the value of the property referenced with `imageTitle`.

  If the rendering context of this template is the following object:

  ```javascript
  {
    imageUrl: 'http://lolcats.info/haz-a-funny',
    imageTitle: 'A humorous image of a cat'
  }
  ```

  The resulting HTML output will be:

  ```html
  <img src="http://lolcats.info/haz-a-funny" alt="A humorous image of a cat">
  ```

  `bind-attr` cannot redeclare existing DOM element attributes. The use of `src`
  in the following `bind-attr` example will be ignored and the hard coded value
  of `src="/failwhale.gif"` will take precedence:

  ```handlebars
  <img src="/failwhale.gif" {{bind-attr src=imageUrl alt=imageTitle}}>
  ```

  ### `bind-attr` and the `class` attribute

  `bind-attr` supports a special syntax for handling a number of cases unique
  to the `class` DOM element attribute. The `class` attribute combines
  multiple discrete values into a single attribute as a space-delimited
  list of strings. Each string can be:

  * a string return value of an object's property.
  * a boolean return value of an object's property
  * a hard-coded value

  A string return value works identically to other uses of `bind-attr`. The
  return value of the property will become the value of the attribute. For
  example, the following view and template:

  ```javascript
    AView = View.extend({
      someProperty: function() {
        return "aValue";
      }.property()
    })
  ```

  ```handlebars
  <img {{bind-attr class=view.someProperty}}>
  ```

  Result in the following rendered output:

  ```html
  <img class="aValue">
  ```

  A boolean return value will insert a specified class name if the property
  returns `true` and remove the class name if the property returns `false`.

  A class name is provided via the syntax
  `somePropertyName:class-name-if-true`.

  ```javascript
  AView = View.extend({
    someBool: true
  })
  ```

  ```handlebars
  <img {{bind-attr class="view.someBool:class-name-if-true"}}>
  ```

  Result in the following rendered output:

  ```html
  <img class="class-name-if-true">
  ```

  An additional section of the binding can be provided if you want to
  replace the existing class instead of removing it when the boolean
  value changes:

  ```handlebars
  <img {{bind-attr class="view.someBool:class-name-if-true:class-name-if-false"}}>
  ```

  A hard-coded value can be used by prepending `:` to the desired
  class name: `:class-name-to-always-apply`.

  ```handlebars
  <img {{bind-attr class=":class-name-to-always-apply"}}>
  ```

  Results in the following rendered output:

  ```html
  <img class="class-name-to-always-apply">
  ```

  All three strategies - string return value, boolean return value, and
  hard-coded value – can be combined in a single declaration:

  ```handlebars
  <img {{bind-attr class=":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty"}}>
  ```

  @method bind-attr
  @for Ember.Handlebars.helpers
  @deprecated
  @param {Object} options
  @return {String} HTML string
  @public
*/

/**
  See `bind-attr`

  @method bindAttr
  @for Ember.Handlebars.helpers
  @deprecated
  @param {Function} context
  @param {Object} options
  @return {String} HTML string
  @public
*/
enifed("ember-htmlbars/helpers/each", ["exports", "ember-metal/enumerable_utils", "ember-htmlbars/utils/normalize-self", "ember-views/streams/should_display", "ember-htmlbars/utils/decode-each-key"], function (exports, _emberMetalEnumerable_utils, _emberHtmlbarsUtilsNormalizeSelf, _emberViewsStreamsShould_display, _emberHtmlbarsUtilsDecodeEachKey) {
  exports["default"] = eachHelper;

  /**
    The `{{#each}}` helper loops over elements in a collection. It is an extension
    of the base Handlebars `{{#each}}` helper.
  
    The default behavior of `{{#each}}` is to yield its inner block once for every
    item in an array.
  
    ```javascript
    var developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];
    ```
  
    ```handlebars
    {{#each developers key="name" as |person|}}
      {{person.name}}
      {{! `this` is whatever it was outside the #each }}
    {{/each}}
    ```
  
    The same rules apply to arrays of primitives.
  
    ```javascript
    var developerNames = ['Yehuda', 'Tom', 'Paul']
    ```
  
    ```handlebars
    {{#each developerNames key="@index" as |name|}}
      {{name}}
    {{/each}}
    ```
  
    ### Specifying Keys
  
    The `key` option is used to tell Ember how to determine if the array being
    iterated over with `{{#each}}` has changed between renders. By helping Ember
    detect that some elements in the array are the same, DOM elements can be
    re-used, significantly improving rendering speed.
  
    For example, here's the `{{#each}}` helper with its `key` set to `id`:
  
    ```handlebars
    {{#each model key="id" as |item|}}
    {{/each}}
    ```
  
    When this `{{#each}}` re-renders, Ember will match up the previously rendered
    items (and reorder the generated DOM elements) based on each item's `id`
    property.
  
    By default the item's own reference is used.
  
    ### {{else}} condition
  
    `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
    if the collection is empty.
  
    ```handlebars
    {{#each developers as |person|}}
      {{person.name}}
    {{else}}
      <p>Sorry, nobody is available for this task.</p>
    {{/each}}
    ```
  
    @method each
    @for Ember.Handlebars.helpers
    @public
  */

  function eachHelper(params, hash, blocks) {
    var list = params[0];
    var keyPath = hash.key;

    if (blocks.template.arity === 0) {
      Ember.deprecate(deprecation);
    }

    if ((0, _emberViewsStreamsShould_display["default"])(list)) {
      (0, _emberMetalEnumerable_utils.forEach)(list, function (item, i) {
        var self;
        if (blocks.template.arity === 0) {
          self = (0, _emberHtmlbarsUtilsNormalizeSelf["default"])(item);
        }

        var key = (0, _emberHtmlbarsUtilsDecodeEachKey["default"])(item, keyPath, i);
        blocks.template.yieldItem(key, [item, i], self);
      });
    } else if (blocks.inverse.yield) {
      blocks.inverse.yield();
    }
  }

  var deprecation = "Using the context switching form of {{each}} is deprecated. Please use the keyword form (`{{#each items as |item|}}`) instead.";
  exports.deprecation = deprecation;
});
enifed("ember-htmlbars/helpers/if_unless", ["exports", "ember-metal/core", "ember-views/streams/should_display"], function (exports, _emberMetalCore, _emberViewsStreamsShould_display) {

  /**
    Use the `if` block helper to conditionally render a block depending on a
    property. If the property is "falsey", for example: `false`, `undefined
   `null`, `""`, `0` or an empty array, the block will not be rendered.
  
   ```handlebars
    {{! will not render if foo is falsey}}
    {{#if foo}}
      Welcome to the {{foo.bar}}
    {{/if}}
    ```
  
    You can also specify a template to show if the property is falsey by using
    the `else` helper.
  
    ```handlebars
    {{!Is it raining outside?}}
    {{#if isRaining}}
      Yes, grab an umbrella!
    {{else}}
      No, it's lovely outside!
    {{/if}}
    ```
  
    You are also able to combine `else` and `if` helpers to create more complex
    conditional logic.
  
    ```handlebars
    {{#if isMorning}}
      Good morning
    {{else if isAfternoon}}
      Good afternoon
    {{else}}
      Good night
    {{/if}}
    ```
  
    You can use `if` inline to conditionally render a single property or string.
    This helper acts like a ternary operator. If the first property is truthy,
    the second argument will be displayed, if not, the third argument will be
    displayed
  
    ```handlebars
    {{if useLongGreeting "Hello" "Hi"}} Dave
    ```
  
    Finally, you can use the `if` helper inside another helper as a subexpression.
  
    ```handlebars
    {{some-component height=(if isBig "100" "10")}}
    ```
  
    @method if
    @for Ember.Handlebars.helpers
    @public
  */
  function ifHelper(params, hash, options) {
    return ifUnless(params, hash, options, (0, _emberViewsStreamsShould_display["default"])(params[0]));
  }

  /**
    The `unless` helper is the inverse of the `if` helper. Its block will be
    rendered if the expression contains a falsey value.  All forms of the `if`
    helper can also be used with `unless`.
  
    @method unless
    @for Ember.Handlebars.helpers
    @public
  */
  function unlessHelper(params, hash, options) {
    return ifUnless(params, hash, options, !(0, _emberViewsStreamsShould_display["default"])(params[0]));
  }

  function ifUnless(params, hash, options, truthy) {
    _emberMetalCore["default"].assert("The block form of the `if` and `unless` helpers expect exactly one " + "argument, e.g. `{{#if newMessages}} You have new messages. {{/if}}.`", !options.template.yield || params.length === 1);

    _emberMetalCore["default"].assert("The inline form of the `if` and `unless` helpers expect two or " + "three arguments, e.g. `{{if trialExpired 'Expired' expiryDate}}` " + "or `{{unless isFirstLogin 'Welcome back!'}}`.", !!options.template.yield || params.length === 2 || params.length === 3);

    if (truthy) {
      if (options.template.yield) {
        options.template.yield();
      } else {
        return params[1];
      }
    } else {
      if (options.inverse.yield) {
        options.inverse.yield();
      } else {
        return params[2];
      }
    }
  }

  exports.ifHelper = ifHelper;
  exports.unlessHelper = unlessHelper;
});
/**
@module ember
@submodule ember-htmlbars
*/

// Ember.assert
enifed('ember-htmlbars/helpers/loc', ['exports', 'ember-runtime/system/string'], function (exports, _emberRuntimeSystemString) {
  exports["default"] = locHelper;

  /**
  @module ember
  @submodule ember-htmlbars
  */

  /**
    Calls [Ember.String.loc](/api/classes/Ember.String.html#method_loc) with the
    provided string.
    This is a convenient way to localize text within a template:
    ```javascript
    Ember.STRINGS = {
      '_welcome_': 'Bonjour'
    };
    ```
    ```handlebars
    <div class='message'>
      {{loc '_welcome_'}}
    </div>
    ```
    ```html
    <div class='message'>
      Bonjour
    </div>
    ```
    See [Ember.String.loc](/api/classes/Ember.String.html#method_loc) for how to
    set up localized string references.
    @method loc
    @for Ember.Handlebars.helpers
    @param {String} str The string to format
    @see {Ember.String#loc}
    @public
  */

  function locHelper(params) {
    return _emberRuntimeSystemString.loc.apply(null, params);
  }
});
enifed("ember-htmlbars/helpers/log", ["exports", "ember-metal/logger"], function (exports, _emberMetalLogger) {
  exports["default"] = logHelper;

  /**
    `log` allows you to output the value of variables in the current rendering
    context. `log` also accepts primitive types such as strings or numbers.
    ```handlebars
    {{log "myVariable:" myVariable }}
    ```
    @method log
    @for Ember.Handlebars.helpers
    @param {*} values
    @public
  */

  function logHelper(values) {
    _emberMetalLogger["default"].log.apply(null, values);
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/helpers/with", ["exports", "ember-htmlbars/utils/normalize-self", "ember-views/streams/should_display"], function (exports, _emberHtmlbarsUtilsNormalizeSelf, _emberViewsStreamsShould_display) {
  exports["default"] = withHelper;

  /**
    Use the `{{with}}` helper when you want to alias a property to a new name. This is helpful
    for semantic clarity as it allows you to retain default scope or to reference a property from another
    `{{with}}` block.
  
    If the aliased property is "falsey", for example: `false`, `undefined` `null`, `""`, `0` or
    an empty array, the block will not be rendered.
  
    ```handlebars
    {{! Will only render if user.posts contains items}}
    {{#with user.posts as |blogPosts|}}
      <div class="notice">
        There are {{blogPosts.length}} blog posts written by {{user.name}}.
      </div>
      {{#each blogPosts as |post|}}
        <li>{{post.title}}</li>
      {{/each}}
    {{/with}}
    ```
  
    Without the `as` operator, it would be impossible to reference `user.name` in the example above.
  
    NOTE: The alias should not reuse a name from the bound property path.
    For example: `{{#with foo.bar as |foo|}}` is not supported because it attempts to alias using
    the first part of the property path, `foo`. Instead, use `{{#with foo.bar as |baz|}}`.
  
    @method with
    @for Ember.Handlebars.helpers
    @param {Object} options
    @return {String} HTML string
    @public
  */

  function withHelper(params, hash, options) {
    if ((0, _emberViewsStreamsShould_display["default"])(params[0])) {
      var preserveContext = false;

      if (options.template.arity !== 0) {
        preserveContext = true;
      }

      if (preserveContext) {
        this.yield([params[0]]);
      } else {
        var _self = (0, _emberHtmlbarsUtilsNormalizeSelf["default"])(params[0]);
        if (hash.controller) {
          _self = {
            hasBoundController: true,
            controller: hash.controller,
            self: _self
          };
        }

        this.yield([], _self);
      }
    } else if (options.inverse && options.inverse.yield) {
      options.inverse.yield([]);
    }
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/bind-local", ["exports", "ember-metal/streams/stream", "ember-metal/streams/proxy-stream"], function (exports, _emberMetalStreamsStream, _emberMetalStreamsProxyStream) {
  exports["default"] = bindLocal;

  function bindLocal(env, scope, key, value) {
    var isExisting = scope.locals.hasOwnProperty(key);

    if (isExisting) {
      var existing = scope.locals[key];

      if (existing !== value) {
        existing.setSource(value);
      }

      existing.notify();
    } else {
      var newValue = _emberMetalStreamsStream["default"].wrap(value, _emberMetalStreamsProxyStream["default"], key);
      scope.locals[key] = newValue;
    }
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/bind-scope", ["exports"], function (exports) {
  exports["default"] = bindScope;

  function bindScope(env, scope) {}
});
enifed("ember-htmlbars/hooks/bind-self", ["exports", "ember-metal/streams/proxy-stream", "ember-htmlbars/utils/subscribe"], function (exports, _emberMetalStreamsProxyStream, _emberHtmlbarsUtilsSubscribe) {
  exports["default"] = bindSelf;

  function bindSelf(env, scope, _self) {
    var self = _self;

    if (self && self.hasBoundController) {
      var controller = self.controller;

      self = self.self;

      newStream(scope.locals, "controller", controller || self);
    }

    if (self && self.isView) {
      scope.view = self;
      newStream(scope.locals, "view", self, null);
      newStream(scope.locals, "controller", scope.locals.view.getKey("controller"));
      newStream(scope, "self", scope.locals.view.getKey("context"), null, true);
      return;
    }

    newStream(scope, "self", self, null, true);

    if (!scope.locals.controller) {
      scope.locals.controller = scope.self;
    }
  }

  function newStream(scope, key, newValue, renderNode, isSelf) {
    var stream = new _emberMetalStreamsProxyStream["default"](newValue, isSelf ? "" : key);
    if (renderNode) {
      (0, _emberHtmlbarsUtilsSubscribe["default"])(renderNode, scope, stream);
    }
    scope[key] = stream;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed('ember-htmlbars/hooks/bind-shadow-scope', ['exports', 'ember-views/views/component', 'ember-metal/streams/proxy-stream', 'ember-htmlbars/utils/subscribe'], function (exports, _emberViewsViewsComponent, _emberMetalStreamsProxyStream, _emberHtmlbarsUtilsSubscribe) {
  exports["default"] = bindShadowScope;

  function bindShadowScope(env, parentScope, shadowScope, options) {
    if (!options) {
      return;
    }

    var didOverrideController = false;

    if (parentScope && parentScope.overrideController) {
      didOverrideController = true;
      shadowScope.locals.controller = parentScope.locals.controller;
    }

    var view = options.view;
    if (view && !(view instanceof _emberViewsViewsComponent["default"])) {
      newStream(shadowScope.locals, 'view', view, null);

      if (!didOverrideController) {
        newStream(shadowScope.locals, 'controller', shadowScope.locals.view.getKey('controller'));
      }

      if (view.isView) {
        newStream(shadowScope, 'self', shadowScope.locals.view.getKey('context'), null, true);
      }
    }

    shadowScope.view = view;

    if (view && options.attrs) {
      shadowScope.component = view;
    }

    if ('attrs' in options) {
      shadowScope.attrs = options.attrs;
    }

    return shadowScope;
  }

  function newStream(scope, key, newValue, renderNode, isSelf) {
    var stream = new _emberMetalStreamsProxyStream["default"](newValue, isSelf ? '' : key);
    if (renderNode) {
      (0, _emberHtmlbarsUtilsSubscribe["default"])(renderNode, scope, stream);
    }
    scope[key] = stream;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/classify", ["exports", "ember-htmlbars/utils/is-component"], function (exports, _emberHtmlbarsUtilsIsComponent) {
  exports["default"] = classify;

  function classify(env, scope, path) {
    if ((0, _emberHtmlbarsUtilsIsComponent["default"])(env, scope, path)) {
      return "component";
    }

    return null;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/cleanup-render-node", ["exports"], function (exports) {
  exports["default"] = cleanupRenderNode;
  /**
  @module ember
  @submodule ember-htmlbars
  */

  function cleanupRenderNode(renderNode) {
    if (renderNode.cleanup) {
      renderNode.cleanup();
    }
  }
});
enifed("ember-htmlbars/hooks/component", ["exports", "ember-htmlbars/node-managers/component-node-manager"], function (exports, _emberHtmlbarsNodeManagersComponentNodeManager) {
  exports["default"] = componentHook;

  function componentHook(renderNode, env, scope, _tagName, params, attrs, templates, visitor) {
    var state = renderNode.state;

    // Determine if this is an initial render or a re-render
    if (state.manager) {
      state.manager.rerender(env, attrs, visitor);
      return;
    }

    var tagName = _tagName;
    var isAngleBracket = false;

    if (tagName.charAt(0) === "<") {
      tagName = tagName.slice(1, -1);
      isAngleBracket = true;
    }

    var parentView = env.view;

    var manager = _emberHtmlbarsNodeManagersComponentNodeManager["default"].create(renderNode, env, {
      tagName: tagName,
      params: params,
      attrs: attrs,
      parentView: parentView,
      templates: templates,
      isAngleBracket: isAngleBracket,
      parentScope: scope
    });

    state.manager = manager;

    manager.render(env, visitor);
  }
});
enifed("ember-htmlbars/hooks/concat", ["exports", "ember-metal/streams/utils"], function (exports, _emberMetalStreamsUtils) {
  exports["default"] = concat;

  function concat(env, parts) {
    return (0, _emberMetalStreamsUtils.concat)(parts, "");
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/create-fresh-scope", ["exports"], function (exports) {
  exports["default"] = createFreshScope;

  function createFreshScope() {
    return {
      self: null,
      blocks: {},
      component: null,
      view: null,
      attrs: null,
      locals: {},
      localPresent: {}
    };
  }
});
enifed("ember-htmlbars/hooks/destroy-render-node", ["exports"], function (exports) {
  exports["default"] = destroyRenderNode;
  /**
  @module ember
  @submodule ember-htmlbars
  */

  function destroyRenderNode(renderNode) {
    if (renderNode.emberView) {
      renderNode.emberView.destroy();
    }

    var streamUnsubscribers = renderNode.streamUnsubscribers;
    if (streamUnsubscribers) {
      for (var i = 0, l = streamUnsubscribers.length; i < l; i++) {
        streamUnsubscribers[i]();
      }
    }
  }
});
enifed("ember-htmlbars/hooks/did-cleanup-tree", ["exports"], function (exports) {
  exports["default"] = didCleanupTree;

  function didCleanupTree(env) {
    var view;
    if (view = env.view) {
      view.ownerView.isDestroyingSubtree = false;
    }
  }
});
enifed("ember-htmlbars/hooks/did-render-node", ["exports"], function (exports) {
  exports["default"] = didRenderNode;

  function didRenderNode(morph, env) {
    env.renderedNodes[morph.guid] = true;
  }
});
enifed("ember-htmlbars/hooks/element", ["exports", "ember-htmlbars/system/lookup-helper", "htmlbars-runtime/hooks", "ember-htmlbars/system/invoke-helper"], function (exports, _emberHtmlbarsSystemLookupHelper, _htmlbarsRuntimeHooks, _emberHtmlbarsSystemInvokeHelper) {
  exports["default"] = emberElement;

  var fakeElement;

  function updateElementAttributesFromString(element, string) {
    if (!fakeElement) {
      fakeElement = document.createElement("div");
    }

    fakeElement.innerHTML = "<" + element.tagName + " " + string + "><" + "/" + element.tagName + ">";

    var attrs = fakeElement.firstChild.attributes;
    for (var i = 0, l = attrs.length; i < l; i++) {
      var attr = attrs[i];
      if (attr.specified) {
        element.setAttribute(attr.name, attr.value);
      }
    }
  }

  function emberElement(morph, env, scope, path, params, hash, visitor) {
    if ((0, _htmlbarsRuntimeHooks.handleRedirect)(morph, env, scope, path, params, hash, null, null, visitor)) {
      return;
    }

    var result;
    var helper = (0, _emberHtmlbarsSystemLookupHelper.findHelper)(path, scope.self, env);
    if (helper) {
      var helperStream = (0, _emberHtmlbarsSystemInvokeHelper.buildHelperStream)(helper, params, hash, { element: morph.element }, env, scope);
      result = helperStream.value();
    } else {
      result = env.hooks.get(env, scope, path);
    }

    var value = env.hooks.getValue(result);
    if (value) {
      Ember.deprecate("Returning a string of attributes from a helper inside an element is deprecated.");
      updateElementAttributesFromString(morph.element, value);
    }
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/get-cell-or-value", ["exports", "ember-metal/streams/utils", "ember-htmlbars/keywords/mut"], function (exports, _emberMetalStreamsUtils, _emberHtmlbarsKeywordsMut) {
  exports["default"] = getCellOrValue;

  function getCellOrValue(ref) {
    if (ref && ref[_emberHtmlbarsKeywordsMut.MUTABLE_REFERENCE]) {
      // reify the mutable reference into a mutable cell
      return ref.cell();
    }

    // get the value out of the reference
    return (0, _emberMetalStreamsUtils.read)(ref);
  }
});
enifed("ember-htmlbars/hooks/get-child", ["exports", "ember-metal/streams/utils"], function (exports, _emberMetalStreamsUtils) {
  exports["default"] = getChild;

  function getChild(parent, key) {
    if ((0, _emberMetalStreamsUtils.isStream)(parent)) {
      return parent.getKey(key);
    }

    // This should only happen when we are looking at an `attrs` hash
    // That might change if it is possible to pass object literals
    // through the templating system.
    return parent[key];
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/get-root", ["exports", "ember-metal/core", "ember-metal/path_cache", "ember-metal/streams/proxy-stream"], function (exports, _emberMetalCore, _emberMetalPath_cache, _emberMetalStreamsProxyStream) {
  exports["default"] = getRoot;

  function getRoot(scope, key) {
    if (key === "this") {
      return [scope.self];
    } else if (key === "hasBlock") {
      return [!!scope.blocks["default"]];
    } else if (key === "hasBlockParams") {
      return [!!(scope.blocks["default"] && scope.blocks["default"].arity)];
    } else if ((0, _emberMetalPath_cache.isGlobal)(key) && _emberMetalCore["default"].lookup[key]) {
      return [getGlobal(key)];
    } else if (key in scope.locals) {
      return [scope.locals[key]];
    } else {
      return [getKey(scope, key)];
    }
  }

  function getKey(scope, key) {
    if (key === "attrs" && scope.attrs) {
      return scope.attrs;
    }

    var self = scope.self || scope.locals.view;

    if (scope.attrs && key in scope.attrs) {
      // TODO: attrs
      // Ember.deprecate("You accessed the `" + key + "` attribute directly. Please use `attrs." + key + "` instead.");
      return scope.attrs[key];
    } else if (self) {
      return self.getKey(key);
    }
  }

  function getGlobal(name) {
    _emberMetalCore["default"].deprecate("Global lookup of " + name + " from a Handlebars template is deprecated.");

    // This stream should be memoized, but this path is deprecated and
    // will be removed soon so it's not worth the trouble.
    return new _emberMetalStreamsProxyStream["default"](_emberMetalCore["default"].lookup[name], name);
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/get-value", ["exports", "ember-metal/streams/utils", "ember-views/compat/attrs-proxy"], function (exports, _emberMetalStreamsUtils, _emberViewsCompatAttrsProxy) {
  exports["default"] = getValue;

  function getValue(ref) {
    var value = (0, _emberMetalStreamsUtils.read)(ref);

    if (value && value[_emberViewsCompatAttrsProxy.MUTABLE_CELL]) {
      return value.value;
    }

    return value;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/has-helper", ["exports", "ember-htmlbars/system/lookup-helper"], function (exports, _emberHtmlbarsSystemLookupHelper) {
  exports["default"] = hasHelperHook;

  function hasHelperHook(env, scope, helperName) {
    if (env.helpers[helperName]) {
      return true;
    }

    var container = env.container;
    if ((0, _emberHtmlbarsSystemLookupHelper.validateLazyHelperName)(helperName, container, env.hooks.keywords, env.knownHelpers)) {
      var containerName = "helper:" + helperName;
      if (container._registry.has(containerName)) {
        return true;
      }
    }

    return false;
  }
});
enifed("ember-htmlbars/hooks/invoke-helper", ["exports", "ember-metal/core", "ember-htmlbars/system/invoke-helper", "ember-htmlbars/utils/subscribe"], function (exports, _emberMetalCore, _emberHtmlbarsSystemInvokeHelper, _emberHtmlbarsUtilsSubscribe) {
  exports["default"] = invokeHelper;

  function invokeHelper(morph, env, scope, visitor, params, hash, helper, templates, context) {

    if (helper.isLegacyViewHelper) {
      _emberMetalCore["default"].assert("You can only pass attributes (such as name=value) not bare " + "values to a helper for a View found in '" + helper.viewClass + "'", params.length === 0);

      env.hooks.keyword("view", morph, env, scope, [helper.viewClass], hash, templates.template.raw, null, visitor);
      // Opts into a special mode for view helpers
      return { handled: true };
    }

    var helperStream = (0, _emberHtmlbarsSystemInvokeHelper.buildHelperStream)(helper, params, hash, templates, env, scope, context);

    // Ember.Helper helpers are pure values, thus linkable
    if (helperStream.linkable) {

      if (morph) {
        // When processing an inline expression the params and hash have already
        // been linked. Thus, HTMLBars will not link the returned helperStream.
        // We subscribe the morph to the helperStream here, and also subscribe
        // the helperStream to any params.
        var addedDependency = false;
        for (var i = 0, l = params.length; i < l; i++) {
          addedDependency = true;
          helperStream.addDependency(params[i]);
        }
        for (var key in hash) {
          addedDependency = true;
          helperStream.addDependency(hash[key]);
        }
        if (addedDependency) {
          (0, _emberHtmlbarsUtilsSubscribe["default"])(morph, env, scope, helperStream);
        }
      }

      return { link: true, value: helperStream };
    }

    // Legacy helpers are not linkable, they must run every rerender
    return { value: helperStream.value() };
  }
});
// Ember.assert
enifed("ember-htmlbars/hooks/link-render-node", ["exports", "ember-htmlbars/utils/subscribe", "ember-runtime/utils", "ember-metal/streams/utils", "ember-htmlbars/system/lookup-helper"], function (exports, _emberHtmlbarsUtilsSubscribe, _emberRuntimeUtils, _emberMetalStreamsUtils, _emberHtmlbarsSystemLookupHelper) {
  exports["default"] = linkRenderNode;

  function linkRenderNode(renderNode, env, scope, path, params, hash) {
    if (renderNode.streamUnsubscribers) {
      return true;
    }

    var keyword = env.hooks.keywords[path];
    var helper;
    if (keyword && keyword.link) {
      keyword.link(renderNode.state, params, hash);
    } else {
      switch (path) {
        case "unbound":
          return true;
        case "unless":
        case "if":
          params[0] = shouldDisplay(params[0]);break;
        case "each":
          params[0] = eachParam(params[0]);break;
        default:
          helper = (0, _emberHtmlbarsSystemLookupHelper.findHelper)(path, scope.view, env);

          if (helper && helper.isHandlebarsCompat && params[0]) {
            params[0] = processHandlebarsCompatDepKeys(params[0], helper._dependentKeys);
          }
      }
    }

    if (params && params.length) {
      for (var i = 0; i < params.length; i++) {
        (0, _emberHtmlbarsUtilsSubscribe["default"])(renderNode, env, scope, params[i]);
      }
    }

    if (hash) {
      for (var key in hash) {
        (0, _emberHtmlbarsUtilsSubscribe["default"])(renderNode, env, scope, hash[key]);
      }
    }

    // The params and hash can be reused; they don't need to be
    // recomputed on subsequent re-renders because they are
    // streams.
    return true;
  }

  function eachParam(list) {
    var listChange = getKey(list, "[]");

    var stream = (0, _emberMetalStreamsUtils.chain)(list, function () {
      (0, _emberMetalStreamsUtils.read)(listChange);
      return (0, _emberMetalStreamsUtils.read)(list);
    }, "each");

    stream.addDependency(listChange);
    return stream;
  }

  function shouldDisplay(predicate) {
    var length = getKey(predicate, "length");
    var isTruthy = getKey(predicate, "isTruthy");

    var stream = (0, _emberMetalStreamsUtils.chain)(predicate, function () {
      var predicateVal = (0, _emberMetalStreamsUtils.read)(predicate);
      var lengthVal = (0, _emberMetalStreamsUtils.read)(length);
      var isTruthyVal = (0, _emberMetalStreamsUtils.read)(isTruthy);

      if ((0, _emberRuntimeUtils.isArray)(predicateVal)) {
        return lengthVal > 0;
      }

      if (typeof isTruthyVal === "boolean") {
        return isTruthyVal;
      }

      return !!predicateVal;
    }, "ShouldDisplay");

    (0, _emberMetalStreamsUtils.addDependency)(stream, length);
    (0, _emberMetalStreamsUtils.addDependency)(stream, isTruthy);

    return stream;
  }

  function getKey(obj, key) {
    if ((0, _emberMetalStreamsUtils.isStream)(obj)) {
      return obj.getKey(key);
    } else {
      return obj && obj[key];
    }
  }

  function processHandlebarsCompatDepKeys(base, additionalKeys) {
    if (!(0, _emberMetalStreamsUtils.isStream)(base) || additionalKeys.length === 0) {
      return base;
    }

    var depKeyStreams = [];

    var stream = (0, _emberMetalStreamsUtils.chain)(base, function () {
      (0, _emberMetalStreamsUtils.readArray)(depKeyStreams);

      return (0, _emberMetalStreamsUtils.read)(base);
    }, "HandlebarsCompatHelper");

    for (var i = 0, l = additionalKeys.length; i < l; i++) {
      var depKeyStream = base.get(additionalKeys[i]);

      depKeyStreams.push(depKeyStream);
      stream.addDependency(depKeyStream);
    }

    return stream;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/lookup-helper", ["exports", "ember-htmlbars/system/lookup-helper"], function (exports, _emberHtmlbarsSystemLookupHelper) {
  exports["default"] = lookupHelperHook;

  function lookupHelperHook(env, scope, helperName) {
    return (0, _emberHtmlbarsSystemLookupHelper["default"])(helperName, scope.self, env);
  }
});
enifed("ember-htmlbars/hooks/subexpr", ["exports", "ember-htmlbars/system/lookup-helper", "ember-htmlbars/system/invoke-helper", "ember-metal/streams/utils"], function (exports, _emberHtmlbarsSystemLookupHelper, _emberHtmlbarsSystemInvokeHelper, _emberMetalStreamsUtils) {
  exports["default"] = subexpr;

  function subexpr(env, scope, helperName, params, hash) {
    // TODO: Keywords and helper invocation should be integrated into
    // the subexpr hook upstream in HTMLBars.
    var keyword = env.hooks.keywords[helperName];
    if (keyword) {
      return keyword(null, env, scope, params, hash, null, null);
    }

    var label = labelForSubexpr(params, hash, helperName);
    var helper = (0, _emberHtmlbarsSystemLookupHelper["default"])(helperName, scope.self, env);

    var helperStream = (0, _emberHtmlbarsSystemInvokeHelper.buildHelperStream)(helper, params, hash, { template: {}, inverse: {} }, env, scope, label);

    for (var i = 0, l = params.length; i < l; i++) {
      helperStream.addDependency(params[i]);
    }

    for (var key in hash) {
      helperStream.addDependency(hash[key]);
    }

    return helperStream;
  }

  function labelForSubexpr(params, hash, helperName) {
    return function () {
      var paramsLabels = labelsForParams(params);
      var hashLabels = labelsForHash(hash);
      var label = "(" + helperName;
      if (paramsLabels) {
        label += " " + paramsLabels;
      }
      if (hashLabels) {
        label += " " + hashLabels;
      }
      return "" + label + ")";
    };
  }

  function labelsForParams(params) {
    return (0, _emberMetalStreamsUtils.labelsFor)(params).join(" ");
  }

  function labelsForHash(hash) {
    var out = [];

    for (var prop in hash) {
      out.push("" + prop + "=" + (0, _emberMetalStreamsUtils.labelFor)(hash[prop]));
    }

    return out.join(" ");
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/update-self", ["exports", "ember-metal/property_get", "ember-htmlbars/utils/update-scope"], function (exports, _emberMetalProperty_get, _emberHtmlbarsUtilsUpdateScope) {
  exports["default"] = updateSelf;

  function updateSelf(env, scope, _self) {
    var self = _self;

    if (self && self.hasBoundController) {
      var controller = self.controller;

      self = self.self;

      (0, _emberHtmlbarsUtilsUpdateScope["default"])(scope.locals, "controller", controller || self);
    }

    Ember.assert("BUG: scope.attrs and self.isView should not both be true", !(scope.attrs && self.isView));

    if (self && self.isView) {
      scope.view = self;
      (0, _emberHtmlbarsUtilsUpdateScope["default"])(scope.locals, "view", self, null);
      (0, _emberHtmlbarsUtilsUpdateScope["default"])(scope, "self", (0, _emberMetalProperty_get.get)(self, "context"), null, true);
      return;
    }

    (0, _emberHtmlbarsUtilsUpdateScope["default"])(scope, "self", self, null);
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/hooks/will-cleanup-tree", ["exports"], function (exports) {
  exports["default"] = willCleanupTree;

  function willCleanupTree(env, morph, destroySelf) {
    var view = morph.emberView;
    if (destroySelf && view && view.parentView) {
      view.parentView.removeChild(view);
    }

    if (view = env.view) {
      view.ownerView.isDestroyingSubtree = true;
    }
  }
});
enifed("ember-htmlbars/keywords", ["exports", "htmlbars-runtime", "ember-metal/platform/create"], function (exports, _htmlbarsRuntime, _emberMetalPlatformCreate) {
  exports.registerKeyword = registerKeyword;

  /**
   @private
   @property helpers
  */
  var keywords = (0, _emberMetalPlatformCreate["default"])(_htmlbarsRuntime.hooks.keywords);

  /**
  @module ember
  @submodule ember-htmlbars
  */

  /**
    @private
    @method _registerHelper
    @for Ember.HTMLBars
    @param {String} name
    @param {Object|Function} keyword the keyword to add
  */

  function registerKeyword(name, keyword) {
    keywords[name] = keyword;
  }

  exports["default"] = keywords;
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/keywords/collection", ["exports", "ember-views/streams/utils", "ember-views/views/collection_view", "ember-htmlbars/node-managers/view-node-manager", "ember-metal/keys", "ember-metal/merge"], function (exports, _emberViewsStreamsUtils, _emberViewsViewsCollection_view, _emberHtmlbarsNodeManagersViewNodeManager, _emberMetalKeys, _emberMetalMerge) {
  exports["default"] = {
    setupState: function (state, env, scope, params, hash) {
      var read = env.hooks.getValue;

      return (0, _emberMetalMerge.assign)({}, state, {
        parentView: read(scope.locals.view),
        viewClassOrInstance: getView(read(params[0]), env.container)
      });
    },

    rerender: function (morph, env, scope, params, hash, template, inverse, visitor) {
      // If the hash is empty, the component cannot have extracted a part
      // of a mutable param and used it in its layout, because there are
      // no params at all.
      if ((0, _emberMetalKeys["default"])(hash).length) {
        return morph.state.manager.rerender(env, hash, visitor, true);
      }
    },

    render: function (node, env, scope, params, hash, template, inverse, visitor) {
      var state = node.state;
      var parentView = state.parentView;

      var options = { component: node.state.viewClassOrInstance, layout: null };
      if (template) {
        options.createOptions = {
          _itemViewTemplate: template && { raw: template },
          _itemViewInverse: inverse && { raw: inverse }
        };
      }

      if (hash.itemView) {
        hash.itemViewClass = hash.itemView;
      }

      if (hash.emptyView) {
        hash.emptyViewClass = hash.emptyView;
      }

      var nodeManager = _emberHtmlbarsNodeManagersViewNodeManager["default"].create(node, env, hash, options, parentView, null, scope, template);
      state.manager = nodeManager;

      nodeManager.render(env, hash, visitor);
    }
  };

  function getView(viewPath, container) {
    var viewClassOrInstance;

    if (!viewPath) {
      viewClassOrInstance = _emberViewsViewsCollection_view["default"];
    } else {
      viewClassOrInstance = (0, _emberViewsStreamsUtils.readViewFactory)(viewPath, container);
    }

    return viewClassOrInstance;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/keywords/component", ["exports", "ember-metal/merge"], function (exports, _emberMetalMerge) {
  exports["default"] = {
    setupState: function (lastState, env, scope, params, hash) {
      var componentPath = env.hooks.getValue(params[0]);
      return (0, _emberMetalMerge.assign)({}, lastState, { componentPath: componentPath, isComponentHelper: true });
    },

    render: function (morph) {
      for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }

      if (morph.state.manager) {
        morph.state.manager.destroy();
      }

      // Force the component hook to treat this as a first-time render,
      // because normal components (`<foo-bar>`) cannot change at runtime,
      // but the `{{component}}` helper can.
      morph.state.manager = null;

      render.apply(undefined, [morph].concat(rest));
    },

    rerender: render
  };

  function render(morph, env, scope, params, hash, template, inverse, visitor) {
    var componentPath = morph.state.componentPath;

    // If the value passed to the {{component}} helper is undefined or null,
    // don't create a new ComponentNode.
    if (componentPath === undefined || componentPath === null) {
      return;
    }

    env.hooks.component(morph, env, scope, componentPath, params, hash, { "default": template, inverse: inverse }, visitor);
  }
});
enifed("ember-htmlbars/keywords/customized_outlet", ["exports", "ember-htmlbars/node-managers/view-node-manager", "ember-views/streams/utils", "ember-metal/streams/utils"], function (exports, _emberHtmlbarsNodeManagersViewNodeManager, _emberViewsStreamsUtils, _emberMetalStreamsUtils) {
  exports["default"] = {
    setupState: function (state, env, scope, params, hash) {
      Ember.assert("Using a quoteless view parameter with {{outlet}} is not supported", !hash.view || !(0, _emberMetalStreamsUtils.isStream)(hash.view));
      var read = env.hooks.getValue;
      var viewClass = read(hash.viewClass) || (0, _emberViewsStreamsUtils.readViewFactory)(read(hash.view), env.container);
      return { viewClass: viewClass };
    },
    render: function (renderNode, env, scope, params, hash, template, inverse, visitor) {
      var state = renderNode.state;
      var parentView = env.view;

      var options = {
        component: state.viewClass
      };
      var nodeManager = _emberHtmlbarsNodeManagersViewNodeManager["default"].create(renderNode, env, hash, options, parentView, null, null, null);
      state.manager = nodeManager;
      nodeManager.render(env, hash, visitor);
    }
  };
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/keywords/debugger", ["exports", "ember-metal/logger"], function (exports, _emberMetalLogger) {
  exports["default"] = debuggerKeyword;

  /**
    Execute the `debugger` statement in the current template's context.
  
    ```handlebars
    {{debugger}}
    ```
  
    When using the debugger helper you will have access to a `get` function. This
    function retrieves values available in the context of the template.
    For example, if you're wondering why a value `{{foo}}` isn't rendering as
    expected within a template, you could place a `{{debugger}}` statement and,
    when the `debugger;` breakpoint is hit, you can attempt to retrieve this value:
  
    ```
    > get('foo')
    ```
  
    `get` is also aware of keywords. So in this situation
  
    ```handlebars
    {{#each items as |item|}}
      {{debugger}}
    {{/each}}
    ```
  
    You'll be able to get values from the current item:
  
    ```
    > get('item.name')
    ```
  
    You can also access the context of the view to make sure it is the object that
    you expect:
  
    ```
    > context
    ```
  
    @method debugger
    @for Ember.Handlebars.helpers
    @public
  */

  function debuggerKeyword(morph, env, scope) {
    /* jshint unused: false, debug: true */

    var view = env.hooks.getValue(scope.locals.view);
    var context = env.hooks.getValue(scope.self);

    function get(path) {
      return env.hooks.getValue(env.hooks.get(env, scope, path));
    }

    _emberMetalLogger["default"].info("Use `view`, `context`, and `get(<path>)` to debug this template.");

    debugger;

    return true;
  }
});
/*jshint debug:true*/

/**
@module ember
@submodule ember-htmlbars
*/
enifed('ember-htmlbars/keywords/each', ['exports', 'ember-runtime/controllers/array_controller'], function (exports, _emberRuntimeControllersArray_controller) {
  exports["default"] = each;

  function each(morph, env, scope, params, hash, template, inverse, visitor) {
    var getValue = env.hooks.getValue;
    var firstParam = params[0] && getValue(params[0]);
    var keyword = hash['-legacy-keyword'] && getValue(hash['-legacy-keyword']);

    if (firstParam && firstParam instanceof _emberRuntimeControllersArray_controller["default"]) {
      env.hooks.block(morph, env, scope, '-legacy-each-with-controller', params, hash, template, inverse, visitor);
      return true;
    }

    if (keyword) {
      env.hooks.block(morph, env, scope, '-legacy-each-with-keyword', params, hash, template, inverse, visitor);
      return true;
    }

    return false;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/keywords/input", ["exports", "ember-metal/core", "ember-metal/merge"], function (exports, _emberMetalCore, _emberMetalMerge) {
  exports["default"] = {
    setupState: function (lastState, env, scope, params, hash) {
      var type = env.hooks.getValue(hash.type);
      var componentName = componentNameMap[type] || defaultComponentName;

      _emberMetalCore["default"].assert("{{input type='checkbox'}} does not support setting `value=someBooleanValue`;" + " you must use `checked=someBooleanValue` instead.", !(type === "checkbox" && hash.hasOwnProperty("value")));

      return (0, _emberMetalMerge.assign)({}, lastState, { componentName: componentName });
    },

    render: function (morph, env, scope, params, hash, template, inverse, visitor) {
      env.hooks.component(morph, env, scope, morph.state.componentName, params, hash, { "default": template, inverse: inverse }, visitor);
    },

    rerender: function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.render.apply(this, args);
    }
  };

  var defaultComponentName = "-text-field";

  var componentNameMap = {
    "checkbox": "-checkbox"
  };
});
enifed("ember-htmlbars/keywords/legacy-yield", ["exports", "ember-metal/streams/proxy-stream"], function (exports, _emberMetalStreamsProxyStream) {
  exports["default"] = legacyYield;

  function legacyYield(morph, env, _scope, params, hash, template, inverse, visitor) {
    var scope = _scope;

    if (scope.blocks["default"].arity === 0) {
      // Typically, the `controller` local is persists through lexical scope.
      // However, in this case, the `{{legacy-yield}}` in the legacy each view
      // needs to override the controller local for the template it is yielding.
      // This megahaxx allows us to override the controller, and most importantly,
      // prevents the downstream scope from attempting to bind the `controller` local.
      if (hash.controller) {
        scope = env.hooks.createChildScope(scope);
        scope.locals.controller = new _emberMetalStreamsProxyStream["default"](hash.controller, "controller");
        scope.overrideController = true;
      }
      scope.blocks["default"](env, [], params[0], morph, scope, visitor);
    } else {
      scope.blocks["default"](env, params, undefined, morph, scope, visitor);
    }

    return true;
  }
});
enifed("ember-htmlbars/keywords/mut", ["exports", "ember-metal/platform/create", "ember-metal/merge", "ember-metal/utils", "ember-metal/streams/proxy-stream", "ember-metal/streams/utils", "ember-metal/streams/stream", "ember-views/compat/attrs-proxy", "ember-routing-htmlbars/keywords/closure-action"], function (exports, _emberMetalPlatformCreate, _emberMetalMerge, _emberMetalUtils, _emberMetalStreamsProxyStream, _emberMetalStreamsUtils, _emberMetalStreamsStream, _emberViewsCompatAttrsProxy, _emberRoutingHtmlbarsKeywordsClosureAction) {
  var _merge;

  exports["default"] = mut;
  exports.privateMut = privateMut;
  var MUTABLE_REFERENCE = (0, _emberMetalUtils.symbol)("MUTABLE_REFERENCE");

  exports.MUTABLE_REFERENCE = MUTABLE_REFERENCE;

  function mut(morph, env, scope, originalParams, hash, template, inverse) {
    // If `morph` is `null` the keyword is being invoked as a subexpression.
    if (morph === null) {
      var valueStream = originalParams[0];
      return mutParam(env.hooks.getValue, valueStream);
    }

    return true;
  }

  function privateMut(morph, env, scope, originalParams, hash, template, inverse) {
    // If `morph` is `null` the keyword is being invoked as a subexpression.
    if (morph === null) {
      var valueStream = originalParams[0];
      return mutParam(env.hooks.getValue, valueStream, true);
    }

    return true;
  }

  function mutParam(read, stream, internal) {
    if (internal) {
      if (!(0, _emberMetalStreamsUtils.isStream)(stream)) {
        (function () {
          var literal = stream;
          stream = new _emberMetalStreamsStream["default"](function () {
            return literal;
          }, "(literal " + literal + ")");
          stream.setValue = function (newValue) {
            literal = newValue;
            stream.notify();
          };
        })();
      }
    } else {
      Ember.assert("You can only pass a path to mut", (0, _emberMetalStreamsUtils.isStream)(stream));
    }

    if (stream[MUTABLE_REFERENCE]) {
      return stream;
    }

    return new MutStream(stream);
  }

  function MutStream(stream) {
    this.init("(mut " + stream.label + ")");
    this.path = stream.path;
    this.sourceDep = this.addMutableDependency(stream);
    this[MUTABLE_REFERENCE] = true;
  }

  MutStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsProxyStream["default"].prototype);

  (0, _emberMetalMerge["default"])(MutStream.prototype, (_merge = {}, _merge.cell = function () {
    var source = this;
    var value = source.value();

    if (value && value[_emberRoutingHtmlbarsKeywordsClosureAction.ACTION]) {
      return value;
    }

    var val = {
      value: value,
      update: function (val) {
        source.setValue(val);
      }
    };

    val[_emberViewsCompatAttrsProxy.MUTABLE_CELL] = true;
    return val;
  }, _merge[_emberRoutingHtmlbarsKeywordsClosureAction.INVOKE] = function (val) {
    this.setValue(val);
  }, _merge));
});
enifed('ember-htmlbars/keywords/outlet', ['exports', 'htmlbars-runtime/hooks'], function (exports, _htmlbarsRuntimeHooks) {

  /*
   This level of delegation handles backward-compatibility with the
   `view` parameter to {{outlet}}. When we drop support for the `view`
   parameter in 2.0, this keyword should just get replaced directly
   with @real_outlet.
  */

  exports["default"] = function (morph, env, scope, params, hash, template, inverse, visitor) {
    if (hash.hasOwnProperty('view') || hash.hasOwnProperty('viewClass')) {
      Ember.deprecate('Passing `view` or `viewClass` to {{outlet}} is deprecated.');
      (0, _htmlbarsRuntimeHooks.keyword)('@customized_outlet', morph, env, scope, params, hash, template, inverse, visitor);
    } else {
      (0, _htmlbarsRuntimeHooks.keyword)('@real_outlet', morph, env, scope, params, hash, template, inverse, visitor);
    }
    return true;
  };
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/keywords/partial", ["exports", "ember-views/system/lookup_partial", "htmlbars-runtime"], function (exports, _emberViewsSystemLookup_partial, _htmlbarsRuntime) {
  exports["default"] = {
    setupState: function (state, env, scope, params, hash) {
      return { partialName: env.hooks.getValue(params[0]) };
    },

    render: function (renderNode, env, scope, params, hash, template, inverse, visitor) {
      var state = renderNode.state;
      if (!state.partialName) {
        return true;
      }
      var found = (0, _emberViewsSystemLookup_partial["default"])(env, state.partialName);
      if (!found) {
        return true;
      }

      _htmlbarsRuntime.internal.hostBlock(renderNode, env, scope, found.raw, null, null, visitor, function (options) {
        options.templates.template.yield();
      });
    }
  };
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/keywords/readonly", ["exports", "ember-htmlbars/keywords/mut"], function (exports, _emberHtmlbarsKeywordsMut) {
  exports["default"] = readonly;

  function readonly(morph, env, scope, originalParams, hash, template, inverse) {
    // If `morph` is `null` the keyword is being invoked as a subexpression.
    if (morph === null) {
      var stream = originalParams[0];
      if (stream && stream[_emberHtmlbarsKeywordsMut.MUTABLE_REFERENCE]) {
        return stream.sourceDep.dependee;
      }
      return stream;
    }

    return true;
  }
});
enifed("ember-htmlbars/keywords/real_outlet", ["exports", "ember-metal/property_get", "ember-htmlbars/node-managers/view-node-manager", "ember-htmlbars/templates/top-level-view"], function (exports, _emberMetalProperty_get, _emberHtmlbarsNodeManagersViewNodeManager, _emberHtmlbarsTemplatesTopLevelView) {
  _emberHtmlbarsTemplatesTopLevelView["default"].meta.revision = "Ember@1.13.2";

  exports["default"] = {
    willRender: function (renderNode, env) {
      env.view.ownerView._outlets.push(renderNode);
    },

    setupState: function (state, env, scope, params, hash) {
      var outletState = env.outletState;
      var read = env.hooks.getValue;
      var outletName = read(params[0]) || "main";
      var selectedOutletState = outletState[outletName];

      var toRender = selectedOutletState && selectedOutletState.render;
      if (toRender && !toRender.template && !toRender.ViewClass) {
        toRender.template = _emberHtmlbarsTemplatesTopLevelView["default"];
      }

      return { outletState: selectedOutletState, hasParentOutlet: env.hasParentOutlet };
    },

    childEnv: function (state, env) {
      return env.childWithOutletState(state.outletState && state.outletState.outlets, true);
    },

    isStable: function (lastState, nextState) {
      return isStable(lastState.outletState, nextState.outletState);
    },

    isEmpty: function (state) {
      return isEmpty(state.outletState);
    },

    render: function (renderNode, env, scope, params, hash, template, inverse, visitor) {
      var state = renderNode.state;
      var parentView = env.view;
      var outletState = state.outletState;
      var toRender = outletState.render;
      var namespace = env.container.lookup("application:main");
      var LOG_VIEW_LOOKUPS = (0, _emberMetalProperty_get.get)(namespace, "LOG_VIEW_LOOKUPS");

      var ViewClass = outletState.render.ViewClass;

      if (!state.hasParentOutlet && !ViewClass) {
        ViewClass = env.container.lookupFactory("view:toplevel");
      }

      var options = {
        component: ViewClass,
        self: toRender.controller,
        createOptions: {
          controller: toRender.controller
        }
      };

      template = template || toRender.template && toRender.template.raw;

      if (LOG_VIEW_LOOKUPS && ViewClass) {
        Ember.Logger.info("Rendering " + toRender.name + " with " + ViewClass, { fullName: "view:" + toRender.name });
      }

      var nodeManager = _emberHtmlbarsNodeManagersViewNodeManager["default"].create(renderNode, env, {}, options, parentView, null, null, template);
      state.manager = nodeManager;

      nodeManager.render(env, hash, visitor);
    }
  };

  function isEmpty(outletState) {
    return !outletState || !outletState.render.ViewClass && !outletState.render.template;
  }

  function isStable(a, b) {
    if (!a && !b) {
      return true;
    }
    if (!a || !b) {
      return false;
    }
    a = a.render;
    b = b.render;
    for (var key in a) {
      if (a.hasOwnProperty(key)) {
        // name is only here for logging & debugging. If two different
        // names result in otherwise identical states, they're still
        // identical.
        if (a[key] !== b[key] && key !== "name") {
          return false;
        }
      }
    }
    return true;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/keywords/template", ["exports", "ember-metal/core"], function (exports, _emberMetalCore) {
  exports["default"] = templateKeyword;
  var deprecation = "The `template` helper has been deprecated in favor of the `partial` helper.";

  exports.deprecation = deprecation;

  function templateKeyword(morph, env, scope, params, hash, template, inverse, visitor) {
    _emberMetalCore["default"].deprecate(deprecation);
    env.hooks.keyword("partial", morph, env, scope, params, hash, template, inverse, visitor);
    return true;
  }
});
enifed('ember-htmlbars/keywords/textarea', ['exports'], function (exports) {
  exports["default"] = textarea;
  /**
  @module ember
  @submodule ember-htmlbars
  */

  function textarea(morph, env, scope, originalParams, hash, template, inverse, visitor) {
    env.hooks.component(morph, env, scope, '-text-area', originalParams, hash, { "default": template, inverse: inverse }, visitor);
    return true;
  }
});
enifed("ember-htmlbars/keywords/unbound", ["exports", "ember-metal/merge", "ember-metal/platform/create", "ember-metal/streams/stream", "ember-metal/streams/utils"], function (exports, _emberMetalMerge, _emberMetalPlatformCreate, _emberMetalStreamsStream, _emberMetalStreamsUtils) {
  exports["default"] = unbound;
  /**
  @module ember
  @submodule ember-htmlbars
  */

  function unbound(morph, env, scope, originalParams, hash, template, inverse) {
    // Since we already got the params as a set of streams, we need to extract the key from
    // the first param instead of (incorrectly) trying to read from it. If this was a call
    // to `{{unbound foo.bar}}`, then we pass along the original stream to `hooks.range`.
    var params = originalParams.slice();
    var valueStream = params.shift();

    // If `morph` is `null` the keyword is being invoked as a subexpression.
    if (morph === null) {
      if (originalParams.length > 1) {
        valueStream = env.hooks.subexpr(env, scope, valueStream.key, params, hash);
      }

      return new VolatileStream(valueStream);
    }

    if (params.length === 0) {
      env.hooks.range(morph, env, scope, null, valueStream);
    } else if (template === null) {
      env.hooks.inline(morph, env, scope, valueStream.key, params, hash);
    } else {
      env.hooks.block(morph, env, scope, valueStream.key, params, hash, template, inverse);
    }

    return true;
  }

  function VolatileStream(source) {
    this.init("(volatile " + source.label + ")");
    this.source = source;

    this.addDependency(source);
  }

  VolatileStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  (0, _emberMetalMerge["default"])(VolatileStream.prototype, {
    value: function () {
      return (0, _emberMetalStreamsUtils.read)(this.source);
    },

    notify: function () {}
  });
});
enifed("ember-htmlbars/keywords/view", ["exports", "ember-views/streams/utils", "ember-views/views/view", "ember-htmlbars/node-managers/view-node-manager", "ember-metal/keys"], function (exports, _emberViewsStreamsUtils, _emberViewsViewsView, _emberHtmlbarsNodeManagersViewNodeManager, _emberMetalKeys) {
  exports["default"] = {
    setupState: function (state, env, scope, params, hash) {
      var read = env.hooks.getValue;
      var targetObject = read(scope.self);
      var viewClassOrInstance = state.viewClassOrInstance;
      if (!viewClassOrInstance) {
        viewClassOrInstance = getView(read(params[0]), env.container);
      }

      // if parentView exists, use its controller (the default
      // behavior), otherwise use `scope.self` as the controller
      var controller = scope.view ? null : read(scope.self);

      return {
        manager: state.manager,
        parentView: scope.view,
        controller: controller,
        targetObject: targetObject,
        viewClassOrInstance: viewClassOrInstance
      };
    },

    rerender: function (morph, env, scope, params, hash, template, inverse, visitor) {
      // If the hash is empty, the component cannot have extracted a part
      // of a mutable param and used it in its layout, because there are
      // no params at all.
      if ((0, _emberMetalKeys["default"])(hash).length) {
        return morph.state.manager.rerender(env, hash, visitor, true);
      }
    },

    render: function (node, env, scope, params, hash, template, inverse, visitor) {
      if (hash.tag) {
        hash = swapKey(hash, "tag", "tagName");
      }

      if (hash.classNameBindings) {
        hash.classNameBindings = hash.classNameBindings.split(" ");
      }

      var state = node.state;
      var parentView = state.parentView;

      var options = {
        component: node.state.viewClassOrInstance,
        layout: null
      };

      options.createOptions = {};
      if (node.state.controller) {
        // Use `_controller` to avoid stomping on a CP
        // that exists in the target view/component
        options.createOptions._controller = node.state.controller;
      }

      if (node.state.targetObject) {
        // Use `_targetObject` to avoid stomping on a CP
        // that exists in the target view/component
        options.createOptions._targetObject = node.state.targetObject;
      }

      if (state.manager) {
        state.manager.destroy();
        state.manager = null;
      }

      var nodeManager = _emberHtmlbarsNodeManagersViewNodeManager["default"].create(node, env, hash, options, parentView, null, scope, template);
      state.manager = nodeManager;

      nodeManager.render(env, hash, visitor);
    }
  };

  function getView(viewPath, container) {
    var viewClassOrInstance;

    if (!viewPath) {
      if (container) {
        viewClassOrInstance = container.lookupFactory("view:toplevel");
      } else {
        viewClassOrInstance = _emberViewsViewsView["default"];
      }
    } else {
      viewClassOrInstance = (0, _emberViewsStreamsUtils.readViewFactory)(viewPath, container);
    }

    return viewClassOrInstance;
  }

  function swapKey(hash, original, update) {
    var newHash = {};

    for (var prop in hash) {
      if (prop === original) {
        newHash[update] = hash[prop];
      } else {
        newHash[prop] = hash[prop];
      }
    }

    return newHash;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/keywords/with", ["exports", "htmlbars-runtime", "ember-metal/property_get"], function (exports, _htmlbarsRuntime, _emberMetalProperty_get) {
  exports["default"] = {
    setupState: function (state, env, scope, params, hash) {
      var controller = hash.controller;

      if (controller) {
        if (!state.controller) {
          var context = params[0];
          var controllerFactory = env.container.lookupFactory("controller:" + controller);
          var parentController = scope.view ? (0, _emberMetalProperty_get.get)(scope.view, "context") : null;

          var controllerInstance = controllerFactory.create({
            model: env.hooks.getValue(context),
            parentController: parentController,
            target: parentController
          });

          params[0] = controllerInstance;
          return { controller: controllerInstance };
        }

        return state;
      }

      return { controller: null };
    },

    isStable: function () {
      return true;
    },

    isEmpty: function (state) {
      return false;
    },

    render: function (morph, env, scope, params, hash, template, inverse, visitor) {
      if (morph.state.controller) {
        morph.addDestruction(morph.state.controller);
        hash.controller = morph.state.controller;
      }

      Ember.assert("{{#with foo}} must be called with a single argument or the use the " + "{{#with foo as bar}} syntax", params.length === 1);

      Ember.assert("The {{#with}} helper must be called with a block", !!template);

      if (template && template.arity === 0) {
        Ember.deprecate("Using the context switching form of `{{with}}` is deprecated. " + "Please use the block param form (`{{#with bar as |foo|}}`) instead.", false, { url: "http://emberjs.com/guides/deprecations/#toc_more-consistent-handlebars-scope" });
      }

      _htmlbarsRuntime.internal.continueBlock(morph, env, scope, "with", params, hash, template, inverse, visitor);
    },

    rerender: function (morph, env, scope, params, hash, template, inverse, visitor) {
      _htmlbarsRuntime.internal.continueBlock(morph, env, scope, "with", params, hash, template, inverse, visitor);
    }
  };
});
enifed("ember-htmlbars/morphs/attr-morph", ["exports", "ember-metal/core", "dom-helper", "ember-metal/platform/create"], function (exports, _emberMetalCore, _domHelper, _emberMetalPlatformCreate) {

  var HTMLBarsAttrMorph = _domHelper["default"].prototype.AttrMorphClass;

  var styleWarning = "" + "Binding style attributes may introduce cross-site scripting vulnerabilities; " + "please ensure that values being bound are properly escaped. For more information, " + "including how to disable this warning, see " + "http://emberjs.com/deprecations/v1.x/#toc_binding-style-attributes.";

  exports.styleWarning = styleWarning;
  function EmberAttrMorph(element, attrName, domHelper, namespace) {
    HTMLBarsAttrMorph.call(this, element, attrName, domHelper, namespace);

    this.streamUnsubscribers = null;
  }

  var proto = EmberAttrMorph.prototype = (0, _emberMetalPlatformCreate["default"])(HTMLBarsAttrMorph.prototype);
  proto.HTMLBarsAttrMorph$setContent = HTMLBarsAttrMorph.prototype.setContent;

  proto._deprecateEscapedStyle = function EmberAttrMorph_deprecateEscapedStyle(value) {
    _emberMetalCore["default"].warn(styleWarning, (function (name, value, escaped) {
      // SafeString
      if (value && value.toHTML) {
        return true;
      }

      if (name !== "style") {
        return true;
      }

      return !escaped;
    })(this.attrName, value, this.escaped));
  };

  proto.setContent = function EmberAttrMorph_setContent(value) {
    this._deprecateEscapedStyle(value);
    this.HTMLBarsAttrMorph$setContent(value);
  };

  exports["default"] = EmberAttrMorph;
});
enifed("ember-htmlbars/morphs/morph", ["exports", "dom-helper", "ember-metal/platform/create"], function (exports, _domHelper, _emberMetalPlatformCreate) {

  var HTMLBarsMorph = _domHelper["default"].prototype.MorphClass;
  var guid = 1;

  function EmberMorph(DOMHelper, contextualElement) {
    this.HTMLBarsMorph$constructor(DOMHelper, contextualElement);

    this.emberView = null;
    this.emberToDestroy = null;
    this.streamUnsubscribers = null;
    this.guid = guid++;

    // A component can become dirty either because one of its
    // attributes changed, or because it was re-rendered. If any part
    // of the component's template changes through observation, it has
    // re-rendered from the perpsective of the programming model. This
    // flag is set to true whenever a component becomes dirty because
    // one of its attributes changed, which also triggers the attribute
    // update flag (didUpdateAttrs).
    this.shouldReceiveAttrs = false;
  }

  var proto = EmberMorph.prototype = (0, _emberMetalPlatformCreate["default"])(HTMLBarsMorph.prototype);
  proto.HTMLBarsMorph$constructor = HTMLBarsMorph;
  proto.HTMLBarsMorph$clear = HTMLBarsMorph.prototype.clear;

  proto.addDestruction = function (toDestroy) {
    this.emberToDestroy = this.emberToDestroy || [];
    this.emberToDestroy.push(toDestroy);
  };

  proto.cleanup = function () {
    var view;

    if (view = this.emberView) {
      if (!view.ownerView.isDestroyingSubtree) {
        view.ownerView.isDestroyingSubtree = true;
        if (view.parentView) {
          view.parentView.removeChild(view);
        }
      }
    }

    var toDestroy = this.emberToDestroy;
    if (toDestroy) {
      for (var i = 0, l = toDestroy.length; i < l; i++) {
        toDestroy[i].destroy();
      }

      this.emberToDestroy = null;
    }
  };

  proto.didRender = function (env, scope) {
    env.renderedNodes[this.guid] = true;
  };

  exports["default"] = EmberMorph;
});
enifed("ember-htmlbars/node-managers/component-node-manager", ["exports", "ember-metal/core", "ember-metal/merge", "ember-views/system/build-component-template", "ember-htmlbars/utils/lookup-component", "ember-htmlbars/hooks/get-cell-or-value", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/set_properties", "ember-views/compat/attrs-proxy", "htmlbars-util/safe-string", "ember-htmlbars/system/instrumentation-support", "ember-views/views/component", "ember-metal/streams/stream", "ember-metal/streams/utils", "ember-htmlbars/hooks/get-value"], function (exports, _emberMetalCore, _emberMetalMerge, _emberViewsSystemBuildComponentTemplate, _emberHtmlbarsUtilsLookupComponent, _emberHtmlbarsHooksGetCellOrValue, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalSet_properties, _emberViewsCompatAttrsProxy, _htmlbarsUtilSafeString, _emberHtmlbarsSystemInstrumentationSupport, _emberViewsViewsComponent, _emberMetalStreamsStream, _emberMetalStreamsUtils, _emberHtmlbarsHooksGetValue) {
  exports.handleLegacyRender = handleLegacyRender;
  exports.createComponent = createComponent;

  function ComponentNodeManager(component, isAngleBracket, scope, renderNode, attrs, block, expectElement) {
    this.component = component;
    this.isAngleBracket = isAngleBracket;
    this.scope = scope;
    this.renderNode = renderNode;
    this.attrs = attrs;
    this.block = block;
    this.expectElement = expectElement;
  }

  exports["default"] = ComponentNodeManager;

  ComponentNodeManager.create = function (renderNode, env, options) {
    var tagName = options.tagName;
    var params = options.params;
    var attrs = options.attrs;
    var parentView = options.parentView;
    var parentScope = options.parentScope;
    var isAngleBracket = options.isAngleBracket;
    var templates = options.templates;

    attrs = attrs || {};

    // Try to find the Component class and/or template for this component name in
    // the container.

    var _lookupComponent = (0, _emberHtmlbarsUtilsLookupComponent["default"])(env.container, tagName);

    var component = _lookupComponent.component;
    var layout = _lookupComponent.layout;

    _emberMetalCore["default"].assert("HTMLBars error: Could not find component named \"" + tagName + "\" (no component or template with that name was found)", function () {
      return component || layout;
    });

    component = component || _emberViewsViewsComponent["default"];

    var createOptions = { parentView: parentView };

    configureTagName(attrs, tagName, component, isAngleBracket, createOptions);

    // Map passed attributes (e.g. <my-component id="foo">) to component
    // properties ({ id: "foo" }).
    configureCreateOptions(attrs, createOptions);

    // If there is a controller on the scope, pluck it off and save it on the
    // component. This allows the component to target actions sent via
    // `sendAction` correctly.
    if (parentScope.locals.controller) {
      createOptions._controller = (0, _emberHtmlbarsHooksGetValue["default"])(parentScope.locals.controller);
    }

    // this flag is set when a block was provided so that components can see if
    // `this.get('template')` is truthy.  this is added for backwards compat only
    // and accessing `template` prop on a component will trigger a deprecation
    // 2.0TODO: remove
    if (templates["default"]) {
      createOptions._deprecatedFlagForBlockProvided = true;
    }

    // Instantiate the component
    component = createComponent(component, isAngleBracket, createOptions, renderNode, env, attrs);

    // If the component specifies its template via the `layout` or `template`
    // properties instead of using the template looked up in the container, get
    // them now that we have the component instance.
    var result = extractComponentTemplates(component, templates);
    layout = result.layout || layout;
    templates = result.templates || templates;

    extractPositionalParams(renderNode, component, params, attrs);

    var results = (0, _emberViewsSystemBuildComponentTemplate["default"])({ layout: layout, component: component, isAngleBracket: isAngleBracket }, attrs, { templates: templates, scope: parentScope });

    return new ComponentNodeManager(component, isAngleBracket, parentScope, renderNode, attrs, results.block, results.createdElement);
  };

  function extractPositionalParams(renderNode, component, params, attrs) {
    if (component.positionalParams) {
      (function () {
        // if the component is rendered via {{component}} helper, the first
        // element of `params` is the name of the component, so we need to
        // skip that when the positional parameters are constructed
        var paramsStartIndex = renderNode.state.isComponentHelper ? 1 : 0;
        var positionalParams = component.positionalParams;
        var isNamed = typeof positionalParams === "string";
        var paramsStream = undefined;

        if (isNamed) {
          paramsStream = new _emberMetalStreamsStream["default"](function () {
            return (0, _emberMetalStreamsUtils.readArray)(params.slice(paramsStartIndex));
          }, "params");

          attrs[positionalParams] = paramsStream;
        }

        for (var i = 0; i < positionalParams.length; i++) {
          var param = params[paramsStartIndex + i];
          if (isNamed) {
            paramsStream.addDependency(param);
          } else {
            attrs[positionalParams[i]] = param;
          }
        }
      })();
    }
  }

  function extractComponentTemplates(component, _templates) {
    // Even though we looked up a layout from the container earlier, the
    // component may specify a `layout` property that overrides that.
    // The component may also provide a `template` property we should
    // respect (though this behavior is deprecated).
    var componentLayout = (0, _emberMetalProperty_get.get)(component, "layout");
    var hasBlock = _templates && _templates["default"];
    var layout = undefined,
        templates = undefined,
        componentTemplate = undefined;
    if (hasBlock) {
      componentTemplate = null;
    } else if (component.isComponent) {
      componentTemplate = (0, _emberMetalProperty_get.get)(component, "_template");
    } else {
      componentTemplate = (0, _emberMetalProperty_get.get)(component, "template");
    }

    if (componentLayout) {
      layout = componentLayout;
      templates = extractLegacyTemplate(_templates, componentTemplate);
    } else if (componentTemplate) {
      // If the component has a `template` but no `layout`, use the template
      // as the layout.
      layout = componentTemplate;
      templates = _templates;
      _emberMetalCore["default"].deprecate("Using deprecated `template` property on a Component.");
    }

    return { layout: layout, templates: templates };
  }

  // 2.0TODO: Remove legacy behavior
  function extractLegacyTemplate(_templates, componentTemplate) {
    var templates = undefined;

    // There is no block template provided but the component has a
    // `template` property.
    if ((!_templates || !_templates["default"]) && componentTemplate) {
      _emberMetalCore["default"].deprecate("Using deprecated `template` property on a Component.");
      templates = { "default": componentTemplate.raw };
    } else {
      templates = _templates;
    }

    return templates;
  }

  function configureTagName(attrs, tagName, component, isAngleBracket, createOptions) {
    if (isAngleBracket) {
      createOptions.tagName = tagName;
    } else if (attrs.tagName) {
      createOptions.tagName = (0, _emberHtmlbarsHooksGetValue["default"])(attrs.tagName);
    }
  }

  function configureCreateOptions(attrs, createOptions) {
    // Some attrs are special and need to be set as properties on the component
    // instance. Make sure we use getValue() to get them from `attrs` since
    // they are still streams.
    if (attrs.id) {
      createOptions.elementId = (0, _emberHtmlbarsHooksGetValue["default"])(attrs.id);
    }
    if (attrs._defaultTagName) {
      createOptions._defaultTagName = (0, _emberHtmlbarsHooksGetValue["default"])(attrs._defaultTagName);
    }
    if (attrs.viewName) {
      createOptions.viewName = (0, _emberHtmlbarsHooksGetValue["default"])(attrs.viewName);
    }
  }

  ComponentNodeManager.prototype.render = function (_env, visitor) {
    var component = this.component;
    var attrs = this.attrs;

    return (0, _emberHtmlbarsSystemInstrumentationSupport.instrument)(component, function () {
      var env = _env.childWithView(component);

      var snapshot = takeSnapshot(attrs);
      env.renderer.componentInitAttrs(this.component, snapshot);
      env.renderer.componentWillRender(component);
      env.renderedViews.push(component.elementId);

      if (this.block) {
        this.block(env, [], undefined, this.renderNode, this.scope, visitor);
      }

      var element = this.expectElement && this.renderNode.firstNode;

      handleLegacyRender(component, element);
      env.renderer.didCreateElement(component, element);
      env.renderer.willInsertElement(component, element); // 2.0TODO remove legacy hook

      env.lifecycleHooks.push({ type: "didInsertElement", view: component });
    }, this);
  };

  function handleLegacyRender(component, element) {
    if (!component.render) {
      return;
    }

    _emberMetalCore["default"].assert("Legacy render functions are not supported with angle-bracket components", !component._isAngleBracket);

    var content, node, lastChildIndex;
    var buffer = [];
    var renderNode = component._renderNode;
    component.render(buffer);
    content = buffer.join("");
    if (element) {
      lastChildIndex = renderNode.childNodes.length - 1;
      node = renderNode.childNodes[lastChildIndex];
    } else {
      node = renderNode;
    }
    node.setContent(new _htmlbarsUtilSafeString["default"](content));
  }

  ComponentNodeManager.prototype.rerender = function (_env, attrs, visitor) {
    var component = this.component;

    return (0, _emberHtmlbarsSystemInstrumentationSupport.instrument)(component, function () {
      var env = _env.childWithView(component);

      var snapshot = takeSnapshot(attrs);

      if (component._renderNode.shouldReceiveAttrs) {
        env.renderer.componentUpdateAttrs(component, snapshot);

        if (!component._isAngleBracket) {
          (0, _emberMetalSet_properties["default"])(component, mergeBindings({}, shadowedAttrs(component, snapshot)));
        }

        component._renderNode.shouldReceiveAttrs = false;
      }

      // Notify component that it has become dirty and is about to change.
      env.renderer.componentWillUpdate(component, snapshot);
      env.renderer.componentWillRender(component);

      env.renderedViews.push(component.elementId);

      if (this.block) {
        this.block(env, [], undefined, this.renderNode, this.scope, visitor);
      }

      env.lifecycleHooks.push({ type: "didUpdate", view: component });

      return env;
    }, this);
  };

  ComponentNodeManager.prototype.destroy = function () {
    var component = this.component;

    // Clear component's render node. Normally this gets cleared
    // during view destruction, but in this case we're re-assigning the
    // node to a different view and it will get cleaned up automatically.
    component._renderNode = null;
    component.destroy();
  };

  function createComponent(_component, isAngleBracket, _props, renderNode, env) {
    var attrs = arguments[5] === undefined ? {} : arguments[5];

    var props = (0, _emberMetalMerge.assign)({}, _props);

    if (!isAngleBracket) {
      var hasSuppliedController = ("controller" in attrs); // 2.0TODO remove
      _emberMetalCore["default"].deprecate("controller= is deprecated", !hasSuppliedController);

      var snapshot = takeSnapshot(attrs);
      props.attrs = snapshot;

      var proto = _component.proto();
      mergeBindings(props, shadowedAttrs(proto, snapshot));
    } else {
      props._isAngleBracket = true;
    }

    props.renderer = props.parentView ? props.parentView.renderer : env.container.lookup("renderer:-dom");
    props._viewRegistry = props.parentView ? props.parentView._viewRegistry : env.container.lookup("-view-registry:main");

    var component = _component.create(props);

    // for the fallback case
    component.container = component.container || env.container;

    if (props.parentView) {
      props.parentView.appendChild(component);

      if (props.viewName) {
        (0, _emberMetalProperty_set.set)(props.parentView, props.viewName, component);
      }
    }

    component._renderNode = renderNode;
    renderNode.emberView = component;
    return component;
  }

  function shadowedAttrs(target, attrs) {
    var shadowed = {};

    // For backwards compatibility, set the component property
    // if it has an attr with that name. Undefined attributes
    // are handled on demand via the `unknownProperty` hook.
    for (var attr in attrs) {
      if (attr in target) {
        // TODO: Should we issue a deprecation here?
        //Ember.deprecate(deprecation(attr));
        shadowed[attr] = attrs[attr];
      }
    }

    return shadowed;
  }

  function takeSnapshot(attrs) {
    var hash = {};

    for (var prop in attrs) {
      hash[prop] = (0, _emberHtmlbarsHooksGetCellOrValue["default"])(attrs[prop]);
    }

    return hash;
  }

  function mergeBindings(target, attrs) {
    for (var prop in attrs) {
      if (!attrs.hasOwnProperty(prop)) {
        continue;
      }
      // when `attrs` is an actual value being set in the
      // attrs hash (`{{foo-bar attrs="blah"}}`) we cannot
      // set `"blah"` to the root of the target because
      // that would replace all attrs with `attrs.attrs`
      if (prop === "attrs") {
        _emberMetalCore["default"].warn("Invoking a component with a hash attribute named `attrs` is not supported. Please refactor usage of " + target + " to avoid passing `attrs` as a hash parameter.");
        continue;
      }
      var value = attrs[prop];

      if (value && value[_emberViewsCompatAttrsProxy.MUTABLE_CELL]) {
        target[prop] = value.value;
      } else {
        target[prop] = value;
      }
    }

    return target;
  }
});

// In theory this should come through the env, but it should
// be safe to import this until we make the hook system public
// and it gets actively used in addons or other downstream
// libraries.
enifed("ember-htmlbars/node-managers/view-node-manager", ["exports", "ember-metal/merge", "ember-metal/core", "ember-views/system/build-component-template", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/set_properties", "ember-views/views/view", "ember-views/compat/attrs-proxy", "ember-htmlbars/hooks/get-cell-or-value", "ember-htmlbars/system/instrumentation-support", "ember-htmlbars/node-managers/component-node-manager", "ember-htmlbars/hooks/get-value"], function (exports, _emberMetalMerge, _emberMetalCore, _emberViewsSystemBuildComponentTemplate, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalSet_properties, _emberViewsViewsView, _emberViewsCompatAttrsProxy, _emberHtmlbarsHooksGetCellOrValue, _emberHtmlbarsSystemInstrumentationSupport, _emberHtmlbarsNodeManagersComponentNodeManager, _emberHtmlbarsHooksGetValue) {
  exports.createOrUpdateComponent = createOrUpdateComponent;

  function ViewNodeManager(component, scope, renderNode, block, expectElement) {
    this.component = component;
    this.scope = scope;
    this.renderNode = renderNode;
    this.block = block;
    this.expectElement = expectElement;
  }

  exports["default"] = ViewNodeManager;

  ViewNodeManager.create = function (renderNode, env, attrs, found, parentView, path, contentScope, contentTemplate) {
    _emberMetalCore["default"].assert("HTMLBars error: Could not find component named \"" + path + "\" (no component or template with that name was found)", function () {
      if (path) {
        return found.component || found.layout;
      } else {
        return found.component || found.layout || contentTemplate;
      }
    });

    var component;
    var componentInfo = { layout: found.layout };

    if (found.component) {
      var options = { parentView: parentView };

      if (attrs && attrs.id) {
        options.elementId = (0, _emberHtmlbarsHooksGetValue["default"])(attrs.id);
      }
      if (attrs && attrs.tagName) {
        options.tagName = (0, _emberHtmlbarsHooksGetValue["default"])(attrs.tagName);
      }
      if (attrs && attrs._defaultTagName) {
        options._defaultTagName = (0, _emberHtmlbarsHooksGetValue["default"])(attrs._defaultTagName);
      }
      if (attrs && attrs.viewName) {
        options.viewName = (0, _emberHtmlbarsHooksGetValue["default"])(attrs.viewName);
      }

      if (found.component.create && contentScope && contentScope.self) {
        options._context = (0, _emberHtmlbarsHooksGetValue["default"])(contentScope.self);
      }

      if (found.self) {
        options._context = (0, _emberHtmlbarsHooksGetValue["default"])(found.self);
      }

      component = componentInfo.component = createOrUpdateComponent(found.component, options, found.createOptions, renderNode, env, attrs);

      var layout = (0, _emberMetalProperty_get.get)(component, "layout");
      if (layout) {
        componentInfo.layout = layout;
        if (!contentTemplate) {
          var template = getTemplate(component);

          if (template) {
            _emberMetalCore["default"].deprecate("Using deprecated `template` property on a " + (component.isView ? "View" : "Component") + ".");
            contentTemplate = template.raw;
          }
        }
      } else {
        componentInfo.layout = getTemplate(component) || componentInfo.layout;
      }

      renderNode.emberView = component;
    }

    _emberMetalCore["default"].assert("BUG: ViewNodeManager.create can take a scope or a self, but not both", !(contentScope && found.self));

    var results = (0, _emberViewsSystemBuildComponentTemplate["default"])(componentInfo, attrs, {
      templates: { "default": contentTemplate },
      scope: contentScope,
      self: found.self
    });

    return new ViewNodeManager(component, contentScope, renderNode, results.block, results.createdElement);
  };

  ViewNodeManager.prototype.render = function (env, attrs, visitor) {
    var component = this.component;

    return (0, _emberHtmlbarsSystemInstrumentationSupport.instrument)(component, function () {

      var newEnv = env;
      if (component) {
        newEnv = env.childWithView(component);
      }

      if (component) {
        var snapshot = takeSnapshot(attrs);
        env.renderer.setAttrs(this.component, snapshot);
        env.renderer.willRender(component);
        env.renderedViews.push(component.elementId);
      }

      if (this.block) {
        this.block(newEnv, [], undefined, this.renderNode, this.scope, visitor);
      }

      if (component) {
        var element = this.expectElement && this.renderNode.firstNode;
        (0, _emberHtmlbarsNodeManagersComponentNodeManager.handleLegacyRender)(component, element);

        env.renderer.didCreateElement(component, element); // 2.0TODO: Remove legacy hooks.
        env.renderer.willInsertElement(component, element);
        env.lifecycleHooks.push({ type: "didInsertElement", view: component });
      }
    }, this);
  };

  ViewNodeManager.prototype.rerender = function (env, attrs, visitor) {
    var component = this.component;

    return (0, _emberHtmlbarsSystemInstrumentationSupport.instrument)(component, function () {
      var newEnv = env;
      if (component) {
        newEnv = env.childWithView(component);

        var snapshot = takeSnapshot(attrs);

        // Notify component that it has become dirty and is about to change.
        env.renderer.willUpdate(component, snapshot);

        if (component._renderNode.shouldReceiveAttrs) {
          env.renderer.updateAttrs(component, snapshot);
          (0, _emberMetalSet_properties["default"])(component, mergeBindings({}, shadowedAttrs(component, snapshot)));
          component._renderNode.shouldReceiveAttrs = false;
        }

        env.renderer.willRender(component);

        env.renderedViews.push(component.elementId);
      }
      if (this.block) {
        this.block(newEnv, [], undefined, this.renderNode, this.scope, visitor);
      }

      return newEnv;
    }, this);
  };

  ViewNodeManager.prototype.destroy = function () {
    this.component.destroy();
  };

  function getTemplate(componentOrView) {
    return componentOrView.isComponent ? (0, _emberMetalProperty_get.get)(componentOrView, "_template") : (0, _emberMetalProperty_get.get)(componentOrView, "template");
  }

  function createOrUpdateComponent(component, options, createOptions, renderNode, env) {
    var attrs = arguments[5] === undefined ? {} : arguments[5];

    var snapshot = takeSnapshot(attrs);
    var props = (0, _emberMetalMerge["default"])({}, options);
    var defaultController = _emberViewsViewsView["default"].proto().controller;
    var hasSuppliedController = "controller" in attrs || "controller" in props;

    props.attrs = snapshot;
    if (component.create) {
      var proto = component.proto();

      if (createOptions) {
        (0, _emberMetalMerge["default"])(props, createOptions);
      }

      mergeBindings(props, shadowedAttrs(proto, snapshot));
      props.container = options.parentView ? options.parentView.container : env.container;
      props.renderer = options.parentView ? options.parentView.renderer : props.container && props.container.lookup("renderer:-dom");
      props._viewRegistry = options.parentView ? options.parentView._viewRegistry : props.container && props.container.lookup("-view-registry:main");

      if (proto.controller !== defaultController || hasSuppliedController) {
        delete props._context;
      }

      component = component.create(props);
    } else {
      mergeBindings(props, shadowedAttrs(component, snapshot));
      (0, _emberMetalSet_properties["default"])(component, props);
    }

    if (options.parentView) {
      options.parentView.appendChild(component);

      if (options.viewName) {
        (0, _emberMetalProperty_set.set)(options.parentView, options.viewName, component);
      }
    }

    component._renderNode = renderNode;
    renderNode.emberView = component;
    return component;
  }

  function shadowedAttrs(target, attrs) {
    var shadowed = {};

    // For backwards compatibility, set the component property
    // if it has an attr with that name. Undefined attributes
    // are handled on demand via the `unknownProperty` hook.
    for (var attr in attrs) {
      if (attr in target) {
        // TODO: Should we issue a deprecation here?
        //Ember.deprecate(deprecation(attr));
        shadowed[attr] = attrs[attr];
      }
    }

    return shadowed;
  }

  function takeSnapshot(attrs) {
    var hash = {};

    for (var prop in attrs) {
      hash[prop] = (0, _emberHtmlbarsHooksGetCellOrValue["default"])(attrs[prop]);
    }

    return hash;
  }

  function mergeBindings(target, attrs) {
    for (var prop in attrs) {
      if (!attrs.hasOwnProperty(prop)) {
        continue;
      }
      // when `attrs` is an actual value being set in the
      // attrs hash (`{{foo-bar attrs="blah"}}`) we cannot
      // set `"blah"` to the root of the target because
      // that would replace all attrs with `attrs.attrs`
      if (prop === "attrs") {
        _emberMetalCore["default"].warn("Invoking a component with a hash attribute named `attrs` is not supported. Please refactor usage of " + target + " to avoid passing `attrs` as a hash parameter.");
        continue;
      }
      var value = attrs[prop];

      if (value && value[_emberViewsCompatAttrsProxy.MUTABLE_CELL]) {
        target[prop] = value.value;
      } else {
        target[prop] = value;
      }
    }

    return target;
  }
});

// In theory this should come through the env, but it should
// be safe to import this until we make the hook system public
// and it gets actively used in addons or other downstream
// libraries.
enifed("ember-htmlbars/streams/built-in-helper", ["exports", "ember-metal/streams/stream", "ember-metal/platform/create", "ember-metal/merge", "ember-htmlbars/streams/utils"], function (exports, _emberMetalStreamsStream, _emberMetalPlatformCreate, _emberMetalMerge, _emberHtmlbarsStreamsUtils) {
  exports["default"] = BuiltInHelperStream;

  function BuiltInHelperStream(helper, params, hash, templates, env, scope, context, label) {
    this.init(label);
    this.helper = helper;
    this.params = params;
    this.templates = templates;
    this.env = env;
    this.scope = scope;
    this.hash = hash;
    this.context = context;
  }

  BuiltInHelperStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  (0, _emberMetalMerge["default"])(BuiltInHelperStream.prototype, {
    compute: function () {
      // Using call and undefined is probably not needed, these are only internal
      return this.helper.call(this.context, (0, _emberHtmlbarsStreamsUtils.getArrayValues)(this.params), (0, _emberHtmlbarsStreamsUtils.getHashValues)(this.hash), this.templates, this.env, this.scope);
    }
  });
});
enifed("ember-htmlbars/streams/compat-helper", ["exports", "ember-metal/streams/stream", "ember-metal/platform/create", "ember-metal/merge"], function (exports, _emberMetalStreamsStream, _emberMetalPlatformCreate, _emberMetalMerge) {
  exports["default"] = CompatHelperStream;

  function CompatHelperStream(helper, params, hash, templates, env, scope, label) {
    this.init(label);
    this.helper = helper.helperFunction;
    this.params = params;
    this.templates = templates;
    this.env = env;
    this.scope = scope;
    this.hash = hash;
  }

  CompatHelperStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  (0, _emberMetalMerge["default"])(CompatHelperStream.prototype, {
    compute: function () {
      // Using call and undefined is probably not needed, these are only internal
      return this.helper.call(undefined, this.params, this.hash, this.templates, this.env, this.scope);
    }
  });
});
enifed("ember-htmlbars/streams/helper-factory", ["exports", "ember-metal/streams/stream", "ember-metal/platform/create", "ember-metal/merge", "ember-htmlbars/streams/utils"], function (exports, _emberMetalStreamsStream, _emberMetalPlatformCreate, _emberMetalMerge, _emberHtmlbarsStreamsUtils) {
  exports["default"] = HelperFactoryStream;

  function HelperFactoryStream(helperFactory, params, hash, label) {
    this.init(label);
    this.helperFactory = helperFactory;
    this.params = params;
    this.hash = hash;
    this.linkable = true;
    this.helper = null;
  }

  HelperFactoryStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  (0, _emberMetalMerge["default"])(HelperFactoryStream.prototype, {
    compute: function () {
      if (!this.helper) {
        this.helper = this.helperFactory.create({ _stream: this });
      }
      return this.helper.compute((0, _emberHtmlbarsStreamsUtils.getArrayValues)(this.params), (0, _emberHtmlbarsStreamsUtils.getHashValues)(this.hash));
    },
    deactivate: function () {
      this.super$deactivate();
      if (this.helper) {
        this.helper.destroy();
        this.helper = null;
      }
    },
    super$deactivate: HelperFactoryStream.prototype.deactivate
  });
});
enifed("ember-htmlbars/streams/helper-instance", ["exports", "ember-metal/streams/stream", "ember-metal/platform/create", "ember-metal/merge", "ember-htmlbars/streams/utils"], function (exports, _emberMetalStreamsStream, _emberMetalPlatformCreate, _emberMetalMerge, _emberHtmlbarsStreamsUtils) {
  exports["default"] = HelperInstanceStream;

  function HelperInstanceStream(helper, params, hash, label) {
    this.init(label);
    this.helper = helper;
    this.params = params;
    this.hash = hash;
    this.linkable = true;
  }

  HelperInstanceStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  (0, _emberMetalMerge["default"])(HelperInstanceStream.prototype, {
    compute: function () {
      return this.helper.compute((0, _emberHtmlbarsStreamsUtils.getArrayValues)(this.params), (0, _emberHtmlbarsStreamsUtils.getHashValues)(this.hash));
    }
  });
});
enifed("ember-htmlbars/streams/utils", ["exports", "ember-htmlbars/hooks/get-value"], function (exports, _emberHtmlbarsHooksGetValue) {
  exports.getArrayValues = getArrayValues;
  exports.getHashValues = getHashValues;

  // We don't want to leak mutable cells into helpers, which
  // are pure functions that can only work with values.

  function getArrayValues(params) {
    var out = [];
    for (var i = 0, l = params.length; i < l; i++) {
      out.push((0, _emberHtmlbarsHooksGetValue["default"])(params[i]));
    }

    return out;
  }

  function getHashValues(hash) {
    var out = {};
    for (var prop in hash) {
      out[prop] = (0, _emberHtmlbarsHooksGetValue["default"])(hash[prop]);
    }

    return out;
  }
});
enifed("ember-htmlbars/system/append-templated-view", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-views/views/view"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberViewsViewsView) {
  exports["default"] = appendTemplatedView;

  function appendTemplatedView(parentView, morph, viewClassOrInstance, props) {
    var viewProto;
    if (_emberViewsViewsView["default"].detectInstance(viewClassOrInstance)) {
      viewProto = viewClassOrInstance;
    } else {
      viewProto = viewClassOrInstance.proto();
    }

    _emberMetalCore["default"].assert("You cannot provide a template block if you also specified a templateName", !props.template || !(0, _emberMetalProperty_get.get)(props, "templateName") && !(0, _emberMetalProperty_get.get)(viewProto, "templateName"));

    // We only want to override the `_context` computed property if there is
    // no specified controller. See View#_context for more information.

    var noControllerInProto = !viewProto.controller;
    if (viewProto.controller && viewProto.controller.isDescriptor) {
      noControllerInProto = true;
    }
    if (noControllerInProto && !viewProto.controllerBinding && !props.controller && !props.controllerBinding) {
      props._context = (0, _emberMetalProperty_get.get)(parentView, "context"); // TODO: is this right?!
    }

    props._morph = morph;

    return parentView.appendChild(viewClassOrInstance, props);
  }
});
/**
@module ember
@submodule ember-htmlbars
*/

// Ember.assert
enifed("ember-htmlbars/system/bootstrap", ["exports", "ember-metal/core", "ember-views/component_lookup", "ember-views/system/jquery", "ember-metal/error", "ember-runtime/system/lazy_load", "ember-template-compiler/system/compile", "ember-metal/environment"], function (exports, _emberMetalCore, _emberViewsComponent_lookup, _emberViewsSystemJquery, _emberMetalError, _emberRuntimeSystemLazy_load, _emberTemplateCompilerSystemCompile, _emberMetalEnvironment) {

  /**
  @module ember
  @submodule ember-handlebars
  */

  /**
    Find templates stored in the head tag as script tags and make them available
    to `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run
    as as jQuery DOM-ready callback.
  
    Script tags with `text/x-handlebars` will be compiled
    with Ember's Handlebars and are suitable for use as a view's template.
    Those with type `text/x-raw-handlebars` will be compiled with regular
    Handlebars and are suitable for use in views' computed properties.
  
    @private
    @method bootstrap
    @for Ember.Handlebars
    @static
    @param ctx
  */
  function bootstrap(ctx) {
    var selectors = "script[type=\"text/x-handlebars\"], script[type=\"text/x-raw-handlebars\"]";

    (0, _emberViewsSystemJquery["default"])(selectors, ctx).each(function () {
      // Get a reference to the script tag
      var script = (0, _emberViewsSystemJquery["default"])(this);

      // Get the name of the script, used by Ember.View's templateName property.
      // First look for data-template-name attribute, then fall back to its
      // id if no name is found.
      var templateName = script.attr("data-template-name") || script.attr("id") || "application";
      var template, compile;

      if (script.attr("type") === "text/x-raw-handlebars") {
        compile = _emberViewsSystemJquery["default"].proxy(Handlebars.compile, Handlebars);
        template = compile(script.html());
      } else {
        template = (0, _emberTemplateCompilerSystemCompile["default"])(script.html(), {
          moduleName: templateName
        });
      }

      // Check if template of same name already exists
      if (_emberMetalCore["default"].TEMPLATES[templateName] !== undefined) {
        throw new _emberMetalError["default"]("Template named \"" + templateName + "\" already exists.");
      }

      // For templates which have a name, we save them and then remove them from the DOM
      _emberMetalCore["default"].TEMPLATES[templateName] = template;

      // Remove script tag from DOM
      script.remove();
    });
  }

  function _bootstrap() {
    bootstrap((0, _emberViewsSystemJquery["default"])(document));
  }

  function registerComponentLookup(app) {
    app.registry.register("component-lookup:main", _emberViewsComponent_lookup["default"]);
  }

  /*
    We tie this to application.load to ensure that we've at least
    attempted to bootstrap at the point that the application is loaded.
  
    We also tie this to document ready since we're guaranteed that all
    the inline templates are present at this point.
  
    There's no harm to running this twice, since we remove the templates
    from the DOM after processing.
  */

  (0, _emberRuntimeSystemLazy_load.onLoad)("Ember.Application", function (Application) {
    Application.initializer({
      name: "domTemplates",
      initialize: _emberMetalEnvironment["default"].hasDOM ? _bootstrap : function () {}
    });

    Application.instanceInitializer({
      name: "registerComponentLookup",
      initialize: registerComponentLookup
    });
  });

  exports["default"] = bootstrap;
});
/*globals Handlebars */

/**
@module ember
@submodule ember-htmlbars
*/
enifed('ember-htmlbars/system/discover-known-helpers', ['exports', 'ember-metal/core', 'ember-metal/dictionary', 'ember-metal/keys'], function (exports, _emberMetalCore, _emberMetalDictionary, _emberMetalKeys) {
  exports["default"] = discoverKnownHelpers;

  function discoverKnownHelpers(container) {
    var registry = container && container._registry;
    var helpers = (0, _emberMetalDictionary["default"])(null);

    if (_emberMetalCore["default"].FEATURES.isEnabled('ember-htmlbars-dashless-helpers')) {
      if (!registry) {
        return helpers;
      }

      var known = registry.knownForType('helper');
      var knownContainerKeys = (0, _emberMetalKeys["default"])(known);

      for (var index = 0, _length = knownContainerKeys.length; index < _length; index++) {
        var fullName = knownContainerKeys[index];
        var _name = fullName.slice(7); // remove `helper:` from fullName

        helpers[_name] = true;
      }
    }

    return helpers;
  }
});
enifed("ember-htmlbars/system/dom-helper", ["exports", "dom-helper", "ember-htmlbars/morphs/morph", "ember-htmlbars/morphs/attr-morph", "ember-metal/platform/create"], function (exports, _domHelper, _emberHtmlbarsMorphsMorph, _emberHtmlbarsMorphsAttrMorph, _emberMetalPlatformCreate) {

  function EmberDOMHelper(_document) {
    _domHelper["default"].call(this, _document);
  }

  var proto = EmberDOMHelper.prototype = (0, _emberMetalPlatformCreate["default"])(_domHelper["default"].prototype);
  proto.MorphClass = _emberHtmlbarsMorphsMorph["default"];
  proto.AttrMorphClass = _emberHtmlbarsMorphsAttrMorph["default"];

  exports["default"] = EmberDOMHelper;
});
enifed("ember-htmlbars/system/helper", ["exports"], function (exports) {
  /**
  @module ember
  @submodule ember-htmlbars
  */

  /**
    @class Helper
    @namespace Ember.HTMLBars
    @private
  */
  function Helper(helper) {
    this.helperFunction = helper;

    this.isHelper = true;
    this.isHTMLBars = true;
  }

  exports["default"] = Helper;
});
enifed('ember-htmlbars/system/instrumentation-support', ['exports', 'ember-metal/instrumentation'], function (exports, _emberMetalInstrumentation) {
  exports.instrument = instrument;

  /**
    Provides instrumentation for node managers.
  
    Wrap your node manager's render and re-render methods
    with this function.
  
    @param {Object} component Component or View instance (optional)
    @param {Function} callback The function to instrument
    @param {Object} context The context to call the function with
    @return {Object} Return value from the invoked callback
    @private
  */

  function instrument(component, callback, context) {
    var instrumentName, val, details, end;
    // Only instrument if there's at least one subscriber.
    if (_emberMetalInstrumentation.subscribers.length) {
      if (component) {
        instrumentName = component.instrumentName;
      } else {
        instrumentName = 'node';
      }
      details = {};
      if (component) {
        component.instrumentDetails(details);
      }
      end = (0, _emberMetalInstrumentation._instrumentStart)('render.' + instrumentName, function viewInstrumentDetails() {
        return details;
      });
      val = callback.call(context);
      if (end) {
        end();
      }
      return val;
    } else {
      return callback.call(context);
    }
  }
});
enifed("ember-htmlbars/system/invoke-helper", ["exports", "ember-htmlbars/streams/helper-instance", "ember-htmlbars/streams/helper-factory", "ember-htmlbars/streams/built-in-helper", "ember-htmlbars/streams/compat-helper"], function (exports, _emberHtmlbarsStreamsHelperInstance, _emberHtmlbarsStreamsHelperFactory, _emberHtmlbarsStreamsBuiltInHelper, _emberHtmlbarsStreamsCompatHelper) {
  exports.buildHelperStream = buildHelperStream;

  function buildHelperStream(helper, params, hash, templates, env, scope, context, label) {
    Ember.assert("Helpers may not be used in the block form, for example {{#my-helper}}{{/my-helper}}. Please use a component, or alternatively use the helper in combination with a built-in Ember helper, for example {{#if (my-helper)}}{{/if}}.", !helper.isHelperInstance || !helper.isHelperFactory && !templates.template.meta);
    if (helper.isHelperFactory) {
      return new _emberHtmlbarsStreamsHelperFactory["default"](helper, params, hash, label);
    } else if (helper.isHelperInstance) {
      return new _emberHtmlbarsStreamsHelperInstance["default"](helper, params, hash, label);
    } else if (helper.helperFunction) {
      return new _emberHtmlbarsStreamsCompatHelper["default"](helper, params, hash, templates, env, scope, label);
    } else {
      return new _emberHtmlbarsStreamsBuiltInHelper["default"](helper, params, hash, templates, env, scope, context, label);
    }
  }
});
enifed("ember-htmlbars/system/lookup-helper", ["exports", "ember-metal/core", "ember-metal/cache", "ember-htmlbars/compat/helper"], function (exports, _emberMetalCore, _emberMetalCache, _emberHtmlbarsCompatHelper) {
  exports.validateLazyHelperName = validateLazyHelperName;
  exports.findHelper = findHelper;
  exports["default"] = lookupHelper;
  var CONTAINS_DASH_CACHE = new _emberMetalCache["default"](1000, function (key) {
    return key.indexOf("-") !== -1;
  });

  exports.CONTAINS_DASH_CACHE = CONTAINS_DASH_CACHE;

  function validateLazyHelperName(helperName, container, keywords, knownHelpers) {
    if (!container || helperName in keywords) {
      return false;
    }

    if (knownHelpers[helperName] || CONTAINS_DASH_CACHE.get(helperName)) {
      return true;
    }
  }

  function isLegacyBareHelper(helper) {
    return helper && (!helper.isHelperFactory && !helper.isHelperInstance && !helper.isHTMLBars);
  }

  /**
    Used to lookup/resolve handlebars helpers. The lookup order is:
  
    * Look for a registered helper
    * If a dash exists in the name:
      * Look for a helper registed in the container
      * Use Ember.ComponentLookup to find an Ember.Component that resolves
        to the given name
  
    @private
    @method resolveHelper
    @param {String} name the name of the helper to lookup
    @return {Handlebars Helper}
  */

  function findHelper(name, view, env) {
    var helper = env.helpers[name];

    if (!helper) {
      var container = env.container;
      if (validateLazyHelperName(name, container, env.hooks.keywords, env.knownHelpers)) {
        var helperName = "helper:" + name;
        if (container._registry.has(helperName)) {
          helper = container.lookupFactory(helperName);
          if (isLegacyBareHelper(helper)) {
            _emberMetalCore["default"].deprecate("The helper \"" + name + "\" is a deprecated bare function helper. Please use Ember.Helper.build to wrap helper functions.");
            helper = new _emberHtmlbarsCompatHelper["default"](helper);
          }
        }
      }
    }

    return helper;
  }

  function lookupHelper(name, view, env) {
    var helper = findHelper(name, view, env);

    _emberMetalCore["default"].assert("A helper named '" + name + "' could not be found", !!helper);

    return helper;
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/system/make-view-helper", ["exports"], function (exports) {
  exports["default"] = makeViewHelper;
  /**
  @module ember
  @submodule ember-htmlbars
  */

  /**
    Returns a helper function that renders the provided ViewClass.
  
    Used internally by Ember.Handlebars.helper and other methods
    involving helper/component registration.
  
    @private
    @method makeViewHelper
    @param {Function} ViewClass view class constructor
    @since 1.2.0
  */

  function makeViewHelper(ViewClass) {
    return {
      isLegacyViewHelper: true,
      isHTMLBars: true,
      viewClass: ViewClass
    };
  }
});
enifed("ember-htmlbars/system/make_bound_helper", ["exports", "ember-htmlbars/helper"], function (exports, _emberHtmlbarsHelper) {
  exports["default"] = makeBoundHelper;

  /**
    Create a bound helper. Accepts a function that receives the ordered and hash parameters
    from the template. If a bound property was provided in the template it will be resolved to its
    value and any changes to the bound property cause the helper function to be re-run with the updated
    values.
  
    * `params` - An array of resolved ordered parameters.
    * `hash` - An object containing the hash parameters.
  
    For example:
  
    * With an unquoted ordered parameter:
  
      ```javascript
      {{x-capitalize foo}}
      ```
  
      Assuming `foo` was set to `"bar"`, the bound helper would receive `["bar"]` as its first argument, and
      an empty hash as its second.
  
    * With a quoted ordered parameter:
  
      ```javascript
      {{x-capitalize "foo"}}
      ```
  
      The bound helper would receive `["foo"]` as its first argument, and an empty hash as its second.
  
    * With an unquoted hash parameter:
  
      ```javascript
      {{x-repeat "foo" count=repeatCount}}
      ```
  
      Assuming that `repeatCount` resolved to 2, the bound helper would receive `["foo"]` as its first argument,
      and { count: 2 } as its second.
  
    @private
    @method makeBoundHelper
    @for Ember.HTMLBars
    @param {Function} fn
    @since 1.10.0
  */

  function makeBoundHelper(fn) {
    return (0, _emberHtmlbarsHelper.helper)(fn);
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-htmlbars/system/render-env", ["exports", "ember-htmlbars/env", "ember-htmlbars/system/discover-known-helpers"], function (exports, _emberHtmlbarsEnv, _emberHtmlbarsSystemDiscoverKnownHelpers) {
  exports["default"] = RenderEnv;

  function RenderEnv(options) {
    this.lifecycleHooks = options.lifecycleHooks || [];
    this.renderedViews = options.renderedViews || [];
    this.renderedNodes = options.renderedNodes || {};
    this.hasParentOutlet = options.hasParentOutlet || false;

    this.view = options.view;
    this.outletState = options.outletState;
    this.container = options.container;
    this.renderer = options.renderer;
    this.dom = options.dom;
    this.knownHelpers = options.knownHelpers || (0, _emberHtmlbarsSystemDiscoverKnownHelpers["default"])(options.container);

    this.hooks = _emberHtmlbarsEnv["default"].hooks;
    this.helpers = _emberHtmlbarsEnv["default"].helpers;
    this.useFragmentCache = _emberHtmlbarsEnv["default"].useFragmentCache;
  }

  RenderEnv.build = function (view) {
    return new RenderEnv({
      view: view,
      outletState: view.outletState,
      container: view.container,
      renderer: view.renderer,
      dom: view.renderer._dom
    });
  };

  RenderEnv.prototype.childWithView = function (view) {
    return new RenderEnv({
      view: view,
      outletState: this.outletState,
      container: this.container,
      renderer: this.renderer,
      dom: this.dom,
      lifecycleHooks: this.lifecycleHooks,
      renderedViews: this.renderedViews,
      renderedNodes: this.renderedNodes,
      hasParentOutlet: this.hasParentOutlet,
      knownHelpers: this.knownHelpers
    });
  };

  RenderEnv.prototype.childWithOutletState = function (outletState) {
    var hasParentOutlet = arguments[1] === undefined ? this.hasParentOutlet : arguments[1];

    return new RenderEnv({
      view: this.view,
      outletState: outletState,
      container: this.container,
      renderer: this.renderer,
      dom: this.dom,
      lifecycleHooks: this.lifecycleHooks,
      renderedViews: this.renderedViews,
      renderedNodes: this.renderedNodes,
      hasParentOutlet: hasParentOutlet,
      knownHelpers: this.knownHelpers
    });
  };
});
enifed("ember-htmlbars/system/render-view", ["exports", "ember-htmlbars/node-managers/view-node-manager", "ember-htmlbars/system/render-env"], function (exports, _emberHtmlbarsNodeManagersViewNodeManager, _emberHtmlbarsSystemRenderEnv) {
  exports.renderHTMLBarsBlock = renderHTMLBarsBlock;

  // This function only gets called once per render of a "root view" (`appendTo`). Otherwise,
  // HTMLBars propagates the existing env and renders templates for a given render node.

  function renderHTMLBarsBlock(view, block, renderNode) {
    var env = _emberHtmlbarsSystemRenderEnv["default"].build(view);

    view.env = env;
    (0, _emberHtmlbarsNodeManagersViewNodeManager.createOrUpdateComponent)(view, {}, null, renderNode, env);
    var nodeManager = new _emberHtmlbarsNodeManagersViewNodeManager["default"](view, null, renderNode, block, view.tagName !== "");

    nodeManager.render(env, {});
  }
});
enifed("ember-htmlbars/templates/component", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield"]],
      locals: [],
      templates: []
    };
  })());
});
enifed("ember-htmlbars/templates/container-view", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    var child0 = (function () {
      return {
        meta: {},
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "view", [["get", "childView"]], []]],
        locals: ["childView"],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {},
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "view", [["get", "view._emptyView"]], ["_defaultTagName", ["get", "view._emptyViewTagName"]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {},
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "view._emptyView"]], [], 0, null]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "view.childViews"]], ["key", "elementId"], 0, 1]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
enifed("ember-htmlbars/templates/empty", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
enifed("ember-htmlbars/templates/legacy-each", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {},
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "legacy-yield", [["get", "item"]], []]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {},
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "view", [["get", "attrs.itemViewClass"]], ["_defaultTagName", ["get", "view._itemTagName"]], 0, null]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {},
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "legacy-yield", [["get", "item"]], []]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {},
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "attrs.itemViewClass"]], [], 0, 1]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {},
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "legacy-yield", [["get", "item"]], []]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {},
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "view", [["get", "attrs.itemViewClass"]], ["controller", ["get", "item"], "_defaultTagName", ["get", "view._itemTagName"]], 0, null]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {},
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "legacy-yield", [["get", "item"]], ["controller", ["get", "item"]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {},
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "attrs.itemViewClass"]], [], 0, 1]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {},
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "keyword"]], [], 0, 1]],
        locals: ["item"],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {},
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "view", [["get", "view._emptyView"]], ["_defaultTagName", ["get", "view._itemTagName"]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {},
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "view._emptyView"]], [], 0, null]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "view._arrangedContent"]], ["-legacy-keyword", ["get", "keyword"]], 0, 1]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
enifed("ember-htmlbars/templates/link-to-escaped", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "linkTitle"]],
      locals: [],
      templates: []
    };
  })());
});
enifed("ember-htmlbars/templates/link-to-unescaped", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "linkTitle"]],
      locals: [],
      templates: []
    };
  })());
});
enifed("ember-htmlbars/templates/link-to", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {},
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "linkTitle"]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {},
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "linkTitle"]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {},
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "attrs.escaped"]], [], 0, 1]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {},
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "yield"]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "linkTitle"]], [], 0, 1]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
enifed("ember-htmlbars/templates/select-optgroup", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    var child0 = (function () {
      return {
        meta: {},
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "view", [["get", "attrs.optionView"]], ["content", ["get", "item"], "selection", ["get", "attrs.selection"], "parentValue", ["get", "attrs.value"], "multiple", ["get", "attrs.multiple"], "optionLabelPath", ["get", "attrs.optionLabelPath"], "optionValuePath", ["get", "attrs.optionValuePath"]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "attrs.content"]], [], 0, null]],
      locals: [],
      templates: [child0]
    };
  })());
});
enifed("ember-htmlbars/templates/select-option", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "view.label"]],
      locals: [],
      templates: []
    };
  })());
});
enifed("ember-htmlbars/templates/select", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    var child0 = (function () {
      return {
        meta: {},
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "view.prompt"]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {},
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "view", [["get", "view.groupView"]], ["content", ["get", "group.content"], "label", ["get", "group.label"], "selection", ["get", "view.selection"], "value", ["get", "view.value"], "multiple", ["get", "view.multiple"], "optionLabelPath", ["get", "view.optionLabelPath"], "optionValuePath", ["get", "view.optionValuePath"], "optionView", ["get", "view.optionView"]]]],
          locals: ["group"],
          templates: []
        };
      })();
      return {
        meta: {},
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "view.groupedContent"]], [], 0, null]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {},
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "view", [["get", "view.optionView"]], ["content", ["get", "item"], "selection", ["get", "view.selection"], "parentValue", ["get", "view.value"], "multiple", ["get", "view.multiple"], "optionLabelPath", ["get", "view.optionLabelPath"], "optionValuePath", ["get", "view.optionValuePath"]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {},
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "view.content"]], [], 0, null]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "view.prompt"]], [], 0, null], ["block", "if", [["get", "view.optionGroupPath"]], [], 1, 2]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
enifed("ember-htmlbars/templates/top-level-view", ["exports", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemTemplate) {
  exports["default"] = (0, _emberTemplateCompilerSystemTemplate["default"])((function () {
    return {
      meta: {},
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet"]],
      locals: [],
      templates: []
    };
  })());
});
enifed("ember-htmlbars/utils/decode-each-key", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/utils"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalUtils) {
  exports["default"] = decodeEachKey;

  function identity(item) {
    var key = undefined;
    var type = typeof item;

    if (type === "string" || type === "number") {
      key = item;
    } else {
      key = (0, _emberMetalUtils.guidFor)(item);
    }

    return key;
  }

  function decodeEachKey(item, keyPath, index) {
    var key, deprecatedSpecialKey;

    switch (keyPath) {
      case "@index":
        key = index;
        break;
      case "@guid":
        deprecatedSpecialKey = "@guid";
        key = (0, _emberMetalUtils.guidFor)(item);
        break;
      case "@item":
        deprecatedSpecialKey = "@item";
        key = item;
        break;
      case "@identity":
        key = identity(item);
        break;
      default:
        if (keyPath) {
          key = (0, _emberMetalProperty_get.get)(item, keyPath);
        } else {
          key = identity(item);
        }
    }

    if (typeof key === "number") {
      key = String(key);
    }

    _emberMetalCore["default"].deprecate("Using '" + deprecatedSpecialKey + "' with the {{each}} helper, is deprecated. Switch to '@identity' or remove 'key=' from your template.", !deprecatedSpecialKey);

    return key;
  }
});
enifed('ember-htmlbars/utils/is-component', ['exports', 'ember-htmlbars/system/lookup-helper'], function (exports, _emberHtmlbarsSystemLookupHelper) {
  exports["default"] = isComponent;

  /*
   Given a path name, returns whether or not a component with that
   name was found in the container.
  */

  function isComponent(env, scope, path) {
    var container = env.container;
    if (!container) {
      return false;
    }
    if (!_emberHtmlbarsSystemLookupHelper.CONTAINS_DASH_CACHE.get(path)) {
      return false;
    }
    return container._registry.has('component:' + path) || container._registry.has('template:components/' + path);
  }
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed('ember-htmlbars/utils/lookup-component', ['exports'], function (exports) {
  exports["default"] = lookupComponent;

  function lookupComponent(container, tagName) {
    var componentLookup = container.lookup('component-lookup:main');

    return {
      component: componentLookup.componentFor(tagName, container),
      layout: componentLookup.layoutFor(tagName, container)
    };
  }
});
enifed("ember-htmlbars/utils/normalize-self", ["exports"], function (exports) {
  exports["default"] = normalizeSelf;

  function normalizeSelf(self) {
    if (self === undefined) {
      return null;
    } else {
      return self;
    }
  }
});
enifed("ember-htmlbars/utils/string", ["exports", "htmlbars-util", "ember-runtime/system/string"], function (exports, _htmlbarsUtil, _emberRuntimeSystemString) {

  /**
    Mark a string as safe for unescaped output with Handlebars. If you
    return HTML from a Handlebars helper, use this function to
    ensure Handlebars does not escape the HTML.
  
    ```javascript
    Ember.String.htmlSafe('<div>someString</div>')
    ```
  
    @method htmlSafe
    @for Ember.String
    @static
    @return {Handlebars.SafeString} a string that will not be html escaped by Handlebars
    @public
  */
  function htmlSafe(str) {
    if (str === null || str === undefined) {
      return "";
    }

    if (typeof str !== "string") {
      str = "" + str;
    }
    return new _htmlbarsUtil.SafeString(str);
  }

  _emberRuntimeSystemString["default"].htmlSafe = htmlSafe;
  if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {

    /**
      Mark a string as being safe for unescaped output with Handlebars.
       ```javascript
      '<div>someString</div>'.htmlSafe()
      ```
       See [Ember.String.htmlSafe](/api/classes/Ember.String.html#method_htmlSafe).
       @method htmlSafe
      @for String
      @return {Handlebars.SafeString} a string that will not be html escaped by Handlebars
      @public
    */
    String.prototype.htmlSafe = function () {
      return htmlSafe(this);
    };
  }

  exports.SafeString = _htmlbarsUtil.SafeString;
  exports.htmlSafe = htmlSafe;
  exports.escapeExpression = _htmlbarsUtil.escapeExpression;
});
/**
@module ember
@submodule ember-htmlbars
*/

// required so we can extend this object.
enifed("ember-htmlbars/utils/subscribe", ["exports", "ember-metal/streams/utils"], function (exports, _emberMetalStreamsUtils) {
  exports["default"] = subscribe;

  function subscribe(node, env, scope, stream) {
    if (!(0, _emberMetalStreamsUtils.isStream)(stream)) {
      return;
    }
    var component = scope.component;
    var unsubscribers = node.streamUnsubscribers = node.streamUnsubscribers || [];

    unsubscribers.push(stream.subscribe(function () {
      node.isDirty = true;

      // Whenever a render node directly inside a component becomes
      // dirty, we want to invoke the willRenderElement and
      // didRenderElement lifecycle hooks. From the perspective of the
      // programming model, whenever anything in the DOM changes, a
      // "re-render" has occured.
      if (component && component._renderNode) {
        component._renderNode.isDirty = true;
      }

      if (node.state.manager) {
        node.shouldReceiveAttrs = true;
      }

      node.ownerNode.emberView.scheduleRevalidate(node, (0, _emberMetalStreamsUtils.labelFor)(stream));
    }));
  }
});
enifed("ember-htmlbars/utils/update-scope", ["exports", "ember-metal/streams/proxy-stream", "ember-htmlbars/utils/subscribe"], function (exports, _emberMetalStreamsProxyStream, _emberHtmlbarsUtilsSubscribe) {
  exports["default"] = updateScope;

  function updateScope(scope, key, newValue, renderNode, isSelf) {
    var existing = scope[key];

    if (existing) {
      existing.setSource(newValue);
    } else {
      var stream = new _emberMetalStreamsProxyStream["default"](newValue, isSelf ? null : key);
      if (renderNode) {
        (0, _emberHtmlbarsUtilsSubscribe["default"])(renderNode, scope, stream);
      }
      scope[key] = stream;
    }
  }
});
enifed('ember-metal-views', ['exports', 'ember-metal-views/renderer'], function (exports, _emberMetalViewsRenderer) {
  exports.Renderer = _emberMetalViewsRenderer["default"];
});
enifed("ember-metal-views/renderer", ["exports", "ember-metal/run_loop", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/merge", "ember-metal/set_properties", "ember-views/system/build-component-template", "ember-metal/enumerable_utils"], function (exports, _emberMetalRun_loop, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalMerge, _emberMetalSet_properties, _emberViewsSystemBuildComponentTemplate, _emberMetalEnumerable_utils) {
  //import { deprecation } from "ember-views/compat/attrs-proxy";

  function Renderer(_helper) {
    this._dom = _helper;
  }

  Renderer.prototype.prerenderTopLevelView = function Renderer_prerenderTopLevelView(view, renderNode) {
    if (view._state === "inDOM") {
      throw new Error("You cannot insert a View that has already been rendered");
    }
    view.ownerView = renderNode.emberView = view;
    view._renderNode = renderNode;

    var layout = (0, _emberMetalProperty_get.get)(view, "layout");
    var template = view.isComponent ? (0, _emberMetalProperty_get.get)(view, "_template") : (0, _emberMetalProperty_get.get)(view, "template");

    var componentInfo = { component: view, layout: layout };

    var block = (0, _emberViewsSystemBuildComponentTemplate["default"])(componentInfo, {}, {
      self: view,
      templates: template ? { "default": template.raw } : undefined
    }).block;

    view.renderBlock(block, renderNode);
    view.lastResult = renderNode.lastResult;
    this.clearRenderedViews(view.env);
  };

  Renderer.prototype.renderTopLevelView = function Renderer_renderTopLevelView(view, renderNode) {
    // Check to see if insertion has been canceled
    if (view._willInsert) {
      view._willInsert = false;
      this.prerenderTopLevelView(view, renderNode);
      this.dispatchLifecycleHooks(view.env);
    }
  };

  Renderer.prototype.revalidateTopLevelView = function Renderer_revalidateTopLevelView(view) {
    // This guard prevents revalidation on an already-destroyed view.
    if (view._renderNode.lastResult) {
      view._renderNode.lastResult.revalidate(view.env);
      // supports createElement, which operates without moving the view into
      // the inDOM state.
      if (view._state === "inDOM") {
        this.dispatchLifecycleHooks(view.env);
      }
      this.clearRenderedViews(view.env);
    }
  };

  Renderer.prototype.dispatchLifecycleHooks = function Renderer_dispatchLifecycleHooks(env) {
    var ownerView = env.view;

    var lifecycleHooks = env.lifecycleHooks;
    var i, hook;

    for (i = 0; i < lifecycleHooks.length; i++) {
      hook = lifecycleHooks[i];
      ownerView._dispatching = hook.type;

      switch (hook.type) {
        case "didInsertElement":
          this.didInsertElement(hook.view);break;
        case "didUpdate":
          this.didUpdate(hook.view);break;
      }

      this.didRender(hook.view);
    }

    ownerView._dispatching = null;
    env.lifecycleHooks.length = 0;
  };

  Renderer.prototype.ensureViewNotRendering = function Renderer_ensureViewNotRendering(view) {
    var env = view.ownerView.env;
    if (env && (0, _emberMetalEnumerable_utils.indexOf)(env.renderedViews, view.elementId) !== -1) {
      throw new Error("Something you did caused a view to re-render after it rendered but before it was inserted into the DOM.");
    }
  };

  Renderer.prototype.clearRenderedViews = function Renderer_clearRenderedViews(env) {
    env.renderedNodes = {};
    env.renderedViews.length = 0;
  };

  // This entry point is called from top-level `view.appendTo`
  Renderer.prototype.appendTo = function Renderer_appendTo(view, target) {
    var morph = this._dom.appendMorph(target);
    morph.ownerNode = morph;
    view._willInsert = true;
    _emberMetalRun_loop["default"].schedule("render", this, this.renderTopLevelView, view, morph);
  };

  Renderer.prototype.replaceIn = function Renderer_replaceIn(view, target) {
    var morph = this._dom.replaceContentWithMorph(target);
    morph.ownerNode = morph;
    view._willInsert = true;
    _emberMetalRun_loop["default"].scheduleOnce("render", this, this.renderTopLevelView, view, morph);
  };

  Renderer.prototype.createElement = function Renderer_createElement(view) {
    var morph = this._dom.createFragmentMorph();
    morph.ownerNode = morph;
    this.prerenderTopLevelView(view, morph);
  };

  Renderer.prototype.didCreateElement = function (view, element) {
    if (element) {
      view.element = element;
    }

    if (view._transitionTo) {
      view._transitionTo("hasElement");
    }
  }; // hasElement

  Renderer.prototype.willInsertElement = function (view) {
    if (view.trigger) {
      view.trigger("willInsertElement");
    }
  }; // will place into DOM

  Renderer.prototype.setAttrs = function (view, attrs) {
    (0, _emberMetalProperty_set.set)(view, "attrs", attrs);
  }; // set attrs the first time

  Renderer.prototype.componentInitAttrs = function (component, attrs) {
    (0, _emberMetalProperty_set.set)(component, "attrs", attrs);
    component.trigger("didInitAttrs", { attrs: attrs });
    component.trigger("didReceiveAttrs", { newAttrs: attrs });
  }; // set attrs the first time

  Renderer.prototype.didInsertElement = function (view) {
    if (view._transitionTo) {
      view._transitionTo("inDOM");
    }

    if (view.trigger) {
      view.trigger("didInsertElement");
    }
  }; // inDOM // placed into DOM

  Renderer.prototype.didUpdate = function (view) {
    if (view.trigger) {
      view.trigger("didUpdate");
    }
  };

  Renderer.prototype.didRender = function (view) {
    if (view.trigger) {
      view.trigger("didRender");
    }
  };

  Renderer.prototype.updateAttrs = function (view, attrs) {
    this.setAttrs(view, attrs);
  }; // setting new attrs

  Renderer.prototype.componentUpdateAttrs = function (component, newAttrs) {
    var oldAttrs = null;

    if (component.attrs) {
      oldAttrs = (0, _emberMetalMerge.assign)({}, component.attrs);
      (0, _emberMetalSet_properties["default"])(component.attrs, newAttrs);
    } else {
      (0, _emberMetalProperty_set.set)(component, "attrs", newAttrs);
    }

    component.trigger("didUpdateAttrs", { oldAttrs: oldAttrs, newAttrs: newAttrs });
    component.trigger("didReceiveAttrs", { oldAttrs: oldAttrs, newAttrs: newAttrs });
  };

  Renderer.prototype.willUpdate = function (view, attrs) {
    if (view._willUpdate) {
      view._willUpdate(attrs);
    }
  };

  Renderer.prototype.componentWillUpdate = function (component) {
    component.trigger("willUpdate");
  };

  Renderer.prototype.willRender = function (view) {
    if (view._willRender) {
      view._willRender();
    }
  };

  Renderer.prototype.componentWillRender = function (component) {
    component.trigger("willRender");
  };

  Renderer.prototype.remove = function (view, shouldDestroy) {
    this.willDestroyElement(view);

    view._willRemoveElement = true;
    _emberMetalRun_loop["default"].schedule("render", this, this.renderElementRemoval, view);
  };

  Renderer.prototype.renderElementRemoval = function Renderer_renderElementRemoval(view) {
    // Use the _willRemoveElement flag to avoid mulitple removal attempts in
    // case many have been scheduled. This should be more performant than using
    // `scheduleOnce`.
    if (view._willRemoveElement) {
      view._willRemoveElement = false;

      if (view._renderNode) {
        view._renderNode.clear();
      }
      this.didDestroyElement(view);
    }
  };

  Renderer.prototype.willRemoveElement = function () {};

  Renderer.prototype.willDestroyElement = function (view) {
    if (view._willDestroyElement) {
      view._willDestroyElement();
    }
    if (view.trigger) {
      view.trigger("willDestroyElement");
      view.trigger("willClearRender");
    }

    if (view._transitionTo) {
      view._transitionTo("destroying");
    }
  };

  Renderer.prototype.didDestroyElement = function (view) {
    view.element = null;

    // Views that are being destroyed should never go back to the preRender state.
    // However if we're just destroying an element on a view (as is the case when
    // using View#remove) then the view should go to a preRender state so that
    // it can be rendered again later.
    if (view._state !== "destroying") {
      view._transitionTo("preRender");
    }

    if (view.trigger) {
      view.trigger("didDestroyElement");
    }
  }; // element destroyed so view.destroy shouldn't try to remove it removedFromDOM

  exports["default"] = Renderer;
});
/*view*/
enifed("ember-metal", ["exports", "ember-metal/core", "ember-metal/merge", "ember-metal/instrumentation", "ember-metal/utils", "ember-metal/error", "ember-metal/enumerable_utils", "ember-metal/cache", "ember-metal/platform/define_property", "ember-metal/platform/create", "ember-metal/array", "ember-metal/logger", "ember-metal/property_get", "ember-metal/events", "ember-metal/observer_set", "ember-metal/property_events", "ember-metal/properties", "ember-metal/property_set", "ember-metal/map", "ember-metal/get_properties", "ember-metal/set_properties", "ember-metal/watch_key", "ember-metal/chains", "ember-metal/watch_path", "ember-metal/watching", "ember-metal/expand_properties", "ember-metal/computed", "ember-metal/alias", "ember-metal/computed_macros", "ember-metal/observer", "ember-metal/mixin", "ember-metal/binding", "ember-metal/run_loop", "ember-metal/libraries", "ember-metal/is_none", "ember-metal/is_empty", "ember-metal/is_blank", "ember-metal/is_present", "ember-metal/keys", "backburner", "ember-metal/streams/utils", "ember-metal/streams/stream"], function (exports, _emberMetalCore, _emberMetalMerge, _emberMetalInstrumentation, _emberMetalUtils, _emberMetalError, _emberMetalEnumerable_utils, _emberMetalCache, _emberMetalPlatformDefine_property, _emberMetalPlatformCreate, _emberMetalArray, _emberMetalLogger, _emberMetalProperty_get, _emberMetalEvents, _emberMetalObserver_set, _emberMetalProperty_events, _emberMetalProperties, _emberMetalProperty_set, _emberMetalMap, _emberMetalGet_properties, _emberMetalSet_properties, _emberMetalWatch_key, _emberMetalChains, _emberMetalWatch_path, _emberMetalWatching, _emberMetalExpand_properties, _emberMetalComputed, _emberMetalAlias, _emberMetalComputed_macros, _emberMetalObserver, _emberMetalMixin, _emberMetalBinding, _emberMetalRun_loop, _emberMetalLibraries, _emberMetalIs_none, _emberMetalIs_empty, _emberMetalIs_blank, _emberMetalIs_present, _emberMetalKeys, _backburner, _emberMetalStreamsUtils, _emberMetalStreamsStream) {

  _emberMetalComputed.computed.empty = _emberMetalComputed_macros.empty;
  _emberMetalComputed.computed.notEmpty = _emberMetalComputed_macros.notEmpty;
  _emberMetalComputed.computed.none = _emberMetalComputed_macros.none;
  _emberMetalComputed.computed.not = _emberMetalComputed_macros.not;
  _emberMetalComputed.computed.bool = _emberMetalComputed_macros.bool;
  _emberMetalComputed.computed.match = _emberMetalComputed_macros.match;
  _emberMetalComputed.computed.equal = _emberMetalComputed_macros.equal;
  _emberMetalComputed.computed.gt = _emberMetalComputed_macros.gt;
  _emberMetalComputed.computed.gte = _emberMetalComputed_macros.gte;
  _emberMetalComputed.computed.lt = _emberMetalComputed_macros.lt;
  _emberMetalComputed.computed.lte = _emberMetalComputed_macros.lte;
  _emberMetalComputed.computed.alias = _emberMetalAlias["default"];
  _emberMetalComputed.computed.oneWay = _emberMetalComputed_macros.oneWay;
  _emberMetalComputed.computed.reads = _emberMetalComputed_macros.oneWay;
  _emberMetalComputed.computed.readOnly = _emberMetalComputed_macros.readOnly;
  _emberMetalComputed.computed.defaultTo = _emberMetalComputed_macros.defaultTo;
  _emberMetalComputed.computed.deprecatingAlias = _emberMetalComputed_macros.deprecatingAlias;
  _emberMetalComputed.computed.and = _emberMetalComputed_macros.and;
  _emberMetalComputed.computed.or = _emberMetalComputed_macros.or;
  _emberMetalComputed.computed.any = _emberMetalComputed_macros.any;
  _emberMetalComputed.computed.collect = _emberMetalComputed_macros.collect;

  // END IMPORTS

  // BEGIN EXPORTS
  var EmberInstrumentation = _emberMetalCore["default"].Instrumentation = {};
  EmberInstrumentation.instrument = _emberMetalInstrumentation.instrument;
  EmberInstrumentation.subscribe = _emberMetalInstrumentation.subscribe;
  EmberInstrumentation.unsubscribe = _emberMetalInstrumentation.unsubscribe;
  EmberInstrumentation.reset = _emberMetalInstrumentation.reset;

  _emberMetalCore["default"].instrument = _emberMetalInstrumentation.instrument;
  _emberMetalCore["default"].subscribe = _emberMetalInstrumentation.subscribe;

  _emberMetalCore["default"]._Cache = _emberMetalCache["default"];

  _emberMetalCore["default"].generateGuid = _emberMetalUtils.generateGuid;
  _emberMetalCore["default"].GUID_KEY = _emberMetalUtils.GUID_KEY;
  _emberMetalCore["default"].create = _emberMetalPlatformCreate["default"];
  _emberMetalCore["default"].keys = _emberMetalKeys["default"];
  _emberMetalCore["default"].platform = {
    defineProperty: _emberMetalProperties.defineProperty,
    hasPropertyAccessors: _emberMetalPlatformDefine_property.hasPropertyAccessors
  };

  var EmberArrayPolyfills = _emberMetalCore["default"].ArrayPolyfills = {};

  EmberArrayPolyfills.map = _emberMetalArray.map;
  EmberArrayPolyfills.forEach = _emberMetalArray.forEach;
  EmberArrayPolyfills.filter = _emberMetalArray.filter;
  EmberArrayPolyfills.indexOf = _emberMetalArray.indexOf;

  _emberMetalCore["default"].Error = _emberMetalError["default"];
  _emberMetalCore["default"].guidFor = _emberMetalUtils.guidFor;
  _emberMetalCore["default"].META_DESC = _emberMetalUtils.META_DESC;
  _emberMetalCore["default"].EMPTY_META = _emberMetalUtils.EMPTY_META;
  _emberMetalCore["default"].meta = _emberMetalUtils.meta;
  _emberMetalCore["default"].getMeta = _emberMetalUtils.getMeta;
  _emberMetalCore["default"].setMeta = _emberMetalUtils.setMeta;
  _emberMetalCore["default"].metaPath = _emberMetalUtils.metaPath;
  _emberMetalCore["default"].inspect = _emberMetalUtils.inspect;
  _emberMetalCore["default"].tryCatchFinally = _emberMetalUtils.deprecatedTryCatchFinally;
  _emberMetalCore["default"].makeArray = _emberMetalUtils.makeArray;
  _emberMetalCore["default"].canInvoke = _emberMetalUtils.canInvoke;
  _emberMetalCore["default"].tryInvoke = _emberMetalUtils.tryInvoke;
  _emberMetalCore["default"].tryFinally = _emberMetalUtils.deprecatedTryFinally;
  _emberMetalCore["default"].wrap = _emberMetalUtils.wrap;
  _emberMetalCore["default"].apply = _emberMetalUtils.apply;
  _emberMetalCore["default"].applyStr = _emberMetalUtils.applyStr;
  _emberMetalCore["default"].uuid = _emberMetalUtils.uuid;

  _emberMetalCore["default"].Logger = _emberMetalLogger["default"];

  _emberMetalCore["default"].get = _emberMetalProperty_get.get;
  _emberMetalCore["default"].getWithDefault = _emberMetalProperty_get.getWithDefault;
  _emberMetalCore["default"].normalizeTuple = _emberMetalProperty_get.normalizeTuple;
  _emberMetalCore["default"]._getPath = _emberMetalProperty_get._getPath;

  _emberMetalCore["default"].EnumerableUtils = _emberMetalEnumerable_utils["default"];

  _emberMetalCore["default"].on = _emberMetalEvents.on;
  _emberMetalCore["default"].addListener = _emberMetalEvents.addListener;
  _emberMetalCore["default"].removeListener = _emberMetalEvents.removeListener;
  _emberMetalCore["default"]._suspendListener = _emberMetalEvents.suspendListener;
  _emberMetalCore["default"]._suspendListeners = _emberMetalEvents.suspendListeners;
  _emberMetalCore["default"].sendEvent = _emberMetalEvents.sendEvent;
  _emberMetalCore["default"].hasListeners = _emberMetalEvents.hasListeners;
  _emberMetalCore["default"].watchedEvents = _emberMetalEvents.watchedEvents;
  _emberMetalCore["default"].listenersFor = _emberMetalEvents.listenersFor;
  _emberMetalCore["default"].accumulateListeners = _emberMetalEvents.accumulateListeners;

  _emberMetalCore["default"]._ObserverSet = _emberMetalObserver_set["default"];

  _emberMetalCore["default"].propertyWillChange = _emberMetalProperty_events.propertyWillChange;
  _emberMetalCore["default"].propertyDidChange = _emberMetalProperty_events.propertyDidChange;
  _emberMetalCore["default"].overrideChains = _emberMetalProperty_events.overrideChains;
  _emberMetalCore["default"].beginPropertyChanges = _emberMetalProperty_events.beginPropertyChanges;
  _emberMetalCore["default"].endPropertyChanges = _emberMetalProperty_events.endPropertyChanges;
  _emberMetalCore["default"].changeProperties = _emberMetalProperty_events.changeProperties;

  _emberMetalCore["default"].defineProperty = _emberMetalProperties.defineProperty;

  _emberMetalCore["default"].set = _emberMetalProperty_set.set;
  _emberMetalCore["default"].trySet = _emberMetalProperty_set.trySet;

  _emberMetalCore["default"].OrderedSet = _emberMetalMap.OrderedSet;
  _emberMetalCore["default"].Map = _emberMetalMap.Map;
  _emberMetalCore["default"].MapWithDefault = _emberMetalMap.MapWithDefault;

  _emberMetalCore["default"].getProperties = _emberMetalGet_properties["default"];
  _emberMetalCore["default"].setProperties = _emberMetalSet_properties["default"];

  _emberMetalCore["default"].watchKey = _emberMetalWatch_key.watchKey;
  _emberMetalCore["default"].unwatchKey = _emberMetalWatch_key.unwatchKey;

  _emberMetalCore["default"].flushPendingChains = _emberMetalChains.flushPendingChains;
  _emberMetalCore["default"].removeChainWatcher = _emberMetalChains.removeChainWatcher;
  _emberMetalCore["default"]._ChainNode = _emberMetalChains.ChainNode;
  _emberMetalCore["default"].finishChains = _emberMetalChains.finishChains;

  _emberMetalCore["default"].watchPath = _emberMetalWatch_path.watchPath;
  _emberMetalCore["default"].unwatchPath = _emberMetalWatch_path.unwatchPath;

  _emberMetalCore["default"].watch = _emberMetalWatching.watch;
  _emberMetalCore["default"].isWatching = _emberMetalWatching.isWatching;
  _emberMetalCore["default"].unwatch = _emberMetalWatching.unwatch;
  _emberMetalCore["default"].rewatch = _emberMetalWatching.rewatch;
  _emberMetalCore["default"].destroy = _emberMetalWatching.destroy;

  _emberMetalCore["default"].expandProperties = _emberMetalExpand_properties["default"];

  _emberMetalCore["default"].ComputedProperty = _emberMetalComputed.ComputedProperty;
  _emberMetalCore["default"].computed = _emberMetalComputed.computed;
  _emberMetalCore["default"].cacheFor = _emberMetalComputed.cacheFor;

  _emberMetalCore["default"].addObserver = _emberMetalObserver.addObserver;
  _emberMetalCore["default"].observersFor = _emberMetalObserver.observersFor;
  _emberMetalCore["default"].removeObserver = _emberMetalObserver.removeObserver;
  _emberMetalCore["default"].addBeforeObserver = _emberMetalObserver.addBeforeObserver;
  _emberMetalCore["default"]._suspendBeforeObserver = _emberMetalObserver._suspendBeforeObserver;
  _emberMetalCore["default"]._suspendBeforeObservers = _emberMetalObserver._suspendBeforeObservers;
  _emberMetalCore["default"]._suspendObserver = _emberMetalObserver._suspendObserver;
  _emberMetalCore["default"]._suspendObservers = _emberMetalObserver._suspendObservers;
  _emberMetalCore["default"].beforeObserversFor = _emberMetalObserver.beforeObserversFor;
  _emberMetalCore["default"].removeBeforeObserver = _emberMetalObserver.removeBeforeObserver;

  _emberMetalCore["default"].IS_BINDING = _emberMetalMixin.IS_BINDING;
  _emberMetalCore["default"].required = _emberMetalMixin.required;
  _emberMetalCore["default"].aliasMethod = _emberMetalMixin.aliasMethod;
  _emberMetalCore["default"].observer = _emberMetalMixin.observer;
  _emberMetalCore["default"].immediateObserver = _emberMetalMixin.immediateObserver;
  _emberMetalCore["default"].beforeObserver = _emberMetalMixin.beforeObserver;
  _emberMetalCore["default"].mixin = _emberMetalMixin.mixin;
  _emberMetalCore["default"].Mixin = _emberMetalMixin.Mixin;

  _emberMetalCore["default"].oneWay = _emberMetalBinding.oneWay;
  _emberMetalCore["default"].bind = _emberMetalBinding.bind;
  _emberMetalCore["default"].Binding = _emberMetalBinding.Binding;
  _emberMetalCore["default"].isGlobalPath = _emberMetalBinding.isGlobalPath;

  _emberMetalCore["default"].run = _emberMetalRun_loop["default"];

  /**
  @class Backburner
  @for Ember
  @private
  */
  _emberMetalCore["default"].Backburner = _backburner["default"];
  // this is the new go forward, once Ember Data updates to using `_Backburner` we
  // can remove the non-underscored version.
  _emberMetalCore["default"]._Backburner = _backburner["default"];

  _emberMetalCore["default"].libraries = new _emberMetalLibraries["default"]();
  _emberMetalCore["default"].libraries.registerCoreLibrary("Ember", _emberMetalCore["default"].VERSION);

  _emberMetalCore["default"].isNone = _emberMetalIs_none["default"];
  _emberMetalCore["default"].isEmpty = _emberMetalIs_empty["default"];
  _emberMetalCore["default"].isBlank = _emberMetalIs_blank["default"];
  _emberMetalCore["default"].isPresent = _emberMetalIs_present["default"];

  _emberMetalCore["default"].merge = _emberMetalMerge["default"];

  if (_emberMetalCore["default"].FEATURES.isEnabled("ember-metal-stream")) {
    _emberMetalCore["default"].stream = {
      Stream: _emberMetalStreamsStream["default"],

      isStream: _emberMetalStreamsUtils.isStream,
      subscribe: _emberMetalStreamsUtils.subscribe,
      unsubscribe: _emberMetalStreamsUtils.unsubscribe,
      read: _emberMetalStreamsUtils.read,
      readHash: _emberMetalStreamsUtils.readHash,
      readArray: _emberMetalStreamsUtils.readArray,
      scanArray: _emberMetalStreamsUtils.scanArray,
      scanHash: _emberMetalStreamsUtils.scanHash,
      concat: _emberMetalStreamsUtils.concat,
      chain: _emberMetalStreamsUtils.chain
    };
  }

  /**
    A function may be assigned to `Ember.onerror` to be called when Ember
    internals encounter an error. This is useful for specialized error handling
    and reporting code.
  
    ```javascript
    Ember.onerror = function(error) {
      Em.$.ajax('/report-error', 'POST', {
        stack: error.stack,
        otherInformation: 'whatever app state you want to provide'
      });
    };
    ```
  
    Internally, `Ember.onerror` is used as Backburner's error handler.
  
    @event onerror
    @for Ember
    @param {Exception} error the error object
    @public
  */
  _emberMetalCore["default"].onerror = null;
  // END EXPORTS

  // do this for side-effects of updating Ember.assert, warn, etc when
  // ember-debug is present
  if (_emberMetalCore["default"].__loader.registry["ember-debug"]) {
    requireModule("ember-debug");
  }

  exports["default"] = _emberMetalCore["default"];
});
/**
@module ember
@submodule ember-metal
*/

// BEGIN IMPORTS
enifed("ember-metal/alias", ["exports", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/core", "ember-metal/error", "ember-metal/properties", "ember-metal/computed", "ember-metal/platform/create", "ember-metal/utils", "ember-metal/dependent_keys"], function (exports, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalCore, _emberMetalError, _emberMetalProperties, _emberMetalComputed, _emberMetalPlatformCreate, _emberMetalUtils, _emberMetalDependent_keys) {
  exports["default"] = alias;
  exports.AliasedProperty = AliasedProperty;

  function alias(altKey) {
    return new AliasedProperty(altKey);
  }

  function AliasedProperty(altKey) {
    this.isDescriptor = true;
    this.altKey = altKey;
    this._dependentKeys = [altKey];
  }

  AliasedProperty.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalProperties.Descriptor.prototype);

  AliasedProperty.prototype.get = function AliasedProperty_get(obj, keyName) {
    return (0, _emberMetalProperty_get.get)(obj, this.altKey);
  };

  AliasedProperty.prototype.set = function AliasedProperty_set(obj, keyName, value) {
    return (0, _emberMetalProperty_set.set)(obj, this.altKey, value);
  };

  AliasedProperty.prototype.willWatch = function (obj, keyName) {
    (0, _emberMetalDependent_keys.addDependentKeys)(this, obj, keyName, (0, _emberMetalUtils.meta)(obj));
  };

  AliasedProperty.prototype.didUnwatch = function (obj, keyName) {
    (0, _emberMetalDependent_keys.removeDependentKeys)(this, obj, keyName, (0, _emberMetalUtils.meta)(obj));
  };

  AliasedProperty.prototype.setup = function (obj, keyName) {
    _emberMetalCore["default"].assert("Setting alias '" + keyName + "' on self", this.altKey !== keyName);
    var m = (0, _emberMetalUtils.meta)(obj);
    if (m.watching[keyName]) {
      (0, _emberMetalDependent_keys.addDependentKeys)(this, obj, keyName, m);
    }
  };

  AliasedProperty.prototype.teardown = function (obj, keyName) {
    var m = (0, _emberMetalUtils.meta)(obj);
    if (m.watching[keyName]) {
      (0, _emberMetalDependent_keys.removeDependentKeys)(this, obj, keyName, m);
    }
  };

  AliasedProperty.prototype.readOnly = function () {
    this.set = AliasedProperty_readOnlySet;
    return this;
  };

  function AliasedProperty_readOnlySet(obj, keyName, value) {
    throw new _emberMetalError["default"]("Cannot set read-only property '" + keyName + "' on object: " + (0, _emberMetalUtils.inspect)(obj));
  }

  AliasedProperty.prototype.oneWay = function () {
    this.set = AliasedProperty_oneWaySet;
    return this;
  };

  function AliasedProperty_oneWaySet(obj, keyName, value) {
    (0, _emberMetalProperties.defineProperty)(obj, keyName, null);
    return (0, _emberMetalProperty_set.set)(obj, keyName, value);
  }

  // Backwards compatibility with Ember Data
  AliasedProperty.prototype._meta = undefined;
  AliasedProperty.prototype.meta = _emberMetalComputed.ComputedProperty.prototype.meta;
});
// Ember.assert
enifed("ember-metal/array", ["exports"], function (exports) {
  /**
  @module ember
  @submodule ember-metal
  */

  var ArrayPrototype = Array.prototype;

  // Testing this is not ideal, but we want to use native functions
  // if available, but not to use versions created by libraries like Prototype
  var isNativeFunc = function (func) {
    // This should probably work in all browsers likely to have ES5 array methods
    return func && Function.prototype.toString.call(func).indexOf("[native code]") > -1;
  };

  var defineNativeShim = function (nativeFunc, shim) {
    if (isNativeFunc(nativeFunc)) {
      return nativeFunc;
    }
    return shim;
  };

  // From: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/map
  var map = defineNativeShim(ArrayPrototype.map, function (fun) {
    //"use strict";

    if (this === void 0 || this === null || typeof fun !== "function") {
      throw new TypeError();
    }

    var t = Object(this);
    var len = t.length >>> 0;
    var res = new Array(len);

    for (var i = 0; i < len; i++) {
      if (i in t) {
        res[i] = fun.call(arguments[1], t[i], i, t);
      }
    }

    return res;
  });

  // From: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/foreach
  var forEach = defineNativeShim(ArrayPrototype.forEach, function (fun) {
    //"use strict";

    if (this === void 0 || this === null || typeof fun !== "function") {
      throw new TypeError();
    }

    var t = Object(this);
    var len = t.length >>> 0;

    for (var i = 0; i < len; i++) {
      if (i in t) {
        fun.call(arguments[1], t[i], i, t);
      }
    }
  });

  var indexOf = defineNativeShim(ArrayPrototype.indexOf, function (obj, fromIndex) {
    if (fromIndex === null || fromIndex === undefined) {
      fromIndex = 0;
    } else if (fromIndex < 0) {
      fromIndex = Math.max(0, this.length + fromIndex);
    }

    for (var i = fromIndex, j = this.length; i < j; i++) {
      if (this[i] === obj) {
        return i;
      }
    }
    return -1;
  });

  var lastIndexOf = defineNativeShim(ArrayPrototype.lastIndexOf, function (obj, fromIndex) {
    var len = this.length;
    var idx;

    if (fromIndex === undefined) {
      fromIndex = len - 1;
    } else {
      fromIndex = fromIndex < 0 ? Math.ceil(fromIndex) : Math.floor(fromIndex);
    }

    if (fromIndex < 0) {
      fromIndex += len;
    }

    for (idx = fromIndex; idx >= 0; idx--) {
      if (this[idx] === obj) {
        return idx;
      }
    }
    return -1;
  });

  var filter = defineNativeShim(ArrayPrototype.filter, function (fn, context) {
    var i, value;
    var result = [];
    var length = this.length;

    for (i = 0; i < length; i++) {
      if (this.hasOwnProperty(i)) {
        value = this[i];
        if (fn.call(context, value, i, this)) {
          result.push(value);
        }
      }
    }
    return result;
  });

  if (Ember.SHIM_ES5) {
    ArrayPrototype.map = ArrayPrototype.map || map;
    ArrayPrototype.forEach = ArrayPrototype.forEach || forEach;
    ArrayPrototype.filter = ArrayPrototype.filter || filter;
    ArrayPrototype.indexOf = ArrayPrototype.indexOf || indexOf;
    ArrayPrototype.lastIndexOf = ArrayPrototype.lastIndexOf || lastIndexOf;
  }

  /**
    Array polyfills to support ES5 features in older browsers.
  
    @namespace Ember
    @property ArrayPolyfills
    @public
  */
  exports.map = map;
  exports.forEach = forEach;
  exports.filter = filter;
  exports.indexOf = indexOf;
  exports.lastIndexOf = lastIndexOf;
});
enifed("ember-metal/binding", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/utils", "ember-metal/observer", "ember-metal/run_loop", "ember-metal/path_cache"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalUtils, _emberMetalObserver, _emberMetalRun_loop, _emberMetalPath_cache) {
  exports.bind = bind;
  exports.oneWay = oneWay;

  // ES6TODO: where is Ember.lookup defined?
  /**
  @module ember
  @submodule ember-metal
  */

  // ..........................................................
  // CONSTANTS
  //

  /**
    Debug parameter you can turn on. This will log all bindings that fire to
    the console. This should be disabled in production code. Note that you
    can also enable this from the console or temporarily.
  
    @property LOG_BINDINGS
    @for Ember
    @type Boolean
    @default false
    @public
  */
  _emberMetalCore["default"].LOG_BINDINGS = false || !!_emberMetalCore["default"].ENV.LOG_BINDINGS;

  /**
    Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)
    instead of local (`foo.bar.baz`).
  
    @method isGlobalPath
    @for Ember
    @private
    @param {String} path
    @return Boolean
  */

  function getWithGlobals(obj, path) {
    return (0, _emberMetalProperty_get.get)((0, _emberMetalPath_cache.isGlobal)(path) ? _emberMetalCore["default"].lookup : obj, path);
  }

  // ..........................................................
  // BINDING
  //

  function Binding(toPath, fromPath) {
    this._direction = undefined;
    this._from = fromPath;
    this._to = toPath;
    this._readyToSync = undefined;
    this._oneWay = undefined;
  }

  /**
    @class Binding
    @namespace Ember
    @public
  */

  Binding.prototype = {
    /**
      This copies the Binding so it can be connected to another object.
       @method copy
      @return {Ember.Binding} `this`
      @public
    */
    copy: function () {
      var copy = new Binding(this._to, this._from);
      if (this._oneWay) {
        copy._oneWay = true;
      }
      return copy;
    },

    // ..........................................................
    // CONFIG
    //

    /**
      This will set `from` property path to the specified value. It will not
      attempt to resolve this property path to an actual object until you
      connect the binding.
       The binding will search for the property path starting at the root object
      you pass when you `connect()` the binding. It follows the same rules as
      `get()` - see that method for more information.
       @method from
      @param {String} path the property path to connect to
      @return {Ember.Binding} `this`
      @public
    */
    from: function (path) {
      this._from = path;
      return this;
    },

    /**
      This will set the `to` property path to the specified value. It will not
      attempt to resolve this property path to an actual object until you
      connect the binding.
       The binding will search for the property path starting at the root object
      you pass when you `connect()` the binding. It follows the same rules as
      `get()` - see that method for more information.
       @method to
      @param {String|Tuple} path A property path or tuple
      @return {Ember.Binding} `this`
      @public
    */
    to: function (path) {
      this._to = path;
      return this;
    },

    /**
      Configures the binding as one way. A one-way binding will relay changes
      on the `from` side to the `to` side, but not the other way around. This
      means that if you change the `to` side directly, the `from` side may have
      a different value.
       @method oneWay
      @return {Ember.Binding} `this`
      @public
    */
    oneWay: function () {
      this._oneWay = true;
      return this;
    },

    /**
      @method toString
      @return {String} string representation of binding
      @public
    */
    toString: function () {
      var oneWay = this._oneWay ? "[oneWay]" : "";
      return "Ember.Binding<" + (0, _emberMetalUtils.guidFor)(this) + ">(" + this._from + " -> " + this._to + ")" + oneWay;
    },

    // ..........................................................
    // CONNECT AND SYNC
    //

    /**
      Attempts to connect this binding instance so that it can receive and relay
      changes. This method will raise an exception if you have not set the
      from/to properties yet.
       @method connect
      @param {Object} obj The root object for this binding.
      @return {Ember.Binding} `this`
      @public
    */
    connect: function (obj) {
      _emberMetalCore["default"].assert("Must pass a valid object to Ember.Binding.connect()", !!obj);

      var fromPath = this._from;
      var toPath = this._to;
      (0, _emberMetalProperty_set.trySet)(obj, toPath, getWithGlobals(obj, fromPath));

      // add an observer on the object to be notified when the binding should be updated
      (0, _emberMetalObserver.addObserver)(obj, fromPath, this, this.fromDidChange);

      // if the binding is a two-way binding, also set up an observer on the target
      if (!this._oneWay) {
        (0, _emberMetalObserver.addObserver)(obj, toPath, this, this.toDidChange);
      }

      this._readyToSync = true;

      return this;
    },

    /**
      Disconnects the binding instance. Changes will no longer be relayed. You
      will not usually need to call this method.
       @method disconnect
      @param {Object} obj The root object you passed when connecting the binding.
      @return {Ember.Binding} `this`
      @public
    */
    disconnect: function (obj) {
      _emberMetalCore["default"].assert("Must pass a valid object to Ember.Binding.disconnect()", !!obj);

      var twoWay = !this._oneWay;

      // remove an observer on the object so we're no longer notified of
      // changes that should update bindings.
      (0, _emberMetalObserver.removeObserver)(obj, this._from, this, this.fromDidChange);

      // if the binding is two-way, remove the observer from the target as well
      if (twoWay) {
        (0, _emberMetalObserver.removeObserver)(obj, this._to, this, this.toDidChange);
      }

      this._readyToSync = false; // disable scheduled syncs...
      return this;
    },

    // ..........................................................
    // PRIVATE
    //

    /* called when the from side changes */
    fromDidChange: function (target) {
      this._scheduleSync(target, "fwd");
    },

    /* called when the to side changes */
    toDidChange: function (target) {
      this._scheduleSync(target, "back");
    },

    _scheduleSync: function (obj, dir) {
      var existingDir = this._direction;

      // if we haven't scheduled the binding yet, schedule it
      if (existingDir === undefined) {
        _emberMetalRun_loop["default"].schedule("sync", this, this._sync, obj);
        this._direction = dir;
      }

      // If both a 'back' and 'fwd' sync have been scheduled on the same object,
      // default to a 'fwd' sync so that it remains deterministic.
      if (existingDir === "back" && dir === "fwd") {
        this._direction = "fwd";
      }
    },

    _sync: function (obj) {
      var log = _emberMetalCore["default"].LOG_BINDINGS;

      // don't synchronize destroyed objects or disconnected bindings
      if (obj.isDestroyed || !this._readyToSync) {
        return;
      }

      // get the direction of the binding for the object we are
      // synchronizing from
      var direction = this._direction;

      var fromPath = this._from;
      var toPath = this._to;

      this._direction = undefined;

      // if we're synchronizing from the remote object...
      if (direction === "fwd") {
        var fromValue = getWithGlobals(obj, this._from);
        if (log) {
          _emberMetalCore["default"].Logger.log(" ", this.toString(), "->", fromValue, obj);
        }
        if (this._oneWay) {
          (0, _emberMetalProperty_set.trySet)(obj, toPath, fromValue);
        } else {
          (0, _emberMetalObserver._suspendObserver)(obj, toPath, this, this.toDidChange, function () {
            (0, _emberMetalProperty_set.trySet)(obj, toPath, fromValue);
          });
        }
        // if we're synchronizing *to* the remote object
      } else if (direction === "back") {
        var toValue = (0, _emberMetalProperty_get.get)(obj, this._to);
        if (log) {
          _emberMetalCore["default"].Logger.log(" ", this.toString(), "<-", toValue, obj);
        }
        (0, _emberMetalObserver._suspendObserver)(obj, fromPath, this, this.fromDidChange, function () {
          (0, _emberMetalProperty_set.trySet)((0, _emberMetalPath_cache.isGlobal)(fromPath) ? _emberMetalCore["default"].lookup : obj, fromPath, toValue);
        });
      }
    }

  };

  function mixinProperties(to, from) {
    for (var key in from) {
      if (from.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }

  mixinProperties(Binding, {

    /*
      See `Ember.Binding.from`.
       @method from
      @static
    */
    from: function (from) {
      var C = this;
      return new C(undefined, from);
    },

    /*
      See `Ember.Binding.to`.
       @method to
      @static
    */
    to: function (to) {
      var C = this;
      return new C(to, undefined);
    },

    /**
      Creates a new Binding instance and makes it apply in a single direction.
      A one-way binding will relay changes on the `from` side object (supplied
      as the `from` argument) the `to` side, but not the other way around.
      This means that if you change the "to" side directly, the "from" side may have
      a different value.
       See `Binding.oneWay`.
       @method oneWay
      @param {String} from from path.
      @param {Boolean} [flag] (Optional) passing nothing here will make the
        binding `oneWay`. You can instead pass `false` to disable `oneWay`, making the
        binding two way again.
      @return {Ember.Binding} `this`
      @public
    */
    oneWay: function (from, flag) {
      var C = this;
      return new C(undefined, from).oneWay(flag);
    }

  });
  /**
    An `Ember.Binding` connects the properties of two objects so that whenever
    the value of one property changes, the other property will be changed also.
  
    ## Automatic Creation of Bindings with `/^*Binding/`-named Properties
  
    You do not usually create Binding objects directly but instead describe
    bindings in your class or object definition using automatic binding
    detection.
  
    Properties ending in a `Binding` suffix will be converted to `Ember.Binding`
    instances. The value of this property should be a string representing a path
    to another object or a custom binding instance created using Binding helpers
    (see "One Way Bindings"):
  
    ```
    valueBinding: "MyApp.someController.title"
    ```
  
    This will create a binding from `MyApp.someController.title` to the `value`
    property of your object instance automatically. Now the two values will be
    kept in sync.
  
    ## One Way Bindings
  
    One especially useful binding customization you can use is the `oneWay()`
    helper. This helper tells Ember that you are only interested in
    receiving changes on the object you are binding from. For example, if you
    are binding to a preference and you want to be notified if the preference
    has changed, but your object will not be changing the preference itself, you
    could do:
  
    ```
    bigTitlesBinding: Ember.Binding.oneWay("MyApp.preferencesController.bigTitles")
    ```
  
    This way if the value of `MyApp.preferencesController.bigTitles` changes the
    `bigTitles` property of your object will change also. However, if you
    change the value of your `bigTitles` property, it will not update the
    `preferencesController`.
  
    One way bindings are almost twice as fast to setup and twice as fast to
    execute because the binding only has to worry about changes to one side.
  
    You should consider using one way bindings anytime you have an object that
    may be created frequently and you do not intend to change a property; only
    to monitor it for changes (such as in the example above).
  
    ## Adding Bindings Manually
  
    All of the examples above show you how to configure a custom binding, but the
    result of these customizations will be a binding template, not a fully active
    Binding instance. The binding will actually become active only when you
    instantiate the object the binding belongs to. It is useful however, to
    understand what actually happens when the binding is activated.
  
    For a binding to function it must have at least a `from` property and a `to`
    property. The `from` property path points to the object/key that you want to
    bind from while the `to` path points to the object/key you want to bind to.
  
    When you define a custom binding, you are usually describing the property
    you want to bind from (such as `MyApp.someController.value` in the examples
    above). When your object is created, it will automatically assign the value
    you want to bind `to` based on the name of your binding key. In the
    examples above, during init, Ember objects will effectively call
    something like this on your binding:
  
    ```javascript
    binding = Ember.Binding.from("valueBinding").to("value");
    ```
  
    This creates a new binding instance based on the template you provide, and
    sets the to path to the `value` property of the new object. Now that the
    binding is fully configured with a `from` and a `to`, it simply needs to be
    connected to become active. This is done through the `connect()` method:
  
    ```javascript
    binding.connect(this);
    ```
  
    Note that when you connect a binding you pass the object you want it to be
    connected to. This object will be used as the root for both the from and
    to side of the binding when inspecting relative paths. This allows the
    binding to be automatically inherited by subclassed objects as well.
  
    This also allows you to bind between objects using the paths you declare in
    `from` and `to`:
  
    ```javascript
    // Example 1
    binding = Ember.Binding.from("App.someObject.value").to("value");
    binding.connect(this);
  
    // Example 2
    binding = Ember.Binding.from("parentView.value").to("App.someObject.value");
    binding.connect(this);
    ```
  
    Now that the binding is connected, it will observe both the from and to side
    and relay changes.
  
    If you ever needed to do so (you almost never will, but it is useful to
    understand this anyway), you could manually create an active binding by
    using the `Ember.bind()` helper method. (This is the same method used by
    to setup your bindings on objects):
  
    ```javascript
    Ember.bind(MyApp.anotherObject, "value", "MyApp.someController.value");
    ```
  
    Both of these code fragments have the same effect as doing the most friendly
    form of binding creation like so:
  
    ```javascript
    MyApp.anotherObject = Ember.Object.create({
      valueBinding: "MyApp.someController.value",
  
      // OTHER CODE FOR THIS OBJECT...
    });
    ```
  
    Ember's built in binding creation method makes it easy to automatically
    create bindings for you. You should always use the highest-level APIs
    available, even if you understand how it works underneath.
  
    @class Binding
    @namespace Ember
    @since Ember 0.9
    @public
  */
  // Ember.Binding = Binding; ES6TODO: where to put this?

  /**
    Global helper method to create a new binding. Just pass the root object
    along with a `to` and `from` path to create and connect the binding.
  
    @method bind
    @for Ember
    @param {Object} obj The root object of the transform.
    @param {String} to The path to the 'to' side of the binding.
      Must be relative to obj.
    @param {String} from The path to the 'from' side of the binding.
      Must be relative to obj or a global path.
    @return {Ember.Binding} binding instance
    @public
  */

  function bind(obj, to, from) {
    return new Binding(to, from).connect(obj);
  }

  /**
    @method oneWay
    @for Ember
    @param {Object} obj The root object of the transform.
    @param {String} to The path to the 'to' side of the binding.
      Must be relative to obj.
    @param {String} from The path to the 'from' side of the binding.
      Must be relative to obj or a global path.
    @return {Ember.Binding} binding instance
    @public
  */

  function oneWay(obj, to, from) {
    return new Binding(to, from).oneWay().connect(obj);
  }

  exports.Binding = Binding;
  exports.isGlobalPath = _emberMetalPath_cache.isGlobal;
});
// Ember.Logger, Ember.LOG_BINDINGS, assert
enifed('ember-metal/cache', ['exports', 'ember-metal/dictionary'], function (exports, _emberMetalDictionary) {
  exports["default"] = Cache;

  function Cache(limit, func) {
    this.store = (0, _emberMetalDictionary["default"])(null);
    this.size = 0;
    this.misses = 0;
    this.hits = 0;
    this.limit = limit;
    this.func = func;
  }

  var UNDEFINED = function () {};

  Cache.prototype = {
    set: function (key, value) {
      if (this.limit > this.size) {
        this.size++;
        if (value === undefined) {
          this.store[key] = UNDEFINED;
        } else {
          this.store[key] = value;
        }
      }

      return value;
    },

    get: function (key) {
      var value = this.store[key];

      if (value === undefined) {
        this.misses++;
        value = this.set(key, this.func(key));
      } else if (value === UNDEFINED) {
        this.hits++;
        value = undefined;
      } else {
        this.hits++;
        // nothing to translate
      }

      return value;
    },

    purge: function () {
      this.store = (0, _emberMetalDictionary["default"])(null);
      this.size = 0;
      this.hits = 0;
      this.misses = 0;
    }
  };
});
enifed("ember-metal/chains", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/utils", "ember-metal/array", "ember-metal/watch_key"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalUtils, _emberMetalArray, _emberMetalWatch_key) {
  exports.flushPendingChains = flushPendingChains;
  exports.finishChains = finishChains;

  var warn = _emberMetalCore["default"].warn;
  var FIRST_KEY = /^([^\.]+)/;

  function firstKey(path) {
    return path.match(FIRST_KEY)[0];
  }

  function isObject(obj) {
    return obj && typeof obj === "object";
  }

  var pendingQueue = [];

  // attempts to add the pendingQueue chains again. If some of them end up
  // back in the queue and reschedule is true, schedules a timeout to try
  // again.

  function flushPendingChains() {
    if (pendingQueue.length === 0) {
      return;
    }

    var queue = pendingQueue;
    pendingQueue = [];

    _emberMetalArray.forEach.call(queue, function (q) {
      q[0].add(q[1]);
    });

    warn("Watching an undefined global, Ember expects watched globals to be" + " setup by the time the run loop is flushed, check for typos", pendingQueue.length === 0);
  }

  function addChainWatcher(obj, keyName, node) {
    if (!isObject(obj)) {
      return;
    }

    var m = (0, _emberMetalUtils.meta)(obj);
    var nodes = m.chainWatchers;

    if (!m.hasOwnProperty("chainWatchers")) {
      // FIXME?!
      nodes = m.chainWatchers = {};
    }

    if (!nodes[keyName]) {
      nodes[keyName] = [];
    }
    nodes[keyName].push(node);
    (0, _emberMetalWatch_key.watchKey)(obj, keyName, m);
  }

  function removeChainWatcher(obj, keyName, node) {
    if (!isObject(obj)) {
      return;
    }

    var m = obj["__ember_meta__"];
    if (m && !m.hasOwnProperty("chainWatchers")) {
      return;
    } // nothing to do

    var nodes = m && m.chainWatchers;

    if (nodes && nodes[keyName]) {
      nodes = nodes[keyName];
      for (var i = 0, l = nodes.length; i < l; i++) {
        if (nodes[i] === node) {
          nodes.splice(i, 1);
          break;
        }
      }
    }
    (0, _emberMetalWatch_key.unwatchKey)(obj, keyName, m);
  }

  // A ChainNode watches a single key on an object. If you provide a starting
  // value for the key then the node won't actually watch it. For a root node
  // pass null for parent and key and object for value.
  function ChainNode(parent, key, value) {
    this._parent = parent;
    this._key = key;

    // _watching is true when calling get(this._parent, this._key) will
    // return the value of this node.
    //
    // It is false for the root of a chain (because we have no parent)
    // and for global paths (because the parent node is the object with
    // the observer on it)
    this._watching = value === undefined;

    this._value = value;
    this._paths = {};
    if (this._watching) {
      this._object = parent.value();
      if (this._object) {
        addChainWatcher(this._object, this._key, this);
      }
    }

    // Special-case: the EachProxy relies on immediate evaluation to
    // establish its observers.
    //
    // TODO: Replace this with an efficient callback that the EachProxy
    // can implement.
    if (this._parent && this._parent._key === "@each") {
      this.value();
    }
  }

  function lazyGet(obj, key) {
    if (!obj) {
      return;
    }

    var meta = obj["__ember_meta__"];
    // check if object meant only to be a prototype
    if (meta && meta.proto === obj) {
      return;
    }

    if (key === "@each") {
      return (0, _emberMetalProperty_get.get)(obj, key);
    }

    // if a CP only return cached value
    var possibleDesc = obj[key];
    var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;
    if (desc && desc._cacheable) {
      if (meta.cache && key in meta.cache) {
        return meta.cache[key];
      } else {
        return;
      }
    }

    return (0, _emberMetalProperty_get.get)(obj, key);
  }

  ChainNode.prototype = {
    value: function () {
      if (this._value === undefined && this._watching) {
        var obj = this._parent.value();
        this._value = lazyGet(obj, this._key);
      }
      return this._value;
    },

    destroy: function () {
      if (this._watching) {
        var obj = this._object;
        if (obj) {
          removeChainWatcher(obj, this._key, this);
        }
        this._watching = false; // so future calls do nothing
      }
    },

    // copies a top level object only
    copy: function (obj) {
      var ret = new ChainNode(null, null, obj);
      var paths = this._paths;
      var path;

      for (path in paths) {
        // this check will also catch non-number vals.
        if (paths[path] <= 0) {
          continue;
        }
        ret.add(path);
      }
      return ret;
    },

    // called on the root node of a chain to setup watchers on the specified
    // path.
    add: function (path) {
      var obj, tuple, key, src, paths;

      paths = this._paths;
      paths[path] = (paths[path] || 0) + 1;

      obj = this.value();
      tuple = (0, _emberMetalProperty_get.normalizeTuple)(obj, path);

      // the path was a local path
      if (tuple[0] && tuple[0] === obj) {
        path = tuple[1];
        key = firstKey(path);
        path = path.slice(key.length + 1);

        // global path, but object does not exist yet.
        // put into a queue and try to connect later.
      } else if (!tuple[0]) {
        pendingQueue.push([this, path]);
        tuple.length = 0;
        return;

        // global path, and object already exists
      } else {
        src = tuple[0];
        key = path.slice(0, 0 - (tuple[1].length + 1));
        path = tuple[1];
      }

      tuple.length = 0;
      this.chain(key, path, src);
    },

    // called on the root node of a chain to teardown watcher on the specified
    // path
    remove: function (path) {
      var obj, tuple, key, src, paths;

      paths = this._paths;
      if (paths[path] > 0) {
        paths[path]--;
      }

      obj = this.value();
      tuple = (0, _emberMetalProperty_get.normalizeTuple)(obj, path);
      if (tuple[0] === obj) {
        path = tuple[1];
        key = firstKey(path);
        path = path.slice(key.length + 1);
      } else {
        src = tuple[0];
        key = path.slice(0, 0 - (tuple[1].length + 1));
        path = tuple[1];
      }

      tuple.length = 0;
      this.unchain(key, path);
    },

    count: 0,

    chain: function (key, path, src) {
      var chains = this._chains;
      var node;
      if (!chains) {
        chains = this._chains = {};
      }

      node = chains[key];
      if (!node) {
        node = chains[key] = new ChainNode(this, key, src);
      }
      node.count++; // count chains...

      // chain rest of path if there is one
      if (path) {
        key = firstKey(path);
        path = path.slice(key.length + 1);
        node.chain(key, path); // NOTE: no src means it will observe changes...
      }
    },

    unchain: function (key, path) {
      var chains = this._chains;
      var node = chains[key];

      // unchain rest of path first...
      if (path && path.length > 1) {
        var nextKey = firstKey(path);
        var nextPath = path.slice(nextKey.length + 1);
        node.unchain(nextKey, nextPath);
      }

      // delete node if needed.
      node.count--;
      if (node.count <= 0) {
        delete chains[node._key];
        node.destroy();
      }
    },

    willChange: function (events) {
      var chains = this._chains;
      if (chains) {
        for (var key in chains) {
          if (!chains.hasOwnProperty(key)) {
            continue;
          }
          chains[key].willChange(events);
        }
      }

      if (this._parent) {
        this._parent.chainWillChange(this, this._key, 1, events);
      }
    },

    chainWillChange: function (chain, path, depth, events) {
      if (this._key) {
        path = this._key + "." + path;
      }

      if (this._parent) {
        this._parent.chainWillChange(this, path, depth + 1, events);
      } else {
        if (depth > 1) {
          events.push(this.value(), path);
        }
        path = "this." + path;
        if (this._paths[path] > 0) {
          events.push(this.value(), path);
        }
      }
    },

    chainDidChange: function (chain, path, depth, events) {
      if (this._key) {
        path = this._key + "." + path;
      }

      if (this._parent) {
        this._parent.chainDidChange(this, path, depth + 1, events);
      } else {
        if (depth > 1) {
          events.push(this.value(), path);
        }
        path = "this." + path;
        if (this._paths[path] > 0) {
          events.push(this.value(), path);
        }
      }
    },

    didChange: function (events) {
      // invalidate my own value first.
      if (this._watching) {
        var obj = this._parent.value();
        if (obj !== this._object) {
          removeChainWatcher(this._object, this._key, this);
          this._object = obj;
          addChainWatcher(obj, this._key, this);
        }
        this._value = undefined;

        // Special-case: the EachProxy relies on immediate evaluation to
        // establish its observers.
        if (this._parent && this._parent._key === "@each") {
          this.value();
        }
      }

      // then notify chains...
      var chains = this._chains;
      if (chains) {
        for (var key in chains) {
          if (!chains.hasOwnProperty(key)) {
            continue;
          }
          chains[key].didChange(events);
        }
      }

      // if no events are passed in then we only care about the above wiring update
      if (events === null) {
        return;
      }

      // and finally tell parent about my path changing...
      if (this._parent) {
        this._parent.chainDidChange(this, this._key, 1, events);
      }
    }
  };

  function finishChains(obj) {
    // We only create meta if we really have to
    var m = obj["__ember_meta__"];
    var chains, chainWatchers, chainNodes;

    if (m) {
      // finish any current chains node watchers that reference obj
      chainWatchers = m.chainWatchers;
      if (chainWatchers) {
        for (var key in chainWatchers) {
          if (!chainWatchers.hasOwnProperty(key)) {
            continue;
          }

          chainNodes = chainWatchers[key];
          if (chainNodes) {
            for (var i = 0, l = chainNodes.length; i < l; i++) {
              chainNodes[i].didChange(null);
            }
          }
        }
      }
      // copy chains from prototype
      chains = m.chains;
      if (chains && chains.value() !== obj) {
        (0, _emberMetalUtils.meta)(obj).chains = chains = chains.copy(obj);
      }
    }
  }

  exports.removeChainWatcher = removeChainWatcher;
  exports.ChainNode = ChainNode;
});
// warn, assert, etc;
enifed("ember-metal/computed", ["exports", "ember-metal/property_set", "ember-metal/utils", "ember-metal/expand_properties", "ember-metal/error", "ember-metal/properties", "ember-metal/property_events", "ember-metal/dependent_keys"], function (exports, _emberMetalProperty_set, _emberMetalUtils, _emberMetalExpand_properties, _emberMetalError, _emberMetalProperties, _emberMetalProperty_events, _emberMetalDependent_keys) {

  /**
  @module ember
  @submodule ember-metal
  */

  var metaFor = _emberMetalUtils.meta;

  function UNDEFINED() {}

  // ..........................................................
  // COMPUTED PROPERTY
  //

  /**
    A computed property transforms an object's function into a property.
  
    By default the function backing the computed property will only be called
    once and the result will be cached. You can specify various properties
    that your computed property depends on. This will force the cached
    result to be recomputed if the dependencies are modified.
  
    In the following example we declare a computed property (by calling
    `.property()` on the fullName function) and setup the property
    dependencies (depending on firstName and lastName). The fullName function
    will be called once (regardless of how many times it is accessed) as long
    as its dependencies have not changed. Once firstName or lastName are updated
    any future calls (or anything bound) to fullName will incorporate the new
    values.
  
    ```javascript
    var Person = Ember.Object.extend({
      // these will be supplied by `create`
      firstName: null,
      lastName: null,
  
      fullName: function() {
        var firstName = this.get('firstName');
        var lastName = this.get('lastName');
  
       return firstName + ' ' + lastName;
      }.property('firstName', 'lastName')
    });
  
    var tom = Person.create({
      firstName: 'Tom',
      lastName: 'Dale'
    });
  
    tom.get('fullName') // 'Tom Dale'
    ```
  
    You can also define what Ember should do when setting a computed property.
    If you try to set a computed property, it will be invoked with the key and
    value you want to set it to. You can also accept the previous value as the
    third parameter.
  
    ```javascript
    var Person = Ember.Object.extend({
      // these will be supplied by `create`
      firstName: null,
      lastName: null,
  
      fullName: function(key, value, oldValue) {
        // getter
        if (arguments.length === 1) {
          var firstName = this.get('firstName');
          var lastName = this.get('lastName');
  
          return firstName + ' ' + lastName;
  
        // setter
        } else {
          var name = value.split(' ');
  
          this.set('firstName', name[0]);
          this.set('lastName', name[1]);
  
          return value;
        }
      }.property('firstName', 'lastName')
    });
  
    var person = Person.create();
  
    person.set('fullName', 'Peter Wagenet');
    person.get('firstName'); // 'Peter'
    person.get('lastName');  // 'Wagenet'
    ```
  
    @class ComputedProperty
    @namespace Ember
    @constructor
    @public
  */
  function ComputedProperty(config, opts) {
    this.isDescriptor = true;
    if (typeof config === "function") {
      config.__ember_arity = config.length;
      this._getter = config;
      if (config.__ember_arity > 1) {
        Ember.deprecate("Using the same function as getter and setter is deprecated.", false, {
          url: "http://emberjs.com/deprecations/v1.x/#toc_deprecate-using-the-same-function-as-getter-and-setter-in-computed-properties"
        });
        this._setter = config;
      }
    } else {
      this._getter = config.get;
      this._setter = config.set;
      if (this._setter && this._setter.__ember_arity === undefined) {
        this._setter.__ember_arity = this._setter.length;
      }
    }

    this._dependentKeys = undefined;
    this._suspended = undefined;
    this._meta = undefined;

    Ember.deprecate("Passing opts.cacheable to the CP constructor is deprecated. Invoke `volatile()` on the CP instead.", !opts || !opts.hasOwnProperty("cacheable"));
    this._cacheable = opts && opts.cacheable !== undefined ? opts.cacheable : true; // TODO: Set always to `true` once this deprecation is gone.
    this._dependentKeys = opts && opts.dependentKeys;
    Ember.deprecate("Passing opts.readOnly to the CP constructor is deprecated. All CPs are writable by default. You can invoke `readOnly()` on the CP to change this.", !opts || !opts.hasOwnProperty("readOnly"));
    this._readOnly = opts && (opts.readOnly !== undefined || !!opts.readOnly) || false; // TODO: Set always to `false` once this deprecation is gone.
  }

  ComputedProperty.prototype = new _emberMetalProperties.Descriptor();

  var ComputedPropertyPrototype = ComputedProperty.prototype;

  /**
    Properties are cacheable by default. Computed property will automatically
    cache the return value of your function until one of the dependent keys changes.
  
    Call `volatile()` to set it into non-cached mode. When in this mode
    the computed property will not automatically cache the return value.
  
    However, if a property is properly observable, there is no reason to disable
    caching.
  
    @method cacheable
    @param {Boolean} aFlag optional set to `false` to disable caching
    @return {Ember.ComputedProperty} this
    @chainable
    @deprecated All computed properties are cacheble by default. Use `volatile()` instead to opt-out to caching.
    @public
  */
  ComputedPropertyPrototype.cacheable = function (aFlag) {
    Ember.deprecate("ComputedProperty.cacheable() is deprecated. All computed properties are cacheable by default.");
    this._cacheable = aFlag !== false;
    return this;
  };

  /**
    Call on a computed property to set it into non-cached mode. When in this
    mode the computed property will not automatically cache the return value.
  
    ```javascript
    var outsideService = Ember.Object.extend({
      value: function() {
        return OutsideService.getValue();
      }.property().volatile()
    }).create();
    ```
  
    @method volatile
    @return {Ember.ComputedProperty} this
    @chainable
    @public
  */
  ComputedPropertyPrototype["volatile"] = function () {
    this._cacheable = false;
    return this;
  };

  /**
    Call on a computed property to set it into read-only mode. When in this
    mode the computed property will throw an error when set.
  
    ```javascript
    var Person = Ember.Object.extend({
      guid: function() {
        return 'guid-guid-guid';
      }.property().readOnly()
    });
  
    var person = Person.create();
  
    person.set('guid', 'new-guid'); // will throw an exception
    ```
  
    @method readOnly
    @return {Ember.ComputedProperty} this
    @chainable
    @public
  */
  ComputedPropertyPrototype.readOnly = function (readOnly) {
    Ember.deprecate("Passing arguments to ComputedProperty.readOnly() is deprecated.", arguments.length === 0);
    this._readOnly = readOnly === undefined || !!readOnly; // Force to true once this deprecation is gone
    Ember.assert("Computed properties that define a setter using the new syntax cannot be read-only", !(this._readOnly && this._setter && this._setter !== this._getter));
    return this;
  };

  /**
    Sets the dependent keys on this computed property. Pass any number of
    arguments containing key paths that this computed property depends on.
  
    ```javascript
    var President = Ember.Object.extend({
      fullName: computed(function() {
        return this.get('firstName') + ' ' + this.get('lastName');
  
        // Tell Ember that this computed property depends on firstName
        // and lastName
      }).property('firstName', 'lastName')
    });
  
    var president = President.create({
      firstName: 'Barack',
      lastName: 'Obama'
    });
  
    president.get('fullName'); // 'Barack Obama'
    ```
  
    @method property
    @param {String} path* zero or more property paths
    @return {Ember.ComputedProperty} this
    @chainable
    @public
  */
  ComputedPropertyPrototype.property = function () {
    var args;

    var addArg = function (property) {
      args.push(property);
    };

    args = [];
    for (var i = 0, l = arguments.length; i < l; i++) {
      (0, _emberMetalExpand_properties["default"])(arguments[i], addArg);
    }

    this._dependentKeys = args;
    return this;
  };

  /**
    In some cases, you may want to annotate computed properties with additional
    metadata about how they function or what values they operate on. For example,
    computed property functions may close over variables that are then no longer
    available for introspection.
  
    You can pass a hash of these values to a computed property like this:
  
    ```
    person: function() {
      var personId = this.get('personId');
      return App.Person.create({ id: personId });
    }.property().meta({ type: App.Person })
    ```
  
    The hash that you pass to the `meta()` function will be saved on the
    computed property descriptor under the `_meta` key. Ember runtime
    exposes a public API for retrieving these values from classes,
    via the `metaForProperty()` function.
  
    @method meta
    @param {Object} meta
    @chainable
    @public
  */

  ComputedPropertyPrototype.meta = function (meta) {
    if (arguments.length === 0) {
      return this._meta || {};
    } else {
      this._meta = meta;
      return this;
    }
  };

  /* impl descriptor API */
  ComputedPropertyPrototype.didChange = function (obj, keyName) {
    // _suspended is set via a CP.set to ensure we don't clear
    // the cached value set by the setter
    if (this._cacheable && this._suspended !== obj) {
      var meta = metaFor(obj);
      if (meta.cache && meta.cache[keyName] !== undefined) {
        meta.cache[keyName] = undefined;
        (0, _emberMetalDependent_keys.removeDependentKeys)(this, obj, keyName, meta);
      }
    }
  };

  function finishChains(chainNodes) {
    for (var i = 0, l = chainNodes.length; i < l; i++) {
      chainNodes[i].didChange(null);
    }
  }

  /**
    Access the value of the function backing the computed property.
    If this property has already been cached, return the cached result.
    Otherwise, call the function passing the property name as an argument.
  
    ```javascript
    var Person = Ember.Object.extend({
      fullName: function(keyName) {
        // the keyName parameter is 'fullName' in this case.
        return this.get('firstName') + ' ' + this.get('lastName');
      }.property('firstName', 'lastName')
    });
  
  
    var tom = Person.create({
      firstName: 'Tom',
      lastName: 'Dale'
    });
  
    tom.get('fullName') // 'Tom Dale'
    ```
  
    @method get
    @param {String} keyName The key being accessed.
    @return {Object} The return value of the function backing the CP.
    @public
  */
  ComputedPropertyPrototype.get = function (obj, keyName) {
    var ret, cache, meta, chainNodes;
    if (this._cacheable) {
      meta = metaFor(obj);
      cache = meta.cache;

      var result = cache && cache[keyName];

      if (result === UNDEFINED) {
        return undefined;
      } else if (result !== undefined) {
        return result;
      }

      ret = this._getter.call(obj, keyName);
      cache = meta.cache;
      if (!cache) {
        cache = meta.cache = {};
      }
      if (ret === undefined) {
        cache[keyName] = UNDEFINED;
      } else {
        cache[keyName] = ret;
      }

      chainNodes = meta.chainWatchers && meta.chainWatchers[keyName];
      if (chainNodes) {
        finishChains(chainNodes);
      }
      (0, _emberMetalDependent_keys.addDependentKeys)(this, obj, keyName, meta);
    } else {
      ret = this._getter.call(obj, keyName);
    }
    return ret;
  };

  /**
    Set the value of a computed property. If the function that backs your
    computed property does not accept arguments then the default action for
    setting would be to define the property on the current object, and set
    the value of the property to the value being set.
  
    Generally speaking if you intend for your computed property to be set
    your backing function should accept either two or three arguments.
  
    ```javascript
    var Person = Ember.Object.extend({
      // these will be supplied by `create`
      firstName: null,
      lastName: null,
  
      fullName: function(key, value, oldValue) {
        // getter
        if (arguments.length === 1) {
          var firstName = this.get('firstName');
          var lastName = this.get('lastName');
  
          return firstName + ' ' + lastName;
  
        // setter
        } else {
          var name = value.split(' ');
  
          this.set('firstName', name[0]);
          this.set('lastName', name[1]);
  
          return value;
        }
      }.property('firstName', 'lastName')
    });
  
    var person = Person.create();
  
    person.set('fullName', 'Peter Wagenet');
    person.get('firstName'); // 'Peter'
    person.get('lastName');  // 'Wagenet'
    ```
  
    @method set
    @param {String} keyName The key being accessed.
    @param {Object} newValue The new value being assigned.
    @param {String} oldValue The old value being replaced.
    @return {Object} The return value of the function backing the CP.
    @public
  */
  ComputedPropertyPrototype.set = function computedPropertySetWithSuspend(obj, keyName, value) {
    var oldSuspended = this._suspended;

    this._suspended = obj;

    try {
      this._set(obj, keyName, value);
    } finally {
      this._suspended = oldSuspended;
    }
  };

  ComputedPropertyPrototype._set = function computedPropertySet(obj, keyName, value) {
    var cacheable = this._cacheable;
    var setter = this._setter;
    var meta = metaFor(obj, cacheable);
    var cache = meta.cache;
    var hadCachedValue = false;

    var cachedValue, ret;

    if (this._readOnly) {
      throw new _emberMetalError["default"]("Cannot set read-only property \"" + keyName + "\" on object: " + (0, _emberMetalUtils.inspect)(obj));
    }

    if (cacheable && cache && cache[keyName] !== undefined) {
      if (cache[keyName] !== UNDEFINED) {
        cachedValue = cache[keyName];
      }

      hadCachedValue = true;
    }

    if (!setter) {
      (0, _emberMetalProperties.defineProperty)(obj, keyName, null, cachedValue);
      (0, _emberMetalProperty_set.set)(obj, keyName, value);
      return;
    } else if (setter.__ember_arity === 2) {
      // Is there any way of deprecate this in a sensitive way?
      // Maybe now that getters and setters are the prefered options we can....
      ret = setter.call(obj, keyName, value);
    } else {
      ret = setter.call(obj, keyName, value, cachedValue);
    }

    if (hadCachedValue && cachedValue === ret) {
      return;
    }

    var watched = meta.watching[keyName];
    if (watched) {
      (0, _emberMetalProperty_events.propertyWillChange)(obj, keyName);
    }

    if (hadCachedValue) {
      cache[keyName] = undefined;
    }

    if (cacheable) {
      if (!hadCachedValue) {
        (0, _emberMetalDependent_keys.addDependentKeys)(this, obj, keyName, meta);
      }
      if (!cache) {
        cache = meta.cache = {};
      }
      if (ret === undefined) {
        cache[keyName] = UNDEFINED;
      } else {
        cache[keyName] = ret;
      }
    }

    if (watched) {
      (0, _emberMetalProperty_events.propertyDidChange)(obj, keyName);
    }

    return ret;
  };

  /* called before property is overridden */
  ComputedPropertyPrototype.teardown = function (obj, keyName) {
    var meta = metaFor(obj);

    if (meta.cache) {
      if (keyName in meta.cache) {
        (0, _emberMetalDependent_keys.removeDependentKeys)(this, obj, keyName, meta);
      }

      if (this._cacheable) {
        delete meta.cache[keyName];
      }
    }

    return null; // no value to restore
  };

  /**
    This helper returns a new property descriptor that wraps the passed
    computed property function. You can use this helper to define properties
    with mixins or via `Ember.defineProperty()`.
  
    The function you pass will be used to both get and set property values.
    The function should accept two parameters, key and value. If value is not
    undefined you should set the value first. In either case return the
    current value of the property.
  
    A computed property defined in this way might look like this:
  
    ```js
    var Person = Ember.Object.extend({
      firstName: 'Betty',
      lastName: 'Jones',
  
      fullName: Ember.computed('firstName', 'lastName', function(key, value) {
        return this.get('firstName') + ' ' + this.get('lastName');
      })
    });
  
    var client = Person.create();
  
    client.get('fullName'); // 'Betty Jones'
  
    client.set('lastName', 'Fuller');
    client.get('fullName'); // 'Betty Fuller'
    ```
  
    _Note: This is the preferred way to define computed properties when writing third-party
    libraries that depend on or use Ember, since there is no guarantee that the user
    will have prototype extensions enabled._
  
    You might use this method if you disabled
    [Prototype Extensions](http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/).
    The alternative syntax might look like this
    (if prototype extensions are enabled, which is the default behavior):
  
    ```js
    fullName: function () {
      return this.get('firstName') + ' ' + this.get('lastName');
    }.property('firstName', 'lastName')
    ```
  
    @class computed
    @namespace Ember
    @constructor
    @static
    @param {String} [dependentKeys*] Optional dependent keys that trigger this computed property.
    @param {Function} func The computed property function.
    @return {Ember.ComputedProperty} property descriptor instance
    @public
  */
  function computed(func) {
    var args;

    if (arguments.length > 1) {
      args = [].slice.call(arguments);
      func = args.pop();
    }

    var cp = new ComputedProperty(func);

    if (args) {
      cp.property.apply(cp, args);
    }

    return cp;
  }

  /**
    Returns the cached value for a property, if one exists.
    This can be useful for peeking at the value of a computed
    property that is generated lazily, without accidentally causing
    it to be created.
  
    @method cacheFor
    @for Ember
    @param {Object} obj the object whose property you want to check
    @param {String} key the name of the property whose cached value you want
      to return
    @return {Object} the cached value
    @public
  */
  function cacheFor(obj, key) {
    var meta = obj["__ember_meta__"];
    var cache = meta && meta.cache;
    var ret = cache && cache[key];

    if (ret === UNDEFINED) {
      return undefined;
    }
    return ret;
  }

  cacheFor.set = function (cache, key, value) {
    if (value === undefined) {
      cache[key] = UNDEFINED;
    } else {
      cache[key] = value;
    }
  };

  cacheFor.get = function (cache, key) {
    var ret = cache[key];
    if (ret === UNDEFINED) {
      return undefined;
    }
    return ret;
  };

  cacheFor.remove = function (cache, key) {
    cache[key] = undefined;
  };

  exports.ComputedProperty = ComputedProperty;
  exports.computed = computed;
  exports.cacheFor = cacheFor;
});
enifed("ember-metal/computed_macros", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/computed", "ember-metal/is_empty", "ember-metal/is_none", "ember-metal/alias"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalComputed, _emberMetalIs_empty, _emberMetalIs_none, _emberMetalAlias) {
  exports.empty = empty;
  exports.notEmpty = notEmpty;
  exports.none = none;
  exports.not = not;
  exports.bool = bool;
  exports.match = match;
  exports.equal = equal;
  exports.gt = gt;
  exports.gte = gte;
  exports.lt = lt;
  exports.lte = lte;
  exports.oneWay = oneWay;
  exports.readOnly = readOnly;
  exports.defaultTo = defaultTo;
  exports.deprecatingAlias = deprecatingAlias;

  /**
  @module ember
  @submodule ember-metal
  */

  function getProperties(self, propertyNames) {
    var ret = {};
    for (var i = 0; i < propertyNames.length; i++) {
      ret[propertyNames[i]] = (0, _emberMetalProperty_get.get)(self, propertyNames[i]);
    }
    return ret;
  }

  function generateComputedWithProperties(macro) {
    return function () {
      for (var _len = arguments.length, properties = Array(_len), _key = 0; _key < _len; _key++) {
        properties[_key] = arguments[_key];
      }

      var computedFunc = (0, _emberMetalComputed.computed)(function () {
        return macro.apply(this, [getProperties(this, properties)]);
      });

      return computedFunc.property.apply(computedFunc, properties);
    };
  }

  /**
    A computed property that returns true if the value of the dependent
    property is null, an empty string, empty array, or empty function.
  
    Example
  
    ```javascript
    var ToDoList = Ember.Object.extend({
      isDone: Ember.computed.empty('todos')
    });
  
    var todoList = ToDoList.create({
      todos: ['Unit Test', 'Documentation', 'Release']
    });
  
    todoList.get('isDone'); // false
    todoList.get('todos').clear();
    todoList.get('isDone'); // true
    ```
  
    @since 1.6.0
    @method empty
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which negate
    the original value for property
    @public
  */

  function empty(dependentKey) {
    return (0, _emberMetalComputed.computed)(dependentKey + ".length", function () {
      return (0, _emberMetalIs_empty["default"])((0, _emberMetalProperty_get.get)(this, dependentKey));
    });
  }

  /**
    A computed property that returns true if the value of the dependent
    property is NOT null, an empty string, empty array, or empty function.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      hasStuff: Ember.computed.notEmpty('backpack')
    });
  
    var hamster = Hamster.create({ backpack: ['Food', 'Sleeping Bag', 'Tent'] });
  
    hamster.get('hasStuff');         // true
    hamster.get('backpack').clear(); // []
    hamster.get('hasStuff');         // false
    ```
  
    @method notEmpty
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which returns true if
    original value for property is not empty.
    @public
  */

  function notEmpty(dependentKey) {
    return (0, _emberMetalComputed.computed)(dependentKey + ".length", function () {
      return !(0, _emberMetalIs_empty["default"])((0, _emberMetalProperty_get.get)(this, dependentKey));
    });
  }

  /**
    A computed property that returns true if the value of the dependent
    property is null or undefined. This avoids errors from JSLint complaining
    about use of ==, which can be technically confusing.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      isHungry: Ember.computed.none('food')
    });
  
    var hamster = Hamster.create();
  
    hamster.get('isHungry'); // true
    hamster.set('food', 'Banana');
    hamster.get('isHungry'); // false
    hamster.set('food', null);
    hamster.get('isHungry'); // true
    ```
  
    @method none
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which
    returns true if original value for property is null or undefined.
    @public
  */

  function none(dependentKey) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      return (0, _emberMetalIs_none["default"])((0, _emberMetalProperty_get.get)(this, dependentKey));
    });
  }

  /**
    A computed property that returns the inverse boolean value
    of the original value for the dependent property.
  
    Example
  
    ```javascript
    var User = Ember.Object.extend({
      isAnonymous: Ember.computed.not('loggedIn')
    });
  
    var user = User.create({loggedIn: false});
  
    user.get('isAnonymous'); // true
    user.set('loggedIn', true);
    user.get('isAnonymous'); // false
    ```
  
    @method not
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which returns
    inverse of the original value for property
    @public
  */

  function not(dependentKey) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      return !(0, _emberMetalProperty_get.get)(this, dependentKey);
    });
  }

  /**
    A computed property that converts the provided dependent property
    into a boolean value.
  
    ```javascript
    var Hamster = Ember.Object.extend({
      hasBananas: Ember.computed.bool('numBananas')
    });
  
    var hamster = Hamster.create();
  
    hamster.get('hasBananas'); // false
    hamster.set('numBananas', 0);
    hamster.get('hasBananas'); // false
    hamster.set('numBananas', 1);
    hamster.get('hasBananas'); // true
    hamster.set('numBananas', null);
    hamster.get('hasBananas'); // false
    ```
  
    @method bool
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which converts
    to boolean the original value for property
    @public
  */

  function bool(dependentKey) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      return !!(0, _emberMetalProperty_get.get)(this, dependentKey);
    });
  }

  /**
    A computed property which matches the original value for the
    dependent property against a given RegExp, returning `true`
    if they values matches the RegExp and `false` if it does not.
  
    Example
  
    ```javascript
    var User = Ember.Object.extend({
      hasValidEmail: Ember.computed.match('email', /^.+@.+\..+$/)
    });
  
    var user = User.create({loggedIn: false});
  
    user.get('hasValidEmail'); // false
    user.set('email', '');
    user.get('hasValidEmail'); // false
    user.set('email', 'ember_hamster@example.com');
    user.get('hasValidEmail'); // true
    ```
  
    @method match
    @for Ember.computed
    @param {String} dependentKey
    @param {RegExp} regexp
    @return {Ember.ComputedProperty} computed property which match
    the original value for property against a given RegExp
    @public
  */

  function match(dependentKey, regexp) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      var value = (0, _emberMetalProperty_get.get)(this, dependentKey);

      return typeof value === "string" ? regexp.test(value) : false;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is equal to the given value.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      napTime: Ember.computed.equal('state', 'sleepy')
    });
  
    var hamster = Hamster.create();
  
    hamster.get('napTime'); // false
    hamster.set('state', 'sleepy');
    hamster.get('napTime'); // true
    hamster.set('state', 'hungry');
    hamster.get('napTime'); // false
    ```
  
    @method equal
    @for Ember.computed
    @param {String} dependentKey
    @param {String|Number|Object} value
    @return {Ember.ComputedProperty} computed property which returns true if
    the original value for property is equal to the given value.
    @public
  */

  function equal(dependentKey, value) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      return (0, _emberMetalProperty_get.get)(this, dependentKey) === value;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is greater than the provided value.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      hasTooManyBananas: Ember.computed.gt('numBananas', 10)
    });
  
    var hamster = Hamster.create();
  
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 11);
    hamster.get('hasTooManyBananas'); // true
    ```
  
    @method gt
    @for Ember.computed
    @param {String} dependentKey
    @param {Number} value
    @return {Ember.ComputedProperty} computed property which returns true if
    the original value for property is greater than given value.
    @public
  */

  function gt(dependentKey, value) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      return (0, _emberMetalProperty_get.get)(this, dependentKey) > value;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is greater than or equal to the provided value.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      hasTooManyBananas: Ember.computed.gte('numBananas', 10)
    });
  
    var hamster = Hamster.create();
  
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 10);
    hamster.get('hasTooManyBananas'); // true
    ```
  
    @method gte
    @for Ember.computed
    @param {String} dependentKey
    @param {Number} value
    @return {Ember.ComputedProperty} computed property which returns true if
    the original value for property is greater or equal then given value.
    @public
  */

  function gte(dependentKey, value) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      return (0, _emberMetalProperty_get.get)(this, dependentKey) >= value;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is less than the provided value.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      needsMoreBananas: Ember.computed.lt('numBananas', 3)
    });
  
    var hamster = Hamster.create();
  
    hamster.get('needsMoreBananas'); // true
    hamster.set('numBananas', 3);
    hamster.get('needsMoreBananas'); // false
    hamster.set('numBananas', 2);
    hamster.get('needsMoreBananas'); // true
    ```
  
    @method lt
    @for Ember.computed
    @param {String} dependentKey
    @param {Number} value
    @return {Ember.ComputedProperty} computed property which returns true if
    the original value for property is less then given value.
    @public
  */

  function lt(dependentKey, value) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      return (0, _emberMetalProperty_get.get)(this, dependentKey) < value;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is less than or equal to the provided value.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      needsMoreBananas: Ember.computed.lte('numBananas', 3)
    });
  
    var hamster = Hamster.create();
  
    hamster.get('needsMoreBananas'); // true
    hamster.set('numBananas', 5);
    hamster.get('needsMoreBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('needsMoreBananas'); // true
    ```
  
    @method lte
    @for Ember.computed
    @param {String} dependentKey
    @param {Number} value
    @return {Ember.ComputedProperty} computed property which returns true if
    the original value for property is less or equal than given value.
    @public
  */

  function lte(dependentKey, value) {
    return (0, _emberMetalComputed.computed)(dependentKey, function () {
      return (0, _emberMetalProperty_get.get)(this, dependentKey) <= value;
    });
  }

  /**
    A computed property that performs a logical `and` on the
    original values for the provided dependent properties.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      readyForCamp: Ember.computed.and('hasTent', 'hasBackpack')
    });
  
    var hamster = Hamster.create();
  
    hamster.get('readyForCamp'); // false
    hamster.set('hasTent', true);
    hamster.get('readyForCamp'); // false
    hamster.set('hasBackpack', true);
    hamster.get('readyForCamp'); // true
    hamster.set('hasBackpack', 'Yes');
    hamster.get('readyForCamp'); // 'Yes'
    ```
  
    @method and
    @for Ember.computed
    @param {String} dependentKey*
    @return {Ember.ComputedProperty} computed property which performs
    a logical `and` on the values of all the original values for properties.
    @public
  */
  var and = generateComputedWithProperties(function (properties) {
    var value;
    for (var key in properties) {
      value = properties[key];
      if (properties.hasOwnProperty(key) && !value) {
        return false;
      }
    }
    return value;
  });

  exports.and = and;
  /**
    A computed property which performs a logical `or` on the
    original values for the provided dependent properties.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      readyForRain: Ember.computed.or('hasJacket', 'hasUmbrella')
    });
  
    var hamster = Hamster.create();
  
    hamster.get('readyForRain'); // false
    hamster.set('hasUmbrella', true);
    hamster.get('readyForRain'); // true
    hamster.set('hasJacket', 'Yes');
    hamster.get('readyForRain'); // 'Yes'
    ```
  
    @method or
    @for Ember.computed
    @param {String} dependentKey*
    @return {Ember.ComputedProperty} computed property which performs
    a logical `or` on the values of all the original values for properties.
    @public
  */
  var or = generateComputedWithProperties(function (properties) {
    for (var key in properties) {
      if (properties.hasOwnProperty(key) && properties[key]) {
        return properties[key];
      }
    }
    return false;
  });

  exports.or = or;
  /**
    A computed property that returns the first truthy value
    from a list of dependent properties.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      hasClothes: Ember.computed.any('hat', 'shirt')
    });
  
    var hamster = Hamster.create();
  
    hamster.get('hasClothes'); // null
    hamster.set('shirt', 'Hawaiian Shirt');
    hamster.get('hasClothes'); // 'Hawaiian Shirt'
    ```
  
    @method any
    @for Ember.computed
    @param {String} dependentKey*
    @return {Ember.ComputedProperty} computed property which returns
    the first truthy value of given list of properties.
    @deprecated Use `Ember.computed.or` instead.
    @public
  */
  var any = generateComputedWithProperties(function (properties) {
    _emberMetalCore["default"].deprecate("Usage of Ember.computed.any is deprecated, use `Ember.computed.or` instead.");
    for (var key in properties) {
      if (properties.hasOwnProperty(key) && properties[key]) {
        return properties[key];
      }
    }
    return null;
  });

  exports.any = any;
  /**
    A computed property that returns the array of values
    for the provided dependent properties.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      clothes: Ember.computed.collect('hat', 'shirt')
    });
  
    var hamster = Hamster.create();
  
    hamster.get('clothes'); // [null, null]
    hamster.set('hat', 'Camp Hat');
    hamster.set('shirt', 'Camp Shirt');
    hamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']
    ```
  
    @method collect
    @for Ember.computed
    @param {String} dependentKey*
    @return {Ember.ComputedProperty} computed property which maps
    values of all passed in properties to an array.
    @public
  */
  var collect = generateComputedWithProperties(function (properties) {
    var res = _emberMetalCore["default"].A();
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        if ((0, _emberMetalIs_none["default"])(properties[key])) {
          res.push(null);
        } else {
          res.push(properties[key]);
        }
      }
    }
    return res;
  });

  exports.collect = collect;
  /**
    Creates a new property that is an alias for another property
    on an object. Calls to `get` or `set` this property behave as
    though they were called on the original property.
  
    ```javascript
    var Person = Ember.Object.extend({
      name: 'Alex Matchneer',
      nomen: Ember.computed.alias('name')
    });
  
    var alex = Person.create();
  
    alex.get('nomen'); // 'Alex Matchneer'
    alex.get('name');  // 'Alex Matchneer'
  
    alex.set('nomen', '@machty');
    alex.get('name');  // '@machty'
    ```
  
    @method alias
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which creates an
    alias to the original value for property.
    @public
  */

  /**
    Where `computed.alias` aliases `get` and `set`, and allows for bidirectional
    data flow, `computed.oneWay` only provides an aliased `get`. The `set` will
    not mutate the upstream property, rather causes the current property to
    become the value set. This causes the downstream property to permanently
    diverge from the upstream property.
  
    Example
  
    ```javascript
    var User = Ember.Object.extend({
      firstName: null,
      lastName: null,
      nickName: Ember.computed.oneWay('firstName')
    });
  
    var teddy = User.create({
      firstName: 'Teddy',
      lastName:  'Zeenny'
    });
  
    teddy.get('nickName');              // 'Teddy'
    teddy.set('nickName', 'TeddyBear'); // 'TeddyBear'
    teddy.get('firstName');             // 'Teddy'
    ```
  
    @method oneWay
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which creates a
    one way computed property to the original value for property.
    @public
  */

  function oneWay(dependentKey) {
    return (0, _emberMetalAlias["default"])(dependentKey).oneWay();
  }

  /**
    This is a more semantically meaningful alias of `computed.oneWay`,
    whose name is somewhat ambiguous as to which direction the data flows.
  
    @method reads
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which creates a
      one way computed property to the original value for property.
    @public
   */

  /**
    Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides
    a readOnly one way binding. Very often when using `computed.oneWay` one does
    not also want changes to propagate back up, as they will replace the value.
  
    This prevents the reverse flow, and also throws an exception when it occurs.
  
    Example
  
    ```javascript
    var User = Ember.Object.extend({
      firstName: null,
      lastName: null,
      nickName: Ember.computed.readOnly('firstName')
    });
  
    var teddy = User.create({
      firstName: 'Teddy',
      lastName:  'Zeenny'
    });
  
    teddy.get('nickName');              // 'Teddy'
    teddy.set('nickName', 'TeddyBear'); // throws Exception
    // throw new Ember.Error('Cannot Set: nickName on: <User:ember27288>' );`
    teddy.get('firstName');             // 'Teddy'
    ```
  
    @method readOnly
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which creates a
    one way computed property to the original value for property.
    @since 1.5.0
    @public
  */

  function readOnly(dependentKey) {
    return (0, _emberMetalAlias["default"])(dependentKey).readOnly();
  }

  /**
    A computed property that acts like a standard getter and setter,
    but returns the value at the provided `defaultPath` if the
    property itself has not been set to a value
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      wishList: Ember.computed.defaultTo('favoriteFood')
    });
  
    var hamster = Hamster.create({ favoriteFood: 'Banana' });
  
    hamster.get('wishList');                     // 'Banana'
    hamster.set('wishList', 'More Unit Tests');
    hamster.get('wishList');                     // 'More Unit Tests'
    hamster.get('favoriteFood');                 // 'Banana'
    ```
  
    @method defaultTo
    @for Ember.computed
    @param {String} defaultPath
    @return {Ember.ComputedProperty} computed property which acts like
    a standard getter and setter, but defaults to the value from `defaultPath`.
    @deprecated Use `Ember.computed.oneWay` or custom CP with default instead.
    @public
  */

  function defaultTo(defaultPath) {
    return (0, _emberMetalComputed.computed)({
      get: function (key) {
        _emberMetalCore["default"].deprecate("Usage of Ember.computed.defaultTo is deprecated, use `Ember.computed.oneWay` instead.");
        return (0, _emberMetalProperty_get.get)(this, defaultPath);
      },

      set: function (key, newValue, cachedValue) {
        _emberMetalCore["default"].deprecate("Usage of Ember.computed.defaultTo is deprecated, use `Ember.computed.oneWay` instead.");
        return newValue != null ? newValue : (0, _emberMetalProperty_get.get)(this, defaultPath);
      }
    });
  }

  /**
    Creates a new property that is an alias for another property
    on an object. Calls to `get` or `set` this property behave as
    though they were called on the original property, but also
    print a deprecation warning.
  
    @method deprecatingAlias
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computed property which creates an
    alias with a deprecation to the original value for property.
    @since 1.7.0
    @public
  */

  function deprecatingAlias(dependentKey) {
    return (0, _emberMetalComputed.computed)(dependentKey, {
      get: function (key) {
        _emberMetalCore["default"].deprecate("Usage of `" + key + "` is deprecated, use `" + dependentKey + "` instead.");
        return (0, _emberMetalProperty_get.get)(this, dependentKey);
      },
      set: function (key, value) {
        _emberMetalCore["default"].deprecate("Usage of `" + key + "` is deprecated, use `" + dependentKey + "` instead.");
        (0, _emberMetalProperty_set.set)(this, dependentKey, value);
        return value;
      }
    });
  }
});
enifed('ember-metal/core', ['exports'], function (exports) {
  /*globals Ember:true,ENV,EmberENV */

  /**
  @module ember
  @submodule ember-metal
  */

  /**
    This namespace contains all Ember methods and functions. Future versions of
    Ember may overwrite this namespace and therefore, you should avoid adding any
    new properties.
  
    You can also use the shorthand `Em` instead of `Ember`.
  
    At the heart of Ember is Ember-Runtime, a set of core functions that provide
    cross-platform compatibility and object property observing.  Ember-Runtime is
    small and performance-focused so you can use it alongside other
    cross-platform libraries such as jQuery. For more details, see
    [Ember-Runtime](http://emberjs.com/api/modules/ember-runtime.html).
  
    @class Ember
    @static
    @version 1.13.2
    @public
  */

  if ('undefined' === typeof Ember) {
    // Create core object. Make it act like an instance of Ember.Namespace so that
    // objects assigned to it are given a sane string representation.
    Ember = {};
  }

  // Default imports, exports and lookup to the global object;
  var global = mainContext || {}; // jshint ignore:line
  Ember.imports = Ember.imports || global;
  Ember.lookup = Ember.lookup || global;
  var emExports = Ember.exports = Ember.exports || global;

  // aliases needed to keep minifiers from removing the global context
  emExports.Em = emExports.Ember = Ember;

  // Make sure these are set whether Ember was already defined or not

  Ember.isNamespace = true;

  Ember.toString = function () {
    return 'Ember';
  };

  /**
    The semantic version.
  
    @property VERSION
    @type String
    @default '1.13.2'
    @static
    @public
  */
  Ember.VERSION = '1.13.2';

  /**
    The hash of environment variables used to control various configuration
    settings. To specify your own or override default settings, add the
    desired properties to a global hash named `EmberENV` (or `ENV` for
    backwards compatibility with earlier versions of Ember). The `EmberENV`
    hash must be created before loading Ember.
  
    @property ENV
    @type Object
    @public
  */

  if (Ember.ENV) {
    // do nothing if Ember.ENV is already setup
    Ember.assert('Ember.ENV should be an object.', 'object' !== typeof Ember.ENV);
  } else if ('undefined' !== typeof EmberENV) {
    Ember.ENV = EmberENV;
  } else if ('undefined' !== typeof ENV) {
    Ember.ENV = ENV;
  } else {
    Ember.ENV = {};
  }

  Ember.config = Ember.config || {};

  // We disable the RANGE API by default for performance reasons
  if ('undefined' === typeof Ember.ENV.DISABLE_RANGE_API) {
    Ember.ENV.DISABLE_RANGE_API = true;
  }

  /**
    The hash of enabled Canary features. Add to this, any canary features
    before creating your application.
  
    Alternatively (and recommended), you can also define `EmberENV.FEATURES`
    if you need to enable features flagged at runtime.
  
    @class FEATURES
    @namespace Ember
    @static
    @since 1.1.0
    @public
  */
  Ember.FEATURES = {"features-stripped-test":false,"ember-routing-named-substates":true,"mandatory-setter":true,"ember-htmlbars-component-generation":false,"ember-htmlbars-component-helper":true,"ember-htmlbars-inline-if-helper":true,"ember-htmlbars-attribute-syntax":true,"ember-routing-transitioning-classes":true,"ember-testing-checkbox-helpers":false,"ember-metal-stream":false,"ember-application-instance-initializers":true,"ember-application-initializer-context":true,"ember-router-willtransition":true,"ember-application-visit":false,"ember-views-component-block-info":true,"ember-routing-core-outlet":false,"ember-libraries-isregistered":false,"ember-routing-htmlbars-improved-actions":true,"ember-htmlbars-get-helper":false,"ember-htmlbars-helper":true,"ember-htmlbars-dashless-helpers":true}; //jshint ignore:line

  if (Ember.ENV.FEATURES) {
    for (var feature in Ember.ENV.FEATURES) {
      if (Ember.ENV.FEATURES.hasOwnProperty(feature)) {
        Ember.FEATURES[feature] = Ember.ENV.FEATURES[feature];
      }
    }
  }

  /**
    Determine whether the specified `feature` is enabled. Used by Ember's
    build tools to exclude experimental features from beta/stable builds.
  
    You can define the following configuration options:
  
    * `EmberENV.ENABLE_ALL_FEATURES` - force all features to be enabled.
    * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
      enabled/disabled.
  
    @method isEnabled
    @param {String} feature The feature to check
    @return {Boolean}
    @for Ember.FEATURES
    @since 1.1.0
    @public
  */

  Ember.FEATURES.isEnabled = function (feature) {
    var featureValue = Ember.FEATURES[feature];

    if (Ember.ENV.ENABLE_ALL_FEATURES) {
      return true;
    } else if (featureValue === true || featureValue === false || featureValue === undefined) {
      return featureValue;
    } else if (Ember.ENV.ENABLE_OPTIONAL_FEATURES) {
      return true;
    } else {
      return false;
    }
  };

  // ..........................................................
  // BOOTSTRAP
  //

  /**
    Determines whether Ember should add to `Array`, `Function`, and `String`
    native object prototypes, a few extra methods in order to provide a more
    friendly API.
  
    We generally recommend leaving this option set to true however, if you need
    to turn it off, you can add the configuration property
    `EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.
  
    Note, when disabled (the default configuration for Ember Addons), you will
    instead have to access all methods and functions from the Ember
    namespace.
  
    @property EXTEND_PROTOTYPES
    @type Boolean
    @default true
    @for Ember
    @public
  */
  Ember.EXTEND_PROTOTYPES = Ember.ENV.EXTEND_PROTOTYPES;

  if (typeof Ember.EXTEND_PROTOTYPES === 'undefined') {
    Ember.EXTEND_PROTOTYPES = true;
  }

  /**
    The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log
    a full stack trace during deprecation warnings.
  
    @property LOG_STACKTRACE_ON_DEPRECATION
    @type Boolean
    @default true
    @public
  */
  Ember.LOG_STACKTRACE_ON_DEPRECATION = Ember.ENV.LOG_STACKTRACE_ON_DEPRECATION !== false;

  /**
    The `SHIM_ES5` property, when true, tells Ember to add ECMAScript 5 Array
    shims to older browsers.
  
    @property SHIM_ES5
    @type Boolean
    @default Ember.EXTEND_PROTOTYPES
    @public
  */
  Ember.SHIM_ES5 = Ember.ENV.SHIM_ES5 === false ? false : Ember.EXTEND_PROTOTYPES;

  /**
    The `LOG_VERSION` property, when true, tells Ember to log versions of all
    dependent libraries in use.
  
    @property LOG_VERSION
    @type Boolean
    @default true
    @public
  */
  Ember.LOG_VERSION = Ember.ENV.LOG_VERSION === false ? false : true;

  /**
    An empty function useful for some operations. Always returns `this`.
  
    @method K
    @private
    @return {Object}
    @public
  */
  function K() {
    return this;
  }
  exports.K = K;

  Ember.K = K;
  //TODO: ES6 GLOBAL TODO

  // Stub out the methods defined by the ember-debug package in case it's not loaded

  if ('undefined' === typeof Ember.assert) {
    Ember.assert = K;
  }
  if ('undefined' === typeof Ember.warn) {
    Ember.warn = K;
  }
  if ('undefined' === typeof Ember.debug) {
    Ember.debug = K;
  }
  if ('undefined' === typeof Ember.runInDebug) {
    Ember.runInDebug = K;
  }
  if ('undefined' === typeof Ember.deprecate) {
    Ember.deprecate = K;
  }
  if ('undefined' === typeof Ember.deprecateFunc) {
    Ember.deprecateFunc = function (_, func) {
      return func;
    };
  }

  exports["default"] = Ember;
});
enifed("ember-metal/dependent_keys", ["exports", "ember-metal/platform/create", "ember-metal/watching"], function (exports, _emberMetalPlatformCreate, _emberMetalWatching) {
  exports.addDependentKeys = addDependentKeys;
  exports.removeDependentKeys = removeDependentKeys;
  // Remove "use strict"; from transpiled module until
  // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed
  //
  "REMOVE_USE_STRICT: true";

  /**
  @module ember
  @submodule ember-metal
  */

  // ..........................................................
  // DEPENDENT KEYS
  //

  // data structure:
  //  meta.deps = {
  //    'depKey': {
  //      'keyName': count,
  //    }
  //  }

  /*
    This function returns a map of unique dependencies for a
    given object and key.
  */
  function keysForDep(depsMeta, depKey) {
    var keys = depsMeta[depKey];
    if (!keys) {
      // if there are no dependencies yet for a the given key
      // create a new empty list of dependencies for the key
      keys = depsMeta[depKey] = {};
    } else if (!depsMeta.hasOwnProperty(depKey)) {
      // otherwise if the dependency list is inherited from
      // a superclass, clone the hash
      keys = depsMeta[depKey] = (0, _emberMetalPlatformCreate["default"])(keys);
    }
    return keys;
  }

  function metaForDeps(meta) {
    return keysForDep(meta, "deps");
  }

  function addDependentKeys(desc, obj, keyName, meta) {
    // the descriptor has a list of dependent keys, so
    // add all of its dependent keys.
    var depsMeta, idx, len, depKey, keys;
    var depKeys = desc._dependentKeys;
    if (!depKeys) {
      return;
    }

    depsMeta = metaForDeps(meta);

    for (idx = 0, len = depKeys.length; idx < len; idx++) {
      depKey = depKeys[idx];
      // Lookup keys meta for depKey
      keys = keysForDep(depsMeta, depKey);
      // Increment the number of times depKey depends on keyName.
      keys[keyName] = (keys[keyName] || 0) + 1;
      // Watch the depKey
      (0, _emberMetalWatching.watch)(obj, depKey, meta);
    }
  }

  function removeDependentKeys(desc, obj, keyName, meta) {
    // the descriptor has a list of dependent keys, so
    // remove all of its dependent keys.
    var depKeys = desc._dependentKeys;
    var depsMeta, idx, len, depKey, keys;
    if (!depKeys) {
      return;
    }

    depsMeta = metaForDeps(meta);

    for (idx = 0, len = depKeys.length; idx < len; idx++) {
      depKey = depKeys[idx];
      // Lookup keys meta for depKey
      keys = keysForDep(depsMeta, depKey);
      // Decrement the number of times depKey depends on keyName.
      keys[keyName] = (keys[keyName] || 0) - 1;
      // Unwatch the depKey
      (0, _emberMetalWatching.unwatch)(obj, depKey, meta);
    }
  }
});
enifed("ember-metal/deprecate_property", ["exports", "ember-metal/core", "ember-metal/platform/define_property", "ember-metal/properties", "ember-metal/property_get", "ember-metal/property_set"], function (exports, _emberMetalCore, _emberMetalPlatformDefine_property, _emberMetalProperties, _emberMetalProperty_get, _emberMetalProperty_set) {
  exports.deprecateProperty = deprecateProperty;

  /**
    Used internally to allow changing properties in a backwards compatible way, and print a helpful
    deprecation warning.
  
    @method deprecateProperty
    @param {Object} object The object to add the deprecated property to.
    @param {String} deprecatedKey The property to add (and print deprecation warnings upon accessing).
    @param {String} newKey The property that will be aliased.
    @private
    @since 1.7.0
  */

  function deprecateProperty(object, deprecatedKey, newKey) {
    function deprecate() {
      _emberMetalCore["default"].deprecate("Usage of `" + deprecatedKey + "` is deprecated, use `" + newKey + "` instead.");
    }

    if (_emberMetalPlatformDefine_property.hasPropertyAccessors) {
      (0, _emberMetalProperties.defineProperty)(object, deprecatedKey, {
        configurable: true,
        enumerable: false,
        set: function (value) {
          deprecate();
          (0, _emberMetalProperty_set.set)(this, newKey, value);
        },
        get: function () {
          deprecate();
          return (0, _emberMetalProperty_get.get)(this, newKey);
        }
      });
    }
  }
});
/**
@module ember
@submodule ember-metal
*/
enifed('ember-metal/dictionary', ['exports', 'ember-metal/platform/create'], function (exports, _emberMetalPlatformCreate) {
  exports["default"] = makeDictionary;

  // the delete is meant to hint at runtimes that this object should remain in
  // dictionary mode. This is clearly a runtime specific hack, but currently it
  // appears worthwhile in some usecases. Please note, these deletes do increase
  // the cost of creation dramatically over a plain Object.create. And as this
  // only makes sense for long-lived dictionaries that aren't instantiated often.

  function makeDictionary(parent) {
    var dict = (0, _emberMetalPlatformCreate["default"])(parent);
    dict['_dict'] = null;
    delete dict['_dict'];
    return dict;
  }
});
enifed('ember-metal/enumerable_utils', ['exports', 'ember-metal/core', 'ember-metal/array'], function (exports, _emberMetalCore, _emberMetalArray) {
  exports.map = map;
  exports.forEach = forEach;
  exports.filter = filter;
  exports.indexOf = indexOf;
  exports.indexesOf = indexesOf;
  exports.addObject = addObject;
  exports.removeObject = removeObject;
  exports._replace = _replace;
  exports.replace = replace;
  exports.intersection = intersection;

  var splice = Array.prototype.splice;

  /**
   Defines some convenience methods for working with Enumerables.
   `Ember.EnumerableUtils` uses `Ember.ArrayPolyfills` when necessary.
  
   @class EnumerableUtils
   @namespace Ember
   @deprecated
   @static
   @public
  */

  /**
    Calls the map function on the passed object with a specified callback. This
    uses `Ember.ArrayPolyfill`'s-map method when necessary.
  
    @method map
    @deprecated Use ES5's Array.prototype.map instead.
    @param {Object} obj The object that should be mapped
    @param {Function} callback The callback to execute
    @param {Object} thisArg Value to use as this when executing *callback*
  
    @return {Array} An array of mapped values.
    @public
  */

  function map(obj, callback, thisArg) {
    return obj.map ? obj.map(callback, thisArg) : _emberMetalArray.map.call(obj, callback, thisArg);
  }

  var deprecatedMap = _emberMetalCore["default"].deprecateFunc('Ember.EnumberableUtils.map is deprecated, please refactor to use Array.prototype.map.', map);

  /**
    Calls the forEach function on the passed object with a specified callback. This
    uses `Ember.ArrayPolyfill`'s-forEach method when necessary.
  
    @method forEach
    @deprecated Use ES5's Array.prototype.forEach instead.
    @param {Object} obj The object to call forEach on
    @param {Function} callback The callback to execute
    @param {Object} thisArg Value to use as this when executing *callback*
    @public
  */

  function forEach(obj, callback, thisArg) {
    return obj.forEach ? obj.forEach(callback, thisArg) : _emberMetalArray.forEach.call(obj, callback, thisArg);
  }

  var deprecatedForEach = _emberMetalCore["default"].deprecateFunc('Ember.EnumberableUtils.forEach is deprecated, please refactor to use Array.prototype.forEach.', forEach);

  /**
    Calls the filter function on the passed object with a specified callback. This
    uses `Ember.ArrayPolyfill`'s-filter method when necessary.
  
    @method filter
    @deprecated Use ES5's Array.prototype.filter instead.
    @param {Object} obj The object to call filter on
    @param {Function} callback The callback to execute
    @param {Object} thisArg Value to use as this when executing *callback*
  
    @return {Array} An array containing the filtered values
    @since 1.4.0
    @public
  */

  function filter(obj, callback, thisArg) {
    return obj.filter ? obj.filter(callback, thisArg) : _emberMetalArray.filter.call(obj, callback, thisArg);
  }

  var deprecatedFilter = _emberMetalCore["default"].deprecateFunc('Ember.EnumberableUtils.filter is deprecated, please refactor to use Array.prototype.filter.', filter);

  /**
    Calls the indexOf function on the passed object with a specified callback. This
    uses `Ember.ArrayPolyfill`'s-indexOf method when necessary.
  
    @method indexOf
    @deprecated Use ES5's Array.prototype.indexOf instead.
    @param {Object} obj The object to call indexOn on
    @param {Object} index The index to start searching from
  
    @public
  */

  function indexOf(obj, element, index) {
    return obj.indexOf ? obj.indexOf(element, index) : _emberMetalArray.indexOf.call(obj, element, index);
  }

  var deprecatedIndexOf = _emberMetalCore["default"].deprecateFunc('Ember.EnumberableUtils.indexOf is deprecated, please refactor to use Array.prototype.indexOf.', indexOf);

  /**
    Returns an array of indexes of the first occurrences of the passed elements
    on the passed object.
  
    ```javascript
     var array = [1, 2, 3, 4, 5];
     Ember.EnumerableUtils.indexesOf(array, [2, 5]); // [1, 4]
  
     var fubar = "Fubarr";
     Ember.EnumerableUtils.indexesOf(fubar, ['b', 'r']); // [2, 4]
    ```
  
    @method indexesOf
    @deprecated
    @param {Object} obj The object to check for element indexes
    @param {Array} elements The elements to search for on *obj*
  
    @return {Array} An array of indexes.
    @public
  */

  function indexesOf(obj, elements) {
    return elements === undefined ? [] : map(elements, function (item) {
      return indexOf(obj, item);
    });
  }

  var deprecatedIndexesOf = _emberMetalCore["default"].deprecateFunc('Ember.EnumerableUtils.indexesOf is deprecated.', indexesOf);

  /**
    Adds an object to an array. If the array already includes the object this
    method has no effect.
  
    @method addObject
    @deprecated
    @param {Array} array The array the passed item should be added to
    @param {Object} item The item to add to the passed array
  
    @return 'undefined'
    @public
  */

  function addObject(array, item) {
    var index = indexOf(array, item);
    if (index === -1) {
      array.push(item);
    }
  }

  var deprecatedAddObject = _emberMetalCore["default"].deprecateFunc('Ember.EnumerableUtils.addObject is deprecated.', addObject);

  /**
    Removes an object from an array. If the array does not contain the passed
    object this method has no effect.
  
    @method removeObject
    @deprecated
    @param {Array} array The array to remove the item from.
    @param {Object} item The item to remove from the passed array.
  
    @return 'undefined'
    @public
  */

  function removeObject(array, item) {
    var index = indexOf(array, item);
    if (index !== -1) {
      array.splice(index, 1);
    }
  }

  var deprecatedRemoveObject = _emberMetalCore["default"].deprecateFunc('Ember.EnumerableUtils.removeObject is deprecated.', removeObject);

  function _replace(array, idx, amt, objects) {
    var args = [].concat(objects);
    var ret = [];
    // https://code.google.com/p/chromium/issues/detail?id=56588
    var size = 60000;
    var start = idx;
    var ends = amt;
    var count, chunk;

    while (args.length) {
      count = ends > size ? size : ends;
      if (count <= 0) {
        count = 0;
      }

      chunk = args.splice(0, size);
      chunk = [start, count].concat(chunk);

      start += size;
      ends -= count;

      ret = ret.concat(splice.apply(array, chunk));
    }
    return ret;
  }

  /**
    Replaces objects in an array with the passed objects.
  
    ```javascript
      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 1, 2, [4, 5]); // [1, 4, 5]
  
      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 1, 1, [4, 5]); // [1, 4, 5, 3]
  
      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 10, 1, [4, 5]); // [1, 2, 3, 4, 5]
    ```
  
    @method replace
    @deprecated
    @param {Array} array The array the objects should be inserted into.
    @param {Number} idx Starting index in the array to replace. If *idx* >=
    length, then append to the end of the array.
    @param {Number} amt Number of elements that should be removed from the array,
    starting at *idx*
    @param {Array} objects An array of zero or more objects that should be
    inserted into the array at *idx*
  
    @return {Array} The modified array.
    @public
  */

  function replace(array, idx, amt, objects) {
    if (array.replace) {
      return array.replace(idx, amt, objects);
    } else {
      return _replace(array, idx, amt, objects);
    }
  }

  var deprecatedReplace = _emberMetalCore["default"].deprecateFunc('Ember.EnumerableUtils.replace is deprecated.', replace);

  /**
    Calculates the intersection of two arrays. This method returns a new array
    filled with the records that the two passed arrays share with each other.
    If there is no intersection, an empty array will be returned.
  
    ```javascript
    var array1 = [1, 2, 3, 4, 5];
    var array2 = [1, 3, 5, 6, 7];
  
    Ember.EnumerableUtils.intersection(array1, array2); // [1, 3, 5]
  
    var array1 = [1, 2, 3];
    var array2 = [4, 5, 6];
  
    Ember.EnumerableUtils.intersection(array1, array2); // []
    ```
  
    @method intersection
    @deprecated
    @param {Array} array1 The first array
    @param {Array} array2 The second array
  
    @return {Array} The intersection of the two passed arrays.
    @public
  */

  function intersection(array1, array2) {
    var result = [];
    forEach(array1, function (element) {
      if (indexOf(array2, element) >= 0) {
        result.push(element);
      }
    });

    return result;
  }

  var deprecatedIntersection = _emberMetalCore["default"].deprecateFunc('Ember.EnumerableUtils.intersection is deprecated.', intersection);

  // TODO: this only exists to maintain the existing api, as we move forward it
  // should only be part of the "global build" via some shim
  exports["default"] = {
    _replace: _replace,
    addObject: deprecatedAddObject,
    filter: deprecatedFilter,
    forEach: deprecatedForEach,
    indexOf: deprecatedIndexOf,
    indexesOf: deprecatedIndexesOf,
    intersection: deprecatedIntersection,
    map: deprecatedMap,
    removeObject: deprecatedRemoveObject,
    replace: deprecatedReplace
  };
});
// Ember.deprecateFunc
enifed('ember-metal/environment', ['exports', 'ember-metal/core'], function (exports, _emberMetalCore) {

  /*
    Ember can run in many different environments, including environments like
    Node.js where the DOM is unavailable. This object serves as an abstraction
    over the browser features that Ember relies on, so that code does not
    explode when trying to boot in an environment that doesn't have them.
  
    This is a private abstraction. In the future, we hope that other
    abstractions (like `Location`, `Renderer`, `dom-helper`) can fully abstract
    over the differences in environment.
  */
  var environment;

  // This code attempts to automatically detect an environment with DOM
  // by searching for window and document.createElement. An environment
  // with DOM may disable the DOM functionality of Ember explicitly by
  // defining a `disableBrowserEnvironment` ENV.
  var hasDOM = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof document.createElement !== 'undefined' && !_emberMetalCore["default"].ENV.disableBrowserEnvironment;

  if (hasDOM) {
    environment = {
      hasDOM: true,
      isChrome: !!window.chrome && !window.opera,
      isFirefox: typeof InstallTrigger !== 'undefined',
      location: window.location,
      history: window.history,
      userAgent: window.navigator.userAgent,
      global: window
    };
  } else {
    environment = {
      hasDOM: false,
      isChrome: false,
      isFirefox: false,
      location: null,
      history: null,
      userAgent: 'Lynx (textmode)',
      global: null
    };
  }

  exports["default"] = environment;
});
enifed('ember-metal/error', ['exports', 'ember-metal/platform/create'], function (exports, _emberMetalPlatformCreate) {

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  /**
    A subclass of the JavaScript Error object for use in Ember.
  
    @class Error
    @namespace Ember
    @extends Error
    @constructor
    @public
  */
  function EmberError() {
    var tmp = Error.apply(this, arguments);

    // Adds a `stack` property to the given error object that will yield the
    // stack trace at the time captureStackTrace was called.
    // When collecting the stack trace all frames above the topmost call
    // to this function, including that call, will be left out of the
    // stack trace.
    // This is useful because we can hide Ember implementation details
    // that are not very helpful for the user.
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, Ember.Error);
    }
    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }
  }

  EmberError.prototype = (0, _emberMetalPlatformCreate["default"])(Error.prototype);

  exports["default"] = EmberError;
});
enifed("ember-metal/events", ["exports", "ember-metal/core", "ember-metal/utils", "ember-metal/platform/create"], function (exports, _emberMetalCore, _emberMetalUtils, _emberMetalPlatformCreate) {
  exports.accumulateListeners = accumulateListeners;
  exports.addListener = addListener;
  exports.suspendListener = suspendListener;
  exports.suspendListeners = suspendListeners;
  exports.watchedEvents = watchedEvents;
  exports.sendEvent = sendEvent;
  exports.hasListeners = hasListeners;
  exports.listenersFor = listenersFor;
  exports.on = on;
  // Remove "use strict"; from transpiled module until
  // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed
  //
  "REMOVE_USE_STRICT: true";

  /* listener flags */
  var ONCE = 1;
  var SUSPENDED = 2;

  /*
    The event system uses a series of nested hashes to store listeners on an
    object. When a listener is registered, or when an event arrives, these
    hashes are consulted to determine which target and action pair to invoke.
  
    The hashes are stored in the object's meta hash, and look like this:
  
        // Object's meta hash
        {
          listeners: {       // variable name: `listenerSet`
            "foo:changed": [ // variable name: `actions`
              target, method, flags
            ]
          }
        }
  
  */

  function indexOf(array, target, method) {
    var index = -1;
    // hashes are added to the end of the event array
    // so it makes sense to start searching at the end
    // of the array and search in reverse
    for (var i = array.length - 3; i >= 0; i -= 3) {
      if (target === array[i] && method === array[i + 1]) {
        index = i;
        break;
      }
    }
    return index;
  }

  function actionsFor(obj, eventName) {
    var meta = (0, _emberMetalUtils.meta)(obj, true);
    var actions;
    var listeners = meta.listeners;

    if (!listeners) {
      listeners = meta.listeners = (0, _emberMetalPlatformCreate["default"])(null);
      listeners.__source__ = obj;
    } else if (listeners.__source__ !== obj) {
      // setup inherited copy of the listeners object
      listeners = meta.listeners = (0, _emberMetalPlatformCreate["default"])(listeners);
      listeners.__source__ = obj;
    }

    actions = listeners[eventName];

    // if there are actions, but the eventName doesn't exist in our listeners, then copy them from the prototype
    if (actions && actions.__source__ !== obj) {
      actions = listeners[eventName] = listeners[eventName].slice();
      actions.__source__ = obj;
    } else if (!actions) {
      actions = listeners[eventName] = [];
      actions.__source__ = obj;
    }

    return actions;
  }

  function accumulateListeners(obj, eventName, otherActions) {
    var meta = obj["__ember_meta__"];
    var actions = meta && meta.listeners && meta.listeners[eventName];

    if (!actions) {
      return;
    }

    var newActions = [];

    for (var i = actions.length - 3; i >= 0; i -= 3) {
      var target = actions[i];
      var method = actions[i + 1];
      var flags = actions[i + 2];
      var actionIndex = indexOf(otherActions, target, method);

      if (actionIndex === -1) {
        otherActions.push(target, method, flags);
        newActions.push(target, method, flags);
      }
    }

    return newActions;
  }

  /**
    Add an event listener
  
    @method addListener
    @for Ember
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @param {Boolean} once A flag whether a function should only be called once
    @public
  */

  function addListener(obj, eventName, target, method, once) {
    _emberMetalCore["default"].assert("You must pass at least an object and event name to Ember.addListener", !!obj && !!eventName);

    if (!method && "function" === typeof target) {
      method = target;
      target = null;
    }

    var actions = actionsFor(obj, eventName);
    var actionIndex = indexOf(actions, target, method);
    var flags = 0;

    if (once) {
      flags |= ONCE;
    }

    if (actionIndex !== -1) {
      return;
    }

    actions.push(target, method, flags);

    if ("function" === typeof obj.didAddListener) {
      obj.didAddListener(eventName, target, method);
    }
  }

  /**
    Remove an event listener
  
    Arguments should match those passed to `Ember.addListener`.
  
    @method removeListener
    @for Ember
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @public
  */
  function removeListener(obj, eventName, target, method) {
    _emberMetalCore["default"].assert("You must pass at least an object and event name to Ember.removeListener", !!obj && !!eventName);

    if (!method && "function" === typeof target) {
      method = target;
      target = null;
    }

    function _removeListener(target, method) {
      var actions = actionsFor(obj, eventName);
      var actionIndex = indexOf(actions, target, method);

      // action doesn't exist, give up silently
      if (actionIndex === -1) {
        return;
      }

      actions.splice(actionIndex, 3);

      if ("function" === typeof obj.didRemoveListener) {
        obj.didRemoveListener(eventName, target, method);
      }
    }

    if (method) {
      _removeListener(target, method);
    } else {
      var meta = obj["__ember_meta__"];
      var actions = meta && meta.listeners && meta.listeners[eventName];

      if (!actions) {
        return;
      }
      for (var i = actions.length - 3; i >= 0; i -= 3) {
        _removeListener(actions[i], actions[i + 1]);
      }
    }
  }

  /**
    Suspend listener during callback.
  
    This should only be used by the target of the event listener
    when it is taking an action that would cause the event, e.g.
    an object might suspend its property change listener while it is
    setting that property.
  
    @method suspendListener
    @for Ember
  
    @private
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @param {Function} callback
  */

  function suspendListener(obj, eventName, target, method, callback) {
    if (!method && "function" === typeof target) {
      method = target;
      target = null;
    }

    var actions = actionsFor(obj, eventName);
    var actionIndex = indexOf(actions, target, method);

    if (actionIndex !== -1) {
      actions[actionIndex + 2] |= SUSPENDED; // mark the action as suspended
    }

    function tryable() {
      return callback.call(target);
    }
    function finalizer() {
      if (actionIndex !== -1) {
        actions[actionIndex + 2] &= ~SUSPENDED;
      }
    }

    return (0, _emberMetalUtils.tryFinally)(tryable, finalizer);
  }

  /**
    Suspends multiple listeners during a callback.
  
    @method suspendListeners
    @for Ember
  
    @private
    @param obj
    @param {Array} eventNames Array of event names
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @param {Function} callback
  */

  function suspendListeners(obj, eventNames, target, method, callback) {
    if (!method && "function" === typeof target) {
      method = target;
      target = null;
    }

    var suspendedActions = [];
    var actionsList = [];
    var eventName, actions, i, l;

    for (i = 0, l = eventNames.length; i < l; i++) {
      eventName = eventNames[i];
      actions = actionsFor(obj, eventName);
      var actionIndex = indexOf(actions, target, method);

      if (actionIndex !== -1) {
        actions[actionIndex + 2] |= SUSPENDED;
        suspendedActions.push(actionIndex);
        actionsList.push(actions);
      }
    }

    function tryable() {
      return callback.call(target);
    }

    function finalizer() {
      for (var i = 0, l = suspendedActions.length; i < l; i++) {
        var actionIndex = suspendedActions[i];
        actionsList[i][actionIndex + 2] &= ~SUSPENDED;
      }
    }

    return (0, _emberMetalUtils.tryFinally)(tryable, finalizer);
  }

  /**
    Return a list of currently watched events
  
    @private
    @method watchedEvents
    @for Ember
    @param obj
  */

  function watchedEvents(obj) {
    var listeners = obj["__ember_meta__"].listeners;
    var ret = [];

    if (listeners) {
      for (var eventName in listeners) {
        if (eventName !== "__source__" && listeners[eventName]) {
          ret.push(eventName);
        }
      }
    }
    return ret;
  }

  /**
    Send an event. The execution of suspended listeners
    is skipped, and once listeners are removed. A listener without
    a target is executed on the passed object. If an array of actions
    is not passed, the actions stored on the passed object are invoked.
  
    @method sendEvent
    @for Ember
    @param obj
    @param {String} eventName
    @param {Array} params Optional parameters for each listener.
    @param {Array} actions Optional array of actions (listeners).
    @return true
    @public
  */

  function sendEvent(obj, eventName, params, actions) {
    // first give object a chance to handle it
    if (obj !== _emberMetalCore["default"] && "function" === typeof obj.sendEvent) {
      obj.sendEvent(eventName, params);
    }

    if (!actions) {
      var meta = obj["__ember_meta__"];
      actions = meta && meta.listeners && meta.listeners[eventName];
    }

    if (!actions) {
      return;
    }

    for (var i = actions.length - 3; i >= 0; i -= 3) {
      // looping in reverse for once listeners
      var target = actions[i];
      var method = actions[i + 1];
      var flags = actions[i + 2];

      if (!method) {
        continue;
      }
      if (flags & SUSPENDED) {
        continue;
      }
      if (flags & ONCE) {
        removeListener(obj, eventName, target, method);
      }
      if (!target) {
        target = obj;
      }
      if ("string" === typeof method) {
        if (params) {
          (0, _emberMetalUtils.applyStr)(target, method, params);
        } else {
          target[method]();
        }
      } else {
        if (params) {
          (0, _emberMetalUtils.apply)(target, method, params);
        } else {
          method.call(target);
        }
      }
    }
    return true;
  }

  /**
    @private
    @method hasListeners
    @for Ember
    @param obj
    @param {String} eventName
  */

  function hasListeners(obj, eventName) {
    var meta = obj["__ember_meta__"];
    var actions = meta && meta.listeners && meta.listeners[eventName];

    return !!(actions && actions.length);
  }

  /**
    @private
    @method listenersFor
    @for Ember
    @param obj
    @param {String} eventName
  */

  function listenersFor(obj, eventName) {
    var ret = [];
    var meta = obj["__ember_meta__"];
    var actions = meta && meta.listeners && meta.listeners[eventName];

    if (!actions) {
      return ret;
    }

    for (var i = 0, l = actions.length; i < l; i += 3) {
      var target = actions[i];
      var method = actions[i + 1];
      ret.push([target, method]);
    }

    return ret;
  }

  /**
    Define a property as a function that should be executed when
    a specified event or events are triggered.
  
  
    ``` javascript
    var Job = Ember.Object.extend({
      logCompleted: Ember.on('completed', function() {
        console.log('Job completed!');
      })
    });
  
    var job = Job.create();
  
    Ember.sendEvent(job, 'completed'); // Logs 'Job completed!'
   ```
  
    @method on
    @for Ember
    @param {String} eventNames*
    @param {Function} func
    @return func
    @public
  */

  function on() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var func = args.pop();
    var events = args;
    func.__ember_listens__ = events;
    return func;
  }

  exports.removeListener = removeListener;
});
/**
@module ember
@submodule ember-metal
*/
enifed('ember-metal/expand_properties', ['exports', 'ember-metal/error', 'ember-metal/array'], function (exports, _emberMetalError, _emberMetalArray) {
  exports["default"] = expandProperties;

  /**
  @module ember
  @submodule ember-metal
  */

  var SPLIT_REGEX = /\{|\}/;

  /**
    Expands `pattern`, invoking `callback` for each expansion.
  
    The only pattern supported is brace-expansion, anything else will be passed
    once to `callback` directly.
  
    Example
  
    ```js
    function echo(arg){ console.log(arg); }
  
    Ember.expandProperties('foo.bar', echo);              //=> 'foo.bar'
    Ember.expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'
    Ember.expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'
    Ember.expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'
    Ember.expandProperties('foo.{bar,baz}.@each', echo)   //=> 'foo.bar.@each', 'foo.baz.@each'
    Ember.expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'
    Ember.expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'
    ```
  
    @method
    @private
    @param {String} pattern The property pattern to expand.
    @param {Function} callback The callback to invoke.  It is invoked once per
    expansion, and is passed the expansion.
  */

  function expandProperties(pattern, callback) {
    if (pattern.indexOf(' ') > -1) {
      throw new _emberMetalError["default"]('Brace expanded properties cannot contain spaces, e.g. \'user.{firstName, lastName}\' should be \'user.{firstName,lastName}\'');
    }

    if ('string' === typeof pattern) {
      var parts = pattern.split(SPLIT_REGEX);
      var properties = [parts];

      _emberMetalArray.forEach.call(parts, function (part, index) {
        if (part.indexOf(',') >= 0) {
          properties = duplicateAndReplace(properties, part.split(','), index);
        }
      });

      _emberMetalArray.forEach.call(properties, function (property) {
        callback(property.join(''));
      });
    } else {
      callback(pattern);
    }
  }

  function duplicateAndReplace(properties, currentParts, index) {
    var all = [];

    _emberMetalArray.forEach.call(properties, function (property) {
      _emberMetalArray.forEach.call(currentParts, function (part) {
        var current = property.slice(0);
        current[index] = part;
        all.push(current);
      });
    });

    return all;
  }
});
enifed("ember-metal/get_properties", ["exports", "ember-metal/property_get", "ember-metal/utils"], function (exports, _emberMetalProperty_get, _emberMetalUtils) {
  exports["default"] = getProperties;

  /**
    To get multiple properties at once, call `Ember.getProperties`
    with an object followed by a list of strings or an array:
  
    ```javascript
    Ember.getProperties(record, 'firstName', 'lastName', 'zipCode');
    // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```
  
    is equivalent to:
  
    ```javascript
    Ember.getProperties(record, ['firstName', 'lastName', 'zipCode']);
    // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```
  
    @method getProperties
    @for Ember
    @param {Object} obj
    @param {String...|Array} list of keys to get
    @return {Object}
    @private
  */

  function getProperties(obj) {
    var ret = {};
    var propertyNames = arguments;
    var i = 1;

    if (arguments.length === 2 && (0, _emberMetalUtils.isArray)(arguments[1])) {
      i = 0;
      propertyNames = arguments[1];
    }
    for (var len = propertyNames.length; i < len; i++) {
      ret[propertyNames[i]] = (0, _emberMetalProperty_get.get)(obj, propertyNames[i]);
    }
    return ret;
  }
});
enifed("ember-metal/injected_property", ["exports", "ember-metal/core", "ember-metal/computed", "ember-metal/alias", "ember-metal/properties", "ember-metal/platform/create"], function (exports, _emberMetalCore, _emberMetalComputed, _emberMetalAlias, _emberMetalProperties, _emberMetalPlatformCreate) {

  /**
    Read-only property that returns the result of a container lookup.
  
    @class InjectedProperty
    @namespace Ember
    @constructor
    @param {String} type The container type the property will lookup
    @param {String} name (optional) The name the property will lookup, defaults
           to the property's name
    @private
  */
  function InjectedProperty(type, name) {
    this.type = type;
    this.name = name;

    this._super$Constructor(injectedPropertyGet);
    AliasedPropertyPrototype.oneWay.call(this);
  }

  function injectedPropertyGet(keyName) {
    var possibleDesc = this[keyName];
    var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;

    _emberMetalCore["default"].assert("Attempting to lookup an injected property on an object without a container, ensure that the object was instantiated via a container.", this.container);

    return this.container.lookup(desc.type + ":" + (desc.name || keyName));
  }

  InjectedProperty.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalProperties.Descriptor.prototype);

  var InjectedPropertyPrototype = InjectedProperty.prototype;
  var ComputedPropertyPrototype = _emberMetalComputed.ComputedProperty.prototype;
  var AliasedPropertyPrototype = _emberMetalAlias.AliasedProperty.prototype;

  InjectedPropertyPrototype._super$Constructor = _emberMetalComputed.ComputedProperty;

  InjectedPropertyPrototype.get = ComputedPropertyPrototype.get;
  InjectedPropertyPrototype.readOnly = ComputedPropertyPrototype.readOnly;

  InjectedPropertyPrototype.teardown = ComputedPropertyPrototype.teardown;

  exports["default"] = InjectedProperty;
});
// Ember.assert
enifed("ember-metal/instrumentation", ["exports", "ember-metal/core", "ember-metal/utils"], function (exports, _emberMetalCore, _emberMetalUtils) {
  exports.instrument = instrument;
  exports._instrumentStart = _instrumentStart;
  exports.subscribe = subscribe;
  exports.unsubscribe = unsubscribe;
  exports.reset = reset;

  /**
    The purpose of the Ember Instrumentation module is
    to provide efficient, general-purpose instrumentation
    for Ember.
  
    Subscribe to a listener by using `Ember.subscribe`:
  
    ```javascript
    Ember.subscribe("render", {
      before: function(name, timestamp, payload) {
  
      },
  
      after: function(name, timestamp, payload) {
  
      }
    });
    ```
  
    If you return a value from the `before` callback, that same
    value will be passed as a fourth parameter to the `after`
    callback.
  
    Instrument a block of code by using `Ember.instrument`:
  
    ```javascript
    Ember.instrument("render.handlebars", payload, function() {
      // rendering logic
    }, binding);
    ```
  
    Event names passed to `Ember.instrument` are namespaced
    by periods, from more general to more specific. Subscribers
    can listen for events by whatever level of granularity they
    are interested in.
  
    In the above example, the event is `render.handlebars`,
    and the subscriber listened for all events beginning with
    `render`. It would receive callbacks for events named
    `render`, `render.handlebars`, `render.container`, or
    even `render.handlebars.layout`.
  
    @class Instrumentation
    @namespace Ember
    @static
    @private
  */
  var subscribers = [];
  exports.subscribers = subscribers;
  var cache = {};

  var populateListeners = function (name) {
    var listeners = [];
    var subscriber;

    for (var i = 0, l = subscribers.length; i < l; i++) {
      subscriber = subscribers[i];
      if (subscriber.regex.test(name)) {
        listeners.push(subscriber.object);
      }
    }

    cache[name] = listeners;
    return listeners;
  };

  var time = (function () {
    var perf = "undefined" !== typeof window ? window.performance || {} : {};
    var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
    // fn.bind will be available in all the browsers that support the advanced window.performance... ;-)
    return fn ? fn.bind(perf) : function () {
      return +new Date();
    };
  })();

  /**
    Notifies event's subscribers, calls `before` and `after` hooks.
  
    @method instrument
    @namespace Ember.Instrumentation
  
    @param {String} [name] Namespaced event name.
    @param {Object} _payload
    @param {Function} callback Function that you're instrumenting.
    @param {Object} binding Context that instrument function is called with.
    @private
  */

  function instrument(name, _payload, callback, binding) {
    if (arguments.length <= 3 && typeof _payload === "function") {
      binding = callback;
      callback = _payload;
      _payload = undefined;
    }
    if (subscribers.length === 0) {
      return callback.call(binding);
    }
    var payload = _payload || {};
    var finalizer = _instrumentStart(name, function () {
      return payload;
    });
    if (finalizer) {
      var tryable = function _instrumenTryable() {
        return callback.call(binding);
      };
      var catchable = function _instrumentCatchable(e) {
        payload.exception = e;
      };
      return (0, _emberMetalUtils.tryCatchFinally)(tryable, catchable, finalizer);
    } else {
      return callback.call(binding);
    }
  }

  // private for now

  function _instrumentStart(name, _payload) {
    var listeners = cache[name];

    if (!listeners) {
      listeners = populateListeners(name);
    }

    if (listeners.length === 0) {
      return;
    }

    var payload = _payload();

    var STRUCTURED_PROFILE = _emberMetalCore["default"].STRUCTURED_PROFILE;
    var timeName;
    if (STRUCTURED_PROFILE) {
      timeName = name + ": " + payload.object;
      console.time(timeName);
    }

    var l = listeners.length;
    var beforeValues = new Array(l);
    var i, listener;
    var timestamp = time();
    for (i = 0; i < l; i++) {
      listener = listeners[i];
      beforeValues[i] = listener.before(name, timestamp, payload);
    }

    return function _instrumentEnd() {
      var i, l, listener;
      var timestamp = time();
      for (i = 0, l = listeners.length; i < l; i++) {
        listener = listeners[i];
        listener.after(name, timestamp, payload, beforeValues[i]);
      }

      if (STRUCTURED_PROFILE) {
        console.timeEnd(timeName);
      }
    };
  }

  /**
    Subscribes to a particular event or instrumented block of code.
  
    @method subscribe
    @namespace Ember.Instrumentation
  
    @param {String} [pattern] Namespaced event name.
    @param {Object} [object] Before and After hooks.
  
    @return {Subscriber}
    @private
  */

  function subscribe(pattern, object) {
    var paths = pattern.split(".");
    var path;
    var regex = [];

    for (var i = 0, l = paths.length; i < l; i++) {
      path = paths[i];
      if (path === "*") {
        regex.push("[^\\.]*");
      } else {
        regex.push(path);
      }
    }

    regex = regex.join("\\.");
    regex = regex + "(\\..*)?";

    var subscriber = {
      pattern: pattern,
      regex: new RegExp("^" + regex + "$"),
      object: object
    };

    subscribers.push(subscriber);
    cache = {};

    return subscriber;
  }

  /**
    Unsubscribes from a particular event or instrumented block of code.
  
    @method unsubscribe
    @namespace Ember.Instrumentation
  
    @param {Object} [subscriber]
    @private
  */

  function unsubscribe(subscriber) {
    var index;

    for (var i = 0, l = subscribers.length; i < l; i++) {
      if (subscribers[i] === subscriber) {
        index = i;
      }
    }

    subscribers.splice(index, 1);
    cache = {};
  }

  /**
    Resets `Ember.Instrumentation` by flushing list of subscribers.
  
    @method reset
    @namespace Ember.Instrumentation
    @private
  */

  function reset() {
    subscribers.length = 0;
    cache = {};
  }
});
enifed('ember-metal/is_blank', ['exports', 'ember-metal/is_empty'], function (exports, _emberMetalIs_empty) {
  exports["default"] = isBlank;

  /**
    A value is blank if it is empty or a whitespace string.
  
    ```javascript
    Ember.isBlank();                // true
    Ember.isBlank(null);            // true
    Ember.isBlank(undefined);       // true
    Ember.isBlank('');              // true
    Ember.isBlank([]);              // true
    Ember.isBlank('\n\t');          // true
    Ember.isBlank('  ');            // true
    Ember.isBlank({});              // false
    Ember.isBlank('\n\t Hello');    // false
    Ember.isBlank('Hello world');   // false
    Ember.isBlank([1,2,3]);         // false
    ```
  
    @method isBlank
    @for Ember
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.5.0
    @public
  */

  function isBlank(obj) {
    return (0, _emberMetalIs_empty["default"])(obj) || typeof obj === 'string' && obj.match(/\S/) === null;
  }
});
enifed('ember-metal/is_empty', ['exports', 'ember-metal/property_get', 'ember-metal/is_none'], function (exports, _emberMetalProperty_get, _emberMetalIs_none) {

  /**
    Verifies that a value is `null` or an empty string, empty array,
    or empty function.
  
    Constrains the rules on `Ember.isNone` by returning true for empty
    string and empty arrays.
  
    ```javascript
    Ember.isEmpty();                // true
    Ember.isEmpty(null);            // true
    Ember.isEmpty(undefined);       // true
    Ember.isEmpty('');              // true
    Ember.isEmpty([]);              // true
    Ember.isEmpty({});              // false
    Ember.isEmpty('Adam Hawkins');  // false
    Ember.isEmpty([0,1,2]);         // false
    ```
  
    @method isEmpty
    @for Ember
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */
  function isEmpty(obj) {
    var none = (0, _emberMetalIs_none["default"])(obj);
    if (none) {
      return none;
    }

    if (typeof obj.size === 'number') {
      return !obj.size;
    }

    var objectType = typeof obj;

    if (objectType === 'object') {
      var size = (0, _emberMetalProperty_get.get)(obj, 'size');
      if (typeof size === 'number') {
        return !size;
      }
    }

    if (typeof obj.length === 'number' && objectType !== 'function') {
      return !obj.length;
    }

    if (objectType === 'object') {
      var length = (0, _emberMetalProperty_get.get)(obj, 'length');
      if (typeof length === 'number') {
        return !length;
      }
    }

    return false;
  }

  exports["default"] = isEmpty;
});
enifed("ember-metal/is_none", ["exports"], function (exports) {
  /**
    Returns true if the passed value is null or undefined. This avoids errors
    from JSLint complaining about use of ==, which can be technically
    confusing.
  
    ```javascript
    Ember.isNone();              // true
    Ember.isNone(null);          // true
    Ember.isNone(undefined);     // true
    Ember.isNone('');            // false
    Ember.isNone([]);            // false
    Ember.isNone(function() {});  // false
    ```
  
    @method isNone
    @for Ember
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */
  function isNone(obj) {
    return obj === null || obj === undefined;
  }

  exports["default"] = isNone;
});
enifed('ember-metal/is_present', ['exports', 'ember-metal/is_blank'], function (exports, _emberMetalIs_blank) {
  exports["default"] = isPresent;

  /**
    A value is present if it not `isBlank`.
  
    ```javascript
    Ember.isPresent();                // false
    Ember.isPresent(null);            // false
    Ember.isPresent(undefined);       // false
    Ember.isPresent(false);           // false
    Ember.isPresent('');              // false
    Ember.isPresent([]);              // false
    Ember.isPresent('\n\t');          // false
    Ember.isPresent('  ');            // false
    Ember.isPresent({});              // true
    Ember.isPresent('\n\t Hello');    // true
    Ember.isPresent('Hello world');   // true
    Ember.isPresent([1,2,3]);         // true
    ```
  
    @method isPresent
    @for Ember
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.8.0
    @public
  */

  function isPresent(obj) {
    return !(0, _emberMetalIs_blank["default"])(obj);
  }
});
enifed('ember-metal/keys', ['exports', 'ember-metal/platform/define_property'], function (exports, _emberMetalPlatformDefine_property) {

  /**
    Returns all of the keys defined on an object or hash. This is useful
    when inspecting objects for debugging. On browsers that support it, this
    uses the native `Object.keys` implementation.
  
    @method keys
    @for Ember
    @param {Object} obj
    @return {Array} Array containing keys of obj
    @private
  */
  var keys = Object.keys;

  if (!keys || !_emberMetalPlatformDefine_property.canDefineNonEnumerableProperties) {
    // modified from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
    keys = (function () {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString');
      var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
      var dontEnumsLength = dontEnums.length;

      return function keys(obj) {
        if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
          throw new TypeError('Object.keys called on non-object');
        }

        var result = [];
        var prop, i;

        for (prop in obj) {
          if (prop !== '_super' && prop.lastIndexOf('__', 0) !== 0 && hasOwnProperty.call(obj, prop)) {
            result.push(prop);
          }
        }

        if (hasDontEnumBug) {
          for (i = 0; i < dontEnumsLength; i++) {
            if (hasOwnProperty.call(obj, dontEnums[i])) {
              result.push(dontEnums[i]);
            }
          }
        }
        return result;
      };
    })();
  }

  exports["default"] = keys;
});
enifed("ember-metal/libraries", ["exports", "ember-metal/core", "ember-metal/enumerable_utils"], function (exports, _emberMetalCore, _emberMetalEnumerable_utils) {

  /**
    Helper class that allows you to register your library with Ember.
  
    Singleton created at `Ember.libraries`.
  
    @class Libraries
    @constructor
    @private
  */
  function Libraries() {
    this._registry = [];
    this._coreLibIndex = 0;
  }

  Libraries.prototype = {
    constructor: Libraries,

    _getLibraryByName: function (name) {
      var libs = this._registry;
      var count = libs.length;

      for (var i = 0; i < count; i++) {
        if (libs[i].name === name) {
          return libs[i];
        }
      }
    },

    register: function (name, version, isCoreLibrary) {
      var index = this._registry.length;

      if (!this._getLibraryByName(name)) {
        if (isCoreLibrary) {
          index = this._coreLibIndex++;
        }
        this._registry.splice(index, 0, { name: name, version: version });
      } else {
        _emberMetalCore["default"].warn("Library \"" + name + "\" is already registered with Ember.");
      }
    },

    registerCoreLibrary: function (name, version) {
      this.register(name, version, true);
    },

    deRegister: function (name) {
      var lib = this._getLibraryByName(name);
      var index;

      if (lib) {
        index = (0, _emberMetalEnumerable_utils.indexOf)(this._registry, lib);
        this._registry.splice(index, 1);
      }
    },

    each: function (callback) {
      _emberMetalCore["default"].deprecate("Using Ember.libraries.each() is deprecated. Access to a list of registered libraries is currently a private API. If you are not knowingly accessing this method, your out-of-date Ember Inspector may be doing so.");
      (0, _emberMetalEnumerable_utils.forEach)(this._registry, function (lib) {
        callback(lib.name, lib.version);
      });
    }
  };

  if (_emberMetalCore["default"].FEATURES.isEnabled("ember-libraries-isregistered")) {
    Libraries.prototype.isRegistered = function (name) {
      return !!this._getLibraryByName(name);
    };
  }

  exports["default"] = Libraries;
});
enifed("ember-metal/logger", ["exports", "ember-metal/core", "ember-metal/error"], function (exports, _emberMetalCore, _emberMetalError) {

  function K() {
    return this;
  }

  function consoleMethod(name) {
    var consoleObj, logToConsole;
    if (_emberMetalCore["default"].imports.console) {
      consoleObj = _emberMetalCore["default"].imports.console;
    } else if (typeof console !== "undefined") {
      consoleObj = console;
    }

    var method = typeof consoleObj === "object" ? consoleObj[name] : null;

    if (method) {
      // Older IE doesn't support bind, but Chrome needs it
      if (typeof method.bind === "function") {
        logToConsole = method.bind(consoleObj);
        logToConsole.displayName = "console." + name;
        return logToConsole;
      } else if (typeof method.apply === "function") {
        logToConsole = function () {
          method.apply(consoleObj, arguments);
        };
        logToConsole.displayName = "console." + name;
        return logToConsole;
      } else {
        return function () {
          var message = Array.prototype.join.call(arguments, ", ");
          method(message);
        };
      }
    }
  }

  function assertPolyfill(test, message) {
    if (!test) {
      try {
        // attempt to preserve the stack
        throw new _emberMetalError["default"]("assertion failed: " + message);
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }
  }

  /**
    Inside Ember-Metal, simply uses the methods from `imports.console`.
    Override this to provide more robust logging functionality.
  
    @class Logger
    @namespace Ember
    @private
  */
  exports["default"] = {
    /**
     Logs the arguments to the console.
     You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      var foo = 1;
      Ember.Logger.log('log value of foo:', foo);
      // "log value of foo: 1" will be printed to the console
      ```
      @method log
     @for Ember.Logger
     @param {*} arguments
     @private
    */
    log: consoleMethod("log") || K,

    /**
     Prints the arguments to the console with a warning icon.
     You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      Ember.Logger.warn('Something happened!');
      // "Something happened!" will be printed to the console with a warning icon.
      ```
      @method warn
     @for Ember.Logger
     @param {*} arguments
     @private
    */
    warn: consoleMethod("warn") || K,

    /**
     Prints the arguments to the console with an error icon, red text and a stack trace.
     You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      Ember.Logger.error('Danger! Danger!');
      // "Danger! Danger!" will be printed to the console in red text.
      ```
      @method error
     @for Ember.Logger
     @param {*} arguments
     @private
    */
    error: consoleMethod("error") || K,

    /**
     Logs the arguments to the console.
     You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      var foo = 1;
      Ember.Logger.info('log value of foo:', foo);
      // "log value of foo: 1" will be printed to the console
      ```
      @method info
     @for Ember.Logger
     @param {*} arguments
     @private
    */
    info: consoleMethod("info") || K,

    /**
     Logs the arguments to the console in blue text.
     You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      var foo = 1;
      Ember.Logger.debug('log value of foo:', foo);
      // "log value of foo: 1" will be printed to the console
      ```
      @method debug
     @for Ember.Logger
     @param {*} arguments
     @private
    */
    debug: consoleMethod("debug") || consoleMethod("info") || K,

    /**
     If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.
       ```javascript
      Ember.Logger.assert(true); // undefined
      Ember.Logger.assert(true === false); // Throws an Assertion failed error.
      ```
      @method assert
     @for Ember.Logger
     @param {Boolean} bool Value to test
     @private
    */
    assert: consoleMethod("assert") || assertPolyfill
  };
});
// Ember.imports
enifed("ember-metal/map", ["exports", "ember-metal/utils", "ember-metal/array", "ember-metal/platform/create", "ember-metal/deprecate_property"], function (exports, _emberMetalUtils, _emberMetalArray, _emberMetalPlatformCreate, _emberMetalDeprecate_property) {

  function missingFunction(fn) {
    throw new TypeError("" + Object.prototype.toString.call(fn) + " is not a function");
  }

  function missingNew(name) {
    throw new TypeError("Constructor " + name + " requires 'new'");
  }

  function copyNull(obj) {
    var output = (0, _emberMetalPlatformCreate["default"])(null);

    for (var prop in obj) {
      // hasOwnPropery is not needed because obj is Object.create(null);
      output[prop] = obj[prop];
    }

    return output;
  }

  function copyMap(original, newObject) {
    var keys = original._keys.copy();
    var values = copyNull(original._values);

    newObject._keys = keys;
    newObject._values = values;
    newObject.size = original.size;

    return newObject;
  }

  /**
    This class is used internally by Ember and Ember Data.
    Please do not use it at this time. We plan to clean it up
    and add many tests soon.
  
    @class OrderedSet
    @namespace Ember
    @constructor
    @private
  */
  function OrderedSet() {

    if (this instanceof OrderedSet) {
      this.clear();
      this._silenceRemoveDeprecation = false;
    } else {
      missingNew("OrderedSet");
    }
  }

  /**
    @method create
    @static
    @return {Ember.OrderedSet}
    @private
  */
  OrderedSet.create = function () {
    var Constructor = this;

    return new Constructor();
  };

  OrderedSet.prototype = {
    constructor: OrderedSet,
    /**
      @method clear
      @private
    */
    clear: function () {
      this.presenceSet = (0, _emberMetalPlatformCreate["default"])(null);
      this.list = [];
      this.size = 0;
    },

    /**
      @method add
      @param obj
      @param guid (optional, and for internal use)
      @return {Ember.OrderedSet}
      @private
    */
    add: function (obj, _guid) {
      var guid = _guid || (0, _emberMetalUtils.guidFor)(obj);
      var presenceSet = this.presenceSet;
      var list = this.list;

      if (presenceSet[guid] !== true) {
        presenceSet[guid] = true;
        this.size = list.push(obj);
      }

      return this;
    },

    /**
      @deprecated
       @method remove
      @param obj
      @param _guid (optional and for internal use only)
      @return {Boolean}
      @private
    */
    remove: function (obj, _guid) {
      Ember.deprecate("Calling `OrderedSet.prototype.remove` has been deprecated, please use `OrderedSet.prototype.delete` instead.", this._silenceRemoveDeprecation);

      return this["delete"](obj, _guid);
    },

    /**
      @since 1.8.0
      @method delete
      @param obj
      @param _guid (optional and for internal use only)
      @return {Boolean}
      @private
    */
    "delete": function (obj, _guid) {
      var guid = _guid || (0, _emberMetalUtils.guidFor)(obj);
      var presenceSet = this.presenceSet;
      var list = this.list;

      if (presenceSet[guid] === true) {
        delete presenceSet[guid];
        var index = _emberMetalArray.indexOf.call(list, obj);
        if (index > -1) {
          list.splice(index, 1);
        }
        this.size = list.length;
        return true;
      } else {
        return false;
      }
    },

    /**
      @method isEmpty
      @return {Boolean}
      @private
    */
    isEmpty: function () {
      return this.size === 0;
    },

    /**
      @method has
      @param obj
      @return {Boolean}
      @private
    */
    has: function (obj) {
      if (this.size === 0) {
        return false;
      }

      var guid = (0, _emberMetalUtils.guidFor)(obj);
      var presenceSet = this.presenceSet;

      return presenceSet[guid] === true;
    },

    /**
      @method forEach
      @param {Function} fn
      @param self
      @private
    */
    forEach: function (fn /*, ...thisArg*/) {
      if (typeof fn !== "function") {
        missingFunction(fn);
      }

      if (this.size === 0) {
        return;
      }

      var list = this.list;
      var length = arguments.length;
      var i;

      if (length === 2) {
        for (i = 0; i < list.length; i++) {
          fn.call(arguments[1], list[i]);
        }
      } else {
        for (i = 0; i < list.length; i++) {
          fn(list[i]);
        }
      }
    },

    /**
      @method toArray
      @return {Array}
      @private
    */
    toArray: function () {
      return this.list.slice();
    },

    /**
      @method copy
      @return {Ember.OrderedSet}
      @private
    */
    copy: function () {
      var Constructor = this.constructor;
      var set = new Constructor();

      set._silenceRemoveDeprecation = this._silenceRemoveDeprecation;
      set.presenceSet = copyNull(this.presenceSet);
      set.list = this.toArray();
      set.size = this.size;

      return set;
    }
  };

  (0, _emberMetalDeprecate_property.deprecateProperty)(OrderedSet.prototype, "length", "size");

  /**
    A Map stores values indexed by keys. Unlike JavaScript's
    default Objects, the keys of a Map can be any JavaScript
    object.
  
    Internally, a Map has two data structures:
  
    1. `keys`: an OrderedSet of all of the existing keys
    2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`
  
    When a key/value pair is added for the first time, we
    add the key to the `keys` OrderedSet, and create or
    replace an entry in `values`. When an entry is deleted,
    we delete its entry in `keys` and `values`.
  
    @class Map
    @namespace Ember
    @private
    @constructor
  */
  function Map() {
    if (this instanceof this.constructor) {
      this._keys = OrderedSet.create();
      this._keys._silenceRemoveDeprecation = true;
      this._values = (0, _emberMetalPlatformCreate["default"])(null);
      this.size = 0;
    } else {
      missingNew("OrderedSet");
    }
  }

  Ember.Map = Map;

  /**
    @method create
    @static
    @private
  */
  Map.create = function () {
    var Constructor = this;
    return new Constructor();
  };

  Map.prototype = {
    constructor: Map,

    /**
      This property will change as the number of objects in the map changes.
       @since 1.8.0
      @property size
      @type number
      @default 0
      @private
    */
    size: 0,

    /**
      Retrieve the value associated with a given key.
       @method get
      @param {*} key
      @return {*} the value associated with the key, or `undefined`
      @private
    */
    get: function (key) {
      if (this.size === 0) {
        return;
      }

      var values = this._values;
      var guid = (0, _emberMetalUtils.guidFor)(key);

      return values[guid];
    },

    /**
      Adds a value to the map. If a value for the given key has already been
      provided, the new value will replace the old value.
       @method set
      @param {*} key
      @param {*} value
      @return {Ember.Map}
      @private
    */
    set: function (key, value) {
      var keys = this._keys;
      var values = this._values;
      var guid = (0, _emberMetalUtils.guidFor)(key);

      // ensure we don't store -0
      var k = key === -0 ? 0 : key;

      keys.add(k, guid);

      values[guid] = value;

      this.size = keys.size;

      return this;
    },

    /**
      @deprecated see delete
      Removes a value from the map for an associated key.
       @method remove
      @param {*} key
      @return {Boolean} true if an item was removed, false otherwise
      @private
    */
    remove: function (key) {
      Ember.deprecate("Calling `Map.prototype.remove` has been deprecated, please use `Map.prototype.delete` instead.");

      return this["delete"](key);
    },

    /**
      Removes a value from the map for an associated key.
       @since 1.8.0
      @method delete
      @param {*} key
      @return {Boolean} true if an item was removed, false otherwise
      @private
    */
    "delete": function (key) {
      if (this.size === 0) {
        return false;
      }
      // don't use ES6 "delete" because it will be annoying
      // to use in browsers that are not ES6 friendly;
      var keys = this._keys;
      var values = this._values;
      var guid = (0, _emberMetalUtils.guidFor)(key);

      if (keys["delete"](key, guid)) {
        delete values[guid];
        this.size = keys.size;
        return true;
      } else {
        return false;
      }
    },

    /**
      Check whether a key is present.
       @method has
      @param {*} key
      @return {Boolean} true if the item was present, false otherwise
      @private
    */
    has: function (key) {
      return this._keys.has(key);
    },

    /**
      Iterate over all the keys and values. Calls the function once
      for each key, passing in value, key, and the map being iterated over,
      in that order.
       The keys are guaranteed to be iterated over in insertion order.
       @method forEach
      @param {Function} callback
      @param {*} self if passed, the `this` value inside the
        callback. By default, `this` is the map.
      @private
    */
    forEach: function (callback /*, ...thisArg*/) {
      if (typeof callback !== "function") {
        missingFunction(callback);
      }

      if (this.size === 0) {
        return;
      }

      var length = arguments.length;
      var map = this;
      var cb, thisArg;

      if (length === 2) {
        thisArg = arguments[1];
        cb = function (key) {
          callback.call(thisArg, map.get(key), key, map);
        };
      } else {
        cb = function (key) {
          callback(map.get(key), key, map);
        };
      }

      this._keys.forEach(cb);
    },

    /**
      @method clear
      @private
    */
    clear: function () {
      this._keys.clear();
      this._values = (0, _emberMetalPlatformCreate["default"])(null);
      this.size = 0;
    },

    /**
      @method copy
      @return {Ember.Map}
      @private
    */
    copy: function () {
      return copyMap(this, new Map());
    }
  };

  (0, _emberMetalDeprecate_property.deprecateProperty)(Map.prototype, "length", "size");

  /**
    @class MapWithDefault
    @namespace Ember
    @extends Ember.Map
    @private
    @constructor
    @param [options]
      @param {*} [options.defaultValue]
  */
  function MapWithDefault(options) {
    this._super$constructor();
    this.defaultValue = options.defaultValue;
  }

  /**
    @method create
    @static
    @param [options]
      @param {*} [options.defaultValue]
    @return {Ember.MapWithDefault|Ember.Map} If options are passed, returns
      `Ember.MapWithDefault` otherwise returns `Ember.Map`
    @private
  */
  MapWithDefault.create = function (options) {
    if (options) {
      return new MapWithDefault(options);
    } else {
      return new Map();
    }
  };

  MapWithDefault.prototype = (0, _emberMetalPlatformCreate["default"])(Map.prototype);
  MapWithDefault.prototype.constructor = MapWithDefault;
  MapWithDefault.prototype._super$constructor = Map;
  MapWithDefault.prototype._super$get = Map.prototype.get;

  /**
    Retrieve the value associated with a given key.
  
    @method get
    @param {*} key
    @return {*} the value associated with the key, or the default value
    @private
  */
  MapWithDefault.prototype.get = function (key) {
    var hasValue = this.has(key);

    if (hasValue) {
      return this._super$get(key);
    } else {
      var defaultValue = this.defaultValue(key);
      this.set(key, defaultValue);
      return defaultValue;
    }
  };

  /**
    @method copy
    @return {Ember.MapWithDefault}
    @private
  */
  MapWithDefault.prototype.copy = function () {
    var Constructor = this.constructor;
    return copyMap(this, new Constructor({
      defaultValue: this.defaultValue
    }));
  };

  exports["default"] = Map;
  exports.OrderedSet = OrderedSet;
  exports.Map = Map;
  exports.MapWithDefault = MapWithDefault;
});
/**
@module ember
@submodule ember-metal
*/

/*
  JavaScript (before ES6) does not have a Map implementation. Objects,
  which are often used as dictionaries, may only have Strings as keys.

  Because Ember has a way to get a unique identifier for every object
  via `Ember.guidFor`, we can implement a performant Map with arbitrary
  keys. Because it is commonly used in low-level bookkeeping, Map is
  implemented as a pure JavaScript object for performance.

  This implementation follows the current iteration of the ES6 proposal for
  maps (http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets),
  with one exception:  as we do not have the luxury of in-VM iteration, we implement a
  forEach method for iteration.

  Map is mocked out to look like an Ember object, so you can do
  `Ember.Map.create()` for symmetry with other Ember classes.
*/
enifed('ember-metal/merge', ['exports', 'ember-metal/keys'], function (exports, _emberMetalKeys) {
  exports["default"] = merge;
  exports.assign = assign;

  /**
    Merge the contents of two objects together into the first object.
  
    ```javascript
    Ember.merge({first: 'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}
    var a = {first: 'Yehuda'};
    var b = {last: 'Katz'};
    Ember.merge(a, b); // a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}
    ```
  
    @method merge
    @for Ember
    @param {Object} original The object to merge into
    @param {Object} updates The object to copy properties from
    @return {Object}
    @private
  */

  function merge(original, updates) {
    if (!updates || typeof updates !== 'object') {
      return original;
    }

    var props = (0, _emberMetalKeys["default"])(updates);
    var prop;
    var length = props.length;

    for (var i = 0; i < length; i++) {
      prop = props[i];
      original[prop] = updates[prop];
    }

    return original;
  }

  function assign(original) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    for (var i = 0, l = args.length; i < l; i++) {
      var arg = args[i];
      if (!arg) {
        continue;
      }

      var updates = (0, _emberMetalKeys["default"])(arg);

      for (var _i = 0, _l = updates.length; _i < _l; _i++) {
        var prop = updates[_i];
        original[prop] = arg[prop];
      }
    }

    return original;
  }
});
enifed("ember-metal/mixin", ["exports", "ember-metal/core", "ember-metal/merge", "ember-metal/array", "ember-metal/platform/create", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/utils", "ember-metal/expand_properties", "ember-metal/properties", "ember-metal/computed", "ember-metal/binding", "ember-metal/observer", "ember-metal/events", "ember-metal/streams/utils"], function (exports, _emberMetalCore, _emberMetalMerge, _emberMetalArray, _emberMetalPlatformCreate, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalUtils, _emberMetalExpand_properties, _emberMetalProperties, _emberMetalComputed, _emberMetalBinding, _emberMetalObserver, _emberMetalEvents, _emberMetalStreamsUtils) {
  exports.mixin = mixin;
  exports.required = required;
  exports.aliasMethod = aliasMethod;
  exports.observer = observer;
  exports.immediateObserver = immediateObserver;
  exports.beforeObserver = beforeObserver;
  // Remove "use strict"; from transpiled module until
  // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed
  //
  "REMOVE_USE_STRICT: true";

  var REQUIRED;
  var a_slice = [].slice;

  function superFunction() {
    var func = this.__nextSuper;
    var ret;

    if (func) {
      var length = arguments.length;
      this.__nextSuper = null;
      if (length === 0) {
        ret = func.call(this);
      } else if (length === 1) {
        ret = func.call(this, arguments[0]);
      } else if (length === 2) {
        ret = func.call(this, arguments[0], arguments[1]);
      } else {
        ret = func.apply(this, arguments);
      }
      this.__nextSuper = func;
      return ret;
    }
  }

  // ensure we prime superFunction to mitigate
  // v8 bug potentially incorrectly deopts this function: https://code.google.com/p/v8/issues/detail?id=3709
  var primer = {
    __nextSuper: function (a, b, c, d) {}
  };

  superFunction.call(primer);
  superFunction.call(primer, 1);
  superFunction.call(primer, 1, 2);
  superFunction.call(primer, 1, 2, 3);

  function mixinsMeta(obj) {
    var m = (0, _emberMetalUtils.meta)(obj, true);
    var ret = m.mixins;
    if (!ret) {
      ret = m.mixins = {};
    } else if (!m.hasOwnProperty("mixins")) {
      ret = m.mixins = (0, _emberMetalPlatformCreate["default"])(ret);
    }
    return ret;
  }

  function isMethod(obj) {
    return "function" === typeof obj && obj.isMethod !== false && obj !== Boolean && obj !== Object && obj !== Number && obj !== Array && obj !== Date && obj !== String;
  }

  var CONTINUE = {};

  function mixinProperties(mixinsMeta, mixin) {
    var guid;

    if (mixin instanceof Mixin) {
      guid = (0, _emberMetalUtils.guidFor)(mixin);
      if (mixinsMeta[guid]) {
        return CONTINUE;
      }
      mixinsMeta[guid] = mixin;
      return mixin.properties;
    } else {
      return mixin; // apply anonymous mixin properties
    }
  }

  function concatenatedMixinProperties(concatProp, props, values, base) {
    var concats;

    // reset before adding each new mixin to pickup concats from previous
    concats = values[concatProp] || base[concatProp];
    if (props[concatProp]) {
      concats = concats ? concats.concat(props[concatProp]) : props[concatProp];
    }

    return concats;
  }

  function giveDescriptorSuper(meta, key, property, values, descs, base) {
    var superProperty;

    // Computed properties override methods, and do not call super to them
    if (values[key] === undefined) {
      // Find the original descriptor in a parent mixin
      superProperty = descs[key];
    }

    // If we didn't find the original descriptor in a parent mixin, find
    // it on the original object.
    if (!superProperty) {
      var possibleDesc = base[key];
      var superDesc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;

      superProperty = superDesc;
    }

    if (superProperty === undefined || !(superProperty instanceof _emberMetalComputed.ComputedProperty)) {
      return property;
    }

    // Since multiple mixins may inherit from the same parent, we need
    // to clone the computed property so that other mixins do not receive
    // the wrapped version.
    property = (0, _emberMetalPlatformCreate["default"])(property);
    property._getter = (0, _emberMetalUtils.wrap)(property._getter, superProperty._getter);
    if (superProperty._setter) {
      if (property._setter) {
        property._setter = (0, _emberMetalUtils.wrap)(property._setter, superProperty._setter);
      } else {
        property._setter = superProperty._setter;
      }
    }

    return property;
  }

  var sourceAvailable = (function () {
    return this;
  }).toString().indexOf("return this;") > -1;

  function giveMethodSuper(obj, key, method, values, descs) {
    var superMethod;

    // Methods overwrite computed properties, and do not call super to them.
    if (descs[key] === undefined) {
      // Find the original method in a parent mixin
      superMethod = values[key];
    }

    // If we didn't find the original value in a parent mixin, find it in
    // the original object
    superMethod = superMethod || obj[key];

    // Only wrap the new method if the original method was a function
    if (superMethod === undefined || "function" !== typeof superMethod) {
      return method;
    }

    var hasSuper;
    if (sourceAvailable) {
      hasSuper = method.__hasSuper;

      if (hasSuper === undefined) {
        hasSuper = method.toString().indexOf("_super") > -1;
        method.__hasSuper = hasSuper;
      }
    }

    if (sourceAvailable === false || hasSuper) {
      return (0, _emberMetalUtils.wrap)(method, superMethod);
    } else {
      return method;
    }
  }

  function applyConcatenatedProperties(obj, key, value, values) {
    var baseValue = values[key] || obj[key];

    if (baseValue) {
      if ("function" === typeof baseValue.concat) {
        if (value === null || value === undefined) {
          return baseValue;
        } else {
          return baseValue.concat(value);
        }
      } else {
        return (0, _emberMetalUtils.makeArray)(baseValue).concat(value);
      }
    } else {
      return (0, _emberMetalUtils.makeArray)(value);
    }
  }

  function applyMergedProperties(obj, key, value, values) {
    var baseValue = values[key] || obj[key];

    _emberMetalCore["default"].assert("You passed in `" + JSON.stringify(value) + "` as the value for `" + key + "` but `" + key + "` cannot be an Array", !(0, _emberMetalUtils.isArray)(value));

    if (!baseValue) {
      return value;
    }

    var newBase = (0, _emberMetalMerge["default"])({}, baseValue);
    var hasFunction = false;

    for (var prop in value) {
      if (!value.hasOwnProperty(prop)) {
        continue;
      }

      var propValue = value[prop];
      if (isMethod(propValue)) {
        // TODO: support for Computed Properties, etc?
        hasFunction = true;
        newBase[prop] = giveMethodSuper(obj, prop, propValue, baseValue, {});
      } else {
        newBase[prop] = propValue;
      }
    }

    if (hasFunction) {
      newBase._super = superFunction;
    }

    return newBase;
  }

  function addNormalizedProperty(base, key, value, meta, descs, values, concats, mergings) {
    if (value instanceof _emberMetalProperties.Descriptor) {
      if (value === REQUIRED && descs[key]) {
        return CONTINUE;
      }

      // Wrap descriptor function to implement
      // __nextSuper() if needed
      if (value._getter) {
        value = giveDescriptorSuper(meta, key, value, values, descs, base);
      }

      descs[key] = value;
      values[key] = undefined;
    } else {
      if (concats && _emberMetalArray.indexOf.call(concats, key) >= 0 || key === "concatenatedProperties" || key === "mergedProperties") {
        value = applyConcatenatedProperties(base, key, value, values);
      } else if (mergings && _emberMetalArray.indexOf.call(mergings, key) >= 0) {
        value = applyMergedProperties(base, key, value, values);
      } else if (isMethod(value)) {
        value = giveMethodSuper(base, key, value, values, descs);
      }

      descs[key] = undefined;
      values[key] = value;
    }
  }

  function mergeMixins(mixins, m, descs, values, base, keys) {
    var currentMixin, props, key, concats, mergings, meta;

    function removeKeys(keyName) {
      delete descs[keyName];
      delete values[keyName];
    }

    for (var i = 0, l = mixins.length; i < l; i++) {
      currentMixin = mixins[i];
      _emberMetalCore["default"].assert("Expected hash or Mixin instance, got " + Object.prototype.toString.call(currentMixin), typeof currentMixin === "object" && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== "[object Array]");

      props = mixinProperties(m, currentMixin);
      if (props === CONTINUE) {
        continue;
      }

      if (props) {
        meta = (0, _emberMetalUtils.meta)(base);
        if (base.willMergeMixin) {
          base.willMergeMixin(props);
        }
        concats = concatenatedMixinProperties("concatenatedProperties", props, values, base);
        mergings = concatenatedMixinProperties("mergedProperties", props, values, base);

        for (key in props) {
          if (!props.hasOwnProperty(key)) {
            continue;
          }
          keys.push(key);
          addNormalizedProperty(base, key, props[key], meta, descs, values, concats, mergings);
        }

        // manually copy toString() because some JS engines do not enumerate it
        if (props.hasOwnProperty("toString")) {
          base.toString = props.toString;
        }
      } else if (currentMixin.mixins) {
        mergeMixins(currentMixin.mixins, m, descs, values, base, keys);
        if (currentMixin._without) {
          _emberMetalArray.forEach.call(currentMixin._without, removeKeys);
        }
      }
    }
  }

  var IS_BINDING = /^.+Binding$/;

  function detectBinding(obj, key, value, m) {
    if (IS_BINDING.test(key)) {
      var bindings = m.bindings;
      if (!bindings) {
        bindings = m.bindings = {};
      } else if (!m.hasOwnProperty("bindings")) {
        bindings = m.bindings = (0, _emberMetalPlatformCreate["default"])(m.bindings);
      }
      bindings[key] = value;
    }
  }

  function connectStreamBinding(obj, key, stream) {
    var onNotify = function (stream) {
      (0, _emberMetalObserver._suspendObserver)(obj, key, null, didChange, function () {
        (0, _emberMetalProperty_set.trySet)(obj, key, stream.value());
      });
    };

    var didChange = function () {
      stream.setValue((0, _emberMetalProperty_get.get)(obj, key), onNotify);
    };

    // Initialize value
    (0, _emberMetalProperty_set.set)(obj, key, stream.value());

    (0, _emberMetalObserver.addObserver)(obj, key, null, didChange);

    stream.subscribe(onNotify);

    if (obj._streamBindingSubscriptions === undefined) {
      obj._streamBindingSubscriptions = (0, _emberMetalPlatformCreate["default"])(null);
    }

    obj._streamBindingSubscriptions[key] = onNotify;
  }

  function connectBindings(obj, m) {
    // TODO Mixin.apply(instance) should disconnect binding if exists
    var bindings = m.bindings;
    var key, binding, to;
    if (bindings) {
      for (key in bindings) {
        binding = bindings[key];
        if (binding) {
          to = key.slice(0, -7); // strip Binding off end
          if ((0, _emberMetalStreamsUtils.isStream)(binding)) {
            connectStreamBinding(obj, to, binding);
            continue;
          } else if (binding instanceof _emberMetalBinding.Binding) {
            binding = binding.copy(); // copy prototypes' instance
            binding.to(to);
          } else {
            // binding is string path
            binding = new _emberMetalBinding.Binding(to, binding);
          }
          binding.connect(obj);
          obj[key] = binding;
        }
      }
      // mark as applied
      m.bindings = {};
    }
  }

  function finishPartial(obj, m) {
    connectBindings(obj, m || (0, _emberMetalUtils.meta)(obj));
    return obj;
  }

  function followAlias(obj, desc, m, descs, values) {
    var altKey = desc.methodName;
    var value;
    var possibleDesc;
    if (descs[altKey] || values[altKey]) {
      value = values[altKey];
      desc = descs[altKey];
    } else if ((possibleDesc = obj[altKey]) && possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor) {
      desc = possibleDesc;
      value = undefined;
    } else {
      desc = undefined;
      value = obj[altKey];
    }

    return { desc: desc, value: value };
  }

  function updateObserversAndListeners(obj, key, observerOrListener, pathsKey, updateMethod) {
    var paths = observerOrListener[pathsKey];

    if (paths) {
      for (var i = 0, l = paths.length; i < l; i++) {
        updateMethod(obj, paths[i], null, key);
      }
    }
  }

  function replaceObserversAndListeners(obj, key, observerOrListener) {
    var prev = obj[key];

    if ("function" === typeof prev) {
      updateObserversAndListeners(obj, key, prev, "__ember_observesBefore__", _emberMetalObserver.removeBeforeObserver);
      updateObserversAndListeners(obj, key, prev, "__ember_observes__", _emberMetalObserver.removeObserver);
      updateObserversAndListeners(obj, key, prev, "__ember_listens__", _emberMetalEvents.removeListener);
    }

    if ("function" === typeof observerOrListener) {
      updateObserversAndListeners(obj, key, observerOrListener, "__ember_observesBefore__", _emberMetalObserver.addBeforeObserver);
      updateObserversAndListeners(obj, key, observerOrListener, "__ember_observes__", _emberMetalObserver.addObserver);
      updateObserversAndListeners(obj, key, observerOrListener, "__ember_listens__", _emberMetalEvents.addListener);
    }
  }

  function applyMixin(obj, mixins, partial) {
    var descs = {};
    var values = {};
    var m = (0, _emberMetalUtils.meta)(obj);
    var keys = [];
    var key, value, desc;

    obj._super = superFunction;

    // Go through all mixins and hashes passed in, and:
    //
    // * Handle concatenated properties
    // * Handle merged properties
    // * Set up _super wrapping if necessary
    // * Set up computed property descriptors
    // * Copying `toString` in broken browsers
    mergeMixins(mixins, mixinsMeta(obj), descs, values, obj, keys);

    for (var i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      if (key === "constructor" || !values.hasOwnProperty(key)) {
        continue;
      }

      desc = descs[key];
      value = values[key];

      if (desc === REQUIRED) {
        continue;
      }

      while (desc && desc instanceof Alias) {
        var followed = followAlias(obj, desc, m, descs, values);
        desc = followed.desc;
        value = followed.value;
      }

      if (desc === undefined && value === undefined) {
        continue;
      }

      replaceObserversAndListeners(obj, key, value);
      detectBinding(obj, key, value, m);
      (0, _emberMetalProperties.defineProperty)(obj, key, desc, value, m);
    }

    if (!partial) {
      // don't apply to prototype
      finishPartial(obj, m);
    }

    return obj;
  }

  /**
    @method mixin
    @for Ember
    @param obj
    @param mixins*
    @return obj
    @private
  */

  function mixin(obj) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    applyMixin(obj, args, false);
    return obj;
  }

  /**
    The `Ember.Mixin` class allows you to create mixins, whose properties can be
    added to other classes. For instance,
  
    ```javascript
    App.Editable = Ember.Mixin.create({
      edit: function() {
        console.log('starting to edit');
        this.set('isEditing', true);
      },
      isEditing: false
    });
  
    // Mix mixins into classes by passing them as the first arguments to
    // .extend.
    App.CommentView = Ember.View.extend(App.Editable, {
      template: Ember.Handlebars.compile('{{#if view.isEditing}}...{{else}}...{{/if}}')
    });
  
    commentView = App.CommentView.create();
    commentView.edit(); // outputs 'starting to edit'
    ```
  
    Note that Mixins are created with `Ember.Mixin.create`, not
    `Ember.Mixin.extend`.
  
    Note that mixins extend a constructor's prototype so arrays and object literals
    defined as properties will be shared amongst objects that implement the mixin.
    If you want to define a property in a mixin that is not shared, you can define
    it either as a computed property or have it be created on initialization of the object.
  
    ```javascript
    //filters array will be shared amongst any object implementing mixin
    App.Filterable = Ember.Mixin.create({
      filters: Ember.A()
    });
  
    //filters will be a separate  array for every object implementing the mixin
    App.Filterable = Ember.Mixin.create({
      filters: Ember.computed(function() {return Ember.A();})
    });
  
    //filters will be created as a separate array during the object's initialization
    App.Filterable = Ember.Mixin.create({
      init: function() {
        this._super.apply(this, arguments);
        this.set("filters", Ember.A());
      }
    });
    ```
  
    @class Mixin
    @namespace Ember
    @public
  */
  exports["default"] = Mixin;

  function Mixin(args, properties) {
    this.properties = properties;

    var length = args && args.length;

    if (length > 0) {
      var m = new Array(length);

      for (var i = 0; i < length; i++) {
        var x = args[i];
        if (x instanceof Mixin) {
          m[i] = x;
        } else {
          m[i] = new Mixin(undefined, x);
        }
      }

      this.mixins = m;
    } else {
      this.mixins = undefined;
    }
    this.ownerConstructor = undefined;
  }

  Mixin._apply = applyMixin;

  Mixin.applyPartial = function (obj) {
    var args = a_slice.call(arguments, 1);
    return applyMixin(obj, args, true);
  };

  Mixin.finishPartial = finishPartial;

  // ES6TODO: this relies on a global state?
  _emberMetalCore["default"].anyUnprocessedMixins = false;

  /**
    @method create
    @static
    @param arguments*
    @public
  */
  Mixin.create = function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    // ES6TODO: this relies on a global state?
    _emberMetalCore["default"].anyUnprocessedMixins = true;
    var M = this;
    return new M(args, undefined);
  };

  var MixinPrototype = Mixin.prototype;

  /**
    @method reopen
    @param arguments*
    @private
  */
  MixinPrototype.reopen = function () {
    var currentMixin;

    if (this.properties) {
      currentMixin = new Mixin(undefined, this.properties);
      this.properties = undefined;
      this.mixins = [currentMixin];
    } else if (!this.mixins) {
      this.mixins = [];
    }

    var len = arguments.length;
    var mixins = this.mixins;
    var idx;

    for (idx = 0; idx < len; idx++) {
      currentMixin = arguments[idx];
      _emberMetalCore["default"].assert("Expected hash or Mixin instance, got " + Object.prototype.toString.call(currentMixin), typeof currentMixin === "object" && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== "[object Array]");

      if (currentMixin instanceof Mixin) {
        mixins.push(currentMixin);
      } else {
        mixins.push(new Mixin(undefined, currentMixin));
      }
    }

    return this;
  };

  /**
    @method apply
    @param obj
    @return applied object
    @private
  */
  MixinPrototype.apply = function (obj) {
    return applyMixin(obj, [this], false);
  };

  MixinPrototype.applyPartial = function (obj) {
    return applyMixin(obj, [this], true);
  };

  function _detect(curMixin, targetMixin, seen) {
    var guid = (0, _emberMetalUtils.guidFor)(curMixin);

    if (seen[guid]) {
      return false;
    }
    seen[guid] = true;

    if (curMixin === targetMixin) {
      return true;
    }
    var mixins = curMixin.mixins;
    var loc = mixins ? mixins.length : 0;
    while (--loc >= 0) {
      if (_detect(mixins[loc], targetMixin, seen)) {
        return true;
      }
    }
    return false;
  }

  /**
    @method detect
    @param obj
    @return {Boolean}
    @private
  */
  MixinPrototype.detect = function (obj) {
    if (!obj) {
      return false;
    }
    if (obj instanceof Mixin) {
      return _detect(obj, this, {});
    }
    var m = obj["__ember_meta__"];
    var mixins = m && m.mixins;
    if (mixins) {
      return !!mixins[(0, _emberMetalUtils.guidFor)(this)];
    }
    return false;
  };

  MixinPrototype.without = function () {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var ret = new Mixin([this]);
    ret._without = args;
    return ret;
  };

  function _keys(ret, mixin, seen) {
    if (seen[(0, _emberMetalUtils.guidFor)(mixin)]) {
      return;
    }
    seen[(0, _emberMetalUtils.guidFor)(mixin)] = true;

    if (mixin.properties) {
      var props = mixin.properties;
      for (var key in props) {
        if (props.hasOwnProperty(key)) {
          ret[key] = true;
        }
      }
    } else if (mixin.mixins) {
      _emberMetalArray.forEach.call(mixin.mixins, function (x) {
        _keys(ret, x, seen);
      });
    }
  }

  MixinPrototype.keys = function () {
    var keys = {};
    var seen = {};
    var ret = [];
    _keys(keys, this, seen);
    for (var key in keys) {
      if (keys.hasOwnProperty(key)) {
        ret.push(key);
      }
    }
    return ret;
  };

  // returns the mixins currently applied to the specified object
  // TODO: Make Ember.mixin
  Mixin.mixins = function (obj) {
    var m = obj["__ember_meta__"];
    var mixins = m && m.mixins;
    var ret = [];

    if (!mixins) {
      return ret;
    }

    for (var key in mixins) {
      var currentMixin = mixins[key];

      // skip primitive mixins since these are always anonymous
      if (!currentMixin.properties) {
        ret.push(currentMixin);
      }
    }

    return ret;
  };

  exports.REQUIRED = REQUIRED = new _emberMetalProperties.Descriptor();
  REQUIRED.toString = function () {
    return "(Required Property)";
  };

  /**
    Denotes a required property for a mixin
  
    @method required
    @for Ember
    @private
  */

  function required() {
    _emberMetalCore["default"].deprecate("Ember.required is deprecated as its behavior is inconsistent and unreliable.", false);
    return REQUIRED;
  }

  function Alias(methodName) {
    this.isDescriptor = true;
    this.methodName = methodName;
  }

  Alias.prototype = new _emberMetalProperties.Descriptor();

  /**
    Makes a method available via an additional name.
  
    ```javascript
    App.Person = Ember.Object.extend({
      name: function() {
        return 'Tomhuda Katzdale';
      },
      moniker: Ember.aliasMethod('name')
    });
  
    var goodGuy = App.Person.create();
  
    goodGuy.name();    // 'Tomhuda Katzdale'
    goodGuy.moniker(); // 'Tomhuda Katzdale'
    ```
  
    @method aliasMethod
    @for Ember
    @param {String} methodName name of the method to alias
    @private
  */

  function aliasMethod(methodName) {
    return new Alias(methodName);
  }

  // ..........................................................
  // OBSERVER HELPER
  //

  /**
    Specify a method that observes property changes.
  
    ```javascript
    Ember.Object.extend({
      valueObserver: Ember.observer('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```
  
    Also available as `Function.prototype.observes` if prototype extensions are
    enabled.
  
    @method observer
    @for Ember
    @param {String} propertyNames*
    @param {Function} func
    @return func
    @private
  */

  function observer() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    var func = args.slice(-1)[0];
    var paths;

    var addWatchedProperty = function (path) {
      paths.push(path);
    };
    var _paths = args.slice(0, -1);

    if (typeof func !== "function") {
      // revert to old, soft-deprecated argument ordering

      func = args[0];
      _paths = args.slice(1);
    }

    paths = [];

    for (var i = 0; i < _paths.length; ++i) {
      (0, _emberMetalExpand_properties["default"])(_paths[i], addWatchedProperty);
    }

    if (typeof func !== "function") {
      throw new _emberMetalCore["default"].Error("Ember.observer called without a function");
    }

    func.__ember_observes__ = paths;
    return func;
  }

  /**
    Specify a method that observes property changes.
  
    ```javascript
    Ember.Object.extend({
      valueObserver: Ember.immediateObserver('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```
  
    In the future, `Ember.observer` may become asynchronous. In this event,
    `Ember.immediateObserver` will maintain the synchronous behavior.
  
    Also available as `Function.prototype.observesImmediately` if prototype extensions are
    enabled.
  
    @method immediateObserver
    @for Ember
    @param {String} propertyNames*
    @param {Function} func
    @deprecated Use `Ember.observer` instead.
    @return func
    @private
  */

  function immediateObserver() {
    _emberMetalCore["default"].deprecate("Usage of `Ember.immediateObserver` is deprecated, use `Ember.observer` instead.");

    for (var i = 0, l = arguments.length; i < l; i++) {
      var arg = arguments[i];
      _emberMetalCore["default"].assert("Immediate observers must observe internal properties only, not properties on other objects.", typeof arg !== "string" || arg.indexOf(".") === -1);
    }

    return observer.apply(this, arguments);
  }

  /**
    When observers fire, they are called with the arguments `obj`, `keyName`.
  
    Note, `@each.property` observer is called per each add or replace of an element
    and it's not called with a specific enumeration item.
  
    A `beforeObserver` fires before a property changes.
  
    A `beforeObserver` is an alternative form of `.observesBefore()`.
  
    ```javascript
    App.PersonView = Ember.View.extend({
      friends: [{ name: 'Tom' }, { name: 'Stefan' }, { name: 'Kris' }],
  
      valueWillChange: Ember.beforeObserver('content.value', function(obj, keyName) {
        this.changingFrom = obj.get(keyName);
      }),
  
      valueDidChange: Ember.observer('content.value', function(obj, keyName) {
          // only run if updating a value already in the DOM
          if (this.get('state') === 'inDOM') {
            var color = obj.get(keyName) > this.changingFrom ? 'green' : 'red';
            // logic
          }
      }),
  
      friendsDidChange: Ember.observer('friends.@each.name', function(obj, keyName) {
        // some logic
        // obj.get(keyName) returns friends array
      })
    });
    ```
  
    Also available as `Function.prototype.observesBefore` if prototype extensions are
    enabled.
  
    @method beforeObserver
    @for Ember
    @param {String} propertyNames*
    @param {Function} func
    @return func
    @private
  */

  function beforeObserver() {
    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    var func = args.slice(-1)[0];
    var paths;

    var addWatchedProperty = function (path) {
      paths.push(path);
    };

    var _paths = args.slice(0, -1);

    if (typeof func !== "function") {
      // revert to old, soft-deprecated argument ordering

      func = args[0];
      _paths = args.slice(1);
    }

    paths = [];

    for (var i = 0; i < _paths.length; ++i) {
      (0, _emberMetalExpand_properties["default"])(_paths[i], addWatchedProperty);
    }

    if (typeof func !== "function") {
      throw new _emberMetalCore["default"].Error("Ember.beforeObserver called without a function");
    }

    func.__ember_observesBefore__ = paths;
    return func;
  }

  exports.IS_BINDING = IS_BINDING;
  exports.Mixin = Mixin;
  exports.required = required;
  exports.REQUIRED = REQUIRED;
});
/**
@module ember
@submodule ember-metal
*/

// warn, assert, wrap, et;
enifed("ember-metal/observer", ["exports", "ember-metal/watching", "ember-metal/array", "ember-metal/events"], function (exports, _emberMetalWatching, _emberMetalArray, _emberMetalEvents) {
  exports.addObserver = addObserver;
  exports.observersFor = observersFor;
  exports.removeObserver = removeObserver;
  exports.addBeforeObserver = addBeforeObserver;
  exports._suspendBeforeObserver = _suspendBeforeObserver;
  exports._suspendObserver = _suspendObserver;
  exports._suspendBeforeObservers = _suspendBeforeObservers;
  exports._suspendObservers = _suspendObservers;
  exports.beforeObserversFor = beforeObserversFor;
  exports.removeBeforeObserver = removeBeforeObserver;

  /**
  @module ember-metal
  */

  var AFTER_OBSERVERS = ":change";
  var BEFORE_OBSERVERS = ":before";

  function changeEvent(keyName) {
    return keyName + AFTER_OBSERVERS;
  }

  function beforeEvent(keyName) {
    return keyName + BEFORE_OBSERVERS;
  }

  /**
    @method addObserver
    @for Ember
    @param obj
    @param {String} _path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */

  function addObserver(obj, _path, target, method) {
    (0, _emberMetalEvents.addListener)(obj, changeEvent(_path), target, method);
    (0, _emberMetalWatching.watch)(obj, _path);

    return this;
  }

  function observersFor(obj, path) {
    return (0, _emberMetalEvents.listenersFor)(obj, changeEvent(path));
  }

  /**
    @method removeObserver
    @for Ember
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */

  function removeObserver(obj, path, target, method) {
    (0, _emberMetalWatching.unwatch)(obj, path);
    (0, _emberMetalEvents.removeListener)(obj, changeEvent(path), target, method);

    return this;
  }

  /**
    @method addBeforeObserver
    @for Ember
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @private
  */

  function addBeforeObserver(obj, path, target, method) {
    (0, _emberMetalEvents.addListener)(obj, beforeEvent(path), target, method);
    (0, _emberMetalWatching.watch)(obj, path);

    return this;
  }

  // Suspend observer during callback.
  //
  // This should only be used by the target of the observer
  // while it is setting the observed path.

  function _suspendBeforeObserver(obj, path, target, method, callback) {
    return (0, _emberMetalEvents.suspendListener)(obj, beforeEvent(path), target, method, callback);
  }

  function _suspendObserver(obj, path, target, method, callback) {
    return (0, _emberMetalEvents.suspendListener)(obj, changeEvent(path), target, method, callback);
  }

  function _suspendBeforeObservers(obj, paths, target, method, callback) {
    var events = _emberMetalArray.map.call(paths, beforeEvent);
    return (0, _emberMetalEvents.suspendListeners)(obj, events, target, method, callback);
  }

  function _suspendObservers(obj, paths, target, method, callback) {
    var events = _emberMetalArray.map.call(paths, changeEvent);
    return (0, _emberMetalEvents.suspendListeners)(obj, events, target, method, callback);
  }

  function beforeObserversFor(obj, path) {
    return (0, _emberMetalEvents.listenersFor)(obj, beforeEvent(path));
  }

  /**
    @method removeBeforeObserver
    @for Ember
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @private
  */

  function removeBeforeObserver(obj, path, target, method) {
    (0, _emberMetalWatching.unwatch)(obj, path);
    (0, _emberMetalEvents.removeListener)(obj, beforeEvent(path), target, method);

    return this;
  }
});
enifed("ember-metal/observer_set", ["exports", "ember-metal/utils", "ember-metal/events"], function (exports, _emberMetalUtils, _emberMetalEvents) {

  /*
    this.observerSet = {
      [senderGuid]: { // variable name: `keySet`
        [keyName]: listIndex
      }
    },
    this.observers = [
      {
        sender: obj,
        keyName: keyName,
        eventName: eventName,
        listeners: [
          [target, method, flags]
        ]
      },
      ...
    ]
  */
  exports["default"] = ObserverSet;

  function ObserverSet() {
    this.clear();
  }

  ObserverSet.prototype.add = function (sender, keyName, eventName) {
    var observerSet = this.observerSet;
    var observers = this.observers;
    var senderGuid = (0, _emberMetalUtils.guidFor)(sender);
    var keySet = observerSet[senderGuid];
    var index;

    if (!keySet) {
      observerSet[senderGuid] = keySet = {};
    }
    index = keySet[keyName];
    if (index === undefined) {
      index = observers.push({
        sender: sender,
        keyName: keyName,
        eventName: eventName,
        listeners: []
      }) - 1;
      keySet[keyName] = index;
    }
    return observers[index].listeners;
  };

  ObserverSet.prototype.flush = function () {
    var observers = this.observers;
    var i, len, observer, sender;
    this.clear();
    for (i = 0, len = observers.length; i < len; ++i) {
      observer = observers[i];
      sender = observer.sender;
      if (sender.isDestroying || sender.isDestroyed) {
        continue;
      }
      (0, _emberMetalEvents.sendEvent)(sender, observer.eventName, [sender, observer.keyName], observer.listeners);
    }
  };

  ObserverSet.prototype.clear = function () {
    this.observerSet = {};
    this.observers = [];
  };
});
enifed('ember-metal/path_cache', ['exports', 'ember-metal/cache'], function (exports, _emberMetalCache) {
  exports.isGlobal = isGlobal;
  exports.isGlobalPath = isGlobalPath;
  exports.hasThis = hasThis;
  exports.isPath = isPath;
  exports.getFirstKey = getFirstKey;
  exports.getTailPath = getTailPath;

  var IS_GLOBAL = /^[A-Z$]/;
  var IS_GLOBAL_PATH = /^[A-Z$].*[\.]/;
  var HAS_THIS = 'this.';

  var isGlobalCache = new _emberMetalCache["default"](1000, function (key) {
    return IS_GLOBAL.test(key);
  });

  var isGlobalPathCache = new _emberMetalCache["default"](1000, function (key) {
    return IS_GLOBAL_PATH.test(key);
  });

  var hasThisCache = new _emberMetalCache["default"](1000, function (key) {
    return key.lastIndexOf(HAS_THIS, 0) === 0;
  });

  var firstDotIndexCache = new _emberMetalCache["default"](1000, function (key) {
    return key.indexOf('.');
  });

  var firstKeyCache = new _emberMetalCache["default"](1000, function (path) {
    var index = firstDotIndexCache.get(path);
    if (index === -1) {
      return path;
    } else {
      return path.slice(0, index);
    }
  });

  var tailPathCache = new _emberMetalCache["default"](1000, function (path) {
    var index = firstDotIndexCache.get(path);
    if (index !== -1) {
      return path.slice(index + 1);
    }
  });

  var caches = {
    isGlobalCache: isGlobalCache,
    isGlobalPathCache: isGlobalPathCache,
    hasThisCache: hasThisCache,
    firstDotIndexCache: firstDotIndexCache,
    firstKeyCache: firstKeyCache,
    tailPathCache: tailPathCache
  };

  exports.caches = caches;

  function isGlobal(path) {
    return isGlobalCache.get(path);
  }

  function isGlobalPath(path) {
    return isGlobalPathCache.get(path);
  }

  function hasThis(path) {
    return hasThisCache.get(path);
  }

  function isPath(path) {
    return firstDotIndexCache.get(path) !== -1;
  }

  function getFirstKey(path) {
    return firstKeyCache.get(path);
  }

  function getTailPath(path) {
    return tailPathCache.get(path);
  }
});
enifed('ember-metal/platform/create', ['exports', 'ember-metal/platform/define_properties'], function (exports, _emberMetalPlatformDefine_properties) {
  // Remove "use strict"; from transpiled module until
  // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed
  //
  'REMOVE_USE_STRICT: true';

  /**
  @class platform
  @namespace Ember
  @static
  @private
  */

  /**
    Identical to `Object.create()`. Implements if not available natively.
  
    @since 1.8.0
    @method create
    @for Ember
    @public
  */
  var create;
  // ES5 15.2.3.5
  // http://es5.github.com/#x15.2.3.5
  if (!(Object.create && !Object.create(null).hasOwnProperty)) {
    /* jshint scripturl:true, proto:true */
    // Contributed by Brandon Benvie, October, 2012
    var createEmpty;
    var supportsProto = !({ '__proto__': null } instanceof Object);
    // the following produces false positives
    // in Opera Mini => not a reliable check
    // Object.prototype.__proto__ === null
    if (supportsProto || typeof document === 'undefined') {
      createEmpty = function () {
        return { '__proto__': null };
      };
    } else {
      // In old IE __proto__ can't be used to manually set `null`, nor does
      // any other method exist to make an object that inherits from nothing,
      // aside from Object.prototype itself. Instead, create a new global
      // object and *steal* its Object.prototype and strip it bare. This is
      // used as the prototype to create nullary objects.
      createEmpty = function () {
        var iframe = document.createElement('iframe');
        var parent = document.body || document.documentElement;
        iframe.style.display = 'none';
        parent.appendChild(iframe);
        iframe.src = 'javascript:';
        var empty = iframe.contentWindow.Object.prototype;
        parent.removeChild(iframe);
        iframe = null;
        delete empty.constructor;
        delete empty.hasOwnProperty;
        delete empty.propertyIsEnumerable;
        delete empty.isPrototypeOf;
        delete empty.toLocaleString;
        delete empty.toString;
        delete empty.valueOf;

        function Empty() {}
        Empty.prototype = empty;
        // short-circuit future calls
        createEmpty = function () {
          return new Empty();
        };
        return new Empty();
      };
    }

    create = Object.create = function create(prototype, properties) {

      var object;
      function Type() {} // An empty constructor.

      if (prototype === null) {
        object = createEmpty();
      } else {
        if (typeof prototype !== 'object' && typeof prototype !== 'function') {
          // In the native implementation `parent` can be `null`
          // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)
          // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`
          // like they are in modern browsers. Using `Object.create` on DOM elements
          // is...err...probably inappropriate, but the native version allows for it.
          throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome
        }

        Type.prototype = prototype;

        object = new Type();
      }

      if (properties !== undefined) {
        (0, _emberMetalPlatformDefine_properties["default"])(object, properties);
      }

      return object;
    };
  } else {
    create = Object.create;
  }

  exports["default"] = create;
});
enifed("ember-metal/platform/define_properties", ["exports", "ember-metal/platform/define_property"], function (exports, _emberMetalPlatformDefine_property) {

  var defineProperties = Object.defineProperties;

  // ES5 15.2.3.7
  // http://es5.github.com/#x15.2.3.7
  if (!defineProperties) {
    defineProperties = function defineProperties(object, properties) {
      for (var property in properties) {
        if (properties.hasOwnProperty(property) && property !== "__proto__") {
          (0, _emberMetalPlatformDefine_property.defineProperty)(object, property, properties[property]);
        }
      }
      return object;
    };

    Object.defineProperties = defineProperties;
  }

  exports["default"] = defineProperties;
});
enifed('ember-metal/platform/define_property', ['exports'], function (exports) {
  /*globals Node */

  /**
  @class platform
  @namespace Ember
  @static
  @private
  */

  /**
    Set to true if the platform supports native getters and setters.
  
    @property hasPropertyAccessors
    @final
    @private
  */

  /**
    Identical to `Object.defineProperty()`. Implements as much functionality
    as possible if not available natively.
  
    @method defineProperty
    @param {Object} obj The object to modify
    @param {String} keyName property name to modify
    @param {Object} desc descriptor hash
    @return {void}
    @public
  */
  var defineProperty = (function checkCompliance(defineProperty) {
    if (!defineProperty) {
      return;
    }

    try {
      var a = 5;
      var obj = {};
      defineProperty(obj, 'a', {
        configurable: true,
        enumerable: true,
        get: function () {
          return a;
        },
        set: function (v) {
          a = v;
        }
      });
      if (obj.a !== 5) {
        return;
      }

      obj.a = 10;
      if (a !== 10) {
        return;
      }

      // check non-enumerability
      defineProperty(obj, 'a', {
        configurable: true,
        enumerable: false,
        writable: true,
        value: true
      });
      for (var key in obj) {
        if (key === 'a') {
          return;
        }
      }

      // Detects a bug in Android <3.2 where you cannot redefine a property using
      // Object.defineProperty once accessors have already been set.
      if (obj.a !== true) {
        return;
      }

      // Detects a bug in Android <3 where redefining a property without a value changes the value
      // Object.defineProperty once accessors have already been set.
      defineProperty(obj, 'a', {
        enumerable: false
      });
      if (obj.a !== true) {
        return;
      }

      // defineProperty is compliant
      return defineProperty;
    } catch (e) {
      // IE8 defines Object.defineProperty but calling it on an Object throws
      return;
    }
  })(Object.defineProperty);

  var hasES5CompliantDefineProperty = !!defineProperty;

  if (hasES5CompliantDefineProperty && typeof document !== 'undefined') {
    // This is for Safari 5.0, which supports Object.defineProperty, but not
    // on DOM nodes.
    var canDefinePropertyOnDOM = (function () {
      try {
        defineProperty(document.createElement('div'), 'definePropertyOnDOM', {});
        return true;
      } catch (e) {}

      return false;
    })();

    if (!canDefinePropertyOnDOM) {
      exports.defineProperty = defineProperty = function (obj, keyName, desc) {
        var isNode;

        if (typeof Node === 'object') {
          isNode = obj instanceof Node;
        } else {
          isNode = typeof obj === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
        }

        if (isNode) {
          // TODO: Should we have a warning here?
          return obj[keyName] = desc.value;
        } else {
          return Object.defineProperty(obj, keyName, desc);
        }
      };
    }
  }

  if (!hasES5CompliantDefineProperty) {
    exports.defineProperty = defineProperty = function definePropertyPolyfill(obj, keyName, desc) {
      if (!desc.get) {
        obj[keyName] = desc.value;
      }
    };
  }

  var hasPropertyAccessors = hasES5CompliantDefineProperty;
  var canDefineNonEnumerableProperties = hasES5CompliantDefineProperty;

  exports.hasES5CompliantDefineProperty = hasES5CompliantDefineProperty;
  exports.defineProperty = defineProperty;
  exports.hasPropertyAccessors = hasPropertyAccessors;
  exports.canDefineNonEnumerableProperties = canDefineNonEnumerableProperties;
});
enifed("ember-metal/properties", ["exports", "ember-metal/core", "ember-metal/utils", "ember-metal/platform/define_property", "ember-metal/property_events"], function (exports, _emberMetalCore, _emberMetalUtils, _emberMetalPlatformDefine_property, _emberMetalProperty_events) {
  exports.Descriptor = Descriptor;
  exports.MANDATORY_SETTER_FUNCTION = MANDATORY_SETTER_FUNCTION;
  exports.DEFAULT_GETTER_FUNCTION = DEFAULT_GETTER_FUNCTION;
  exports.defineProperty = defineProperty;

  // ..........................................................
  // DESCRIPTOR
  //

  /**
    Objects of this type can implement an interface to respond to requests to
    get and set. The default implementation handles simple properties.
  
    @class Descriptor
    @private
  */

  function Descriptor() {
    this.isDescriptor = true;
  }

  // ..........................................................
  // DEFINING PROPERTIES API
  //

  function MANDATORY_SETTER_FUNCTION(name) {
    return function SETTER_FUNCTION(value) {
      _emberMetalCore["default"].assert("You must use Ember.set() to set the `" + name + "` property (of " + this + ") to `" + value + "`.", false);
    };
  }

  function DEFAULT_GETTER_FUNCTION(name) {
    return function GETTER_FUNCTION() {
      var meta = this["__ember_meta__"];
      return meta && meta.values[name];
    };
  }

  /**
    NOTE: This is a low-level method used by other parts of the API. You almost
    never want to call this method directly. Instead you should use
    `Ember.mixin()` to define new properties.
  
    Defines a property on an object. This method works much like the ES5
    `Object.defineProperty()` method except that it can also accept computed
    properties and other special descriptors.
  
    Normally this method takes only three parameters. However if you pass an
    instance of `Descriptor` as the third param then you can pass an
    optional value as the fourth parameter. This is often more efficient than
    creating new descriptor hashes for each property.
  
    ## Examples
  
    ```javascript
    // ES5 compatible mode
    Ember.defineProperty(contact, 'firstName', {
      writable: true,
      configurable: false,
      enumerable: true,
      value: 'Charles'
    });
  
    // define a simple property
    Ember.defineProperty(contact, 'lastName', undefined, 'Jolley');
  
    // define a computed property
    Ember.defineProperty(contact, 'fullName', Ember.computed(function() {
      return this.firstName+' '+this.lastName;
    }).property('firstName', 'lastName'));
    ```
  
    @private
    @method defineProperty
    @for Ember
    @param {Object} obj the object to define this property on. This may be a prototype.
    @param {String} keyName the name of the property
    @param {Descriptor} [desc] an instance of `Descriptor` (typically a
      computed property) or an ES5 descriptor.
      You must provide this or `data` but not both.
    @param {*} [data] something other than a descriptor, that will
      become the explicit value of this property.
  */

  function defineProperty(obj, keyName, desc, data, meta) {
    var possibleDesc, existingDesc, watching, value;

    if (!meta) {
      meta = (0, _emberMetalUtils.meta)(obj);
    }
    var watchEntry = meta.watching[keyName];
    possibleDesc = obj[keyName];
    existingDesc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;

    watching = watchEntry !== undefined && watchEntry > 0;

    if (existingDesc) {
      existingDesc.teardown(obj, keyName);
    }

    if (desc instanceof Descriptor) {
      value = desc;

      if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
        if (watching && _emberMetalPlatformDefine_property.hasPropertyAccessors) {
          (0, _emberMetalPlatformDefine_property.defineProperty)(obj, keyName, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: value
          });
        } else {
          obj[keyName] = value;
        }
      } else {
        obj[keyName] = value;
      }
      if (desc.setup) {
        desc.setup(obj, keyName);
      }
    } else {
      if (desc == null) {
        value = data;

        if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
          if (watching && _emberMetalPlatformDefine_property.hasPropertyAccessors) {
            meta.values[keyName] = data;
            (0, _emberMetalPlatformDefine_property.defineProperty)(obj, keyName, {
              configurable: true,
              enumerable: true,
              set: MANDATORY_SETTER_FUNCTION(keyName),
              get: DEFAULT_GETTER_FUNCTION(keyName)
            });
          } else {
            obj[keyName] = data;
          }
        } else {
          obj[keyName] = data;
        }
      } else {
        value = desc;

        // compatibility with ES5
        (0, _emberMetalPlatformDefine_property.defineProperty)(obj, keyName, desc);
      }
    }

    // if key is being watched, override chains that
    // were initialized with the prototype
    if (watching) {
      (0, _emberMetalProperty_events.overrideChains)(obj, keyName, meta);
    }

    // The `value` passed to the `didDefineProperty` hook is
    // either the descriptor or data, whichever was passed.
    if (obj.didDefineProperty) {
      obj.didDefineProperty(obj, keyName, value);
    }

    return this;
  }
});
/**
@module ember-metal
*/
enifed("ember-metal/property_events", ["exports", "ember-metal/utils", "ember-metal/events", "ember-metal/observer_set"], function (exports, _emberMetalUtils, _emberMetalEvents, _emberMetalObserver_set) {
  var PROPERTY_DID_CHANGE = (0, _emberMetalUtils.symbol)("PROPERTY_DID_CHANGE");

  exports.PROPERTY_DID_CHANGE = PROPERTY_DID_CHANGE;
  var beforeObserverSet = new _emberMetalObserver_set["default"]();
  var observerSet = new _emberMetalObserver_set["default"]();
  var deferred = 0;

  // ..........................................................
  // PROPERTY CHANGES
  //

  /**
    This function is called just before an object property is about to change.
    It will notify any before observers and prepare caches among other things.
  
    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually along with `Ember.propertyDidChange()` which you should call just
    after the property value changes.
  
    @method propertyWillChange
    @for Ember
    @param {Object} obj The object with the property that will change
    @param {String} keyName The property key (or path) that will change.
    @return {void}
    @private
  */
  function propertyWillChange(obj, keyName) {
    var m = obj["__ember_meta__"];
    var watching = m && m.watching[keyName] > 0 || keyName === "length";
    var proto = m && m.proto;
    var possibleDesc = obj[keyName];
    var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;

    if (!watching) {
      return;
    }

    if (proto === obj) {
      return;
    }

    if (desc && desc.willChange) {
      desc.willChange(obj, keyName);
    }

    dependentKeysWillChange(obj, keyName, m);
    chainsWillChange(obj, keyName, m);
    notifyBeforeObservers(obj, keyName);
  }

  /**
    This function is called just after an object property has changed.
    It will notify any observers and clear caches among other things.
  
    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually along with `Ember.propertyWillChange()` which you should call just
    before the property value changes.
  
    @method propertyDidChange
    @for Ember
    @param {Object} obj The object with the property that will change
    @param {String} keyName The property key (or path) that will change.
    @return {void}
    @private
  */
  function propertyDidChange(obj, keyName) {
    var m = obj["__ember_meta__"];
    var watching = m && m.watching[keyName] > 0 || keyName === "length";
    var proto = m && m.proto;
    var possibleDesc = obj[keyName];
    var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;

    if (proto === obj) {
      return;
    }

    // shouldn't this mean that we're watching this key?
    if (desc && desc.didChange) {
      desc.didChange(obj, keyName);
    }

    if (obj[PROPERTY_DID_CHANGE]) {
      obj[PROPERTY_DID_CHANGE](keyName);
    }

    if (!watching && keyName !== "length") {
      return;
    }

    if (m && m.deps && m.deps[keyName]) {
      dependentKeysDidChange(obj, keyName, m);
    }

    chainsDidChange(obj, keyName, m, false);
    notifyObservers(obj, keyName);
  }

  var WILL_SEEN, DID_SEEN;
  // called whenever a property is about to change to clear the cache of any dependent keys (and notify those properties of changes, etc...)
  function dependentKeysWillChange(obj, depKey, meta) {
    if (obj.isDestroying) {
      return;
    }

    var deps;
    if (meta && meta.deps && (deps = meta.deps[depKey])) {
      var seen = WILL_SEEN;
      var top = !seen;

      if (top) {
        seen = WILL_SEEN = {};
      }

      iterDeps(propertyWillChange, obj, deps, depKey, seen, meta);

      if (top) {
        WILL_SEEN = null;
      }
    }
  }

  // called whenever a property has just changed to update dependent keys
  function dependentKeysDidChange(obj, depKey, meta) {
    if (obj.isDestroying) {
      return;
    }

    var deps;
    if (meta && meta.deps && (deps = meta.deps[depKey])) {
      var seen = DID_SEEN;
      var top = !seen;

      if (top) {
        seen = DID_SEEN = {};
      }

      iterDeps(propertyDidChange, obj, deps, depKey, seen, meta);

      if (top) {
        DID_SEEN = null;
      }
    }
  }

  function keysOf(obj) {
    var keys = [];

    for (var key in obj) {
      keys.push(key);
    }

    return keys;
  }

  function iterDeps(method, obj, deps, depKey, seen, meta) {
    var keys, key, i, possibleDesc, desc;
    var guid = (0, _emberMetalUtils.guidFor)(obj);
    var current = seen[guid];

    if (!current) {
      current = seen[guid] = {};
    }

    if (current[depKey]) {
      return;
    }

    current[depKey] = true;

    if (deps) {
      keys = keysOf(deps);
      for (i = 0; i < keys.length; i++) {
        key = keys[i];
        possibleDesc = obj[key];
        desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;

        if (desc && desc._suspended === obj) {
          continue;
        }

        method(obj, key);
      }
    }
  }

  function chainsWillChange(obj, keyName, m) {
    if (!(m.hasOwnProperty("chainWatchers") && m.chainWatchers[keyName])) {
      return;
    }

    var nodes = m.chainWatchers[keyName];
    var events = [];
    var i, l;

    for (i = 0, l = nodes.length; i < l; i++) {
      nodes[i].willChange(events);
    }

    for (i = 0, l = events.length; i < l; i += 2) {
      propertyWillChange(events[i], events[i + 1]);
    }
  }

  function chainsDidChange(obj, keyName, m, suppressEvents) {
    if (!(m && m.hasOwnProperty("chainWatchers") && m.chainWatchers[keyName])) {
      return;
    }

    var nodes = m.chainWatchers[keyName];
    var events = suppressEvents ? null : [];
    var i, l;

    for (i = 0, l = nodes.length; i < l; i++) {
      nodes[i].didChange(events);
    }

    if (suppressEvents) {
      return;
    }

    for (i = 0, l = events.length; i < l; i += 2) {
      propertyDidChange(events[i], events[i + 1]);
    }
  }

  function overrideChains(obj, keyName, m) {
    chainsDidChange(obj, keyName, m, true);
  }

  /**
    @method beginPropertyChanges
    @chainable
    @private
  */
  function beginPropertyChanges() {
    deferred++;
  }

  /**
    @method endPropertyChanges
    @private
  */
  function endPropertyChanges() {
    deferred--;
    if (deferred <= 0) {
      beforeObserverSet.clear();
      observerSet.flush();
    }
  }

  /**
    Make a series of property changes together in an
    exception-safe way.
  
    ```javascript
    Ember.changeProperties(function() {
      obj1.set('foo', mayBlowUpWhenSet);
      obj2.set('bar', baz);
    });
    ```
  
    @method changeProperties
    @param {Function} callback
    @param [binding]
    @private
  */
  function changeProperties(callback, binding) {
    beginPropertyChanges();
    (0, _emberMetalUtils.tryFinally)(callback, endPropertyChanges, binding);
  }

  function notifyBeforeObservers(obj, keyName) {
    if (obj.isDestroying) {
      return;
    }

    var eventName = keyName + ":before";
    var listeners, added;
    if (deferred) {
      listeners = beforeObserverSet.add(obj, keyName, eventName);
      added = (0, _emberMetalEvents.accumulateListeners)(obj, eventName, listeners);
      (0, _emberMetalEvents.sendEvent)(obj, eventName, [obj, keyName], added);
    } else {
      (0, _emberMetalEvents.sendEvent)(obj, eventName, [obj, keyName]);
    }
  }

  function notifyObservers(obj, keyName) {
    if (obj.isDestroying) {
      return;
    }

    var eventName = keyName + ":change";
    var listeners;
    if (deferred) {
      listeners = observerSet.add(obj, keyName, eventName);
      (0, _emberMetalEvents.accumulateListeners)(obj, eventName, listeners);
    } else {
      (0, _emberMetalEvents.sendEvent)(obj, eventName, [obj, keyName]);
    }
  }

  exports.propertyWillChange = propertyWillChange;
  exports.propertyDidChange = propertyDidChange;
  exports.overrideChains = overrideChains;
  exports.beginPropertyChanges = beginPropertyChanges;
  exports.endPropertyChanges = endPropertyChanges;
  exports.changeProperties = changeProperties;
});
enifed("ember-metal/property_get", ["exports", "ember-metal/core", "ember-metal/error", "ember-metal/path_cache", "ember-metal/platform/define_property", "ember-metal/utils", "ember-metal/is_none"], function (exports, _emberMetalCore, _emberMetalError, _emberMetalPath_cache, _emberMetalPlatformDefine_property, _emberMetalUtils, _emberMetalIs_none) {
  exports.get = get;
  exports.normalizeTuple = normalizeTuple;
  exports._getPath = _getPath;
  exports.getWithDefault = getWithDefault;

  var FIRST_KEY = /^([^\.]+)/;

  var INTERCEPT_GET = (0, _emberMetalUtils.symbol)("INTERCEPT_GET");
  exports.INTERCEPT_GET = INTERCEPT_GET;
  var UNHANDLED_GET = (0, _emberMetalUtils.symbol)("UNHANDLED_GET");

  exports.UNHANDLED_GET = UNHANDLED_GET;
  // ..........................................................
  // GET AND SET
  //
  // If we are on a platform that supports accessors we can use those.
  // Otherwise simulate accessors by looking up the property directly on the
  // object.

  /**
    Gets the value of a property on an object. If the property is computed,
    the function will be invoked. If the property is not defined but the
    object implements the `unknownProperty` method then that will be invoked.
  
    If you plan to run on IE8 and older browsers then you should use this
    method anytime you want to retrieve a property on an object that you don't
    know for sure is private. (Properties beginning with an underscore '_'
    are considered private.)
  
    On all newer browsers, you only need to use this method to retrieve
    properties if the property might not be defined on the object and you want
    to respect the `unknownProperty` handler. Otherwise you can ignore this
    method.
  
    Note that if the object itself is `undefined`, this method will throw
    an error.
  
    @method get
    @for Ember
    @param {Object} obj The object to retrieve from.
    @param {String} keyName The property key to retrieve
    @return {Object} the property value or `null`.
    @public
  */

  function get(obj, keyName) {
    // Helpers that operate with 'this' within an #each
    if (keyName === "") {
      return obj;
    }

    if (!keyName && "string" === typeof obj) {
      keyName = obj;
      obj = _emberMetalCore["default"].lookup;
    }

    _emberMetalCore["default"].assert("Cannot call get with " + keyName + " key.", !!keyName);
    _emberMetalCore["default"].assert("Cannot call get with '" + keyName + "' on an undefined object.", obj !== undefined);

    if ((0, _emberMetalIs_none["default"])(obj)) {
      return _getPath(obj, keyName);
    }

    if (obj && typeof obj[INTERCEPT_GET] === "function") {
      var result = obj[INTERCEPT_GET](obj, keyName);
      if (result !== UNHANDLED_GET) {
        return result;
      }
    }

    var meta = obj["__ember_meta__"];
    var possibleDesc = obj[keyName];
    var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;
    var ret;

    if (desc === undefined && (0, _emberMetalPath_cache.isPath)(keyName)) {
      return _getPath(obj, keyName);
    }

    if (desc) {
      return desc.get(obj, keyName);
    } else {
      if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
        if (_emberMetalPlatformDefine_property.hasPropertyAccessors && meta && meta.watching[keyName] > 0) {
          ret = meta.values[keyName];
        } else {
          ret = obj[keyName];
        }
      } else {
        ret = obj[keyName];
      }

      if (ret === undefined && "object" === typeof obj && !(keyName in obj) && "function" === typeof obj.unknownProperty) {
        return obj.unknownProperty(keyName);
      }

      return ret;
    }
  }

  /**
    Normalizes a target/path pair to reflect that actual target/path that should
    be observed, etc. This takes into account passing in global property
    paths (i.e. a path beginning with a capital letter not defined on the
    target).
  
    @private
    @method normalizeTuple
    @for Ember
    @param {Object} target The current target. May be `null`.
    @param {String} path A path on the target or a global property path.
    @return {Array} a temporary array with the normalized target/path pair.
  */

  function normalizeTuple(target, path) {
    var hasThis = (0, _emberMetalPath_cache.hasThis)(path);
    var isGlobal = !hasThis && (0, _emberMetalPath_cache.isGlobal)(path);
    var key;

    if (!target && !isGlobal) {
      return [undefined, ""];
    }

    if (hasThis) {
      path = path.slice(5);
    }

    if (!target || isGlobal) {
      target = _emberMetalCore["default"].lookup;
    }

    if (isGlobal && (0, _emberMetalPath_cache.isPath)(path)) {
      key = path.match(FIRST_KEY)[0];
      target = get(target, key);
      path = path.slice(key.length + 1);
    }

    // must return some kind of path to be valid else other things will break.
    validateIsPath(path);

    return [target, path];
  }

  function validateIsPath(path) {
    if (!path || path.length === 0) {
      throw new _emberMetalError["default"]("Object in path " + path + " could not be found or was destroyed.");
    }
  }

  function _getPath(root, path) {
    var hasThis, parts, tuple, idx, len;

    // detect complicated paths and normalize them
    hasThis = (0, _emberMetalPath_cache.hasThis)(path);

    if (!root || hasThis) {
      tuple = normalizeTuple(root, path);
      root = tuple[0];
      path = tuple[1];
      tuple.length = 0;
    }

    parts = path.split(".");
    len = parts.length;
    for (idx = 0; root != null && idx < len; idx++) {
      root = get(root, parts[idx], true);
      if (root && root.isDestroyed) {
        return undefined;
      }
    }
    return root;
  }

  function getWithDefault(root, key, defaultValue) {
    var value = get(root, key);

    if (value === undefined) {
      return defaultValue;
    }
    return value;
  }

  exports["default"] = get;
});
/**
@module ember-metal
*/
enifed("ember-metal/property_set", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_events", "ember-metal/properties", "ember-metal/error", "ember-metal/path_cache", "ember-metal/platform/define_property", "ember-metal/utils"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_events, _emberMetalProperties, _emberMetalError, _emberMetalPath_cache, _emberMetalPlatformDefine_property, _emberMetalUtils) {
  exports.set = set;
  exports.trySet = trySet;
  var INTERCEPT_SET = (0, _emberMetalUtils.symbol)("INTERCEPT_SET");
  exports.INTERCEPT_SET = INTERCEPT_SET;
  var UNHANDLED_SET = (0, _emberMetalUtils.symbol)("UNHANDLED_SET");

  exports.UNHANDLED_SET = UNHANDLED_SET;
  /**
    Sets the value of a property on an object, respecting computed properties
    and notifying observers and other listeners of the change. If the
    property is not defined but the object implements the `setUnknownProperty`
    method then that will be invoked as well.
  
    @method set
    @for Ember
    @param {Object} obj The object to modify.
    @param {String} keyName The property key to set
    @param {Object} value The value to set
    @return {Object} the passed value.
    @public
  */

  function set(obj, keyName, value, tolerant) {
    if (typeof obj === "string") {
      _emberMetalCore["default"].assert("Path '" + obj + "' must be global if no obj is given.", (0, _emberMetalPath_cache.isGlobalPath)(obj));
      value = keyName;
      keyName = obj;
      obj = _emberMetalCore["default"].lookup;
    }

    _emberMetalCore["default"].assert("Cannot call set with '" + keyName + "' key.", !!keyName);

    if (obj === _emberMetalCore["default"].lookup) {
      return setPath(obj, keyName, value, tolerant);
    }

    // This path exists purely to implement backwards-compatible
    // effects (specifically, setting a property on a view may
    // invoke a mutator on `attrs`).
    if (obj && typeof obj[INTERCEPT_SET] === "function") {
      var result = obj[INTERCEPT_SET](obj, keyName, value, tolerant);
      if (result !== UNHANDLED_SET) {
        return result;
      }
    }

    var meta, possibleDesc, desc;
    if (obj) {
      meta = obj["__ember_meta__"];
      possibleDesc = obj[keyName];
      desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;
    }

    var isUnknown, currentValue;
    if ((!obj || desc === undefined) && (0, _emberMetalPath_cache.isPath)(keyName)) {
      return setPath(obj, keyName, value, tolerant);
    }

    _emberMetalCore["default"].assert("You need to provide an object and key to `set`.", !!obj && keyName !== undefined);
    _emberMetalCore["default"].assert("calling set on destroyed object", !obj.isDestroyed);

    if (desc) {
      desc.set(obj, keyName, value);
    } else {

      if (obj !== null && value !== undefined && typeof obj === "object" && obj[keyName] === value) {
        return value;
      }

      isUnknown = "object" === typeof obj && !(keyName in obj);

      // setUnknownProperty is called if `obj` is an object,
      // the property does not already exist, and the
      // `setUnknownProperty` method exists on the object
      if (isUnknown && "function" === typeof obj.setUnknownProperty) {
        obj.setUnknownProperty(keyName, value);
      } else if (meta && meta.watching[keyName] > 0) {
        if (meta.proto !== obj) {
          if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
            if (_emberMetalPlatformDefine_property.hasPropertyAccessors) {
              currentValue = meta.values[keyName];
            } else {
              currentValue = obj[keyName];
            }
          } else {
            currentValue = obj[keyName];
          }
        }
        // only trigger a change if the value has changed
        if (value !== currentValue) {
          (0, _emberMetalProperty_events.propertyWillChange)(obj, keyName);
          if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
            if (_emberMetalPlatformDefine_property.hasPropertyAccessors) {
              if (currentValue === undefined && !(keyName in obj) || !Object.prototype.propertyIsEnumerable.call(obj, keyName)) {
                (0, _emberMetalProperties.defineProperty)(obj, keyName, null, value); // setup mandatory setter
              } else {
                meta.values[keyName] = value;
              }
            } else {
              obj[keyName] = value;
            }
          } else {
            obj[keyName] = value;
          }
          (0, _emberMetalProperty_events.propertyDidChange)(obj, keyName);
        }
      } else {
        obj[keyName] = value;
        if (obj[_emberMetalProperty_events.PROPERTY_DID_CHANGE]) {
          obj[_emberMetalProperty_events.PROPERTY_DID_CHANGE](keyName);
        }
      }
    }
    return value;
  }

  function setPath(root, path, value, tolerant) {
    var keyName;

    // get the last part of the path
    keyName = path.slice(path.lastIndexOf(".") + 1);

    // get the first part of the part
    path = path === keyName ? keyName : path.slice(0, path.length - (keyName.length + 1));

    // unless the path is this, look up the first part to
    // get the root
    if (path !== "this") {
      root = (0, _emberMetalProperty_get._getPath)(root, path);
    }

    if (!keyName || keyName.length === 0) {
      throw new _emberMetalError["default"]("Property set failed: You passed an empty path");
    }

    if (!root) {
      if (tolerant) {
        return;
      } else {
        throw new _emberMetalError["default"]("Property set failed: object in path \"" + path + "\" could not be found or was destroyed.");
      }
    }

    return set(root, keyName, value);
  }

  /**
    Error-tolerant form of `Ember.set`. Will not blow up if any part of the
    chain is `undefined`, `null`, or destroyed.
  
    This is primarily used when syncing bindings, which may try to update after
    an object has been destroyed.
  
    @method trySet
    @for Ember
    @param {Object} root The object to modify.
    @param {String} path The property path to set
    @param {Object} value The value to set
    @public
  */

  function trySet(root, path, value) {
    return set(root, path, value, true);
  }
});
enifed('ember-metal/run_loop', ['exports', 'ember-metal/core', 'ember-metal/utils', 'ember-metal/array', 'ember-metal/property_events', 'backburner'], function (exports, _emberMetalCore, _emberMetalUtils, _emberMetalArray, _emberMetalProperty_events, _backburner) {

  function onBegin(current) {
    run.currentRunLoop = current;
  }

  function onEnd(current, next) {
    run.currentRunLoop = next;
  }

  // ES6TODO: should Backburner become es6?
  var backburner = new _backburner["default"](['sync', 'actions', 'destroy'], {
    GUID_KEY: _emberMetalUtils.GUID_KEY,
    sync: {
      before: _emberMetalProperty_events.beginPropertyChanges,
      after: _emberMetalProperty_events.endPropertyChanges
    },
    defaultQueue: 'actions',
    onBegin: onBegin,
    onEnd: onEnd,
    onErrorTarget: _emberMetalCore["default"],
    onErrorMethod: 'onerror'
  });

  // ..........................................................
  // run - this is ideally the only public API the dev sees
  //

  /**
    Runs the passed target and method inside of a RunLoop, ensuring any
    deferred actions including bindings and views updates are flushed at the
    end.
  
    Normally you should not need to invoke this method yourself. However if
    you are implementing raw event handlers when interfacing with other
    libraries or plugins, you should probably wrap all of your code inside this
    call.
  
    ```javascript
    run(function() {
      // code to be executed within a RunLoop
    });
    ```
  
    @class run
    @namespace Ember
    @static
    @constructor
    @param {Object} [target] target of method to call
    @param {Function|String} method Method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Any additional arguments you wish to pass to the method.
    @return {Object} return value from invoking the passed function.
    @public
  */
  exports["default"] = run;

  function run() {
    return backburner.run.apply(backburner, arguments);
  }

  /**
    If no run-loop is present, it creates a new one. If a run loop is
    present it will queue itself to run on the existing run-loops action
    queue.
  
    Please note: This is not for normal usage, and should be used sparingly.
  
    If invoked when not within a run loop:
  
    ```javascript
    run.join(function() {
      // creates a new run-loop
    });
    ```
  
    Alternatively, if called within an existing run loop:
  
    ```javascript
    run(function() {
      // creates a new run-loop
      run.join(function() {
        // joins with the existing run-loop, and queues for invocation on
        // the existing run-loops action queue.
      });
    });
    ```
  
    @method join
    @namespace Ember
    @param {Object} [target] target of method to call
    @param {Function|String} method Method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Any additional arguments you wish to pass to the method.
    @return {Object} Return value from invoking the passed function. Please note,
    when called within an existing loop, no return value is possible.
    @public
  */
  run.join = function () {
    return backburner.join.apply(backburner, arguments);
  };

  /**
    Allows you to specify which context to call the specified function in while
    adding the execution of that function to the Ember run loop. This ability
    makes this method a great way to asynchronously integrate third-party libraries
    into your Ember application.
  
    `run.bind` takes two main arguments, the desired context and the function to
    invoke in that context. Any additional arguments will be supplied as arguments
    to the function that is passed in.
  
    Let's use the creation of a TinyMCE component as an example. Currently,
    TinyMCE provides a setup configuration option we can use to do some processing
    after the TinyMCE instance is initialized but before it is actually rendered.
    We can use that setup option to do some additional setup for our component.
    The component itself could look something like the following:
  
    ```javascript
    App.RichTextEditorComponent = Ember.Component.extend({
      initializeTinyMCE: Ember.on('didInsertElement', function() {
        tinymce.init({
          selector: '#' + this.$().prop('id'),
          setup: Ember.run.bind(this, this.setupEditor)
        });
      }),
  
      setupEditor: function(editor) {
        this.set('editor', editor);
  
        editor.on('change', function() {
          console.log('content changed!');
        });
      }
    });
    ```
  
    In this example, we use Ember.run.bind to bind the setupEditor method to the
    context of the App.RichTextEditorComponent and to have the invocation of that
    method be safely handled and executed by the Ember run loop.
  
    @method bind
    @namespace Ember
    @param {Object} [target] target of method to call
    @param {Function|String} method Method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Any additional arguments you wish to pass to the method.
    @return {Function} returns a new function that will always have a particular context
    @since 1.4.0
    @public
  */
  run.bind = function () {
    for (var _len = arguments.length, curried = Array(_len), _key = 0; _key < _len; _key++) {
      curried[_key] = arguments[_key];
    }

    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return run.join.apply(run, curried.concat(args));
    };
  };

  run.backburner = backburner;
  run.currentRunLoop = null;
  run.queues = backburner.queueNames;

  /**
    Begins a new RunLoop. Any deferred actions invoked after the begin will
    be buffered until you invoke a matching call to `run.end()`. This is
    a lower-level way to use a RunLoop instead of using `run()`.
  
    ```javascript
    run.begin();
    // code to be executed within a RunLoop
    run.end();
    ```
  
    @method begin
    @return {void}
    @public
  */
  run.begin = function () {
    backburner.begin();
  };

  /**
    Ends a RunLoop. This must be called sometime after you call
    `run.begin()` to flush any deferred actions. This is a lower-level way
    to use a RunLoop instead of using `run()`.
  
    ```javascript
    run.begin();
    // code to be executed within a RunLoop
    run.end();
    ```
  
    @method end
    @return {void}
    @public
  */
  run.end = function () {
    backburner.end();
  };

  /**
    Array of named queues. This array determines the order in which queues
    are flushed at the end of the RunLoop. You can define your own queues by
    simply adding the queue name to this array. Normally you should not need
    to inspect or modify this property.
  
    @property queues
    @type Array
    @default ['sync', 'actions', 'destroy']
    @private
  */

  /**
    Adds the passed target/method and any optional arguments to the named
    queue to be executed at the end of the RunLoop. If you have not already
    started a RunLoop when calling this method one will be started for you
    automatically.
  
    At the end of a RunLoop, any methods scheduled in this way will be invoked.
    Methods will be invoked in an order matching the named queues defined in
    the `run.queues` property.
  
    ```javascript
    run.schedule('sync', this, function() {
      // this will be executed in the first RunLoop queue, when bindings are synced
      console.log('scheduled on sync queue');
    });
  
    run.schedule('actions', this, function() {
      // this will be executed in the 'actions' queue, after bindings have synced.
      console.log('scheduled on actions queue');
    });
  
    // Note the functions will be run in order based on the run queues order.
    // Output would be:
    //   scheduled on sync queue
    //   scheduled on actions queue
    ```
  
    @method schedule
    @param {String} queue The name of the queue to schedule against.
      Default queues are 'sync' and 'actions'
    @param {Object} [target] target object to use as the context when invoking a method.
    @param {String|Function} method The method to invoke. If you pass a string it
      will be resolved on the target object at the time the scheduled item is
      invoked allowing you to change the target function.
    @param {Object} [arguments*] Optional arguments to be passed to the queued method.
    @return {void}
    @public
  */
  run.schedule = function () {
    checkAutoRun();
    backburner.schedule.apply(backburner, arguments);
  };

  // Used by global test teardown
  run.hasScheduledTimers = function () {
    return backburner.hasTimers();
  };

  // Used by global test teardown
  run.cancelTimers = function () {
    backburner.cancelTimers();
  };

  /**
    Immediately flushes any events scheduled in the 'sync' queue. Bindings
    use this queue so this method is a useful way to immediately force all
    bindings in the application to sync.
  
    You should call this method anytime you need any changed state to propagate
    throughout the app immediately without repainting the UI (which happens
    in the later 'render' queue added by the `ember-views` package).
  
    ```javascript
    run.sync();
    ```
  
    @method sync
    @return {void}
    @private
  */
  run.sync = function () {
    if (backburner.currentInstance) {
      backburner.currentInstance.queues.sync.flush();
    }
  };

  /**
    Invokes the passed target/method and optional arguments after a specified
    period of time. The last parameter of this method must always be a number
    of milliseconds.
  
    You should use this method whenever you need to run some action after a
    period of time instead of using `setTimeout()`. This method will ensure that
    items that expire during the same script execution cycle all execute
    together, which is often more efficient than using a real setTimeout.
  
    ```javascript
    run.later(myContext, function() {
      // code here will execute within a RunLoop in about 500ms with this == myContext
    }, 500);
    ```
  
    @method later
    @param {Object} [target] target of method to invoke
    @param {Function|String} method The method to invoke.
      If you pass a string it will be resolved on the
      target at the time the method is invoked.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @param {Number} wait Number of milliseconds to wait.
    @return {*} Timer information for use in cancelling, see `run.cancel`.
    @public
  */
  run.later = function () {
    return backburner.later.apply(backburner, arguments);
  };

  /**
    Schedule a function to run one time during the current RunLoop. This is equivalent
    to calling `scheduleOnce` with the "actions" queue.
  
    @method once
    @param {Object} [target] The target of the method to invoke.
    @param {Function|String} method The method to invoke.
      If you pass a string it will be resolved on the
      target at the time the method is invoked.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @return {Object} Timer information for use in cancelling, see `run.cancel`.
    @public
  */
  run.once = function () {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    checkAutoRun();
    args.unshift('actions');
    return backburner.scheduleOnce.apply(backburner, args);
  };

  /**
    Schedules a function to run one time in a given queue of the current RunLoop.
    Calling this method with the same queue/target/method combination will have
    no effect (past the initial call).
  
    Note that although you can pass optional arguments these will not be
    considered when looking for duplicates. New arguments will replace previous
    calls.
  
    ```javascript
    function sayHi() {
      console.log('hi');
    }
  
    run(function() {
      run.scheduleOnce('afterRender', myContext, sayHi);
      run.scheduleOnce('afterRender', myContext, sayHi);
      // sayHi will only be executed once, in the afterRender queue of the RunLoop
    });
    ```
  
    Also note that passing an anonymous function to `run.scheduleOnce` will
    not prevent additional calls with an identical anonymous function from
    scheduling the items multiple times, e.g.:
  
    ```javascript
    function scheduleIt() {
      run.scheduleOnce('actions', myContext, function() {
        console.log('Closure');
      });
    }
  
    scheduleIt();
    scheduleIt();
  
    // "Closure" will print twice, even though we're using `run.scheduleOnce`,
    // because the function we pass to it is anonymous and won't match the
    // previously scheduled operation.
    ```
  
    Available queues, and their order, can be found at `run.queues`
  
    @method scheduleOnce
    @param {String} [queue] The name of the queue to schedule against. Default queues are 'sync' and 'actions'.
    @param {Object} [target] The target of the method to invoke.
    @param {Function|String} method The method to invoke.
      If you pass a string it will be resolved on the
      target at the time the method is invoked.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @return {Object} Timer information for use in cancelling, see `run.cancel`.
    @public
  */
  run.scheduleOnce = function () {
    checkAutoRun();
    return backburner.scheduleOnce.apply(backburner, arguments);
  };

  /**
    Schedules an item to run from within a separate run loop, after
    control has been returned to the system. This is equivalent to calling
    `run.later` with a wait time of 1ms.
  
    ```javascript
    run.next(myContext, function() {
      // code to be executed in the next run loop,
      // which will be scheduled after the current one
    });
    ```
  
    Multiple operations scheduled with `run.next` will coalesce
    into the same later run loop, along with any other operations
    scheduled by `run.later` that expire right around the same
    time that `run.next` operations will fire.
  
    Note that there are often alternatives to using `run.next`.
    For instance, if you'd like to schedule an operation to happen
    after all DOM element operations have completed within the current
    run loop, you can make use of the `afterRender` run loop queue (added
    by the `ember-views` package, along with the preceding `render` queue
    where all the DOM element operations happen). Example:
  
    ```javascript
    App.MyCollectionView = Ember.CollectionView.extend({
      didInsertElement: function() {
        run.scheduleOnce('afterRender', this, 'processChildElements');
      },
      processChildElements: function() {
        // ... do something with collectionView's child view
        // elements after they've finished rendering, which
        // can't be done within the CollectionView's
        // `didInsertElement` hook because that gets run
        // before the child elements have been added to the DOM.
      }
    });
    ```
  
    One benefit of the above approach compared to using `run.next` is
    that you will be able to perform DOM/CSS operations before unprocessed
    elements are rendered to the screen, which may prevent flickering or
    other artifacts caused by delaying processing until after rendering.
  
    The other major benefit to the above approach is that `run.next`
    introduces an element of non-determinism, which can make things much
    harder to test, due to its reliance on `setTimeout`; it's much harder
    to guarantee the order of scheduled operations when they are scheduled
    outside of the current run loop, i.e. with `run.next`.
  
    @method next
    @param {Object} [target] target of method to invoke
    @param {Function|String} method The method to invoke.
      If you pass a string it will be resolved on the
      target at the time the method is invoked.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @return {Object} Timer information for use in cancelling, see `run.cancel`.
    @public
  */
  run.next = function () {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    args.push(1);
    return backburner.later.apply(backburner, args);
  };

  /**
    Cancels a scheduled item. Must be a value returned by `run.later()`,
    `run.once()`, `run.next()`, `run.debounce()`, or
    `run.throttle()`.
  
    ```javascript
    var runNext = run.next(myContext, function() {
      // will not be executed
    });
  
    run.cancel(runNext);
  
    var runLater = run.later(myContext, function() {
      // will not be executed
    }, 500);
  
    run.cancel(runLater);
  
    var runOnce = run.once(myContext, function() {
      // will not be executed
    });
  
    run.cancel(runOnce);
  
    var throttle = run.throttle(myContext, function() {
      // will not be executed
    }, 1, false);
  
    run.cancel(throttle);
  
    var debounce = run.debounce(myContext, function() {
      // will not be executed
    }, 1);
  
    run.cancel(debounce);
  
    var debounceImmediate = run.debounce(myContext, function() {
      // will be executed since we passed in true (immediate)
    }, 100, true);
  
    // the 100ms delay until this method can be called again will be cancelled
    run.cancel(debounceImmediate);
    ```
  
    @method cancel
    @param {Object} timer Timer object to cancel
    @return {Boolean} true if cancelled or false/undefined if it wasn't found
    @public
  */
  run.cancel = function (timer) {
    return backburner.cancel(timer);
  };

  /**
    Delay calling the target method until the debounce period has elapsed
    with no additional debounce calls. If `debounce` is called again before
    the specified time has elapsed, the timer is reset and the entire period
    must pass again before the target method is called.
  
    This method should be used when an event may be called multiple times
    but the action should only be called once when the event is done firing.
    A common example is for scroll events where you only want updates to
    happen once scrolling has ceased.
  
    ```javascript
    function whoRan() {
      console.log(this.name + ' ran.');
    }
  
    var myContext = { name: 'debounce' };
  
    run.debounce(myContext, whoRan, 150);
  
    // less than 150ms passes
    run.debounce(myContext, whoRan, 150);
  
    // 150ms passes
    // whoRan is invoked with context myContext
    // console logs 'debounce ran.' one time.
    ```
  
    Immediate allows you to run the function immediately, but debounce
    other calls for this function until the wait time has elapsed. If
    `debounce` is called again before the specified time has elapsed,
    the timer is reset and the entire period must pass again before
    the method can be called again.
  
    ```javascript
    function whoRan() {
      console.log(this.name + ' ran.');
    }
  
    var myContext = { name: 'debounce' };
  
    run.debounce(myContext, whoRan, 150, true);
  
    // console logs 'debounce ran.' one time immediately.
    // 100ms passes
    run.debounce(myContext, whoRan, 150, true);
  
    // 150ms passes and nothing else is logged to the console and
    // the debouncee is no longer being watched
    run.debounce(myContext, whoRan, 150, true);
  
    // console logs 'debounce ran.' one time immediately.
    // 150ms passes and nothing else is logged to the console and
    // the debouncee is no longer being watched
  
    ```
  
    @method debounce
    @param {Object} [target] target of method to invoke
    @param {Function|String} method The method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @param {Number} wait Number of milliseconds to wait.
    @param {Boolean} immediate Trigger the function on the leading instead
      of the trailing edge of the wait interval. Defaults to false.
    @return {Array} Timer information for use in cancelling, see `run.cancel`.
    @public
  */
  run.debounce = function () {
    return backburner.debounce.apply(backburner, arguments);
  };

  /**
    Ensure that the target method is never called more frequently than
    the specified spacing period. The target method is called immediately.
  
    ```javascript
    function whoRan() {
      console.log(this.name + ' ran.');
    }
  
    var myContext = { name: 'throttle' };
  
    run.throttle(myContext, whoRan, 150);
    // whoRan is invoked with context myContext
    // console logs 'throttle ran.'
  
    // 50ms passes
    run.throttle(myContext, whoRan, 150);
  
    // 50ms passes
    run.throttle(myContext, whoRan, 150);
  
    // 150ms passes
    run.throttle(myContext, whoRan, 150);
    // whoRan is invoked with context myContext
    // console logs 'throttle ran.'
    ```
  
    @method throttle
    @param {Object} [target] target of method to invoke
    @param {Function|String} method The method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @param {Number} spacing Number of milliseconds to space out requests.
    @param {Boolean} immediate Trigger the function on the leading instead
      of the trailing edge of the wait interval. Defaults to true.
    @return {Array} Timer information for use in cancelling, see `run.cancel`.
    @public
  */
  run.throttle = function () {
    return backburner.throttle.apply(backburner, arguments);
  };

  // Make sure it's not an autorun during testing
  function checkAutoRun() {
    if (!run.currentRunLoop) {
      _emberMetalCore["default"].assert('You have turned on testing mode, which disabled the run-loop\'s autorun.\n                  You will need to wrap any code with asynchronous side-effects in a run', !_emberMetalCore["default"].testing);
    }
  }

  /**
    Add a new named queue after the specified queue.
  
    The queue to add will only be added once.
  
    @method _addQueue
    @param {String} name the name of the queue to add.
    @param {String} after the name of the queue to add after.
    @private
  */
  run._addQueue = function (name, after) {
    if (_emberMetalArray.indexOf.call(run.queues, name) === -1) {
      run.queues.splice(_emberMetalArray.indexOf.call(run.queues, after) + 1, 0, name);
    }
  };
});
/* queue, target, method */ /*target, method*/ /*queue, target, method*/
enifed("ember-metal/set_properties", ["exports", "ember-metal/property_events", "ember-metal/property_set", "ember-metal/keys"], function (exports, _emberMetalProperty_events, _emberMetalProperty_set, _emberMetalKeys) {
  exports["default"] = setProperties;

  /**
    Set a list of properties on an object. These properties are set inside
    a single `beginPropertyChanges` and `endPropertyChanges` batch, so
    observers will be buffered.
  
    ```javascript
    var anObject = Ember.Object.create();
  
    anObject.setProperties({
      firstName: 'Stanley',
      lastName: 'Stuart',
      age: 21
    });
    ```
  
    @method setProperties
    @param obj
    @param {Object} properties
    @return obj
    @public
  */

  function setProperties(obj, properties) {
    if (!properties || typeof properties !== "object") {
      return obj;
    }
    (0, _emberMetalProperty_events.changeProperties)(function () {
      var props = (0, _emberMetalKeys["default"])(properties);
      var propertyName;

      for (var i = 0, l = props.length; i < l; i++) {
        propertyName = props[i];

        (0, _emberMetalProperty_set.set)(obj, propertyName, properties[propertyName]);
      }
    });
    return obj;
  }
});
enifed("ember-metal/streams/conditional", ["exports", "ember-metal/streams/stream", "ember-metal/streams/utils", "ember-metal/platform/create"], function (exports, _emberMetalStreamsStream, _emberMetalStreamsUtils, _emberMetalPlatformCreate) {
  exports["default"] = conditional;

  function conditional(test, consequent, alternate) {
    if ((0, _emberMetalStreamsUtils.isStream)(test)) {
      return new ConditionalStream(test, consequent, alternate);
    } else {
      if (test) {
        return consequent;
      } else {
        return alternate;
      }
    }
  }

  function ConditionalStream(test, consequent, alternate) {
    this.init();

    this.oldTestResult = undefined;
    this.test = test;
    this.consequent = consequent;
    this.alternate = alternate;
  }

  ConditionalStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  ConditionalStream.prototype.compute = function () {
    var oldTestResult = this.oldTestResult;
    var newTestResult = !!(0, _emberMetalStreamsUtils.read)(this.test);

    if (newTestResult !== oldTestResult) {
      switch (oldTestResult) {
        case true:
          (0, _emberMetalStreamsUtils.unsubscribe)(this.consequent, this.notify, this);break;
        case false:
          (0, _emberMetalStreamsUtils.unsubscribe)(this.alternate, this.notify, this);break;
        case undefined:
          (0, _emberMetalStreamsUtils.subscribe)(this.test, this.notify, this);
      }

      switch (newTestResult) {
        case true:
          (0, _emberMetalStreamsUtils.subscribe)(this.consequent, this.notify, this);break;
        case false:
          (0, _emberMetalStreamsUtils.subscribe)(this.alternate, this.notify, this);
      }

      this.oldTestResult = newTestResult;
    }

    return newTestResult ? (0, _emberMetalStreamsUtils.read)(this.consequent) : (0, _emberMetalStreamsUtils.read)(this.alternate);
  };
});
enifed("ember-metal/streams/dependency", ["exports", "ember-metal/core", "ember-metal/merge", "ember-metal/streams/utils"], function (exports, _emberMetalCore, _emberMetalMerge, _emberMetalStreamsUtils) {

  /**
    @module ember-metal
  */

  /**
    @private
    @class Dependency
    @namespace Ember.streams
    @constructor
  */
  function Dependency(depender, dependee) {
    _emberMetalCore["default"].assert("Dependency error: Depender must be a stream", (0, _emberMetalStreamsUtils.isStream)(depender));

    this.next = null;
    this.prev = null;
    this.depender = depender;
    this.dependee = dependee;
    this.unsubscription = null;
  }

  (0, _emberMetalMerge["default"])(Dependency.prototype, {
    subscribe: function () {
      _emberMetalCore["default"].assert("Dependency error: Dependency tried to subscribe while already subscribed", !this.unsubscription);

      this.unsubscription = (0, _emberMetalStreamsUtils.subscribe)(this.dependee, this.depender.notify, this.depender);
    },

    unsubscribe: function () {
      if (this.unsubscription) {
        this.unsubscription();
        this.unsubscription = null;
      }
    },

    replace: function (dependee) {
      if (this.dependee !== dependee) {
        this.dependee = dependee;

        if (this.unsubscription) {
          this.unsubscribe();
          this.subscribe();
        }
      }
    },

    getValue: function () {
      return (0, _emberMetalStreamsUtils.read)(this.dependee);
    },

    setValue: function (value) {
      return (0, _emberMetalStreamsUtils.setValue)(this.dependee, value);
    }

    // destroy() {
    //   var next = this.next;
    //   var prev = this.prev;

    //   if (prev) {
    //     prev.next = next;
    //   } else {
    //     this.depender.dependencyHead = next;
    //   }

    //   if (next) {
    //     next.prev = prev;
    //   } else {
    //     this.depender.dependencyTail = prev;
    //   }

    //   this.unsubscribe();
    // }
  });

  exports["default"] = Dependency;
});
enifed('ember-metal/streams/key-stream', ['exports', 'ember-metal/core', 'ember-metal/merge', 'ember-metal/platform/create', 'ember-metal/property_get', 'ember-metal/property_set', 'ember-metal/observer', 'ember-metal/streams/stream', 'ember-metal/streams/utils'], function (exports, _emberMetalCore, _emberMetalMerge, _emberMetalPlatformCreate, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalObserver, _emberMetalStreamsStream, _emberMetalStreamsUtils) {

  function KeyStream(source, key) {
    _emberMetalCore["default"].assert('KeyStream error: source must be a stream', (0, _emberMetalStreamsUtils.isStream)(source)); // TODO: This isn't necessary.
    _emberMetalCore["default"].assert('KeyStream error: key must be a non-empty string', typeof key === 'string' && key.length > 0);
    _emberMetalCore["default"].assert('KeyStream error: key must not have a \'.\'', key.indexOf('.') === -1);

    // used to get the original path for debugging and legacy purposes
    var label = labelFor(source, key);

    this.init(label);
    this.path = label;
    this.sourceDep = this.addMutableDependency(source);
    this.observedObject = null;
    this.key = key;
  }

  function labelFor(source, key) {
    return source.label ? source.label + '.' + key : key;
  }

  KeyStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  (0, _emberMetalMerge["default"])(KeyStream.prototype, {
    compute: function () {
      var object = this.sourceDep.getValue();
      if (object) {
        return (0, _emberMetalProperty_get.get)(object, this.key);
      }
    },

    setValue: function (value) {
      var object = this.sourceDep.getValue();
      if (object) {
        (0, _emberMetalProperty_set.set)(object, this.key, value);
      }
    },

    setSource: function (source) {
      this.sourceDep.replace(source);
      this.notify();
    },

    _super$revalidate: _emberMetalStreamsStream["default"].prototype.revalidate,

    revalidate: function (value) {
      this._super$revalidate(value);

      var object = this.sourceDep.getValue();
      if (object !== this.observedObject) {
        this._clearObservedObject();

        if (object && typeof object === 'object') {
          (0, _emberMetalObserver.addObserver)(object, this.key, this, this.notify);
          this.observedObject = object;
        }
      }
    },

    _super$deactivate: _emberMetalStreamsStream["default"].prototype.deactivate,

    _clearObservedObject: function () {
      if (this.observedObject) {
        (0, _emberMetalObserver.removeObserver)(this.observedObject, this.key, this, this.notify);
        this.observedObject = null;
      }
    },

    deactivate: function () {
      this._super$deactivate();
      this._clearObservedObject();
    }
  });

  exports["default"] = KeyStream;
});
enifed("ember-metal/streams/proxy-stream", ["exports", "ember-metal/merge", "ember-metal/streams/stream", "ember-metal/platform/create"], function (exports, _emberMetalMerge, _emberMetalStreamsStream, _emberMetalPlatformCreate) {

  function ProxyStream(source, label) {
    this.init(label);
    this.sourceDep = this.addMutableDependency(source);
  }

  ProxyStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  (0, _emberMetalMerge["default"])(ProxyStream.prototype, {
    compute: function () {
      return this.sourceDep.getValue();
    },

    setValue: function (value) {
      this.sourceDep.setValue(value);
    },

    setSource: function (source) {
      this.sourceDep.replace(source);
      this.notify();
    }
  });

  exports["default"] = ProxyStream;
});
enifed("ember-metal/streams/stream", ["exports", "ember-metal/core", "ember-metal/platform/create", "ember-metal/path_cache", "ember-metal/observer", "ember-metal/streams/utils", "ember-metal/streams/subscriber", "ember-metal/streams/dependency"], function (exports, _emberMetalCore, _emberMetalPlatformCreate, _emberMetalPath_cache, _emberMetalObserver, _emberMetalStreamsUtils, _emberMetalStreamsSubscriber, _emberMetalStreamsDependency) {

  /**
    @module ember-metal
  */

  /**
    @private
    @class Stream
    @namespace Ember.stream
    @constructor
  */
  function Stream(fn, label) {
    this.init(label);
    this.compute = fn;
  }

  var KeyStream;
  var ProxyMixin;

  Stream.prototype = {
    isStream: true,

    init: function (label) {
      this.label = makeLabel(label);
      this.isActive = false;
      this.isDirty = true;
      this.isDestroyed = false;
      this.cache = undefined;
      this.children = undefined;
      this.subscriberHead = null;
      this.subscriberTail = null;
      this.dependencyHead = null;
      this.dependencyTail = null;
      this.observedProxy = null;
    },

    _makeChildStream: function (key) {
      KeyStream = KeyStream || _emberMetalCore["default"].__loader.require("ember-metal/streams/key-stream")["default"];
      return new KeyStream(this, key);
    },

    removeChild: function (key) {
      delete this.children[key];
    },

    getKey: function (key) {
      if (this.children === undefined) {
        this.children = (0, _emberMetalPlatformCreate["default"])(null);
      }

      var keyStream = this.children[key];

      if (keyStream === undefined) {
        keyStream = this._makeChildStream(key);
        this.children[key] = keyStream;
      }

      return keyStream;
    },

    get: function (path) {
      var firstKey = (0, _emberMetalPath_cache.getFirstKey)(path);
      var tailPath = (0, _emberMetalPath_cache.getTailPath)(path);

      if (this.children === undefined) {
        this.children = (0, _emberMetalPlatformCreate["default"])(null);
      }

      var keyStream = this.children[firstKey];

      if (keyStream === undefined) {
        keyStream = this._makeChildStream(firstKey, path);
        this.children[firstKey] = keyStream;
      }

      if (tailPath === undefined) {
        return keyStream;
      } else {
        return keyStream.get(tailPath);
      }
    },

    value: function () {
      // TODO: Ensure value is never called on a destroyed stream
      // so that we can uncomment this assertion.
      //
      // Ember.assert("Stream error: value was called after the stream was destroyed", !this.isDestroyed);

      // TODO: Remove this block. This will require ensuring we are
      // not treating streams as "volatile" anywhere.
      if (!this.isActive) {
        this.isDirty = true;
      }

      var willRevalidate = false;

      if (!this.isActive && this.subscriberHead) {
        this.activate();
        willRevalidate = true;
      }

      if (this.isDirty) {
        if (this.isActive) {
          willRevalidate = true;
        }

        this.cache = this.compute();
        this.isDirty = false;
      }

      if (willRevalidate) {
        this.revalidate(this.cache);
      }

      return this.cache;
    },

    addMutableDependency: function (object) {
      var dependency = new _emberMetalStreamsDependency["default"](this, object);

      if (this.isActive) {
        dependency.subscribe();
      }

      if (this.dependencyHead === null) {
        this.dependencyHead = this.dependencyTail = dependency;
      } else {
        var tail = this.dependencyTail;
        tail.next = dependency;
        dependency.prev = tail;
        this.dependencyTail = dependency;
      }

      return dependency;
    },

    addDependency: function (object) {
      if ((0, _emberMetalStreamsUtils.isStream)(object)) {
        this.addMutableDependency(object);
      }
    },

    subscribeDependencies: function () {
      var dependency = this.dependencyHead;
      while (dependency) {
        var next = dependency.next;
        dependency.subscribe();
        dependency = next;
      }
    },

    unsubscribeDependencies: function () {
      var dependency = this.dependencyHead;
      while (dependency) {
        var next = dependency.next;
        dependency.unsubscribe();
        dependency = next;
      }
    },

    maybeDeactivate: function () {
      if (!this.subscriberHead && this.isActive) {
        this.isActive = false;
        this.unsubscribeDependencies();
        this.deactivate();
      }
    },

    activate: function () {
      this.isActive = true;
      this.subscribeDependencies();
    },

    revalidate: function (value) {
      if (value !== this.observedProxy) {
        this._clearObservedProxy();

        ProxyMixin = ProxyMixin || _emberMetalCore["default"].__loader.require("ember-runtime/mixins/-proxy")["default"];

        if (ProxyMixin.detect(value)) {
          (0, _emberMetalObserver.addObserver)(value, "content", this, this.notify);
          this.observedProxy = value;
        }
      }
    },

    _clearObservedProxy: function () {
      if (this.observedProxy) {
        (0, _emberMetalObserver.removeObserver)(this.observedProxy, "content", this, this.notify);
        this.observedProxy = null;
      }
    },

    deactivate: function () {
      this._clearObservedProxy();
    },

    compute: function () {
      throw new Error("Stream error: compute not implemented");
    },

    setValue: function () {
      throw new Error("Stream error: setValue not implemented");
    },

    notify: function () {
      this.notifyExcept();
    },

    notifyExcept: function (callbackToSkip, contextToSkip) {
      if (!this.isDirty) {
        this.isDirty = true;
        this.notifySubscribers(callbackToSkip, contextToSkip);
      }
    },

    subscribe: function (callback, context) {
      _emberMetalCore["default"].assert("You tried to subscribe to a stream but the callback provided was not a function.", typeof callback === "function");

      var subscriber = new _emberMetalStreamsSubscriber["default"](callback, context, this);
      if (this.subscriberHead === null) {
        this.subscriberHead = this.subscriberTail = subscriber;
      } else {
        var tail = this.subscriberTail;
        tail.next = subscriber;
        subscriber.prev = tail;
        this.subscriberTail = subscriber;
      }

      var stream = this;
      return function (prune) {
        subscriber.removeFrom(stream);
        if (prune) {
          stream.prune();
        }
      };
    },

    prune: function () {
      if (this.subscriberHead === null) {
        this.destroy(true);
      }
    },

    unsubscribe: function (callback, context) {
      var subscriber = this.subscriberHead;

      while (subscriber) {
        var next = subscriber.next;
        if (subscriber.callback === callback && subscriber.context === context) {
          subscriber.removeFrom(this);
        }
        subscriber = next;
      }
    },

    notifySubscribers: function (callbackToSkip, contextToSkip) {
      var subscriber = this.subscriberHead;

      while (subscriber) {
        var next = subscriber.next;

        var callback = subscriber.callback;
        var context = subscriber.context;

        subscriber = next;

        if (callback === callbackToSkip && context === contextToSkip) {
          continue;
        }

        if (context === undefined) {
          callback(this);
        } else {
          callback.call(context, this);
        }
      }
    },

    destroy: function (prune) {
      if (!this.isDestroyed) {
        this.isDestroyed = true;

        this.subscriberHead = this.subscriberTail = null;
        this.maybeDeactivate();

        var dependencies = this.dependencies;

        if (dependencies) {
          for (var i = 0, l = dependencies.length; i < l; i++) {
            dependencies[i](prune);
          }
        }

        this.dependencies = null;
        return true;
      }
    }
  };

  Stream.wrap = function (value, Kind, param) {
    if ((0, _emberMetalStreamsUtils.isStream)(value)) {
      return value;
    } else {
      return new Kind(value, param);
    }
  };

  function makeLabel(label) {
    if (label === undefined) {
      return "(no label)";
    } else {
      return label;
    }
  }

  exports["default"] = Stream;
});
enifed("ember-metal/streams/subscriber", ["exports", "ember-metal/merge"], function (exports, _emberMetalMerge) {

  /**
    @module ember-metal
  */

  /**
    @private
    @class Subscriber
    @namespace Ember.streams
    @constructor
  */
  function Subscriber(callback, context) {
    this.next = null;
    this.prev = null;
    this.callback = callback;
    this.context = context;
  }

  (0, _emberMetalMerge["default"])(Subscriber.prototype, {
    removeFrom: function (stream) {
      var next = this.next;
      var prev = this.prev;

      if (prev) {
        prev.next = next;
      } else {
        stream.subscriberHead = next;
      }

      if (next) {
        next.prev = prev;
      } else {
        stream.subscriberTail = prev;
      }

      stream.maybeDeactivate();
    }
  });

  exports["default"] = Subscriber;
});
enifed('ember-metal/streams/utils', ['exports', './stream'], function (exports, _stream) {
  exports.isStream = isStream;
  exports.subscribe = subscribe;
  exports.unsubscribe = unsubscribe;
  exports.read = read;
  exports.readArray = readArray;
  exports.readHash = readHash;
  exports.scanArray = scanArray;
  exports.scanHash = scanHash;
  exports.concat = concat;
  exports.labelsFor = labelsFor;
  exports.labelsForObject = labelsForObject;
  exports.labelFor = labelFor;
  exports.or = or;
  exports.addDependency = addDependency;
  exports.zip = zip;
  exports.zipHash = zipHash;
  exports.chain = chain;
  exports.setValue = setValue;

  /*
   Check whether an object is a stream or not
  
   @public
   @for Ember.stream
   @function isStream
   @param {Object|Stream} object object to check whether it is a stream
   @return {Boolean} `true` if the object is a stream, `false` otherwise
  */

  function isStream(object) {
    return object && object.isStream;
  }

  /*
   A method of subscribing to a stream which is safe for use with a non-stream
   object. If a non-stream object is passed, the function does nothing.
  
   @public
   @for Ember.stream
   @function subscribe
   @param {Object|Stream} object object or stream to potentially subscribe to
   @param {Function} callback function to run when stream value changes
   @param {Object} [context] the callback will be executed with this context if it
                             is provided
   */

  function subscribe(object, callback, context) {
    if (object && object.isStream) {
      return object.subscribe(callback, context);
    }
  }

  /*
   A method of unsubscribing from a stream which is safe for use with a non-stream
   object. If a non-stream object is passed, the function does nothing.
  
   @public
   @for Ember.stream
   @function unsubscribe
   @param {Object|Stream} object object or stream to potentially unsubscribe from
   @param {Function} callback function originally passed to `subscribe()`
   @param {Object} [context] object originally passed to `subscribe()`
   */

  function unsubscribe(object, callback, context) {
    if (object && object.isStream) {
      object.unsubscribe(callback, context);
    }
  }

  /*
   Retrieve the value of a stream, or in the case a non-stream object is passed,
   return the object itself.
  
   @public
   @for Ember.stream
   @function read
   @param {Object|Stream} object object to return the value of
   @return the stream's current value, or the non-stream object itself
   */

  function read(object) {
    if (object && object.isStream) {
      return object.value();
    } else {
      return object;
    }
  }

  /*
   Map an array, replacing any streams with their values.
  
   @public
   @for Ember.stream
   @function readArray
   @param {Array} array The array to read values from
   @return {Array} a new array of the same length with the values of non-stream
                   objects mapped from their original positions untouched, and
                   the values of stream objects retaining their original position
                   and replaced with the stream's current value.
   */

  function readArray(array) {
    var length = array.length;
    var ret = new Array(length);
    for (var i = 0; i < length; i++) {
      ret[i] = read(array[i]);
    }
    return ret;
  }

  /*
   Map a hash, replacing any stream property values with the current value of that
   stream.
  
   @public
   @for Ember.stream
   @function readHash
   @param {Object} object The hash to read keys and values from
   @return {Object} a new object with the same keys as the passed object. The
                    property values in the new object are the original values in
                    the case of non-stream objects, and the streams' current
                    values in the case of stream objects.
   */

  function readHash(object) {
    var ret = {};
    for (var key in object) {
      ret[key] = read(object[key]);
    }
    return ret;
  }

  /*
   Check whether an array contains any stream values
  
   @public
   @for Ember.stream
   @function scanArray
   @param {Array} array array given to a handlebars helper
   @return {Boolean} `true` if the array contains a stream/bound value, `false`
                     otherwise
  */

  function scanArray(array) {
    var length = array.length;
    var containsStream = false;

    for (var i = 0; i < length; i++) {
      if (isStream(array[i])) {
        containsStream = true;
        break;
      }
    }

    return containsStream;
  }

  /*
   Check whether a hash has any stream property values
  
   @public
   @for Ember.stream
   @function scanHash
   @param {Object} hash "hash" argument given to a handlebars helper
   @return {Boolean} `true` if the object contains a stream/bound value, `false`
                     otherwise
   */

  function scanHash(hash) {
    var containsStream = false;

    for (var prop in hash) {
      if (isStream(hash[prop])) {
        containsStream = true;
        break;
      }
    }

    return containsStream;
  }

  /*
   Join an array, with any streams replaced by their current values
  
   @public
   @for Ember.stream
   @function concat
   @param {Array} array An array containing zero or more stream objects and
                        zero or more non-stream objects
   @param {String} separator string to be used to join array elements
   @return {String} String with array elements concatenated and joined by the
                    provided separator, and any stream array members having been
                    replaced by the current value of the stream
   */

  function concat(array, separator) {
    // TODO: Create subclass ConcatStream < Stream. Defer
    // subscribing to streams until the value() is called.
    var hasStream = scanArray(array);
    if (hasStream) {
      var i, l;
      var stream = new _stream["default"](function () {
        return concat(readArray(array), separator);
      }, function () {
        var labels = labelsFor(array);
        return 'concat([' + labels.join(', ') + ']; separator=' + inspect(separator) + ')';
      });

      for (i = 0, l = array.length; i < l; i++) {
        subscribe(array[i], stream.notify, stream);
      }

      // used by angle bracket components to detect an attribute was provided
      // as a string literal
      stream.isConcat = true;
      return stream;
    } else {
      return array.join(separator);
    }
  }

  function labelsFor(streams) {
    var labels = [];

    for (var i = 0, l = streams.length; i < l; i++) {
      var stream = streams[i];
      labels.push(labelFor(stream));
    }

    return labels;
  }

  function labelsForObject(streams) {
    var labels = [];

    for (var prop in streams) {
      labels.push('' + prop + ': ' + inspect(streams[prop]));
    }

    return labels.length ? '{ ' + labels.join(', ') + ' }' : '{}';
  }

  function labelFor(maybeStream) {
    if (isStream(maybeStream)) {
      var stream = maybeStream;
      return typeof stream.label === 'function' ? stream.label() : stream.label;
    } else {
      return inspect(maybeStream);
    }
  }

  function inspect(value) {
    switch (typeof value) {
      case 'string':
        return '"' + value + '"';
      case 'object':
        return '{ ... }';
      case 'function':
        return 'function() { ... }';
      default:
        return String(value);
    }
  }

  function or(first, second) {
    var stream = new _stream["default"](function () {
      return first.value() || second.value();
    }, function () {
      return '' + labelFor(first) + ' || ' + labelFor(second);
    });

    stream.addDependency(first);
    stream.addDependency(second);

    return stream;
  }

  function addDependency(stream, dependency) {
    Ember.assert('Cannot add a stream as a dependency to a non-stream', isStream(stream) || !isStream(dependency));
    if (isStream(stream)) {
      stream.addDependency(dependency);
    }
  }

  function zip(streams, callback, label) {
    Ember.assert('Must call zip with a label', !!label);

    var stream = new _stream["default"](function () {
      var array = readArray(streams);
      return callback ? callback(array) : array;
    }, function () {
      return '' + label + '(' + labelsFor(streams) + ')';
    });

    for (var i = 0, l = streams.length; i < l; i++) {
      stream.addDependency(streams[i]);
    }

    return stream;
  }

  function zipHash(object, callback, label) {
    Ember.assert('Must call zipHash with a label', !!label);

    var stream = new _stream["default"](function () {
      var hash = readHash(object);
      return callback ? callback(hash) : hash;
    }, function () {
      return '' + label + '(' + labelsForObject(object) + ')';
    });

    for (var prop in object) {
      stream.addDependency(object[prop]);
    }

    return stream;
  }

  /**
   Generate a new stream by providing a source stream and a function that can
   be used to transform the stream's value. In the case of a non-stream object,
   returns the result of the function.
  
   The value to transform would typically be available to the function you pass
   to `chain()` via scope. For example:
  
   ```javascript
       var source = ...;  // stream returning a number
                              // or a numeric (non-stream) object
       var result = chain(source, function() {
         var currentValue = read(source);
         return currentValue + 1;
       });
   ```
  
   In the example, result is a stream if source is a stream, or a number of
   source was numeric.
  
   @public
   @for Ember.stream
   @function chain
   @param {Object|Stream} value A stream or non-stream object
   @param {Function} fn function to be run when the stream value changes, or to
                        be run once in the case of a non-stream object
   @return {Object|Stream} In the case of a stream `value` parameter, a new
                           stream that will be updated with the return value of
                           the provided function `fn`. In the case of a
                           non-stream object, the return value of the provided
                           function `fn`.
   */

  function chain(value, fn, label) {
    Ember.assert('Must call chain with a label', !!label);
    if (isStream(value)) {
      var stream = new _stream["default"](fn, function () {
        return '' + label + '(' + labelFor(value) + ')';
      });
      stream.addDependency(value);
      return stream;
    } else {
      return fn();
    }
  }

  function setValue(object, value) {
    if (object && object.isStream) {
      object.setValue(value);
    }
  }
});
enifed("ember-metal/symbol", ["exports"], function (exports) {});
enifed("ember-metal/utils", ["exports", "ember-metal/core", "ember-metal/platform/create", "ember-metal/platform/define_property"], function (exports, _emberMetalCore, _emberMetalPlatformCreate, _emberMetalPlatformDefine_property) {
  exports.uuid = uuid;
  exports.symbol = symbol;
  exports.generateGuid = generateGuid;
  exports.guidFor = guidFor;
  exports.getMeta = getMeta;
  exports.setMeta = setMeta;
  exports.metaPath = metaPath;
  exports.wrap = wrap;
  exports.tryInvoke = tryInvoke;
  exports.makeArray = makeArray;
  exports.inspect = inspect;
  exports.apply = apply;
  exports.applyStr = applyStr;
  // Remove "use strict"; from transpiled module until
  // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed
  //
  "REMOVE_USE_STRICT: true";

  /**
  @module ember-metal
  */

  /**
    Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from
    jQuery master. We'll just bootstrap our own uuid now.
  
    @private
    @return {Number} the uuid
  */
  var _uuid = 0;

  /**
    Generates a universally unique identifier. This method
    is used internally by Ember for assisting with
    the generation of GUID's and other unique identifiers
    such as `bind-attr` data attributes.
  
    @public
    @return {Number} [description]
   */

  function uuid() {
    return ++_uuid;
  }

  /**
    Prefix used for guids through out Ember.
    @private
    @property GUID_PREFIX
    @for Ember
    @type String
    @final
  */
  var GUID_PREFIX = "ember";

  // Used for guid generation...
  var numberCache = [];
  var stringCache = {};

  /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */
  function intern(str) {
    var obj = {};
    obj[str] = 1;
    for (var key in obj) {
      if (key === str) {
        return key;
      }
    }
    return str;
  }

  function symbol(debugName) {
    // TODO: Investigate using platform symbols, but we do not
    // want to require non-enumerability for this API, which
    // would introduce a large cost.

    return intern(debugName + " [id=" + GUID_KEY + Math.floor(Math.random() * new Date()) + "]");
  }

  /**
    A unique key used to assign guids and other private metadata to objects.
    If you inspect an object in your browser debugger you will often see these.
    They can be safely ignored.
  
    On browsers that support it, these properties are added with enumeration
    disabled so they won't show up when you iterate over your properties.
  
    @private
    @property GUID_KEY
    @for Ember
    @type String
    @final
  */
  var GUID_KEY = intern("__ember" + +new Date());

  var GUID_DESC = {
    writable: true,
    configurable: true,
    enumerable: false,
    value: null
  };

  exports.GUID_DESC = GUID_DESC;
  var undefinedDescriptor = {
    configurable: true,
    writable: true,
    enumerable: false,
    value: undefined
  };

  var nullDescriptor = {
    configurable: true,
    writable: true,
    enumerable: false,
    value: null
  };

  var META_DESC = {
    writable: true,
    configurable: true,
    enumerable: false,
    value: null
  };

  var EMBER_META_PROPERTY = {
    name: "__ember_meta__",
    descriptor: META_DESC
  };

  exports.EMBER_META_PROPERTY = EMBER_META_PROPERTY;
  var GUID_KEY_PROPERTY = {
    name: GUID_KEY,
    descriptor: nullDescriptor
  };

  exports.GUID_KEY_PROPERTY = GUID_KEY_PROPERTY;
  var NEXT_SUPER_PROPERTY = {
    name: "__nextSuper",
    descriptor: undefinedDescriptor
  };

  exports.NEXT_SUPER_PROPERTY = NEXT_SUPER_PROPERTY;
  /**
    Generates a new guid, optionally saving the guid to the object that you
    pass in. You will rarely need to use this method. Instead you should
    call `Ember.guidFor(obj)`, which return an existing guid if available.
  
    @private
    @method generateGuid
    @for Ember
    @param {Object} [obj] Object the guid will be used for. If passed in, the guid will
      be saved on the object and reused whenever you pass the same object
      again.
  
      If no object is passed, just generate a new guid.
    @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to
      separate the guid into separate namespaces.
    @return {String} the guid
  */

  function generateGuid(obj, prefix) {
    if (!prefix) {
      prefix = GUID_PREFIX;
    }

    var ret = prefix + uuid();
    if (obj) {
      if (obj[GUID_KEY] === null) {
        obj[GUID_KEY] = ret;
      } else {
        GUID_DESC.value = ret;
        if (obj.__defineNonEnumerable) {
          obj.__defineNonEnumerable(GUID_KEY_PROPERTY);
        } else {
          (0, _emberMetalPlatformDefine_property.defineProperty)(obj, GUID_KEY, GUID_DESC);
        }
      }
    }
    return ret;
  }

  /**
    Returns a unique id for the object. If the object does not yet have a guid,
    one will be assigned to it. You can call this on any object,
    `Ember.Object`-based or not, but be aware that it will add a `_guid`
    property.
  
    You can also use this method on DOM Element objects.
  
    @private
    @method guidFor
    @for Ember
    @param {Object} obj any object, string, number, Element, or primitive
    @return {String} the unique guid for this instance.
  */

  function guidFor(obj) {

    // special cases where we don't want to add a key to object
    if (obj === undefined) {
      return "(undefined)";
    }

    if (obj === null) {
      return "(null)";
    }

    var ret;
    var type = typeof obj;

    // Don't allow prototype changes to String etc. to change the guidFor
    switch (type) {
      case "number":
        ret = numberCache[obj];

        if (!ret) {
          ret = numberCache[obj] = "nu" + obj;
        }

        return ret;

      case "string":
        ret = stringCache[obj];

        if (!ret) {
          ret = stringCache[obj] = "st" + uuid();
        }

        return ret;

      case "boolean":
        return obj ? "(true)" : "(false)";

      default:
        if (obj[GUID_KEY]) {
          return obj[GUID_KEY];
        }

        if (obj === Object) {
          return "(Object)";
        }

        if (obj === Array) {
          return "(Array)";
        }

        ret = GUID_PREFIX + uuid();

        if (obj[GUID_KEY] === null) {
          obj[GUID_KEY] = ret;
        } else {
          GUID_DESC.value = ret;

          if (obj.__defineNonEnumerable) {
            obj.__defineNonEnumerable(GUID_KEY_PROPERTY);
          } else {
            (0, _emberMetalPlatformDefine_property.defineProperty)(obj, GUID_KEY, GUID_DESC);
          }
        }
        return ret;
    }
  }

  // ..........................................................
  // META
  //
  function Meta(obj) {
    this.watching = {};
    this.cache = undefined;
    this.cacheMeta = undefined;
    this.source = obj;
    this.deps = undefined;
    this.listeners = undefined;
    this.mixins = undefined;
    this.bindings = undefined;
    this.chains = undefined;
    this.values = undefined;
    this.proto = undefined;
  }

  Meta.prototype = {
    chainWatchers: null // FIXME
  };

  if (!_emberMetalPlatformDefine_property.canDefineNonEnumerableProperties) {
    // on platforms that don't support enumerable false
    // make meta fail jQuery.isPlainObject() to hide from
    // jQuery.extend() by having a property that fails
    // hasOwnProperty check.
    Meta.prototype.__preventPlainObject__ = true;

    // Without non-enumerable properties, meta objects will be output in JSON
    // unless explicitly suppressed
    Meta.prototype.toJSON = function () {};
  }

  // Placeholder for non-writable metas.
  var EMPTY_META = new Meta(null);

  if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
    if (_emberMetalPlatformDefine_property.hasPropertyAccessors) {
      EMPTY_META.values = {};
    }
  }

  /**
    Retrieves the meta hash for an object. If `writable` is true ensures the
    hash is writable for this object as well.
  
    The meta object contains information about computed property descriptors as
    well as any watched properties and other information. You generally will
    not access this information directly but instead work with higher level
    methods that manipulate this hash indirectly.
  
    @method meta
    @for Ember
    @private
  
    @param {Object} obj The object to retrieve meta for
    @param {Boolean} [writable=true] Pass `false` if you do not intend to modify
      the meta hash, allowing the method to avoid making an unnecessary copy.
    @return {Object} the meta hash for an object
  */
  function meta(obj, writable) {
    var ret = obj.__ember_meta__;
    if (writable === false) {
      return ret || EMPTY_META;
    }

    if (!ret) {
      if (_emberMetalPlatformDefine_property.canDefineNonEnumerableProperties) {
        if (obj.__defineNonEnumerable) {
          obj.__defineNonEnumerable(EMBER_META_PROPERTY);
        } else {
          (0, _emberMetalPlatformDefine_property.defineProperty)(obj, "__ember_meta__", META_DESC);
        }
      }

      ret = new Meta(obj);

      if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
        if (_emberMetalPlatformDefine_property.hasPropertyAccessors) {
          ret.values = {};
        }
      }

      obj.__ember_meta__ = ret;
    } else if (ret.source !== obj) {
      if (obj.__defineNonEnumerable) {
        obj.__defineNonEnumerable(EMBER_META_PROPERTY);
      } else {
        (0, _emberMetalPlatformDefine_property.defineProperty)(obj, "__ember_meta__", META_DESC);
      }

      ret = (0, _emberMetalPlatformCreate["default"])(ret);
      ret.watching = (0, _emberMetalPlatformCreate["default"])(ret.watching);
      ret.cache = undefined;
      ret.cacheMeta = undefined;
      ret.source = obj;

      if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
        if (_emberMetalPlatformDefine_property.hasPropertyAccessors) {
          ret.values = (0, _emberMetalPlatformCreate["default"])(ret.values);
        }
      }

      obj["__ember_meta__"] = ret;
    }
    return ret;
  }

  function getMeta(obj, property) {
    var _meta = meta(obj, false);
    return _meta[property];
  }

  function setMeta(obj, property, value) {
    var _meta = meta(obj, true);
    _meta[property] = value;
    return value;
  }

  /**
    @deprecated
    @private
  
    In order to store defaults for a class, a prototype may need to create
    a default meta object, which will be inherited by any objects instantiated
    from the class's constructor.
  
    However, the properties of that meta object are only shallow-cloned,
    so if a property is a hash (like the event system's `listeners` hash),
    it will by default be shared across all instances of that class.
  
    This method allows extensions to deeply clone a series of nested hashes or
    other complex objects. For instance, the event system might pass
    `['listeners', 'foo:change', 'ember157']` to `prepareMetaPath`, which will
    walk down the keys provided.
  
    For each key, if the key does not exist, it is created. If it already
    exists and it was inherited from its constructor, the constructor's
    key is cloned.
  
    You can also pass false for `writable`, which will simply return
    undefined if `prepareMetaPath` discovers any part of the path that
    shared or undefined.
  
    @method metaPath
    @for Ember
    @param {Object} obj The object whose meta we are examining
    @param {Array} path An array of keys to walk down
    @param {Boolean} writable whether or not to create a new meta
      (or meta property) if one does not already exist or if it's
      shared with its constructor
  */

  function metaPath(obj, path, writable) {
    _emberMetalCore["default"].deprecate("Ember.metaPath is deprecated and will be removed from future releases.");
    var _meta = meta(obj, writable);
    var keyName, value;

    for (var i = 0, l = path.length; i < l; i++) {
      keyName = path[i];
      value = _meta[keyName];

      if (!value) {
        if (!writable) {
          return undefined;
        }
        value = _meta[keyName] = { __ember_source__: obj };
      } else if (value.__ember_source__ !== obj) {
        if (!writable) {
          return undefined;
        }
        value = _meta[keyName] = (0, _emberMetalPlatformCreate["default"])(value);
        value.__ember_source__ = obj;
      }

      _meta = value;
    }

    return value;
  }

  /**
    Wraps the passed function so that `this._super` will point to the superFunc
    when the function is invoked. This is the primitive we use to implement
    calls to super.
  
    @private
    @method wrap
    @for Ember
    @param {Function} func The function to call
    @param {Function} superFunc The super function.
    @return {Function} wrapped function.
  */

  function wrap(func, superFunc) {
    function superWrapper() {
      var ret;
      var sup = this && this.__nextSuper;
      var length = arguments.length;

      if (this) {
        this.__nextSuper = superFunc;
      }

      if (length === 0) {
        ret = func.call(this);
      } else if (length === 1) {
        ret = func.call(this, arguments[0]);
      } else if (length === 2) {
        ret = func.call(this, arguments[0], arguments[1]);
      } else {
        var args = new Array(length);
        for (var i = 0; i < length; i++) {
          args[i] = arguments[i];
        }
        ret = apply(this, func, args);
      }

      if (this) {
        this.__nextSuper = sup;
      }

      return ret;
    }

    superWrapper.wrappedFunction = func;
    superWrapper.__ember_observes__ = func.__ember_observes__;
    superWrapper.__ember_observesBefore__ = func.__ember_observesBefore__;
    superWrapper.__ember_listens__ = func.__ember_listens__;

    return superWrapper;
  }

  /**
    Checks to see if the `methodName` exists on the `obj`.
  
    ```javascript
    var foo = { bar: function() { return 'bar'; }, baz: null };
  
    Ember.canInvoke(foo, 'bar'); // true
    Ember.canInvoke(foo, 'baz'); // false
    Ember.canInvoke(foo, 'bat'); // false
    ```
  
    @method canInvoke
    @for Ember
    @param {Object} obj The object to check for the method
    @param {String} methodName The method name to check for
    @return {Boolean}
    @private
  */
  function canInvoke(obj, methodName) {
    return !!(obj && typeof obj[methodName] === "function");
  }

  /**
    Checks to see if the `methodName` exists on the `obj`,
    and if it does, invokes it with the arguments passed.
  
    ```javascript
    var d = new Date('03/15/2013');
  
    Ember.tryInvoke(d, 'getTime');              // 1363320000000
    Ember.tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000
    Ember.tryInvoke(d, 'noSuchMethod', [2014]); // undefined
    ```
  
    @method tryInvoke
    @for Ember
    @param {Object} obj The object to check for the method
    @param {String} methodName The method name to check for
    @param {Array} [args] The arguments to pass to the method
    @return {*} the return value of the invoked method or undefined if it cannot be invoked
    @public
  */

  function tryInvoke(obj, methodName, args) {
    if (canInvoke(obj, methodName)) {
      return args ? applyStr(obj, methodName, args) : applyStr(obj, methodName);
    }
  }

  // https://github.com/emberjs/ember.js/pull/1617
  var needsFinallyFix = (function () {
    var count = 0;
    try {
      // jscs:disable
      try {} finally {
        count++;
        throw new Error("needsFinallyFixTest");
      }
      // jscs:enable
    } catch (e) {}

    return count !== 1;
  })();

  /**
    Provides try/finally functionality, while working
    around Safari's double finally bug.
  
    ```javascript
    var tryable = function() {
      someResource.lock();
      runCallback(); // May throw error.
    };
  
    var finalizer = function() {
      someResource.unlock();
    };
  
    Ember.tryFinally(tryable, finalizer);
    ```
  
    @method tryFinally
    @deprecated Use JavaScript's native try/finally
    @for Ember
    @param {Function} tryable The function to run the try callback
    @param {Function} finalizer The function to run the finally callback
    @param {Object} [binding] The optional calling object. Defaults to 'this'
    @return {*} The return value is the that of the finalizer,
    unless that value is undefined, in which case it is the return value
    of the tryable
    @private
  */

  var tryFinally;
  if (needsFinallyFix) {
    exports.tryFinally = tryFinally = function (tryable, finalizer, binding) {
      var result, finalResult, finalError;

      binding = binding || this;

      try {
        result = tryable.call(binding);
      } finally {
        try {
          finalResult = finalizer.call(binding);
        } catch (e) {
          finalError = e;
        }
      }

      if (finalError) {
        throw finalError;
      }

      return finalResult === undefined ? result : finalResult;
    };
  } else {
    exports.tryFinally = tryFinally = function (tryable, finalizer, binding) {
      var result, finalResult;

      binding = binding || this;

      try {
        result = tryable.call(binding);
      } finally {
        finalResult = finalizer.call(binding);
      }

      return finalResult === undefined ? result : finalResult;
    };
  }

  var deprecatedTryFinally = function () {
    _emberMetalCore["default"].deprecate("tryFinally is deprecated. Please use JavaScript's native try/finally.", false);
    return tryFinally.apply(this, arguments);
  };

  /**
    Provides try/catch/finally functionality, while working
    around Safari's double finally bug.
  
    ```javascript
    var tryable = function() {
      for (i = 0, l = listeners.length; i < l; i++) {
        listener = listeners[i];
        beforeValues[i] = listener.before(name, time(), payload);
      }
  
      return callback.call(binding);
    };
  
    var catchable = function(e) {
      payload = payload || {};
      payload.exception = e;
    };
  
    var finalizer = function() {
      for (i = 0, l = listeners.length; i < l; i++) {
        listener = listeners[i];
        listener.after(name, time(), payload, beforeValues[i]);
      }
    };
  
    Ember.tryCatchFinally(tryable, catchable, finalizer);
    ```
  
    @method tryCatchFinally
    @deprecated Use JavaScript's native try/catch/finally instead
    @for Ember
    @param {Function} tryable The function to run the try callback
    @param {Function} catchable The function to run the catchable callback
    @param {Function} finalizer The function to run the finally callback
    @param {Object} [binding] The optional calling object. Defaults to 'this'
    @return {*} The return value is the that of the finalizer,
    unless that value is undefined, in which case it is the return value
    of the tryable.
    @private
  */
  var tryCatchFinally;
  if (needsFinallyFix) {
    exports.tryCatchFinally = tryCatchFinally = function (tryable, catchable, finalizer, binding) {
      var result, finalResult, finalError;

      binding = binding || this;

      try {
        result = tryable.call(binding);
      } catch (error) {
        result = catchable.call(binding, error);
      } finally {
        try {
          finalResult = finalizer.call(binding);
        } catch (e) {
          finalError = e;
        }
      }

      if (finalError) {
        throw finalError;
      }

      return finalResult === undefined ? result : finalResult;
    };
  } else {
    exports.tryCatchFinally = tryCatchFinally = function (tryable, catchable, finalizer, binding) {
      var result, finalResult;

      binding = binding || this;

      try {
        result = tryable.call(binding);
      } catch (error) {
        result = catchable.call(binding, error);
      } finally {
        finalResult = finalizer.call(binding);
      }

      return finalResult === undefined ? result : finalResult;
    };
  }

  var deprecatedTryCatchFinally = function () {
    _emberMetalCore["default"].deprecate("tryCatchFinally is deprecated. Please use JavaScript's native try/catch/finally.", false);
    return tryCatchFinally.apply(this, arguments);
  };

  // ........................................
  // TYPING & ARRAY MESSAGING
  //

  var toString = Object.prototype.toString;

  var isArray = Array.isArray || function (value) {
    return value !== null && value !== undefined && typeof value === "object" && typeof value.length === "number" && toString.call(value) === "[object Array]";
  };

  /**
    Forces the passed object to be part of an array. If the object is already
    an array, it will return the object. Otherwise, it will add the object to
    an array. If obj is `null` or `undefined`, it will return an empty array.
  
    ```javascript
    Ember.makeArray();            // []
    Ember.makeArray(null);        // []
    Ember.makeArray(undefined);   // []
    Ember.makeArray('lindsay');   // ['lindsay']
    Ember.makeArray([1, 2, 42]);  // [1, 2, 42]
  
    var controller = Ember.ArrayProxy.create({ content: [] });
  
    Ember.makeArray(controller) === controller;  // true
    ```
  
    @method makeArray
    @for Ember
    @param {Object} obj the object
    @return {Array}
    @private
  */

  function makeArray(obj) {
    if (obj === null || obj === undefined) {
      return [];
    }
    return isArray(obj) ? obj : [obj];
  }

  /**
    Convenience method to inspect an object. This method will attempt to
    convert the object into a useful string description.
  
    It is a pretty simple implementation. If you want something more robust,
    use something like JSDump: https://github.com/NV/jsDump
  
    @method inspect
    @for Ember
    @param {Object} obj The object you want to inspect.
    @return {String} A description of the object
    @since 1.4.0
    @private
  */

  function inspect(obj) {
    if (obj === null) {
      return "null";
    }
    if (obj === undefined) {
      return "undefined";
    }
    if (isArray(obj)) {
      return "[" + obj + "]";
    }
    // for non objects
    if (typeof obj !== "object") {
      return "" + obj;
    }
    // overridden toString
    if (typeof obj.toString === "function" && obj.toString !== toString) {
      return obj.toString();
    }

    // Object.prototype.toString === {}.toString
    var v;
    var ret = [];
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        v = obj[key];
        if (v === "toString") {
          continue;
        } // ignore useless items
        if (typeof v === "function") {
          v = "function() { ... }";
        }

        if (v && typeof v.toString !== "function") {
          ret.push(key + ": " + toString.call(v));
        } else {
          ret.push(key + ": " + v);
        }
      }
    }
    return "{" + ret.join(", ") + "}";
  }

  // The following functions are intentionally minified to keep the functions
  // below Chrome's function body size inlining limit of 600 chars.
  /**
    @param {Object} t target
    @param {Function} m method
    @param {Array} a args
    @private
  */

  function apply(t, m, a) {
    var l = a && a.length;
    if (!a || !l) {
      return m.call(t);
    }
    switch (l) {
      case 1:
        return m.call(t, a[0]);
      case 2:
        return m.call(t, a[0], a[1]);
      case 3:
        return m.call(t, a[0], a[1], a[2]);
      case 4:
        return m.call(t, a[0], a[1], a[2], a[3]);
      case 5:
        return m.call(t, a[0], a[1], a[2], a[3], a[4]);
      default:
        return m.apply(t, a);
    }
  }

  /**
    @param {Object} t target
    @param {String} m method
    @param {Array} a args
    @private
  */

  function applyStr(t, m, a) {
    var l = a && a.length;
    if (!a || !l) {
      return t[m]();
    }
    switch (l) {
      case 1:
        return t[m](a[0]);
      case 2:
        return t[m](a[0], a[1]);
      case 3:
        return t[m](a[0], a[1], a[2]);
      case 4:
        return t[m](a[0], a[1], a[2], a[3]);
      case 5:
        return t[m](a[0], a[1], a[2], a[3], a[4]);
      default:
        return t[m].apply(t, a);
    }
  }

  exports.GUID_KEY = GUID_KEY;
  exports.META_DESC = META_DESC;
  exports.EMPTY_META = EMPTY_META;
  exports.meta = meta;
  exports.isArray = isArray;
  exports.makeArray = makeArray;
  exports.tryCatchFinally = tryCatchFinally;
  exports.deprecatedTryCatchFinally = deprecatedTryCatchFinally;
  exports.canInvoke = canInvoke;
  exports.tryFinally = tryFinally;
  exports.deprecatedTryFinally = deprecatedTryFinally;
});
enifed("ember-metal/watch_key", ["exports", "ember-metal/core", "ember-metal/utils", "ember-metal/platform/define_property", "ember-metal/properties"], function (exports, _emberMetalCore, _emberMetalUtils, _emberMetalPlatformDefine_property, _emberMetalProperties) {
  exports.watchKey = watchKey;
  exports.unwatchKey = unwatchKey;

  function watchKey(obj, keyName, meta) {
    // can't watch length on Array - it is special...
    if (keyName === "length" && (0, _emberMetalUtils.isArray)(obj)) {
      return;
    }

    var m = meta || (0, _emberMetalUtils.meta)(obj);
    var watching = m.watching;

    // activate watching first time
    if (!watching[keyName]) {
      watching[keyName] = 1;

      var possibleDesc = obj[keyName];
      var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;
      if (desc && desc.willWatch) {
        desc.willWatch(obj, keyName);
      }

      if ("function" === typeof obj.willWatchProperty) {
        obj.willWatchProperty(keyName);
      }

      if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
        if (_emberMetalPlatformDefine_property.hasPropertyAccessors) {
          handleMandatorySetter(m, obj, keyName);
        }
      }
    } else {
      watching[keyName] = (watching[keyName] || 0) + 1;
    }
  }

  if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
    var handleMandatorySetter = function handleMandatorySetter(m, obj, keyName) {
      var descriptor = Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(obj, keyName);
      var configurable = descriptor ? descriptor.configurable : true;
      var isWritable = descriptor ? descriptor.writable : true;
      var hasValue = descriptor ? "value" in descriptor : true;
      var possibleDesc = descriptor && descriptor.value;
      var isDescriptor = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor;

      if (isDescriptor) {
        return;
      }

      // this x in Y deopts, so keeping it in this function is better;
      if (configurable && isWritable && hasValue && keyName in obj) {
        m.values[keyName] = obj[keyName];
        (0, _emberMetalPlatformDefine_property.defineProperty)(obj, keyName, {
          configurable: true,
          enumerable: Object.prototype.propertyIsEnumerable.call(obj, keyName),
          set: (0, _emberMetalProperties.MANDATORY_SETTER_FUNCTION)(keyName),
          get: (0, _emberMetalProperties.DEFAULT_GETTER_FUNCTION)(keyName)
        });
      }
    };
  }

  // This is super annoying, but required until
  // https://github.com/babel/babel/issues/906 is resolved
  ; // jshint ignore:line

  function unwatchKey(obj, keyName, meta) {
    var m = meta || (0, _emberMetalUtils.meta)(obj);
    var watching = m.watching;

    if (watching[keyName] === 1) {
      watching[keyName] = 0;

      var possibleDesc = obj[keyName];
      var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;
      if (desc && desc.didUnwatch) {
        desc.didUnwatch(obj, keyName);
      }

      if ("function" === typeof obj.didUnwatchProperty) {
        obj.didUnwatchProperty(keyName);
      }

      if (_emberMetalCore["default"].FEATURES.isEnabled("mandatory-setter")) {
        if (!desc && _emberMetalPlatformDefine_property.hasPropertyAccessors && keyName in obj) {
          (0, _emberMetalPlatformDefine_property.defineProperty)(obj, keyName, {
            configurable: true,
            enumerable: Object.prototype.propertyIsEnumerable.call(obj, keyName),
            set: function (val) {
              // redefine to set as enumerable
              (0, _emberMetalPlatformDefine_property.defineProperty)(obj, keyName, {
                configurable: true,
                writable: true,
                enumerable: true,
                value: val
              });
              delete m.values[keyName];
            },
            get: (0, _emberMetalProperties.DEFAULT_GETTER_FUNCTION)(keyName)
          });
        }
      }
    } else if (watching[keyName] > 1) {
      watching[keyName]--;
    }
  }
});
enifed("ember-metal/watch_path", ["exports", "ember-metal/utils", "ember-metal/chains"], function (exports, _emberMetalUtils, _emberMetalChains) {
  exports.watchPath = watchPath;
  exports.unwatchPath = unwatchPath;

  // get the chains for the current object. If the current object has
  // chains inherited from the proto they will be cloned and reconfigured for
  // the current object.
  function chainsFor(obj, meta) {
    var m = meta || (0, _emberMetalUtils.meta)(obj);
    var ret = m.chains;
    if (!ret) {
      ret = m.chains = new _emberMetalChains.ChainNode(null, null, obj);
    } else if (ret.value() !== obj) {
      ret = m.chains = ret.copy(obj);
    }
    return ret;
  }

  function watchPath(obj, keyPath, meta) {
    // can't watch length on Array - it is special...
    if (keyPath === "length" && (0, _emberMetalUtils.isArray)(obj)) {
      return;
    }

    var m = meta || (0, _emberMetalUtils.meta)(obj);
    var watching = m.watching;

    if (!watching[keyPath]) {
      // activate watching first time
      watching[keyPath] = 1;
      chainsFor(obj, m).add(keyPath);
    } else {
      watching[keyPath] = (watching[keyPath] || 0) + 1;
    }
  }

  function unwatchPath(obj, keyPath, meta) {
    var m = meta || (0, _emberMetalUtils.meta)(obj);
    var watching = m.watching;

    if (watching[keyPath] === 1) {
      watching[keyPath] = 0;
      chainsFor(obj, m).remove(keyPath);
    } else if (watching[keyPath] > 1) {
      watching[keyPath]--;
    }
  }
});
enifed("ember-metal/watching", ["exports", "ember-metal/utils", "ember-metal/chains", "ember-metal/watch_key", "ember-metal/watch_path", "ember-metal/path_cache"], function (exports, _emberMetalUtils, _emberMetalChains, _emberMetalWatch_key, _emberMetalWatch_path, _emberMetalPath_cache) {
  exports.isWatching = isWatching;
  exports.unwatch = unwatch;
  exports.destroy = destroy;

  /**
    Starts watching a property on an object. Whenever the property changes,
    invokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the
    primitive used by observers and dependent keys; usually you will never call
    this method directly but instead use higher level methods like
    `Ember.addObserver()`
  
    @private
    @method watch
    @for Ember
    @param obj
    @param {String} _keyPath
  */
  function watch(obj, _keyPath, m) {
    // can't watch length on Array - it is special...
    if (_keyPath === "length" && (0, _emberMetalUtils.isArray)(obj)) {
      return;
    }

    if (!(0, _emberMetalPath_cache.isPath)(_keyPath)) {
      (0, _emberMetalWatch_key.watchKey)(obj, _keyPath, m);
    } else {
      (0, _emberMetalWatch_path.watchPath)(obj, _keyPath, m);
    }
  }

  exports.watch = watch;

  function isWatching(obj, key) {
    var meta = obj["__ember_meta__"];
    return (meta && meta.watching[key]) > 0;
  }

  watch.flushPending = _emberMetalChains.flushPendingChains;

  function unwatch(obj, _keyPath, m) {
    // can't watch length on Array - it is special...
    if (_keyPath === "length" && (0, _emberMetalUtils.isArray)(obj)) {
      return;
    }

    if (!(0, _emberMetalPath_cache.isPath)(_keyPath)) {
      (0, _emberMetalWatch_key.unwatchKey)(obj, _keyPath, m);
    } else {
      (0, _emberMetalWatch_path.unwatchPath)(obj, _keyPath, m);
    }
  }

  var NODE_STACK = [];

  /**
    Tears down the meta on an object so that it can be garbage collected.
    Multiple calls will have no effect.
  
    @method destroy
    @for Ember
    @param {Object} obj  the object to destroy
    @return {void}
    @private
  */

  function destroy(obj) {
    var meta = obj["__ember_meta__"];
    var node, nodes, key, nodeObject;

    if (meta) {
      obj["__ember_meta__"] = null;
      // remove chainWatchers to remove circular references that would prevent GC
      node = meta.chains;
      if (node) {
        NODE_STACK.push(node);
        // process tree
        while (NODE_STACK.length > 0) {
          node = NODE_STACK.pop();
          // push children
          nodes = node._chains;
          if (nodes) {
            for (key in nodes) {
              if (nodes.hasOwnProperty(key)) {
                NODE_STACK.push(nodes[key]);
              }
            }
          }
          // remove chainWatcher in node object
          if (node._watching) {
            nodeObject = node._object;
            if (nodeObject) {
              (0, _emberMetalChains.removeChainWatcher)(nodeObject, node._key, node);
            }
          }
        }
      }
    }
  }
});
/**
@module ember-metal
*/
enifed("ember-routing-htmlbars", ["exports", "ember-metal/core", "ember-metal/merge", "ember-htmlbars/helpers", "ember-htmlbars/keywords", "ember-routing-htmlbars/helpers/query-params", "ember-routing-htmlbars/keywords/action", "ember-routing-htmlbars/keywords/element-action", "ember-routing-htmlbars/keywords/link-to", "ember-routing-htmlbars/keywords/render"], function (exports, _emberMetalCore, _emberMetalMerge, _emberHtmlbarsHelpers, _emberHtmlbarsKeywords, _emberRoutingHtmlbarsHelpersQueryParams, _emberRoutingHtmlbarsKeywordsAction, _emberRoutingHtmlbarsKeywordsElementAction, _emberRoutingHtmlbarsKeywordsLinkTo, _emberRoutingHtmlbarsKeywordsRender) {

  (0, _emberHtmlbarsHelpers.registerHelper)("query-params", _emberRoutingHtmlbarsHelpersQueryParams.queryParamsHelper);

  (0, _emberHtmlbarsKeywords.registerKeyword)("action", _emberRoutingHtmlbarsKeywordsAction["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("@element_action", _emberRoutingHtmlbarsKeywordsElementAction["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("link-to", _emberRoutingHtmlbarsKeywordsLinkTo["default"]);
  (0, _emberHtmlbarsKeywords.registerKeyword)("render", _emberRoutingHtmlbarsKeywordsRender["default"]);

  var deprecatedLinkTo = (0, _emberMetalMerge["default"])({}, _emberRoutingHtmlbarsKeywordsLinkTo["default"]);
  (0, _emberMetalMerge["default"])(deprecatedLinkTo, {
    link: function (state, params, hash) {
      _emberRoutingHtmlbarsKeywordsLinkTo["default"].link.call(this, state, params, hash);
      _emberMetalCore["default"].deprecate("The 'linkTo' view helper is deprecated in favor of 'link-to'");
    }
  });

  (0, _emberHtmlbarsKeywords.registerKeyword)("linkTo", deprecatedLinkTo);

  exports["default"] = _emberMetalCore["default"];
});
/**
@module ember
@submodule ember-routing-htmlbars
*/
enifed("ember-routing-htmlbars/helpers/query-params", ["exports", "ember-metal/core", "ember-routing/system/query_params"], function (exports, _emberMetalCore, _emberRoutingSystemQuery_params) {
  exports.queryParamsHelper = queryParamsHelper;

  /**
    This is a sub-expression to be used in conjunction with the link-to helper.
    It will supply url query parameters to the target route.
  
    Example
  
    {{#link-to 'posts' (query-params direction="asc")}}Sort{{/link-to}}
  
    @method query-params
    @for Ember.Handlebars.helpers
    @param {Object} hash takes a hash of query parameters
    @return {String} HTML string
    @public
  */

  function queryParamsHelper(params, hash) {
    _emberMetalCore["default"].assert("The `query-params` helper only accepts hash parameters, e.g. (query-params queryParamPropertyName='foo') as opposed to just (query-params 'foo')", params.length === 0);

    return _emberRoutingSystemQuery_params["default"].create({
      values: hash
    });
  }
});
/**
@module ember
@submodule ember-routing-htmlbars
*/

// assert
enifed("ember-routing-htmlbars/keywords/action", ["exports", "htmlbars-runtime/hooks", "ember-routing-htmlbars/keywords/closure-action"], function (exports, _htmlbarsRuntimeHooks, _emberRoutingHtmlbarsKeywordsClosureAction) {

  /**
    The `{{action}}` helper provides a useful shortcut for registering an HTML
    element within a template for a single DOM event and forwarding that
    interaction to the template's controller or specified `target` option.
  
    If the controller does not implement the specified action, the event is sent
    to the current route, and it bubbles up the route hierarchy from there.
  
    For more advanced event handling see [Ember.Component](/api/classes/Ember.Component.html)
  
  
    ### Use
    Given the following application Handlebars template on the page
  
    ```handlebars
    <div {{action 'anActionName'}}>
      click me
    </div>
    ```
  
    And application code
  
    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      actions: {
        anActionName: function() {
        }
      }
    });
    ```
  
    Will result in the following rendered HTML
  
    ```html
    <div class="ember-view">
      <div data-ember-action="1">
        click me
      </div>
    </div>
    ```
  
    Clicking "click me" will trigger the `anActionName` action of the
    `App.ApplicationController`. In this case, no additional parameters will be passed.
  
    If you provide additional parameters to the helper:
  
    ```handlebars
    <button {{action 'edit' post}}>Edit</button>
    ```
  
    Those parameters will be passed along as arguments to the JavaScript
    function implementing the action.
  
    ### Event Propagation
  
    Events triggered through the action helper will automatically have
    `.preventDefault()` called on them. You do not need to do so in your event
    handlers. If you need to allow event propagation (to handle file inputs for
    example) you can supply the `preventDefault=false` option to the `{{action}}` helper:
  
    ```handlebars
    <div {{action "sayHello" preventDefault=false}}>
      <input type="file" />
      <input type="checkbox" />
    </div>
    ```
  
    To disable bubbling, pass `bubbles=false` to the helper:
  
    ```handlebars
    <button {{action 'edit' post bubbles=false}}>Edit</button>
    ```
  
    If you need the default handler to trigger you should either register your
    own event handler, or use event methods on your view class. See [Ember.View](/api/classes/Ember.View.html)
    'Responding to Browser Events' for more information.
  
    ### Specifying DOM event type
  
    By default the `{{action}}` helper registers for DOM `click` events. You can
    supply an `on` option to the helper to specify a different DOM event name:
  
    ```handlebars
    <div {{action "anActionName" on="doubleClick"}}>
      click me
    </div>
    ```
  
    See `Ember.View` 'Responding to Browser Events' for a list of
    acceptable DOM event names.
  
    ### Specifying whitelisted modifier keys
  
    By default the `{{action}}` helper will ignore click event with pressed modifier
    keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="alt"}}>
      click me
    </div>
    ```
  
    This way the `{{action}}` will fire when clicking with the alt key pressed down.
  
    Alternatively, supply "any" to the `allowedKeys` option to accept any combination of modifier keys.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="any"}}>
      click me with any key pressed
    </div>
    ```
  
    ### Specifying a Target
  
    There are several possible target objects for `{{action}}` helpers:
  
    In a typical Ember application, where templates are managed through use of the
    `{{outlet}}` helper, actions will bubble to the current controller, then
    to the current route, and then up the route hierarchy.
  
    Alternatively, a `target` option can be provided to the helper to change
    which object will receive the method call. This option must be a path
    to an object, accessible in the current context:
  
    ```handlebars
    {{! the application template }}
    <div {{action "anActionName" target=view}}>
      click me
    </div>
    ```
  
    ```javascript
    App.ApplicationView = Ember.View.extend({
      actions: {
        anActionName: function() {}
      }
    });
  
    ```
  
    ### Additional Parameters
  
    You may specify additional parameters to the `{{action}}` helper. These
    parameters are passed along as the arguments to the JavaScript function
    implementing the action.
  
    ```handlebars
    {{#each people as |person|}}
      <div {{action "edit" person}}>
        click me
      </div>
    {{/each}}
    ```
  
    Clicking "click me" will trigger the `edit` method on the current controller
    with the value of `person` as a parameter.
  
    @method action
    @for Ember.Handlebars.helpers
    @public
  */

  exports["default"] = function (morph, env, scope, params, hash, template, inverse, visitor) {
    
      if (morph) {
        (0, _htmlbarsRuntimeHooks.keyword)("@element_action", morph, env, scope, params, hash, template, inverse, visitor);
        return true;
      }

      return (0, _emberRoutingHtmlbarsKeywordsClosureAction["default"])(morph, env, scope, params, hash, template, inverse, visitor);
      };
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed("ember-routing-htmlbars/keywords/closure-action", ["exports", "ember-metal/streams/stream", "ember-metal/array", "ember-metal/streams/utils", "ember-metal/keys", "ember-metal/utils", "ember-metal/property_get", "ember-metal/error"], function (exports, _emberMetalStreamsStream, _emberMetalArray, _emberMetalStreamsUtils, _emberMetalKeys, _emberMetalUtils, _emberMetalProperty_get, _emberMetalError) {
  exports["default"] = closureAction;
  var INVOKE = (0, _emberMetalUtils.symbol)("INVOKE");
  exports.INVOKE = INVOKE;
  var ACTION = (0, _emberMetalUtils.symbol)("ACTION");

  exports.ACTION = ACTION;

  function closureAction(morph, env, scope, params, hash, template, inverse, visitor) {
    return new _emberMetalStreamsStream["default"](function () {
      var _this = this;

      _emberMetalArray.map.call(params, this.addDependency, this);
      _emberMetalArray.map.call((0, _emberMetalKeys["default"])(hash), function (item) {
        _this.addDependency(item);
      });

      var rawAction = params[0];
      var actionArguments = (0, _emberMetalStreamsUtils.readArray)(params.slice(1, params.length));

      var target, action, valuePath;
      if (rawAction[INVOKE]) {
        // on-change={{action (mut name)}}
        target = rawAction;
        action = rawAction[INVOKE];
      } else {
        // on-change={{action setName}}
        // element-space actions look to "controller" then target. Here we only
        // look to "target".
        target = (0, _emberMetalStreamsUtils.read)(scope.self);
        action = (0, _emberMetalStreamsUtils.read)(rawAction);
        if (typeof action === "string") {
          var actionName = action;
          action = null;
          // on-change={{action 'setName'}}
          if (hash.target) {
            // on-change={{action 'setName' target=alternativeComponent}}
            target = (0, _emberMetalStreamsUtils.read)(hash.target);
          }
          if (target.actions) {
            action = target.actions[actionName];
          } else if (target._actions) {
            action = target._actions[actionName];
          }

          if (!action) {
            throw new _emberMetalError["default"]("An action named '" + actionName + "' was not found in " + target + ".");
          }
        }
      }

      if (hash.value) {
        // <button on-keypress={{action (mut name) value="which"}}
        // on-keypress is not even an Ember feature yet
        valuePath = (0, _emberMetalStreamsUtils.read)(hash.value);
      }

      return createClosureAction(target, action, valuePath, actionArguments);
    });
  }

  function createClosureAction(target, action, valuePath, actionArguments) {
    var closureAction;

    if (actionArguments.length > 0) {
      closureAction = function () {
        var args = actionArguments;
        if (arguments.length > 0) {
          var passedArguments = Array.prototype.slice.apply(arguments);
          args = actionArguments.concat(passedArguments);
        }
        if (valuePath && args.length > 0) {
          args[0] = (0, _emberMetalProperty_get.get)(args[0], valuePath);
        }
        return action.apply(target, args);
      };
    } else {
      closureAction = function () {
        var args = arguments;
        if (valuePath && args.length > 0) {
          args = Array.prototype.slice.apply(args);
          args[0] = (0, _emberMetalProperty_get.get)(args[0], valuePath);
        }
        return action.apply(target, args);
      };
    }

    closureAction[ACTION] = true;

    return closureAction;
  }
});
enifed("ember-routing-htmlbars/keywords/element-action", ["exports", "ember-metal/core", "ember-metal/utils", "ember-metal/run_loop", "ember-views/streams/utils", "ember-views/system/utils", "ember-views/system/action_manager"], function (exports, _emberMetalCore, _emberMetalUtils, _emberMetalRun_loop, _emberViewsStreamsUtils, _emberViewsSystemUtils, _emberViewsSystemAction_manager) {

  function assert(message, test) {
    // This only exists to prevent defeatureify from error when attempting
    // to transform the same source twice (tldr; you can't nest stripped statements)
    _emberMetalCore["default"].assert(message, test);
  }

  exports["default"] = {
    setupState: function (state, env, scope, params, hash) {
      var getStream = env.hooks.get;
      var read = env.hooks.getValue;

      var actionName = read(params[0]);

      if (_emberMetalCore["default"].FEATURES.isEnabled("ember-routing-htmlbars-improved-actions")) {
        assert("You specified a quoteless path to the {{action}} helper " + "which did not resolve to an action name (a string). " + "Perhaps you meant to use a quoted actionName? (e.g. {{action 'save'}}).", typeof actionName === "string" || typeof actionName === "function");
      } else {
        assert("You specified a quoteless path to the {{action}} helper " + "which did not resolve to an action name (a string). " + "Perhaps you meant to use a quoted actionName? (e.g. {{action 'save'}}).", typeof actionName === "string");
      }

      var actionArgs = [];
      for (var i = 1, l = params.length; i < l; i++) {
        actionArgs.push((0, _emberViewsStreamsUtils.readUnwrappedModel)(params[i]));
      }

      var target;
      if (hash.target) {
        if (typeof hash.target === "string") {
          target = read(getStream(env, scope, hash.target));
        } else {
          target = read(hash.target);
        }
      } else {
        target = read(scope.locals.controller) || read(scope.self);
      }

      return { actionName: actionName, actionArgs: actionArgs, target: target };
    },

    isStable: function (state, env, scope, params, hash) {
      return true;
    },

    render: function (node, env, scope, params, hash, template, inverse, visitor) {
      var actionId = env.dom.getAttribute(node.element, "data-ember-action") || (0, _emberMetalUtils.uuid)();

      ActionHelper.registerAction({
        actionId: actionId,
        node: node,
        eventName: hash.on || "click",
        bubbles: hash.bubbles,
        preventDefault: hash.preventDefault,
        withKeyCode: hash.withKeyCode,
        allowedKeys: hash.allowedKeys
      });

      node.cleanup = function () {
        ActionHelper.unregisterAction(actionId);
      };

      env.dom.setAttribute(node.element, "data-ember-action", actionId);
    }
  };
  var ActionHelper = {};

  exports.ActionHelper = ActionHelper;
  // registeredActions is re-exported for compatibility with older plugins
  // that were using this undocumented API.
  ActionHelper.registeredActions = _emberViewsSystemAction_manager["default"].registeredActions;

  ActionHelper.registerAction = function (_ref) {
    var actionId = _ref.actionId;
    var node = _ref.node;
    var eventName = _ref.eventName;
    var preventDefault = _ref.preventDefault;
    var bubbles = _ref.bubbles;
    var allowedKeys = _ref.allowedKeys;

    var actions = _emberViewsSystemAction_manager["default"].registeredActions[actionId];

    if (!actions) {
      actions = _emberViewsSystemAction_manager["default"].registeredActions[actionId] = [];
    }

    actions.push({
      eventName: eventName,
      handler: function (event) {
        if (!isAllowedEvent(event, allowedKeys)) {
          return true;
        }

        if (preventDefault !== false) {
          event.preventDefault();
        }

        if (bubbles === false) {
          event.stopPropagation();
        }

        var _node$state = node.state;
        var target = _node$state.target;
        var actionName = _node$state.actionName;
        var actionArgs = _node$state.actionArgs;

        (0, _emberMetalRun_loop["default"])(function runRegisteredAction() {
          if (_emberMetalCore["default"].FEATURES.isEnabled("ember-routing-htmlbars-improved-actions")) {
            if (typeof actionName === "function") {
              actionName.apply(target, actionArgs);
              return;
            }
          }
          if (target.send) {
            target.send.apply(target, [actionName].concat(actionArgs));
          } else {
            _emberMetalCore["default"].assert("The action '" + actionName + "' did not exist on " + target, typeof target[actionName] === "function");

            target[actionName].apply(target, actionArgs);
          }
        });
      }
    });

    return actionId;
  };

  ActionHelper.unregisterAction = function (actionId) {
    delete _emberViewsSystemAction_manager["default"].registeredActions[actionId];
  };

  var MODIFIERS = ["alt", "shift", "meta", "ctrl"];
  var POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;

  function isAllowedEvent(event, allowedKeys) {
    if (typeof allowedKeys === "undefined") {
      if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {
        return (0, _emberViewsSystemUtils.isSimpleClick)(event);
      } else {
        allowedKeys = "";
      }
    }

    if (allowedKeys.indexOf("any") >= 0) {
      return true;
    }

    for (var i = 0, l = MODIFIERS.length; i < l; i++) {
      if (event[MODIFIERS[i] + "Key"] && allowedKeys.indexOf(MODIFIERS[i]) === -1) {
        return false;
      }
    }

    return true;
  }
});
// assert
enifed("ember-routing-htmlbars/keywords/link-to", ["exports", "ember-metal/streams/utils", "ember-metal/core", "ember-metal/merge"], function (exports, _emberMetalStreamsUtils, _emberMetalCore, _emberMetalMerge) {

  /**
    The `{{link-to}}` helper renders a link to the supplied
    `routeName` passing an optionally supplied model to the
    route as its `model` context of the route. The block
    for `{{link-to}}` becomes the innerHTML of the rendered
    element:
  
    ```handlebars
    {{#link-to 'photoGallery'}}
      Great Hamster Photos
    {{/link-to}}
    ```
  
    You can also use an inline form of `{{link-to}}` helper by
    passing the link text as the first argument
    to the helper:
  
    ```handlebars
    {{link-to 'Great Hamster Photos' 'photoGallery'}}
    ```
  
    Both will result in:
  
    ```html
    <a href="/hamster-photos">
      Great Hamster Photos
    </a>
    ```
  
    ### Supplying a tagName
    By default `{{link-to}}` renders an `<a>` element. This can
    be overridden for a single use of `{{link-to}}` by supplying
    a `tagName` option:
  
    ```handlebars
    {{#link-to 'photoGallery' tagName="li"}}
      Great Hamster Photos
    {{/link-to}}
    ```
  
    ```html
    <li>
      Great Hamster Photos
    </li>
    ```
  
    To override this option for your entire application, see
    "Overriding Application-wide Defaults".
  
    ### Disabling the `link-to` helper
    By default `{{link-to}}` is enabled.
    any passed value to `disabled` helper property will disable the `link-to` helper.
  
    static use: the `disabled` option:
  
    ```handlebars
    {{#link-to 'photoGallery' disabled=true}}
      Great Hamster Photos
    {{/link-to}}
    ```
  
    dynamic use: the `disabledWhen` option:
  
    ```handlebars
    {{#link-to 'photoGallery' disabledWhen=controller.someProperty}}
      Great Hamster Photos
    {{/link-to}}
    ```
  
    any passed value to `disabled` will disable it except `undefined`.
    to ensure that only `true` disable the `link-to` helper you can
    override the global behaviour of `Ember.LinkComponent`.
  
    ```javascript
    Ember.LinkComponent.reopen({
      disabled: Ember.computed(function(key, value) {
        if (value !== undefined) {
          this.set('_isDisabled', value === true);
        }
        return value === true ? get(this, 'disabledClass') : false;
      })
    });
    ```
  
    see "Overriding Application-wide Defaults" for more.
  
    ### Handling `href`
    `{{link-to}}` will use your application's Router to
    fill the element's `href` property with a url that
    matches the path to the supplied `routeName` for your
    router's configured `Location` scheme, which defaults
    to Ember.HashLocation.
  
    ### Handling current route
    `{{link-to}}` will apply a CSS class name of 'active'
    when the application's current route matches
    the supplied routeName. For example, if the application's
    current route is 'photoGallery.recent' the following
    use of `{{link-to}}`:
  
    ```handlebars
    {{#link-to 'photoGallery.recent'}}
      Great Hamster Photos
    {{/link-to}}
    ```
  
    will result in
  
    ```html
    <a href="/hamster-photos/this-week" class="active">
      Great Hamster Photos
    </a>
    ```
  
    The CSS class name used for active classes can be customized
    for a single use of `{{link-to}}` by passing an `activeClass`
    option:
  
    ```handlebars
    {{#link-to 'photoGallery.recent' activeClass="current-url"}}
      Great Hamster Photos
    {{/link-to}}
    ```
  
    ```html
    <a href="/hamster-photos/this-week" class="current-url">
      Great Hamster Photos
    </a>
    ```
  
    To override this option for your entire application, see
    "Overriding Application-wide Defaults".
  
    ### Supplying a model
    An optional model argument can be used for routes whose
    paths contain dynamic segments. This argument will become
    the model context of the linked route:
  
    ```javascript
    App.Router.map(function() {
      this.resource("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```
  
    ```handlebars
    {{#link-to 'photoGallery' aPhoto}}
      {{aPhoto.title}}
    {{/link-to}}
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    ### Supplying multiple models
    For deep-linking to route paths that contain multiple
    dynamic segments, multiple model arguments can be used.
    As the router transitions through the route path, each
    supplied model argument will become the context for the
    route with the dynamic segments:
  
    ```javascript
    App.Router.map(function() {
      this.resource("photoGallery", {path: "hamster-photos/:photo_id"}, function() {
        this.route("comment", {path: "comments/:comment_id"});
      });
    });
    ```
    This argument will become the model context of the linked route:
  
    ```handlebars
    {{#link-to 'photoGallery.comment' aPhoto comment}}
      {{comment.body}}
    {{/link-to}}
    ```
  
    ```html
    <a href="/hamster-photos/42/comments/718">
      A+++ would snuggle again.
    </a>
    ```
  
    ### Supplying an explicit dynamic segment value
    If you don't have a model object available to pass to `{{link-to}}`,
    an optional string or integer argument can be passed for routes whose
    paths contain dynamic segments. This argument will become the value
    of the dynamic segment:
  
    ```javascript
    App.Router.map(function() {
      this.resource("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```
  
    ```handlebars
    {{#link-to 'photoGallery' aPhotoId}}
      {{aPhoto.title}}
    {{/link-to}}
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    When transitioning into the linked route, the `model` hook will
    be triggered with parameters including this passed identifier.
  
    ### Allowing Default Action
  
   By default the `{{link-to}}` helper prevents the default browser action
   by calling `preventDefault()` as this sort of action bubbling is normally
   handled internally and we do not want to take the browser to a new URL (for
   example).
  
   If you need to override this behavior specify `preventDefault=false` in
   your template:
  
    ```handlebars
    {{#link-to 'photoGallery' aPhotoId preventDefault=false}}
      {{aPhotoId.title}}
    {{/link-to}}
    ```
  
    ### Overriding attributes
    You can override any given property of the Ember.LinkComponent
    that is generated by the `{{link-to}}` helper by passing
    key/value pairs, like so:
  
    ```handlebars
    {{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}
      Uh-mazing!
    {{/link-to}}
    ```
  
    See [Ember.LinkComponent](/api/classes/Ember.LinkComponent.html) for a
    complete list of overrideable properties. Be sure to also
    check out inherited properties of `LinkComponent`.
  
    ### Overriding Application-wide Defaults
    ``{{link-to}}`` creates an instance of Ember.LinkComponent
    for rendering. To override options for your entire
    application, reopen Ember.LinkComponent and supply the
    desired values:
  
    ``` javascript
    Ember.LinkComponent.reopen({
      activeClass: "is-active",
      tagName: 'li'
    })
    ```
  
    It is also possible to override the default event in
    this manner:
  
    ``` javascript
    Ember.LinkComponent.reopen({
      eventName: 'customEventName'
    });
    ```
  
    @method link-to
    @for Ember.Handlebars.helpers
    @param {String} routeName
    @param {Object} [context]*
    @param [options] {Object} Handlebars key/value pairs of options, you can override any property of Ember.LinkComponent
    @return {String} HTML string
    @see {Ember.LinkComponent}
    @public
  */
  exports["default"] = {
    link: function (state, params, hash) {
      _emberMetalCore["default"].assert("You must provide one or more parameters to the link-to helper.", params.length);
    },

    render: function (morph, env, scope, params, hash, template, inverse, visitor) {
      var attrs = (0, _emberMetalMerge["default"])({}, (0, _emberMetalStreamsUtils.readHash)(hash));
      attrs.params = (0, _emberMetalStreamsUtils.readArray)(params);

      // Used for deprecations (to tell the user what view the deprecated syntax
      // was used in).
      attrs.view = env.view;

      // TODO: Remove once `hasBlock` is working again
      attrs.hasBlock = !!template;

      attrs.escaped = !morph.parseTextAsHTML;

      env.hooks.component(morph, env, scope, "-link-to", params, attrs, { "default": template }, visitor);
    },

    rerender: function (morph, env, scope, params, hash, template, inverse, visitor) {
      this.render(morph, env, scope, params, hash, template, inverse, visitor);
    }
  };

  /**
    See [link-to](/api/classes/Ember.Handlebars.helpers.html#method_link-to)
  
    @method linkTo
    @for Ember.Handlebars.helpers
    @deprecated
    @param {String} routeName
    @param {Object} [context]*
    @return {String} HTML string
    @private
  */
});
/**
@module ember
@submodule ember-routing-htmlbars
*/

// assert
enifed("ember-routing-htmlbars/keywords/render", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/error", "ember-metal/platform/create", "ember-metal/streams/utils", "ember-runtime/system/string", "ember-routing/system/generate_controller", "ember-htmlbars/node-managers/view-node-manager"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalError, _emberMetalPlatformCreate, _emberMetalStreamsUtils, _emberRuntimeSystemString, _emberRoutingSystemGenerate_controller, _emberHtmlbarsNodeManagersViewNodeManager) {
  exports["default"] = {
    willRender: function (renderNode, env) {
      if (env.view.ownerView._outlets) {
        // We make sure we will get dirtied when outlet state changes.
        env.view.ownerView._outlets.push(renderNode);
      }
    },

    setupState: function (prevState, env, scope, params, hash) {
      var name = params[0];

      _emberMetalCore["default"].assert("The first argument of {{render}} must be quoted, e.g. {{render \"sidebar\"}}.", typeof name === "string");

      return {
        parentView: scope.view,
        manager: prevState.manager,
        controller: prevState.controller,
        childOutletState: childOutletState(name, env)
      };
    },

    childEnv: function (state, env) {
      return env.childWithOutletState(state.childOutletState);
    },

    isStable: function (lastState, nextState) {
      return isStable(lastState.childOutletState, nextState.childOutletState);
    },

    isEmpty: function (state) {
      return false;
    },

    render: function (node, env, scope, params, hash, template, inverse, visitor) {
      var state = node.state;
      var name = params[0];
      var context = params[1];

      var container = env.container;

      // The render keyword presumes it can work without a router. This is really
      // only to satisfy the test:
      //
      //     {{view}} should not override class bindings defined on a child view"
      //
      var router = container.lookup("router:main");

      _emberMetalCore["default"].assert("The second argument of {{render}} must be a path, e.g. {{render \"post\" post}}.", params.length < 2 || (0, _emberMetalStreamsUtils.isStream)(params[1]));

      if (params.length === 1) {
        // use the singleton controller
        _emberMetalCore["default"].assert("You can only use the {{render}} helper once without a model object as " + "its second argument, as in {{render \"post\" post}}.", !router || !router._lookupActiveComponentNode(name));
      } else if (params.length !== 2) {
        throw new _emberMetalError["default"]("You must pass a templateName to render");
      }

      // # legacy namespace
      name = name.replace(/\//g, ".");
      // \ legacy slash as namespace support

      var templateName = "template:" + name;
      _emberMetalCore["default"].assert("You used `{{render '" + name + "'}}`, but '" + name + "' can not be " + "found as either a template or a view.", container._registry.has("view:" + name) || container._registry.has(templateName) || !!template);

      var view = container.lookup("view:" + name);
      if (!view) {
        view = container.lookup("view:default");
      }
      var viewHasTemplateSpecified = view && !!(0, _emberMetalProperty_get.get)(view, "template");
      if (!template && !viewHasTemplateSpecified) {
        template = container.lookup(templateName);
      }

      if (view) {
        view.ownerView = env.view.ownerView;
      }

      // provide controller override
      var controllerName;
      var controllerFullName;

      if (hash.controller) {
        controllerName = hash.controller;
        controllerFullName = "controller:" + controllerName;
        delete hash.controller;

        _emberMetalCore["default"].assert("The controller name you supplied '" + controllerName + "' " + "did not resolve to a controller.", container._registry.has(controllerFullName));
      } else {
        controllerName = name;
        controllerFullName = "controller:" + controllerName;
      }

      var parentController = (0, _emberMetalStreamsUtils.read)(scope.locals.controller);
      var controller;

      // choose name
      if (params.length > 1) {
        var factory = container.lookupFactory(controllerFullName) || (0, _emberRoutingSystemGenerate_controller.generateControllerFactory)(container, controllerName);

        controller = factory.create({
          model: (0, _emberMetalStreamsUtils.read)(context),
          parentController: parentController,
          target: parentController
        });

        node.addDestruction(controller);
      } else {
        controller = container.lookup(controllerFullName) || (0, _emberRoutingSystemGenerate_controller["default"])(container, controllerName);

        controller.setProperties({
          target: parentController,
          parentController: parentController
        });
      }

      if (view) {
        view.set("controller", controller);
      }
      state.controller = controller;

      hash.viewName = (0, _emberRuntimeSystemString.camelize)(name);

      // var state = node.state;
      // var parentView = scope.view;
      if (template && template.raw) {
        template = template.raw;
      }

      var options = {
        layout: null,
        self: controller
      };

      if (view) {
        options.component = view;
      }

      var nodeManager = _emberHtmlbarsNodeManagersViewNodeManager["default"].create(node, env, hash, options, state.parentView, null, null, template);
      state.manager = nodeManager;

      if (router && params.length === 1) {
        router._connectActiveComponentNode(name, nodeManager);
      }

      nodeManager.render(env, hash, visitor);
    },

    rerender: function (node, env, scope, params, hash, template, inverse, visitor) {
      var model = (0, _emberMetalStreamsUtils.read)(params[1]);
      node.state.controller.set("model", model);
    }
  };

  function childOutletState(name, env) {
    var topLevel = env.view.ownerView;
    if (!topLevel || !topLevel.outletState) {
      return;
    }

    var outletState = topLevel.outletState;
    if (!outletState.main) {
      return;
    }

    var selectedOutletState = outletState.main.outlets["__ember_orphans__"];
    if (!selectedOutletState) {
      return;
    }
    var matched = selectedOutletState.outlets[name];
    if (matched) {
      var childState = (0, _emberMetalPlatformCreate["default"])(null);
      childState[matched.render.outlet] = matched;
      matched.wasUsed = true;
      return childState;
    }
  }

  function isStable(a, b) {
    if (!a && !b) {
      return true;
    }
    if (!a || !b) {
      return false;
    }
    for (var outletName in a) {
      if (!isStableOutlet(a[outletName], b[outletName])) {
        return false;
      }
    }
    return true;
  }

  function isStableOutlet(a, b) {
    if (!a && !b) {
      return true;
    }
    if (!a || !b) {
      return false;
    }
    a = a.render;
    b = b.render;
    for (var key in a) {
      if (a.hasOwnProperty(key)) {
        // name is only here for logging & debugging. If two different
        // names result in otherwise identical states, they're still
        // identical.
        if (a[key] !== b[key] && key !== "name") {
          return false;
        }
      }
    }
    return true;
  }
});
// assert
enifed("ember-routing-views", ["exports", "ember-metal/core", "ember-routing-views/views/link", "ember-routing-views/views/outlet"], function (exports, _emberMetalCore, _emberRoutingViewsViewsLink, _emberRoutingViewsViewsOutlet) {

  _emberMetalCore["default"].LinkView = _emberRoutingViewsViewsLink.DeprecatedLinkView;
  _emberMetalCore["default"].LinkComponent = _emberRoutingViewsViewsLink["default"];
  _emberMetalCore["default"].OutletView = _emberRoutingViewsViewsOutlet.OutletView;
  if (_emberMetalCore["default"].FEATURES.isEnabled("ember-routing-core-outlet")) {
    _emberMetalCore["default"].CoreOutletView = _emberRoutingViewsViewsOutlet.CoreOutletView;
  }

  exports["default"] = _emberMetalCore["default"];
});
/**
@module ember
@submodule ember-routing-views
*/
enifed("ember-routing-views/views/link", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/computed", "ember-views/system/utils", "ember-views/views/component", "ember-runtime/inject", "ember-runtime/mixins/controller", "ember-htmlbars/templates/link-to"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalComputed, _emberViewsSystemUtils, _emberViewsViewsComponent, _emberRuntimeInject, _emberRuntimeMixinsController, _emberHtmlbarsTemplatesLinkTo) {
  _emberHtmlbarsTemplatesLinkTo["default"].meta.revision = "Ember@1.13.2";

  var linkComponentClassNameBindings = ["active", "loading", "disabled"];
  if (_emberMetalCore["default"].FEATURES.isEnabled("ember-routing-transitioning-classes")) {
    linkComponentClassNameBindings = ["active", "loading", "disabled", "transitioningIn", "transitioningOut"];
  }

  /**
    `Ember.LinkComponent` renders an element whose `click` event triggers a
    transition of the application's instance of `Ember.Router` to
    a supplied route by name.
  
    Instances of `LinkComponent` will most likely be created through
    the `link-to` Handlebars helper, but properties of this class
    can be overridden to customize application-wide behavior.
  
    @class LinkComponent
    @namespace Ember
    @extends Ember.Component
    @see {Handlebars.helpers.link-to}
    @private
  **/
  var LinkComponent = _emberViewsViewsComponent["default"].extend({
    defaultLayout: _emberHtmlbarsTemplatesLinkTo["default"],

    tagName: "a",

    /**
      @deprecated Use current-when instead.
      @property currentWhen
      @private
    */
    currentWhen: null,

    /**
      Used to determine when this LinkComponent is active.
       @property currentWhen
      @private
    */
    "current-when": null,

    /**
      Sets the `title` attribute of the `LinkComponent`'s HTML element.
       @property title
      @default null
      @private
    **/
    title: null,

    /**
      Sets the `rel` attribute of the `LinkComponent`'s HTML element.
       @property rel
      @default null
      @private
    **/
    rel: null,

    /**
      Sets the `tabindex` attribute of the `LinkComponent`'s HTML element.
       @property tabindex
      @default null
      @private
    **/
    tabindex: null,

    /**
      Sets the `target` attribute of the `LinkComponent`'s HTML element.
       @since 1.8.0
      @property target
      @default null
      @private
    **/
    target: null,

    /**
      The CSS class to apply to `LinkComponent`'s element when its `active`
      property is `true`.
       @property activeClass
      @type String
      @default active
      @private
    **/
    activeClass: "active",

    /**
      The CSS class to apply to `LinkComponent`'s element when its `loading`
      property is `true`.
       @property loadingClass
      @type String
      @default loading
      @private
    **/
    loadingClass: "loading",

    /**
      The CSS class to apply to a `LinkComponent`'s element when its `disabled`
      property is `true`.
       @property disabledClass
      @type String
      @default disabled
      @private
    **/
    disabledClass: "disabled",
    _isDisabled: false,

    /**
      Determines whether the `LinkComponent` will trigger routing via
      the `replaceWith` routing strategy.
       @property replace
      @type Boolean
      @default false
      @private
    **/
    replace: false,

    /**
      By default the `{{link-to}}` helper will bind to the `href` and
      `title` attributes. It's discouraged that you override these defaults,
      however you can push onto the array if needed.
       @property attributeBindings
      @type Array | String
      @default ['title', 'rel', 'tabindex', 'target']
       @private
    */
    attributeBindings: ["href", "title", "rel", "tabindex", "target"],

    /**
      By default the `{{link-to}}` helper will bind to the `active`, `loading`, and
      `disabled` classes. It is discouraged to override these directly.
       @property classNameBindings
      @type Array
      @default ['active', 'loading', 'disabled']
       @private
    */
    classNameBindings: linkComponentClassNameBindings,

    /**
      By default the `{{link-to}}` helper responds to the `click` event. You
      can override this globally by setting this property to your custom
      event name.
       This is particularly useful on mobile when one wants to avoid the 300ms
      click delay using some sort of custom `tap` event.
       @property eventName
      @type String
      @default click
      @private
    */
    eventName: "click",

    // this is doc'ed here so it shows up in the events
    // section of the API documentation, which is where
    // people will likely go looking for it.
    /**
      Triggers the `LinkComponent`'s routing behavior. If
      `eventName` is changed to a value other than `click`
      the routing behavior will trigger on that custom event
      instead.
       @event click
      @private
    */

    /**
      An overridable method called when LinkComponent objects are instantiated.
       Example:
       ```javascript
      App.MyLinkComponent = Ember.LinkComponent.extend({
        init: function() {
          this._super.apply(this, arguments);
          Ember.Logger.log('Event is ' + this.get('eventName'));
        }
      });
      ```
       NOTE: If you do override `init` for a framework class like `Ember.View` or
      `Ember.ArrayController`, be sure to call `this._super.apply(this, arguments)` in your
      `init` declaration! If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
       @method init
      @private
    */
    init: function () {
      this._super.apply(this, arguments);

      _emberMetalCore["default"].deprecate("Using currentWhen with {{link-to}} is deprecated in favor of `current-when`.", !this.currentWhen);

      // Map desired event name to invoke function
      var eventName = (0, _emberMetalProperty_get.get)(this, "eventName");
      this.on(eventName, this, this._invoke);
    },

    _routing: _emberRuntimeInject["default"].service("-routing"),

    /**
      Accessed as a classname binding to apply the `LinkComponent`'s `disabledClass`
      CSS `class` to the element when the link is disabled.
       When `true` interactions with the element will not trigger route changes.
      @property disabled
      @private
    */
    disabled: (0, _emberMetalComputed.computed)({
      get: function (key, value) {
        return false;
      },
      set: function (key, value) {
        if (value !== undefined) {
          this.set("_isDisabled", value);
        }

        return value ? (0, _emberMetalProperty_get.get)(this, "disabledClass") : false;
      }
    }),

    /**
      Accessed as a classname binding to apply the `LinkComponent`'s `activeClass`
      CSS `class` to the element when the link is active.
       A `LinkComponent` is considered active when its `currentWhen` property is `true`
      or the application's current route is the route the `LinkComponent` would trigger
      transitions into.
       The `currentWhen` property can match against multiple routes by separating
      route names using the ` ` (space) character.
       @property active
      @private
    */
    active: (0, _emberMetalComputed.computed)("attrs.params", "_routing.currentState", function computeLinkComponentActive() {
      var currentState = (0, _emberMetalProperty_get.get)(this, "_routing.currentState");
      return computeActive(this, currentState);
    }),

    willBeActive: (0, _emberMetalComputed.computed)("_routing.targetState", function () {
      var routing = (0, _emberMetalProperty_get.get)(this, "_routing");
      var targetState = (0, _emberMetalProperty_get.get)(routing, "targetState");
      if ((0, _emberMetalProperty_get.get)(routing, "currentState") === targetState) {
        return;
      }

      return !!computeActive(this, targetState);
    }),

    transitioningIn: (0, _emberMetalComputed.computed)("active", "willBeActive", function () {
      var willBeActive = (0, _emberMetalProperty_get.get)(this, "willBeActive");
      if (typeof willBeActive === "undefined") {
        return false;
      }

      return !(0, _emberMetalProperty_get.get)(this, "active") && willBeActive && "ember-transitioning-in";
    }),

    transitioningOut: (0, _emberMetalComputed.computed)("active", "willBeActive", function () {
      var willBeActive = (0, _emberMetalProperty_get.get)(this, "willBeActive");
      if (typeof willBeActive === "undefined") {
        return false;
      }

      return (0, _emberMetalProperty_get.get)(this, "active") && !willBeActive && "ember-transitioning-out";
    }),

    /**
      Event handler that invokes the link, activating the associated route.
       @private
      @method _invoke
      @param {Event} event
      @private
    */
    _invoke: function (event) {
      if (!(0, _emberViewsSystemUtils.isSimpleClick)(event)) {
        return true;
      }

      if (this.attrs.preventDefault !== false) {
        var targetAttribute = this.attrs.target;
        if (!targetAttribute || targetAttribute === "_self") {
          event.preventDefault();
        }
      }

      if (this.attrs.bubbles === false) {
        event.stopPropagation();
      }

      if ((0, _emberMetalProperty_get.get)(this, "_isDisabled")) {
        return false;
      }

      if ((0, _emberMetalProperty_get.get)(this, "loading")) {
        _emberMetalCore["default"].Logger.warn("This link-to is in an inactive loading state because at least one of its parameters presently has a null/undefined value, or the provided route name is invalid.");
        return false;
      }

      var targetAttribute2 = this.attrs.target;
      if (targetAttribute2 && targetAttribute2 !== "_self") {
        return false;
      }

      (0, _emberMetalProperty_get.get)(this, "_routing").transitionTo((0, _emberMetalProperty_get.get)(this, "targetRouteName"), (0, _emberMetalProperty_get.get)(this, "models"), (0, _emberMetalProperty_get.get)(this, "queryParams.values"), (0, _emberMetalProperty_get.get)(this, "attrs.replace"));
    },

    queryParams: null,

    /**
      Sets the element's `href` attribute to the url for
      the `LinkComponent`'s targeted route.
       If the `LinkComponent`'s `tagName` is changed to a value other
      than `a`, this property will be ignored.
       @property href
      @private
    */
    href: (0, _emberMetalComputed.computed)("models", "targetRouteName", "_routing.currentState", function computeLinkComponentHref() {

      if ((0, _emberMetalProperty_get.get)(this, "tagName") !== "a") {
        return;
      }

      var targetRouteName = (0, _emberMetalProperty_get.get)(this, "targetRouteName");
      var models = (0, _emberMetalProperty_get.get)(this, "models");

      if ((0, _emberMetalProperty_get.get)(this, "loading")) {
        return (0, _emberMetalProperty_get.get)(this, "loadingHref");
      }

      var routing = (0, _emberMetalProperty_get.get)(this, "_routing");
      return routing.generateURL(targetRouteName, models, (0, _emberMetalProperty_get.get)(this, "queryParams.values"));
    }),

    loading: (0, _emberMetalComputed.computed)("models", "targetRouteName", function () {
      var targetRouteName = (0, _emberMetalProperty_get.get)(this, "targetRouteName");
      var models = (0, _emberMetalProperty_get.get)(this, "models");

      if (!modelsAreLoaded(models) || targetRouteName == null) {
        return (0, _emberMetalProperty_get.get)(this, "loadingClass");
      }
    }),

    /**
      The default href value to use while a link-to is loading.
      Only applies when tagName is 'a'
       @property loadingHref
      @type String
      @default #
      @private
    */
    loadingHref: "#",

    willRender: function () {
      var queryParams;

      var attrs = this.attrs;

      // Do not mutate params in place
      var params = attrs.params.slice();

      _emberMetalCore["default"].assert("You must provide one or more parameters to the link-to helper.", params.length);

      var lastParam = params[params.length - 1];

      if (lastParam && lastParam.isQueryParams) {
        queryParams = params.pop();
      } else {
        queryParams = {};
      }

      if (attrs.disabledClass) {
        this.set("disabledClass", attrs.disabledClass);
      }

      if (attrs.activeClass) {
        this.set("activeClass", attrs.activeClass);
      }

      if (attrs.disabledWhen) {
        this.set("disabled", attrs.disabledWhen);
      }

      var currentWhen = attrs["current-when"];

      if (attrs.currentWhen) {
        _emberMetalCore["default"].deprecate("Using currentWhen with {{link-to}} is deprecated in favor of `current-when`.", !attrs.currentWhen);
        currentWhen = attrs.currentWhen;
      }

      if (currentWhen) {
        this.set("currentWhen", currentWhen);
      }

      // TODO: Change to built-in hasBlock once it's available
      if (!attrs.hasBlock) {
        this.set("linkTitle", params.shift());
      }

      if (attrs.loadingClass) {
        (0, _emberMetalProperty_set.set)(this, "loadingClass", attrs.loadingClass);
      }

      for (var i = 0; i < params.length; i++) {
        var value = params[i];

        while (_emberRuntimeMixinsController["default"].detect(value)) {
          _emberMetalCore["default"].deprecate("Providing `{{link-to}}` with a param that is wrapped in a controller is deprecated. Please update `" + attrs.view + "` to use `{{link-to \"post\" someController.model}}` instead.");
          value = value.get("model");
        }

        params[i] = value;
      }

      var targetRouteName = undefined;
      var models = [];
      var onlyQueryParamsSupplied = params.length === 0;

      if (onlyQueryParamsSupplied) {
        var appController = this.container.lookup("controller:application");
        if (appController) {
          targetRouteName = (0, _emberMetalProperty_get.get)(appController, "currentRouteName");
        }
      } else {
        targetRouteName = params[0];

        for (var i = 1; i < params.length; i++) {
          models.push(params[i]);
        }
      }

      var resolvedQueryParams = getResolvedQueryParams(queryParams, targetRouteName);

      this.set("targetRouteName", targetRouteName);
      this.set("models", models);
      this.set("queryParams", queryParams);
      this.set("resolvedQueryParams", resolvedQueryParams);
    }
  });

  LinkComponent.toString = function () {
    return "LinkComponent";
  };

  function computeActive(view, routerState) {
    if ((0, _emberMetalProperty_get.get)(view, "loading")) {
      return false;
    }

    var currentWhen = (0, _emberMetalProperty_get.get)(view, "currentWhen");
    var isCurrentWhenSpecified = !!currentWhen;
    currentWhen = currentWhen || (0, _emberMetalProperty_get.get)(view, "targetRouteName");
    currentWhen = currentWhen.split(" ");
    for (var i = 0, len = currentWhen.length; i < len; i++) {
      if (isActiveForRoute(view, currentWhen[i], isCurrentWhenSpecified, routerState)) {
        return (0, _emberMetalProperty_get.get)(view, "activeClass");
      }
    }

    return false;
  }

  function modelsAreLoaded(models) {
    for (var i = 0, l = models.length; i < l; i++) {
      if (models[i] == null) {
        return false;
      }
    }

    return true;
  }

  function isActiveForRoute(view, routeName, isCurrentWhenSpecified, routerState) {
    var service = (0, _emberMetalProperty_get.get)(view, "_routing");
    return service.isActiveForRoute((0, _emberMetalProperty_get.get)(view, "models"), (0, _emberMetalProperty_get.get)(view, "resolvedQueryParams"), routeName, routerState, isCurrentWhenSpecified);
  }

  function getResolvedQueryParams(queryParamsObject, targetRouteName) {
    var resolvedQueryParams = {};

    if (!queryParamsObject) {
      return resolvedQueryParams;
    }

    var values = queryParamsObject.values;
    for (var key in values) {
      if (!values.hasOwnProperty(key)) {
        continue;
      }
      resolvedQueryParams[key] = values[key];
    }

    return resolvedQueryParams;
  }

  /* DeprecatedLinkView - Start: TODO: Delete in Ember 2.0 */
  var DeprecatedLinkView = LinkComponent.extend({
    init: function () {
      _emberMetalCore["default"].deprecate("Ember.LinkView is deprecated. Please use Ember.LinkComponent.", false);
      this._super.apply(this, arguments);
    }
  });
  var originalReopen = DeprecatedLinkView.reopen;

  DeprecatedLinkView.reopen = function reopenWithDeprecation() {
    _emberMetalCore["default"].deprecate("Ember.LinkView is deprecated. Please use Ember.LinkComponent.", false);
    originalReopen.apply(this, arguments);
  };
  exports.DeprecatedLinkView = DeprecatedLinkView;

  /* DeprecatedLinkView - End*/

  exports["default"] = LinkComponent;
});
/**
@module ember
@submodule ember-routing-views
*/

// FEATURES, Logger, assert
enifed("ember-routing-views/views/outlet", ["exports", "ember-views/views/view", "ember-htmlbars/templates/top-level-view"], function (exports, _emberViewsViewsView, _emberHtmlbarsTemplatesTopLevelView) {
  _emberHtmlbarsTemplatesTopLevelView["default"].meta.revision = "Ember@1.13.2";

  var CoreOutletView = _emberViewsViewsView["default"].extend({
    defaultTemplate: _emberHtmlbarsTemplatesTopLevelView["default"],

    init: function () {
      this._super();
      this._outlets = [];
    },

    setOutletState: function (state) {
      this.outletState = { main: state };

      if (this.env) {
        this.env.outletState = this.outletState;
      }

      if (this.lastResult) {
        this.dirtyOutlets();
        this._outlets = [];

        this.scheduleRevalidate(null, null);
      }
    },

    dirtyOutlets: function () {
      // Dirty any render nodes that correspond to outlets
      for (var i = 0; i < this._outlets.length; i++) {
        this._outlets[i].isDirty = true;
      }
    }
  });

  exports.CoreOutletView = CoreOutletView;
  var OutletView = CoreOutletView.extend({ tagName: "" });
  exports.OutletView = OutletView;
});
/**
@module ember
@submodule ember-routing-views
*/
enifed("ember-routing", ["exports", "ember-metal/core", "ember-routing/ext/run_loop", "ember-routing/ext/controller", "ember-routing/location/api", "ember-routing/location/none_location", "ember-routing/location/hash_location", "ember-routing/location/history_location", "ember-routing/location/auto_location", "ember-routing/system/generate_controller", "ember-routing/system/controller_for", "ember-routing/system/dsl", "ember-routing/system/router", "ember-routing/system/route", "ember-routing/initializers/routing-service"], function (exports, _emberMetalCore, _emberRoutingExtRun_loop, _emberRoutingExtController, _emberRoutingLocationApi, _emberRoutingLocationNone_location, _emberRoutingLocationHash_location, _emberRoutingLocationHistory_location, _emberRoutingLocationAuto_location, _emberRoutingSystemGenerate_controller, _emberRoutingSystemController_for, _emberRoutingSystemDsl, _emberRoutingSystemRouter, _emberRoutingSystemRoute, _emberRoutingInitializersRoutingService) {

  _emberMetalCore["default"].Location = _emberRoutingLocationApi["default"];
  _emberMetalCore["default"].AutoLocation = _emberRoutingLocationAuto_location["default"];
  _emberMetalCore["default"].HashLocation = _emberRoutingLocationHash_location["default"];
  _emberMetalCore["default"].HistoryLocation = _emberRoutingLocationHistory_location["default"];
  _emberMetalCore["default"].NoneLocation = _emberRoutingLocationNone_location["default"];

  _emberMetalCore["default"].controllerFor = _emberRoutingSystemController_for["default"];
  _emberMetalCore["default"].generateControllerFactory = _emberRoutingSystemGenerate_controller.generateControllerFactory;
  _emberMetalCore["default"].generateController = _emberRoutingSystemGenerate_controller["default"];
  _emberMetalCore["default"].RouterDSL = _emberRoutingSystemDsl["default"];
  _emberMetalCore["default"].Router = _emberRoutingSystemRouter["default"];
  _emberMetalCore["default"].Route = _emberRoutingSystemRoute["default"];

  exports["default"] = _emberMetalCore["default"];
});
/**
@module ember
@submodule ember-routing
*/

// ES6TODO: Cleanup modules with side-effects below
enifed("ember-routing/ext/controller", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/computed", "ember-metal/utils", "ember-metal/merge", "ember-runtime/mixins/controller"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalComputed, _emberMetalUtils, _emberMetalMerge, _emberRuntimeMixinsController) {

  /**
  @module ember
  @submodule ember-routing
  */

  _emberRuntimeMixinsController["default"].reopen({
    concatenatedProperties: ["queryParams"],

    init: function () {
      this._super.apply(this, arguments);
      listenForQueryParamChanges(this);
    },

    /**
      Defines which query parameters the controller accepts.
      If you give the names ['category','page'] it will bind
      the values of these query parameters to the variables
      `this.category` and `this.page`
       @property queryParams
      @public
    */
    queryParams: null,

    /**
      @property _qpDelegate
      @private
    */
    _qpDelegate: null,

    /**
      @property _normalizedQueryParams
      @private
    */
    _normalizedQueryParams: (0, _emberMetalComputed.computed)(function () {
      var m = (0, _emberMetalUtils.meta)(this);
      if (m.proto !== this) {
        return (0, _emberMetalProperty_get.get)(m.proto, "_normalizedQueryParams");
      }

      var queryParams = (0, _emberMetalProperty_get.get)(this, "queryParams");
      if (queryParams._qpMap) {
        return queryParams._qpMap;
      }

      var qpMap = queryParams._qpMap = {};

      for (var i = 0, len = queryParams.length; i < len; ++i) {
        accumulateQueryParamDescriptors(queryParams[i], qpMap);
      }

      return qpMap;
    }),

    /**
      @property _cacheMeta
      @private
    */
    _cacheMeta: (0, _emberMetalComputed.computed)(function () {
      var m = (0, _emberMetalUtils.meta)(this);
      if (m.proto !== this) {
        return (0, _emberMetalProperty_get.get)(m.proto, "_cacheMeta");
      }

      var cacheMeta = {};
      var qpMap = (0, _emberMetalProperty_get.get)(this, "_normalizedQueryParams");
      for (var prop in qpMap) {
        if (!qpMap.hasOwnProperty(prop)) {
          continue;
        }

        var qp = qpMap[prop];
        var scope = qp.scope;
        var parts;

        if (scope === "controller") {
          parts = [];
        }

        cacheMeta[prop] = {
          parts: parts, // provided by route if 'model' scope
          values: null, // provided by route
          scope: scope,
          prefix: "",
          def: (0, _emberMetalProperty_get.get)(this, prop)
        };
      }

      return cacheMeta;
    }),

    /**
      @method _updateCacheParams
      @private
    */
    _updateCacheParams: function (params) {
      var cacheMeta = (0, _emberMetalProperty_get.get)(this, "_cacheMeta");
      for (var prop in cacheMeta) {
        if (!cacheMeta.hasOwnProperty(prop)) {
          continue;
        }
        var propMeta = cacheMeta[prop];
        propMeta.values = params;

        var cacheKey = this._calculateCacheKey(propMeta.prefix, propMeta.parts, propMeta.values);
        var cache = this._bucketCache;

        if (cache) {
          var value = cache.lookup(cacheKey, prop, propMeta.def);
          (0, _emberMetalProperty_set.set)(this, prop, value);
        }
      }
    },

    /**
      @method _qpChanged
      @private
    */
    _qpChanged: function (controller, _prop) {
      var prop = _prop.substr(0, _prop.length - 3);
      var cacheMeta = (0, _emberMetalProperty_get.get)(controller, "_cacheMeta");
      var propCache = cacheMeta[prop];
      var cacheKey = controller._calculateCacheKey(propCache.prefix || "", propCache.parts, propCache.values);
      var value = (0, _emberMetalProperty_get.get)(controller, prop);

      // 1. Update model-dep cache
      var cache = this._bucketCache;
      if (cache) {
        controller._bucketCache.stash(cacheKey, prop, value);
      }

      // 2. Notify a delegate (e.g. to fire a qp transition)
      var delegate = controller._qpDelegate;
      if (delegate) {
        delegate(controller, prop);
      }
    },

    /**
      @method _calculateCacheKey
      @private
    */
    _calculateCacheKey: function (prefix, _parts, values) {
      var parts = _parts || [];
      var suffixes = "";
      for (var i = 0, len = parts.length; i < len; ++i) {
        var part = parts[i];
        var value = (0, _emberMetalProperty_get.get)(values, part);
        suffixes += "::" + part + ":" + value;
      }
      return prefix + suffixes.replace(ALL_PERIODS_REGEX, "-");
    },

    /**
      Transition the application into another route. The route may
      be either a single route or route path:
       ```javascript
      aController.transitionToRoute('blogPosts');
      aController.transitionToRoute('blogPosts.recentEntries');
      ```
       Optionally supply a model for the route in question. The model
      will be serialized into the URL using the `serialize` hook of
      the route:
       ```javascript
      aController.transitionToRoute('blogPost', aPost);
      ```
       If a literal is passed (such as a number or a string), it will
      be treated as an identifier instead. In this case, the `model`
      hook of the route will be triggered:
       ```javascript
      aController.transitionToRoute('blogPost', 1);
      ```
       Multiple models will be applied last to first recursively up the
      resource tree.
       ```javascript
      App.Router.map(function() {
        this.resource('blogPost', {path:':blogPostId'}, function() {
          this.resource('blogComment', {path: ':blogCommentId'});
        });
      });
       aController.transitionToRoute('blogComment', aPost, aComment);
      aController.transitionToRoute('blogComment', 1, 13);
      ```
       It is also possible to pass a URL (a string that starts with a
      `/`). This is intended for testing and debugging purposes and
      should rarely be used in production code.
       ```javascript
      aController.transitionToRoute('/');
      aController.transitionToRoute('/blog/post/1/comment/13');
      aController.transitionToRoute('/blog/posts?sort=title');
      ```
       An options hash with a `queryParams` property may be provided as
      the final argument to add query parameters to the destination URL.
       ```javascript
      aController.transitionToRoute('blogPost', 1, {
        queryParams: {showComments: 'true'}
      });
       // if you just want to transition the query parameters without changing the route
      aController.transitionToRoute({queryParams: {sort: 'date'}});
      ```
       See also [replaceRoute](/api/classes/Ember.ControllerMixin.html#method_replaceRoute).
       @param {String} name the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used
        while transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @for Ember.ControllerMixin
      @method transitionToRoute
      @private
    */
    transitionToRoute: function () {
      // target may be either another controller or a router
      var target = (0, _emberMetalProperty_get.get)(this, "target");
      var method = target.transitionToRoute || target.transitionTo;
      return method.apply(target, arguments);
    },

    /**
      @deprecated
      @for Ember.ControllerMixin
      @method transitionTo
      @private
    */
    transitionTo: function () {
      _emberMetalCore["default"].deprecate("transitionTo is deprecated. Please use transitionToRoute.");
      return this.transitionToRoute.apply(this, arguments);
    },

    /**
      Transition into another route while replacing the current URL, if possible.
      This will replace the current history entry instead of adding a new one.
      Beside that, it is identical to `transitionToRoute` in all other respects.
       ```javascript
      aController.replaceRoute('blogPosts');
      aController.replaceRoute('blogPosts.recentEntries');
      ```
       Optionally supply a model for the route in question. The model
      will be serialized into the URL using the `serialize` hook of
      the route:
       ```javascript
      aController.replaceRoute('blogPost', aPost);
      ```
       If a literal is passed (such as a number or a string), it will
      be treated as an identifier instead. In this case, the `model`
      hook of the route will be triggered:
       ```javascript
      aController.replaceRoute('blogPost', 1);
      ```
       Multiple models will be applied last to first recursively up the
      resource tree.
       ```javascript
      App.Router.map(function() {
        this.resource('blogPost', {path:':blogPostId'}, function() {
          this.resource('blogComment', {path: ':blogCommentId'});
        });
      });
       aController.replaceRoute('blogComment', aPost, aComment);
      aController.replaceRoute('blogComment', 1, 13);
      ```
       It is also possible to pass a URL (a string that starts with a
      `/`). This is intended for testing and debugging purposes and
      should rarely be used in production code.
       ```javascript
      aController.replaceRoute('/');
      aController.replaceRoute('/blog/post/1/comment/13');
      ```
       @param {String} name the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used
      while transitioning to the route.
      @for Ember.ControllerMixin
      @method replaceRoute
      @private
    */
    replaceRoute: function () {
      // target may be either another controller or a router
      var target = (0, _emberMetalProperty_get.get)(this, "target");
      var method = target.replaceRoute || target.replaceWith;
      return method.apply(target, arguments);
    },

    /**
      @deprecated
      @for Ember.ControllerMixin
      @method replaceWith
      @private
    */
    replaceWith: function () {
      _emberMetalCore["default"].deprecate("replaceWith is deprecated. Please use replaceRoute.");
      return this.replaceRoute.apply(this, arguments);
    }
  });

  var ALL_PERIODS_REGEX = /\./g;

  function accumulateQueryParamDescriptors(_desc, accum) {
    var desc = _desc;
    var tmp;
    if (typeof desc === "string") {
      tmp = {};
      tmp[desc] = { as: null };
      desc = tmp;
    }

    for (var key in desc) {
      if (!desc.hasOwnProperty(key)) {
        return;
      }

      var singleDesc = desc[key];
      if (typeof singleDesc === "string") {
        singleDesc = { as: singleDesc };
      }

      tmp = accum[key] || { as: null, scope: "model" };
      (0, _emberMetalMerge["default"])(tmp, singleDesc);

      accum[key] = tmp;
    }
  }

  function listenForQueryParamChanges(controller) {
    var qpMap = (0, _emberMetalProperty_get.get)(controller, "_normalizedQueryParams");
    for (var prop in qpMap) {
      if (!qpMap.hasOwnProperty(prop)) {
        continue;
      }
      controller.addObserver(prop + ".[]", controller, controller._qpChanged);
    }
  }

  exports["default"] = _emberRuntimeMixinsController["default"];
});
// FEATURES, deprecate
enifed('ember-routing/ext/run_loop', ['exports', 'ember-metal/run_loop'], function (exports, _emberMetalRun_loop) {

  /**
  @module ember
  @submodule ember-views
  */

  // Add a new named queue after the 'actions' queue (where RSVP promises
  // resolve), which is used in router transitions to prevent unnecessary
  // loading state entry if all context promises resolve on the
  // 'actions' queue first.
  _emberMetalRun_loop["default"]._addQueue('routerTransitions', 'actions');
});
enifed("ember-routing/initializers/routing-service", ["exports", "ember-runtime/system/lazy_load", "ember-routing/services/routing"], function (exports, _emberRuntimeSystemLazy_load, _emberRoutingServicesRouting) {

  (0, _emberRuntimeSystemLazy_load.onLoad)("Ember.Application", function (Application) {
    Application.initializer({
      name: "routing-service",
      initialize: function (registry) {
        // Register the routing service...
        registry.register("service:-routing", _emberRoutingServicesRouting["default"]);
        // Then inject the app router into it
        registry.injection("service:-routing", "router", "router:main");
      }
    });
  });
});
enifed("ember-routing/location/api", ["exports", "ember-metal/core", "ember-metal/environment", "ember-routing/location/util"], function (exports, _emberMetalCore, _emberMetalEnvironment, _emberRoutingLocationUtil) {

  /**
  @module ember
  @submodule ember-routing
  */

  /**
    Ember.Location returns an instance of the correct implementation of
    the `location` API.
  
    ## Implementations
  
    You can pass an implementation name (`hash`, `history`, `none`) to force a
    particular implementation to be used in your application.
  
    ### HashLocation
  
    Using `HashLocation` results in URLs with a `#` (hash sign) separating the
    server side URL portion of the URL from the portion that is used by Ember.
    This relies upon the `hashchange` event existing in the browser.
  
    Example:
  
    ```javascript
    App.Router.map(function() {
      this.resource('posts', function() {
        this.route('new');
      });
    });
  
    App.Router.reopen({
      location: 'hash'
    });
    ```
  
    This will result in a posts.new url of `/#/posts/new`.
  
    ### HistoryLocation
  
    Using `HistoryLocation` results in URLs that are indistinguishable from a
    standard URL. This relies upon the browser's `history` API.
  
    Example:
  
    ```javascript
    App.Router.map(function() {
      this.resource('posts', function() {
        this.route('new');
      });
    });
  
    App.Router.reopen({
      location: 'history'
    });
    ```
  
    This will result in a posts.new url of `/posts/new`.
  
    Keep in mind that your server must serve the Ember app at all the routes you
    define.
  
    ### AutoLocation
  
    Using `AutoLocation`, the router will use the best Location class supported by
    the browser it is running in.
  
    Browsers that support the `history` API will use `HistoryLocation`, those that
    do not, but still support the `hashchange` event will use `HashLocation`, and
    in the rare case neither is supported will use `NoneLocation`.
  
    Example:
  
    ```javascript
    App.Router.map(function() {
      this.resource('posts', function() {
        this.route('new');
      });
    });
  
    App.Router.reopen({
      location: 'auto'
    });
    ```
  
    This will result in a posts.new url of `/posts/new` for modern browsers that
    support the `history` api or `/#/posts/new` for older ones, like Internet
    Explorer 9 and below.
  
    When a user visits a link to your application, they will be automatically
    upgraded or downgraded to the appropriate `Location` class, with the URL
    transformed accordingly, if needed.
  
    Keep in mind that since some of your users will use `HistoryLocation`, your
    server must serve the Ember app at all the routes you define.
  
    ### NoneLocation
  
    Using `NoneLocation` causes Ember to not store the applications URL state
    in the actual URL. This is generally used for testing purposes, and is one
    of the changes made when calling `App.setupForTesting()`.
  
    ## Location API
  
    Each location implementation must provide the following methods:
  
    * implementation: returns the string name used to reference the implementation.
    * getURL: returns the current URL.
    * setURL(path): sets the current URL.
    * replaceURL(path): replace the current URL (optional).
    * onUpdateURL(callback): triggers the callback when the URL changes.
    * formatURL(url): formats `url` to be placed into `href` attribute.
    * detect() (optional): instructs the location to do any feature detection
        necessary. If the location needs to redirect to a different URL, it
        can cancel routing by setting the `cancelRouterSetup` property on itself
        to `false`.
  
    Calling setURL or replaceURL will not trigger onUpdateURL callbacks.
  
    @class Location
    @namespace Ember
    @static
    @private
  */
  exports["default"] = {
    /**
     This is deprecated in favor of using the container to lookup the location
     implementation as desired.
      For example:
      ```javascript
     // Given a location registered as follows:
     container.register('location:history-test', HistoryTestLocation);
      // You could create a new instance via:
     container.lookup('location:history-test');
     ```
       @method create
      @param {Object} options
      @return {Object} an instance of an implementation of the `location` API
      @deprecated Use the container to lookup the location implementation that you
      need.
      @private
    */
    create: function (options) {
      var implementation = options && options.implementation;
      _emberMetalCore["default"].assert("Ember.Location.create: you must specify a 'implementation' option", !!implementation);

      var implementationClass = this.implementations[implementation];
      _emberMetalCore["default"].assert("Ember.Location.create: " + implementation + " is not a valid implementation", !!implementationClass);

      return implementationClass.create.apply(implementationClass, arguments);
    },

    /**
     This is deprecated in favor of using the container to register the
     location implementation as desired.
      Example:
      ```javascript
     Application.initializer({
      name: "history-test-location",
       initialize: function(container, application) {
        application.register('location:history-test', HistoryTestLocation);
      }
     });
     ```
      @method registerImplementation
     @param {String} name
     @param {Object} implementation of the `location` API
     @deprecated Register your custom location implementation with the
     container directly.
     @private
    */
    registerImplementation: function (name, implementation) {
      _emberMetalCore["default"].deprecate("Using the Ember.Location.registerImplementation is no longer supported. Register your custom location implementation with the container instead.", false);

      this.implementations[name] = implementation;
    },

    implementations: {},
    _location: _emberMetalEnvironment["default"].location,

    /**
      Returns the current `location.hash` by parsing location.href since browsers
      inconsistently URL-decode `location.hash`.
       https://bugzilla.mozilla.org/show_bug.cgi?id=483304
       @private
      @method getHash
      @since 1.4.0
    */
    _getHash: function () {
      return (0, _emberRoutingLocationUtil.getHash)(this.location);
    }
  };
});
// deprecate, assert
enifed("ember-routing/location/auto_location", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/utils", "ember-runtime/system/object", "ember-metal/environment", "ember-routing/location/util"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalUtils, _emberRuntimeSystemObject, _emberMetalEnvironment, _emberRoutingLocationUtil) {
  exports.getHistoryPath = getHistoryPath;
  exports.getHashPath = getHashPath;

  /**
  @module ember
  @submodule ember-routing
  */

  /**
    Ember.AutoLocation will select the best location option based off browser
    support with the priority order: history, hash, none.
  
    Clean pushState paths accessed by hashchange-only browsers will be redirected
    to the hash-equivalent and vice versa so future transitions are consistent.
  
    Keep in mind that since some of your users will use `HistoryLocation`, your
    server must serve the Ember app at all the routes you define.
  
    @class AutoLocation
    @namespace Ember
    @static
    @private
  */
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    /**
      @private
       The browser's `location` object. This is typically equivalent to
      `window.location`, but may be overridden for testing.
       @property location
      @default environment.location
    */
    location: _emberMetalEnvironment["default"].location,

    /**
      @private
       The browser's `history` object. This is typically equivalent to
      `window.history`, but may be overridden for testing.
       @since 1.5.1
      @property history
      @default environment.history
    */
    history: _emberMetalEnvironment["default"].history,

    /**
     @private
      The user agent's global variable. In browsers, this will be `window`.
      @since 1.11
     @property global
     @default environment.global
    */
    global: _emberMetalEnvironment["default"].global,

    /**
      @private
       The browser's `userAgent`. This is typically equivalent to
      `navigator.userAgent`, but may be overridden for testing.
       @since 1.5.1
      @property userAgent
      @default environment.history
    */
    userAgent: _emberMetalEnvironment["default"].userAgent,

    /**
      @private
       This property is used by the router to know whether to cancel the routing
      setup process, which is needed while we redirect the browser.
       @since 1.5.1
      @property cancelRouterSetup
      @default false
    */
    cancelRouterSetup: false,

    /**
      @private
       Will be pre-pended to path upon state change.
       @since 1.5.1
      @property rootURL
      @default '/'
    */
    rootURL: "/",

    /**
     Called by the router to instruct the location to do any feature detection
     necessary. In the case of AutoLocation, we detect whether to use history
     or hash concrete implementations.
      @private
    */
    detect: function () {
      var rootURL = this.rootURL;

      _emberMetalCore["default"].assert("rootURL must end with a trailing forward slash e.g. \"/app/\"", rootURL.charAt(rootURL.length - 1) === "/");

      var implementation = detectImplementation({
        location: this.location,
        history: this.history,
        userAgent: this.userAgent,
        rootURL: rootURL,
        documentMode: this.documentMode,
        global: this.global
      });

      if (implementation === false) {
        (0, _emberMetalProperty_set.set)(this, "cancelRouterSetup", true);
        implementation = "none";
      }

      var concrete = this.container.lookup("location:" + implementation);
      (0, _emberMetalProperty_set.set)(concrete, "rootURL", rootURL);

      _emberMetalCore["default"].assert("Could not find location '" + implementation + "'.", !!concrete);

      (0, _emberMetalProperty_set.set)(this, "concreteImplementation", concrete);
    },

    initState: delegateToConcreteImplementation("initState"),
    getURL: delegateToConcreteImplementation("getURL"),
    setURL: delegateToConcreteImplementation("setURL"),
    replaceURL: delegateToConcreteImplementation("replaceURL"),
    onUpdateURL: delegateToConcreteImplementation("onUpdateURL"),
    formatURL: delegateToConcreteImplementation("formatURL"),

    willDestroy: function () {
      var concreteImplementation = (0, _emberMetalProperty_get.get)(this, "concreteImplementation");

      if (concreteImplementation) {
        concreteImplementation.destroy();
      }
    }
  });

  function delegateToConcreteImplementation(methodName) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var concreteImplementation = (0, _emberMetalProperty_get.get)(this, "concreteImplementation");
      _emberMetalCore["default"].assert("AutoLocation's detect() method should be called before calling any other hooks.", !!concreteImplementation);
      return (0, _emberMetalUtils.tryInvoke)(concreteImplementation, methodName, args);
    };
  }

  /*
    Given the browser's `location`, `history` and `userAgent`, and a configured
    root URL, this function detects whether the browser supports the [History
    API](https://developer.mozilla.org/en-US/docs/Web/API/History) and returns a
    string representing the Location object to use based on its determination.
  
    For example, if the page loads in an evergreen browser, this function would
    return the string "history", meaning the history API and thus HistoryLocation
    should be used. If the page is loaded in IE8, it will return the string
    "hash," indicating that the History API should be simulated by manipulating the
    hash portion of the location.
  
  */

  function detectImplementation(options) {
    var location = options.location;
    var userAgent = options.userAgent;
    var history = options.history;
    var documentMode = options.documentMode;
    var global = options.global;
    var rootURL = options.rootURL;

    var implementation = "none";
    var cancelRouterSetup = false;
    var currentPath = (0, _emberRoutingLocationUtil.getFullPath)(location);

    if ((0, _emberRoutingLocationUtil.supportsHistory)(userAgent, history)) {
      var historyPath = getHistoryPath(rootURL, location);

      // If the browser supports history and we have a history path, we can use
      // the history location with no redirects.
      if (currentPath === historyPath) {
        return "history";
      } else {
        if (currentPath.substr(0, 2) === "/#") {
          history.replaceState({ path: historyPath }, null, historyPath);
          implementation = "history";
        } else {
          cancelRouterSetup = true;
          (0, _emberRoutingLocationUtil.replacePath)(location, historyPath);
        }
      }
    } else if ((0, _emberRoutingLocationUtil.supportsHashChange)(documentMode, global)) {
      var hashPath = getHashPath(rootURL, location);

      // Be sure we're using a hashed path, otherwise let's switch over it to so
      // we start off clean and consistent. We'll count an index path with no
      // hash as "good enough" as well.
      if (currentPath === hashPath || currentPath === "/" && hashPath === "/#/") {
        implementation = "hash";
      } else {
        // Our URL isn't in the expected hash-supported format, so we want to
        // cancel the router setup and replace the URL to start off clean
        cancelRouterSetup = true;
        (0, _emberRoutingLocationUtil.replacePath)(location, hashPath);
      }
    }

    if (cancelRouterSetup) {
      return false;
    }

    return implementation;
  }

  /**
    @private
  
    Returns the current path as it should appear for HistoryLocation supported
    browsers. This may very well differ from the real current path (e.g. if it
    starts off as a hashed URL)
  */

  function getHistoryPath(rootURL, location) {
    var path = (0, _emberRoutingLocationUtil.getPath)(location);
    var hash = (0, _emberRoutingLocationUtil.getHash)(location);
    var query = (0, _emberRoutingLocationUtil.getQuery)(location);
    var rootURLIndex = path.indexOf(rootURL);
    var routeHash, hashParts;

    _emberMetalCore["default"].assert("Path " + path + " does not start with the provided rootURL " + rootURL, rootURLIndex === 0);

    // By convention, Ember.js routes using HashLocation are required to start
    // with `#/`. Anything else should NOT be considered a route and should
    // be passed straight through, without transformation.
    if (hash.substr(0, 2) === "#/") {
      // There could be extra hash segments after the route
      hashParts = hash.substr(1).split("#");
      // The first one is always the route url
      routeHash = hashParts.shift();

      // If the path already has a trailing slash, remove the one
      // from the hashed route so we don't double up.
      if (path.slice(-1) === "/") {
        routeHash = routeHash.substr(1);
      }

      // This is the "expected" final order
      path = path + routeHash + query;

      if (hashParts.length) {
        path += "#" + hashParts.join("#");
      }
    } else {
      path = path + query + hash;
    }

    return path;
  }

  /**
    @private
  
    Returns the current path as it should appear for HashLocation supported
    browsers. This may very well differ from the real current path.
  
    @method _getHashPath
  */

  function getHashPath(rootURL, location) {
    var path = rootURL;
    var historyPath = getHistoryPath(rootURL, location);
    var routePath = historyPath.substr(rootURL.length);

    if (routePath !== "") {
      if (routePath.charAt(0) !== "/") {
        routePath = "/" + routePath;
      }

      path += "#" + routePath;
    }

    return path;
  }
});
// FEATURES
enifed("ember-routing/location/hash_location", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/run_loop", "ember-metal/utils", "ember-runtime/system/object", "ember-routing/location/api"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalRun_loop, _emberMetalUtils, _emberRuntimeSystemObject, _emberRoutingLocationApi) {

  /**
  @module ember
  @submodule ember-routing
  */

  /**
    `Ember.HashLocation` implements the location API using the browser's
    hash. At present, it relies on a `hashchange` event existing in the
    browser.
  
    @class HashLocation
    @namespace Ember
    @extends Ember.Object
    @private
  */
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    implementation: "hash",

    init: function () {
      (0, _emberMetalProperty_set.set)(this, "location", (0, _emberMetalProperty_get.get)(this, "_location") || window.location);
    },

    /**
      @private
       Returns normalized location.hash
       @since 1.5.1
      @method getHash
    */
    getHash: _emberRoutingLocationApi["default"]._getHash,

    /**
      Returns the normalized URL, constructed from `location.hash`.
       e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.
       By convention, hashed paths must begin with a forward slash, otherwise they
      are not treated as a path so we can distinguish intent.
       @private
      @method getURL
    */
    getURL: function () {
      var originalPath = this.getHash().substr(1);
      var outPath = originalPath;

      if (outPath.charAt(0) !== "/") {
        outPath = "/";

        // Only add the # if the path isn't empty.
        // We do NOT want `/#` since the ampersand
        // is only included (conventionally) when
        // the location.hash has a value
        if (originalPath) {
          outPath += "#" + originalPath;
        }
      }

      return outPath;
    },

    /**
      Set the `location.hash` and remembers what was set. This prevents
      `onUpdateURL` callbacks from triggering when the hash was set by
      `HashLocation`.
       @private
      @method setURL
      @param path {String}
    */
    setURL: function (path) {
      (0, _emberMetalProperty_get.get)(this, "location").hash = path;
      (0, _emberMetalProperty_set.set)(this, "lastSetURL", path);
    },

    /**
      Uses location.replace to update the url without a page reload
      or history modification.
       @private
      @method replaceURL
      @param path {String}
    */
    replaceURL: function (path) {
      (0, _emberMetalProperty_get.get)(this, "location").replace("#" + path);
      (0, _emberMetalProperty_set.set)(this, "lastSetURL", path);
    },

    /**
      Register a callback to be invoked when the hash changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
       @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL: function (callback) {
      var _this = this;

      var guid = (0, _emberMetalUtils.guidFor)(this);

      _emberMetalCore["default"].$(window).on("hashchange.ember-location-" + guid, function () {
        (0, _emberMetalRun_loop["default"])(function () {
          var path = _this.getURL();
          if ((0, _emberMetalProperty_get.get)(_this, "lastSetURL") === path) {
            return;
          }

          (0, _emberMetalProperty_set.set)(_this, "lastSetURL", null);

          callback(path);
        });
      });
    },

    /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
       This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
       @private
      @method formatURL
      @param url {String}
    */
    formatURL: function (url) {
      return "#" + url;
    },

    /**
      Cleans up the HashLocation event listener.
       @private
      @method willDestroy
    */
    willDestroy: function () {
      var guid = (0, _emberMetalUtils.guidFor)(this);

      _emberMetalCore["default"].$(window).off("hashchange.ember-location-" + guid);
    }
  });
});
enifed("ember-routing/location/history_location", ["exports", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/utils", "ember-runtime/system/object", "ember-routing/location/api", "ember-views/system/jquery"], function (exports, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalUtils, _emberRuntimeSystemObject, _emberRoutingLocationApi, _emberViewsSystemJquery) {

  /**
  @module ember
  @submodule ember-routing
  */

  var popstateFired = false;

  /**
    Ember.HistoryLocation implements the location API using the browser's
    history.pushState API.
  
    @class HistoryLocation
    @namespace Ember
    @extends Ember.Object
    @private
  */
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    implementation: "history",

    init: function () {
      (0, _emberMetalProperty_set.set)(this, "location", (0, _emberMetalProperty_get.get)(this, "location") || window.location);
      (0, _emberMetalProperty_set.set)(this, "baseURL", (0, _emberViewsSystemJquery["default"])("base").attr("href") || "");
    },

    /**
      Used to set state on first call to setURL
       @private
      @method initState
    */
    initState: function () {
      var history = (0, _emberMetalProperty_get.get)(this, "history") || window.history;
      (0, _emberMetalProperty_set.set)(this, "history", history);

      if (history && "state" in history) {
        this.supportsHistory = true;
      }

      this.replaceState(this.formatURL(this.getURL()));
    },

    /**
      Will be pre-pended to path upon state change
       @property rootURL
      @default '/'
      @private
    */
    rootURL: "/",

    /**
      Returns the current `location.pathname` without `rootURL` or `baseURL`
       @private
      @method getURL
      @return url {String}
    */
    getURL: function () {
      var rootURL = (0, _emberMetalProperty_get.get)(this, "rootURL");
      var location = (0, _emberMetalProperty_get.get)(this, "location");
      var path = location.pathname;
      var baseURL = (0, _emberMetalProperty_get.get)(this, "baseURL");

      rootURL = rootURL.replace(/\/$/, "");
      baseURL = baseURL.replace(/\/$/, "");

      var url = path.replace(baseURL, "").replace(rootURL, "");
      var search = location.search || "";

      url += search;
      url += this.getHash();

      return url;
    },

    /**
      Uses `history.pushState` to update the url without a page reload.
       @private
      @method setURL
      @param path {String}
    */
    setURL: function (path) {
      var state = this.getState();
      path = this.formatURL(path);

      if (!state || state.path !== path) {
        this.pushState(path);
      }
    },

    /**
      Uses `history.replaceState` to update the url without a page reload
      or history modification.
       @private
      @method replaceURL
      @param path {String}
    */
    replaceURL: function (path) {
      var state = this.getState();
      path = this.formatURL(path);

      if (!state || state.path !== path) {
        this.replaceState(path);
      }
    },

    /**
      Get the current `history.state`. Checks for if a polyfill is
      required and if so fetches this._historyState. The state returned
      from getState may be null if an iframe has changed a window's
      history.
       @private
      @method getState
      @return state {Object}
    */
    getState: function () {
      if (this.supportsHistory) {
        return (0, _emberMetalProperty_get.get)(this, "history").state;
      }

      return this._historyState;
    },

    /**
     Pushes a new state.
      @private
     @method pushState
     @param path {String}
    */
    pushState: function (path) {
      var state = { path: path };

      (0, _emberMetalProperty_get.get)(this, "history").pushState(state, null, path);

      this._historyState = state;

      // used for webkit workaround
      this._previousURL = this.getURL();
    },

    /**
     Replaces the current state.
      @private
     @method replaceState
     @param path {String}
    */
    replaceState: function (path) {
      var state = { path: path };
      (0, _emberMetalProperty_get.get)(this, "history").replaceState(state, null, path);

      this._historyState = state;

      // used for webkit workaround
      this._previousURL = this.getURL();
    },

    /**
      Register a callback to be invoked whenever the browser
      history changes, including using forward and back buttons.
       @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL: function (callback) {
      var _this = this;

      var guid = (0, _emberMetalUtils.guidFor)(this);

      (0, _emberViewsSystemJquery["default"])(window).on("popstate.ember-location-" + guid, function (e) {
        // Ignore initial page load popstate event in Chrome
        if (!popstateFired) {
          popstateFired = true;
          if (_this.getURL() === _this._previousURL) {
            return;
          }
        }
        callback(_this.getURL());
      });
    },

    /**
      Used when using `{{action}}` helper.  The url is always appended to the rootURL.
       @private
      @method formatURL
      @param url {String}
      @return formatted url {String}
    */
    formatURL: function (url) {
      var rootURL = (0, _emberMetalProperty_get.get)(this, "rootURL");
      var baseURL = (0, _emberMetalProperty_get.get)(this, "baseURL");

      if (url !== "") {
        rootURL = rootURL.replace(/\/$/, "");
        baseURL = baseURL.replace(/\/$/, "");
      } else if (baseURL.match(/^\//) && rootURL.match(/^\//)) {
        baseURL = baseURL.replace(/\/$/, "");
      }

      return baseURL + rootURL + url;
    },

    /**
      Cleans up the HistoryLocation event listener.
       @private
      @method willDestroy
    */
    willDestroy: function () {
      var guid = (0, _emberMetalUtils.guidFor)(this);

      (0, _emberViewsSystemJquery["default"])(window).off("popstate.ember-location-" + guid);
    },

    /**
      @private
       Returns normalized location.hash
       @method getHash
    */
    getHash: _emberRoutingLocationApi["default"]._getHash
  });
});
enifed("ember-routing/location/none_location", ["exports", "ember-metal/property_get", "ember-metal/property_set", "ember-runtime/system/object"], function (exports, _emberMetalProperty_get, _emberMetalProperty_set, _emberRuntimeSystemObject) {

  /**
  @module ember
  @submodule ember-routing
  */

  /**
    Ember.NoneLocation does not interact with the browser. It is useful for
    testing, or when you need to manage state with your Router, but temporarily
    don't want it to muck with the URL (for example when you embed your
    application in a larger page).
  
    @class NoneLocation
    @namespace Ember
    @extends Ember.Object
    @private
  */
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    implementation: "none",
    path: "",

    /**
      Returns the current path.
       @private
      @method getURL
      @return {String} path
    */
    getURL: function () {
      return (0, _emberMetalProperty_get.get)(this, "path");
    },

    /**
      Set the path and remembers what was set. Using this method
      to change the path will not invoke the `updateURL` callback.
       @private
      @method setURL
      @param path {String}
    */
    setURL: function (path) {
      (0, _emberMetalProperty_set.set)(this, "path", path);
    },

    /**
      Register a callback to be invoked when the path changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
       @private
      @method onUpdateURL
      @param callback {Function}
    */
    onUpdateURL: function (callback) {
      this.updateCallback = callback;
    },

    /**
      Sets the path and calls the `updateURL` callback.
       @private
      @method handleURL
      @param callback {Function}
    */
    handleURL: function (url) {
      (0, _emberMetalProperty_set.set)(this, "path", url);
      this.updateCallback(url);
    },

    /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
       This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
       @private
      @method formatURL
      @param url {String}
      @return {String} url
    */
    formatURL: function (url) {
      // The return value is not overly meaningful, but we do not want to throw
      // errors when test code renders templates containing {{action href=true}}
      // helpers.
      return url;
    }
  });
});
enifed('ember-routing/location/util', ['exports'], function (exports) {
  exports.getPath = getPath;
  exports.getQuery = getQuery;
  exports.getHash = getHash;
  exports.getFullPath = getFullPath;
  exports.getOrigin = getOrigin;
  exports.supportsHashChange = supportsHashChange;
  exports.supportsHistory = supportsHistory;
  exports.replacePath = replacePath;
  /**
    @private
  
    Returns the current `location.pathname`, normalized for IE inconsistencies.
  */

  function getPath(location) {
    var pathname = location.pathname;
    // Various versions of IE/Opera don't always return a leading slash
    if (pathname.charAt(0) !== '/') {
      pathname = '/' + pathname;
    }

    return pathname;
  }

  /**
    @private
  
    Returns the current `location.search`.
  */

  function getQuery(location) {
    return location.search;
  }

  /**
    @private
  
    Returns the current `location.hash` by parsing location.href since browsers
    inconsistently URL-decode `location.hash`.
  
    Should be passed the browser's `location` object as the first argument.
  
    https://bugzilla.mozilla.org/show_bug.cgi?id=483304
  */

  function getHash(location) {
    var href = location.href;
    var hashIndex = href.indexOf('#');

    if (hashIndex === -1) {
      return '';
    } else {
      return href.substr(hashIndex);
    }
  }

  function getFullPath(location) {
    return getPath(location) + getQuery(location) + getHash(location);
  }

  function getOrigin(location) {
    var origin = location.origin;

    // Older browsers, especially IE, don't have origin
    if (!origin) {
      origin = location.protocol + '//' + location.hostname;

      if (location.port) {
        origin += ':' + location.port;
      }
    }

    return origin;
  }

  /*
    `documentMode` only exist in Internet Explorer, and it's tested because IE8 running in
    IE7 compatibility mode claims to support `onhashchange` but actually does not.
  
    `global` is an object that may have an `onhashchange` property.
  
    @private
    @function supportsHashChange
  */

  function supportsHashChange(documentMode, global) {
    return 'onhashchange' in global && (documentMode === undefined || documentMode > 7);
  }

  /*
    `userAgent` is a user agent string. We use user agent testing here, because
    the stock Android browser is known to have buggy versions of the History API,
    in some Android versions.
  
    @private
    @function supportsHistory
  */

  function supportsHistory(userAgent, history) {
    // Boosted from Modernizr: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
    // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support
    // Unfortunately support is really buggy and there is no clean way to detect
    // these bugs, so we fall back to a user agent sniff :(

    // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies
    // itself as 'Mobile Safari' as well, nor Windows Phone.
    if ((userAgent.indexOf('Android 2.') !== -1 || userAgent.indexOf('Android 4.0') !== -1) && userAgent.indexOf('Mobile Safari') !== -1 && userAgent.indexOf('Chrome') === -1 && userAgent.indexOf('Windows Phone') === -1) {
      return false;
    }

    return !!(history && 'pushState' in history);
  }

  /**
    Replaces the current location, making sure we explicitly include the origin
    to prevent redirecting to a different origin.
  
    @private
  */

  function replacePath(location, path) {
    location.replace(getOrigin(location) + path);
  }
});
enifed("ember-routing/services/routing", ["exports", "ember-runtime/system/service", "ember-metal/property_get", "ember-metal/computed_macros", "ember-routing/utils", "ember-metal/keys", "ember-metal/merge"], function (exports, _emberRuntimeSystemService, _emberMetalProperty_get, _emberMetalComputed_macros, _emberRoutingUtils, _emberMetalKeys, _emberMetalMerge) {

  /**
    The Routing service is used by LinkComponent, and provides facilities for
    the component/view layer to interact with the router.
  
    While still private, this service can eventually be opened up, and provides
    the set of API needed for components to control routing without interacting
    with router internals.
  
    @private
    @class RoutingService
  */
  var RoutingService = _emberRuntimeSystemService["default"].extend({
    router: null,

    targetState: (0, _emberMetalComputed_macros.readOnly)("router.targetState"),
    currentState: (0, _emberMetalComputed_macros.readOnly)("router.currentState"),
    currentRouteName: (0, _emberMetalComputed_macros.readOnly)("router.currentRouteName"),

    availableRoutes: function () {
      return (0, _emberMetalKeys["default"])((0, _emberMetalProperty_get.get)(this, "router").router.recognizer.names);
    },

    hasRoute: function (routeName) {
      return (0, _emberMetalProperty_get.get)(this, "router").hasRoute(routeName);
    },

    transitionTo: function (routeName, models, queryParams, shouldReplace) {
      var router = (0, _emberMetalProperty_get.get)(this, "router");

      var transition = router._doTransition(routeName, models, queryParams);

      if (shouldReplace) {
        transition.method("replace");
      }
    },

    normalizeQueryParams: function (routeName, models, queryParams) {
      (0, _emberMetalProperty_get.get)(this, "router")._prepareQueryParams(routeName, models, queryParams);
    },

    generateURL: function (routeName, models, queryParams) {
      var router = (0, _emberMetalProperty_get.get)(this, "router");

      var visibleQueryParams = {};
      (0, _emberMetalMerge["default"])(visibleQueryParams, queryParams);

      this.normalizeQueryParams(routeName, models, visibleQueryParams);

      var args = (0, _emberRoutingUtils.routeArgs)(routeName, models, visibleQueryParams);
      return router.generate.apply(router, args);
    },

    isActiveForRoute: function (contexts, queryParams, routeName, routerState, isCurrentWhenSpecified) {
      var router = (0, _emberMetalProperty_get.get)(this, "router");

      var handlers = router.router.recognizer.handlersFor(routeName);
      var leafName = handlers[handlers.length - 1].handler;
      var maximumContexts = numberOfContextsAcceptedByHandler(routeName, handlers);

      // NOTE: any ugliness in the calculation of activeness is largely
      // due to the fact that we support automatic normalizing of
      // `resource` -> `resource.index`, even though there might be
      // dynamic segments / query params defined on `resource.index`
      // which complicates (and makes somewhat ambiguous) the calculation
      // of activeness for links that link to `resource` instead of
      // directly to `resource.index`.

      // if we don't have enough contexts revert back to full route name
      // this is because the leaf route will use one of the contexts
      if (contexts.length > maximumContexts) {
        routeName = leafName;
      }

      return routerState.isActiveIntent(routeName, contexts, queryParams, !isCurrentWhenSpecified);
    }
  });

  var numberOfContextsAcceptedByHandler = function (handler, handlerInfos) {
    var req = 0;
    for (var i = 0, l = handlerInfos.length; i < l; i++) {
      req = req + handlerInfos[i].names.length;
      if (handlerInfos[i].handler === handler) {
        break;
      }
    }

    return req;
  };

  exports["default"] = RoutingService;
});
/**
@module ember
@submodule ember-routing
*/
enifed("ember-routing/system/cache", ["exports", "ember-runtime/system/object"], function (exports, _emberRuntimeSystemObject) {
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    init: function () {
      this.cache = {};
    },
    has: function (bucketKey) {
      return bucketKey in this.cache;
    },
    stash: function (bucketKey, key, value) {
      var bucket = this.cache[bucketKey];
      if (!bucket) {
        bucket = this.cache[bucketKey] = {};
      }
      bucket[key] = value;
    },
    lookup: function (bucketKey, prop, defaultValue) {
      var cache = this.cache;
      if (!(bucketKey in cache)) {
        return defaultValue;
      }
      var bucket = cache[bucketKey];
      if (prop in bucket) {
        return bucket[prop];
      } else {
        return defaultValue;
      }
    },
    cache: null
  });
});
enifed("ember-routing/system/controller_for", ["exports"], function (exports) {
  exports["default"] = controllerFor;
  /**
  @module ember
  @submodule ember-routing
  */

  /**
  
    Finds a controller instance.
  
    @for Ember
    @method controllerFor
    @private
  */

  function controllerFor(container, controllerName, lookupOptions) {
    return container.lookup("controller:" + controllerName, lookupOptions);
  }
});
enifed("ember-routing/system/dsl", ["exports", "ember-metal/core", "ember-metal/array"], function (exports, _emberMetalCore, _emberMetalArray) {

  /**
  @module ember
  @submodule ember-routing
  */

  function DSL(name, options) {
    this.parent = name;
    this.enableLoadingSubstates = options && options.enableLoadingSubstates;
    this.matches = [];
  }
  exports["default"] = DSL;

  DSL.prototype = {
    route: function (name, options, callback) {
      var dummyErrorRoute = "/_unused_dummy_error_path_route_" + name + "/:error";
      if (arguments.length === 2 && typeof options === "function") {
        callback = options;
        options = {};
      }

      if (arguments.length === 1) {
        options = {};
      }

      var type = options.resetNamespace === true ? "resource" : "route";
      _emberMetalCore["default"].assert("'" + name + "' cannot be used as a " + type + " name.", (function () {
        if (options.overrideNameAssertion === true) {
          return true;
        }

        return _emberMetalArray.indexOf.call(["array", "basic", "object", "application"], name) === -1;
      })());

      if (_emberMetalCore["default"].FEATURES.isEnabled("ember-routing-named-substates")) {
        if (this.enableLoadingSubstates) {
          createRoute(this, "" + name + "_loading", { resetNamespace: options.resetNamespace });
          createRoute(this, "" + name + "_error", { path: dummyErrorRoute });
        }
      }

      if (callback) {
        var fullName = getFullName(this, name, options.resetNamespace);
        var dsl = new DSL(fullName, {
          enableLoadingSubstates: this.enableLoadingSubstates
        });

        createRoute(dsl, "loading");
        createRoute(dsl, "error", { path: dummyErrorRoute });

        callback.call(dsl);

        createRoute(this, name, options, dsl.generate());
      } else {
        createRoute(this, name, options);
      }
    },

    push: function (url, name, callback) {
      var parts = name.split(".");
      if (url === "" || url === "/" || parts[parts.length - 1] === "index") {
        this.explicitIndex = true;
      }

      this.matches.push([url, name, callback]);
    },

    resource: function (name, options, callback) {
      if (arguments.length === 2 && typeof options === "function") {
        callback = options;
        options = {};
      }

      if (arguments.length === 1) {
        options = {};
      }

      options.resetNamespace = true;
      this.route(name, options, callback);
    },

    generate: function () {
      var dslMatches = this.matches;

      if (!this.explicitIndex) {
        this.route("index", { path: "/" });
      }

      return function (match) {
        for (var i = 0, l = dslMatches.length; i < l; i++) {
          var dslMatch = dslMatches[i];
          match(dslMatch[0]).to(dslMatch[1], dslMatch[2]);
        }
      };
    }
  };

  function canNest(dsl) {
    return dsl.parent && dsl.parent !== "application";
  }

  function getFullName(dsl, name, resetNamespace) {
    if (canNest(dsl) && resetNamespace !== true) {
      return "" + dsl.parent + "." + name;
    } else {
      return name;
    }
  }

  function createRoute(dsl, name, options, callback) {
    options = options || {};

    var fullName = getFullName(dsl, name, options.resetNamespace);

    if (typeof options.path !== "string") {
      options.path = "/" + name;
    }

    dsl.push(options.path, fullName, callback);
  }

  DSL.map = function (callback) {
    var dsl = new DSL();
    callback.call(dsl);
    return dsl;
  };
});
// FEATURES, assert
enifed("ember-routing/system/generate_controller", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-runtime/utils"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberRuntimeUtils) {
  exports.generateControllerFactory = generateControllerFactory;
  exports["default"] = generateController;

  /**
  @module ember
  @submodule ember-routing
  */

  /**
    Generates a controller factory
  
    The type of the generated controller factory is derived
    from the context. If the context is an array an array controller
    is generated, if an object, an object controller otherwise, a basic
    controller is generated.
  
    You can customize your generated controllers by defining
    `App.ObjectController` or `App.ArrayController`.
  
    @for Ember
    @method generateControllerFactory
    @private
  */

  function generateControllerFactory(container, controllerName, context) {
    var Factory, fullName, factoryName, controllerType;

    if (context && (0, _emberRuntimeUtils.isArray)(context)) {
      controllerType = "array";
    } else if (context) {
      controllerType = "object";
    } else {
      controllerType = "basic";
    }

    factoryName = "controller:" + controllerType;

    Factory = container.lookupFactory(factoryName).extend({
      isGenerated: true,
      toString: function () {
        return "(generated " + controllerName + " controller)";
      }
    });

    fullName = "controller:" + controllerName;

    container._registry.register(fullName, Factory);

    return Factory;
  }

  /**
    Generates and instantiates a controller.
  
    The type of the generated controller factory is derived
    from the context. If the context is an array an array controller
    is generated, if an object, an object controller otherwise, a basic
    controller is generated.
  
    @for Ember
    @method generateController
    @private
    @since 1.3.0
  */

  function generateController(container, controllerName, context) {
    generateControllerFactory(container, controllerName, context);
    var fullName = "controller:" + controllerName;
    var instance = container.lookup(fullName);

    if ((0, _emberMetalProperty_get.get)(instance, "namespace.LOG_ACTIVE_GENERATION")) {
      _emberMetalCore["default"].Logger.info("generated -> " + fullName, { fullName: fullName });
    }

    return instance;
  }
});
// Logger
enifed('ember-routing/system/query_params', ['exports', 'ember-runtime/system/object'], function (exports, _emberRuntimeSystemObject) {
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    isQueryParams: true,
    values: null
  });
});
enifed("ember-routing/system/route", ["exports", "ember-metal/core", "ember-metal/error", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/get_properties", "ember-metal/enumerable_utils", "ember-metal/is_none", "ember-metal/computed", "ember-metal/merge", "ember-runtime/utils", "ember-metal/run_loop", "ember-metal/keys", "ember-runtime/copy", "ember-runtime/system/string", "ember-runtime/system/object", "ember-runtime/mixins/evented", "ember-runtime/mixins/action_handler", "ember-routing/system/generate_controller", "ember-routing/utils"], function (exports, _emberMetalCore, _emberMetalError, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalGet_properties, _emberMetalEnumerable_utils, _emberMetalIs_none, _emberMetalComputed, _emberMetalMerge, _emberRuntimeUtils, _emberMetalRun_loop, _emberMetalKeys, _emberRuntimeCopy, _emberRuntimeSystemString, _emberRuntimeSystemObject, _emberRuntimeMixinsEvented, _emberRuntimeMixinsAction_handler, _emberRoutingSystemGenerate_controller, _emberRoutingUtils) {

  var slice = Array.prototype.slice;

  function K() {
    return this;
  }

  /**
  @module ember
  @submodule ember-routing
  */

  /**
    The `Ember.Route` class is used to define individual routes. Refer to
    the [routing guide](http://emberjs.com/guides/routing/) for documentation.
  
    @class Route
    @namespace Ember
    @extends Ember.Object
    @uses Ember.ActionHandler
    @uses Ember.Evented
    @public
  */
  var Route = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsAction_handler["default"], _emberRuntimeMixinsEvented["default"], {
    /**
      Configuration hash for this route's queryParams. The possible
      configuration options and their defaults are as follows
      (assuming a query param whose controller property is `page`):
       ```javascript
      queryParams: {
        page: {
          // By default, controller query param properties don't
          // cause a full transition when they are changed, but
          // rather only cause the URL to update. Setting
          // `refreshModel` to true will cause an "in-place"
          // transition to occur, whereby the model hooks for
          // this route (and any child routes) will re-fire, allowing
          // you to reload models (e.g., from the server) using the
          // updated query param values.
          refreshModel: false,
           // By default, changes to controller query param properties
          // cause the URL to update via `pushState`, which means an
          // item will be added to the browser's history, allowing
          // you to use the back button to restore the app to the
          // previous state before the query param property was changed.
          // Setting `replace` to true will use `replaceState` (or its
          // hash location equivalent), which causes no browser history
          // item to be added. This options name and default value are
          // the same as the `link-to` helper's `replace` option.
          replace: false,
           // By default, the query param URL key is the same name as
          // the controller property name. Use `as` to specify a
          // different URL key.
          as: 'page'
        }
      }
      ```
       @property queryParams
      @for Ember.Route
      @type Object
      @public
    */
    queryParams: {},

    /**
      @private
       @property _qp
    */
    _qp: (0, _emberMetalComputed.computed)(function () {
      var _this = this;

      var controllerName = this.controllerName || this.routeName;
      var controllerClass = this.container.lookupFactory("controller:" + controllerName);

      if (!controllerClass) {
        return defaultQPMeta;
      }

      var controllerProto = controllerClass.proto();
      var qpProps = (0, _emberMetalProperty_get.get)(controllerProto, "_normalizedQueryParams");
      var cacheMeta = (0, _emberMetalProperty_get.get)(controllerProto, "_cacheMeta");

      var qps = [];
      var map = {};
      for (var propName in qpProps) {
        if (!qpProps.hasOwnProperty(propName)) {
          continue;
        }

        var desc = qpProps[propName];
        var urlKey = desc.as || this.serializeQueryParamKey(propName);
        var defaultValue = (0, _emberMetalProperty_get.get)(controllerProto, propName);

        if ((0, _emberRuntimeUtils.isArray)(defaultValue)) {
          defaultValue = _emberMetalCore["default"].A(defaultValue.slice());
        }

        var type = (0, _emberRuntimeUtils.typeOf)(defaultValue);
        var defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type);
        var fprop = "" + controllerName + ":" + propName;
        var qp = {
          def: defaultValue,
          sdef: defaultValueSerialized,
          type: type,
          urlKey: urlKey,
          prop: propName,
          fprop: fprop,
          ctrl: controllerName,
          cProto: controllerProto,
          svalue: defaultValueSerialized,
          cacheType: desc.scope,
          route: this,
          cacheMeta: cacheMeta[propName]
        };

        map[propName] = map[urlKey] = map[fprop] = qp;
        qps.push(qp);
      }

      return {
        qps: qps,
        map: map,
        states: {
          active: function (controller, prop) {
            return _this._activeQPChanged(controller, map[prop]);
          },
          allowOverrides: function (controller, prop) {
            return _this._updatingQPChanged(controller, map[prop]);
          }
        }
      };
    }),

    /**
      @private
       @property _names
    */
    _names: null,

    /**
      @private
       @method _stashNames
    */
    _stashNames: function (_handlerInfo, dynamicParent) {
      var handlerInfo = _handlerInfo;
      if (this._names) {
        return;
      }
      var names = this._names = handlerInfo._names;

      if (!names.length) {
        handlerInfo = dynamicParent;
        names = handlerInfo && handlerInfo._names || [];
      }

      var qps = (0, _emberMetalProperty_get.get)(this, "_qp.qps");
      var len = qps.length;

      var namePaths = new Array(names.length);
      for (var a = 0, nlen = names.length; a < nlen; ++a) {
        namePaths[a] = "" + handlerInfo.name + "." + names[a];
      }

      for (var i = 0; i < len; ++i) {
        var qp = qps[i];
        var cacheMeta = qp.cacheMeta;
        if (cacheMeta.scope === "model") {
          cacheMeta.parts = namePaths;
        }
        cacheMeta.prefix = qp.ctrl;
      }
    },

    /**
      @private
       @property _updateSerializedQPValue
    */
    _updateSerializedQPValue: function (controller, qp) {
      var value = (0, _emberMetalProperty_get.get)(controller, qp.prop);
      qp.svalue = this.serializeQueryParam(value, qp.urlKey, qp.type);
    },

    /**
      @private
       @property _activeQPChanged
    */
    _activeQPChanged: function (controller, qp) {
      var value = (0, _emberMetalProperty_get.get)(controller, qp.prop);
      this.router._queuedQPChanges[qp.fprop] = value;
      _emberMetalRun_loop["default"].once(this, this._fireQueryParamTransition);
    },

    /**
      @private
      @method _updatingQPChanged
    */
    _updatingQPChanged: function (controller, qp) {
      var router = this.router;
      if (!router._qpUpdates) {
        router._qpUpdates = {};
      }
      router._qpUpdates[qp.urlKey] = true;
    },

    mergedProperties: ["events", "queryParams"],

    /**
      Retrieves parameters, for current route using the state.params
      variable and getQueryParamsFor, using the supplied routeName.
       @method paramsFor
      @param {String} name
      @private
    */
    paramsFor: function (name) {
      var route = this.container.lookup("route:" + name);

      if (!route) {
        return {};
      }

      var transition = this.router.router.activeTransition;
      var state = transition ? transition.state : this.router.router.state;

      var params = {};
      (0, _emberMetalMerge["default"])(params, state.params[name]);
      (0, _emberMetalMerge["default"])(params, getQueryParamsFor(route, state));

      return params;
    },

    /**
      Serializes the query parameter key
       @method serializeQueryParamKey
      @param {String} controllerPropertyName
      @private
    */
    serializeQueryParamKey: function (controllerPropertyName) {
      return controllerPropertyName;
    },

    /**
      Serializes value of the query parameter based on defaultValueType
       @method serializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */
    serializeQueryParam: function (value, urlKey, defaultValueType) {
      // urlKey isn't used here, but anyone overriding
      // can use it to provide serialization specific
      // to a certain query param.
      if (defaultValueType === "array") {
        return JSON.stringify(value);
      }
      return "" + value;
    },

    /**
      Deserializes value of the query parameter based on defaultValueType
       @method deserializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */
    deserializeQueryParam: function (value, urlKey, defaultValueType) {
      // urlKey isn't used here, but anyone overriding
      // can use it to provide deserialization specific
      // to a certain query param.

      // Use the defaultValueType of the default value (the initial value assigned to a
      // controller query param property), to intelligently deserialize and cast.
      if (defaultValueType === "boolean") {
        return value === "true" ? true : false;
      } else if (defaultValueType === "number") {
        return Number(value).valueOf();
      } else if (defaultValueType === "array") {
        return _emberMetalCore["default"].A(JSON.parse(value));
      }
      return value;
    },

    /**
      @private
      @property _fireQueryParamTransition
    */
    _fireQueryParamTransition: function () {
      this.transitionTo({ queryParams: this.router._queuedQPChanges });
      this.router._queuedQPChanges = {};
    },

    /**
      @private
       @property _optionsForQueryParam
    */
    _optionsForQueryParam: function (qp) {
      return (0, _emberMetalProperty_get.get)(this, "queryParams." + qp.urlKey) || (0, _emberMetalProperty_get.get)(this, "queryParams." + qp.prop) || {};
    },

    /**
      A hook you can use to reset controller values either when the model
      changes or the route is exiting.
       ```javascript
      App.ArticlesRoute = Ember.Route.extend({
        // ...
         resetController: function (controller, isExiting, transition) {
          if (isExiting) {
            controller.set('page', 1);
          }
        }
      });
      ```
       @method resetController
      @param {Controller} controller instance
      @param {Boolean} isExiting
      @param {Object} transition
      @since 1.7.0
      @public
    */
    resetController: K,

    /**
      @private
       @method exit
    */
    exit: function () {
      this.deactivate();
      this.trigger("deactivate");
      this.teardownViews();
    },

    /**
      @private
       @method _reset
      @since 1.7.0
    */
    _reset: function (isExiting, transition) {
      var controller = this.controller;

      controller._qpDelegate = null;

      this.resetController(controller, isExiting, transition);
    },

    /**
      @private
       @method enter
    */
    enter: function () {
      this.connections = [];
      this.activate();
      this.trigger("activate");
    },

    /**
      The name of the view to use by default when rendering this routes template.
       When rendering a template, the route will, by default, determine the
      template and view to use from the name of the route itself. If you need to
      define a specific view, set this property.
       This is useful when multiple routes would benefit from using the same view
      because it doesn't require a custom `renderTemplate` method. For example,
      the following routes will all render using the `App.PostsListView` view:
       ```javascript
      var PostsList = Ember.Route.extend({
        viewName: 'postsList'
      });
       App.PostsIndexRoute = PostsList.extend();
      App.PostsArchivedRoute = PostsList.extend();
      ```
       @property viewName
      @type String
      @default null
      @since 1.4.0
      @public
    */
    viewName: null,

    /**
      The name of the template to use by default when rendering this routes
      template.
       This is similar with `viewName`, but is useful when you just want a custom
      template without a view.
       ```javascript
      var PostsList = Ember.Route.extend({
        templateName: 'posts/list'
      });
       App.PostsIndexRoute = PostsList.extend();
      App.PostsArchivedRoute = PostsList.extend();
      ```
       @property templateName
      @type String
      @default null
      @since 1.4.0
      @public
    */
    templateName: null,

    /**
      The name of the controller to associate with this route.
       By default, Ember will lookup a route's controller that matches the name
      of the route (i.e. `App.PostController` for `App.PostRoute`). However,
      if you would like to define a specific controller to use, you can do so
      using this property.
       This is useful in many ways, as the controller specified will be:
       * passed to the `setupController` method.
      * used as the controller for the view being rendered by the route.
      * returned from a call to `controllerFor` for the route.
       @property controllerName
      @type String
      @default null
      @since 1.4.0
      @public
    */
    controllerName: null,

    /**
      The `willTransition` action is fired at the beginning of any
      attempted transition with a `Transition` object as the sole
      argument. This action can be used for aborting, redirecting,
      or decorating the transition from the currently active routes.
       A good example is preventing navigation when a form is
      half-filled out:
       ```javascript
      App.ContactFormRoute = Ember.Route.extend({
        actions: {
          willTransition: function(transition) {
            if (this.controller.get('userHasEnteredData')) {
              this.controller.displayNavigationConfirm();
              transition.abort();
            }
          }
        }
      });
      ```
       You can also redirect elsewhere by calling
      `this.transitionTo('elsewhere')` from within `willTransition`.
      Note that `willTransition` will not be fired for the
      redirecting `transitionTo`, since `willTransition` doesn't
      fire when there is already a transition underway. If you want
      subsequent `willTransition` actions to fire for the redirecting
      transition, you must first explicitly call
      `transition.abort()`.
       @event willTransition
      @param {Transition} transition
      @public
    */

    /**
      The `didTransition` action is fired after a transition has
      successfully been completed. This occurs after the normal model
      hooks (`beforeModel`, `model`, `afterModel`, `setupController`)
      have resolved. The `didTransition` action has no arguments,
      however, it can be useful for tracking page views or resetting
      state on the controller.
       ```javascript
      App.LoginRoute = Ember.Route.extend({
        actions: {
          didTransition: function() {
            this.controller.get('errors.base').clear();
            return true; // Bubble the didTransition event
          }
        }
      });
      ```
       @event didTransition
      @since 1.2.0
      @public
    */

    /**
      The `loading` action is fired on the route when a route's `model`
      hook returns a promise that is not already resolved. The current
      `Transition` object is the first parameter and the route that
      triggered the loading event is the second parameter.
       ```javascript
      App.ApplicationRoute = Ember.Route.extend({
        actions: {
          loading: function(transition, route) {
            var view = Ember.View.create({
              classNames: ['app-loading']
            })
            .append();
             this.router.one('didTransition', function() {
              view.destroy();
            });
             return true; // Bubble the loading event
          }
        }
      });
      ```
       @event loading
      @param {Transition} transition
      @param {Ember.Route} route The route that triggered the loading event
      @since 1.2.0
      @public
    */

    /**
      When attempting to transition into a route, any of the hooks
      may return a promise that rejects, at which point an `error`
      action will be fired on the partially-entered routes, allowing
      for per-route error handling logic, or shared error handling
      logic defined on a parent route.
       Here is an example of an error handler that will be invoked
      for rejected promises from the various hooks on the route,
      as well as any unhandled errors from child routes:
       ```javascript
      App.AdminRoute = Ember.Route.extend({
        beforeModel: function() {
          return Ember.RSVP.reject('bad things!');
        },
         actions: {
          error: function(error, transition) {
            // Assuming we got here due to the error in `beforeModel`,
            // we can expect that error === "bad things!",
            // but a promise model rejecting would also
            // call this hook, as would any errors encountered
            // in `afterModel`.
             // The `error` hook is also provided the failed
            // `transition`, which can be stored and later
            // `.retry()`d if desired.
             this.transitionTo('login');
          }
        }
      });
      ```
       `error` actions that bubble up all the way to `ApplicationRoute`
      will fire a default error handler that logs the error. You can
      specify your own global default error handler by overriding the
      `error` handler on `ApplicationRoute`:
       ```javascript
      App.ApplicationRoute = Ember.Route.extend({
        actions: {
          error: function(error, transition) {
            this.controllerFor('banner').displayError(error.message);
          }
        }
      });
      ```
      @event error
      @param {Error} error
      @param {Transition} transition
      @public
    */

    /**
      This event is triggered when the router enters the route. It is
      not executed when the model for the route changes.
       ```javascript
      App.ApplicationRoute = Ember.Route.extend({
        collectAnalytics: function(){
          collectAnalytics();
        }.on('activate')
      });
      ```
       @event activate
      @since 1.9.0
      @public
    */

    /**
      This event is triggered when the router completely exits this
      route. It is not executed when the model for the route changes.
       ```javascript
      App.IndexRoute = Ember.Route.extend({
        trackPageLeaveAnalytics: function(){
          trackPageLeaveAnalytics();
        }.on('deactivate')
      });
      ```
       @event deactivate
      @since 1.9.0
      @public
    */

    /**
      The controller associated with this route.
       Example
       ```javascript
      App.FormRoute = Ember.Route.extend({
        actions: {
          willTransition: function(transition) {
            if (this.controller.get('userHasEnteredData') &&
                !confirm('Are you sure you want to abandon progress?')) {
              transition.abort();
            } else {
              // Bubble the `willTransition` action so that
              // parent routes can decide whether or not to abort.
              return true;
            }
          }
        }
      });
      ```
       @property controller
      @type Ember.Controller
      @since 1.6.0
      @private
    */

    _actions: {

      queryParamsDidChange: function (changed, totalPresent, removed) {
        var qpMap = (0, _emberMetalProperty_get.get)(this, "_qp").map;

        var totalChanged = (0, _emberMetalKeys["default"])(changed).concat((0, _emberMetalKeys["default"])(removed));
        for (var i = 0, len = totalChanged.length; i < len; ++i) {
          var qp = qpMap[totalChanged[i]];
          if (qp && (0, _emberMetalProperty_get.get)(this._optionsForQueryParam(qp), "refreshModel")) {
            this.refresh();
          }
        }

        return true;
      },

      finalizeQueryParamChange: function (params, finalParams, transition) {
        if (this.routeName !== "application") {
          return true;
        }

        // Transition object is absent for intermediate transitions.
        if (!transition) {
          return;
        }

        var handlerInfos = transition.state.handlerInfos;
        var router = this.router;
        var qpMeta = router._queryParamsFor(handlerInfos[handlerInfos.length - 1].name);
        var changes = router._qpUpdates;
        var replaceUrl;

        (0, _emberRoutingUtils.stashParamNames)(router, handlerInfos);

        for (var i = 0, len = qpMeta.qps.length; i < len; ++i) {
          var qp = qpMeta.qps[i];
          var route = qp.route;
          var controller = route.controller;
          var presentKey = qp.urlKey in params && qp.urlKey;

          // Do a reverse lookup to see if the changed query
          // param URL key corresponds to a QP property on
          // this controller.
          var value, svalue;
          if (changes && qp.urlKey in changes) {
            // Value updated in/before setupController
            value = (0, _emberMetalProperty_get.get)(controller, qp.prop);
            svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);
          } else {
            if (presentKey) {
              svalue = params[presentKey];
              value = route.deserializeQueryParam(svalue, qp.urlKey, qp.type);
            } else {
              // No QP provided; use default value.
              svalue = qp.sdef;
              value = copyDefaultValue(qp.def);
            }
          }

          controller._qpDelegate = null;

          var thisQueryParamChanged = svalue !== qp.svalue;
          if (thisQueryParamChanged) {
            if (transition.queryParamsOnly && replaceUrl !== false) {
              var options = route._optionsForQueryParam(qp);
              var replaceConfigValue = (0, _emberMetalProperty_get.get)(options, "replace");
              if (replaceConfigValue) {
                replaceUrl = true;
              } else if (replaceConfigValue === false) {
                // Explicit pushState wins over any other replaceStates.
                replaceUrl = false;
              }
            }

            (0, _emberMetalProperty_set.set)(controller, qp.prop, value);
          }

          // Stash current serialized value of controller.
          qp.svalue = svalue;

          var thisQueryParamHasDefaultValue = qp.sdef === svalue;
          if (!thisQueryParamHasDefaultValue) {
            finalParams.push({
              value: svalue,
              visible: true,
              key: presentKey || qp.urlKey
            });
          }
        }

        if (replaceUrl) {
          transition.method("replace");
        }

        (0, _emberMetalEnumerable_utils.forEach)(qpMeta.qps, function (qp) {
          var routeQpMeta = (0, _emberMetalProperty_get.get)(qp.route, "_qp");
          var finalizedController = qp.route.controller;
          finalizedController._qpDelegate = (0, _emberMetalProperty_get.get)(routeQpMeta, "states.active");
        });

        router._qpUpdates = null;
      }
    },

    /**
      @deprecated
       Please use `actions` instead.
      @method events
      @private
    */
    events: null,

    /**
      This hook is executed when the router completely exits this route. It is
      not executed when the model for the route changes.
       @method deactivate
      @private
    */
    deactivate: K,

    /**
      This hook is executed when the router enters the route. It is not executed
      when the model for the route changes.
       @method activate
      @private
    */
    activate: K,

    /**
      Transition the application into another route. The route may
      be either a single route or route path:
       ```javascript
      this.transitionTo('blogPosts');
      this.transitionTo('blogPosts.recentEntries');
      ```
       Optionally supply a model for the route in question. The model
      will be serialized into the URL using the `serialize` hook of
      the route:
       ```javascript
      this.transitionTo('blogPost', aPost);
      ```
       If a literal is passed (such as a number or a string), it will
      be treated as an identifier instead. In this case, the `model`
      hook of the route will be triggered:
       ```javascript
      this.transitionTo('blogPost', 1);
      ```
       Multiple models will be applied last to first recursively up the
      resource tree.
       ```javascript
      App.Router.map(function() {
        this.resource('blogPost', { path:':blogPostId' }, function() {
          this.resource('blogComment', { path: ':blogCommentId' });
        });
      });
       this.transitionTo('blogComment', aPost, aComment);
      this.transitionTo('blogComment', 1, 13);
      ```
       It is also possible to pass a URL (a string that starts with a
      `/`). This is intended for testing and debugging purposes and
      should rarely be used in production code.
       ```javascript
      this.transitionTo('/');
      this.transitionTo('/blog/post/1/comment/13');
      this.transitionTo('/blog/posts?sort=title');
      ```
       An options hash with a `queryParams` property may be provided as
      the final argument to add query parameters to the destination URL.
       ```javascript
      this.transitionTo('blogPost', 1, {
        queryParams: {showComments: 'true'}
      });
       // if you just want to transition the query parameters without changing the route
      this.transitionTo({queryParams: {sort: 'date'}});
      ```
       See also 'replaceWith'.
       Simple Transition Example
       ```javascript
      App.Router.map(function() {
        this.route('index');
        this.route('secret');
        this.route('fourOhFour', { path: '*:' });
      });
       App.IndexRoute = Ember.Route.extend({
        actions: {
          moveToSecret: function(context) {
            if (authorized()) {
              this.transitionTo('secret', context);
            } else {
              this.transitionTo('fourOhFour');
            }
          }
        }
      });
      ```
       Transition to a nested route
       ```javascript
      App.Router.map(function() {
        this.resource('articles', { path: '/articles' }, function() {
          this.route('new');
        });
      });
       App.IndexRoute = Ember.Route.extend({
        actions: {
          transitionToNewArticle: function() {
            this.transitionTo('articles.new');
          }
        }
      });
      ```
       Multiple Models Example
       ```javascript
      App.Router.map(function() {
        this.route('index');
         this.resource('breakfast', { path: ':breakfastId' }, function() {
          this.resource('cereal', { path: ':cerealId' });
        });
      });
       App.IndexRoute = Ember.Route.extend({
        actions: {
          moveToChocolateCereal: function() {
            var cereal = { cerealId: 'ChocolateYumminess' };
            var breakfast = { breakfastId: 'CerealAndMilk' };
             this.transitionTo('cereal', breakfast, cereal);
          }
        }
      });
      ```
       Nested Route with Query String Example
       ```javascript
      App.Router.map(function() {
        this.resource('fruits', function() {
          this.route('apples');
        });
      });
       App.IndexRoute = Ember.Route.extend({
        actions: {
          transitionToApples: function() {
            this.transitionTo('fruits.apples', {queryParams: {color: 'red'}});
          }
        }
      });
      ```
       @method transitionTo
      @param {String} name the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @private
    */
    transitionTo: function (name, context) {
      var router = this.router;
      return router.transitionTo.apply(router, arguments);
    },

    /**
      Perform a synchronous transition into another route without attempting
      to resolve promises, update the URL, or abort any currently active
      asynchronous transitions (i.e. regular transitions caused by
      `transitionTo` or URL changes).
       This method is handy for performing intermediate transitions on the
      way to a final destination route, and is called internally by the
      default implementations of the `error` and `loading` handlers.
       @method intermediateTransitionTo
      @param {String} name the name of the route
      @param {...Object} models the model(s) to be used while transitioning
      to the route.
      @since 1.2.0
      @private
     */
    intermediateTransitionTo: function () {
      var router = this.router;
      router.intermediateTransitionTo.apply(router, arguments);
    },

    /**
      Refresh the model on this route and any child routes, firing the
      `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
      to how routes are entered when transitioning in from other route.
      The current route params (e.g. `article_id`) will be passed in
      to the respective model hooks, and if a different model is returned,
      `setupController` and associated route hooks will re-fire as well.
       An example usage of this method is re-querying the server for the
      latest information using the same parameters as when the route
      was first entered.
       Note that this will cause `model` hooks to fire even on routes
      that were provided a model object when the route was initially
      entered.
       @method refresh
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.4.0
      @private
     */
    refresh: function () {
      return this.router.router.refresh(this);
    },

    /**
      Transition into another route while replacing the current URL, if possible.
      This will replace the current history entry instead of adding a new one.
      Beside that, it is identical to `transitionTo` in all other respects. See
      'transitionTo' for additional information regarding multiple models.
       Example
       ```javascript
      App.Router.map(function() {
        this.route('index');
        this.route('secret');
      });
       App.SecretRoute = Ember.Route.extend({
        afterModel: function() {
          if (!authorized()){
            this.replaceWith('index');
          }
        }
      });
      ```
       @method replaceWith
      @param {String} name the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @return {Transition} the transition object associated with this
        attempted transition
      @private
    */
    replaceWith: function () {
      var router = this.router;
      return router.replaceWith.apply(router, arguments);
    },

    /**
      Sends an action to the router, which will delegate it to the currently
      active route hierarchy per the bubbling rules explained under `actions`.
       Example
       ```javascript
      App.Router.map(function() {
        this.route('index');
      });
       App.ApplicationRoute = Ember.Route.extend({
        actions: {
          track: function(arg) {
            console.log(arg, 'was clicked');
          }
        }
      });
       App.IndexRoute = Ember.Route.extend({
        actions: {
          trackIfDebug: function(arg) {
            if (debug) {
              this.send('track', arg);
            }
          }
        }
      });
      ```
       @method send
      @param {String} name the name of the action to trigger
      @param {...*} args
      @public
    */
    send: function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (this.router || !_emberMetalCore["default"].testing) {
        var _router;

        (_router = this.router).send.apply(_router, args);
      } else {
        var name = args[0];
        args = slice.call(args, 1);
        var action = this._actions[name];
        if (action) {
          return this._actions[name].apply(this, args);
        }
      }
    },

    /**
      This hook is the entry point for router.js
       @private
      @method setup
    */
    setup: function (context, transition) {
      var controllerName = this.controllerName || this.routeName;
      var controller = this.controllerFor(controllerName, true);

      if (!controller) {
        controller = this.generateController(controllerName, context);
      }

      // Assign the route's controller so that it can more easily be
      // referenced in action handlers
      this.controller = controller;

      if (this.setupControllers) {
        _emberMetalCore["default"].deprecate("Ember.Route.setupControllers is deprecated. Please use Ember.Route.setupController(controller, model) instead.");
        this.setupControllers(controller, context);
      } else {
        var states = (0, _emberMetalProperty_get.get)(this, "_qp.states");
        if (transition) {
          // Update the model dep values used to calculate cache keys.
          (0, _emberRoutingUtils.stashParamNames)(this.router, transition.state.handlerInfos);
          controller._updateCacheParams(transition.params);
        }
        controller._qpDelegate = states.allowOverrides;

        if (transition) {
          var qpValues = getQueryParamsFor(this, transition.state);
          controller.setProperties(qpValues);
        }

        this.setupController(controller, context, transition);
      }

      if (this.renderTemplates) {
        _emberMetalCore["default"].deprecate("Ember.Route.renderTemplates is deprecated. Please use Ember.Route.renderTemplate(controller, model) instead.");
        this.renderTemplates(context);
      } else {
        this.renderTemplate(controller, context);
      }
    },

    /**
      This hook is the first of the route entry validation hooks
      called when an attempt is made to transition into a route
      or one of its children. It is called before `model` and
      `afterModel`, and is appropriate for cases when:
       1) A decision can be made to redirect elsewhere without
         needing to resolve the model first.
      2) Any async operations need to occur first before the
         model is attempted to be resolved.
       This hook is provided the current `transition` attempt
      as a parameter, which can be used to `.abort()` the transition,
      save it for a later `.retry()`, or retrieve values set
      on it from a previous hook. You can also just call
      `this.transitionTo` to another route to implicitly
      abort the `transition`.
       You can return a promise from this hook to pause the
      transition until the promise resolves (or rejects). This could
      be useful, for instance, for retrieving async code from
      the server that is required to enter a route.
       ```javascript
      App.PostRoute = Ember.Route.extend({
        beforeModel: function(transition) {
          if (!App.Post) {
            return Ember.$.getScript('/models/post.js');
          }
        }
      });
      ```
       If `App.Post` doesn't exist in the above example,
      `beforeModel` will use jQuery's `getScript`, which
      returns a promise that resolves after the server has
      successfully retrieved and executed the code from the
      server. Note that if an error were to occur, it would
      be passed to the `error` hook on `Ember.Route`, but
      it's also possible to handle errors specific to
      `beforeModel` right from within the hook (to distinguish
      from the shared error handling behavior of the `error`
      hook):
       ```javascript
      App.PostRoute = Ember.Route.extend({
        beforeModel: function(transition) {
          if (!App.Post) {
            var self = this;
            return Ember.$.getScript('post.js').then(null, function(e) {
              self.transitionTo('help');
               // Note that the above transitionTo will implicitly
              // halt the transition. If you were to return
              // nothing from this promise reject handler,
              // according to promise semantics, that would
              // convert the reject into a resolve and the
              // transition would continue. To propagate the
              // error so that it'd be handled by the `error`
              // hook, you would have to
              return Ember.RSVP.reject(e);
            });
          }
        }
      });
      ```
       @method beforeModel
      @param {Transition} transition
      @return {Promise} if the value returned from this hook is
        a promise, the transition will pause until the transition
        resolves. Otherwise, non-promise return values are not
        utilized in any way.
      @public
    */
    beforeModel: K,

    /**
      This hook is called after this route's model has resolved.
      It follows identical async/promise semantics to `beforeModel`
      but is provided the route's resolved model in addition to
      the `transition`, and is therefore suited to performing
      logic that can only take place after the model has already
      resolved.
       ```javascript
      App.PostsRoute = Ember.Route.extend({
        afterModel: function(posts, transition) {
          if (posts.get('length') === 1) {
            this.transitionTo('post.show', posts.get('firstObject'));
          }
        }
      });
      ```
       Refer to documentation for `beforeModel` for a description
      of transition-pausing semantics when a promise is returned
      from this hook.
       @method afterModel
      @param {Object} resolvedModel the value returned from `model`,
        or its resolved value if it was a promise
      @param {Transition} transition
      @return {Promise} if the value returned from this hook is
        a promise, the transition will pause until the transition
        resolves. Otherwise, non-promise return values are not
        utilized in any way.
      @public
     */
    afterModel: K,

    /**
      A hook you can implement to optionally redirect to another route.
       If you call `this.transitionTo` from inside of this hook, this route
      will not be entered in favor of the other hook.
       `redirect` and `afterModel` behave very similarly and are
      called almost at the same time, but they have an important
      distinction in the case that, from one of these hooks, a
      redirect into a child route of this route occurs: redirects
      from `afterModel` essentially invalidate the current attempt
      to enter this route, and will result in this route's `beforeModel`,
      `model`, and `afterModel` hooks being fired again within
      the new, redirecting transition. Redirects that occur within
      the `redirect` hook, on the other hand, will _not_ cause
      these hooks to be fired again the second time around; in
      other words, by the time the `redirect` hook has been called,
      both the resolved model and attempted entry into this route
      are considered to be fully validated.
       @method redirect
      @param {Object} model the model for this route
      @param {Transition} transition the transition object associated with the current transition
      @private
    */
    redirect: K,

    /**
      Called when the context is changed by router.js.
       @private
      @method contextDidChange
    */
    contextDidChange: function () {
      this.currentModel = this.context;
    },

    /**
      A hook you can implement to convert the URL into the model for
      this route.
       ```javascript
      App.Router.map(function() {
        this.resource('post', { path: '/posts/:post_id' });
      });
      ```
       The model for the `post` route is `store.find('post', params.post_id)`.
       By default, if your route has a dynamic segment ending in `_id`:
       * The model class is determined from the segment (`post_id`'s
        class is `App.Post`)
      * The find method is called on the model class with the value of
        the dynamic segment.
       Note that for routes with dynamic segments, this hook is not always
      executed. If the route is entered through a transition (e.g. when
      using the `link-to` Handlebars helper or the `transitionTo` method
      of routes), and a model context is already provided this hook
      is not called.
       A model context does not include a primitive string or number,
      which does cause the model hook to be called.
       Routes without dynamic segments will always execute the model hook.
       ```javascript
      // no dynamic segment, model hook always called
      this.transitionTo('posts');
       // model passed in, so model hook not called
      thePost = store.find('post', 1);
      this.transitionTo('post', thePost);
       // integer passed in, model hook is called
      this.transitionTo('post', 1);
      ```
        This hook follows the asynchronous/promise semantics
      described in the documentation for `beforeModel`. In particular,
      if a promise returned from `model` fails, the error will be
      handled by the `error` hook on `Ember.Route`.
       Example
       ```javascript
      App.PostRoute = Ember.Route.extend({
        model: function(params) {
          return this.store.find('post', params.post_id);
        }
      });
      ```
       @method model
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {Object|Promise} the model for this route. If
        a promise is returned, the transition will pause until
        the promise resolves, and the resolved value of the promise
        will be used as the model for this route.
      @public
    */
    model: function (params, transition) {
      var match, name, sawParams, value;

      var queryParams = (0, _emberMetalProperty_get.get)(this, "_qp.map");

      for (var prop in params) {
        if (prop === "queryParams" || queryParams && prop in queryParams) {
          continue;
        }

        if (match = prop.match(/^(.*)_id$/)) {
          name = match[1];
          value = params[prop];
        }
        sawParams = true;
      }

      if (!name && sawParams) {
        return (0, _emberRuntimeCopy["default"])(params);
      } else if (!name) {
        if (transition.resolveIndex < 1) {
          return;
        }

        var parentModel = transition.state.handlerInfos[transition.resolveIndex - 1].context;

        return parentModel;
      }

      return this.findModel(name, value);
    },

    /**
      @private
      @method deserialize
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {Object|Promise} the model for this route.
       Router.js hook.
     */
    deserialize: function (params, transition) {
      return this.model(this.paramsFor(this.routeName), transition);
    },

    /**
       @method findModel
      @param {String} type the model type
      @param {Object} value the value passed to find
      @private
    */
    findModel: function () {
      var store = (0, _emberMetalProperty_get.get)(this, "store");
      return store.find.apply(store, arguments);
    },

    /**
      Store property provides a hook for data persistence libraries to inject themselves.
       By default, this store property provides the exact same functionality previously
      in the model hook.
       Currently, the required interface is:
       `store.find(modelName, findArguments)`
       @method store
      @param {Object} store
      @private
    */
    store: (0, _emberMetalComputed.computed)(function () {
      var container = this.container;
      var routeName = this.routeName;
      var namespace = (0, _emberMetalProperty_get.get)(this, "router.namespace");

      return {
        find: function (name, value) {
          var modelClass = container.lookupFactory("model:" + name);

          _emberMetalCore["default"].assert("You used the dynamic segment " + name + "_id in your route " + routeName + ", but " + namespace + "." + (0, _emberRuntimeSystemString.classify)(name) + " did not exist and you did not override your route's `model` hook.", !!modelClass);

          if (!modelClass) {
            return;
          }

          _emberMetalCore["default"].assert("" + (0, _emberRuntimeSystemString.classify)(name) + " has no method `find`.", typeof modelClass.find === "function");

          return modelClass.find(value);
        }
      };
    }),

    /**
      A hook you can implement to convert the route's model into parameters
      for the URL.
       ```javascript
      App.Router.map(function() {
        this.resource('post', { path: '/posts/:post_id' });
      });
       App.PostRoute = Ember.Route.extend({
        model: function(params) {
          // the server returns `{ id: 12 }`
          return Ember.$.getJSON('/posts/' + params.post_id);
        },
         serialize: function(model) {
          // this will make the URL `/posts/12`
          return { post_id: model.id };
        }
      });
      ```
       The default `serialize` method will insert the model's `id` into the
      route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
      If the route has multiple dynamic segments or does not contain '_id', `serialize`
      will return `Ember.getProperties(model, params)`
       This method is called when `transitionTo` is called with a context
      in order to populate the URL.
       @method serialize
      @param {Object} model the route's model
      @param {Array} params an Array of parameter names for the current
        route (in the example, `['post_id']`.
      @return {Object} the serialized parameters
      @public
    */
    serialize: function (model, params) {
      if (params.length < 1) {
        return;
      }
      if (!model) {
        return;
      }

      var name = params[0];
      var object = {};

      if (params.length === 1) {
        if (name in model) {
          object[name] = (0, _emberMetalProperty_get.get)(model, name);
        } else if (/_id$/.test(name)) {
          object[name] = (0, _emberMetalProperty_get.get)(model, "id");
        }
      } else {
        object = (0, _emberMetalGet_properties["default"])(model, params);
      }

      return object;
    },

    /**
      A hook you can use to setup the controller for the current route.
       This method is called with the controller for the current route and the
      model supplied by the `model` hook.
       By default, the `setupController` hook sets the `model` property of
      the controller to the `model`.
       If you implement the `setupController` hook in your Route, it will
      prevent this default behavior. If you want to preserve that behavior
      when implementing your `setupController` function, make sure to call
      `_super`:
       ```javascript
      App.PhotosRoute = Ember.Route.extend({
        model: function() {
          return this.store.find('photo');
        },
         setupController: function (controller, model) {
          // Call _super for default behavior
          this._super(controller, model);
          // Implement your custom setup after
          this.controllerFor('application').set('showingPhotos', true);
        }
      });
      ```
       This means that your template will get a proxy for the model as its
      context, and you can act as though the model itself was the context.
       The provided controller will be one resolved based on the name
      of this route.
       If no explicit controller is defined, Ember will automatically create
      an appropriate controller for the model.
       * if the model is an `Ember.Array` (including record arrays from Ember
        Data), the controller is an `Ember.ArrayController`.
      * otherwise, the controller is an `Ember.ObjectController`.
       As an example, consider the router:
       ```javascript
      App.Router.map(function() {
        this.resource('post', { path: '/posts/:post_id' });
      });
      ```
       For the `post` route, a controller named `App.PostController` would
      be used if it is defined. If it is not defined, an `Ember.ObjectController`
      instance would be used.
       Example
       ```javascript
      App.PostRoute = Ember.Route.extend({
        setupController: function(controller, model) {
          controller.set('model', model);
        }
      });
      ```
       @method setupController
      @param {Controller} controller instance
      @param {Object} model
      @public
    */
    setupController: function (controller, context, transition) {
      if (controller && context !== undefined) {
        (0, _emberMetalProperty_set.set)(controller, "model", context);
      }
    },

    /**
      Returns the controller for a particular route or name.
       The controller instance must already have been created, either through entering the
      associated route or using `generateController`.
       ```javascript
      App.PostRoute = Ember.Route.extend({
        setupController: function(controller, post) {
          this._super(controller, post);
          this.controllerFor('posts').set('currentPost', post);
        }
      });
      ```
       @method controllerFor
      @param {String} name the name of the route or controller
      @return {Ember.Controller}
      @public
    */
    controllerFor: function (name, _skipAssert) {
      var container = this.container;
      var route = container.lookup("route:" + name);
      var controller;

      if (route && route.controllerName) {
        name = route.controllerName;
      }

      controller = container.lookup("controller:" + name);

      // NOTE: We're specifically checking that skipAssert is true, because according
      //   to the old API the second parameter was model. We do not want people who
      //   passed a model to skip the assertion.
      _emberMetalCore["default"].assert("The controller named '" + name + "' could not be found. Make sure that this route exists and has already been entered at least once. If you are accessing a controller not associated with a route, make sure the controller class is explicitly defined.", controller || _skipAssert === true);

      return controller;
    },

    /**
      Generates a controller for a route.
       If the optional model is passed then the controller type is determined automatically,
      e.g., an ArrayController for arrays.
       Example
       ```javascript
      App.PostRoute = Ember.Route.extend({
        setupController: function(controller, post) {
          this._super(controller, post);
          this.generateController('posts', post);
        }
      });
      ```
       @method generateController
      @param {String} name the name of the controller
      @param {Object} model the model to infer the type of the controller (optional)
      @private
    */
    generateController: function (name, model) {
      var container = this.container;

      model = model || this.modelFor(name);

      return (0, _emberRoutingSystemGenerate_controller["default"])(container, name, model);
    },

    /**
      Returns the model of a parent (or any ancestor) route
      in a route hierarchy.  During a transition, all routes
      must resolve a model object, and if a route
      needs access to a parent route's model in order to
      resolve a model (or just reuse the model from a parent),
      it can call `this.modelFor(theNameOfParentRoute)` to
      retrieve it.
       Example
       ```javascript
      App.Router.map(function() {
          this.resource('post', { path: '/post/:post_id' }, function() {
              this.resource('comments');
          });
      });
       App.CommentsRoute = Ember.Route.extend({
          afterModel: function() {
              this.set('post', this.modelFor('post'));
          }
      });
      ```
       @method modelFor
      @param {String} name the name of the route
      @return {Object} the model object
      @private
    */
    modelFor: function (name) {
      var route = this.container.lookup("route:" + name);
      var transition = this.router ? this.router.router.activeTransition : null;

      // If we are mid-transition, we want to try and look up
      // resolved parent contexts on the current transitionEvent.
      if (transition) {
        var modelLookupName = route && route.routeName || name;
        if (transition.resolvedModels.hasOwnProperty(modelLookupName)) {
          return transition.resolvedModels[modelLookupName];
        }
      }

      return route && route.currentModel;
    },

    /**
      A hook you can use to render the template for the current route.
       This method is called with the controller for the current route and the
      model supplied by the `model` hook. By default, it renders the route's
      template, configured with the controller for the route.
       This method can be overridden to set up and render additional or
      alternative templates.
       ```javascript
      App.PostsRoute = Ember.Route.extend({
        renderTemplate: function(controller, model) {
          var favController = this.controllerFor('favoritePost');
           // Render the `favoritePost` template into
          // the outlet `posts`, and display the `favoritePost`
          // controller.
          this.render('favoritePost', {
            outlet: 'posts',
            controller: favController
          });
        }
      });
      ```
       @method renderTemplate
      @param {Object} controller the route's controller
      @param {Object} model the route's model
      @private
    */
    renderTemplate: function (controller, model) {
      this.render();
    },

    /**
      `render` is used to render a template into a region of another template
      (indicated by an `{{outlet}}`). `render` is used both during the entry
      phase of routing (via the `renderTemplate` hook) and later in response to
      user interaction.
       For example, given the following minimal router and templates:
       ```javascript
      Router.map(function() {
        this.resource('photos');
      });
      ```
       ```handlebars
      <!-- application.hbs -->
      <div class='something-in-the-app-hbs'>
        {{outlet "anOutletName"}}
      </div>
      ```
       ```handlebars
      <!-- photos.hbs -->
      <h1>Photos</h1>
      ```
       You can render `photos.hbs` into the `"anOutletName"` outlet of
      `application.hbs` by calling `render`:
       ```javascript
      // posts route
      Ember.Route.extend({
        renderTemplate: function() {
          this.render('photos', {
            into: 'application',
            outlet: 'anOutletName'
          })
        }
      });
      ```
       `render` additionally allows you to supply which `view`, `controller`, and
      `model` objects should be loaded and associated with the rendered template.
        ```javascript
      // posts route
      Ember.Route.extend({
        renderTemplate: function(controller, model){
          this.render('posts', {    // the template to render, referenced by name
            into: 'application',    // the template to render into, referenced by name
            outlet: 'anOutletName', // the outlet inside `options.template` to render into.
            view: 'aViewName',      // the view to use for this template, referenced by name
            controller: 'someControllerName', // the controller to use for this template, referenced by name
            model: model            // the model to set on `options.controller`.
          })
        }
      });
      ```
       The string values provided for the template name, view, and controller
      will eventually pass through to the resolver for lookup. See
      Ember.Resolver for how these are mapped to JavaScript objects in your
      application.
       Not all options need to be passed to `render`. Default values will be used
      based on the name of the route specified in the router or the Route's
      `controllerName`, `viewName` and `templateName` properties.
       For example:
       ```javascript
      // router
      Router.map(function() {
        this.route('index');
        this.resource('post', { path: '/posts/:post_id' });
      });
      ```
       ```javascript
      // post route
      PostRoute = App.Route.extend({
        renderTemplate: function() {
          this.render(); // all defaults apply
        }
      });
      ```
       The name of the `PostRoute`, defined by the router, is `post`.
       The following equivalent default options will be applied when
      the Route calls `render`:
       ```javascript
      //
      this.render('post', {  // the template name associated with 'post' Route
        into: 'application', // the parent route to 'post' Route
        outlet: 'main',      // {{outlet}} and {{outlet 'main' are synonymous}},
        view: 'post',        // the view associated with the 'post' Route
        controller: 'post',  // the controller associated with the 'post' Route
      })
      ```
       By default the controller's `model` will be the route's model, so it does not
      need to be passed unless you wish to change which model is being used.
       @method render
      @param {String} name the name of the template to render
      @param {Object} [options] the options
      @param {String} [options.into] the template to render into,
                      referenced by name. Defaults to the parent template
      @param {String} [options.outlet] the outlet inside `options.template` to render into.
                      Defaults to 'main'
      @param {String|Object} [options.controller] the controller to use for this template,
                      referenced by name or as a controller instance. Defaults to the Route's paired controller
      @param {Object} [options.model] the model object to set on `options.controller`.
                      Defaults to the return value of the Route's model hook
      @public
    */
    render: function (_name, options) {
      _emberMetalCore["default"].assert("The name in the given arguments is undefined", arguments.length > 0 ? !(0, _emberMetalIs_none["default"])(arguments[0]) : true);

      var namePassed = typeof _name === "string" && !!_name;
      var isDefaultRender = arguments.length === 0 || _emberMetalCore["default"].isEmpty(arguments[0]);
      var name;

      if (typeof _name === "object" && !options) {
        name = this.routeName;
        options = _name;
      } else {
        name = _name;
      }

      var renderOptions = buildRenderOptions(this, namePassed, isDefaultRender, name, options);
      this.connections.push(renderOptions);
      _emberMetalRun_loop["default"].once(this.router, "_setOutlets");
    },

    /**
      Disconnects a view that has been rendered into an outlet.
       You may pass any or all of the following options to `disconnectOutlet`:
       * `outlet`: the name of the outlet to clear (default: 'main')
      * `parentView`: the name of the view containing the outlet to clear
         (default: the view rendered by the parent route)
       Example:
       ```javascript
      App.ApplicationRoute = App.Route.extend({
        actions: {
          showModal: function(evt) {
            this.render(evt.modalName, {
              outlet: 'modal',
              into: 'application'
            });
          },
          hideModal: function(evt) {
            this.disconnectOutlet({
              outlet: 'modal',
              parentView: 'application'
            });
          }
        }
      });
      ```
       Alternatively, you can pass the `outlet` name directly as a string.
       Example:
       ```javascript
      hideModal: function(evt) {
        this.disconnectOutlet('modal');
      }
      ```
       @method disconnectOutlet
      @param {Object|String} options the options hash or outlet name
      @private
    */
    disconnectOutlet: function (options) {
      var outletName;
      var parentView;
      if (!options || typeof options === "string") {
        outletName = options;
      } else {
        outletName = options.outlet;
        parentView = options.parentView;
      }
      parentView = parentView && parentView.replace(/\//g, ".");
      outletName = outletName || "main";
      this._disconnectOutlet(outletName, parentView);
      for (var i = 0; i < this.router.router.currentHandlerInfos.length; i++) {
        // This non-local state munging is sadly necessary to maintain
        // backward compatibility with our existing semantics, which allow
        // any route to disconnectOutlet things originally rendered by any
        // other route. This should all get cut in 2.0.
        this.router.router.currentHandlerInfos[i].handler._disconnectOutlet(outletName, parentView);
      }
    },

    _disconnectOutlet: function (outletName, parentView) {
      var parent = parentRoute(this);
      if (parent && parentView === parent.routeName) {
        parentView = undefined;
      }
      for (var i = 0; i < this.connections.length; i++) {
        var connection = this.connections[i];
        if (connection.outlet === outletName && connection.into === parentView) {
          // This neuters the disconnected outlet such that it doesn't
          // render anything, but it leaves an entry in the outlet
          // hierarchy so that any existing other renders that target it
          // don't suddenly blow up. They will still stick themselves
          // into its outlets, which won't render anywhere. All of this
          // statefulness should get the machete in 2.0.
          this.connections[i] = {
            into: connection.into,
            outlet: connection.outlet,
            name: connection.name
          };
          _emberMetalRun_loop["default"].once(this.router, "_setOutlets");
        }
      }
    },

    willDestroy: function () {
      this.teardownViews();
    },

    /**
      @private
       @method teardownViews
    */
    teardownViews: function () {
      if (this.connections && this.connections.length > 0) {
        this.connections = [];
        _emberMetalRun_loop["default"].once(this.router, "_setOutlets");
      }
    }
  });

  Route.reopenClass({
    isRouteFactory: true
  });

  var defaultQPMeta = {
    qps: [],
    map: {},
    states: {}
  };

  function parentRoute(route) {
    var handlerInfo = handlerInfoFor(route, route.router.router.state.handlerInfos, -1);
    return handlerInfo && handlerInfo.handler;
  }

  function handlerInfoFor(route, handlerInfos, _offset) {
    if (!handlerInfos) {
      return;
    }

    var offset = _offset || 0;
    var current;
    for (var i = 0, l = handlerInfos.length; i < l; i++) {
      current = handlerInfos[i].handler;
      if (current === route) {
        return handlerInfos[i + offset];
      }
    }
  }

  function buildRenderOptions(route, namePassed, isDefaultRender, name, options) {
    var controller = options && options.controller;
    var templateName;
    var viewName;
    var ViewClass;
    var template;
    var LOG_VIEW_LOOKUPS = (0, _emberMetalProperty_get.get)(route.router, "namespace.LOG_VIEW_LOOKUPS");
    var into = options && options.into && options.into.replace(/\//g, ".");
    var outlet = options && options.outlet || "main";

    if (name) {
      name = name.replace(/\//g, ".");
      templateName = name;
    } else {
      name = route.routeName;
      templateName = route.templateName || name;
    }

    if (!controller) {
      if (namePassed) {
        controller = route.container.lookup("controller:" + name) || route.controllerName || route.routeName;
      } else {
        controller = route.controllerName || route.container.lookup("controller:" + name);
      }
    }

    if (typeof controller === "string") {
      var controllerName = controller;
      controller = route.container.lookup("controller:" + controllerName);
      if (!controller) {
        throw new _emberMetalError["default"]("You passed `controller: '" + controllerName + "'` into the `render` method, but no such controller could be found.");
      }
    }

    if (options && options.model) {
      controller.set("model", options.model);
    }

    viewName = options && options.view || namePassed && name || route.viewName || name;
    ViewClass = route.container.lookupFactory("view:" + viewName);
    template = route.container.lookup("template:" + templateName);
    if (!ViewClass && !template) {
      _emberMetalCore["default"].assert("Could not find \"" + name + "\" template or view.", isDefaultRender);
      if (LOG_VIEW_LOOKUPS) {
        var fullName = "template:" + name;
        _emberMetalCore["default"].Logger.info("Could not find \"" + name + "\" template or view. Nothing will be rendered", { fullName: fullName });
      }
    }

    var parent;
    if (into && (parent = parentRoute(route)) && into === parentRoute(route).routeName) {
      into = undefined;
    }

    var renderOptions = {
      into: into,
      outlet: outlet,
      name: name,
      controller: controller,
      ViewClass: ViewClass,
      template: template
    };

    return renderOptions;
  }

  function getFullQueryParams(router, state) {
    if (state.fullQueryParams) {
      return state.fullQueryParams;
    }

    state.fullQueryParams = {};
    (0, _emberMetalMerge["default"])(state.fullQueryParams, state.queryParams);

    var targetRouteName = state.handlerInfos[state.handlerInfos.length - 1].name;
    router._deserializeQueryParams(targetRouteName, state.fullQueryParams);
    return state.fullQueryParams;
  }

  function getQueryParamsFor(route, state) {
    state.queryParamsFor = state.queryParamsFor || {};
    var name = route.routeName;

    if (state.queryParamsFor[name]) {
      return state.queryParamsFor[name];
    }

    var fullQueryParams = getFullQueryParams(route.router, state);

    var params = state.queryParamsFor[name] = {};

    // Copy over all the query params for this route/controller into params hash.
    var qpMeta = (0, _emberMetalProperty_get.get)(route, "_qp");
    var qps = qpMeta.qps;
    for (var i = 0, len = qps.length; i < len; ++i) {
      // Put deserialized qp on params hash.
      var qp = qps[i];

      var qpValueWasPassedIn = (qp.prop in fullQueryParams);
      params[qp.prop] = qpValueWasPassedIn ? fullQueryParams[qp.prop] : copyDefaultValue(qp.def);
    }

    return params;
  }

  function copyDefaultValue(value) {
    if ((0, _emberRuntimeUtils.isArray)(value)) {
      return _emberMetalCore["default"].A(value.slice());
    }
    return value;
  }

  exports["default"] = Route;
});
// FEATURES, A, deprecate, assert, Logger
enifed("ember-routing/system/router", ["exports", "ember-metal/core", "ember-metal/error", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/properties", "ember-metal/computed", "ember-metal/merge", "ember-metal/run_loop", "ember-runtime/system/string", "ember-runtime/system/object", "ember-runtime/mixins/evented", "ember-routing/system/dsl", "ember-routing/location/api", "ember-routing/utils", "ember-metal/platform/create", "./router_state", "router", "router/transition"], function (exports, _emberMetalCore, _emberMetalError, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalProperties, _emberMetalComputed, _emberMetalMerge, _emberMetalRun_loop, _emberRuntimeSystemString, _emberRuntimeSystemObject, _emberRuntimeMixinsEvented, _emberRoutingSystemDsl, _emberRoutingLocationApi, _emberRoutingUtils, _emberMetalPlatformCreate, _router_state, _router4, _routerTransition) {

  function K() {
    return this;
  }

  var slice = [].slice;

  /**
    The `Ember.Router` class manages the application state and URLs. Refer to
    the [routing guide](http://emberjs.com/guides/routing/) for documentation.
  
    @class Router
    @namespace Ember
    @extends Ember.Object
    @uses Ember.Evented
    @public
  */
  var EmberRouter = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsEvented["default"], {
    /**
      The `location` property determines the type of URL's that your
      application will use.
       The following location types are currently available:
       * `auto`
      * `hash`
      * `history`
      * `none`
       @property location
      @default 'hash'
      @see {Ember.Location}
      @public
    */
    location: "hash",

    /**
     Represents the URL of the root of the application, often '/'. This prefix is
     assumed on all routes defined on this router.
      @property rootURL
     @default '/'
     @public
    */
    rootURL: "/",

    _initRouterJs: function (moduleBasedResolver) {
      var router = this.router = new _router4["default"]();
      router.triggerEvent = triggerEvent;

      router._triggerWillChangeContext = K;
      router._triggerWillLeave = K;

      var dslCallbacks = this.constructor.dslCallbacks || [K];
      var dsl = new _emberRoutingSystemDsl["default"](null, {
        enableLoadingSubstates: !!moduleBasedResolver
      });

      function generateDSL() {
        this.resource("application", { path: "/", overrideNameAssertion: true }, function () {
          for (var i = 0; i < dslCallbacks.length; i++) {
            dslCallbacks[i].call(this);
          }
        });
      }

      generateDSL.call(dsl);

      if ((0, _emberMetalProperty_get.get)(this, "namespace.LOG_TRANSITIONS_INTERNAL")) {
        router.log = _emberMetalCore["default"].Logger.debug;
      }

      router.map(dsl.generate());
    },

    init: function () {
      this._activeViews = {};
      this._qpCache = {};
      this._queuedQPChanges = {};
    },

    /**
      Represents the current URL.
       @method url
      @return {String} The current URL.
      @private
    */
    url: (0, _emberMetalComputed.computed)(function () {
      return (0, _emberMetalProperty_get.get)(this, "location").getURL();
    }),

    /**
      Initializes the current router instance and sets up the change handling
      event listeners used by the instances `location` implementation.
       A property named `initialURL` will be used to determine the initial URL.
      If no value is found `/` will be used.
       @method startRouting
      @private
    */
    startRouting: function (moduleBasedResolver) {
      var initialURL = (0, _emberMetalProperty_get.get)(this, "initialURL");

      if (this.setupRouter(moduleBasedResolver)) {
        if (typeof initialURL === "undefined") {
          initialURL = (0, _emberMetalProperty_get.get)(this, "location").getURL();
        }
        var initialTransition = this.handleURL(initialURL);
        if (initialTransition && initialTransition.error) {
          throw initialTransition.error;
        }
      }
    },

    setupRouter: function (moduleBasedResolver) {
      var _this = this;

      this._initRouterJs(moduleBasedResolver);
      this._setupLocation();

      var router = this.router;
      var location = (0, _emberMetalProperty_get.get)(this, "location");

      // Allow the Location class to cancel the router setup while it refreshes
      // the page
      if ((0, _emberMetalProperty_get.get)(location, "cancelRouterSetup")) {
        return false;
      }

      this._setupRouter(router, location);

      location.onUpdateURL(function (url) {
        _this.handleURL(url);
      });

      return true;
    },

    /**
      Handles updating the paths and notifying any listeners of the URL
      change.
       Triggers the router level `didTransition` hook.
       @method didTransition
      @private
      @since 1.2.0
    */
    didTransition: function (infos) {
      updatePaths(this);

      this._cancelSlowTransitionTimer();

      this.notifyPropertyChange("url");
      this.set("currentState", this.targetState);

      // Put this in the runloop so url will be accurate. Seems
      // less surprising than didTransition being out of sync.
      _emberMetalRun_loop["default"].once(this, this.trigger, "didTransition");

      if ((0, _emberMetalProperty_get.get)(this, "namespace").LOG_TRANSITIONS) {
        _emberMetalCore["default"].Logger.log("Transitioned into '" + EmberRouter._routePath(infos) + "'");
      }
    },

    _setOutlets: function () {
      var handlerInfos = this.router.currentHandlerInfos;
      var route;
      var defaultParentState;
      var liveRoutes = null;

      if (!handlerInfos) {
        return;
      }

      for (var i = 0; i < handlerInfos.length; i++) {
        route = handlerInfos[i].handler;
        var connections = route.connections;
        var ownState;
        for (var j = 0; j < connections.length; j++) {
          var appended = appendLiveRoute(liveRoutes, defaultParentState, connections[j]);
          liveRoutes = appended.liveRoutes;
          if (appended.ownState.render.name === route.routeName || appended.ownState.render.outlet === "main") {
            ownState = appended.ownState;
          }
        }
        if (connections.length === 0) {
          ownState = representEmptyRoute(liveRoutes, defaultParentState, route);
        }
        defaultParentState = ownState;
      }
      if (!this._toplevelView) {
        var OutletView = this.container.lookupFactory("view:-outlet");
        this._toplevelView = OutletView.create();
        var instance = this.container.lookup("-application-instance:main");
        instance.didCreateRootView(this._toplevelView);
      }
      this._toplevelView.setOutletState(liveRoutes);
    },

    /**
      Handles notifying any listeners of an impending URL
      change.
       Triggers the router level `willTransition` hook.
       @method willTransition
      @private
      @since 1.11.0
    */
    willTransition: function (oldInfos, newInfos, transition) {
      _emberMetalRun_loop["default"].once(this, this.trigger, "willTransition", transition);

      if ((0, _emberMetalProperty_get.get)(this, "namespace").LOG_TRANSITIONS) {
        _emberMetalCore["default"].Logger.log("Preparing to transition from '" + EmberRouter._routePath(oldInfos) + "' to ' " + EmberRouter._routePath(newInfos) + "'");
      }
    },

    handleURL: function (url) {
      // Until we have an ember-idiomatic way of accessing #hashes, we need to
      // remove it because router.js doesn't know how to handle it.
      url = url.split(/#(.+)?/)[0];
      return this._doURLTransition("handleURL", url);
    },

    _doURLTransition: function (routerJsMethod, url) {
      var transition = this.router[routerJsMethod](url || "/");
      didBeginTransition(transition, this);
      return transition;
    },

    transitionTo: function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var queryParams;
      if (resemblesURL(args[0])) {
        return this._doURLTransition("transitionTo", args[0]);
      }

      var possibleQueryParams = args[args.length - 1];
      if (possibleQueryParams && possibleQueryParams.hasOwnProperty("queryParams")) {
        queryParams = args.pop().queryParams;
      } else {
        queryParams = {};
      }

      var targetRouteName = args.shift();
      return this._doTransition(targetRouteName, args, queryParams);
    },

    intermediateTransitionTo: function () {
      var _router;

      (_router = this.router).intermediateTransitionTo.apply(_router, arguments);

      updatePaths(this);

      var infos = this.router.currentHandlerInfos;
      if ((0, _emberMetalProperty_get.get)(this, "namespace").LOG_TRANSITIONS) {
        _emberMetalCore["default"].Logger.log("Intermediate-transitioned into '" + EmberRouter._routePath(infos) + "'");
      }
    },

    replaceWith: function () {
      return this.transitionTo.apply(this, arguments).method("replace");
    },

    generate: function () {
      var _router2;

      var url = (_router2 = this.router).generate.apply(_router2, arguments);
      return this.location.formatURL(url);
    },

    /**
      Determines if the supplied route is currently active.
       @method isActive
      @param routeName
      @return {Boolean}
      @private
    */
    isActive: function (routeName) {
      var router = this.router;
      return router.isActive.apply(router, arguments);
    },

    /**
      An alternative form of `isActive` that doesn't require
      manual concatenation of the arguments into a single
      array.
       @method isActiveIntent
      @param routeName
      @param models
      @param queryParams
      @return {Boolean}
      @private
      @since 1.7.0
    */
    isActiveIntent: function (routeName, models, queryParams) {
      return this.currentState.isActiveIntent(routeName, models, queryParams);
    },

    send: function (name, context) {
      var _router3;

      (_router3 = this.router).trigger.apply(_router3, arguments);
    },

    /**
      Does this router instance have the given route.
       @method hasRoute
      @return {Boolean}
      @private
    */
    hasRoute: function (route) {
      return this.router.hasRoute(route);
    },

    /**
      Resets the state of the router by clearing the current route
      handlers and deactivating them.
       @private
      @method reset
     */
    reset: function () {
      if (this.router) {
        this.router.reset();
      }
    },

    willDestroy: function () {
      if (this._toplevelView) {
        this._toplevelView.destroy();
        this._toplevelView = null;
      }
      this._super.apply(this, arguments);
      this.reset();
    },

    _lookupActiveComponentNode: function (templateName) {
      return this._activeViews[templateName];
    },

    _connectActiveComponentNode: function (templateName, componentNode) {
      _emberMetalCore["default"].assert("cannot connect an activeView that already exists", !this._activeViews[templateName]);

      var _activeViews = this._activeViews;
      function disconnectActiveView() {
        delete _activeViews[templateName];
      }

      this._activeViews[templateName] = componentNode;
      componentNode.renderNode.addDestruction({ destroy: disconnectActiveView });
    },

    _setupLocation: function () {
      var location = (0, _emberMetalProperty_get.get)(this, "location");
      var rootURL = (0, _emberMetalProperty_get.get)(this, "rootURL");

      if ("string" === typeof location && this.container) {
        var resolvedLocation = this.container.lookup("location:" + location);

        if ("undefined" !== typeof resolvedLocation) {
          location = (0, _emberMetalProperty_set.set)(this, "location", resolvedLocation);
        } else {
          // Allow for deprecated registration of custom location API's
          var options = {
            implementation: location
          };

          location = (0, _emberMetalProperty_set.set)(this, "location", _emberRoutingLocationApi["default"].create(options));
        }
      }

      if (location !== null && typeof location === "object") {
        if (rootURL) {
          (0, _emberMetalProperty_set.set)(location, "rootURL", rootURL);
        }

        // Allow the location to do any feature detection, such as AutoLocation
        // detecting history support. This gives it a chance to set its
        // `cancelRouterSetup` property which aborts routing.
        if (typeof location.detect === "function") {
          location.detect();
        }

        // ensure that initState is called AFTER the rootURL is set on
        // the location instance
        if (typeof location.initState === "function") {
          location.initState();
        }
      }
    },

    _getHandlerFunction: function () {
      var _this2 = this;

      var seen = (0, _emberMetalPlatformCreate["default"])(null);
      var container = this.container;
      var DefaultRoute = container.lookupFactory("route:basic");

      return function (name) {
        var routeName = "route:" + name;
        var handler = container.lookup(routeName);

        if (seen[name]) {
          return handler;
        }

        seen[name] = true;

        if (!handler) {
          container._registry.register(routeName, DefaultRoute.extend());
          handler = container.lookup(routeName);

          if ((0, _emberMetalProperty_get.get)(_this2, "namespace.LOG_ACTIVE_GENERATION")) {
            _emberMetalCore["default"].Logger.info("generated -> " + routeName, { fullName: routeName });
          }
        }

        handler.routeName = name;
        return handler;
      };
    },

    _setupRouter: function (router, location) {
      var lastURL;
      var emberRouter = this;

      router.getHandler = this._getHandlerFunction();

      var doUpdateURL = function () {
        location.setURL(lastURL);
      };

      router.updateURL = function (path) {
        lastURL = path;
        _emberMetalRun_loop["default"].once(doUpdateURL);
      };

      if (location.replaceURL) {
        var doReplaceURL = function () {
          location.replaceURL(lastURL);
        };

        router.replaceURL = function (path) {
          lastURL = path;
          _emberMetalRun_loop["default"].once(doReplaceURL);
        };
      }

      router.didTransition = function (infos) {
        emberRouter.didTransition(infos);
      };

      if (_emberMetalCore["default"].FEATURES.isEnabled("ember-router-willtransition")) {
        router.willTransition = function (oldInfos, newInfos, transition) {
          emberRouter.willTransition(oldInfos, newInfos, transition);
        };
      }
    },

    _serializeQueryParams: function (targetRouteName, queryParams) {
      var groupedByUrlKey = {};

      forEachQueryParam(this, targetRouteName, queryParams, function (key, value, qp) {
        var urlKey = qp.urlKey;
        if (!groupedByUrlKey[urlKey]) {
          groupedByUrlKey[urlKey] = [];
        }
        groupedByUrlKey[urlKey].push({
          qp: qp,
          value: value
        });
        delete queryParams[key];
      });

      for (var key in groupedByUrlKey) {
        var qps = groupedByUrlKey[key];
        _emberMetalCore["default"].assert((0, _emberRuntimeSystemString.fmt)("You're not allowed to have more than one controller " + "property map to the same query param key, but both " + "`%@` and `%@` map to `%@`. You can fix this by mapping " + "one of the controller properties to a different query " + "param key via the `as` config option, e.g. `%@: { as: 'other-%@' }`", [qps[0].qp.fprop, qps[1] ? qps[1].qp.fprop : "", qps[0].qp.urlKey, qps[0].qp.prop, qps[0].qp.prop]), qps.length <= 1);
        var qp = qps[0].qp;
        queryParams[qp.urlKey] = qp.route.serializeQueryParam(qps[0].value, qp.urlKey, qp.type);
      }
    },

    _deserializeQueryParams: function (targetRouteName, queryParams) {
      forEachQueryParam(this, targetRouteName, queryParams, function (key, value, qp) {
        delete queryParams[key];
        queryParams[qp.prop] = qp.route.deserializeQueryParam(value, qp.urlKey, qp.type);
      });
    },

    _pruneDefaultQueryParamValues: function (targetRouteName, queryParams) {
      var qps = this._queryParamsFor(targetRouteName);
      for (var key in queryParams) {
        var qp = qps.map[key];
        if (qp && qp.sdef === queryParams[key]) {
          delete queryParams[key];
        }
      }
    },

    _doTransition: function (_targetRouteName, models, _queryParams) {
      var targetRouteName = _targetRouteName || (0, _emberRoutingUtils.getActiveTargetName)(this.router);
      _emberMetalCore["default"].assert("The route " + targetRouteName + " was not found", targetRouteName && this.router.hasRoute(targetRouteName));

      var queryParams = {};
      (0, _emberMetalMerge["default"])(queryParams, _queryParams);
      this._prepareQueryParams(targetRouteName, models, queryParams);

      var transitionArgs = (0, _emberRoutingUtils.routeArgs)(targetRouteName, models, queryParams);
      var transitionPromise = this.router.transitionTo.apply(this.router, transitionArgs);

      didBeginTransition(transitionPromise, this);

      return transitionPromise;
    },

    _prepareQueryParams: function (targetRouteName, models, queryParams) {
      this._hydrateUnsuppliedQueryParams(targetRouteName, models, queryParams);
      this._serializeQueryParams(targetRouteName, queryParams);
      this._pruneDefaultQueryParamValues(targetRouteName, queryParams);
    },

    /**
      Returns a merged query params meta object for a given route.
      Useful for asking a route what its known query params are.
       @private
     */
    _queryParamsFor: function (leafRouteName) {
      if (this._qpCache[leafRouteName]) {
        return this._qpCache[leafRouteName];
      }

      var map = {};
      var qps = [];
      this._qpCache[leafRouteName] = {
        map: map,
        qps: qps
      };

      var routerjs = this.router;
      var recogHandlerInfos = routerjs.recognizer.handlersFor(leafRouteName);

      for (var i = 0, len = recogHandlerInfos.length; i < len; ++i) {
        var recogHandler = recogHandlerInfos[i];
        var route = routerjs.getHandler(recogHandler.handler);
        var qpMeta = (0, _emberMetalProperty_get.get)(route, "_qp");

        if (!qpMeta) {
          continue;
        }

        (0, _emberMetalMerge["default"])(map, qpMeta.map);
        qps.push.apply(qps, qpMeta.qps);
      }

      return {
        qps: qps,
        map: map
      };
    },

    /*
      becomeResolved: function(payload, resolvedContext) {
        var params = this.serialize(resolvedContext);
         if (payload) {
          this.stashResolvedModel(payload, resolvedContext);
          payload.params = payload.params || {};
          payload.params[this.name] = params;
        }
         return this.factory('resolved', {
          context: resolvedContext,
          name: this.name,
          handler: this.handler,
          params: params
        });
      },
    */

    _hydrateUnsuppliedQueryParams: function (leafRouteName, contexts, queryParams) {
      var state = calculatePostTransitionState(this, leafRouteName, contexts);
      var handlerInfos = state.handlerInfos;
      var appCache = this._bucketCache;

      (0, _emberRoutingUtils.stashParamNames)(this, handlerInfos);

      for (var i = 0, len = handlerInfos.length; i < len; ++i) {
        var route = handlerInfos[i].handler;
        var qpMeta = (0, _emberMetalProperty_get.get)(route, "_qp");

        for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {
          var qp = qpMeta.qps[j];
          var presentProp = qp.prop in queryParams && qp.prop || qp.fprop in queryParams && qp.fprop;

          if (presentProp) {
            if (presentProp !== qp.fprop) {
              queryParams[qp.fprop] = queryParams[presentProp];
              delete queryParams[presentProp];
            }
          } else {
            var controllerProto = qp.cProto;
            var cacheMeta = (0, _emberMetalProperty_get.get)(controllerProto, "_cacheMeta");

            var cacheKey = controllerProto._calculateCacheKey(qp.ctrl, cacheMeta[qp.prop].parts, state.params);
            queryParams[qp.fprop] = appCache.lookup(cacheKey, qp.prop, qp.def);
          }
        }
      }
    },

    _scheduleLoadingEvent: function (transition, originRoute) {
      this._cancelSlowTransitionTimer();
      this._slowTransitionTimer = _emberMetalRun_loop["default"].scheduleOnce("routerTransitions", this, "_handleSlowTransition", transition, originRoute);
    },

    currentState: null,
    targetState: null,

    _handleSlowTransition: function (transition, originRoute) {
      if (!this.router.activeTransition) {
        // Don't fire an event if we've since moved on from
        // the transition that put us in a loading state.
        return;
      }

      this.set("targetState", _router_state["default"].create({
        emberRouter: this,
        routerJs: this.router,
        routerJsState: this.router.activeTransition.state
      }));

      transition.trigger(true, "loading", transition, originRoute);
    },

    _cancelSlowTransitionTimer: function () {
      if (this._slowTransitionTimer) {
        _emberMetalRun_loop["default"].cancel(this._slowTransitionTimer);
      }
      this._slowTransitionTimer = null;
    }
  });

  /*
    Helper function for iterating root-ward, starting
    from (but not including) the provided `originRoute`.
  
    Returns true if the last callback fired requested
    to bubble upward.
  
    @private
   */
  function forEachRouteAbove(originRoute, transition, callback) {
    var handlerInfos = transition.state.handlerInfos;
    var originRouteFound = false;
    var handlerInfo, route;

    for (var i = handlerInfos.length - 1; i >= 0; --i) {
      handlerInfo = handlerInfos[i];
      route = handlerInfo.handler;

      if (!originRouteFound) {
        if (originRoute === route) {
          originRouteFound = true;
        }
        continue;
      }

      if (callback(route, handlerInfos[i + 1].handler) !== true) {
        return false;
      }
    }
    return true;
  }

  // These get invoked when an action bubbles above ApplicationRoute
  // and are not meant to be overridable.
  var defaultActionHandlers = {

    willResolveModel: function (transition, originRoute) {
      originRoute.router._scheduleLoadingEvent(transition, originRoute);
    },

    error: function (error, transition, originRoute) {
      // Attempt to find an appropriate error substate to enter.
      var router = originRoute.router;

      var tryTopLevel = forEachRouteAbove(originRoute, transition, function (route, childRoute) {
        var childErrorRouteName = findChildRouteName(route, childRoute, "error");
        if (childErrorRouteName) {
          router.intermediateTransitionTo(childErrorRouteName, error);
          return;
        }
        return true;
      });

      if (tryTopLevel) {
        // Check for top-level error state to enter.
        if (routeHasBeenDefined(originRoute.router, "application_error")) {
          router.intermediateTransitionTo("application_error", error);
          return;
        }
      }

      logError(error, "Error while processing route: " + transition.targetName);
    },

    loading: function (transition, originRoute) {
      // Attempt to find an appropriate loading substate to enter.
      var router = originRoute.router;

      var tryTopLevel = forEachRouteAbove(originRoute, transition, function (route, childRoute) {
        var childLoadingRouteName = findChildRouteName(route, childRoute, "loading");

        if (childLoadingRouteName) {
          router.intermediateTransitionTo(childLoadingRouteName);
          return;
        }

        // Don't bubble above pivot route.
        if (transition.pivotHandler !== route) {
          return true;
        }
      });

      if (tryTopLevel) {
        // Check for top-level loading state to enter.
        if (routeHasBeenDefined(originRoute.router, "application_loading")) {
          router.intermediateTransitionTo("application_loading");
          return;
        }
      }
    }
  };

  function logError(_error, initialMessage) {
    var errorArgs = [];
    var error;
    if (_error && typeof _error === "object" && typeof _error.errorThrown === "object") {
      error = _error.errorThrown;
    } else {
      error = _error;
    }

    if (initialMessage) {
      errorArgs.push(initialMessage);
    }

    if (error) {
      if (error.message) {
        errorArgs.push(error.message);
      }
      if (error.stack) {
        errorArgs.push(error.stack);
      }

      if (typeof error === "string") {
        errorArgs.push(error);
      }
    }

    _emberMetalCore["default"].Logger.error.apply(this, errorArgs);
  }

  function findChildRouteName(parentRoute, originatingChildRoute, name) {
    var router = parentRoute.router;
    var childName;
    var targetChildRouteName = originatingChildRoute.routeName.split(".").pop();
    var namespace = parentRoute.routeName === "application" ? "" : parentRoute.routeName + ".";

    if (_emberMetalCore["default"].FEATURES.isEnabled("ember-routing-named-substates")) {
      // First, try a named loading state, e.g. 'foo_loading'
      childName = namespace + targetChildRouteName + "_" + name;
      if (routeHasBeenDefined(router, childName)) {
        return childName;
      }
    }

    // Second, try general loading state, e.g. 'loading'
    childName = namespace + name;
    if (routeHasBeenDefined(router, childName)) {
      return childName;
    }
  }

  function routeHasBeenDefined(router, name) {
    var container = router.container;
    return router.hasRoute(name) && (container._registry.has("template:" + name) || container._registry.has("route:" + name));
  }

  function triggerEvent(handlerInfos, ignoreFailure, args) {
    var name = args.shift();

    if (!handlerInfos) {
      if (ignoreFailure) {
        return;
      }
      throw new _emberMetalError["default"]("Can't trigger action '" + name + "' because your app hasn't finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call `.send()` on the `Transition` object passed to the `model/beforeModel/afterModel` hooks.");
    }

    var eventWasHandled = false;
    var handlerInfo, handler;

    for (var i = handlerInfos.length - 1; i >= 0; i--) {
      handlerInfo = handlerInfos[i];
      handler = handlerInfo.handler;

      if (handler._actions && handler._actions[name]) {
        if (handler._actions[name].apply(handler, args) === true) {
          eventWasHandled = true;
        } else {
          return;
        }
      }
    }

    if (defaultActionHandlers[name]) {
      defaultActionHandlers[name].apply(null, args);
      return;
    }

    if (!eventWasHandled && !ignoreFailure) {
      throw new _emberMetalError["default"]("Nothing handled the action '" + name + "'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.");
    }
  }

  function calculatePostTransitionState(emberRouter, leafRouteName, contexts) {
    var routerjs = emberRouter.router;
    var state = routerjs.applyIntent(leafRouteName, contexts);
    var handlerInfos = state.handlerInfos;
    var params = state.params;

    for (var i = 0, len = handlerInfos.length; i < len; ++i) {
      var handlerInfo = handlerInfos[i];
      if (!handlerInfo.isResolved) {
        handlerInfo = handlerInfo.becomeResolved(null, handlerInfo.context);
      }
      params[handlerInfo.name] = handlerInfo.params;
    }
    return state;
  }

  function updatePaths(router) {
    var appController = router.container.lookup("controller:application");

    if (!appController) {
      // appController might not exist when top-level loading/error
      // substates have been entered since ApplicationRoute hasn't
      // actually been entered at that point.
      return;
    }

    var infos = router.router.currentHandlerInfos;
    var path = EmberRouter._routePath(infos);

    if (!("currentPath" in appController)) {
      (0, _emberMetalProperties.defineProperty)(appController, "currentPath");
    }

    (0, _emberMetalProperty_set.set)(appController, "currentPath", path);
    (0, _emberMetalProperty_set.set)(router, "currentPath", path);

    if (!("currentRouteName" in appController)) {
      (0, _emberMetalProperties.defineProperty)(appController, "currentRouteName");
    }

    (0, _emberMetalProperty_set.set)(appController, "currentRouteName", infos[infos.length - 1].name);
    (0, _emberMetalProperty_set.set)(router, "currentRouteName", infos[infos.length - 1].name);
  }

  EmberRouter.reopenClass({
    router: null,

    /**
      The `Router.map` function allows you to define mappings from URLs to routes
      and resources in your application. These mappings are defined within the
      supplied callback function using `this.resource` and `this.route`.
       ```javascript
      App.Router.map(function(){
        this.route('about');
        this.resource('article');
      });
      ```
       For more detailed examples please see
      [the guides](http://emberjs.com/guides/routing/defining-your-routes/).
       @method map
      @param callback
      @public
    */
    map: function (callback) {

      if (!this.dslCallbacks) {
        this.dslCallbacks = [];
        this.reopenClass({ dslCallbacks: this.dslCallbacks });
      }

      this.dslCallbacks.push(callback);

      return this;
    },

    _routePath: function (handlerInfos) {
      var path = [];

      // We have to handle coalescing resource names that
      // are prefixed with their parent's names, e.g.
      // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'

      function intersectionMatches(a1, a2) {
        for (var i = 0, len = a1.length; i < len; ++i) {
          if (a1[i] !== a2[i]) {
            return false;
          }
        }
        return true;
      }

      var name, nameParts, oldNameParts;
      for (var i = 1, l = handlerInfos.length; i < l; i++) {
        name = handlerInfos[i].name;
        nameParts = name.split(".");
        oldNameParts = slice.call(path);

        while (oldNameParts.length) {
          if (intersectionMatches(oldNameParts, nameParts)) {
            break;
          }
          oldNameParts.shift();
        }

        path.push.apply(path, nameParts.slice(oldNameParts.length));
      }

      return path.join(".");
    }
  });

  function didBeginTransition(transition, router) {
    var routerState = _router_state["default"].create({
      emberRouter: router,
      routerJs: router.router,
      routerJsState: transition.state
    });

    if (!router.currentState) {
      router.set("currentState", routerState);
    }
    router.set("targetState", routerState);

    transition.then(null, function (error) {
      if (!error || !error.name) {
        return;
      }

      _emberMetalCore["default"].assert("The URL '" + error.message + "' did not match any routes in your application", error.name !== "UnrecognizedURLError");

      return error;
    }, "Ember: Process errors from Router");
  }

  function resemblesURL(str) {
    return typeof str === "string" && (str === "" || str.charAt(0) === "/");
  }

  function forEachQueryParam(router, targetRouteName, queryParams, callback) {
    var qpCache = router._queryParamsFor(targetRouteName);

    for (var key in queryParams) {
      if (!queryParams.hasOwnProperty(key)) {
        continue;
      }
      var value = queryParams[key];
      var qp = qpCache.map[key];

      if (qp) {
        callback(key, value, qp);
      }
    }
  }

  function findLiveRoute(liveRoutes, name) {
    if (!liveRoutes) {
      return;
    }
    var stack = [liveRoutes];
    while (stack.length > 0) {
      var test = stack.shift();
      if (test.render.name === name) {
        return test;
      }
      var outlets = test.outlets;
      for (var outletName in outlets) {
        stack.push(outlets[outletName]);
      }
    }
  }

  function appendLiveRoute(liveRoutes, defaultParentState, renderOptions) {
    var target;
    var myState = {
      render: renderOptions,
      outlets: (0, _emberMetalPlatformCreate["default"])(null)
    };
    if (renderOptions.into) {
      target = findLiveRoute(liveRoutes, renderOptions.into);
    } else {
      target = defaultParentState;
    }
    if (target) {
      (0, _emberMetalProperty_set.set)(target.outlets, renderOptions.outlet, myState);
    } else {
      if (renderOptions.into) {
        // Megahax time. Post-2.0-breaking-changes, we will just assert
        // right here that the user tried to target a nonexistent
        // thing. But for now we still need to support the `render`
        // helper, and people are allowed to target templates rendered
        // by the render helper. So instead we defer doing anyting with
        // these orphan renders until afterRender.
        appendOrphan(liveRoutes, renderOptions.into, myState);
      } else {
        liveRoutes = myState;
      }
    }
    return {
      liveRoutes: liveRoutes,
      ownState: myState
    };
  }

  function appendOrphan(liveRoutes, into, myState) {
    if (!liveRoutes.outlets.__ember_orphans__) {
      liveRoutes.outlets.__ember_orphans__ = {
        render: {
          name: "__ember_orphans__"
        },
        outlets: (0, _emberMetalPlatformCreate["default"])(null)
      };
    }
    liveRoutes.outlets.__ember_orphans__.outlets[into] = myState;
    _emberMetalCore["default"].run.schedule("afterRender", function () {
      // `wasUsed` gets set by the render helper. See the function
      // `impersonateAnOutlet`.
      _emberMetalCore["default"].assert("You attempted to render into '" + into + "' but it was not found", liveRoutes.outlets.__ember_orphans__.outlets[into].wasUsed);
    });
  }

  function representEmptyRoute(liveRoutes, defaultParentState, route) {
    // the route didn't render anything
    var alreadyAppended = findLiveRoute(liveRoutes, route.routeName);
    if (alreadyAppended) {
      // But some other route has already rendered our default
      // template, so that becomes the default target for any
      // children we may have.
      return alreadyAppended;
    } else {
      // Create an entry to represent our default template name,
      // just so other routes can target it and inherit its place
      // in the outlet hierarchy.
      defaultParentState.outlets.main = {
        render: {
          name: route.routeName,
          outlet: "main"
        },
        outlets: {}
      };
      return defaultParentState;
    }
  }

  exports["default"] = EmberRouter;
});
// FEATURES, Logger, assert

/**
@module ember
@submodule ember-routing
*/
enifed("ember-routing/system/router_state", ["exports", "ember-metal/core", "ember-runtime/system/object", "ember-metal/merge"], function (exports, _emberMetalCore, _emberRuntimeSystemObject, _emberMetalMerge) {

  var RouterState = _emberRuntimeSystemObject["default"].extend({
    emberRouter: null,
    routerJs: null,
    routerJsState: null,

    isActiveIntent: function (routeName, models, queryParams, queryParamsMustMatch) {
      var state = this.routerJsState;
      if (!this.routerJs.isActiveIntent(routeName, models, null, state)) {
        return false;
      }

      var emptyQueryParams = _emberMetalCore["default"].isEmpty(_emberMetalCore["default"].keys(queryParams));

      if (queryParamsMustMatch && !emptyQueryParams) {
        var visibleQueryParams = {};
        (0, _emberMetalMerge["default"])(visibleQueryParams, queryParams);

        this.emberRouter._prepareQueryParams(routeName, models, visibleQueryParams);
        return shallowEqual(visibleQueryParams, state.queryParams);
      }

      return true;
    }
  });

  function shallowEqual(a, b) {
    var k;
    for (k in a) {
      if (a.hasOwnProperty(k) && a[k] !== b[k]) {
        return false;
      }
    }
    for (k in b) {
      if (b.hasOwnProperty(k) && a[k] !== b[k]) {
        return false;
      }
    }
    return true;
  }

  exports["default"] = RouterState;
});
enifed('ember-routing/utils', ['exports'], function (exports) {
  exports.routeArgs = routeArgs;
  exports.getActiveTargetName = getActiveTargetName;
  exports.stashParamNames = stashParamNames;

  function routeArgs(targetRouteName, models, queryParams) {
    var args = [];
    if (typeof targetRouteName === 'string') {
      args.push('' + targetRouteName);
    }
    args.push.apply(args, models);
    args.push({ queryParams: queryParams });
    return args;
  }

  function getActiveTargetName(router) {
    var handlerInfos = router.activeTransition ? router.activeTransition.state.handlerInfos : router.state.handlerInfos;
    return handlerInfos[handlerInfos.length - 1].name;
  }

  function stashParamNames(router, handlerInfos) {
    if (handlerInfos._namesStashed) {
      return;
    }

    // This helper exists because router.js/route-recognizer.js awkwardly
    // keeps separate a handlerInfo's list of parameter names depending
    // on whether a URL transition or named transition is happening.
    // Hopefully we can remove this in the future.
    var targetRouteName = handlerInfos[handlerInfos.length - 1].name;
    var recogHandlers = router.router.recognizer.handlersFor(targetRouteName);
    var dynamicParent = null;

    for (var i = 0, len = handlerInfos.length; i < len; ++i) {
      var handlerInfo = handlerInfos[i];
      var names = recogHandlers[i].names;

      if (names.length) {
        dynamicParent = handlerInfo;
      }

      handlerInfo._names = names;

      var route = handlerInfo.handler;
      route._stashNames(handlerInfo, dynamicParent);
    }

    handlerInfos._namesStashed = true;
  }
});
enifed('ember-runtime', ['exports', 'ember-metal', 'ember-runtime/core', 'ember-runtime/compare', 'ember-runtime/copy', 'ember-runtime/inject', 'ember-runtime/system/namespace', 'ember-runtime/system/object', 'ember-runtime/system/tracked_array', 'ember-runtime/system/subarray', 'ember-runtime/system/container', 'ember-runtime/system/array_proxy', 'ember-runtime/system/object_proxy', 'ember-runtime/system/core_object', 'ember-runtime/system/native_array', 'ember-runtime/system/set', 'ember-runtime/system/string', 'ember-runtime/system/deferred', 'ember-runtime/system/lazy_load', 'ember-runtime/mixins/array', 'ember-runtime/mixins/comparable', 'ember-runtime/mixins/copyable', 'ember-runtime/mixins/enumerable', 'ember-runtime/mixins/freezable', 'ember-runtime/mixins/-proxy', 'ember-runtime/mixins/observable', 'ember-runtime/mixins/action_handler', 'ember-runtime/mixins/deferred', 'ember-runtime/mixins/mutable_enumerable', 'ember-runtime/mixins/mutable_array', 'ember-runtime/mixins/target_action_support', 'ember-runtime/mixins/evented', 'ember-runtime/mixins/promise_proxy', 'ember-runtime/mixins/sortable', 'ember-runtime/computed/array_computed', 'ember-runtime/computed/reduce_computed', 'ember-runtime/computed/reduce_computed_macros', 'ember-runtime/controllers/array_controller', 'ember-runtime/controllers/object_controller', 'ember-runtime/controllers/controller', 'ember-runtime/mixins/controller', 'ember-runtime/system/service', 'ember-runtime/ext/rsvp', 'ember-runtime/ext/string', 'ember-runtime/ext/function', 'ember-runtime/utils'], function (exports, _emberMetal, _emberRuntimeCore, _emberRuntimeCompare, _emberRuntimeCopy, _emberRuntimeInject, _emberRuntimeSystemNamespace, _emberRuntimeSystemObject, _emberRuntimeSystemTracked_array, _emberRuntimeSystemSubarray, _emberRuntimeSystemContainer, _emberRuntimeSystemArray_proxy, _emberRuntimeSystemObject_proxy, _emberRuntimeSystemCore_object, _emberRuntimeSystemNative_array, _emberRuntimeSystemSet, _emberRuntimeSystemString, _emberRuntimeSystemDeferred, _emberRuntimeSystemLazy_load, _emberRuntimeMixinsArray, _emberRuntimeMixinsComparable, _emberRuntimeMixinsCopyable, _emberRuntimeMixinsEnumerable, _emberRuntimeMixinsFreezable, _emberRuntimeMixinsProxy, _emberRuntimeMixinsObservable, _emberRuntimeMixinsAction_handler, _emberRuntimeMixinsDeferred, _emberRuntimeMixinsMutable_enumerable, _emberRuntimeMixinsMutable_array, _emberRuntimeMixinsTarget_action_support, _emberRuntimeMixinsEvented, _emberRuntimeMixinsPromise_proxy, _emberRuntimeMixinsSortable, _emberRuntimeComputedArray_computed, _emberRuntimeComputedReduce_computed, _emberRuntimeComputedReduce_computed_macros, _emberRuntimeControllersArray_controller, _emberRuntimeControllersObject_controller, _emberRuntimeControllersController, _emberRuntimeMixinsController, _emberRuntimeSystemService, _emberRuntimeExtRsvp, _emberRuntimeExtString, _emberRuntimeExtFunction, _emberRuntimeUtils) {
  // END IMPORTS

  // BEGIN EXPORTS
  _emberMetal["default"].compare = _emberRuntimeCompare["default"];
  _emberMetal["default"].copy = _emberRuntimeCopy["default"];
  _emberMetal["default"].isEqual = _emberRuntimeCore.isEqual;

  _emberMetal["default"].inject = _emberRuntimeInject["default"];

  _emberMetal["default"].Array = _emberRuntimeMixinsArray["default"];

  _emberMetal["default"].Comparable = _emberRuntimeMixinsComparable["default"];
  _emberMetal["default"].Copyable = _emberRuntimeMixinsCopyable["default"];

  _emberMetal["default"].SortableMixin = _emberRuntimeMixinsSortable["default"];

  _emberMetal["default"].Freezable = _emberRuntimeMixinsFreezable.Freezable;
  _emberMetal["default"].FROZEN_ERROR = _emberRuntimeMixinsFreezable.FROZEN_ERROR;

  _emberMetal["default"].DeferredMixin = _emberRuntimeMixinsDeferred["default"];

  _emberMetal["default"].MutableEnumerable = _emberRuntimeMixinsMutable_enumerable["default"];
  _emberMetal["default"].MutableArray = _emberRuntimeMixinsMutable_array["default"];

  _emberMetal["default"].TargetActionSupport = _emberRuntimeMixinsTarget_action_support["default"];
  _emberMetal["default"].Evented = _emberRuntimeMixinsEvented["default"];

  _emberMetal["default"].PromiseProxyMixin = _emberRuntimeMixinsPromise_proxy["default"];

  _emberMetal["default"].Observable = _emberRuntimeMixinsObservable["default"];

  _emberMetal["default"].arrayComputed = _emberRuntimeComputedArray_computed.arrayComputed;
  _emberMetal["default"].ArrayComputedProperty = _emberRuntimeComputedArray_computed.ArrayComputedProperty;
  _emberMetal["default"].reduceComputed = _emberRuntimeComputedReduce_computed.reduceComputed;
  _emberMetal["default"].ReduceComputedProperty = _emberRuntimeComputedReduce_computed.ReduceComputedProperty;

  _emberMetal["default"].typeOf = _emberRuntimeUtils.typeOf;
  _emberMetal["default"].isArray = _emberRuntimeUtils.isArray;

  // ES6TODO: this seems a less than ideal way/place to add properties to Ember.computed
  var EmComputed = _emberMetal["default"].computed;

  EmComputed.sum = _emberRuntimeComputedReduce_computed_macros.sum;
  EmComputed.min = _emberRuntimeComputedReduce_computed_macros.min;
  EmComputed.max = _emberRuntimeComputedReduce_computed_macros.max;
  EmComputed.map = _emberRuntimeComputedReduce_computed_macros.map;
  EmComputed.sort = _emberRuntimeComputedReduce_computed_macros.sort;
  EmComputed.setDiff = _emberRuntimeComputedReduce_computed_macros.setDiff;
  EmComputed.mapBy = _emberRuntimeComputedReduce_computed_macros.mapBy;
  EmComputed.mapProperty = _emberRuntimeComputedReduce_computed_macros.mapProperty;
  EmComputed.filter = _emberRuntimeComputedReduce_computed_macros.filter;
  EmComputed.filterBy = _emberRuntimeComputedReduce_computed_macros.filterBy;
  EmComputed.filterProperty = _emberRuntimeComputedReduce_computed_macros.filterProperty;
  EmComputed.uniq = _emberRuntimeComputedReduce_computed_macros.uniq;
  EmComputed.union = _emberRuntimeComputedReduce_computed_macros.union;
  EmComputed.intersect = _emberRuntimeComputedReduce_computed_macros.intersect;

  _emberMetal["default"].String = _emberRuntimeSystemString["default"];
  _emberMetal["default"].Object = _emberRuntimeSystemObject["default"];
  _emberMetal["default"].TrackedArray = _emberRuntimeSystemTracked_array["default"];
  _emberMetal["default"].SubArray = _emberRuntimeSystemSubarray["default"];
  _emberMetal["default"].Container = _emberRuntimeSystemContainer.Container;
  _emberMetal["default"].Registry = _emberRuntimeSystemContainer.Registry;
  _emberMetal["default"].Namespace = _emberRuntimeSystemNamespace["default"];
  _emberMetal["default"].Enumerable = _emberRuntimeMixinsEnumerable["default"];
  _emberMetal["default"].ArrayProxy = _emberRuntimeSystemArray_proxy["default"];
  _emberMetal["default"].ObjectProxy = _emberRuntimeSystemObject_proxy["default"];
  _emberMetal["default"].ActionHandler = _emberRuntimeMixinsAction_handler["default"];
  _emberMetal["default"].CoreObject = _emberRuntimeSystemCore_object["default"];
  _emberMetal["default"].NativeArray = _emberRuntimeSystemNative_array["default"];
  // ES6TODO: Currently we must rely on the global from ember-metal/core to avoid circular deps
  // Ember.A = A;
  _emberMetal["default"].Set = _emberRuntimeSystemSet["default"];
  _emberMetal["default"].Deferred = _emberRuntimeSystemDeferred["default"];
  _emberMetal["default"].onLoad = _emberRuntimeSystemLazy_load.onLoad;
  _emberMetal["default"].runLoadHooks = _emberRuntimeSystemLazy_load.runLoadHooks;

  _emberMetal["default"].ArrayController = _emberRuntimeControllersArray_controller["default"];
  _emberMetal["default"].ObjectController = _emberRuntimeControllersObject_controller["default"];
  _emberMetal["default"].Controller = _emberRuntimeControllersController["default"];
  _emberMetal["default"].ControllerMixin = _emberRuntimeMixinsController["default"];

  _emberMetal["default"].Service = _emberRuntimeSystemService["default"];

  _emberMetal["default"]._ProxyMixin = _emberRuntimeMixinsProxy["default"];

  _emberMetal["default"].RSVP = _emberRuntimeExtRsvp["default"];
  // END EXPORTS

  exports["default"] = _emberMetal["default"];
});
/**
@module ember
@submodule ember-runtime
*/

// BEGIN IMPORTS
// just for side effect of extending Ember.RSVP
// just for side effect of extending String.prototype
// just for side effect of extending Function.prototype
enifed('ember-runtime/compare', ['exports', 'ember-runtime/utils', 'ember-runtime/mixins/comparable'], function (exports, _emberRuntimeUtils, _emberRuntimeMixinsComparable) {
  exports["default"] = compare;

  var TYPE_ORDER = {
    'undefined': 0,
    'null': 1,
    'boolean': 2,
    'number': 3,
    'string': 4,
    'array': 5,
    'object': 6,
    'instance': 7,
    'function': 8,
    'class': 9,
    'date': 10
  };

  //
  // the spaceship operator
  //
  function spaceship(a, b) {
    var diff = a - b;
    return (diff > 0) - (diff < 0);
  }

  /**
   This will compare two javascript values of possibly different types.
   It will tell you which one is greater than the other by returning:
  
    - -1 if the first is smaller than the second,
    - 0 if both are equal,
    - 1 if the first is greater than the second.
  
   The order is calculated based on `Ember.ORDER_DEFINITION`, if types are different.
   In case they have the same type an appropriate comparison for this type is made.
  
    ```javascript
    Ember.compare('hello', 'hello');  // 0
    Ember.compare('abc', 'dfg');      // -1
    Ember.compare(2, 1);              // 1
    ```
  
   @method compare
   @for Ember
   @param {Object} v First value to compare
   @param {Object} w Second value to compare
   @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.
   @private
  */

  function compare(v, w) {
    if (v === w) {
      return 0;
    }

    var type1 = (0, _emberRuntimeUtils.typeOf)(v);
    var type2 = (0, _emberRuntimeUtils.typeOf)(w);

    if (_emberRuntimeMixinsComparable["default"]) {
      if (type1 === 'instance' && _emberRuntimeMixinsComparable["default"].detect(v) && v.constructor.compare) {
        return v.constructor.compare(v, w);
      }

      if (type2 === 'instance' && _emberRuntimeMixinsComparable["default"].detect(w) && w.constructor.compare) {
        return w.constructor.compare(w, v) * -1;
      }
    }

    var res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);

    if (res !== 0) {
      return res;
    }

    // types are equal - so we have to check values now
    switch (type1) {
      case 'boolean':
      case 'number':
        return spaceship(v, w);

      case 'string':
        return spaceship(v.localeCompare(w), 0);

      case 'array':
        var vLen = v.length;
        var wLen = w.length;
        var len = Math.min(vLen, wLen);

        for (var i = 0; i < len; i++) {
          var r = compare(v[i], w[i]);
          if (r !== 0) {
            return r;
          }
        }

        // all elements are equal now
        // shorter array should be ordered first
        return spaceship(vLen, wLen);

      case 'instance':
        if (_emberRuntimeMixinsComparable["default"] && _emberRuntimeMixinsComparable["default"].detect(v)) {
          return v.compare(v, w);
        }
        return 0;

      case 'date':
        return spaceship(v.getTime(), w.getTime());

      default:
        return 0;
    }
  }
});
enifed('ember-runtime/computed/array_computed', ['exports', 'ember-metal/core', 'ember-runtime/computed/reduce_computed', 'ember-metal/enumerable_utils', 'ember-metal/platform/create', 'ember-metal/observer', 'ember-metal/error'], function (exports, _emberMetalCore, _emberRuntimeComputedReduce_computed, _emberMetalEnumerable_utils, _emberMetalPlatformCreate, _emberMetalObserver, _emberMetalError) {

  var a_slice = [].slice;

  function ArrayComputedProperty() {
    var cp = this;

    this._isArrayComputed = true;
    _emberRuntimeComputedReduce_computed.ReduceComputedProperty.apply(this, arguments);

    this._getter = (function (reduceFunc) {
      return function (propertyName) {
        if (!cp._hasInstanceMeta(this, propertyName)) {
          // When we recompute an array computed property, we need already
          // retrieved arrays to be updated; we can't simply empty the cache and
          // hope the array is re-retrieved.
          (0, _emberMetalEnumerable_utils.forEach)(cp._dependentKeys, function (dependentKey) {
            (0, _emberMetalObserver.addObserver)(this, dependentKey, function () {
              cp.recomputeOnce.call(this, propertyName);
            });
          }, this);
        }

        return reduceFunc.apply(this, arguments);
      };
    })(this._getter);

    return this;
  }

  ArrayComputedProperty.prototype = (0, _emberMetalPlatformCreate["default"])(_emberRuntimeComputedReduce_computed.ReduceComputedProperty.prototype);

  ArrayComputedProperty.prototype.initialValue = function () {
    return _emberMetalCore["default"].A();
  };

  ArrayComputedProperty.prototype.resetValue = function (array) {
    array.clear();
    return array;
  };

  // This is a stopgap to keep the reference counts correct with lazy CPs.
  ArrayComputedProperty.prototype.didChange = function (obj, keyName) {
    return;
  };

  /**
    Creates a computed property which operates on dependent arrays and
    is updated with "one at a time" semantics. When items are added or
    removed from the dependent array(s) an array computed only operates
    on the change instead of re-evaluating the entire array. This should
    return an array, if you'd like to use "one at a time" semantics and
    compute some value other then an array look at
    `Ember.reduceComputed`.
  
    If there are more than one arguments the first arguments are
    considered to be dependent property keys. The last argument is
    required to be an options object. The options object can have the
    following three properties.
  
    `initialize` - An optional initialize function. Typically this will be used
    to set up state on the instanceMeta object.
  
    `removedItem` - A function that is called each time an element is
    removed from the array.
  
    `addedItem` - A function that is called each time an element is
    added to the array.
  
  
    The `initialize` function has the following signature:
  
    ```javascript
    function(array, changeMeta, instanceMeta)
    ```
  
    `array` - The initial value of the arrayComputed, an empty array.
  
    `changeMeta` - An object which contains meta information about the
    computed. It contains the following properties:
  
       - `property` the computed property
       - `propertyName` the name of the property on the object
  
    `instanceMeta` - An object that can be used to store meta
    information needed for calculating your computed. For example a
    unique computed might use this to store the number of times a given
    element is found in the dependent array.
  
  
    The `removedItem` and `addedItem` functions both have the following signature:
  
    ```javascript
    function(accumulatedValue, item, changeMeta, instanceMeta)
    ```
  
    `accumulatedValue` - The value returned from the last time
    `removedItem` or `addedItem` was called or an empty array.
  
    `item` - the element added or removed from the array
  
    `changeMeta` - An object which contains meta information about the
    change. It contains the following properties:
  
      - `property` the computed property
      - `propertyName` the name of the property on the object
      - `index` the index of the added or removed item
      - `item` the added or removed item: this is exactly the same as
        the second arg
      - `arrayChanged` the array that triggered the change. Can be
        useful when depending on multiple arrays.
  
    For property changes triggered on an item property change (when
    depKey is something like `someArray.@each.someProperty`),
    `changeMeta` will also contain the following property:
  
      - `previousValues` an object whose keys are the properties that changed on
      the item, and whose values are the item's previous values.
  
    `previousValues` is important Ember coalesces item property changes via
    Ember.run.once. This means that by the time removedItem gets called, item has
    the new values, but you may need the previous value (eg for sorting &
    filtering).
  
    `instanceMeta` - An object that can be used to store meta
    information needed for calculating your computed. For example a
    unique computed might use this to store the number of times a given
    element is found in the dependent array.
  
    The `removedItem` and `addedItem` functions should return the accumulated
    value. It is acceptable to not return anything (ie return undefined)
    to invalidate the computation. This is generally not a good idea for
    arrayComputed but it's used in eg max and min.
  
    Example
  
    ```javascript
    Ember.computed.map = function(dependentKey, callback) {
      var options = {
        addedItem: function(array, item, changeMeta, instanceMeta) {
          var mapped = callback(item);
          array.insertAt(changeMeta.index, mapped);
          return array;
        },
        removedItem: function(array, item, changeMeta, instanceMeta) {
          array.removeAt(changeMeta.index, 1);
          return array;
        }
      };
  
      return Ember.arrayComputed(dependentKey, options);
    };
    ```
  
    @method arrayComputed
    @for Ember
    @param {String} [dependentKeys*]
    @param {Object} options
    @return {Ember.ComputedProperty}
    @deprecated
    @private
  */
  function arrayComputed(options) {
    var args;

    if (arguments.length > 1) {
      args = a_slice.call(arguments, 0, -1);
      options = a_slice.call(arguments, -1)[0];
    }

    if (typeof options !== 'object') {
      throw new _emberMetalError["default"]('Array Computed Property declared without an options hash');
    }

    var cp = new ArrayComputedProperty(options);

    if (args) {
      cp.property.apply(cp, args);
    }

    return cp;
  }

  exports.arrayComputed = arrayComputed;
  exports.ArrayComputedProperty = ArrayComputedProperty;
});
enifed('ember-runtime/computed/reduce_computed', ['exports', 'ember-metal/core', 'ember-metal/property_get', 'ember-metal/utils', 'ember-metal/error', 'ember-metal/property_events', 'ember-metal/expand_properties', 'ember-metal/observer', 'ember-metal/computed', 'ember-metal/platform/create', 'ember-metal/enumerable_utils', 'ember-runtime/system/tracked_array', 'ember-runtime/mixins/array', 'ember-metal/run_loop'], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalUtils, _emberMetalError, _emberMetalProperty_events, _emberMetalExpand_properties, _emberMetalObserver, _emberMetalComputed, _emberMetalPlatformCreate, _emberMetalEnumerable_utils, _emberRuntimeSystemTracked_array, _emberRuntimeMixinsArray, _emberMetalRun_loop) {
  exports.reduceComputed = reduceComputed;

  var cacheSet = _emberMetalComputed.cacheFor.set;
  var cacheGet = _emberMetalComputed.cacheFor.get;
  var cacheRemove = _emberMetalComputed.cacheFor.remove;
  var a_slice = [].slice;
  // Here we explicitly don't allow `@each.foo`; it would require some special
  // testing, but there's no particular reason why it should be disallowed.
  var eachPropertyPattern = /^(.*)\.@each\.(.*)/;
  var doubleEachPropertyPattern = /(.*\.@each){2,}/;
  var arrayBracketPattern = /\.\[\]$/;

  function get(obj, key) {
    if (key === '@this') {
      return obj;
    }

    return (0, _emberMetalProperty_get.get)(obj, key);
  }

  /*
    Tracks changes to dependent arrays, as well as to properties of items in
    dependent arrays.
  
    @class DependentArraysObserver
  */
  function DependentArraysObserver(callbacks, cp, instanceMeta, context, propertyName, sugarMeta) {
    // user specified callbacks for `addedItem` and `removedItem`
    this.callbacks = callbacks;

    // the computed property: remember these are shared across instances
    this.cp = cp;

    // the ReduceComputedPropertyInstanceMeta this DependentArraysObserver is
    // associated with
    this.instanceMeta = instanceMeta;

    // A map of array guids to dependentKeys, for the given context.  We track
    // this because we want to set up the computed property potentially before the
    // dependent array even exists, but when the array observer fires, we lack
    // enough context to know what to update: we can recover that context by
    // getting the dependentKey.
    this.dependentKeysByGuid = {};

    // a map of dependent array guids -> TrackedArray instances.  We use
    // this to lazily recompute indexes for item property observers.
    this.trackedArraysByGuid = {};

    // We suspend observers to ignore replacements from `reset` when totally
    // recomputing.  Unfortunately we cannot properly suspend the observers
    // because we only have the key; instead we make the observers no-ops
    this.suspended = false;

    // This is used to coalesce item changes from property observers within a
    // single item.
    this.changedItems = {};
    // This is used to coalesce item changes for multiple items that depend on
    // some shared state.
    this.changedItemCount = 0;
  }

  function ItemPropertyObserverContext(dependentArray, index, trackedArray) {
    _emberMetalCore["default"].assert('Internal error: trackedArray is null or undefined', trackedArray);

    this.dependentArray = dependentArray;
    this.index = index;
    this.item = dependentArray.objectAt(index);
    this.trackedArray = trackedArray;
    this.beforeObserver = null;
    this.observer = null;
    this.destroyed = false;
  }

  DependentArraysObserver.prototype = {
    setValue: function (newValue) {
      this.instanceMeta.setValue(newValue, true);
    },

    getValue: function () {
      return this.instanceMeta.getValue();
    },

    setupObservers: function (dependentArray, dependentKey) {
      this.dependentKeysByGuid[(0, _emberMetalUtils.guidFor)(dependentArray)] = dependentKey;

      dependentArray.addArrayObserver(this, {
        willChange: 'dependentArrayWillChange',
        didChange: 'dependentArrayDidChange'
      });

      if (this.cp._itemPropertyKeys[dependentKey]) {
        this.setupPropertyObservers(dependentKey, this.cp._itemPropertyKeys[dependentKey]);
      }
    },

    teardownObservers: function (dependentArray, dependentKey) {
      var itemPropertyKeys = this.cp._itemPropertyKeys[dependentKey] || [];

      delete this.dependentKeysByGuid[(0, _emberMetalUtils.guidFor)(dependentArray)];

      this.teardownPropertyObservers(dependentKey, itemPropertyKeys);

      dependentArray.removeArrayObserver(this, {
        willChange: 'dependentArrayWillChange',
        didChange: 'dependentArrayDidChange'
      });
    },

    suspendArrayObservers: function (callback, binding) {
      var oldSuspended = this.suspended;
      this.suspended = true;
      callback.call(binding);
      this.suspended = oldSuspended;
    },

    setupPropertyObservers: function (dependentKey, itemPropertyKeys) {
      var dependentArray = get(this.instanceMeta.context, dependentKey);
      var length = get(dependentArray, 'length');
      var observerContexts = new Array(length);

      this.resetTransformations(dependentKey, observerContexts);

      (0, _emberMetalEnumerable_utils.forEach)(dependentArray, function (item, index) {
        var observerContext = this.createPropertyObserverContext(dependentArray, index, this.trackedArraysByGuid[dependentKey]);
        observerContexts[index] = observerContext;

        (0, _emberMetalEnumerable_utils.forEach)(itemPropertyKeys, function (propertyKey) {
          (0, _emberMetalObserver.addBeforeObserver)(item, propertyKey, this, observerContext.beforeObserver);
          (0, _emberMetalObserver.addObserver)(item, propertyKey, this, observerContext.observer);
        }, this);
      }, this);
    },

    teardownPropertyObservers: function (dependentKey, itemPropertyKeys) {
      var dependentArrayObserver = this;
      var trackedArray = this.trackedArraysByGuid[dependentKey];
      var beforeObserver, observer, item;

      if (!trackedArray) {
        return;
      }

      trackedArray.apply(function (observerContexts, offset, operation) {
        if (operation === _emberRuntimeSystemTracked_array["default"].DELETE) {
          return;
        }

        (0, _emberMetalEnumerable_utils.forEach)(observerContexts, function (observerContext) {
          observerContext.destroyed = true;
          beforeObserver = observerContext.beforeObserver;
          observer = observerContext.observer;
          item = observerContext.item;

          (0, _emberMetalEnumerable_utils.forEach)(itemPropertyKeys, function (propertyKey) {
            (0, _emberMetalObserver.removeBeforeObserver)(item, propertyKey, dependentArrayObserver, beforeObserver);
            (0, _emberMetalObserver.removeObserver)(item, propertyKey, dependentArrayObserver, observer);
          });
        });
      });
    },

    createPropertyObserverContext: function (dependentArray, index, trackedArray) {
      var observerContext = new ItemPropertyObserverContext(dependentArray, index, trackedArray);

      this.createPropertyObserver(observerContext);

      return observerContext;
    },

    createPropertyObserver: function (observerContext) {
      var dependentArrayObserver = this;

      observerContext.beforeObserver = function (obj, keyName) {
        return dependentArrayObserver.itemPropertyWillChange(obj, keyName, observerContext.dependentArray, observerContext);
      };

      observerContext.observer = function (obj, keyName) {
        return dependentArrayObserver.itemPropertyDidChange(obj, keyName, observerContext.dependentArray, observerContext);
      };
    },

    resetTransformations: function (dependentKey, observerContexts) {
      this.trackedArraysByGuid[dependentKey] = new _emberRuntimeSystemTracked_array["default"](observerContexts);
    },

    trackAdd: function (dependentKey, index, newItems) {
      var trackedArray = this.trackedArraysByGuid[dependentKey];

      if (trackedArray) {
        trackedArray.addItems(index, newItems);
      }
    },

    trackRemove: function (dependentKey, index, removedCount) {
      var trackedArray = this.trackedArraysByGuid[dependentKey];

      if (trackedArray) {
        return trackedArray.removeItems(index, removedCount);
      }

      return [];
    },

    updateIndexes: function (trackedArray, array) {
      var length = get(array, 'length');
      // OPTIMIZE: we could stop updating once we hit the object whose observer
      // fired; ie partially apply the transformations
      trackedArray.apply(function (observerContexts, offset, operation, operationIndex) {
        // we don't even have observer contexts for removed items, even if we did,
        // they no longer have any index in the array
        if (operation === _emberRuntimeSystemTracked_array["default"].DELETE) {
          return;
        }
        if (operationIndex === 0 && operation === _emberRuntimeSystemTracked_array["default"].RETAIN && observerContexts.length === length && offset === 0) {
          // If we update many items we don't want to walk the array each time: we
          // only need to update the indexes at most once per run loop.
          return;
        }

        (0, _emberMetalEnumerable_utils.forEach)(observerContexts, function (context, index) {
          context.index = index + offset;
        });
      });
    },

    dependentArrayWillChange: function (dependentArray, index, removedCount, addedCount) {
      if (this.suspended) {
        return;
      }

      var removedItem = this.callbacks.removedItem;
      var changeMeta;
      var guid = (0, _emberMetalUtils.guidFor)(dependentArray);
      var dependentKey = this.dependentKeysByGuid[guid];
      var itemPropertyKeys = this.cp._itemPropertyKeys[dependentKey] || [];
      var length = get(dependentArray, 'length');
      var normalizedIndex = normalizeIndex(index, length, 0);
      var normalizedRemoveCount = normalizeRemoveCount(normalizedIndex, length, removedCount);
      var item, itemIndex, sliceIndex, observerContexts;

      observerContexts = this.trackRemove(dependentKey, normalizedIndex, normalizedRemoveCount);

      function removeObservers(propertyKey) {
        observerContexts[sliceIndex].destroyed = true;
        (0, _emberMetalObserver.removeBeforeObserver)(item, propertyKey, this, observerContexts[sliceIndex].beforeObserver);
        (0, _emberMetalObserver.removeObserver)(item, propertyKey, this, observerContexts[sliceIndex].observer);
      }

      for (sliceIndex = normalizedRemoveCount - 1; sliceIndex >= 0; --sliceIndex) {
        itemIndex = normalizedIndex + sliceIndex;
        if (itemIndex >= length) {
          break;
        }

        item = dependentArray.objectAt(itemIndex);

        (0, _emberMetalEnumerable_utils.forEach)(itemPropertyKeys, removeObservers, this);

        changeMeta = new ChangeMeta(dependentArray, item, itemIndex, this.instanceMeta.propertyName, this.cp, normalizedRemoveCount);
        this.setValue(removedItem.call(this.instanceMeta.context, this.getValue(), item, changeMeta, this.instanceMeta.sugarMeta));
      }
      this.callbacks.flushedChanges.call(this.instanceMeta.context, this.getValue(), this.instanceMeta.sugarMeta);
    },

    dependentArrayDidChange: function (dependentArray, index, removedCount, addedCount) {
      if (this.suspended) {
        return;
      }

      var addedItem = this.callbacks.addedItem;
      var guid = (0, _emberMetalUtils.guidFor)(dependentArray);
      var dependentKey = this.dependentKeysByGuid[guid];
      var observerContexts = new Array(addedCount);
      var itemPropertyKeys = this.cp._itemPropertyKeys[dependentKey];
      var length = get(dependentArray, 'length');
      var normalizedIndex = normalizeIndex(index, length, addedCount);
      var endIndex = normalizedIndex + addedCount;
      var changeMeta, observerContext;

      (0, _emberMetalEnumerable_utils.forEach)(dependentArray.slice(normalizedIndex, endIndex), function (item, sliceIndex) {
        if (itemPropertyKeys) {
          observerContext = this.createPropertyObserverContext(dependentArray, normalizedIndex + sliceIndex, this.trackedArraysByGuid[dependentKey]);
          observerContexts[sliceIndex] = observerContext;

          (0, _emberMetalEnumerable_utils.forEach)(itemPropertyKeys, function (propertyKey) {
            (0, _emberMetalObserver.addBeforeObserver)(item, propertyKey, this, observerContext.beforeObserver);
            (0, _emberMetalObserver.addObserver)(item, propertyKey, this, observerContext.observer);
          }, this);
        }

        changeMeta = new ChangeMeta(dependentArray, item, normalizedIndex + sliceIndex, this.instanceMeta.propertyName, this.cp, addedCount);
        this.setValue(addedItem.call(this.instanceMeta.context, this.getValue(), item, changeMeta, this.instanceMeta.sugarMeta));
      }, this);
      this.callbacks.flushedChanges.call(this.instanceMeta.context, this.getValue(), this.instanceMeta.sugarMeta);
      this.trackAdd(dependentKey, normalizedIndex, observerContexts);
    },

    itemPropertyWillChange: function (obj, keyName, array, observerContext) {
      var guid = (0, _emberMetalUtils.guidFor)(obj);

      if (!this.changedItems[guid]) {
        this.changedItems[guid] = {
          array: array,
          observerContext: observerContext,
          obj: obj,
          previousValues: {}
        };
      }

      ++this.changedItemCount;
      this.changedItems[guid].previousValues[keyName] = get(obj, keyName);
    },

    itemPropertyDidChange: function (obj, keyName, array, observerContext) {
      if (--this.changedItemCount === 0) {
        this.flushChanges();
      }
    },

    flushChanges: function () {
      var changedItems = this.changedItems;
      var key, c, changeMeta;

      for (key in changedItems) {
        c = changedItems[key];
        if (c.observerContext.destroyed) {
          continue;
        }

        this.updateIndexes(c.observerContext.trackedArray, c.observerContext.dependentArray);

        changeMeta = new ChangeMeta(c.array, c.obj, c.observerContext.index, this.instanceMeta.propertyName, this.cp, changedItems.length, c.previousValues);
        this.setValue(this.callbacks.removedItem.call(this.instanceMeta.context, this.getValue(), c.obj, changeMeta, this.instanceMeta.sugarMeta));
        this.setValue(this.callbacks.addedItem.call(this.instanceMeta.context, this.getValue(), c.obj, changeMeta, this.instanceMeta.sugarMeta));
      }

      this.changedItems = {};
      this.callbacks.flushedChanges.call(this.instanceMeta.context, this.getValue(), this.instanceMeta.sugarMeta);
    }
  };

  function normalizeIndex(index, length, newItemsOffset) {
    if (index < 0) {
      return Math.max(0, length + index);
    } else if (index < length) {
      return index;
    } else {
      // index > length
      return Math.min(length - newItemsOffset, index);
    }
  }

  function normalizeRemoveCount(index, length, removedCount) {
    return Math.min(removedCount, length - index);
  }

  function ChangeMeta(dependentArray, item, index, propertyName, property, changedCount, previousValues) {
    this.arrayChanged = dependentArray;
    this.index = index;
    this.item = item;
    this.propertyName = propertyName;
    this.property = property;
    this.changedCount = changedCount;

    if (previousValues) {
      // previous values only available for item property changes
      this.previousValues = previousValues;
    }
  }

  function addItems(dependentArray, callbacks, cp, propertyName, meta) {
    (0, _emberMetalEnumerable_utils.forEach)(dependentArray, function (item, index) {
      meta.setValue(callbacks.addedItem.call(this, meta.getValue(), item, new ChangeMeta(dependentArray, item, index, propertyName, cp, dependentArray.length), meta.sugarMeta));
    }, this);
    callbacks.flushedChanges.call(this, meta.getValue(), meta.sugarMeta);
  }

  function reset(cp, propertyName) {
    var hadMeta = cp._hasInstanceMeta(this, propertyName);
    var meta = cp._instanceMeta(this, propertyName);

    if (hadMeta) {
      meta.setValue(cp.resetValue(meta.getValue()));
    }

    if (cp.options.initialize) {
      cp.options.initialize.call(this, meta.getValue(), {
        property: cp,
        propertyName: propertyName
      }, meta.sugarMeta);
    }
  }

  function partiallyRecomputeFor(obj, dependentKey) {
    if (arrayBracketPattern.test(dependentKey)) {
      return false;
    }

    var value = get(obj, dependentKey);
    return _emberRuntimeMixinsArray["default"].detect(value);
  }

  function ReduceComputedPropertyInstanceMeta(context, propertyName, initialValue) {
    this.context = context;
    this.propertyName = propertyName;
    var contextMeta = (0, _emberMetalUtils.meta)(context);
    var contextCache = contextMeta.cache;
    if (!contextCache) {
      contextCache = contextMeta.cache = {};
    }
    this.cache = contextCache;
    this.dependentArrays = {};
    this.sugarMeta = {};
    this.initialValue = initialValue;
  }

  ReduceComputedPropertyInstanceMeta.prototype = {
    getValue: function () {
      var value = cacheGet(this.cache, this.propertyName);

      if (value !== undefined) {
        return value;
      } else {
        return this.initialValue;
      }
    },

    setValue: function (newValue, triggerObservers) {
      // This lets sugars force a recomputation, handy for very simple
      // implementations of eg max.
      if (newValue === cacheGet(this.cache, this.propertyName)) {
        return;
      }

      if (triggerObservers) {
        (0, _emberMetalProperty_events.propertyWillChange)(this.context, this.propertyName);
      }

      if (newValue === undefined) {
        cacheRemove(this.cache, this.propertyName);
      } else {
        cacheSet(this.cache, this.propertyName, newValue);
      }

      if (triggerObservers) {
        (0, _emberMetalProperty_events.propertyDidChange)(this.context, this.propertyName);
      }
    }
  };

  /**
    A computed property whose dependent keys are arrays and which is updated with
    "one at a time" semantics.
  
    @class ReduceComputedProperty
    @namespace Ember
    @extends Ember.ComputedProperty
    @constructor
    @private
  */

  exports.ReduceComputedProperty = ReduceComputedProperty;
  // TODO: default export

  function ReduceComputedProperty(options) {
    var cp = this;

    // use options._suppressDeprecation to allow us to deprecate
    // arrayComputed and reduceComputed themselves, but not the
    // default internal macros which will be reimplemented as plain
    // array methods
    if (this._isArrayComputed) {
      _emberMetalCore["default"].deprecate('Ember.arrayComputed is deprecated. Replace it with plain array methods', options._suppressDeprecation);
    } else {
      _emberMetalCore["default"].deprecate('Ember.reduceComputed is deprecated. Replace it with plain array methods', options._suppressDeprecation);
    }

    this.options = options;
    this._dependentKeys = null;
    this._cacheable = true;
    // A map of dependentKey -> [itemProperty, ...] that tracks what properties of
    // items in the array we must track to update this property.
    this._itemPropertyKeys = {};
    this._previousItemPropertyKeys = {};

    this.readOnly();

    this.recomputeOnce = function (propertyName) {
      // What we really want to do is coalesce by <cp, propertyName>.
      // We need a form of `scheduleOnce` that accepts an arbitrary token to
      // coalesce by, in addition to the target and method.
      _emberMetalRun_loop["default"].once(this, recompute, propertyName);
    };

    var recompute = function (propertyName) {
      var meta = cp._instanceMeta(this, propertyName);
      var callbacks = cp._callbacks();

      reset.call(this, cp, propertyName);

      meta.dependentArraysObserver.suspendArrayObservers(function () {
        (0, _emberMetalEnumerable_utils.forEach)(cp._dependentKeys, function (dependentKey) {
          _emberMetalCore["default"].assert('dependent array ' + dependentKey + ' must be an `Ember.Array`.  ' + 'If you are not extending arrays, you will need to wrap native arrays with `Ember.A`', !((0, _emberMetalUtils.isArray)(get(this, dependentKey)) && !_emberRuntimeMixinsArray["default"].detect(get(this, dependentKey))));

          if (!partiallyRecomputeFor(this, dependentKey)) {
            return;
          }

          var dependentArray = get(this, dependentKey);
          var previousDependentArray = meta.dependentArrays[dependentKey];

          if (dependentArray === previousDependentArray) {

            // The array may be the same, but our item property keys may have
            // changed, so we set them up again.  We can't easily tell if they've
            // changed: the array may be the same object, but with different
            // contents.
            if (cp._previousItemPropertyKeys[dependentKey]) {
              meta.dependentArraysObserver.teardownPropertyObservers(dependentKey, cp._previousItemPropertyKeys[dependentKey]);
              delete cp._previousItemPropertyKeys[dependentKey];
              meta.dependentArraysObserver.setupPropertyObservers(dependentKey, cp._itemPropertyKeys[dependentKey]);
            }
          } else {
            meta.dependentArrays[dependentKey] = dependentArray;

            if (previousDependentArray) {
              meta.dependentArraysObserver.teardownObservers(previousDependentArray, dependentKey);
            }

            if (dependentArray) {
              meta.dependentArraysObserver.setupObservers(dependentArray, dependentKey);
            }
          }
        }, this);
      }, this);

      (0, _emberMetalEnumerable_utils.forEach)(cp._dependentKeys, function (dependentKey) {
        if (!partiallyRecomputeFor(this, dependentKey)) {
          return;
        }

        var dependentArray = get(this, dependentKey);

        if (dependentArray) {
          addItems.call(this, dependentArray, callbacks, cp, propertyName, meta);
        }
      }, this);
    };

    this._getter = function (propertyName) {
      _emberMetalCore["default"].assert('Computed reduce values require at least one dependent key', cp._dependentKeys);

      recompute.call(this, propertyName);

      return cp._instanceMeta(this, propertyName).getValue();
    };
  }

  ReduceComputedProperty.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalComputed.ComputedProperty.prototype);

  function defaultCallback(computedValue) {
    return computedValue;
  }

  ReduceComputedProperty.prototype._callbacks = function () {
    if (!this.callbacks) {
      var options = this.options;

      this.callbacks = {
        removedItem: options.removedItem || defaultCallback,
        addedItem: options.addedItem || defaultCallback,
        flushedChanges: options.flushedChanges || defaultCallback
      };
    }

    return this.callbacks;
  };

  ReduceComputedProperty.prototype._hasInstanceMeta = function (context, propertyName) {
    var contextMeta = context.__ember_meta__;
    var cacheMeta = contextMeta && contextMeta.cacheMeta;
    return !!(cacheMeta && cacheMeta[propertyName]);
  };

  ReduceComputedProperty.prototype._instanceMeta = function (context, propertyName) {
    var contextMeta = context.__ember_meta__;
    var cacheMeta = contextMeta.cacheMeta;
    var meta = cacheMeta && cacheMeta[propertyName];

    if (!cacheMeta) {
      cacheMeta = contextMeta.cacheMeta = {};
    }
    if (!meta) {
      meta = cacheMeta[propertyName] = new ReduceComputedPropertyInstanceMeta(context, propertyName, this.initialValue());
      meta.dependentArraysObserver = new DependentArraysObserver(this._callbacks(), this, meta, context, propertyName, meta.sugarMeta);
    }

    return meta;
  };

  ReduceComputedProperty.prototype.initialValue = function () {
    if (typeof this.options.initialValue === 'function') {
      return this.options.initialValue();
    } else {
      return this.options.initialValue;
    }
  };

  ReduceComputedProperty.prototype.resetValue = function (value) {
    return this.initialValue();
  };

  ReduceComputedProperty.prototype.itemPropertyKey = function (dependentArrayKey, itemPropertyKey) {
    this._itemPropertyKeys[dependentArrayKey] = this._itemPropertyKeys[dependentArrayKey] || [];
    this._itemPropertyKeys[dependentArrayKey].push(itemPropertyKey);
  };

  ReduceComputedProperty.prototype.clearItemPropertyKeys = function (dependentArrayKey) {
    if (this._itemPropertyKeys[dependentArrayKey]) {
      this._previousItemPropertyKeys[dependentArrayKey] = this._itemPropertyKeys[dependentArrayKey];
      this._itemPropertyKeys[dependentArrayKey] = [];
    }
  };

  ReduceComputedProperty.prototype.property = function () {
    var cp = this;
    var args = a_slice.call(arguments);
    var propertyArgs = {};
    var match, dependentArrayKey;

    (0, _emberMetalEnumerable_utils.forEach)(args, function (dependentKey) {
      if (doubleEachPropertyPattern.test(dependentKey)) {
        throw new _emberMetalError["default"]('Nested @each properties not supported: ' + dependentKey);
      } else if (match = eachPropertyPattern.exec(dependentKey)) {
        dependentArrayKey = match[1];

        var itemPropertyKeyPattern = match[2];
        var addItemPropertyKey = function (itemPropertyKey) {
          cp.itemPropertyKey(dependentArrayKey, itemPropertyKey);
        };

        (0, _emberMetalExpand_properties["default"])(itemPropertyKeyPattern, addItemPropertyKey);
        propertyArgs[(0, _emberMetalUtils.guidFor)(dependentArrayKey)] = dependentArrayKey;
      } else {
        propertyArgs[(0, _emberMetalUtils.guidFor)(dependentKey)] = dependentKey;
      }
    });

    var propertyArgsToArray = [];
    for (var guid in propertyArgs) {
      propertyArgsToArray.push(propertyArgs[guid]);
    }

    return _emberMetalComputed.ComputedProperty.prototype.property.apply(this, propertyArgsToArray);
  };

  /**
    Creates a computed property which operates on dependent arrays and
    is updated with "one at a time" semantics. When items are added or
    removed from the dependent array(s) a reduce computed only operates
    on the change instead of re-evaluating the entire array.
  
    If there are more than one arguments the first arguments are
    considered to be dependent property keys. The last argument is
    required to be an options object. The options object can have the
    following four properties:
  
    `initialValue` - A value or function that will be used as the initial
    value for the computed. If this property is a function the result of calling
    the function will be used as the initial value. This property is required.
  
    `initialize` - An optional initialize function. Typically this will be used
    to set up state on the instanceMeta object.
  
    `removedItem` - A function that is called each time an element is removed
    from the array.
  
    `addedItem` - A function that is called each time an element is added to
    the array.
  
  
    The `initialize` function has the following signature:
  
    ```javascript
    function(initialValue, changeMeta, instanceMeta)
    ```
  
    `initialValue` - The value of the `initialValue` property from the
    options object.
  
    `changeMeta` - An object which contains meta information about the
    computed. It contains the following properties:
  
       - `property` the computed property
       - `propertyName` the name of the property on the object
  
    `instanceMeta` - An object that can be used to store meta
    information needed for calculating your computed. For example a
    unique computed might use this to store the number of times a given
    element is found in the dependent array.
  
  
    The `removedItem` and `addedItem` functions both have the following signature:
  
    ```javascript
    function(accumulatedValue, item, changeMeta, instanceMeta)
    ```
  
    `accumulatedValue` - The value returned from the last time
    `removedItem` or `addedItem` was called or `initialValue`.
  
    `item` - the element added or removed from the array
  
    `changeMeta` - An object which contains meta information about the
    change. It contains the following properties:
  
      - `property` the computed property
      - `propertyName` the name of the property on the object
      - `index` the index of the added or removed item
      - `item` the added or removed item: this is exactly the same as
        the second arg
      - `arrayChanged` the array that triggered the change. Can be
        useful when depending on multiple arrays.
  
    For property changes triggered on an item property change (when
    depKey is something like `someArray.@each.someProperty`),
    `changeMeta` will also contain the following property:
  
      - `previousValues` an object whose keys are the properties that changed on
      the item, and whose values are the item's previous values.
  
    `previousValues` is important Ember coalesces item property changes via
    Ember.run.once. This means that by the time removedItem gets called, item has
    the new values, but you may need the previous value (eg for sorting &
    filtering).
  
    `instanceMeta` - An object that can be used to store meta
    information needed for calculating your computed. For example a
    unique computed might use this to store the number of times a given
    element is found in the dependent array.
  
    The `removedItem` and `addedItem` functions should return the accumulated
    value. It is acceptable to not return anything (ie return undefined)
    to invalidate the computation. This is generally not a good idea for
    arrayComputed but it's used in eg max and min.
  
    Note that observers will be fired if either of these functions return a value
    that differs from the accumulated value.  When returning an object that
    mutates in response to array changes, for example an array that maps
    everything from some other array (see `Ember.computed.map`), it is usually
    important that the *same* array be returned to avoid accidentally triggering observers.
  
    Example
  
    ```javascript
    Ember.computed.max = function(dependentKey) {
      return Ember.reduceComputed(dependentKey, {
        initialValue: -Infinity,
  
        addedItem: function(accumulatedValue, item, changeMeta, instanceMeta) {
          return Math.max(accumulatedValue, item);
        },
  
        removedItem: function(accumulatedValue, item, changeMeta, instanceMeta) {
          if (item < accumulatedValue) {
            return accumulatedValue;
          }
        }
      });
    };
    ```
  
    Dependent keys may refer to `@this` to observe changes to the object itself,
    which must be array-like, rather than a property of the object.  This is
    mostly useful for array proxies, to ensure objects are retrieved via
    `objectAtContent`.  This is how you could sort items by properties defined on an item controller.
  
    Example
  
    ```javascript
    App.PeopleController = Ember.ArrayController.extend({
      itemController: 'person',
  
      sortedPeople: Ember.computed.sort('@this.@each.reversedName', function(personA, personB) {
        // `reversedName` isn't defined on Person, but we have access to it via
        // the item controller App.PersonController.  If we'd used
        // `content.@each.reversedName` above, we would be getting the objects
        // directly and not have access to `reversedName`.
        //
        var reversedNameA = get(personA, 'reversedName');
        var reversedNameB = get(personB, 'reversedName');
  
        return Ember.compare(reversedNameA, reversedNameB);
      })
    });
  
    App.PersonController = Ember.ObjectController.extend({
      reversedName: function() {
        return reverse(get(this, 'name'));
      }.property('name')
    });
    ```
  
    Dependent keys whose values are not arrays are treated as regular
    dependencies: when they change, the computed property is completely
    recalculated.  It is sometimes useful to have dependent arrays with similar
    semantics.  Dependent keys which end in `.[]` do not use "one at a time"
    semantics.  When an item is added or removed from such a dependency, the
    computed property is completely recomputed.
  
    When the computed property is completely recomputed, the `accumulatedValue`
    is discarded, it starts with `initialValue` again, and each item is passed
    to `addedItem` in turn.
  
    Example
  
    ```javascript
    Ember.Object.extend({
      // When `string` is changed, `computed` is completely recomputed.
      string: 'a string',
  
      // When an item is added to `array`, `addedItem` is called.
      array: [],
  
      // When an item is added to `anotherArray`, `computed` is completely
      // recomputed.
      anotherArray: [],
  
      computed: Ember.reduceComputed('string', 'array', 'anotherArray.[]', {
        addedItem: addedItemCallback,
        removedItem: removedItemCallback
      })
    });
    ```
  
    @method reduceComputed
    @for Ember
    @param {String} [dependentKeys*]
    @param {Object} options
    @return {Ember.ComputedProperty}
    @deprecated
    @public
  */

  function reduceComputed(options) {
    var args;

    if (arguments.length > 1) {
      args = a_slice.call(arguments, 0, -1);
      options = a_slice.call(arguments, -1)[0];
    }

    if (typeof options !== 'object') {
      throw new _emberMetalError["default"]('Reduce Computed Property declared without an options hash');
    }

    if (!('initialValue' in options)) {
      throw new _emberMetalError["default"]('Reduce Computed Property declared without an initial value');
    }

    var cp = new ReduceComputedProperty(options);

    if (args) {
      cp.property.apply(cp, args);
    }

    return cp;
  }
});
// Ember.assert
enifed('ember-runtime/computed/reduce_computed_macros', ['exports', 'ember-metal/core', 'ember-metal/property_get', 'ember-metal/utils', 'ember-metal/error', 'ember-metal/enumerable_utils', 'ember-metal/run_loop', 'ember-metal/observer', 'ember-runtime/computed/array_computed', 'ember-runtime/computed/reduce_computed', 'ember-runtime/system/subarray', 'ember-metal/keys', 'ember-runtime/compare'], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalUtils, _emberMetalError, _emberMetalEnumerable_utils, _emberMetalRun_loop, _emberMetalObserver, _emberRuntimeComputedArray_computed, _emberRuntimeComputedReduce_computed, _emberRuntimeSystemSubarray, _emberMetalKeys, _emberRuntimeCompare) {
  exports.sum = sum;
  exports.max = max;
  exports.min = min;
  exports.map = map;
  exports.mapBy = mapBy;
  exports.filter = filter;
  exports.filterBy = filterBy;
  exports.uniq = uniq;
  exports.intersect = intersect;
  exports.setDiff = setDiff;
  exports.sort = sort;

  var a_slice = [].slice;

  /**
    A computed property that returns the sum of the value
    in the dependent array.
  
    @method sum
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computes the sum of all values in the dependentKey's array
    @since 1.4.0
    @public
  */

  function sum(dependentKey) {
    return (0, _emberRuntimeComputedReduce_computed.reduceComputed)(dependentKey, {
      _suppressDeprecation: true,
      initialValue: 0,

      addedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {
        return accumulatedValue + item;
      },

      removedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {
        return accumulatedValue - item;
      }
    });
  }

  /**
    A computed property that calculates the maximum value in the
    dependent array. This will return `-Infinity` when the dependent
    array is empty.
  
    ```javascript
    var Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age'),
      maxChildAge: Ember.computed.max('childAges')
    });
  
    var lordByron = Person.create({ children: [] });
  
    lordByron.get('maxChildAge'); // -Infinity
    lordByron.get('children').pushObject({
      name: 'Augusta Ada Byron', age: 7
    });
    lordByron.get('maxChildAge'); // 7
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('maxChildAge'); // 8
    ```
  
    @method max
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computes the largest value in the dependentKey's array
    @public
  */

  function max(dependentKey) {
    return (0, _emberRuntimeComputedReduce_computed.reduceComputed)(dependentKey, {
      _suppressDeprecation: true,
      initialValue: -Infinity,

      addedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {
        return Math.max(accumulatedValue, item);
      },

      removedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {
        if (item < accumulatedValue) {
          return accumulatedValue;
        }
      }
    });
  }

  /**
    A computed property that calculates the minimum value in the
    dependent array. This will return `Infinity` when the dependent
    array is empty.
  
    ```javascript
    var Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age'),
      minChildAge: Ember.computed.min('childAges')
    });
  
    var lordByron = Person.create({ children: [] });
  
    lordByron.get('minChildAge'); // Infinity
    lordByron.get('children').pushObject({
      name: 'Augusta Ada Byron', age: 7
    });
    lordByron.get('minChildAge'); // 7
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('minChildAge'); // 5
    ```
  
    @method min
    @for Ember.computed
    @param {String} dependentKey
    @return {Ember.ComputedProperty} computes the smallest value in the dependentKey's array
    @public
  */

  function min(dependentKey) {
    return (0, _emberRuntimeComputedReduce_computed.reduceComputed)(dependentKey, {
      _suppressDeprecation: true,

      initialValue: Infinity,

      addedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {
        return Math.min(accumulatedValue, item);
      },

      removedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {
        if (item > accumulatedValue) {
          return accumulatedValue;
        }
      }
    });
  }

  /**
    Returns an array mapped via the callback
  
    The callback method you provide should have the following signature.
    `item` is the current item in the iteration.
    `index` is the integer index of the current item in the iteration.
  
    ```javascript
    function(item, index);
    ```
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      excitingChores: Ember.computed.map('chores', function(chore, index) {
        return chore.toUpperCase() + '!';
      })
    });
  
    var hamster = Hamster.create({
      chores: ['clean', 'write more unit tests']
    });
  
    hamster.get('excitingChores'); // ['CLEAN!', 'WRITE MORE UNIT TESTS!']
    ```
  
    @method map
    @for Ember.computed
    @param {String} dependentKey
    @param {Function} callback
    @return {Ember.ComputedProperty} an array mapped via the callback
    @public
  */

  function map(dependentKey, callback) {
    var options = {
      _suppressDeprecation: true,

      addedItem: function (array, item, changeMeta, instanceMeta) {
        var mapped = callback.call(this, item, changeMeta.index);
        array.insertAt(changeMeta.index, mapped);
        return array;
      },
      removedItem: function (array, item, changeMeta, instanceMeta) {
        array.removeAt(changeMeta.index, 1);
        return array;
      }
    };

    return (0, _emberRuntimeComputedArray_computed.arrayComputed)(dependentKey, options);
  }

  /**
    Returns an array mapped to the specified key.
  
    ```javascript
    var Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age')
    });
  
    var lordByron = Person.create({ children: [] });
  
    lordByron.get('childAges'); // []
    lordByron.get('children').pushObject({ name: 'Augusta Ada Byron', age: 7 });
    lordByron.get('childAges'); // [7]
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('childAges'); // [7, 5, 8]
    ```
  
    @method mapBy
    @for Ember.computed
    @param {String} dependentKey
    @param {String} propertyKey
    @return {Ember.ComputedProperty} an array mapped to the specified key
    @public
  */

  function mapBy(dependentKey, propertyKey) {
    var callback = function (item) {
      return (0, _emberMetalProperty_get.get)(item, propertyKey);
    };
    return map(dependentKey + '.@each.' + propertyKey, callback);
  }

  /**
    @method mapProperty
    @for Ember.computed
    @deprecated Use `Ember.computed.mapBy` instead
    @param dependentKey
    @param propertyKey
    @public
  */
  var mapProperty = mapBy;

  exports.mapProperty = mapProperty;
  /**
    Filters the array by the callback.
  
    The callback method you provide should have the following signature.
    `item` is the current item in the iteration.
    `index` is the integer index of the current item in the iteration.
    `array` is the dependant array itself.
  
    ```javascript
    function(item, index, array);
    ```
  
    ```javascript
    var Hamster = Ember.Object.extend({
      remainingChores: Ember.computed.filter('chores', function(chore, index, array) {
        return !chore.done;
      })
    });
  
    var hamster = Hamster.create({
      chores: [
        { name: 'cook', done: true },
        { name: 'clean', done: true },
        { name: 'write more unit tests', done: false }
      ]
    });
  
    hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]
    ```
  
    @method filter
    @for Ember.computed
    @param {String} dependentKey
    @param {Function} callback
    @return {Ember.ComputedProperty} the filtered array
    @public
  */

  function filter(dependentKey, callback) {
    var options = {
      _suppressDeprecation: true,

      initialize: function (array, changeMeta, instanceMeta) {
        instanceMeta.filteredArrayIndexes = new _emberRuntimeSystemSubarray["default"]();
      },

      addedItem: function (array, item, changeMeta, instanceMeta) {
        var match = !!callback.call(this, item, changeMeta.index, changeMeta.arrayChanged);
        var filterIndex = instanceMeta.filteredArrayIndexes.addItem(changeMeta.index, match);

        if (match) {
          array.insertAt(filterIndex, item);
        }

        return array;
      },

      removedItem: function (array, item, changeMeta, instanceMeta) {
        var filterIndex = instanceMeta.filteredArrayIndexes.removeItem(changeMeta.index);

        if (filterIndex > -1) {
          array.removeAt(filterIndex);
        }

        return array;
      }
    };

    return (0, _emberRuntimeComputedArray_computed.arrayComputed)(dependentKey, options);
  }

  /**
    Filters the array by the property and value
  
    ```javascript
    var Hamster = Ember.Object.extend({
      remainingChores: Ember.computed.filterBy('chores', 'done', false)
    });
  
    var hamster = Hamster.create({
      chores: [
        { name: 'cook', done: true },
        { name: 'clean', done: true },
        { name: 'write more unit tests', done: false }
      ]
    });
  
    hamster.get('remainingChores'); // [{ name: 'write more unit tests', done: false }]
    ```
  
    @method filterBy
    @for Ember.computed
    @param {String} dependentKey
    @param {String} propertyKey
    @param {*} value
    @return {Ember.ComputedProperty} the filtered array
    @public
  */

  function filterBy(dependentKey, propertyKey, value) {
    var callback;

    if (arguments.length === 2) {
      callback = function (item) {
        return (0, _emberMetalProperty_get.get)(item, propertyKey);
      };
    } else {
      callback = function (item) {
        return (0, _emberMetalProperty_get.get)(item, propertyKey) === value;
      };
    }

    return filter(dependentKey + '.@each.' + propertyKey, callback);
  }

  /**
    @method filterProperty
    @for Ember.computed
    @param dependentKey
    @param propertyKey
    @param value
    @deprecated Use `Ember.computed.filterBy` instead
    @public
  */
  var filterProperty = filterBy;

  exports.filterProperty = filterProperty;
  /**
    A computed property which returns a new array with all the unique
    elements from one or more dependent arrays.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      uniqueFruits: Ember.computed.uniq('fruits')
    });
  
    var hamster = Hamster.create({
      fruits: [
        'banana',
        'grape',
        'kale',
        'banana'
      ]
    });
  
    hamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']
    ```
  
    @method uniq
    @for Ember.computed
    @param {String} propertyKey*
    @return {Ember.ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */

  function uniq() {
    var args = a_slice.call(arguments);

    args.push({
      _suppressDeprecation: true,

      initialize: function (array, changeMeta, instanceMeta) {
        instanceMeta.itemCounts = {};
      },

      addedItem: function (array, item, changeMeta, instanceMeta) {
        var guid = (0, _emberMetalUtils.guidFor)(item);

        if (!instanceMeta.itemCounts[guid]) {
          instanceMeta.itemCounts[guid] = 1;
          array.pushObject(item);
        } else {
          ++instanceMeta.itemCounts[guid];
        }
        return array;
      },

      removedItem: function (array, item, _, instanceMeta) {
        var guid = (0, _emberMetalUtils.guidFor)(item);
        var itemCounts = instanceMeta.itemCounts;

        if (--itemCounts[guid] === 0) {
          array.removeObject(item);
        }

        return array;
      }
    });

    return _emberRuntimeComputedArray_computed.arrayComputed.apply(null, args);
  }

  /**
    Alias for [Ember.computed.uniq](/api/#method_computed_uniq).
  
    @method union
    @for Ember.computed
    @param {String} propertyKey*
    @return {Ember.ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  var union = uniq;

  exports.union = union;
  /**
    A computed property which returns a new array with all the duplicated
    elements from two or more dependent arrays.
  
    Example
  
    ```javascript
    var obj = Ember.Object.createWithMixins({
      adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],
      charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock'],
      friendsInCommon: Ember.computed.intersect('adaFriends', 'charlesFriends')
    });
  
    obj.get('friendsInCommon'); // ['William King', 'Mary Somerville']
    ```
  
    @method intersect
    @for Ember.computed
    @param {String} propertyKey*
    @return {Ember.ComputedProperty} computes a new array with all the
    duplicated elements from the dependent arrays
    @public
  */

  function intersect() {
    var args = a_slice.call(arguments);

    args.push({
      _suppressDeprecation: true,

      initialize: function (array, changeMeta, instanceMeta) {
        instanceMeta.itemCounts = {};
      },

      addedItem: function (array, item, changeMeta, instanceMeta) {
        var itemGuid = (0, _emberMetalUtils.guidFor)(item);
        var dependentGuid = (0, _emberMetalUtils.guidFor)(changeMeta.arrayChanged);
        var numberOfDependentArrays = changeMeta.property._dependentKeys.length;
        var itemCounts = instanceMeta.itemCounts;

        if (!itemCounts[itemGuid]) {
          itemCounts[itemGuid] = {};
        }

        if (itemCounts[itemGuid][dependentGuid] === undefined) {
          itemCounts[itemGuid][dependentGuid] = 0;
        }

        if (++itemCounts[itemGuid][dependentGuid] === 1 && numberOfDependentArrays === (0, _emberMetalKeys["default"])(itemCounts[itemGuid]).length) {
          array.addObject(item);
        }

        return array;
      },

      removedItem: function (array, item, changeMeta, instanceMeta) {
        var itemGuid = (0, _emberMetalUtils.guidFor)(item);
        var dependentGuid = (0, _emberMetalUtils.guidFor)(changeMeta.arrayChanged);
        var numberOfArraysItemAppearsIn;
        var itemCounts = instanceMeta.itemCounts;

        if (itemCounts[itemGuid][dependentGuid] === undefined) {
          itemCounts[itemGuid][dependentGuid] = 0;
        }

        if (--itemCounts[itemGuid][dependentGuid] === 0) {
          delete itemCounts[itemGuid][dependentGuid];
          numberOfArraysItemAppearsIn = (0, _emberMetalKeys["default"])(itemCounts[itemGuid]).length;

          if (numberOfArraysItemAppearsIn === 0) {
            delete itemCounts[itemGuid];
          }

          array.removeObject(item);
        }

        return array;
      }
    });

    return _emberRuntimeComputedArray_computed.arrayComputed.apply(null, args);
  }

  /**
    A computed property which returns a new array with all the
    properties from the first dependent array that are not in the second
    dependent array.
  
    Example
  
    ```javascript
    var Hamster = Ember.Object.extend({
      likes: ['banana', 'grape', 'kale'],
      wants: Ember.computed.setDiff('likes', 'fruits')
    });
  
    var hamster = Hamster.create({
      fruits: [
        'grape',
        'kale',
      ]
    });
  
    hamster.get('wants'); // ['banana']
    ```
  
    @method setDiff
    @for Ember.computed
    @param {String} setAProperty
    @param {String} setBProperty
    @return {Ember.ComputedProperty} computes a new array with all the
    items from the first dependent array that are not in the second
    dependent array
    @public
  */

  function setDiff(setAProperty, setBProperty) {
    if (arguments.length !== 2) {
      throw new _emberMetalError["default"]('setDiff requires exactly two dependent arrays.');
    }

    return (0, _emberRuntimeComputedArray_computed.arrayComputed)(setAProperty, setBProperty, {
      _suppressDeprecation: true,

      addedItem: function (array, item, changeMeta, instanceMeta) {
        var setA = (0, _emberMetalProperty_get.get)(this, setAProperty);
        var setB = (0, _emberMetalProperty_get.get)(this, setBProperty);

        if (changeMeta.arrayChanged === setA) {
          if (!setB.contains(item)) {
            array.addObject(item);
          }
        } else {
          array.removeObject(item);
        }

        return array;
      },

      removedItem: function (array, item, changeMeta, instanceMeta) {
        var setA = (0, _emberMetalProperty_get.get)(this, setAProperty);
        var setB = (0, _emberMetalProperty_get.get)(this, setBProperty);

        if (changeMeta.arrayChanged === setB) {
          if (setA.contains(item)) {
            array.addObject(item);
          }
        } else {
          array.removeObject(item);
        }

        return array;
      }
    });
  }

  function binarySearch(array, item, low, high) {
    var mid, midItem, res, guidMid, guidItem;

    if (arguments.length < 4) {
      high = (0, _emberMetalProperty_get.get)(array, 'length');
    }

    if (arguments.length < 3) {
      low = 0;
    }

    if (low === high) {
      return low;
    }

    mid = low + Math.floor((high - low) / 2);
    midItem = array.objectAt(mid);

    guidMid = (0, _emberMetalUtils.guidFor)(midItem);
    guidItem = (0, _emberMetalUtils.guidFor)(item);

    if (guidMid === guidItem) {
      return mid;
    }

    res = this.order(midItem, item);

    if (res === 0) {
      res = guidMid < guidItem ? -1 : 1;
    }

    if (res < 0) {
      return this.binarySearch(array, item, mid + 1, high);
    } else if (res > 0) {
      return this.binarySearch(array, item, low, mid);
    }

    return mid;
  }

  /**
    A computed property which returns a new array with all the
    properties from the first dependent array sorted based on a property
    or sort function.
  
    The callback method you provide should have the following signature:
  
    ```javascript
    function(itemA, itemB);
    ```
  
    - `itemA` the first item to compare.
    - `itemB` the second item to compare.
  
    This function should return negative number (e.g. `-1`) when `itemA` should come before
    `itemB`. It should return positive number (e.g. `1`) when `itemA` should come after
    `itemB`. If the `itemA` and `itemB` are equal this function should return `0`.
  
    Therefore, if this function is comparing some numeric values, simple `itemA - itemB` or
    `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of series of `if`.
  
    Example
  
    ```javascript
    var ToDoList = Ember.Object.extend({
      // using standard ascending sort
      todosSorting: ['name'],
      sortedTodos: Ember.computed.sort('todos', 'todosSorting'),
  
      // using descending sort
      todosSortingDesc: ['name:desc'],
      sortedTodosDesc: Ember.computed.sort('todos', 'todosSortingDesc'),
  
      // using a custom sort function
      priorityTodos: Ember.computed.sort('todos', function(a, b){
        if (a.priority > b.priority) {
          return 1;
        } else if (a.priority < b.priority) {
          return -1;
        }
  
        return 0;
      })
    });
  
    var todoList = ToDoList.create({todos: [
      { name: 'Unit Test', priority: 2 },
      { name: 'Documentation', priority: 3 },
      { name: 'Release', priority: 1 }
    ]});
  
    todoList.get('sortedTodos');      // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]
    todoList.get('sortedTodosDesc');  // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]
    todoList.get('priorityTodos');    // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]
    ```
  
    @method sort
    @for Ember.computed
    @param {String} itemsKey
    @param {String or Function} sortDefinition a dependent key to an
    array of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting
    @return {Ember.ComputedProperty} computes a new sorted array based
    on the sort property array or callback function
    @public
  */

  function sort(itemsKey, sortDefinition) {
    _emberMetalCore["default"].assert('Ember.computed.sort requires two arguments: an array key to sort and ' + 'either a sort properties key or sort function', arguments.length === 2);

    if (typeof sortDefinition === 'function') {
      return customSort(itemsKey, sortDefinition);
    } else {
      return propertySort(itemsKey, sortDefinition);
    }
  }

  function customSort(itemsKey, comparator) {
    return (0, _emberRuntimeComputedArray_computed.arrayComputed)(itemsKey, {
      _suppressDeprecation: true,

      initialize: function (array, changeMeta, instanceMeta) {
        instanceMeta.order = comparator;
        instanceMeta.binarySearch = binarySearch;
        instanceMeta.waitingInsertions = [];
        instanceMeta.insertWaiting = function () {
          var index, item;
          var waiting = instanceMeta.waitingInsertions;
          instanceMeta.waitingInsertions = [];
          for (var i = 0; i < waiting.length; i++) {
            item = waiting[i];
            index = instanceMeta.binarySearch(array, item);
            array.insertAt(index, item);
          }
        };
        instanceMeta.insertLater = function (item) {
          this.waitingInsertions.push(item);
        };
      },

      addedItem: function (array, item, changeMeta, instanceMeta) {
        instanceMeta.insertLater(item);
        return array;
      },

      removedItem: function (array, item, changeMeta, instanceMeta) {
        array.removeObject(item);
        return array;
      },

      flushedChanges: function (array, instanceMeta) {
        instanceMeta.insertWaiting();
      }
    });
  }

  function propertySort(itemsKey, sortPropertiesKey) {
    return (0, _emberRuntimeComputedArray_computed.arrayComputed)(itemsKey, {
      _suppressDeprecation: true,

      initialize: function (array, changeMeta, instanceMeta) {
        function setupSortProperties() {
          var sortPropertyDefinitions = (0, _emberMetalProperty_get.get)(this, sortPropertiesKey);
          var sortProperties = instanceMeta.sortProperties = [];
          var sortPropertyAscending = instanceMeta.sortPropertyAscending = {};
          var sortProperty, idx, asc;

          _emberMetalCore["default"].assert('Cannot sort: \'' + sortPropertiesKey + '\' is not an array.', (0, _emberMetalUtils.isArray)(sortPropertyDefinitions));

          changeMeta.property.clearItemPropertyKeys(itemsKey);

          (0, _emberMetalEnumerable_utils.forEach)(sortPropertyDefinitions, function (sortPropertyDefinition) {
            if ((idx = sortPropertyDefinition.indexOf(':')) !== -1) {
              sortProperty = sortPropertyDefinition.substring(0, idx);
              asc = sortPropertyDefinition.substring(idx + 1).toLowerCase() !== 'desc';
            } else {
              sortProperty = sortPropertyDefinition;
              asc = true;
            }

            sortProperties.push(sortProperty);
            sortPropertyAscending[sortProperty] = asc;
            changeMeta.property.itemPropertyKey(itemsKey, sortProperty);
          });

          this.addObserver(sortPropertiesKey + '.@each', this, updateSortPropertiesOnce);
        }

        function updateSortPropertiesOnce() {
          _emberMetalRun_loop["default"].once(this, updateSortProperties, changeMeta.propertyName);
        }

        function updateSortProperties(propertyName) {
          setupSortProperties.call(this);
          changeMeta.property.recomputeOnce.call(this, propertyName);
        }

        (0, _emberMetalObserver.addObserver)(this, sortPropertiesKey, updateSortPropertiesOnce);
        setupSortProperties.call(this);

        instanceMeta.order = function (itemA, itemB) {
          var sortProperty, result, asc;
          var keyA = this.keyFor(itemA);
          var keyB = this.keyFor(itemB);

          for (var i = 0; i < this.sortProperties.length; ++i) {
            sortProperty = this.sortProperties[i];

            result = (0, _emberRuntimeCompare["default"])(keyA[sortProperty], keyB[sortProperty]);

            if (result !== 0) {
              asc = this.sortPropertyAscending[sortProperty];
              return asc ? result : -1 * result;
            }
          }

          return 0;
        };

        instanceMeta.binarySearch = binarySearch;
        setupKeyCache(instanceMeta);
      },

      addedItem: function (array, item, changeMeta, instanceMeta) {
        var index = instanceMeta.binarySearch(array, item);
        array.insertAt(index, item);
        return array;
      },

      removedItem: function (array, item, changeMeta, instanceMeta) {
        var index = instanceMeta.binarySearch(array, item);
        array.removeAt(index);
        instanceMeta.dropKeyFor(item);
        return array;
      }
    });
  }

  function setupKeyCache(instanceMeta) {
    instanceMeta.keyFor = function (item) {
      var guid = (0, _emberMetalUtils.guidFor)(item);
      if (this.keyCache[guid]) {
        return this.keyCache[guid];
      }
      var sortProperty;
      var key = {};
      for (var i = 0; i < this.sortProperties.length; ++i) {
        sortProperty = this.sortProperties[i];
        key[sortProperty] = (0, _emberMetalProperty_get.get)(item, sortProperty);
      }
      return this.keyCache[guid] = key;
    };

    instanceMeta.dropKeyFor = function (item) {
      var guid = (0, _emberMetalUtils.guidFor)(item);
      this.keyCache[guid] = null;
    };

    instanceMeta.keyCache = {};
  }
});
/**
@module ember
@submodule ember-runtime
*/

// Ember.assert
enifed('ember-runtime/controllers/array_controller', ['exports', 'ember-metal/core', 'ember-metal/property_get', 'ember-metal/enumerable_utils', 'ember-runtime/system/array_proxy', 'ember-runtime/mixins/sortable', 'ember-runtime/mixins/controller', 'ember-metal/computed', 'ember-metal/error', 'ember-runtime/mixins/array'], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalEnumerable_utils, _emberRuntimeSystemArray_proxy, _emberRuntimeMixinsSortable, _emberRuntimeMixinsController, _emberMetalComputed, _emberMetalError, _emberRuntimeMixinsArray) {
  var arrayControllerDeprecation = '`Ember.ArrayController` is deprecated.';

  exports.arrayControllerDeprecation = arrayControllerDeprecation;
  /**
    `Ember.ArrayController` provides a way for you to publish a collection of
    objects so that you can easily bind to the collection from a Handlebars
    `#each` helper, an `Ember.CollectionView`, or other controllers.
  
    The advantage of using an `ArrayController` is that you only have to set up
    your view bindings once; to change what's displayed, simply swap out the
    `model` property on the controller.
  
    For example, imagine you wanted to display a list of items fetched via an XHR
    request. Create an `Ember.ArrayController` and set its `model` property:
  
    ```javascript
    MyApp.listController = Ember.ArrayController.create();
  
    $.get('people.json', function(data) {
      MyApp.listController.set('model', data);
    });
    ```
  
    Then, create a view that binds to your new controller:
  
    ```handlebars
    {{#each MyApp.listController as |person|}}
      {{person.firstName}} {{person.lastName}}
    {{/each}}
    ```
  
    Although you are binding to the controller, the behavior of this controller
    is to pass through any methods or properties to the underlying array. This
    capability comes from `Ember.ArrayProxy`, which this class inherits from.
  
    Sometimes you want to display computed properties within the body of an
    `#each` helper that depend on the underlying items in `model`, but are not
    present on those items.   To do this, set `itemController` to the name of a
    controller (probably an `ObjectController`) that will wrap each individual item.
  
    For example:
  
    ```handlebars
    {{#each controller as |post|}}
      <li>{{post.title}} ({{post.titleLength}} characters)</li>
    {{/each}}
    ```
  
    ```javascript
    App.PostsController = Ember.ArrayController.extend({
      itemController: 'post'
    });
  
    App.PostController = Ember.ObjectController.extend({
      // the `title` property will be proxied to the underlying post.
      titleLength: function() {
        return this.get('title').length;
      }.property('title')
    });
    ```
  
    In some cases it is helpful to return a different `itemController` depending
    on the particular item.  Subclasses can do this by overriding
    `lookupItemController`.
  
    For example:
  
    ```javascript
    App.MyArrayController = Ember.ArrayController.extend({
      lookupItemController: function( object ) {
        if (object.get('isSpecial')) {
          return "special"; // use App.SpecialController
        } else {
          return "regular"; // use App.RegularController
        }
      }
    });
    ```
  
    The itemController instances will have a `parentController` property set to
    the `ArrayController` instance.
  
    @class ArrayController
    @namespace Ember
    @extends Ember.ArrayProxy
    @uses Ember.SortableMixin
    @uses Ember.ControllerMixin
    @deprecated
    @public
  */

  exports["default"] = _emberRuntimeSystemArray_proxy["default"].extend(_emberRuntimeMixinsController["default"], _emberRuntimeMixinsSortable["default"], {

    /**
      A string containing the controller name used to wrap items.
       For example:
       ```javascript
      App.MyArrayController = Ember.ArrayController.extend({
        itemController: 'myItem' // use App.MyItemController
      });
      ```
       @property itemController
      @type String
      @default null
      @private
    */
    itemController: null,

    /**
      Return the name of the controller to wrap items, or `null` if items should
      be returned directly.  The default implementation simply returns the
      `itemController` property, but subclasses can override this method to return
      different controllers for different objects.
       For example:
       ```javascript
      App.MyArrayController = Ember.ArrayController.extend({
        lookupItemController: function( object ) {
          if (object.get('isSpecial')) {
            return "special"; // use App.SpecialController
          } else {
            return "regular"; // use App.RegularController
          }
        }
      });
      ```
       @method lookupItemController
      @param {Object} object
      @return {String}
      @private
    */
    lookupItemController: function (object) {
      return (0, _emberMetalProperty_get.get)(this, 'itemController');
    },

    objectAtContent: function (idx) {
      var length = (0, _emberMetalProperty_get.get)(this, 'length');
      var arrangedContent = (0, _emberMetalProperty_get.get)(this, 'arrangedContent');
      var object = arrangedContent && arrangedContent.objectAt(idx);
      var controllerClass;

      if (idx >= 0 && idx < length) {
        controllerClass = this.lookupItemController(object);

        if (controllerClass) {
          return this.controllerAt(idx, object, controllerClass);
        }
      }

      // When `controllerClass` is falsy, we have not opted in to using item
      // controllers, so return the object directly.

      // When the index is out of range, we want to return the "out of range"
      // value, whatever that might be.  Rather than make assumptions
      // (e.g. guessing `null` or `undefined`) we defer this to `arrangedContent`.
      return object;
    },

    arrangedContentDidChange: function () {
      this._super.apply(this, arguments);
      this._resetSubControllers();
    },

    arrayContentDidChange: function (idx, removedCnt, addedCnt) {
      var subControllers = this._subControllers;

      if (subControllers.length) {
        var subControllersToRemove = subControllers.slice(idx, idx + removedCnt);

        (0, _emberMetalEnumerable_utils.forEach)(subControllersToRemove, function (subController) {
          if (subController) {
            subController.destroy();
          }
        });

        (0, _emberMetalEnumerable_utils.replace)(subControllers, idx, removedCnt, new Array(addedCnt));
      }

      // The shadow array of subcontrollers must be updated before we trigger
      // observers, otherwise observers will get the wrong subcontainer when
      // calling `objectAt`
      this._super(idx, removedCnt, addedCnt);
    },

    init: function () {
      _emberMetalCore["default"].deprecate(arrayControllerDeprecation);
      this._super.apply(this, arguments);
      this._subControllers = [];
    },

    model: (0, _emberMetalComputed.computed)({
      get: function (key) {
        return _emberMetalCore["default"].A();
      },
      set: function (key, value) {
        _emberMetalCore["default"].assert('ArrayController expects `model` to implement the Ember.Array mixin. ' + 'This can often be fixed by wrapping your model with `Ember.A()`.', _emberRuntimeMixinsArray["default"].detect(value) || !value);

        return value;
      }
    }),

    /**
      Flag to mark as being "virtual". Used to keep this instance
      from participating in the parentController hierarchy.
       @private
      @property _isVirtual
      @type Boolean
    */
    _isVirtual: false,

    controllerAt: function (idx, object, controllerClass) {
      var container = (0, _emberMetalProperty_get.get)(this, 'container');
      var subControllers = this._subControllers;
      var fullName, subController, parentController;

      if (subControllers.length > idx) {
        subController = subControllers[idx];

        if (subController) {
          return subController;
        }
      }

      if (this._isVirtual) {
        parentController = (0, _emberMetalProperty_get.get)(this, 'parentController');
      } else {
        parentController = this;
      }

      fullName = 'controller:' + controllerClass;

      if (!container._registry.has(fullName)) {
        throw new _emberMetalError["default"]('Could not resolve itemController: "' + controllerClass + '"');
      }

      subController = container.lookupFactory(fullName).create({
        target: parentController,
        parentController: parentController,
        model: object
      });

      subControllers[idx] = subController;

      return subController;
    },

    _subControllers: null,

    _resetSubControllers: function () {
      var controller;
      var subControllers = this._subControllers;

      if (subControllers.length) {
        for (var i = 0, length = subControllers.length; length > i; i++) {
          controller = subControllers[i];

          if (controller) {
            controller.destroy();
          }
        }

        subControllers.length = 0;
      }
    },

    willDestroy: function () {
      this._resetSubControllers();
      this._super.apply(this, arguments);
    }
  });
});
/**
@module ember
@submodule ember-runtime
*/
enifed('ember-runtime/controllers/controller', ['exports', 'ember-metal/core', 'ember-runtime/system/object', 'ember-runtime/mixins/controller', 'ember-runtime/inject'], function (exports, _emberMetalCore, _emberRuntimeSystemObject, _emberRuntimeMixinsController, _emberRuntimeInject) {

  /**
  @module ember
  @submodule ember-runtime
  */

  /**
    @class Controller
    @namespace Ember
    @extends Ember.Object
    @uses Ember.ControllerMixin
    @public
  */
  var Controller = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsController["default"]);

  function controllerInjectionHelper(factory) {
    _emberMetalCore["default"].assert('Defining an injected controller property on a ' + 'non-controller is not allowed.', _emberRuntimeMixinsController["default"].detect(factory.PrototypeMixin));
  }

  /**
    Creates a property that lazily looks up another controller in the container.
    Can only be used when defining another controller.
  
    Example:
  
    ```javascript
    App.PostController = Ember.Controller.extend({
      posts: Ember.inject.controller()
    });
    ```
  
    This example will create a `posts` property on the `post` controller that
    looks up the `posts` controller in the container, making it easy to
    reference other controllers. This is functionally equivalent to:
  
    ```javascript
    App.PostController = Ember.Controller.extend({
      needs: 'posts',
      posts: Ember.computed.alias('controllers.posts')
    });
    ```
  
    @method controller
    @since 1.10.0
    @for Ember.inject
    @param {String} name (optional) name of the controller to inject, defaults
           to the property's name
    @return {Ember.InjectedProperty} injection descriptor instance
    @private
  */
  (0, _emberRuntimeInject.createInjectionHelper)('controller', controllerInjectionHelper);

  exports["default"] = Controller;
});
// Ember.assert
enifed('ember-runtime/controllers/object_controller', ['exports', 'ember-metal/core', 'ember-runtime/mixins/controller', 'ember-runtime/system/object_proxy'], function (exports, _emberMetalCore, _emberRuntimeMixinsController, _emberRuntimeSystemObject_proxy) {
  var objectControllerDeprecation = 'Ember.ObjectController is deprecated, ' + 'please use Ember.Controller and use `model.propertyName`.';

  exports.objectControllerDeprecation = objectControllerDeprecation;
  /**
  @module ember
  @submodule ember-runtime
  */

  /**
    `Ember.ObjectController` is part of Ember's Controller layer. It is intended
    to wrap a single object, proxying unhandled attempts to `get` and `set` to the underlying
    model object, and to forward unhandled action attempts to its `target`.
  
    `Ember.ObjectController` derives this functionality from its superclass
    `Ember.ObjectProxy` and the `Ember.ControllerMixin` mixin.
  
    @class ObjectController
    @namespace Ember
    @extends Ember.ObjectProxy
    @uses Ember.ControllerMixin
    @deprecated
    @public
  **/
  exports["default"] = _emberRuntimeSystemObject_proxy["default"].extend(_emberRuntimeMixinsController["default"], {
    init: function () {
      this._super();
      _emberMetalCore["default"].deprecate(objectControllerDeprecation, this.isGenerated);
    }
  });
});
enifed('ember-runtime/copy', ['exports', 'ember-metal/enumerable_utils', 'ember-metal/utils', 'ember-runtime/system/object', 'ember-runtime/mixins/copyable'], function (exports, _emberMetalEnumerable_utils, _emberMetalUtils, _emberRuntimeSystemObject, _emberRuntimeMixinsCopyable) {
  exports["default"] = copy;

  function _copy(obj, deep, seen, copies) {
    var ret, loc, key;

    // primitive data types are immutable, just return them.
    if (typeof obj !== 'object' || obj === null) {
      return obj;
    }

    // avoid cyclical loops
    if (deep && (loc = (0, _emberMetalEnumerable_utils.indexOf)(seen, obj)) >= 0) {
      return copies[loc];
    }

    Ember.assert('Cannot clone an Ember.Object that does not implement Ember.Copyable', !(obj instanceof _emberRuntimeSystemObject["default"]) || _emberRuntimeMixinsCopyable["default"] && _emberRuntimeMixinsCopyable["default"].detect(obj));

    // IMPORTANT: this specific test will detect a native array only. Any other
    // object will need to implement Copyable.
    if ((0, _emberMetalUtils.isArray)(obj)) {
      ret = obj.slice();

      if (deep) {
        loc = ret.length;

        while (--loc >= 0) {
          ret[loc] = _copy(ret[loc], deep, seen, copies);
        }
      }
    } else if (_emberRuntimeMixinsCopyable["default"] && _emberRuntimeMixinsCopyable["default"].detect(obj)) {
      ret = obj.copy(deep, seen, copies);
    } else if (obj instanceof Date) {
      ret = new Date(obj.getTime());
    } else {
      ret = {};

      for (key in obj) {
        // support Null prototype
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }

        // Prevents browsers that don't respect non-enumerability from
        // copying internal Ember properties
        if (key.substring(0, 2) === '__') {
          continue;
        }

        ret[key] = deep ? _copy(obj[key], deep, seen, copies) : obj[key];
      }
    }

    if (deep) {
      seen.push(obj);
      copies.push(ret);
    }

    return ret;
  }

  /**
    Creates a clone of the passed object. This function can take just about
    any type of object and create a clone of it, including primitive values
    (which are not actually cloned because they are immutable).
  
    If the passed object implements the `copy()` method, then this function
    will simply call that method and return the result. Please see
    `Ember.Copyable` for further details.
  
    @method copy
    @for Ember
    @param {Object} obj The object to clone
    @param {Boolean} deep If true, a deep copy of the object is made
    @return {Object} The cloned object
    @public
  */

  function copy(obj, deep) {
    // fast paths
    if ('object' !== typeof obj || obj === null) {
      return obj; // can't copy primitives
    }

    if (_emberRuntimeMixinsCopyable["default"] && _emberRuntimeMixinsCopyable["default"].detect(obj)) {
      return obj.copy(deep);
    }

    return _copy(obj, deep, deep ? [] : null, deep ? [] : null);
  }
});
enifed('ember-runtime/core', ['exports'], function (exports) {
  exports.isEqual = isEqual;
  /**
  @module ember
  @submodule ember-runtime
  */

  /**
    Compares two objects, returning true if they are logically equal. This is
    a deeper comparison than a simple triple equal. For sets it will compare the
    internal objects. For any other object that implements `isEqual()` it will
    respect that method.
  
    ```javascript
    Ember.isEqual('hello', 'hello');  // true
    Ember.isEqual(1, 2);              // false
    Ember.isEqual([4, 2], [4, 2]);    // false
    ```
  
    @method isEqual
    @for Ember
    @param {Object} a first object to compare
    @param {Object} b second object to compare
    @return {Boolean}
    @public
  */

  function isEqual(a, b) {
    if (a && typeof a.isEqual === 'function') {
      return a.isEqual(b);
    }

    if (a instanceof Date && b instanceof Date) {
      return a.getTime() === b.getTime();
    }

    return a === b;
  }
});
enifed('ember-runtime/ext/function', ['exports', 'ember-metal/core', 'ember-metal/expand_properties', 'ember-metal/computed', 'ember-metal/mixin'], function (exports, _emberMetalCore, _emberMetalExpand_properties, _emberMetalComputed, _emberMetalMixin) {

  var a_slice = Array.prototype.slice;
  var FunctionPrototype = Function.prototype;

  if (_emberMetalCore["default"].EXTEND_PROTOTYPES === true || _emberMetalCore["default"].EXTEND_PROTOTYPES.Function) {

    /**
      The `property` extension of Javascript's Function prototype is available
      when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
      `true`, which is the default.
       Computed properties allow you to treat a function like a property:
       ```javascript
      MyApp.President = Ember.Object.extend({
        firstName: '',
        lastName:  '',
         fullName: function() {
          return this.get('firstName') + ' ' + this.get('lastName');
        }.property() // Call this flag to mark the function as a property
      });
       var president = MyApp.President.create({
        firstName: 'Barack',
        lastName: 'Obama'
      });
       president.get('fullName'); // 'Barack Obama'
      ```
       Treating a function like a property is useful because they can work with
      bindings, just like any other property.
       Many computed properties have dependencies on other properties. For
      example, in the above example, the `fullName` property depends on
      `firstName` and `lastName` to determine its value. You can tell Ember
      about these dependencies like this:
       ```javascript
      MyApp.President = Ember.Object.extend({
        firstName: '',
        lastName:  '',
         fullName: function() {
          return this.get('firstName') + ' ' + this.get('lastName');
           // Tell Ember.js that this computed property depends on firstName
          // and lastName
        }.property('firstName', 'lastName')
      });
      ```
       Make sure you list these dependencies so Ember knows when to update
      bindings that connect to a computed property. Changing a dependency
      will not immediately trigger an update of the computed property, but
      will instead clear the cache so that it is updated when the next `get`
      is called on the property.
       See [Ember.ComputedProperty](/api/classes/Ember.ComputedProperty.html), [Ember.computed](/api/#method_computed).
       @method property
      @for Function
      @public
    */
    FunctionPrototype.property = function () {
      var ret = (0, _emberMetalComputed.computed)(this);
      // ComputedProperty.prototype.property expands properties; no need for us to
      // do so here.
      return ret.property.apply(ret, arguments);
    };

    /**
      The `observes` extension of Javascript's Function prototype is available
      when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
      true, which is the default.
       You can observe property changes simply by adding the `observes`
      call to the end of your method declarations in classes that you write.
      For example:
       ```javascript
      Ember.Object.extend({
        valueObserver: function() {
          // Executes whenever the "value" property changes
        }.observes('value')
      });
      ```
       In the future this method may become asynchronous. If you want to ensure
      synchronous behavior, use `observesImmediately`.
       See `Ember.observer`.
       @method observes
      @for Function
      @public
    */
    FunctionPrototype.observes = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      args.push(this);
      return _emberMetalMixin.observer.apply(this, args);
    };

    /**
      The `observesImmediately` extension of Javascript's Function prototype is
      available when `Ember.EXTEND_PROTOTYPES` or
      `Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.
       You can observe property changes simply by adding the `observesImmediately`
      call to the end of your method declarations in classes that you write.
      For example:
       ```javascript
      Ember.Object.extend({
        valueObserver: function() {
          // Executes immediately after the "value" property changes
        }.observesImmediately('value')
      });
      ```
       In the future, `observes` may become asynchronous. In this event,
      `observesImmediately` will maintain the synchronous behavior.
       See `Ember.immediateObserver`.
       @method observesImmediately
      @for Function
      @private
    */
    FunctionPrototype.observesImmediately = function () {
      _emberMetalCore["default"].assert('Immediate observers must observe internal properties only, ' + 'not properties on other objects.', function checkIsInternalProperty() {
        for (var i = 0, l = arguments.length; i < l; i++) {
          if (arguments[i].indexOf('.') !== -1) {
            return false;
          }
        }
        return true;
      });

      // observes handles property expansion
      return this.observes.apply(this, arguments);
    };

    /**
      The `observesBefore` extension of Javascript's Function prototype is
      available when `Ember.EXTEND_PROTOTYPES` or
      `Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.
       You can get notified when a property change is about to happen by
      adding the `observesBefore` call to the end of your method
      declarations in classes that you write. For example:
       ```javascript
      Ember.Object.extend({
        valueObserver: function() {
          // Executes whenever the "value" property is about to change
        }.observesBefore('value')
      });
      ```
       See `Ember.beforeObserver`.
       @method observesBefore
      @for Function
      @private
    */
    FunctionPrototype.observesBefore = function () {
      var watched = [];
      var addWatchedProperty = function (obs) {
        watched.push(obs);
      };

      for (var i = 0, l = arguments.length; i < l; ++i) {
        (0, _emberMetalExpand_properties["default"])(arguments[i], addWatchedProperty);
      }

      this.__ember_observesBefore__ = watched;

      return this;
    };

    /**
      The `on` extension of Javascript's Function prototype is available
      when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
      true, which is the default.
       You can listen for events simply by adding the `on` call to the end of
      your method declarations in classes or mixins that you write. For example:
       ```javascript
      Ember.Mixin.create({
        doSomethingWithElement: function() {
          // Executes whenever the "didInsertElement" event fires
        }.on('didInsertElement')
      });
      ```
       See `Ember.on`.
       @method on
      @for Function
      @public
    */
    FunctionPrototype.on = function () {
      var events = a_slice.call(arguments);
      this.__ember_listens__ = events;

      return this;
    };
  }
});
/**
@module ember
@submodule ember-runtime
*/

// Ember.EXTEND_PROTOTYPES, Ember.assert
enifed('ember-runtime/ext/rsvp', ['exports', 'ember-metal/core', 'ember-metal/logger', 'ember-metal/run_loop', 'rsvp'], function (exports, _emberMetalCore, _emberMetalLogger, _emberMetalRun_loop, _rsvp) {
  exports.onerrorDefault = onerrorDefault;

  var testModuleName = 'ember-testing/test';
  var Test;

  var asyncStart = function () {
    if (_emberMetalCore["default"].Test && _emberMetalCore["default"].Test.adapter) {
      _emberMetalCore["default"].Test.adapter.asyncStart();
    }
  };

  var asyncEnd = function () {
    if (_emberMetalCore["default"].Test && _emberMetalCore["default"].Test.adapter) {
      _emberMetalCore["default"].Test.adapter.asyncEnd();
    }
  };

  _rsvp.configure('async', function (callback, promise) {
    var async = !_emberMetalRun_loop["default"].currentRunLoop;

    if (_emberMetalCore["default"].testing && async) {
      asyncStart();
    }

    _emberMetalRun_loop["default"].backburner.schedule('actions', function () {
      if (_emberMetalCore["default"].testing && async) {
        asyncEnd();
      }
      callback(promise);
    });
  });

  _rsvp.Promise.prototype.fail = function (callback, label) {
    _emberMetalCore["default"].deprecate('RSVP.Promise.fail has been renamed as RSVP.Promise.catch');
    return this['catch'](callback, label);
  };

  function onerrorDefault(e) {
    var error;

    if (e && e.errorThrown) {
      // jqXHR provides this
      error = e.errorThrown;
      if (typeof error === 'string') {
        error = new Error(error);
      }
      error.__reason_with_error_thrown__ = e;
    } else {
      error = e;
    }

    if (error && error.name !== 'TransitionAborted') {
      if (_emberMetalCore["default"].testing) {
        // ES6TODO: remove when possible
        if (!Test && _emberMetalCore["default"].__loader.registry[testModuleName]) {
          Test = requireModule(testModuleName)['default'];
        }

        if (Test && Test.adapter) {
          Test.adapter.exception(error);
          _emberMetalLogger["default"].error(error.stack);
        } else {
          throw error;
        }
      } else if (_emberMetalCore["default"].onerror) {
        _emberMetalCore["default"].onerror(error);
      } else {
        _emberMetalLogger["default"].error(error.stack);
      }
    }
  }

  _rsvp.on('error', onerrorDefault);

  exports["default"] = _rsvp;
});
/* globals RSVP:true */
enifed('ember-runtime/ext/string', ['exports', 'ember-metal/core', 'ember-runtime/system/string'], function (exports, _emberMetalCore, _emberRuntimeSystemString) {

  var StringPrototype = String.prototype;

  if (_emberMetalCore["default"].EXTEND_PROTOTYPES === true || _emberMetalCore["default"].EXTEND_PROTOTYPES.String) {

    /**
      See [Ember.String.fmt](/api/classes/Ember.String.html#method_fmt).
       @method fmt
      @for String
      @private
    */
    StringPrototype.fmt = function () {
      return (0, _emberRuntimeSystemString.fmt)(this, arguments);
    };

    /**
      See [Ember.String.w](/api/classes/Ember.String.html#method_w).
       @method w
      @for String
      @private
    */
    StringPrototype.w = function () {
      return (0, _emberRuntimeSystemString.w)(this);
    };

    /**
      See [Ember.String.loc](/api/classes/Ember.String.html#method_loc).
       @method loc
      @for String
      @private
    */
    StringPrototype.loc = function () {
      return (0, _emberRuntimeSystemString.loc)(this, arguments);
    };

    /**
      See [Ember.String.camelize](/api/classes/Ember.String.html#method_camelize).
       @method camelize
      @for String
      @private
    */
    StringPrototype.camelize = function () {
      return (0, _emberRuntimeSystemString.camelize)(this);
    };

    /**
      See [Ember.String.decamelize](/api/classes/Ember.String.html#method_decamelize).
       @method decamelize
      @for String
      @private
    */
    StringPrototype.decamelize = function () {
      return (0, _emberRuntimeSystemString.decamelize)(this);
    };

    /**
      See [Ember.String.dasherize](/api/classes/Ember.String.html#method_dasherize).
       @method dasherize
      @for String
      @private
    */
    StringPrototype.dasherize = function () {
      return (0, _emberRuntimeSystemString.dasherize)(this);
    };

    /**
      See [Ember.String.underscore](/api/classes/Ember.String.html#method_underscore).
       @method underscore
      @for String
      @private
    */
    StringPrototype.underscore = function () {
      return (0, _emberRuntimeSystemString.underscore)(this);
    };

    /**
      See [Ember.String.classify](/api/classes/Ember.String.html#method_classify).
       @method classify
      @for String
      @private
    */
    StringPrototype.classify = function () {
      return (0, _emberRuntimeSystemString.classify)(this);
    };

    /**
      See [Ember.String.capitalize](/api/classes/Ember.String.html#method_capitalize).
       @method capitalize
      @for String
      @private
    */
    StringPrototype.capitalize = function () {
      return (0, _emberRuntimeSystemString.capitalize)(this);
    };
  }
});
/**
@module ember
@submodule ember-runtime
*/

// Ember.EXTEND_PROTOTYPES, Ember.assert, Ember.FEATURES
enifed("ember-runtime/inject", ["exports", "ember-metal/core", "ember-metal/enumerable_utils", "ember-metal/injected_property", "ember-metal/keys"], function (exports, _emberMetalCore, _emberMetalEnumerable_utils, _emberMetalInjected_property, _emberMetalKeys) {
  exports.createInjectionHelper = createInjectionHelper;
  exports.validatePropertyInjections = validatePropertyInjections;

  /**
    Namespace for injection helper methods.
  
    @class inject
    @namespace Ember
    @static
    @public
  */
  function inject() {
    _emberMetalCore["default"].assert("Injected properties must be created through helpers, see `" + (0, _emberMetalKeys["default"])(inject).join("`, `") + "`");
  }

  // Dictionary of injection validations by type, added to by `createInjectionHelper`
  var typeValidators = {};

  /**
    This method allows other Ember modules to register injection helpers for a
    given container type. Helpers are exported to the `inject` namespace as the
    container type itself.
  
    @private
    @method createInjectionHelper
    @since 1.10.0
    @for Ember
    @param {String} type The container type the helper will inject
    @param {Function} validator A validation callback that is executed at mixin-time
  */

  function createInjectionHelper(type, validator) {
    typeValidators[type] = validator;

    inject[type] = function (name) {
      return new _emberMetalInjected_property["default"](type, name);
    };
  }

  /**
    Validation function that runs per-type validation functions once for each
    injected type encountered.
  
    @private
    @method validatePropertyInjections
    @since 1.10.0
    @for Ember
    @param {Object} factory The factory object
  */

  function validatePropertyInjections(factory) {
    var proto = factory.proto();
    var types = [];
    var key, desc, validator, i, l;

    for (key in proto) {
      desc = proto[key];
      if (desc instanceof _emberMetalInjected_property["default"] && (0, _emberMetalEnumerable_utils.indexOf)(types, desc.type) === -1) {
        types.push(desc.type);
      }
    }

    if (types.length) {
      for (i = 0, l = types.length; i < l; i++) {
        validator = typeValidators[types[i]];

        if (typeof validator === "function") {
          validator(factory);
        }
      }
    }

    return true;
  }

  exports["default"] = inject;
});
// Ember.assert
enifed("ember-runtime/mixins/-proxy", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/utils", "ember-metal/observer", "ember-metal/property_events", "ember-metal/computed", "ember-metal/properties", "ember-metal/mixin", "ember-runtime/system/string"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalUtils, _emberMetalObserver, _emberMetalProperty_events, _emberMetalComputed, _emberMetalProperties, _emberMetalMixin, _emberRuntimeSystemString) {

  function contentPropertyWillChange(content, contentKey) {
    var key = contentKey.slice(8); // remove "content."
    if (key in this) {
      return;
    } // if shadowed in proxy
    (0, _emberMetalProperty_events.propertyWillChange)(this, key);
  }

  function contentPropertyDidChange(content, contentKey) {
    var key = contentKey.slice(8); // remove "content."
    if (key in this) {
      return;
    } // if shadowed in proxy
    (0, _emberMetalProperty_events.propertyDidChange)(this, key);
  }

  /**
    `Ember.ProxyMixin` forwards all properties not defined by the proxy itself
    to a proxied `content` object.  See Ember.ObjectProxy for more details.
  
    @class ProxyMixin
    @namespace Ember
    @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create({
    /**
      The object whose properties will be forwarded.
       @property content
      @type Ember.Object
      @default null
      @private
    */
    content: null,
    _contentDidChange: (0, _emberMetalMixin.observer)("content", function () {
      _emberMetalCore["default"].assert("Can't set Proxy's content to itself", (0, _emberMetalProperty_get.get)(this, "content") !== this);
    }),

    isTruthy: _emberMetalComputed.computed.bool("content"),

    _debugContainerKey: null,

    willWatchProperty: function (key) {
      var contentKey = "content." + key;
      (0, _emberMetalObserver.addBeforeObserver)(this, contentKey, null, contentPropertyWillChange);
      (0, _emberMetalObserver.addObserver)(this, contentKey, null, contentPropertyDidChange);
    },

    didUnwatchProperty: function (key) {
      var contentKey = "content." + key;
      (0, _emberMetalObserver.removeBeforeObserver)(this, contentKey, null, contentPropertyWillChange);
      (0, _emberMetalObserver.removeObserver)(this, contentKey, null, contentPropertyDidChange);
    },

    unknownProperty: function (key) {
      var content = (0, _emberMetalProperty_get.get)(this, "content");
      if (content) {
        _emberMetalCore["default"].deprecate((0, _emberRuntimeSystemString.fmt)("You attempted to access `%@` from `%@`, but object proxying is deprecated. " + "Please use `model.%@` instead.", [key, this, key]), !this.isController);
        return (0, _emberMetalProperty_get.get)(content, key);
      }
    },

    setUnknownProperty: function (key, value) {
      var m = (0, _emberMetalUtils.meta)(this);
      if (m.proto === this) {
        // if marked as prototype then just defineProperty
        // rather than delegate
        (0, _emberMetalProperties.defineProperty)(this, key, null, value);
        return value;
      }

      var content = (0, _emberMetalProperty_get.get)(this, "content");
      _emberMetalCore["default"].assert((0, _emberRuntimeSystemString.fmt)("Cannot delegate set('%@', %@) to the 'content' property of" + " object proxy %@: its 'content' is undefined.", [key, value, this]), content);

      _emberMetalCore["default"].deprecate((0, _emberRuntimeSystemString.fmt)("You attempted to set `%@` from `%@`, but object proxying is deprecated. " + "Please use `model.%@` instead.", [key, this, key]), !this.isController);
      return (0, _emberMetalProperty_set.set)(content, key, value);
    }

  });
});
/**
@module ember
@submodule ember-runtime
*/

// Ember.assert
enifed("ember-runtime/mixins/action_handler", ["exports", "ember-metal/merge", "ember-metal/mixin", "ember-metal/property_get"], function (exports, _emberMetalMerge, _emberMetalMixin, _emberMetalProperty_get) {

  /**
    The `Ember.ActionHandler` mixin implements support for moving an `actions`
    property to an `_actions` property at extend time, and adding `_actions`
    to the object's mergedProperties list.
  
    `Ember.ActionHandler` is available on some familiar classes including
    `Ember.Route`, `Ember.View`, `Ember.Component`, and controllers such as
    `Ember.Controller` and `Ember.ObjectController`.
    (Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,
    and `Ember.Route` and available to the above classes through
    inheritance.)
  
    @class ActionHandler
    @namespace Ember
    @private
  */
  var ActionHandler = _emberMetalMixin.Mixin.create({
    mergedProperties: ["_actions"],

    /**
      The collection of functions, keyed by name, available on this
      `ActionHandler` as action targets.
       These functions will be invoked when a matching `{{action}}` is triggered
      from within a template and the application's current route is this route.
       Actions can also be invoked from other parts of your application
      via `ActionHandler#send`.
       The `actions` hash will inherit action handlers from
      the `actions` hash defined on extended parent classes
      or mixins rather than just replace the entire hash, e.g.:
       ```js
      App.CanDisplayBanner = Ember.Mixin.create({
        actions: {
          displayBanner: function(msg) {
            // ...
          }
        }
      });
       App.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {
        actions: {
          playMusic: function() {
            // ...
          }
        }
      });
       // `WelcomeRoute`, when active, will be able to respond
      // to both actions, since the actions hash is merged rather
      // then replaced when extending mixins / parent classes.
      this.send('displayBanner');
      this.send('playMusic');
      ```
       Within a Controller, Route, View or Component's action handler,
      the value of the `this` context is the Controller, Route, View or
      Component object:
       ```js
      App.SongRoute = Ember.Route.extend({
        actions: {
          myAction: function() {
            this.controllerFor("song");
            this.transitionTo("other.route");
            ...
          }
        }
      });
      ```
       It is also possible to call `this._super.apply(this, arguments)` from within an
      action handler if it overrides a handler defined on a parent
      class or mixin:
       Take for example the following routes:
       ```js
      App.DebugRoute = Ember.Mixin.create({
        actions: {
          debugRouteInformation: function() {
            console.debug("trololo");
          }
        }
      });
       App.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {
        actions: {
          debugRouteInformation: function() {
            // also call the debugRouteInformation of mixed in App.DebugRoute
            this._super.apply(this, arguments);
             // show additional annoyance
            window.alert(...);
          }
        }
      });
      ```
       ## Bubbling
       By default, an action will stop bubbling once a handler defined
      on the `actions` hash handles it. To continue bubbling the action,
      you must return `true` from the handler:
       ```js
      App.Router.map(function() {
        this.resource("album", function() {
          this.route("song");
        });
      });
       App.AlbumRoute = Ember.Route.extend({
        actions: {
          startPlaying: function() {
          }
        }
      });
       App.AlbumSongRoute = Ember.Route.extend({
        actions: {
          startPlaying: function() {
            // ...
             if (actionShouldAlsoBeTriggeredOnParentRoute) {
              return true;
            }
          }
        }
      });
      ```
       @property actions
      @type Object
      @default null
      @public
    */

    /**
      Moves `actions` to `_actions` at extend time. Note that this currently
      modifies the mixin themselves, which is technically dubious but
      is practically of little consequence. This may change in the future.
       @private
      @method willMergeMixin
    */
    willMergeMixin: function (props) {
      var hashName;

      if (!props._actions) {
        Ember.assert("'actions' should not be a function", typeof props.actions !== "function");

        if (!!props.actions && typeof props.actions === "object") {
          hashName = "actions";
        } else if (!!props.events && typeof props.events === "object") {
          Ember.deprecate("Action handlers contained in an `events` object are deprecated in favor" + " of putting them in an `actions` object", false);
          hashName = "events";
        }

        if (hashName) {
          props._actions = (0, _emberMetalMerge["default"])(props._actions || {}, props[hashName]);
        }

        delete props[hashName];
      }
    },

    /**
      Triggers a named action on the `ActionHandler`. Any parameters
      supplied after the `actionName` string will be passed as arguments
      to the action target function.
       If the `ActionHandler` has its `target` property set, actions may
      bubble to the `target`. Bubbling happens when an `actionName` can
      not be found in the `ActionHandler`'s `actions` hash or if the
      action target function returns `true`.
       Example
       ```js
      App.WelcomeRoute = Ember.Route.extend({
        actions: {
          playTheme: function() {
             this.send('playMusic', 'theme.mp3');
          },
          playMusic: function(track) {
            // ...
          }
        }
      });
      ```
       @method send
      @param {String} actionName The action to trigger
      @param {*} context a context to send with the action
      @public
    */
    send: function (actionName) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var target;

      if (this._actions && this._actions[actionName]) {
        var shouldBubble = this._actions[actionName].apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }

      if (target = (0, _emberMetalProperty_get.get)(this, "target")) {
        Ember.assert("The `target` for " + this + " (" + target + ") does not have a `send` method", typeof target.send === "function");
        target.send.apply(target, arguments);
      }
    }
  });

  exports["default"] = ActionHandler;
});
/**
@module ember
@submodule ember-runtime
*/
enifed('ember-runtime/mixins/array', ['exports', 'ember-metal/core', 'ember-metal/property_get', 'ember-metal/computed', 'ember-metal/is_none', 'ember-runtime/mixins/enumerable', 'ember-metal/enumerable_utils', 'ember-metal/mixin', 'ember-metal/property_events', 'ember-metal/events', 'ember-metal/watching'], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalComputed, _emberMetalIs_none, _emberRuntimeMixinsEnumerable, _emberMetalEnumerable_utils, _emberMetalMixin, _emberMetalProperty_events, _emberMetalEvents, _emberMetalWatching) {

  function arrayObserversHelper(obj, target, opts, operation, notify) {
    var willChange = opts && opts.willChange || 'arrayWillChange';
    var didChange = opts && opts.didChange || 'arrayDidChange';
    var hasObservers = (0, _emberMetalProperty_get.get)(obj, 'hasArrayObservers');

    if (hasObservers === notify) {
      (0, _emberMetalProperty_events.propertyWillChange)(obj, 'hasArrayObservers');
    }

    operation(obj, '@array:before', target, willChange);
    operation(obj, '@array:change', target, didChange);

    if (hasObservers === notify) {
      (0, _emberMetalProperty_events.propertyDidChange)(obj, 'hasArrayObservers');
    }

    return obj;
  }

  // ..........................................................
  // ARRAY
  //
  /**
    This mixin implements Observer-friendly Array-like behavior. It is not a
    concrete implementation, but it can be used up by other classes that want
    to appear like arrays.
  
    For example, ArrayProxy and ArrayController are both concrete classes that can
    be instantiated to implement array-like behavior. Both of these classes use
    the Array Mixin by way of the MutableArray mixin, which allows observable
    changes to be made to the underlying array.
  
    Unlike `Ember.Enumerable,` this mixin defines methods specifically for
    collections that provide index-ordered access to their contents. When you
    are designing code that needs to accept any kind of Array-like object, you
    should use these methods instead of Array primitives because these will
    properly notify observers of changes to the array.
  
    Although these methods are efficient, they do add a layer of indirection to
    your application so it is a good idea to use them only when you need the
    flexibility of using both true JavaScript arrays and "virtual" arrays such
    as controllers and collections.
  
    You can use the methods defined in this module to access and modify array
    contents in a KVO-friendly way. You can also be notified whenever the
    membership of an array changes by using `.observes('myArray.[]')`.
  
    To support `Ember.Array` in your own class, you must override two
    primitives to use it: `replace()` and `objectAt()`.
  
    Note that the Ember.Array mixin also incorporates the `Ember.Enumerable`
    mixin. All `Ember.Array`-like objects are also enumerable.
  
    @class Array
    @namespace Ember
    @uses Ember.Enumerable
    @since Ember 0.9.0
    @public
  */
  exports["default"] = _emberMetalMixin.Mixin.create(_emberRuntimeMixinsEnumerable["default"], {

    /**
      __Required.__ You must implement this method to apply this mixin.
       Your array must support the `length` property. Your replace methods should
      set this property whenever it changes.
       @property {Number} length
      @public
    */
    length: null,

    /**
      Returns the object at the given `index`. If the given `index` is negative
      or is greater or equal than the array length, returns `undefined`.
       This is one of the primitives you must implement to support `Ember.Array`.
      If your object supports retrieving the value of an array item using `get()`
      (i.e. `myArray.get(0)`), then you do not need to implement this method
      yourself.
       ```javascript
      var arr = ['a', 'b', 'c', 'd'];
       arr.objectAt(0);   // 'a'
      arr.objectAt(3);   // 'd'
      arr.objectAt(-1);  // undefined
      arr.objectAt(4);   // undefined
      arr.objectAt(5);   // undefined
      ```
       @method objectAt
      @param {Number} idx The index of the item to return.
      @return {*} item at index or undefined
      @public
    */
    objectAt: function (idx) {
      if (idx < 0 || idx >= (0, _emberMetalProperty_get.get)(this, 'length')) {
        return undefined;
      }

      return (0, _emberMetalProperty_get.get)(this, idx);
    },

    /**
      This returns the objects at the specified indexes, using `objectAt`.
       ```javascript
      var arr = ['a', 'b', 'c', 'd'];
       arr.objectsAt([0, 1, 2]);  // ['a', 'b', 'c']
      arr.objectsAt([2, 3, 4]);  // ['c', 'd', undefined]
      ```
       @method objectsAt
      @param {Array} indexes An array of indexes of items to return.
      @return {Array}
      @public
     */
    objectsAt: function (indexes) {
      var self = this;

      return (0, _emberMetalEnumerable_utils.map)(indexes, function (idx) {
        return self.objectAt(idx);
      });
    },

    // overrides Ember.Enumerable version
    nextObject: function (idx) {
      return this.objectAt(idx);
    },

    /**
      This is the handler for the special array content property. If you get
      this property, it will return this. If you set this property to a new
      array, it will replace the current content.
       This property overrides the default property defined in `Ember.Enumerable`.
       @property []
      @return this
      @public
    */
    '[]': (0, _emberMetalComputed.computed)({
      get: function (key) {
        return this;
      },
      set: function (key, value) {
        this.replace(0, (0, _emberMetalProperty_get.get)(this, 'length'), value);
        return this;
      }
    }),

    firstObject: (0, _emberMetalComputed.computed)(function () {
      return this.objectAt(0);
    }),

    lastObject: (0, _emberMetalComputed.computed)(function () {
      return this.objectAt((0, _emberMetalProperty_get.get)(this, 'length') - 1);
    }),

    // optimized version from Enumerable
    contains: function (obj) {
      return this.indexOf(obj) >= 0;
    },

    // Add any extra methods to Ember.Array that are native to the built-in Array.
    /**
      Returns a new array that is a slice of the receiver. This implementation
      uses the observable array methods to retrieve the objects for the new
      slice.
       ```javascript
      var arr = ['red', 'green', 'blue'];
       arr.slice(0);       // ['red', 'green', 'blue']
      arr.slice(0, 2);    // ['red', 'green']
      arr.slice(1, 100);  // ['green', 'blue']
      ```
       @method slice
      @param {Number} beginIndex (Optional) index to begin slicing from.
      @param {Number} endIndex (Optional) index to end the slice at (but not included).
      @return {Array} New array with specified slice
      @public
    */
    slice: function (beginIndex, endIndex) {
      var ret = _emberMetalCore["default"].A();
      var length = (0, _emberMetalProperty_get.get)(this, 'length');

      if ((0, _emberMetalIs_none["default"])(beginIndex)) {
        beginIndex = 0;
      }

      if ((0, _emberMetalIs_none["default"])(endIndex) || endIndex > length) {
        endIndex = length;
      }

      if (beginIndex < 0) {
        beginIndex = length + beginIndex;
      }

      if (endIndex < 0) {
        endIndex = length + endIndex;
      }

      while (beginIndex < endIndex) {
        ret[ret.length] = this.objectAt(beginIndex++);
      }

      return ret;
    },

    /**
      Returns the index of the given object's first occurrence.
      If no `startAt` argument is given, the starting location to
      search is 0. If it's negative, will count backward from
      the end of the array. Returns -1 if no match is found.
       ```javascript
      var arr = ['a', 'b', 'c', 'd', 'a'];
       arr.indexOf('a');       //  0
      arr.indexOf('z');       // -1
      arr.indexOf('a', 2);    //  4
      arr.indexOf('a', -1);   //  4
      arr.indexOf('b', 3);    // -1
      arr.indexOf('a', 100);  // -1
      ```
       @method indexOf
      @param {Object} object the item to search for
      @param {Number} startAt optional starting location to search, default 0
      @return {Number} index or -1 if not found
      @public
    */
    indexOf: function (object, startAt) {
      var len = (0, _emberMetalProperty_get.get)(this, 'length');
      var idx;

      if (startAt === undefined) {
        startAt = 0;
      }

      if (startAt < 0) {
        startAt += len;
      }

      for (idx = startAt; idx < len; idx++) {
        if (this.objectAt(idx) === object) {
          return idx;
        }
      }

      return -1;
    },

    /**
      Returns the index of the given object's last occurrence.
      If no `startAt` argument is given, the search starts from
      the last position. If it's negative, will count backward
      from the end of the array. Returns -1 if no match is found.
       ```javascript
      var arr = ['a', 'b', 'c', 'd', 'a'];
       arr.lastIndexOf('a');       //  4
      arr.lastIndexOf('z');       // -1
      arr.lastIndexOf('a', 2);    //  0
      arr.lastIndexOf('a', -1);   //  4
      arr.lastIndexOf('b', 3);    //  1
      arr.lastIndexOf('a', 100);  //  4
      ```
       @method lastIndexOf
      @param {Object} object the item to search for
      @param {Number} startAt optional starting location to search, default 0
      @return {Number} index or -1 if not found
      @public
    */
    lastIndexOf: function (object, startAt) {
      var len = (0, _emberMetalProperty_get.get)(this, 'length');
      var idx;

      if (startAt === undefined || startAt >= len) {
        startAt = len - 1;
      }

      if (startAt < 0) {
        startAt += len;
      }

      for (idx = startAt; idx >= 0; idx--) {
        if (this.objectAt(idx) === object) {
          return idx;
        }
      }

      return -1;
    },

    // ..........................................................
    // ARRAY OBSERVERS
    //

    /**
      Adds an array observer to the receiving array. The array observer object
      normally must implement two methods:
       * `arrayWillChange(observedObj, start, removeCount, addCount)` - This method will be
        called just before the array is modified.
      * `arrayDidChange(observedObj, start, removeCount, addCount)` - This method will be
        called just after the array is modified.
       Both callbacks will be passed the observed object, starting index of the
      change as well a a count of the items to be removed and added. You can use
      these callbacks to optionally inspect the array during the change, clear
      caches, or do any other bookkeeping necessary.
       In addition to passing a target, you can also include an options hash
      which you can use to override the method names that will be invoked on the
      target.
       @method addArrayObserver
      @param {Object} target The observer object.
      @param {Object} opts Optional hash of configuration options including
        `willChange` and `didChange` option.
      @return {Ember.Array} receiver
      @public
    */

    addArrayObserver: function (target, opts) {
      return arrayObserversHelper(this, target, opts, _emberMetalEvents.addListener, false);
    },

    /**
      Removes an array observer from the object if the observer is current
      registered. Calling this method multiple times with the same object will
      have no effect.
       @method removeArrayObserver
      @param {Object} target The object observing the array.
      @param {Object} opts Optional hash of configuration options including
        `willChange` and `didChange` option.
      @return {Ember.Array} receiver
      @public
    */
    removeArrayObserver: function (target, opts) {
      return arrayObserversHelper(this, target, opts, _emberMetalEvents.removeListener, true);
    },

    /**
      Becomes true whenever the array currently has observers watching changes
      on the array.
       @property {Boolean} hasArrayObservers
      @public
    */
    hasArrayObservers: (0, _emberMetalComputed.computed)(function () {
      return (0, _emberMetalEvents.hasListeners)(this, '@array:change') || (0, _emberMetalEvents.hasListeners)(this, '@array:before');
    }),

    /**
      If you are implementing an object that supports `Ember.Array`, call this
      method just before the array content changes to notify any observers and
      invalidate any related properties. Pass the starting index of the change
      as well as a delta of the amounts to change.
       @method arrayContentWillChange
      @param {Number} startIdx The starting index in the array that will change.
      @param {Number} removeAmt The number of items that will be removed. If you
        pass `null` assumes 0
      @param {Number} addAmt The number of items that will be added. If you
        pass `null` assumes 0.
      @return {Ember.Array} receiver
      @public
    */
    arrayContentWillChange: function (startIdx, removeAmt, addAmt) {
      var removing, lim;

      // if no args are passed assume everything changes
      if (startIdx === undefined) {
        startIdx = 0;
        removeAmt = addAmt = -1;
      } else {
        if (removeAmt === undefined) {
          removeAmt = -1;
        }

        if (addAmt === undefined) {
          addAmt = -1;
        }
      }

      // Make sure the @each proxy is set up if anyone is observing @each
      if ((0, _emberMetalWatching.isWatching)(this, '@each')) {
        (0, _emberMetalProperty_get.get)(this, '@each');
      }

      (0, _emberMetalEvents.sendEvent)(this, '@array:before', [this, startIdx, removeAmt, addAmt]);

      if (startIdx >= 0 && removeAmt >= 0 && (0, _emberMetalProperty_get.get)(this, 'hasEnumerableObservers')) {
        removing = [];
        lim = startIdx + removeAmt;

        for (var idx = startIdx; idx < lim; idx++) {
          removing.push(this.objectAt(idx));
        }
      } else {
        removing = removeAmt;
      }

      this.enumerableContentWillChange(removing, addAmt);

      return this;
    },

    /**
      If you are implementing an object that supports `Ember.Array`, call this
      method just after the array content changes to notify any observers and
      invalidate any related properties. Pass the starting index of the change
      as well as a delta of the amounts to change.
       @method arrayContentDidChange
      @param {Number} startIdx The starting index in the array that did change.
      @param {Number} removeAmt The number of items that were removed. If you
        pass `null` assumes 0
      @param {Number} addAmt The number of items that were added. If you
        pass `null` assumes 0.
      @return {Ember.Array} receiver
      @public
    */
    arrayContentDidChange: function (startIdx, removeAmt, addAmt) {
      var adding, lim;

      // if no args are passed assume everything changes
      if (startIdx === undefined) {
        startIdx = 0;
        removeAmt = addAmt = -1;
      } else {
        if (removeAmt === undefined) {
          removeAmt = -1;
        }

        if (addAmt === undefined) {
          addAmt = -1;
        }
      }

      if (startIdx >= 0 && addAmt >= 0 && (0, _emberMetalProperty_get.get)(this, 'hasEnumerableObservers')) {
        adding = [];
        lim = startIdx + addAmt;

        for (var idx = startIdx; idx < lim; idx++) {
          adding.push(this.objectAt(idx));
        }
      } else {
        adding = addAmt;
      }

      this.enumerableContentDidChange(removeAmt, adding);
      (0, _emberMetalEvents.sendEvent)(this, '@array:change', [this, startIdx, removeAmt, addAmt]);

      var length = (0, _emberMetalProperty_get.get)(this, 'length');
      var cachedFirst = (0, _emberMetalComputed.cacheFor)(this, 'firstObject');
      var cachedLast = (0, _emberMetalComputed.cacheFor)(this, 'lastObject');

      if (this.objectAt(0) !== cachedFirst) {
        (0, _emberMetalProperty_events.propertyWillChange)(this, 'firstObject');
        (0, _emberMetalProperty_events.propertyDidChange)(this, 'firstObject');
      }

      if (this.objectAt(length - 1) !== cachedLast) {
        (0, _emberMetalProperty_events.propertyWillChange)(this, 'lastObject');
        (0, _emberMetalProperty_events.propertyDidChange)(this, 'lastObject');
      }

      return this;
    },

    // ..........................................................
    // ENUMERATED PROPERTIES
    //

    /**
      Returns a special object that can be used to observe individual properties
      on the array. Just get an equivalent property on this object and it will
      return an enumerable that maps automatically to the named key on the
      member objects.
       If you merely want to watch for any items being added or removed to the array,
      use the `[]` property instead of `@each`.
       @property @each
      @public
    */
    '@each': (0, _emberMetalComputed.computed)(function () {
      if (!this.__each) {
        // ES6TODO: GRRRRR
        var EachProxy = requireModule('ember-runtime/system/each_proxy')['EachProxy'];

        this.__each = new EachProxy(this);
      }

      return this.__each;
    })
  });
});
/**
@module ember
@submodule ember-runtime
*/

// ..........................................................
// HELPERS
//
// ES6TODO: Ember.A
enifed("ember-runtime/mixins/comparable", ["exports", "ember-metal/mixin"], function (exports, _emberMetalMixin) {

  /**
  @module ember
  @submodule ember-runtime
  */

  /**
    Implements some standard methods for comparing objects. Add this mixin to
    any class you create that can compare its instances.
  
    You should implement the `compare()` method.
  
    @class Comparable
    @namespace Ember
    @since Ember 0.9
    @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create({

    /**
      __Required.__ You must implement this method to apply this mixin.
       Override to return the result of the comparison of the two parameters. The
      compare method should return:
       - `-1` if `a < b`
      - `0` if `a == b`
      - `1` if `a > b`
       Default implementation raises an exception.
       @method compare
      @param a {Object} the first object to compare
      @param b {Object} the second object to compare
      @return {Number} the result of the comparison
      @private
    */
    compare: null
  });
});
enifed("ember-runtime/mixins/controller", ["exports", "ember-metal/mixin", "ember-metal/alias", "ember-runtime/mixins/action_handler", "ember-runtime/mixins/controller_content_model_alias_deprecation"], function (exports, _emberMetalMixin, _emberMetalAlias, _emberRuntimeMixinsAction_handler, _emberRuntimeMixinsController_content_model_alias_deprecation) {

  /**
    `Ember.ControllerMixin` provides a standard interface for all classes that
    compose Ember's controller layer: `Ember.Controller`,
    `Ember.ArrayController`, and `Ember.ObjectController`.
  
    @class ControllerMixin
    @namespace Ember
    @uses Ember.ActionHandler
    @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create(_emberRuntimeMixinsAction_handler["default"], _emberRuntimeMixinsController_content_model_alias_deprecation["default"], {
    /* ducktype as a controller */
    isController: true,

    /**
      The object to which actions from the view should be sent.
       For example, when a Handlebars template uses the `{{action}}` helper,
      it will attempt to send the action to the view's controller's `target`.
       By default, the value of the target property is set to the router, and
      is injected when a controller is instantiated. This injection is defined
      in Ember.Application#buildContainer, and is applied as part of the
      applications initialization process. It can also be set after a controller
      has been instantiated, for instance when using the render helper in a
      template, or when a controller is used as an `itemController`. In most
      cases the `target` property will automatically be set to the logical
      consumer of actions for the controller.
       @property target
      @default null
      @private
    */
    target: null,

    container: null,

    parentController: null,

    store: null,

    /**
      The controller's current model. When retrieving or modifying a controller's
      model, this property should be used instead of the `content` property.
       @property model
      @public
     */
    model: null,

    /**
      @private
    */
    content: (0, _emberMetalAlias["default"])("model")

  });
});
enifed('ember-runtime/mixins/controller_content_model_alias_deprecation', ['exports', 'ember-metal/core', 'ember-metal/mixin'], function (exports, _emberMetalCore, _emberMetalMixin) {

  /*
    The ControllerContentModelAliasDeprecation mixin is used to provide a useful
    deprecation warning when specifying `content` directly on a `Ember.Controller`
    (without also specifying `model`).
  
    Ember versions prior to 1.7 used `model` as an alias of `content`, but due to
    much confusion this alias was reversed (so `content` is now an alias of `model).
  
    This change reduces many caveats with model/content, and also sets a
    simple ground rule: Never set a controllers content, rather always set
    its model and ember will do the right thing.
  
    Used internally by Ember in `Ember.Controller`.
  */
  exports["default"] = _emberMetalMixin.Mixin.create({
    /**
      @private
       Moves `content` to `model`  at extend time if a `model` is not also specified.
       Note that this currently modifies the mixin themselves, which is technically
      dubious but is practically of little consequence. This may change in the
      future.
       @method willMergeMixin
      @since 1.4.0
    */
    willMergeMixin: function (props) {
      // Calling super is only OK here since we KNOW that
      // there is another Mixin loaded first.
      this._super.apply(this, arguments);

      var modelSpecified = !!props.model;

      if (props.content && !modelSpecified) {
        props.model = props.content;
        delete props['content'];

        _emberMetalCore["default"].deprecate('Do not specify `content` on a Controller, use `model` instead.', false);
      }
    }
  });
});
// Ember.deprecate
enifed("ember-runtime/mixins/copyable", ["exports", "ember-metal/property_get", "ember-metal/mixin", "ember-runtime/mixins/freezable", "ember-runtime/system/string", "ember-metal/error"], function (exports, _emberMetalProperty_get, _emberMetalMixin, _emberRuntimeMixinsFreezable, _emberRuntimeSystemString, _emberMetalError) {

  /**
    Implements some standard methods for copying an object. Add this mixin to
    any object you create that can create a copy of itself. This mixin is
    added automatically to the built-in array.
  
    You should generally implement the `copy()` method to return a copy of the
    receiver.
  
    Note that `frozenCopy()` will only work if you also implement
    `Ember.Freezable`.
  
    @class Copyable
    @namespace Ember
    @since Ember 0.9
    @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create({
    /**
      __Required.__ You must implement this method to apply this mixin.
       Override to return a copy of the receiver. Default implementation raises
      an exception.
       @method copy
      @param {Boolean} deep if `true`, a deep copy of the object should be made
      @return {Object} copy of receiver
      @private
    */
    copy: null,

    /**
      If the object implements `Ember.Freezable`, then this will return a new
      copy if the object is not frozen and the receiver if the object is frozen.
       Raises an exception if you try to call this method on a object that does
      not support freezing.
       You should use this method whenever you want a copy of a freezable object
      since a freezable object can simply return itself without actually
      consuming more memory.
       @method frozenCopy
      @return {Object} copy of receiver or receiver
      @private
    */
    frozenCopy: function () {
      if (_emberRuntimeMixinsFreezable.Freezable && _emberRuntimeMixinsFreezable.Freezable.detect(this)) {
        return (0, _emberMetalProperty_get.get)(this, "isFrozen") ? this : this.copy().freeze();
      } else {
        throw new _emberMetalError["default"]((0, _emberRuntimeSystemString.fmt)("%@ does not support freezing", [this]));
      }
    }
  });
});
/**
@module ember
@submodule ember-runtime
*/
enifed("ember-runtime/mixins/deferred", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/mixin", "ember-metal/computed", "ember-runtime/ext/rsvp"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalMixin, _emberMetalComputed, _emberRuntimeExtRsvp) {

  /**
  @module ember
  @submodule ember-runtime
  */

  /**
    @class Deferred
    @namespace Ember
    @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create({
    /**
      Add handlers to be called when the Deferred object is resolved or rejected.
       @method then
      @param {Function} resolve a callback function to be called when done
      @param {Function} reject  a callback function to be called when failed
      @private
    */
    then: function (resolve, reject, label) {
      var deferred, promise, entity;

      entity = this;
      deferred = (0, _emberMetalProperty_get.get)(this, "_deferred");
      promise = deferred.promise;

      function fulfillmentHandler(fulfillment) {
        if (fulfillment === promise) {
          return resolve(entity);
        } else {
          return resolve(fulfillment);
        }
      }

      return promise.then(resolve && fulfillmentHandler, reject, label);
    },

    /**
      Resolve a Deferred object and call any `doneCallbacks` with the given args.
       @method resolve
      @private
    */
    resolve: function (value) {
      var deferred, promise;

      deferred = (0, _emberMetalProperty_get.get)(this, "_deferred");
      promise = deferred.promise;

      if (value === this) {
        deferred.resolve(promise);
      } else {
        deferred.resolve(value);
      }
    },

    /**
      Reject a Deferred object and call any `failCallbacks` with the given args.
       @method reject
      @private
    */
    reject: function (value) {
      (0, _emberMetalProperty_get.get)(this, "_deferred").reject(value);
    },

    _deferred: (0, _emberMetalComputed.computed)(function () {
      _emberMetalCore["default"].deprecate("Usage of Ember.DeferredMixin or Ember.Deferred is deprecated.", this._suppressDeferredDeprecation, { url: "http://emberjs.com/guides/deprecations/#toc_deprecate-ember-deferredmixin-and-ember-deferred" });

      return _emberRuntimeExtRsvp["default"].defer("Ember: DeferredMixin - " + this);
    })
  });
});
// Ember.FEATURES, Ember.Test
enifed('ember-runtime/mixins/enumerable', ['exports', 'ember-metal/core', 'ember-metal/property_get', 'ember-metal/property_set', 'ember-metal/mixin', 'ember-metal/enumerable_utils', 'ember-metal/computed', 'ember-metal/property_events', 'ember-metal/events', 'ember-runtime/compare'], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalMixin, _emberMetalEnumerable_utils, _emberMetalComputed, _emberMetalProperty_events, _emberMetalEvents, _emberRuntimeCompare) {

  var contexts = [];

  function popCtx() {
    return contexts.length === 0 ? {} : contexts.pop();
  }

  function pushCtx(ctx) {
    contexts.push(ctx);
    return null;
  }

  function iter(key, value) {
    var valueProvided = arguments.length === 2;

    function i(item) {
      var cur = (0, _emberMetalProperty_get.get)(item, key);
      return valueProvided ? value === cur : !!cur;
    }

    return i;
  }

  /**
    This mixin defines the common interface implemented by enumerable objects
    in Ember. Most of these methods follow the standard Array iteration
    API defined up to JavaScript 1.8 (excluding language-specific features that
    cannot be emulated in older versions of JavaScript).
  
    This mixin is applied automatically to the Array class on page load, so you
    can use any of these methods on simple arrays. If Array already implements
    one of these methods, the mixin will not override them.
  
    ## Writing Your Own Enumerable
  
    To make your own custom class enumerable, you need two items:
  
    1. You must have a length property. This property should change whenever
       the number of items in your enumerable object changes. If you use this
       with an `Ember.Object` subclass, you should be sure to change the length
       property using `set().`
  
    2. You must implement `nextObject().` See documentation.
  
    Once you have these two methods implemented, apply the `Ember.Enumerable` mixin
    to your class and you will be able to enumerate the contents of your object
    like any other collection.
  
    ## Using Ember Enumeration with Other Libraries
  
    Many other libraries provide some kind of iterator or enumeration like
    facility. This is often where the most common API conflicts occur.
    Ember's API is designed to be as friendly as possible with other
    libraries by implementing only methods that mostly correspond to the
    JavaScript 1.8 API.
  
    @class Enumerable
    @namespace Ember
    @since Ember 0.9
    @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create({

    /**
      __Required.__ You must implement this method to apply this mixin.
       Implement this method to make your class enumerable.
       This method will be called repeatedly during enumeration. The index value
      will always begin with 0 and increment monotonically. You don't have to
      rely on the index value to determine what object to return, but you should
      always check the value and start from the beginning when you see the
      requested index is 0.
       The `previousObject` is the object that was returned from the last call
      to `nextObject` for the current iteration. This is a useful way to
      manage iteration if you are tracing a linked list, for example.
       Finally the context parameter will always contain a hash you can use as
      a "scratchpad" to maintain any other state you need in order to iterate
      properly. The context object is reused and is not reset between
      iterations so make sure you setup the context with a fresh state whenever
      the index parameter is 0.
       Generally iterators will continue to call `nextObject` until the index
      reaches the current length-1. If you run out of data before this
      time for some reason, you should simply return undefined.
       The default implementation of this method simply looks up the index.
      This works great on any Array-like objects.
       @method nextObject
      @param {Number} index the current index of the iteration
      @param {Object} previousObject the value returned by the last call to
        `nextObject`.
      @param {Object} context a context object you can use to maintain state.
      @return {Object} the next object in the iteration or undefined
      @private
    */
    nextObject: null,

    /**
      Helper method returns the first object from a collection. This is usually
      used by bindings and other parts of the framework to extract a single
      object if the enumerable contains only one item.
       If you override this method, you should implement it so that it will
      always return the same value each time it is called. If your enumerable
      contains only one object, this method should always return that object.
      If your enumerable is empty, this method should return `undefined`.
       ```javascript
      var arr = ['a', 'b', 'c'];
      arr.get('firstObject');  // 'a'
       var arr = [];
      arr.get('firstObject');  // undefined
      ```
       @property firstObject
      @return {Object} the object or undefined
      @private
    */
    firstObject: (0, _emberMetalComputed.computed)('[]', function () {
      if ((0, _emberMetalProperty_get.get)(this, 'length') === 0) {
        return undefined;
      }

      // handle generic enumerables
      var context = popCtx();
      var ret = this.nextObject(0, null, context);

      pushCtx(context);

      return ret;
    }),

    /**
      Helper method returns the last object from a collection. If your enumerable
      contains only one object, this method should always return that object.
      If your enumerable is empty, this method should return `undefined`.
       ```javascript
      var arr = ['a', 'b', 'c'];
      arr.get('lastObject');  // 'c'
       var arr = [];
      arr.get('lastObject');  // undefined
      ```
       @property lastObject
      @return {Object} the last object or undefined
      @private
    */
    lastObject: (0, _emberMetalComputed.computed)('[]', function () {
      var len = (0, _emberMetalProperty_get.get)(this, 'length');

      if (len === 0) {
        return undefined;
      }

      var context = popCtx();
      var idx = 0;
      var last = null;
      var cur;

      do {
        last = cur;
        cur = this.nextObject(idx++, last, context);
      } while (cur !== undefined);

      pushCtx(context);

      return last;
    }),

    /**
      Returns `true` if the passed object can be found in the receiver. The
      default version will iterate through the enumerable until the object
      is found. You may want to override this with a more efficient version.
       ```javascript
      var arr = ['a', 'b', 'c'];
       arr.contains('a'); // true
      arr.contains('z'); // false
      ```
       @method contains
      @param {Object} obj The object to search for.
      @return {Boolean} `true` if object is found in enumerable.
      @private
    */
    contains: function (obj) {
      var found = this.find(function (item) {
        return item === obj;
      });

      return found !== undefined;
    },

    /**
      Iterates through the enumerable, calling the passed function on each
      item. This method corresponds to the `forEach()` method defined in
      JavaScript 1.6.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(item, index, enumerable);
      ```
       - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `enumerable` is the enumerable object itself.
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
       @method forEach
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Object} receiver
      @private
    */
    forEach: function (callback, target) {
      if (typeof callback !== 'function') {
        throw new TypeError();
      }

      var context = popCtx();
      var len = (0, _emberMetalProperty_get.get)(this, 'length');
      var last = null;

      if (target === undefined) {
        target = null;
      }

      for (var idx = 0; idx < len; idx++) {
        var next = this.nextObject(idx, last, context);
        callback.call(target, next, idx, this);
        last = next;
      }

      last = null;
      context = pushCtx(context);

      return this;
    },

    /**
      Alias for `mapBy`
       @method getEach
      @param {String} key name of the property
      @return {Array} The mapped array.
      @private
    */
    getEach: (0, _emberMetalMixin.aliasMethod)('mapBy'),

    /**
      Sets the value on the named property for each member. This is more
      efficient than using other methods defined on this helper. If the object
      implements Ember.Observable, the value will be changed to `set(),` otherwise
      it will be set directly. `null` objects are skipped.
       @method setEach
      @param {String} key The key to set
      @param {Object} value The object to set
      @return {Object} receiver
      @private
    */
    setEach: function (key, value) {
      return this.forEach(function (item) {
        (0, _emberMetalProperty_set.set)(item, key, value);
      });
    },

    /**
      Maps all of the items in the enumeration to another value, returning
      a new array. This method corresponds to `map()` defined in JavaScript 1.6.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(item, index, enumerable);
      ```
       - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `enumerable` is the enumerable object itself.
       It should return the mapped value.
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
       @method map
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Array} The mapped array.
      @private
    */
    map: function (callback, target) {
      var ret = _emberMetalCore["default"].A();

      this.forEach(function (x, idx, i) {
        ret[idx] = callback.call(target, x, idx, i);
      });

      return ret;
    },

    /**
      Similar to map, this specialized function returns the value of the named
      property on all items in the enumeration.
       @method mapBy
      @param {String} key name of the property
      @return {Array} The mapped array.
      @private
    */
    mapBy: function (key) {
      return this.map(function (next) {
        return (0, _emberMetalProperty_get.get)(next, key);
      });
    },

    /**
      Similar to map, this specialized function returns the value of the named
      property on all items in the enumeration.
       @method mapProperty
      @param {String} key name of the property
      @return {Array} The mapped array.
      @deprecated Use `mapBy` instead
      @private
    */

    mapProperty: (0, _emberMetalMixin.aliasMethod)('mapBy'),

    /**
      Returns an array with all of the items in the enumeration that the passed
      function returns true for. This method corresponds to `filter()` defined in
      JavaScript 1.6.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(item, index, enumerable);
      ```
       - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `enumerable` is the enumerable object itself.
       It should return `true` to include the item in the results, `false`
      otherwise.
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
       @method filter
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Array} A filtered array.
      @private
    */
    filter: function (callback, target) {
      var ret = _emberMetalCore["default"].A();

      this.forEach(function (x, idx, i) {
        if (callback.call(target, x, idx, i)) {
          ret.push(x);
        }
      });

      return ret;
    },

    /**
      Returns an array with all of the items in the enumeration where the passed
      function returns false. This method is the inverse of filter().
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(item, index, enumerable);
      ```
       - *item* is the current item in the iteration.
      - *index* is the current index in the iteration
      - *enumerable* is the enumerable object itself.
       It should return a falsey value to include the item in the results.
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as "this" on the context. This is a good way
      to give your iterator function access to the current object.
       @method reject
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Array} A rejected array.
       @private
    */
    reject: function (callback, target) {
      return this.filter(function () {
        return !callback.apply(target, arguments);
      });
    },

    /**
      Returns an array with just the items with the matched property. You
      can pass an optional second argument with the target value. Otherwise
      this will match any property that evaluates to `true`.
       @method filterBy
      @param {String} key the property to test
      @param {*} [value] optional value to test against.
      @return {Array} filtered array
      @private
    */
    filterBy: function (key, value) {
      return this.filter(iter.apply(this, arguments));
    },

    /**
      Returns an array with just the items with the matched property. You
      can pass an optional second argument with the target value. Otherwise
      this will match any property that evaluates to `true`.
       @method filterProperty
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Array} filtered array
      @deprecated Use `filterBy` instead
      @private
    */
    filterProperty: (0, _emberMetalMixin.aliasMethod)('filterBy'),

    /**
      Returns an array with the items that do not have truthy values for
      key.  You can pass an optional second argument with the target value.  Otherwise
      this will match any property that evaluates to false.
       @method rejectBy
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Array} rejected array
      @private
    */
    rejectBy: function (key, value) {
      var exactValue = function (item) {
        return (0, _emberMetalProperty_get.get)(item, key) === value;
      };

      var hasValue = function (item) {
        return !!(0, _emberMetalProperty_get.get)(item, key);
      };

      var use = arguments.length === 2 ? exactValue : hasValue;

      return this.reject(use);
    },

    /**
      Returns an array with the items that do not have truthy values for
      key.  You can pass an optional second argument with the target value.  Otherwise
      this will match any property that evaluates to false.
       @method rejectProperty
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Array} rejected array
      @deprecated Use `rejectBy` instead
      @private
    */
    rejectProperty: (0, _emberMetalMixin.aliasMethod)('rejectBy'),

    /**
      Returns the first item in the array for which the callback returns true.
      This method works similar to the `filter()` method defined in JavaScript 1.6
      except that it will stop working on the array once a match is found.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(item, index, enumerable);
      ```
       - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `enumerable` is the enumerable object itself.
       It should return the `true` to include the item in the results, `false`
      otherwise.
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
       @method find
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Object} Found item or `undefined`.
      @private
    */
    find: function (callback, target) {
      var len = (0, _emberMetalProperty_get.get)(this, 'length');

      if (target === undefined) {
        target = null;
      }

      var context = popCtx();
      var found = false;
      var last = null;
      var next, ret;

      for (var idx = 0; idx < len && !found; idx++) {
        next = this.nextObject(idx, last, context);

        if (found = callback.call(target, next, idx, this)) {
          ret = next;
        }

        last = next;
      }

      next = last = null;
      context = pushCtx(context);

      return ret;
    },

    /**
      Returns the first item with a property matching the passed value. You
      can pass an optional second argument with the target value. Otherwise
      this will match any property that evaluates to `true`.
       This method works much like the more generic `find()` method.
       @method findBy
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Object} found item or `undefined`
      @private
    */
    findBy: function (key, value) {
      return this.find(iter.apply(this, arguments));
    },

    /**
      Returns the first item with a property matching the passed value. You
      can pass an optional second argument with the target value. Otherwise
      this will match any property that evaluates to `true`.
       This method works much like the more generic `find()` method.
       @method findProperty
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Object} found item or `undefined`
      @deprecated Use `findBy` instead
      @private
    */
    findProperty: (0, _emberMetalMixin.aliasMethod)('findBy'),

    /**
      Returns `true` if the passed function returns true for every item in the
      enumeration. This corresponds with the `every()` method in JavaScript 1.6.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(item, index, enumerable);
      ```
       - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `enumerable` is the enumerable object itself.
       It should return the `true` or `false`.
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
       Example Usage:
       ```javascript
      if (people.every(isEngineer)) {
        Paychecks.addBigBonus();
      }
      ```
       @method every
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Boolean}
      @private
    */
    every: function (callback, target) {
      return !this.find(function (x, idx, i) {
        return !callback.call(target, x, idx, i);
      });
    },

    /**
      @method everyBy
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @deprecated Use `isEvery` instead
      @return {Boolean}
      @private
    */
    everyBy: (0, _emberMetalMixin.aliasMethod)('isEvery'),

    /**
      @method everyProperty
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @deprecated Use `isEvery` instead
      @return {Boolean}
      @private
    */
    everyProperty: (0, _emberMetalMixin.aliasMethod)('isEvery'),

    /**
      Returns `true` if the passed property resolves to `true` for all items in
      the enumerable. This method is often simpler/faster than using a callback.
       @method isEvery
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Boolean}
      @since 1.3.0
      @private
    */
    isEvery: function (key, value) {
      return this.every(iter.apply(this, arguments));
    },

    /**
      Returns `true` if the passed function returns true for any item in the
      enumeration. This corresponds with the `some()` method in JavaScript 1.6.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(item, index, enumerable);
      ```
       - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `enumerable` is the enumerable object itself.
       It should return the `true` to include the item in the results, `false`
      otherwise.
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
       Usage Example:
       ```javascript
      if (people.any(isManager)) {
        Paychecks.addBiggerBonus();
      }
      ```
       @method any
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Boolean} `true` if the passed function returns `true` for any item
      @private
    */
    any: function (callback, target) {
      var len = (0, _emberMetalProperty_get.get)(this, 'length');
      var context = popCtx();
      var found = false;
      var last = null;
      var next, idx;

      if (target === undefined) {
        target = null;
      }

      for (idx = 0; idx < len && !found; idx++) {
        next = this.nextObject(idx, last, context);
        found = callback.call(target, next, idx, this);
        last = next;
      }

      next = last = null;
      context = pushCtx(context);
      return found;
    },

    /**
      Returns `true` if the passed function returns true for any item in the
      enumeration. This corresponds with the `some()` method in JavaScript 1.6.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(item, index, enumerable);
      ```
       - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `enumerable` is the enumerable object itself.
       It should return the `true` to include the item in the results, `false`
      otherwise.
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
       Usage Example:
       ```javascript
      if (people.some(isManager)) {
        Paychecks.addBiggerBonus();
      }
      ```
       @method some
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Boolean} `true` if the passed function returns `true` for any item
      @deprecated Use `any` instead
      @private
    */
    some: (0, _emberMetalMixin.aliasMethod)('any'),

    /**
      Returns `true` if the passed property resolves to `true` for any item in
      the enumerable. This method is often simpler/faster than using a callback.
       @method isAny
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Boolean}
      @since 1.3.0
      @private
    */
    isAny: function (key, value) {
      return this.any(iter.apply(this, arguments));
    },

    /**
      @method anyBy
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Boolean}
      @deprecated Use `isAny` instead
      @private
    */
    anyBy: (0, _emberMetalMixin.aliasMethod)('isAny'),

    /**
      @method someProperty
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Boolean}
      @deprecated Use `isAny` instead
      @private
    */
    someProperty: (0, _emberMetalMixin.aliasMethod)('isAny'),

    /**
      This will combine the values of the enumerator into a single value. It
      is a useful way to collect a summary value from an enumeration. This
      corresponds to the `reduce()` method defined in JavaScript 1.8.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(previousValue, item, index, enumerable);
      ```
       - `previousValue` is the value returned by the last call to the iterator.
      - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `enumerable` is the enumerable object itself.
       Return the new cumulative value.
       In addition to the callback you can also pass an `initialValue`. An error
      will be raised if you do not pass an initial value and the enumerator is
      empty.
       Note that unlike the other methods, this method does not allow you to
      pass a target object to set as this for the callback. It's part of the
      spec. Sorry.
       @method reduce
      @param {Function} callback The callback to execute
      @param {Object} initialValue Initial value for the reduce
      @param {String} reducerProperty internal use only.
      @return {Object} The reduced value.
      @private
    */
    reduce: function (callback, initialValue, reducerProperty) {
      if (typeof callback !== 'function') {
        throw new TypeError();
      }

      var ret = initialValue;

      this.forEach(function (item, i) {
        ret = callback(ret, item, i, this, reducerProperty);
      }, this);

      return ret;
    },

    /**
      Invokes the named method on every object in the receiver that
      implements it. This method corresponds to the implementation in
      Prototype 1.6.
       @method invoke
      @param {String} methodName the name of the method
      @param {Object...} args optional arguments to pass as well.
      @return {Array} return values from calling invoke.
      @private
    */
    invoke: function (methodName) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var ret = _emberMetalCore["default"].A();

      this.forEach(function (x, idx) {
        var method = x && x[methodName];

        if ('function' === typeof method) {
          ret[idx] = args ? method.apply(x, args) : x[methodName]();
        }
      }, this);

      return ret;
    },

    /**
      Simply converts the enumerable into a genuine array. The order is not
      guaranteed. Corresponds to the method implemented by Prototype.
       @method toArray
      @return {Array} the enumerable as an array.
      @private
    */
    toArray: function () {
      var ret = _emberMetalCore["default"].A();

      this.forEach(function (o, idx) {
        ret[idx] = o;
      });

      return ret;
    },

    /**
      Returns a copy of the array with all `null` and `undefined` elements removed.
       ```javascript
      var arr = ['a', null, 'c', undefined];
      arr.compact();  // ['a', 'c']
      ```
       @method compact
      @return {Array} the array without null and undefined elements.
      @private
    */
    compact: function () {
      return this.filter(function (value) {
        return value != null;
      });
    },

    /**
      Returns a new enumerable that excludes the passed value. The default
      implementation returns an array regardless of the receiver type unless
      the receiver does not contain the value.
       ```javascript
      var arr = ['a', 'b', 'a', 'c'];
      arr.without('a');  // ['b', 'c']
      ```
       @method without
      @param {Object} value
      @return {Ember.Enumerable}
      @private
    */
    without: function (value) {
      if (!this.contains(value)) {
        return this; // nothing to do
      }

      var ret = _emberMetalCore["default"].A();

      this.forEach(function (k) {
        if (k !== value) {
          ret[ret.length] = k;
        }
      });

      return ret;
    },

    /**
      Returns a new enumerable that contains only unique values. The default
      implementation returns an array regardless of the receiver type.
       ```javascript
      var arr = ['a', 'a', 'b', 'b'];
      arr.uniq();  // ['a', 'b']
      ```
       This only works on primitive data types, e.g. Strings, Numbers, etc.
       @method uniq
      @return {Ember.Enumerable}
      @private
    */
    uniq: function () {
      var ret = _emberMetalCore["default"].A();

      this.forEach(function (k) {
        if ((0, _emberMetalEnumerable_utils.indexOf)(ret, k) < 0) {
          ret.push(k);
        }
      });

      return ret;
    },

    /**
      This property will trigger anytime the enumerable's content changes.
      You can observe this property to be notified of changes to the enumerable's
      content.
       For plain enumerables, this property is read only. `Array` overrides
      this method.
       @property []
      @type Array
      @return this
      @private
    */
    '[]': (0, _emberMetalComputed.computed)({
      get: function (key) {
        return this;
      }
    }),

    // ..........................................................
    // ENUMERABLE OBSERVERS
    //

    /**
      Registers an enumerable observer. Must implement `Ember.EnumerableObserver`
      mixin.
       @method addEnumerableObserver
      @param {Object} target
      @param {Object} [opts]
      @return this
      @private
    */
    addEnumerableObserver: function (target, opts) {
      var willChange = opts && opts.willChange || 'enumerableWillChange';
      var didChange = opts && opts.didChange || 'enumerableDidChange';
      var hasObservers = (0, _emberMetalProperty_get.get)(this, 'hasEnumerableObservers');

      if (!hasObservers) {
        (0, _emberMetalProperty_events.propertyWillChange)(this, 'hasEnumerableObservers');
      }

      (0, _emberMetalEvents.addListener)(this, '@enumerable:before', target, willChange);
      (0, _emberMetalEvents.addListener)(this, '@enumerable:change', target, didChange);

      if (!hasObservers) {
        (0, _emberMetalProperty_events.propertyDidChange)(this, 'hasEnumerableObservers');
      }

      return this;
    },

    /**
      Removes a registered enumerable observer.
       @method removeEnumerableObserver
      @param {Object} target
      @param {Object} [opts]
      @return this
      @private
    */
    removeEnumerableObserver: function (target, opts) {
      var willChange = opts && opts.willChange || 'enumerableWillChange';
      var didChange = opts && opts.didChange || 'enumerableDidChange';
      var hasObservers = (0, _emberMetalProperty_get.get)(this, 'hasEnumerableObservers');

      if (hasObservers) {
        (0, _emberMetalProperty_events.propertyWillChange)(this, 'hasEnumerableObservers');
      }

      (0, _emberMetalEvents.removeListener)(this, '@enumerable:before', target, willChange);
      (0, _emberMetalEvents.removeListener)(this, '@enumerable:change', target, didChange);

      if (hasObservers) {
        (0, _emberMetalProperty_events.propertyDidChange)(this, 'hasEnumerableObservers');
      }

      return this;
    },

    /**
      Becomes true whenever the array currently has observers watching changes
      on the array.
       @property hasEnumerableObservers
      @type Boolean
      @private
    */
    hasEnumerableObservers: (0, _emberMetalComputed.computed)(function () {
      return (0, _emberMetalEvents.hasListeners)(this, '@enumerable:change') || (0, _emberMetalEvents.hasListeners)(this, '@enumerable:before');
    }),

    /**
      Invoke this method just before the contents of your enumerable will
      change. You can either omit the parameters completely or pass the objects
      to be removed or added if available or just a count.
       @method enumerableContentWillChange
      @param {Ember.Enumerable|Number} removing An enumerable of the objects to
        be removed or the number of items to be removed.
      @param {Ember.Enumerable|Number} adding An enumerable of the objects to be
        added or the number of items to be added.
      @chainable
      @private
    */
    enumerableContentWillChange: function (removing, adding) {
      var removeCnt, addCnt, hasDelta;

      if ('number' === typeof removing) {
        removeCnt = removing;
      } else if (removing) {
        removeCnt = (0, _emberMetalProperty_get.get)(removing, 'length');
      } else {
        removeCnt = removing = -1;
      }

      if ('number' === typeof adding) {
        addCnt = adding;
      } else if (adding) {
        addCnt = (0, _emberMetalProperty_get.get)(adding, 'length');
      } else {
        addCnt = adding = -1;
      }

      hasDelta = addCnt < 0 || removeCnt < 0 || addCnt - removeCnt !== 0;

      if (removing === -1) {
        removing = null;
      }

      if (adding === -1) {
        adding = null;
      }

      (0, _emberMetalProperty_events.propertyWillChange)(this, '[]');

      if (hasDelta) {
        (0, _emberMetalProperty_events.propertyWillChange)(this, 'length');
      }

      (0, _emberMetalEvents.sendEvent)(this, '@enumerable:before', [this, removing, adding]);

      return this;
    },

    /**
      Invoke this method when the contents of your enumerable has changed.
      This will notify any observers watching for content changes. If you are
      implementing an ordered enumerable (such as an array), also pass the
      start and end values where the content changed so that it can be used to
      notify range observers.
       @method enumerableContentDidChange
      @param {Ember.Enumerable|Number} removing An enumerable of the objects to
        be removed or the number of items to be removed.
      @param {Ember.Enumerable|Number} adding  An enumerable of the objects to
        be added or the number of items to be added.
      @chainable
      @private
    */
    enumerableContentDidChange: function (removing, adding) {
      var removeCnt, addCnt, hasDelta;

      if ('number' === typeof removing) {
        removeCnt = removing;
      } else if (removing) {
        removeCnt = (0, _emberMetalProperty_get.get)(removing, 'length');
      } else {
        removeCnt = removing = -1;
      }

      if ('number' === typeof adding) {
        addCnt = adding;
      } else if (adding) {
        addCnt = (0, _emberMetalProperty_get.get)(adding, 'length');
      } else {
        addCnt = adding = -1;
      }

      hasDelta = addCnt < 0 || removeCnt < 0 || addCnt - removeCnt !== 0;

      if (removing === -1) {
        removing = null;
      }

      if (adding === -1) {
        adding = null;
      }

      (0, _emberMetalEvents.sendEvent)(this, '@enumerable:change', [this, removing, adding]);

      if (hasDelta) {
        (0, _emberMetalProperty_events.propertyDidChange)(this, 'length');
      }

      (0, _emberMetalProperty_events.propertyDidChange)(this, '[]');

      return this;
    },

    /**
      Converts the enumerable into an array and sorts by the keys
      specified in the argument.
       You may provide multiple arguments to sort by multiple properties.
       @method sortBy
      @param {String} property name(s) to sort on
      @return {Array} The sorted array.
      @since 1.2.0
      @private
    */
    sortBy: function () {
      var sortKeys = arguments;

      return this.toArray().sort(function (a, b) {
        for (var i = 0; i < sortKeys.length; i++) {
          var key = sortKeys[i];
          var propA = (0, _emberMetalProperty_get.get)(a, key);
          var propB = (0, _emberMetalProperty_get.get)(b, key);
          // return 1 or -1 else continue to the next sortKey
          var compareValue = (0, _emberRuntimeCompare["default"])(propA, propB);

          if (compareValue) {
            return compareValue;
          }
        }
        return 0;
      });
    }
  });
});
/**
@module ember
@submodule ember-runtime
*/

// ..........................................................
// HELPERS
//
enifed("ember-runtime/mixins/evented", ["exports", "ember-metal/mixin", "ember-metal/events"], function (exports, _emberMetalMixin, _emberMetalEvents) {

  /**
  @module ember
  @submodule ember-runtime
  */

  /**
    This mixin allows for Ember objects to subscribe to and emit events.
  
    ```javascript
    App.Person = Ember.Object.extend(Ember.Evented, {
      greet: function() {
        // ...
        this.trigger('greet');
      }
    });
  
    var person = App.Person.create();
  
    person.on('greet', function() {
      console.log('Our person has greeted');
    });
  
    person.greet();
  
    // outputs: 'Our person has greeted'
    ```
  
    You can also chain multiple event subscriptions:
  
    ```javascript
    person.on('greet', function() {
      console.log('Our person has greeted');
    }).one('greet', function() {
      console.log('Offer one-time special');
    }).off('event', this, forgetThis);
    ```
  
    @class Evented
    @namespace Ember
    @public
   */
  exports["default"] = _emberMetalMixin.Mixin.create({

    /**
     Subscribes to a named event with given function.
      ```javascript
     person.on('didLoad', function() {
       // fired once the person has loaded
     });
     ```
      An optional target can be passed in as the 2nd argument that will
     be set as the "this" for the callback. This is a good way to give your
     function access to the object triggering the event. When the target
     parameter is used the callback becomes the third argument.
      @method on
     @param {String} name The name of the event
     @param {Object} [target] The "this" binding for the callback
     @param {Function} method The callback to execute
     @return this
     @public
    */
    on: function (name, target, method) {
      (0, _emberMetalEvents.addListener)(this, name, target, method);
      return this;
    },

    /**
      Subscribes a function to a named event and then cancels the subscription
      after the first time the event is triggered. It is good to use ``one`` when
      you only care about the first time an event has taken place.
       This function takes an optional 2nd argument that will become the "this"
      value for the callback. If this argument is passed then the 3rd argument
      becomes the function.
       @method one
      @param {String} name The name of the event
      @param {Object} [target] The "this" binding for the callback
      @param {Function} method The callback to execute
      @return this
      @public
    */
    one: function (name, target, method) {
      if (!method) {
        method = target;
        target = null;
      }

      (0, _emberMetalEvents.addListener)(this, name, target, method, true);
      return this;
    },

    /**
      Triggers a named event for the object. Any additional arguments
      will be passed as parameters to the functions that are subscribed to the
      event.
       ```javascript
      person.on('didEat', function(food) {
        console.log('person ate some ' + food);
      });
       person.trigger('didEat', 'broccoli');
       // outputs: person ate some broccoli
      ```
      @method trigger
      @param {String} name The name of the event
      @param {Object...} args Optional arguments to pass on
      @public
    */
    trigger: function (name) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (0, _emberMetalEvents.sendEvent)(this, name, args);
    },

    /**
      Cancels subscription for given name, target, and method.
       @method off
      @param {String} name The name of the event
      @param {Object} target The target of the subscription
      @param {Function} method The function of the subscription
      @return this
      @public
    */
    off: function (name, target, method) {
      (0, _emberMetalEvents.removeListener)(this, name, target, method);
      return this;
    },

    /**
      Checks to see if object has any subscriptions for named event.
       @method has
      @param {String} name The name of the event
      @return {Boolean} does the object have a subscription for event
      @public
     */
    has: function (name) {
      return (0, _emberMetalEvents.hasListeners)(this, name);
    }
  });
});
enifed("ember-runtime/mixins/freezable", ["exports", "ember-metal/mixin", "ember-metal/property_get", "ember-metal/property_set"], function (exports, _emberMetalMixin, _emberMetalProperty_get, _emberMetalProperty_set) {

  /**
    The `Ember.Freezable` mixin implements some basic methods for marking an
    object as frozen. Once an object is frozen it should be read only. No changes
    may be made the internal state of the object.
  
    ## Enforcement
  
    To fully support freezing in your subclass, you must include this mixin and
    override any method that might alter any property on the object to instead
    raise an exception. You can check the state of an object by checking the
    `isFrozen` property.
  
    Although future versions of JavaScript may support language-level freezing
    object objects, that is not the case today. Even if an object is freezable,
    it is still technically possible to modify the object, even though it could
    break other parts of your application that do not expect a frozen object to
    change. It is, therefore, very important that you always respect the
    `isFrozen` property on all freezable objects.
  
    ## Example Usage
  
    The example below shows a simple object that implement the `Ember.Freezable`
    protocol.
  
    ```javascript
    Contact = Ember.Object.extend(Ember.Freezable, {
      firstName: null,
      lastName: null,
  
      // swaps the names
      swapNames: function() {
        if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;
        var tmp = this.get('firstName');
        this.set('firstName', this.get('lastName'));
        this.set('lastName', tmp);
        return this;
      }
  
    });
  
    c = Contact.create({ firstName: "John", lastName: "Doe" });
    c.swapNames();  // returns c
    c.freeze();
    c.swapNames();  // EXCEPTION
    ```
  
    ## Copying
  
    Usually the `Ember.Freezable` protocol is implemented in cooperation with the
    `Ember.Copyable` protocol, which defines a `frozenCopy()` method that will
    return a frozen object, if the object implements this method as well.
  
    @class Freezable
    @namespace Ember
    @since Ember 0.9
    @private
  */
  var Freezable = _emberMetalMixin.Mixin.create({

    /**
      Set to `true` when the object is frozen. Use this property to detect
      whether your object is frozen or not.
       @property isFrozen
      @type Boolean
      @private
    */
    isFrozen: false,

    /**
      Freezes the object. Once this method has been called the object should
      no longer allow any properties to be edited.
       @method freeze
      @return {Object} receiver
      @private
    */
    freeze: function () {
      if ((0, _emberMetalProperty_get.get)(this, "isFrozen")) {
        return this;
      }

      (0, _emberMetalProperty_set.set)(this, "isFrozen", true);
      return this;
    }

  });

  exports.Freezable = Freezable;
  var FROZEN_ERROR = "Frozen object cannot be modified.";
  exports.FROZEN_ERROR = FROZEN_ERROR;
});
/**
@module ember
@submodule ember-runtime
*/
enifed("ember-runtime/mixins/mutable_array", ["exports", "ember-metal/property_get", "ember-metal/utils", "ember-metal/error", "ember-metal/mixin", "ember-runtime/mixins/array", "ember-runtime/mixins/mutable_enumerable", "ember-runtime/mixins/enumerable"], function (exports, _emberMetalProperty_get, _emberMetalUtils, _emberMetalError, _emberMetalMixin, _emberRuntimeMixinsArray, _emberRuntimeMixinsMutable_enumerable, _emberRuntimeMixinsEnumerable) {
  /**
  @module ember
  @submodule ember-runtime
  */

  // require('ember-runtime/mixins/array');
  // require('ember-runtime/mixins/mutable_enumerable');

  // ..........................................................
  // CONSTANTS
  //

  var OUT_OF_RANGE_EXCEPTION = "Index out of range";
  var EMPTY = [];

  /**
    This mixin defines the API for modifying array-like objects. These methods
    can be applied only to a collection that keeps its items in an ordered set.
    It builds upon the Array mixin and adds methods to modify the array.
    Concrete implementations of this class include ArrayProxy and ArrayController.
  
    It is important to use the methods in this class to modify arrays so that
    changes are observable. This allows the binding system in Ember to function
    correctly.
  
  
    Note that an Array can change even if it does not implement this mixin.
    For example, one might implement a SparseArray that cannot be directly
    modified, but if its underlying enumerable changes, it will change also.
  
    @class MutableArray
    @namespace Ember
    @uses Ember.Array
    @uses Ember.MutableEnumerable
    @public
  */
  exports["default"] = _emberMetalMixin.Mixin.create(_emberRuntimeMixinsArray["default"], _emberRuntimeMixinsMutable_enumerable["default"], {

    /**
      __Required.__ You must implement this method to apply this mixin.
       This is one of the primitives you must implement to support `Ember.Array`.
      You should replace amt objects started at idx with the objects in the
      passed array. You should also call `this.enumerableContentDidChange()`
       @method replace
      @param {Number} idx Starting index in the array to replace. If
        idx >= length, then append to the end of the array.
      @param {Number} amt Number of elements that should be removed from
        the array, starting at *idx*.
      @param {Array} objects An array of zero or more objects that should be
        inserted into the array at *idx*
      @public
    */
    replace: null,

    /**
      Remove all elements from the array. This is useful if you
      want to reuse an existing array without having to recreate it.
       ```javascript
      var colors = ['red', 'green', 'blue'];
       color.length();   //  3
      colors.clear();   //  []
      colors.length();  //  0
      ```
       @method clear
      @return {Ember.Array} An empty Array.
      @public
    */
    clear: function () {
      var len = (0, _emberMetalProperty_get.get)(this, "length");
      if (len === 0) {
        return this;
      }

      this.replace(0, len, EMPTY);
      return this;
    },

    /**
      This will use the primitive `replace()` method to insert an object at the
      specified index.
       ```javascript
      var colors = ['red', 'green', 'blue'];
       colors.insertAt(2, 'yellow');  // ['red', 'green', 'yellow', 'blue']
      colors.insertAt(5, 'orange');  // Error: Index out of range
      ```
       @method insertAt
      @param {Number} idx index of insert the object at.
      @param {Object} object object to insert
      @return {Ember.Array} receiver
      @public
    */
    insertAt: function (idx, object) {
      if (idx > (0, _emberMetalProperty_get.get)(this, "length")) {
        throw new _emberMetalError["default"](OUT_OF_RANGE_EXCEPTION);
      }

      this.replace(idx, 0, [object]);
      return this;
    },

    /**
      Remove an object at the specified index using the `replace()` primitive
      method. You can pass either a single index, or a start and a length.
       If you pass a start and length that is beyond the
      length this method will throw an `OUT_OF_RANGE_EXCEPTION`.
       ```javascript
      var colors = ['red', 'green', 'blue', 'yellow', 'orange'];
       colors.removeAt(0);     // ['green', 'blue', 'yellow', 'orange']
      colors.removeAt(2, 2);  // ['green', 'blue']
      colors.removeAt(4, 2);  // Error: Index out of range
      ```
       @method removeAt
      @param {Number} start index, start of range
      @param {Number} len length of passing range
      @return {Ember.Array} receiver
      @public
    */
    removeAt: function (start, len) {
      if ("number" === typeof start) {

        if (start < 0 || start >= (0, _emberMetalProperty_get.get)(this, "length")) {
          throw new _emberMetalError["default"](OUT_OF_RANGE_EXCEPTION);
        }

        // fast case
        if (len === undefined) {
          len = 1;
        }

        this.replace(start, len, EMPTY);
      }

      return this;
    },

    /**
      Push the object onto the end of the array. Works just like `push()` but it
      is KVO-compliant.
       ```javascript
      var colors = ['red', 'green'];
       colors.pushObject('black');     // ['red', 'green', 'black']
      colors.pushObject(['yellow']);  // ['red', 'green', ['yellow']]
      ```
       @method pushObject
      @param {*} obj object to push
      @return object same object passed as a param
      @public
    */
    pushObject: function (obj) {
      this.insertAt((0, _emberMetalProperty_get.get)(this, "length"), obj);
      return obj;
    },

    /**
      Add the objects in the passed numerable to the end of the array. Defers
      notifying observers of the change until all objects are added.
       ```javascript
      var colors = ['red'];
       colors.pushObjects(['yellow', 'orange']);  // ['red', 'yellow', 'orange']
      ```
       @method pushObjects
      @param {Ember.Enumerable} objects the objects to add
      @return {Ember.Array} receiver
      @public
    */
    pushObjects: function (objects) {
      if (!(_emberRuntimeMixinsEnumerable["default"].detect(objects) || (0, _emberMetalUtils.isArray)(objects))) {
        throw new TypeError("Must pass Ember.Enumerable to Ember.MutableArray#pushObjects");
      }
      this.replace((0, _emberMetalProperty_get.get)(this, "length"), 0, objects);
      return this;
    },

    /**
      Pop object from array or nil if none are left. Works just like `pop()` but
      it is KVO-compliant.
       ```javascript
      var colors = ['red', 'green', 'blue'];
       colors.popObject();   // 'blue'
      console.log(colors);  // ['red', 'green']
      ```
       @method popObject
      @return object
      @public
    */
    popObject: function () {
      var len = (0, _emberMetalProperty_get.get)(this, "length");
      if (len === 0) {
        return null;
      }

      var ret = this.objectAt(len - 1);
      this.removeAt(len - 1, 1);
      return ret;
    },

    /**
      Shift an object from start of array or nil if none are left. Works just
      like `shift()` but it is KVO-compliant.
       ```javascript
      var colors = ['red', 'green', 'blue'];
       colors.shiftObject();  // 'red'
      console.log(colors);   // ['green', 'blue']
      ```
       @method shiftObject
      @return object
      @public
    */
    shiftObject: function () {
      if ((0, _emberMetalProperty_get.get)(this, "length") === 0) {
        return null;
      }

      var ret = this.objectAt(0);
      this.removeAt(0);
      return ret;
    },

    /**
      Unshift an object to start of array. Works just like `unshift()` but it is
      KVO-compliant.
       ```javascript
      var colors = ['red'];
       colors.unshiftObject('yellow');    // ['yellow', 'red']
      colors.unshiftObject(['black']);   // [['black'], 'yellow', 'red']
      ```
       @method unshiftObject
      @param {*} obj object to unshift
      @return object same object passed as a param
      @public
    */
    unshiftObject: function (obj) {
      this.insertAt(0, obj);
      return obj;
    },

    /**
      Adds the named objects to the beginning of the array. Defers notifying
      observers until all objects have been added.
       ```javascript
      var colors = ['red'];
       colors.unshiftObjects(['black', 'white']);   // ['black', 'white', 'red']
      colors.unshiftObjects('yellow'); // Type Error: 'undefined' is not a function
      ```
       @method unshiftObjects
      @param {Ember.Enumerable} objects the objects to add
      @return {Ember.Array} receiver
      @public
    */
    unshiftObjects: function (objects) {
      this.replace(0, 0, objects);
      return this;
    },

    /**
      Reverse objects in the array. Works just like `reverse()` but it is
      KVO-compliant.
       @method reverseObjects
      @return {Ember.Array} receiver
       @public
    */
    reverseObjects: function () {
      var len = (0, _emberMetalProperty_get.get)(this, "length");
      if (len === 0) {
        return this;
      }

      var objects = this.toArray().reverse();
      this.replace(0, len, objects);
      return this;
    },

    /**
      Replace all the receiver's content with content of the argument.
      If argument is an empty array receiver will be cleared.
       ```javascript
      var colors = ['red', 'green', 'blue'];
       colors.setObjects(['black', 'white']);  // ['black', 'white']
      colors.setObjects([]);                  // []
      ```
       @method setObjects
      @param {Ember.Array} objects array whose content will be used for replacing
          the content of the receiver
      @return {Ember.Array} receiver with the new content
      @public
    */
    setObjects: function (objects) {
      if (objects.length === 0) {
        return this.clear();
      }

      var len = (0, _emberMetalProperty_get.get)(this, "length");
      this.replace(0, len, objects);
      return this;
    },

    // ..........................................................
    // IMPLEMENT Ember.MutableEnumerable
    //

    /**
      Remove all occurrences of an object in the array.
       ```javascript
      var cities = ['Chicago', 'Berlin', 'Lima', 'Chicago'];
       cities.removeObject('Chicago');  // ['Berlin', 'Lima']
      cities.removeObject('Lima');     // ['Berlin']
      cities.removeObject('Tokyo')     // ['Berlin']
      ```
       @method removeObject
      @param {*} obj object to remove
      @return {Ember.Array} receiver
      @public
    */
    removeObject: function (obj) {
      var loc = (0, _emberMetalProperty_get.get)(this, "length") || 0;
      while (--loc >= 0) {
        var curObject = this.objectAt(loc);

        if (curObject === obj) {
          this.removeAt(loc);
        }
      }
      return this;
    },

    /**
      Push the object onto the end of the array if it is not already
      present in the array.
       ```javascript
      var cities = ['Chicago', 'Berlin'];
       cities.addObject('Lima');    // ['Chicago', 'Berlin', 'Lima']
      cities.addObject('Berlin');  // ['Chicago', 'Berlin', 'Lima']
      ```
       @method addObject
      @param {*} obj object to add, if not already present
      @return {Ember.Array} receiver
      @public
    */
    addObject: function (obj) {
      if (!this.contains(obj)) {
        this.pushObject(obj);
      }

      return this;
    }
  });
});
// ..........................................................
// HELPERS
//
enifed("ember-runtime/mixins/mutable_enumerable", ["exports", "ember-metal/enumerable_utils", "ember-runtime/mixins/enumerable", "ember-metal/mixin", "ember-metal/property_events"], function (exports, _emberMetalEnumerable_utils, _emberRuntimeMixinsEnumerable, _emberMetalMixin, _emberMetalProperty_events) {

  /**
  @module ember
  @submodule ember-runtime
  */

  /**
    This mixin defines the API for modifying generic enumerables. These methods
    can be applied to an object regardless of whether it is ordered or
    unordered.
  
    Note that an Enumerable can change even if it does not implement this mixin.
    For example, a MappedEnumerable cannot be directly modified but if its
    underlying enumerable changes, it will change also.
  
    ## Adding Objects
  
    To add an object to an enumerable, use the `addObject()` method. This
    method will only add the object to the enumerable if the object is not
    already present and is of a type supported by the enumerable.
  
    ```javascript
    set.addObject(contact);
    ```
  
    ## Removing Objects
  
    To remove an object from an enumerable, use the `removeObject()` method. This
    will only remove the object if it is present in the enumerable, otherwise
    this method has no effect.
  
    ```javascript
    set.removeObject(contact);
    ```
  
    ## Implementing In Your Own Code
  
    If you are implementing an object and want to support this API, just include
    this mixin in your class and implement the required methods. In your unit
    tests, be sure to apply the Ember.MutableEnumerableTests to your object.
  
    @class MutableEnumerable
    @namespace Ember
    @uses Ember.Enumerable
    @public
  */
  exports["default"] = _emberMetalMixin.Mixin.create(_emberRuntimeMixinsEnumerable["default"], {

    /**
      __Required.__ You must implement this method to apply this mixin.
       Attempts to add the passed object to the receiver if the object is not
      already present in the collection. If the object is present, this method
      has no effect.
       If the passed object is of a type not supported by the receiver,
      then this method should raise an exception.
       @method addObject
      @param {Object} object The object to add to the enumerable.
      @return {Object} the passed object
      @public
    */
    addObject: null,

    /**
      Adds each object in the passed enumerable to the receiver.
       @method addObjects
      @param {Ember.Enumerable} objects the objects to add.
      @return {Object} receiver
      @public
    */
    addObjects: function (objects) {
      (0, _emberMetalProperty_events.beginPropertyChanges)(this);
      (0, _emberMetalEnumerable_utils.forEach)(objects, function (obj) {
        this.addObject(obj);
      }, this);
      (0, _emberMetalProperty_events.endPropertyChanges)(this);
      return this;
    },

    /**
      __Required.__ You must implement this method to apply this mixin.
       Attempts to remove the passed object from the receiver collection if the
      object is present in the collection. If the object is not present,
      this method has no effect.
       If the passed object is of a type not supported by the receiver,
      then this method should raise an exception.
       @method removeObject
      @param {Object} object The object to remove from the enumerable.
      @return {Object} the passed object
      @public
    */
    removeObject: null,

    /**
      Removes each object in the passed enumerable from the receiver.
       @method removeObjects
      @param {Ember.Enumerable} objects the objects to remove
      @return {Object} receiver
      @public
    */
    removeObjects: function (objects) {
      (0, _emberMetalProperty_events.beginPropertyChanges)(this);
      for (var i = objects.length - 1; i >= 0; i--) {
        this.removeObject(objects[i]);
      }
      (0, _emberMetalProperty_events.endPropertyChanges)(this);
      return this;
    }
  });
});
enifed("ember-runtime/mixins/observable", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/get_properties", "ember-metal/set_properties", "ember-metal/mixin", "ember-metal/events", "ember-metal/property_events", "ember-metal/observer", "ember-metal/computed", "ember-metal/is_none"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalGet_properties, _emberMetalSet_properties, _emberMetalMixin, _emberMetalEvents, _emberMetalProperty_events, _emberMetalObserver, _emberMetalComputed, _emberMetalIs_none) {

  /**
    ## Overview
  
    This mixin provides properties and property observing functionality, core
    features of the Ember object model.
  
    Properties and observers allow one object to observe changes to a
    property on another object. This is one of the fundamental ways that
    models, controllers and views communicate with each other in an Ember
    application.
  
    Any object that has this mixin applied can be used in observer
    operations. That includes `Ember.Object` and most objects you will
    interact with as you write your Ember application.
  
    Note that you will not generally apply this mixin to classes yourself,
    but you will use the features provided by this module frequently, so it
    is important to understand how to use it.
  
    ## Using `get()` and `set()`
  
    Because of Ember's support for bindings and observers, you will always
    access properties using the get method, and set properties using the
    set method. This allows the observing objects to be notified and
    computed properties to be handled properly.
  
    More documentation about `get` and `set` are below.
  
    ## Observing Property Changes
  
    You typically observe property changes simply by adding the `observes`
    call to the end of your method declarations in classes that you write.
    For example:
  
    ```javascript
    Ember.Object.extend({
      valueObserver: function() {
        // Executes whenever the "value" property changes
      }.observes('value')
    });
    ```
  
    Although this is the most common way to add an observer, this capability
    is actually built into the `Ember.Object` class on top of two methods
    defined in this mixin: `addObserver` and `removeObserver`. You can use
    these two methods to add and remove observers yourself if you need to
    do so at runtime.
  
    To add an observer for a property, call:
  
    ```javascript
    object.addObserver('propertyKey', targetObject, targetAction)
    ```
  
    This will call the `targetAction` method on the `targetObject` whenever
    the value of the `propertyKey` changes.
  
    Note that if `propertyKey` is a computed property, the observer will be
    called when any of the property dependencies are changed, even if the
    resulting value of the computed property is unchanged. This is necessary
    because computed properties are not computed until `get` is called.
  
    @class Observable
    @namespace Ember
    @public
  */
  exports["default"] = _emberMetalMixin.Mixin.create({

    /**
      Retrieves the value of a property from the object.
       This method is usually similar to using `object[keyName]` or `object.keyName`,
      however it supports both computed properties and the unknownProperty
      handler.
       Because `get` unifies the syntax for accessing all these kinds
      of properties, it can make many refactorings easier, such as replacing a
      simple property with a computed property, or vice versa.
       ### Computed Properties
       Computed properties are methods defined with the `property` modifier
      declared at the end, such as:
       ```javascript
      fullName: function() {
        return this.get('firstName') + ' ' + this.get('lastName');
      }.property('firstName', 'lastName')
      ```
       When you call `get` on a computed property, the function will be
      called and the return value will be returned instead of the function
      itself.
       ### Unknown Properties
       Likewise, if you try to call `get` on a property whose value is
      `undefined`, the `unknownProperty()` method will be called on the object.
      If this method returns any value other than `undefined`, it will be returned
      instead. This allows you to implement "virtual" properties that are
      not defined upfront.
       @method get
      @param {String} keyName The property to retrieve
      @return {Object} The property value or undefined.
      @public
    */
    get: function (keyName) {
      return (0, _emberMetalProperty_get.get)(this, keyName);
    },

    /**
      To get the values of multiple properties at once, call `getProperties`
      with a list of strings or an array:
       ```javascript
      record.getProperties('firstName', 'lastName', 'zipCode');
      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
      ```
       is equivalent to:
       ```javascript
      record.getProperties(['firstName', 'lastName', 'zipCode']);
      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
      ```
       @method getProperties
      @param {String...|Array} list of keys to get
      @return {Object}
      @public
    */
    getProperties: function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _emberMetalGet_properties["default"].apply(null, [this].concat(args));
    },

    /**
      Sets the provided key or path to the value.
       This method is generally very similar to calling `object[key] = value` or
      `object.key = value`, except that it provides support for computed
      properties, the `setUnknownProperty()` method and property observers.
       ### Computed Properties
       If you try to set a value on a key that has a computed property handler
      defined (see the `get()` method for an example), then `set()` will call
      that method, passing both the value and key instead of simply changing
      the value itself. This is useful for those times when you need to
      implement a property that is composed of one or more member
      properties.
       ### Unknown Properties
       If you try to set a value on a key that is undefined in the target
      object, then the `setUnknownProperty()` handler will be called instead. This
      gives you an opportunity to implement complex "virtual" properties that
      are not predefined on the object. If `setUnknownProperty()` returns
      undefined, then `set()` will simply set the value on the object.
       ### Property Observers
       In addition to changing the property, `set()` will also register a property
      change with the object. Unless you have placed this call inside of a
      `beginPropertyChanges()` and `endPropertyChanges(),` any "local" observers
      (i.e. observer methods declared on the same object), will be called
      immediately. Any "remote" observers (i.e. observer methods declared on
      another object) will be placed in a queue and called at a later time in a
      coalesced manner.
       ### Chaining
       In addition to property changes, `set()` returns the value of the object
      itself so you can do chaining like this:
       ```javascript
      record.set('firstName', 'Charles').set('lastName', 'Jolley');
      ```
       @method set
      @param {String} keyName The property to set
      @param {Object} value The value to set or `null`.
      @return {Ember.Observable}
      @public
    */
    set: function (keyName, value) {
      (0, _emberMetalProperty_set.set)(this, keyName, value);
      return this;
    },

    /**
      Sets a list of properties at once. These properties are set inside
      a single `beginPropertyChanges` and `endPropertyChanges` batch, so
      observers will be buffered.
       ```javascript
      record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });
      ```
       @method setProperties
      @param {Object} hash the hash of keys and values to set
      @return {Ember.Observable}
      @public
    */
    setProperties: function (hash) {
      return (0, _emberMetalSet_properties["default"])(this, hash);
    },

    /**
      Begins a grouping of property changes.
       You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call this
      method at the beginning of the changes to begin deferring change
      notifications. When you are done making changes, call
      `endPropertyChanges()` to deliver the deferred change notifications and end
      deferring.
       @method beginPropertyChanges
      @return {Ember.Observable}
      @private
    */
    beginPropertyChanges: function () {
      (0, _emberMetalProperty_events.beginPropertyChanges)();
      return this;
    },

    /**
      Ends a grouping of property changes.
       You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call
      `beginPropertyChanges()` at the beginning of the changes to defer change
      notifications. When you are done making changes, call this method to
      deliver the deferred change notifications and end deferring.
       @method endPropertyChanges
      @return {Ember.Observable}
      @private
    */
    endPropertyChanges: function () {
      (0, _emberMetalProperty_events.endPropertyChanges)();
      return this;
    },

    /**
      Notify the observer system that a property is about to change.
       Sometimes you need to change a value directly or indirectly without
      actually calling `get()` or `set()` on it. In this case, you can use this
      method and `propertyDidChange()` instead. Calling these two methods
      together will notify all observers that the property has potentially
      changed value.
       Note that you must always call `propertyWillChange` and `propertyDidChange`
      as a pair. If you do not, it may get the property change groups out of
      order and cause notifications to be delivered more often than you would
      like.
       @method propertyWillChange
      @param {String} keyName The property key that is about to change.
      @return {Ember.Observable}
      @private
    */
    propertyWillChange: function (keyName) {
      (0, _emberMetalProperty_events.propertyWillChange)(this, keyName);
      return this;
    },

    /**
      Notify the observer system that a property has just changed.
       Sometimes you need to change a value directly or indirectly without
      actually calling `get()` or `set()` on it. In this case, you can use this
      method and `propertyWillChange()` instead. Calling these two methods
      together will notify all observers that the property has potentially
      changed value.
       Note that you must always call `propertyWillChange` and `propertyDidChange`
      as a pair. If you do not, it may get the property change groups out of
      order and cause notifications to be delivered more often than you would
      like.
       @method propertyDidChange
      @param {String} keyName The property key that has just changed.
      @return {Ember.Observable}
      @private
    */
    propertyDidChange: function (keyName) {
      (0, _emberMetalProperty_events.propertyDidChange)(this, keyName);
      return this;
    },

    /**
      Convenience method to call `propertyWillChange` and `propertyDidChange` in
      succession.
       @method notifyPropertyChange
      @param {String} keyName The property key to be notified about.
      @return {Ember.Observable}
      @private
    */
    notifyPropertyChange: function (keyName) {
      this.propertyWillChange(keyName);
      this.propertyDidChange(keyName);
      return this;
    },

    addBeforeObserver: function (key, target, method) {
      _emberMetalCore["default"].deprecate("Before observers are deprecated and will be removed in a future release. If you want to keep track of previous values you have to implement it yourself.", false, { url: "http://emberjs.com/guides/deprecations/#toc_deprecate-beforeobservers" });
      (0, _emberMetalObserver.addBeforeObserver)(this, key, target, method);
    },

    /**
      Adds an observer on a property.
       This is the core method used to register an observer for a property.
       Once you call this method, any time the key's value is set, your observer
      will be notified. Note that the observers are triggered any time the
      value is set, regardless of whether it has actually changed. Your
      observer should be prepared to handle that.
       You can also pass an optional context parameter to this method. The
      context will be passed to your observer method whenever it is triggered.
      Note that if you add the same target/method pair on a key multiple times
      with different context parameters, your observer will only be called once
      with the last context you passed.
       ### Observer Methods
       Observer methods you pass should generally have the following signature if
      you do not pass a `context` parameter:
       ```javascript
      fooDidChange: function(sender, key, value, rev) { };
      ```
       The sender is the object that changed. The key is the property that
      changes. The value property is currently reserved and unused. The rev
      is the last property revision of the object when it changed, which you can
      use to detect if the key value has really changed or not.
       If you pass a `context` parameter, the context will be passed before the
      revision like so:
       ```javascript
      fooDidChange: function(sender, key, value, context, rev) { };
      ```
       Usually you will not need the value, context or revision parameters at
      the end. In this case, it is common to write observer methods that take
      only a sender and key value as parameters or, if you aren't interested in
      any of these values, to write an observer that has no parameters at all.
       @method addObserver
      @param {String} key The key to observer
      @param {Object} target The target object to invoke
      @param {String|Function} method The method to invoke.
      @public
    */
    addObserver: function (key, target, method) {
      (0, _emberMetalObserver.addObserver)(this, key, target, method);
    },

    /**
      Remove an observer you have previously registered on this object. Pass
      the same key, target, and method you passed to `addObserver()` and your
      target will no longer receive notifications.
       @method removeObserver
      @param {String} key The key to observer
      @param {Object} target The target object to invoke
      @param {String|Function} method The method to invoke.
      @public
    */
    removeObserver: function (key, target, method) {
      (0, _emberMetalObserver.removeObserver)(this, key, target, method);
    },

    /**
      Returns `true` if the object currently has observers registered for a
      particular key. You can use this method to potentially defer performing
      an expensive action until someone begins observing a particular property
      on the object.
       @method hasObserverFor
      @param {String} key Key to check
      @return {Boolean}
      @private
    */
    hasObserverFor: function (key) {
      return (0, _emberMetalEvents.hasListeners)(this, key + ":change");
    },

    /**
      Retrieves the value of a property, or a default value in the case that the
      property returns `undefined`.
       ```javascript
      person.getWithDefault('lastName', 'Doe');
      ```
       @method getWithDefault
      @param {String} keyName The name of the property to retrieve
      @param {Object} defaultValue The value to return if the property value is undefined
      @return {Object} The property value or the defaultValue.
      @public
    */
    getWithDefault: function (keyName, defaultValue) {
      return (0, _emberMetalProperty_get.getWithDefault)(this, keyName, defaultValue);
    },

    /**
      Set the value of a property to the current value plus some amount.
       ```javascript
      person.incrementProperty('age');
      team.incrementProperty('score', 2);
      ```
       @method incrementProperty
      @param {String} keyName The name of the property to increment
      @param {Number} increment The amount to increment by. Defaults to 1
      @return {Number} The new property value
      @public
    */
    incrementProperty: function (keyName, increment) {
      if ((0, _emberMetalIs_none["default"])(increment)) {
        increment = 1;
      }
      _emberMetalCore["default"].assert("Must pass a numeric value to incrementProperty", !isNaN(parseFloat(increment)) && isFinite(increment));
      (0, _emberMetalProperty_set.set)(this, keyName, (parseFloat((0, _emberMetalProperty_get.get)(this, keyName)) || 0) + increment);
      return (0, _emberMetalProperty_get.get)(this, keyName);
    },

    /**
      Set the value of a property to the current value minus some amount.
       ```javascript
      player.decrementProperty('lives');
      orc.decrementProperty('health', 5);
      ```
       @method decrementProperty
      @param {String} keyName The name of the property to decrement
      @param {Number} decrement The amount to decrement by. Defaults to 1
      @return {Number} The new property value
      @public
    */
    decrementProperty: function (keyName, decrement) {
      if ((0, _emberMetalIs_none["default"])(decrement)) {
        decrement = 1;
      }
      _emberMetalCore["default"].assert("Must pass a numeric value to decrementProperty", !isNaN(parseFloat(decrement)) && isFinite(decrement));
      (0, _emberMetalProperty_set.set)(this, keyName, ((0, _emberMetalProperty_get.get)(this, keyName) || 0) - decrement);
      return (0, _emberMetalProperty_get.get)(this, keyName);
    },

    /**
      Set the value of a boolean property to the opposite of its
      current value.
       ```javascript
      starship.toggleProperty('warpDriveEngaged');
      ```
       @method toggleProperty
      @param {String} keyName The name of the property to toggle
      @return {Boolean} The new property value
      @public
    */
    toggleProperty: function (keyName) {
      (0, _emberMetalProperty_set.set)(this, keyName, !(0, _emberMetalProperty_get.get)(this, keyName));
      return (0, _emberMetalProperty_get.get)(this, keyName);
    },

    /**
      Returns the cached value of a computed property, if it exists.
      This allows you to inspect the value of a computed property
      without accidentally invoking it if it is intended to be
      generated lazily.
       @method cacheFor
      @param {String} keyName
      @return {Object} The cached value of the computed property, if any
      @public
    */
    cacheFor: function (keyName) {
      return (0, _emberMetalComputed.cacheFor)(this, keyName);
    },

    // intended for debugging purposes
    observersForKey: function (keyName) {
      return (0, _emberMetalObserver.observersFor)(this, keyName);
    }
  });
});
/**
@module ember
@submodule ember-runtime
*/
// Ember.assert
enifed("ember-runtime/mixins/promise_proxy", ["exports", "ember-metal/property_get", "ember-metal/set_properties", "ember-metal/computed", "ember-metal/mixin", "ember-metal/error"], function (exports, _emberMetalProperty_get, _emberMetalSet_properties, _emberMetalComputed, _emberMetalMixin, _emberMetalError) {

  var not = _emberMetalComputed.computed.not;
  var or = _emberMetalComputed.computed.or;

  /**
    @module ember
    @submodule ember-runtime
  */

  function tap(proxy, promise) {
    (0, _emberMetalSet_properties["default"])(proxy, {
      isFulfilled: false,
      isRejected: false
    });

    return promise.then(function (value) {
      (0, _emberMetalSet_properties["default"])(proxy, {
        content: value,
        isFulfilled: true
      });
      return value;
    }, function (reason) {
      (0, _emberMetalSet_properties["default"])(proxy, {
        reason: reason,
        isRejected: true
      });
      throw reason;
    }, "Ember: PromiseProxy");
  }

  /**
    A low level mixin making ObjectProxy, ObjectController or ArrayControllers promise-aware.
  
    ```javascript
    var ObjectPromiseController = Ember.ObjectController.extend(Ember.PromiseProxyMixin);
  
    var controller = ObjectPromiseController.create({
      promise: $.getJSON('/some/remote/data.json')
    });
  
    controller.then(function(json){
       // the json
    }, function(reason) {
       // the reason why you have no json
    });
    ```
  
    the controller has bindable attributes which
    track the promises life cycle
  
    ```javascript
    controller.get('isPending')   //=> true
    controller.get('isSettled')  //=> false
    controller.get('isRejected')  //=> false
    controller.get('isFulfilled') //=> false
    ```
  
    When the the $.getJSON completes, and the promise is fulfilled
    with json, the life cycle attributes will update accordingly.
  
    ```javascript
    controller.get('isPending')   //=> false
    controller.get('isSettled')   //=> true
    controller.get('isRejected')  //=> false
    controller.get('isFulfilled') //=> true
    ```
  
    As the controller is an ObjectController, and the json now its content,
    all the json properties will be available directly from the controller.
  
    ```javascript
    // Assuming the following json:
    {
      firstName: 'Stefan',
      lastName: 'Penner'
    }
  
    // both properties will accessible on the controller
    controller.get('firstName') //=> 'Stefan'
    controller.get('lastName')  //=> 'Penner'
    ```
  
    If the controller is backing a template, the attributes are
    bindable from within that template
  
    ```handlebars
    {{#if isPending}}
      loading...
    {{else}}
      firstName: {{firstName}}
      lastName: {{lastName}}
    {{/if}}
    ```
    @class Ember.PromiseProxyMixin
    @public
  */
  exports["default"] = _emberMetalMixin.Mixin.create({
    /**
      If the proxied promise is rejected this will contain the reason
      provided.
       @property reason
      @default null
      @public
    */
    reason: null,

    /**
      Once the proxied promise has settled this will become `false`.
       @property isPending
      @default true
      @public
    */
    isPending: not("isSettled").readOnly(),

    /**
      Once the proxied promise has settled this will become `true`.
       @property isSettled
      @default false
      @public
    */
    isSettled: or("isRejected", "isFulfilled").readOnly(),

    /**
      Will become `true` if the proxied promise is rejected.
       @property isRejected
      @default false
      @public
    */
    isRejected: false,

    /**
      Will become `true` if the proxied promise is fulfilled.
       @property isFulfilled
      @default false
      @public
    */
    isFulfilled: false,

    /**
      The promise whose fulfillment value is being proxied by this object.
       This property must be specified upon creation, and should not be
      changed once created.
       Example:
       ```javascript
      Ember.ObjectController.extend(Ember.PromiseProxyMixin).create({
        promise: <thenable>
      });
      ```
       @property promise
      @public
    */
    promise: (0, _emberMetalComputed.computed)({
      get: function () {
        throw new _emberMetalError["default"]("PromiseProxy's promise must be set");
      },
      set: function (key, promise) {
        return tap(this, promise);
      }
    }),

    /**
      An alias to the proxied promise's `then`.
       See RSVP.Promise.then.
       @method then
      @param {Function} callback
      @return {RSVP.Promise}
      @public
    */
    then: promiseAlias("then"),

    /**
      An alias to the proxied promise's `catch`.
       See RSVP.Promise.catch.
       @method catch
      @param {Function} callback
      @return {RSVP.Promise}
      @since 1.3.0
      @public
    */
    "catch": promiseAlias("catch"),

    /**
      An alias to the proxied promise's `finally`.
       See RSVP.Promise.finally.
       @method finally
      @param {Function} callback
      @return {RSVP.Promise}
      @since 1.3.0
      @public
    */
    "finally": promiseAlias("finally")

  });

  function promiseAlias(name) {
    return function () {
      var promise = (0, _emberMetalProperty_get.get)(this, "promise");
      return promise[name].apply(promise, arguments);
    };
  }
});
enifed("ember-runtime/mixins/sortable", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/enumerable_utils", "ember-runtime/mixins/mutable_enumerable", "ember-runtime/compare", "ember-metal/observer", "ember-metal/computed", "ember-metal/computed_macros", "ember-metal/mixin"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalEnumerable_utils, _emberRuntimeMixinsMutable_enumerable, _emberRuntimeCompare, _emberMetalObserver, _emberMetalComputed, _emberMetalComputed_macros, _emberMetalMixin) {
  //ES6TODO: should we access these directly from their package or from how their exposed in ember-metal?

  /**
    `Ember.SortableMixin` provides a standard interface for array proxies
    to specify a sort order and maintain this sorting when objects are added,
    removed, or updated without changing the implicit order of their underlying
    model array:
  
    ```javascript
    songs = [
      {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},
      {trackNumber: 2, title: 'Back in the U.S.S.R.'},
      {trackNumber: 3, title: 'Glass Onion'},
    ];
  
    songsController = Ember.ArrayController.create({
      model: songs,
      sortProperties: ['trackNumber'],
      sortAscending: true
    });
  
    songsController.get('firstObject');  // {trackNumber: 2, title: 'Back in the U.S.S.R.'}
  
    songsController.addObject({trackNumber: 1, title: 'Dear Prudence'});
    songsController.get('firstObject');  // {trackNumber: 1, title: 'Dear Prudence'}
    ```
  
    If you add or remove the properties to sort by or change the sort direction the model
    sort order will be automatically updated.
  
    ```javascript
    songsController.set('sortProperties', ['title']);
    songsController.get('firstObject'); // {trackNumber: 2, title: 'Back in the U.S.S.R.'}
  
    songsController.toggleProperty('sortAscending');
    songsController.get('firstObject'); // {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'}
    ```
  
    `SortableMixin` works by sorting the `arrangedContent` array, which is the array that
    `ArrayProxy` displays. Due to the fact that the underlying 'content' array is not changed, that
    array will not display the sorted list:
  
     ```javascript
    songsController.get('content').get('firstObject'); // Returns the unsorted original content
    songsController.get('firstObject'); // Returns the sorted content.
    ```
  
    Although the sorted content can also be accessed through the `arrangedContent` property,
    it is preferable to use the proxied class and not the `arrangedContent` array directly.
  
    @class SortableMixin
    @namespace Ember
    @uses Ember.MutableEnumerable
    @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create(_emberRuntimeMixinsMutable_enumerable["default"], {

    /**
      Specifies which properties dictate the `arrangedContent`'s sort order.
       When specifying multiple properties the sorting will use properties
      from the `sortProperties` array prioritized from first to last.
       @property {Array} sortProperties
      @private
    */
    sortProperties: null,

    /**
      Specifies the `arrangedContent`'s sort direction.
      Sorts the content in ascending order by default. Set to `false` to
      use descending order.
       @property {Boolean} sortAscending
      @default true
      @private
    */
    sortAscending: true,

    /**
      The function used to compare two values. You can override this if you
      want to do custom comparisons. Functions must be of the type expected by
      Array#sort, i.e.,
       *  return 0 if the two parameters are equal,
      *  return a negative value if the first parameter is smaller than the second or
      *  return a positive value otherwise:
       ```javascript
      function(x, y) { // These are assumed to be integers
        if (x === y)
          return 0;
        return x < y ? -1 : 1;
      }
      ```
       @property sortFunction
      @type {Function}
      @default Ember.compare
      @private
    */
    sortFunction: _emberRuntimeCompare["default"],

    orderBy: function (item1, item2) {
      var result = 0;
      var sortProperties = (0, _emberMetalProperty_get.get)(this, "sortProperties");
      var sortAscending = (0, _emberMetalProperty_get.get)(this, "sortAscending");
      var sortFunction = (0, _emberMetalProperty_get.get)(this, "sortFunction");

      _emberMetalCore["default"].assert("you need to define `sortProperties`", !!sortProperties);

      (0, _emberMetalEnumerable_utils.forEach)(sortProperties, function (propertyName) {
        if (result === 0) {
          result = sortFunction.call(this, (0, _emberMetalProperty_get.get)(item1, propertyName), (0, _emberMetalProperty_get.get)(item2, propertyName));
          if (result !== 0 && !sortAscending) {
            result = -1 * result;
          }
        }
      }, this);

      return result;
    },

    destroy: function () {
      var content = (0, _emberMetalProperty_get.get)(this, "content");
      var sortProperties = (0, _emberMetalProperty_get.get)(this, "sortProperties");

      if (content && sortProperties) {
        (0, _emberMetalEnumerable_utils.forEach)(content, function (item) {
          (0, _emberMetalEnumerable_utils.forEach)(sortProperties, function (sortProperty) {
            (0, _emberMetalObserver.removeObserver)(item, sortProperty, this, "contentItemSortPropertyDidChange");
          }, this);
        }, this);
      }

      return this._super.apply(this, arguments);
    },

    isSorted: (0, _emberMetalComputed_macros.notEmpty)("sortProperties"),

    /**
      Overrides the default `arrangedContent` from `ArrayProxy` in order to sort by `sortFunction`.
      Also sets up observers for each `sortProperty` on each item in the content Array.
       @property arrangedContent
      @private
    */
    arrangedContent: (0, _emberMetalComputed.computed)("content", "sortProperties.@each", {
      get: function (key) {
        var content = (0, _emberMetalProperty_get.get)(this, "content");
        var isSorted = (0, _emberMetalProperty_get.get)(this, "isSorted");
        var sortProperties = (0, _emberMetalProperty_get.get)(this, "sortProperties");
        var self = this;

        if (content && isSorted) {
          content = content.slice();
          content.sort(function (item1, item2) {
            return self.orderBy(item1, item2);
          });
          (0, _emberMetalEnumerable_utils.forEach)(content, function (item) {
            (0, _emberMetalEnumerable_utils.forEach)(sortProperties, function (sortProperty) {
              (0, _emberMetalObserver.addObserver)(item, sortProperty, this, "contentItemSortPropertyDidChange");
            }, this);
          }, this);
          return _emberMetalCore["default"].A(content);
        }

        return content;
      }
    }),

    _contentWillChange: (0, _emberMetalMixin.beforeObserver)("content", function () {
      var content = (0, _emberMetalProperty_get.get)(this, "content");
      var sortProperties = (0, _emberMetalProperty_get.get)(this, "sortProperties");

      if (content && sortProperties) {
        (0, _emberMetalEnumerable_utils.forEach)(content, function (item) {
          (0, _emberMetalEnumerable_utils.forEach)(sortProperties, function (sortProperty) {
            (0, _emberMetalObserver.removeObserver)(item, sortProperty, this, "contentItemSortPropertyDidChange");
          }, this);
        }, this);
      }

      this._super.apply(this, arguments);
    }),

    sortPropertiesWillChange: (0, _emberMetalMixin.beforeObserver)("sortProperties", function () {
      this._lastSortAscending = undefined;
    }),

    sortPropertiesDidChange: (0, _emberMetalMixin.observer)("sortProperties", function () {
      this._lastSortAscending = undefined;
    }),

    sortAscendingWillChange: (0, _emberMetalMixin.beforeObserver)("sortAscending", function () {
      this._lastSortAscending = (0, _emberMetalProperty_get.get)(this, "sortAscending");
    }),

    sortAscendingDidChange: (0, _emberMetalMixin.observer)("sortAscending", function () {
      if (this._lastSortAscending !== undefined && (0, _emberMetalProperty_get.get)(this, "sortAscending") !== this._lastSortAscending) {
        var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");
        arrangedContent.reverseObjects();
      }
    }),

    contentArrayWillChange: function (array, idx, removedCount, addedCount) {
      var isSorted = (0, _emberMetalProperty_get.get)(this, "isSorted");

      if (isSorted) {
        var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");
        var removedObjects = array.slice(idx, idx + removedCount);
        var sortProperties = (0, _emberMetalProperty_get.get)(this, "sortProperties");

        (0, _emberMetalEnumerable_utils.forEach)(removedObjects, function (item) {
          arrangedContent.removeObject(item);

          (0, _emberMetalEnumerable_utils.forEach)(sortProperties, function (sortProperty) {
            (0, _emberMetalObserver.removeObserver)(item, sortProperty, this, "contentItemSortPropertyDidChange");
          }, this);
        }, this);
      }

      return this._super(array, idx, removedCount, addedCount);
    },

    contentArrayDidChange: function (array, idx, removedCount, addedCount) {
      var isSorted = (0, _emberMetalProperty_get.get)(this, "isSorted");
      var sortProperties = (0, _emberMetalProperty_get.get)(this, "sortProperties");

      if (isSorted) {
        var addedObjects = array.slice(idx, idx + addedCount);

        (0, _emberMetalEnumerable_utils.forEach)(addedObjects, function (item) {
          this.insertItemSorted(item);

          (0, _emberMetalEnumerable_utils.forEach)(sortProperties, function (sortProperty) {
            (0, _emberMetalObserver.addObserver)(item, sortProperty, this, "contentItemSortPropertyDidChange");
          }, this);
        }, this);
      }

      return this._super(array, idx, removedCount, addedCount);
    },

    insertItemSorted: function (item) {
      var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");
      var length = (0, _emberMetalProperty_get.get)(arrangedContent, "length");

      var idx = this._binarySearch(item, 0, length);
      arrangedContent.insertAt(idx, item);
    },

    contentItemSortPropertyDidChange: function (item) {
      var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");
      var oldIndex = arrangedContent.indexOf(item);
      var leftItem = arrangedContent.objectAt(oldIndex - 1);
      var rightItem = arrangedContent.objectAt(oldIndex + 1);
      var leftResult = leftItem && this.orderBy(item, leftItem);
      var rightResult = rightItem && this.orderBy(item, rightItem);

      if (leftResult < 0 || rightResult > 0) {
        arrangedContent.removeObject(item);
        this.insertItemSorted(item);
      }
    },

    _binarySearch: function (item, low, high) {
      var mid, midItem, res, arrangedContent;

      if (low === high) {
        return low;
      }

      arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");

      mid = low + Math.floor((high - low) / 2);
      midItem = arrangedContent.objectAt(mid);

      res = this.orderBy(midItem, item);

      if (res < 0) {
        return this._binarySearch(item, mid + 1, high);
      } else if (res > 0) {
        return this._binarySearch(item, low, mid);
      }

      return mid;
    }
  });
});
/**
@module ember
@submodule ember-runtime
*/

// Ember.assert, Ember.A
enifed("ember-runtime/mixins/target_action_support", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/mixin", "ember-metal/computed"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalMixin, _emberMetalComputed) {

  /**
  `Ember.TargetActionSupport` is a mixin that can be included in a class
  to add a `triggerAction` method with semantics similar to the Handlebars
  `{{action}}` helper. In normal Ember usage, the `{{action}}` helper is
  usually the best choice. This mixin is most often useful when you are
  doing more complex event handling in View objects.
  
  See also `Ember.ViewTargetActionSupport`, which has
  view-aware defaults for target and actionContext.
  
  @class TargetActionSupport
  @namespace Ember
  @extends Ember.Mixin
  @private
  */
  var TargetActionSupport = _emberMetalMixin.Mixin.create({
    target: null,
    action: null,
    actionContext: null,

    targetObject: (0, _emberMetalComputed.computed)("target", function () {
      if (this._targetObject) {
        return this._targetObject;
      }

      var target = (0, _emberMetalProperty_get.get)(this, "target");

      if (typeof target === "string") {
        var value = (0, _emberMetalProperty_get.get)(this, target);
        if (value === undefined) {
          value = (0, _emberMetalProperty_get.get)(_emberMetalCore["default"].lookup, target);
        }

        return value;
      } else {
        return target;
      }
    }),

    actionContextObject: (0, _emberMetalComputed.computed)(function () {
      var actionContext = (0, _emberMetalProperty_get.get)(this, "actionContext");

      if (typeof actionContext === "string") {
        var value = (0, _emberMetalProperty_get.get)(this, actionContext);
        if (value === undefined) {
          value = (0, _emberMetalProperty_get.get)(_emberMetalCore["default"].lookup, actionContext);
        }
        return value;
      } else {
        return actionContext;
      }
    }).property("actionContext"),

    /**
    Send an `action` with an `actionContext` to a `target`. The action, actionContext
    and target will be retrieved from properties of the object. For example:
     ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: Ember.computed.alias('controller'),
      action: 'save',
      actionContext: Ember.computed.alias('context'),
      click: function() {
        this.triggerAction(); // Sends the `save` action, along with the current context
                              // to the current controller
      }
    });
    ```
     The `target`, `action`, and `actionContext` can be provided as properties of
    an optional object argument to `triggerAction` as well.
     ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      click: function() {
        this.triggerAction({
          action: 'save',
          target: this.get('controller'),
          actionContext: this.get('context')
        }); // Sends the `save` action, along with the current context
            // to the current controller
      }
    });
    ```
     The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
    But `target` and `action` must be specified either as properties or with the argument
    to `triggerAction`, or a combination:
     ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: Ember.computed.alias('controller'),
      click: function() {
        this.triggerAction({
          action: 'save'
        }); // Sends the `save` action, along with a reference to `this`,
            // to the current controller
      }
    });
    ```
     @method triggerAction
    @param opts {Object} (optional, with the optional keys action, target and/or actionContext)
    @return {Boolean} true if the action was sent successfully and did not return false
    @private
    */
    triggerAction: function (opts) {
      opts = opts || {};
      var action = opts.action || (0, _emberMetalProperty_get.get)(this, "action");
      var target = opts.target || (0, _emberMetalProperty_get.get)(this, "targetObject");
      var actionContext = opts.actionContext;

      function args(options, actionName) {
        var ret = [];
        if (actionName) {
          ret.push(actionName);
        }

        return ret.concat(options);
      }

      if (typeof actionContext === "undefined") {
        actionContext = (0, _emberMetalProperty_get.get)(this, "actionContextObject") || this;
      }

      if (target && action) {
        var ret;

        if (target.send) {
          ret = target.send.apply(target, args(actionContext, action));
        } else {
          _emberMetalCore["default"].assert("The action '" + action + "' did not exist on " + target, typeof target[action] === "function");
          ret = target[action].apply(target, args(actionContext));
        }

        if (ret !== false) {
          ret = true;
        }

        return ret;
      } else {
        return false;
      }
    }
  });

  exports["default"] = TargetActionSupport;
});
/**
@module ember
@submodule ember-runtime
*/
// Ember.lookup, Ember.assert
enifed("ember-runtime/system/application", ["exports", "ember-runtime/system/namespace"], function (exports, _emberRuntimeSystemNamespace) {
  exports["default"] = _emberRuntimeSystemNamespace["default"].extend();
});
enifed("ember-runtime/system/array_proxy", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-runtime/utils", "ember-metal/computed", "ember-metal/mixin", "ember-metal/property_events", "ember-metal/error", "ember-runtime/system/object", "ember-runtime/mixins/mutable_array", "ember-runtime/mixins/enumerable", "ember-runtime/system/string", "ember-metal/alias"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberRuntimeUtils, _emberMetalComputed, _emberMetalMixin, _emberMetalProperty_events, _emberMetalError, _emberRuntimeSystemObject, _emberRuntimeMixinsMutable_array, _emberRuntimeMixinsEnumerable, _emberRuntimeSystemString, _emberMetalAlias) {

  /**
  @module ember
  @submodule ember-runtime
  */

  var OUT_OF_RANGE_EXCEPTION = "Index out of range";
  var EMPTY = [];

  function K() {
    return this;
  }

  /**
    An ArrayProxy wraps any other object that implements `Ember.Array` and/or
    `Ember.MutableArray,` forwarding all requests. This makes it very useful for
    a number of binding use cases or other cases where being able to swap
    out the underlying array is useful.
  
    A simple example of usage:
  
    ```javascript
    var pets = ['dog', 'cat', 'fish'];
    var ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });
  
    ap.get('firstObject');                        // 'dog'
    ap.set('content', ['amoeba', 'paramecium']);
    ap.get('firstObject');                        // 'amoeba'
    ```
  
    This class can also be useful as a layer to transform the contents of
    an array, as they are accessed. This can be done by overriding
    `objectAtContent`:
  
    ```javascript
    var pets = ['dog', 'cat', 'fish'];
    var ap = Ember.ArrayProxy.create({
        content: Ember.A(pets),
        objectAtContent: function(idx) {
            return this.get('content').objectAt(idx).toUpperCase();
        }
    });
  
    ap.get('firstObject'); // . 'DOG'
    ```
  
    @class ArrayProxy
    @namespace Ember
    @extends Ember.Object
    @uses Ember.MutableArray
    @private
  */
  var ArrayProxy = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsMutable_array["default"], {

    /**
      The content array. Must be an object that implements `Ember.Array` and/or
      `Ember.MutableArray.`
       @property content
      @type Ember.Array
      @private
    */
    content: null,

    /**
     The array that the proxy pretends to be. In the default `ArrayProxy`
     implementation, this and `content` are the same. Subclasses of `ArrayProxy`
     can override this property to provide things like sorting and filtering.
      @property arrangedContent
     @private
    */
    arrangedContent: (0, _emberMetalAlias["default"])("content"),

    /**
      Should actually retrieve the object at the specified index from the
      content. You can override this method in subclasses to transform the
      content item to something new.
       This method will only be called if content is non-`null`.
       @method objectAtContent
      @param {Number} idx The index to retrieve.
      @return {Object} the value or undefined if none found
      @private
    */
    objectAtContent: function (idx) {
      return (0, _emberMetalProperty_get.get)(this, "arrangedContent").objectAt(idx);
    },

    /**
      Should actually replace the specified objects on the content array.
      You can override this method in subclasses to transform the content item
      into something new.
       This method will only be called if content is non-`null`.
       @method replaceContent
      @param {Number} idx The starting index
      @param {Number} amt The number of items to remove from the content.
      @param {Array} objects Optional array of objects to insert or null if no
        objects.
      @return {void}
      @private
    */
    replaceContent: function (idx, amt, objects) {
      (0, _emberMetalProperty_get.get)(this, "content").replace(idx, amt, objects);
    },

    /**
      Invoked when the content property is about to change. Notifies observers that the
      entire array content will change.
       @private
      @method _contentWillChange
    */
    _contentWillChange: (0, _emberMetalMixin.beforeObserver)("content", function () {
      this._teardownContent();
    }),

    _teardownContent: function () {
      var content = (0, _emberMetalProperty_get.get)(this, "content");

      if (content) {
        content.removeArrayObserver(this, {
          willChange: "contentArrayWillChange",
          didChange: "contentArrayDidChange"
        });
      }
    },

    /**
      Override to implement content array `willChange` observer.
       @method contentArrayWillChange
       @param {Ember.Array} contentArray the content array
      @param {Number} start starting index of the change
      @param {Number} removeCount count of items removed
      @param {Number} addCount count of items added
      @private
    */
    contentArrayWillChange: K,
    /**
      Override to implement content array `didChange` observer.
       @method contentArrayDidChange
       @param {Ember.Array} contentArray the content array
      @param {Number} start starting index of the change
      @param {Number} removeCount count of items removed
      @param {Number} addCount count of items added
      @private
    */
    contentArrayDidChange: K,

    /**
      Invoked when the content property changes. Notifies observers that the
      entire array content has changed.
       @private
      @method _contentDidChange
    */
    _contentDidChange: (0, _emberMetalMixin.observer)("content", function () {
      var content = (0, _emberMetalProperty_get.get)(this, "content");

      _emberMetalCore["default"].assert("Can't set ArrayProxy's content to itself", content !== this);

      this._setupContent();
    }),

    _setupContent: function () {
      var content = (0, _emberMetalProperty_get.get)(this, "content");

      if (content) {
        _emberMetalCore["default"].assert((0, _emberRuntimeSystemString.fmt)("ArrayProxy expects an Array or " + "Ember.ArrayProxy, but you passed %@", [typeof content]), (0, _emberRuntimeUtils.isArray)(content) || content.isDestroyed);

        content.addArrayObserver(this, {
          willChange: "contentArrayWillChange",
          didChange: "contentArrayDidChange"
        });
      }
    },

    _arrangedContentWillChange: (0, _emberMetalMixin.beforeObserver)("arrangedContent", function () {
      var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");
      var len = arrangedContent ? (0, _emberMetalProperty_get.get)(arrangedContent, "length") : 0;

      this.arrangedContentArrayWillChange(this, 0, len, undefined);
      this.arrangedContentWillChange(this);

      this._teardownArrangedContent(arrangedContent);
    }),

    _arrangedContentDidChange: (0, _emberMetalMixin.observer)("arrangedContent", function () {
      var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");
      var len = arrangedContent ? (0, _emberMetalProperty_get.get)(arrangedContent, "length") : 0;

      _emberMetalCore["default"].assert("Can't set ArrayProxy's content to itself", arrangedContent !== this);

      this._setupArrangedContent();

      this.arrangedContentDidChange(this);
      this.arrangedContentArrayDidChange(this, 0, undefined, len);
    }),

    _setupArrangedContent: function () {
      var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");

      if (arrangedContent) {
        _emberMetalCore["default"].assert((0, _emberRuntimeSystemString.fmt)("ArrayProxy expects an Array or " + "Ember.ArrayProxy, but you passed %@", [typeof arrangedContent]), (0, _emberRuntimeUtils.isArray)(arrangedContent) || arrangedContent.isDestroyed);

        arrangedContent.addArrayObserver(this, {
          willChange: "arrangedContentArrayWillChange",
          didChange: "arrangedContentArrayDidChange"
        });
      }
    },

    _teardownArrangedContent: function () {
      var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");

      if (arrangedContent) {
        arrangedContent.removeArrayObserver(this, {
          willChange: "arrangedContentArrayWillChange",
          didChange: "arrangedContentArrayDidChange"
        });
      }
    },

    arrangedContentWillChange: K,
    arrangedContentDidChange: K,

    objectAt: function (idx) {
      return (0, _emberMetalProperty_get.get)(this, "content") && this.objectAtContent(idx);
    },

    length: (0, _emberMetalComputed.computed)(function () {
      var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");
      return arrangedContent ? (0, _emberMetalProperty_get.get)(arrangedContent, "length") : 0;
      // No dependencies since Enumerable notifies length of change
    }),

    _replace: function (idx, amt, objects) {
      var content = (0, _emberMetalProperty_get.get)(this, "content");
      _emberMetalCore["default"].assert("The content property of " + this.constructor + " should be set before modifying it", content);
      if (content) {
        this.replaceContent(idx, amt, objects);
      }

      return this;
    },

    replace: function () {
      if ((0, _emberMetalProperty_get.get)(this, "arrangedContent") === (0, _emberMetalProperty_get.get)(this, "content")) {
        this._replace.apply(this, arguments);
      } else {
        throw new _emberMetalError["default"]("Using replace on an arranged ArrayProxy is not allowed.");
      }
    },

    _insertAt: function (idx, object) {
      if (idx > (0, _emberMetalProperty_get.get)(this, "content.length")) {
        throw new _emberMetalError["default"](OUT_OF_RANGE_EXCEPTION);
      }

      this._replace(idx, 0, [object]);
      return this;
    },

    insertAt: function (idx, object) {
      if ((0, _emberMetalProperty_get.get)(this, "arrangedContent") === (0, _emberMetalProperty_get.get)(this, "content")) {
        return this._insertAt(idx, object);
      } else {
        throw new _emberMetalError["default"]("Using insertAt on an arranged ArrayProxy is not allowed.");
      }
    },

    removeAt: function (start, len) {
      if ("number" === typeof start) {
        var content = (0, _emberMetalProperty_get.get)(this, "content");
        var arrangedContent = (0, _emberMetalProperty_get.get)(this, "arrangedContent");
        var indices = [];
        var i;

        if (start < 0 || start >= (0, _emberMetalProperty_get.get)(this, "length")) {
          throw new _emberMetalError["default"](OUT_OF_RANGE_EXCEPTION);
        }

        if (len === undefined) {
          len = 1;
        }

        // Get a list of indices in original content to remove
        for (i = start; i < start + len; i++) {
          // Use arrangedContent here so we avoid confusion with objects transformed by objectAtContent
          indices.push(content.indexOf(arrangedContent.objectAt(i)));
        }

        // Replace in reverse order since indices will change
        indices.sort(function (a, b) {
          return b - a;
        });

        (0, _emberMetalProperty_events.beginPropertyChanges)();
        for (i = 0; i < indices.length; i++) {
          this._replace(indices[i], 1, EMPTY);
        }
        (0, _emberMetalProperty_events.endPropertyChanges)();
      }

      return this;
    },

    pushObject: function (obj) {
      this._insertAt((0, _emberMetalProperty_get.get)(this, "content.length"), obj);
      return obj;
    },

    pushObjects: function (objects) {
      if (!(_emberRuntimeMixinsEnumerable["default"].detect(objects) || (0, _emberRuntimeUtils.isArray)(objects))) {
        throw new TypeError("Must pass Ember.Enumerable to Ember.MutableArray#pushObjects");
      }
      this._replace((0, _emberMetalProperty_get.get)(this, "length"), 0, objects);
      return this;
    },

    setObjects: function (objects) {
      if (objects.length === 0) {
        return this.clear();
      }

      var len = (0, _emberMetalProperty_get.get)(this, "length");
      this._replace(0, len, objects);
      return this;
    },

    unshiftObject: function (obj) {
      this._insertAt(0, obj);
      return obj;
    },

    unshiftObjects: function (objects) {
      this._replace(0, 0, objects);
      return this;
    },

    slice: function () {
      var arr = this.toArray();
      return arr.slice.apply(arr, arguments);
    },

    arrangedContentArrayWillChange: function (item, idx, removedCnt, addedCnt) {
      this.arrayContentWillChange(idx, removedCnt, addedCnt);
    },

    arrangedContentArrayDidChange: function (item, idx, removedCnt, addedCnt) {
      this.arrayContentDidChange(idx, removedCnt, addedCnt);
    },

    init: function () {
      this._super.apply(this, arguments);
      this._setupContent();
      this._setupArrangedContent();
    },

    willDestroy: function () {
      this._teardownArrangedContent();
      this._teardownContent();
    }
  });

  exports["default"] = ArrayProxy;
});
// Ember.assert
enifed("ember-runtime/system/container", ["exports", "ember-metal/property_set", "container/registry", "container/container"], function (exports, _emberMetalProperty_set, _containerRegistry, _containerContainer) {

  _containerRegistry["default"].set = _emberMetalProperty_set.set;
  _containerContainer["default"].set = _emberMetalProperty_set.set;

  exports.Registry = _containerRegistry["default"];
  exports.Container = _containerContainer["default"];
});
enifed("ember-runtime/system/core_object", ["exports", "ember-metal", "ember-metal/merge", "ember-metal/property_get", "ember-metal/utils", "ember-metal/platform/create", "ember-metal/chains", "ember-metal/events", "ember-metal/mixin", "ember-metal/enumerable_utils", "ember-metal/error", "ember-metal/platform/define_property", "ember-metal/keys", "ember-runtime/mixins/action_handler", "ember-metal/properties", "ember-metal/binding", "ember-metal/computed", "ember-metal/injected_property", "ember-metal/run_loop", "ember-metal/watching", "ember-metal/core", "ember-runtime/inject"], function (exports, _emberMetal, _emberMetalMerge, _emberMetalProperty_get, _emberMetalUtils, _emberMetalPlatformCreate, _emberMetalChains, _emberMetalEvents, _emberMetalMixin, _emberMetalEnumerable_utils, _emberMetalError, _emberMetalPlatformDefine_property, _emberMetalKeys, _emberRuntimeMixinsAction_handler, _emberMetalProperties, _emberMetalBinding, _emberMetalComputed, _emberMetalInjected_property, _emberMetalRun_loop, _emberMetalWatching, _emberMetalCore, _emberRuntimeInject) {
  // Remove "use strict"; from transpiled module until
  // https://bugs.webkit.org/show_bug.cgi?id=138038 is fixed
  //
  "REMOVE_USE_STRICT: true";

  var schedule = _emberMetalRun_loop["default"].schedule;
  var applyMixin = _emberMetalMixin.Mixin._apply;
  var finishPartial = _emberMetalMixin.Mixin.finishPartial;
  var reopen = _emberMetalMixin.Mixin.prototype.reopen;
  var hasCachedComputedProperties = false;

  function makeCtor() {

    // Note: avoid accessing any properties on the object since it makes the
    // method a lot faster. This is glue code so we want it to be as fast as
    // possible.

    var wasApplied = false;
    var initMixins, initProperties;

    var Class = function () {
      if (!wasApplied) {
        Class.proto(); // prepare prototype...
      }
      this.__defineNonEnumerable(_emberMetalUtils.GUID_KEY_PROPERTY);
      this.__defineNonEnumerable(_emberMetalUtils.NEXT_SUPER_PROPERTY);
      var m = (0, _emberMetalUtils.meta)(this);
      var proto = m.proto;
      m.proto = this;
      if (initMixins) {
        // capture locally so we can clear the closed over variable
        var mixins = initMixins;
        initMixins = null;
        (0, _emberMetalUtils.apply)(this, this.reopen, mixins);
      }
      if (initProperties) {
        // capture locally so we can clear the closed over variable
        var props = initProperties;
        initProperties = null;

        var concatenatedProperties = this.concatenatedProperties;
        var mergedProperties = this.mergedProperties;

        for (var i = 0, l = props.length; i < l; i++) {
          var properties = props[i];

          _emberMetal["default"].assert("Ember.Object.create no longer supports mixing in other definitions, use createWithMixins instead.", !(properties instanceof _emberMetalMixin.Mixin));

          if (typeof properties !== "object" && properties !== undefined) {
            throw new _emberMetalError["default"]("Ember.Object.create only accepts objects.");
          }

          if (!properties) {
            continue;
          }

          var keyNames = (0, _emberMetalKeys["default"])(properties);

          for (var j = 0, ll = keyNames.length; j < ll; j++) {
            var keyName = keyNames[j];
            var value = properties[keyName];

            if (_emberMetalMixin.IS_BINDING.test(keyName)) {
              var bindings = m.bindings;
              if (!bindings) {
                bindings = m.bindings = {};
              } else if (!m.hasOwnProperty("bindings")) {
                bindings = m.bindings = (0, _emberMetalPlatformCreate["default"])(m.bindings);
              }
              bindings[keyName] = value;
            }

            var possibleDesc = this[keyName];
            var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;

            _emberMetal["default"].assert("Ember.Object.create no longer supports defining computed properties. Define computed properties using extend() or reopen() before calling create().", !(value instanceof _emberMetalComputed.ComputedProperty));
            _emberMetal["default"].assert("Ember.Object.create no longer supports defining methods that call _super.", !(typeof value === "function" && value.toString().indexOf("._super") !== -1));
            _emberMetal["default"].assert("`actions` must be provided at extend time, not at create " + "time, when Ember.ActionHandler is used (i.e. views, " + "controllers & routes).", !(keyName === "actions" && _emberRuntimeMixinsAction_handler["default"].detect(this)));

            if (concatenatedProperties && concatenatedProperties.length > 0 && (0, _emberMetalEnumerable_utils.indexOf)(concatenatedProperties, keyName) >= 0) {
              var baseValue = this[keyName];

              if (baseValue) {
                if ("function" === typeof baseValue.concat) {
                  value = baseValue.concat(value);
                } else {
                  value = (0, _emberMetalUtils.makeArray)(baseValue).concat(value);
                }
              } else {
                value = (0, _emberMetalUtils.makeArray)(value);
              }
            }

            if (mergedProperties && mergedProperties.length && (0, _emberMetalEnumerable_utils.indexOf)(mergedProperties, keyName) >= 0) {
              var originalValue = this[keyName];

              value = (0, _emberMetalMerge["default"])(originalValue, value);
            }

            if (desc) {
              desc.set(this, keyName, value);
            } else {
              if (typeof this.setUnknownProperty === "function" && !(keyName in this)) {
                this.setUnknownProperty(keyName, value);
              } else {
                if (_emberMetal["default"].FEATURES.isEnabled("mandatory-setter")) {
                  if (_emberMetalPlatformDefine_property.hasPropertyAccessors) {
                    (0, _emberMetalProperties.defineProperty)(this, keyName, null, value); // setup mandatory setter
                  } else {
                    this[keyName] = value;
                  }
                } else {
                  this[keyName] = value;
                }
              }
            }
          }
        }
      }

      finishPartial(this, m);

      var length = arguments.length;

      if (length === 0) {
        this.init();
      } else if (length === 1) {
        this.init(arguments[0]);
      } else {
        // v8 bug potentially incorrectly deopts this function: https://code.google.com/p/v8/issues/detail?id=3709
        // we may want to keep this around till this ages out on mobile
        var args = new Array(length);
        for (var x = 0; x < length; x++) {
          args[x] = arguments[x];
        }
        this.init.apply(this, args);
      }

      m.proto = proto;
      (0, _emberMetalChains.finishChains)(this);
      (0, _emberMetalEvents.sendEvent)(this, "init");
    };

    Class.toString = _emberMetalMixin.Mixin.prototype.toString;
    Class.willReopen = function () {
      if (wasApplied) {
        Class.PrototypeMixin = _emberMetalMixin.Mixin.create(Class.PrototypeMixin);
      }

      wasApplied = false;
    };
    Class._initMixins = function (args) {
      initMixins = args;
    };
    Class._initProperties = function (args) {
      initProperties = args;
    };

    Class.proto = function () {
      var superclass = Class.superclass;
      if (superclass) {
        superclass.proto();
      }

      if (!wasApplied) {
        wasApplied = true;
        Class.PrototypeMixin.applyPartial(Class.prototype);
      }

      return this.prototype;
    };

    return Class;
  }

  /**
    @class CoreObject
    @namespace Ember
    @public
  */
  var CoreObject = makeCtor();
  CoreObject.toString = function () {
    return "Ember.CoreObject";
  };
  CoreObject.PrototypeMixin = _emberMetalMixin.Mixin.create({
    reopen: function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      applyMixin(this, args, true);
      return this;
    },

    /**
      An overridable method called when objects are instantiated. By default,
      does nothing unless it is overridden during class definition.
       Example:
       ```javascript
      App.Person = Ember.Object.extend({
        init: function() {
          alert('Name is ' + this.get('name'));
        }
      });
       var steve = App.Person.create({
        name: "Steve"
      });
       // alerts 'Name is Steve'.
      ```
       NOTE: If you do override `init` for a framework class like `Ember.View` or
      `Ember.ArrayController`, be sure to call `this._super.apply(this, arguments)` in your
      `init` declaration! If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
       @method init
      @public
    */
    init: function () {},
    __defineNonEnumerable: function (property) {
      (0, _emberMetalPlatformDefine_property.defineProperty)(this, property.name, property.descriptor);
      //this[property.name] = property.descriptor.value;
    },

    /**
      Defines the properties that will be concatenated from the superclass
      (instead of overridden).
       By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by combining the superclass' property
      value with the subclass' value. An example of this in use within Ember
      is the `classNames` property of `Ember.View`.
       Here is some sample code showing the difference between a concatenated
      property and a normal one:
       ```javascript
      App.BarView = Ember.View.extend({
        someNonConcatenatedProperty: ['bar'],
        classNames: ['bar']
      });
       App.FooBarView = App.BarView.extend({
        someNonConcatenatedProperty: ['foo'],
        classNames: ['foo']
      });
       var fooBarView = App.FooBarView.create();
      fooBarView.get('someNonConcatenatedProperty'); // ['foo']
      fooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']
      ```
       This behavior extends to object creation as well. Continuing the
      above example:
       ```javascript
      var view = App.FooBarView.create({
        someNonConcatenatedProperty: ['baz'],
        classNames: ['baz']
      })
      view.get('someNonConcatenatedProperty'); // ['baz']
      view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']
      ```
      Adding a single property that is not an array will just add it in the array:
       ```javascript
      var view = App.FooBarView.create({
        classNames: 'baz'
      })
      view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']
      ```
       Using the `concatenatedProperties` property, we can tell Ember to mix the
      content of the properties.
       In `Ember.View` the `classNameBindings` and `attributeBindings` properties
      are also concatenated, in addition to `classNames`.
       This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual concatenated property (to not
      mislead your users to think they can override the property in a subclass).
       @property concatenatedProperties
      @type Array
      @default null
      @public
    */
    concatenatedProperties: null,

    /**
      Destroyed object property flag.
       if this property is `true` the observers and bindings were already
      removed by the effect of calling the `destroy()` method.
       @property isDestroyed
      @default false
      @public
    */
    isDestroyed: false,

    /**
      Destruction scheduled flag. The `destroy()` method has been called.
       The object stays intact until the end of the run loop at which point
      the `isDestroyed` flag is set.
       @property isDestroying
      @default false
      @public
    */
    isDestroying: false,

    /**
      Destroys an object by setting the `isDestroyed` flag and removing its
      metadata, which effectively destroys observers and bindings.
       If you try to set a property on a destroyed object, an exception will be
      raised.
       Note that destruction is scheduled for the end of the run loop and does not
      happen immediately.  It will set an isDestroying flag immediately.
       @method destroy
      @return {Ember.Object} receiver
      @public
    */
    destroy: function () {
      if (this.isDestroying) {
        return;
      }
      this.isDestroying = true;

      schedule("actions", this, this.willDestroy);
      schedule("destroy", this, this._scheduledDestroy);
      return this;
    },

    /**
      Override to implement teardown.
       @method willDestroy
      @public
    */
    willDestroy: _emberMetalCore.K,

    /**
      Invoked by the run loop to actually destroy the object. This is
      scheduled for execution by the `destroy` method.
       @private
      @method _scheduledDestroy
    */
    _scheduledDestroy: function () {
      if (this.isDestroyed) {
        return;
      }
      (0, _emberMetalWatching.destroy)(this);
      this.isDestroyed = true;
    },

    bind: function (to, from) {
      if (!(from instanceof _emberMetalBinding.Binding)) {
        from = _emberMetalBinding.Binding.from(from);
      }
      from.to(to).connect(this);
      return from;
    },

    /**
      Returns a string representation which attempts to provide more information
      than Javascript's `toString` typically does, in a generic way for all Ember
      objects.
       ```javascript
      App.Person = Em.Object.extend()
      person = App.Person.create()
      person.toString() //=> "<App.Person:ember1024>"
      ```
       If the object's class is not defined on an Ember namespace, it will
      indicate it is a subclass of the registered superclass:
      ```javascript
      Student = App.Person.extend()
      student = Student.create()
      student.toString() //=> "<(subclass of App.Person):ember1025>"
      ```
       If the method `toStringExtension` is defined, its return value will be
      included in the output.
       ```javascript
      App.Teacher = App.Person.extend({
        toStringExtension: function() {
          return this.get('fullName');
        }
      });
      teacher = App.Teacher.create()
      teacher.toString(); //=> "<App.Teacher:ember1026:Tom Dale>"
      ```
       @method toString
      @return {String} string representation
      @public
    */
    toString: function () {
      var hasToStringExtension = typeof this.toStringExtension === "function";
      var extension = hasToStringExtension ? ":" + this.toStringExtension() : "";
      var ret = "<" + this.constructor.toString() + ":" + (0, _emberMetalUtils.guidFor)(this) + extension + ">";

      this.toString = makeToString(ret);
      return ret;
    }
  });

  CoreObject.PrototypeMixin.ownerConstructor = CoreObject;

  function makeToString(ret) {
    return function () {
      return ret;
    };
  }

  CoreObject.__super__ = null;

  var ClassMixinProps = {

    ClassMixin: _emberMetalMixin.REQUIRED,

    PrototypeMixin: _emberMetalMixin.REQUIRED,

    isClass: true,

    isMethod: false,

    /**
      Creates a new subclass.
       ```javascript
      App.Person = Ember.Object.extend({
        say: function(thing) {
          alert(thing);
         }
      });
      ```
       This defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.
       You can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:
       ```javascript
      App.PersonView = Ember.View.extend({
        tagName: 'li',
        classNameBindings: ['isAdministrator']
      });
      ```
       When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:
       ```javascript
      App.Person = Ember.Object.extend({
        say: function(thing) {
          var name = this.get('name');
          alert(name + ' says: ' + thing);
        }
      });
       App.Soldier = App.Person.extend({
        say: function(thing) {
          this._super(thing + ", sir!");
        },
        march: function(numberOfHours) {
          alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')
        }
      });
       var yehuda = App.Soldier.create({
        name: "Yehuda Katz"
      });
       yehuda.say("Yes");  // alerts "Yehuda Katz says: Yes, sir!"
      ```
       The `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.
       You can also pass `Mixin` classes to add additional properties to the subclass.
       ```javascript
      App.Person = Ember.Object.extend({
        say: function(thing) {
          alert(this.get('name') + ' says: ' + thing);
        }
      });
       App.SingingMixin = Mixin.create({
        sing: function(thing){
          alert(this.get('name') + ' sings: la la la ' + thing);
        }
      });
       App.BroadwayStar = App.Person.extend(App.SingingMixin, {
        dance: function() {
          alert(this.get('name') + ' dances: tap tap tap tap ');
        }
      });
      ```
       The `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.
       @method extend
      @static
       @param {Mixin} [mixins]* One or more Mixin classes
      @param {Object} [arguments]* Object containing values to use within the new class
      @public
    */
    extend: function () {
      var Class = makeCtor();
      var proto;
      Class.ClassMixin = _emberMetalMixin.Mixin.create(this.ClassMixin);
      Class.PrototypeMixin = _emberMetalMixin.Mixin.create(this.PrototypeMixin);

      Class.ClassMixin.ownerConstructor = Class;
      Class.PrototypeMixin.ownerConstructor = Class;

      reopen.apply(Class.PrototypeMixin, arguments);

      Class.superclass = this;
      Class.__super__ = this.prototype;

      proto = Class.prototype = (0, _emberMetalPlatformCreate["default"])(this.prototype);
      proto.constructor = Class;
      (0, _emberMetalUtils.generateGuid)(proto);
      (0, _emberMetalUtils.meta)(proto).proto = proto; // this will disable observers on prototype

      Class.ClassMixin.apply(Class);
      return Class;
    },

    /**
      Equivalent to doing `extend(arguments).create()`.
      If possible use the normal `create` method instead.
       @method createWithMixins
      @static
      @param [arguments]*
      @private
    */
    createWithMixins: function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var C = this;
      if (args.length > 0) {
        this._initMixins(args);
      }
      return new C();
    },

    /**
      Creates an instance of a class. Accepts either no arguments, or an object
      containing values to initialize the newly instantiated object with.
       ```javascript
      App.Person = Ember.Object.extend({
        helloWorld: function() {
          alert("Hi, my name is " + this.get('name'));
        }
      });
       var tom = App.Person.create({
        name: 'Tom Dale'
      });
       tom.helloWorld(); // alerts "Hi, my name is Tom Dale".
      ```
       `create` will call the `init` function if defined during
      `Ember.AnyObject.extend`
       If no arguments are passed to `create`, it will not set values to the new
      instance during initialization:
       ```javascript
      var noName = App.Person.create();
      noName.helloWorld(); // alerts undefined
      ```
       NOTE: For performance reasons, you cannot declare methods or computed
      properties during `create`. You should instead declare methods and computed
      properties when using `extend` or use the `createWithMixins` shorthand.
       @method create
      @static
      @param [arguments]*
      @public
    */
    create: function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var C = this;
      if (args.length > 0) {
        this._initProperties(args);
      }
      return new C();
    },

    /**
      Augments a constructor's prototype with additional
      properties and functions:
       ```javascript
      MyObject = Ember.Object.extend({
        name: 'an object'
      });
       o = MyObject.create();
      o.get('name'); // 'an object'
       MyObject.reopen({
        say: function(msg){
          console.log(msg);
        }
      })
       o2 = MyObject.create();
      o2.say("hello"); // logs "hello"
       o.say("goodbye"); // logs "goodbye"
      ```
       To add functions and properties to the constructor itself,
      see `reopenClass`
       @method reopen
      @public
    */
    reopen: function () {
      this.willReopen();
      reopen.apply(this.PrototypeMixin, arguments);
      return this;
    },

    /**
      Augments a constructor's own properties and functions:
       ```javascript
      MyObject = Ember.Object.extend({
        name: 'an object'
      });
       MyObject.reopenClass({
        canBuild: false
      });
       MyObject.canBuild; // false
      o = MyObject.create();
      ```
       In other words, this creates static properties and functions for the class. These are only available on the class
      and not on any instance of that class.
       ```javascript
      App.Person = Ember.Object.extend({
        name : "",
        sayHello : function() {
          alert("Hello. My name is " + this.get('name'));
        }
      });
       App.Person.reopenClass({
        species : "Homo sapiens",
        createPerson: function(newPersonsName){
          return App.Person.create({
            name:newPersonsName
          });
        }
      });
       var tom = App.Person.create({
        name : "Tom Dale"
      });
      var yehuda = App.Person.createPerson("Yehuda Katz");
       tom.sayHello(); // "Hello. My name is Tom Dale"
      yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
      alert(App.Person.species); // "Homo sapiens"
      ```
       Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
      variables. They are only valid on `App.Person`.
       To add functions and properties to instances of
      a constructor by extending the constructor's prototype
      see `reopen`
       @method reopenClass
      @public
    */
    reopenClass: function () {
      reopen.apply(this.ClassMixin, arguments);
      applyMixin(this, arguments, false);
      return this;
    },

    detect: function (obj) {
      if ("function" !== typeof obj) {
        return false;
      }
      while (obj) {
        if (obj === this) {
          return true;
        }
        obj = obj.superclass;
      }
      return false;
    },

    detectInstance: function (obj) {
      return obj instanceof this;
    },

    /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For
      example, computed property functions may close over variables that are then
      no longer available for introspection.
       You can pass a hash of these values to a computed property like this:
       ```javascript
      person: function() {
        var personId = this.get('personId');
        return App.Person.create({ id: personId });
      }.property().meta({ type: App.Person })
      ```
       Once you've done this, you can retrieve the values saved to the computed
      property from your class like this:
       ```javascript
      MyClass.metaForProperty('person');
      ```
       This will return the original hash that was passed to `meta()`.
       @static
      @method metaForProperty
      @param key {String} property name
      @private
    */
    metaForProperty: function (key) {
      var proto = this.proto();
      var possibleDesc = proto[key];
      var desc = possibleDesc !== null && typeof possibleDesc === "object" && possibleDesc.isDescriptor ? possibleDesc : undefined;

      _emberMetal["default"].assert("metaForProperty() could not find a computed property with key '" + key + "'.", !!desc && desc instanceof _emberMetalComputed.ComputedProperty);
      return desc._meta || {};
    },

    _computedProperties: (0, _emberMetalComputed.computed)(function () {
      hasCachedComputedProperties = true;
      var proto = this.proto();
      var property;
      var properties = [];

      for (var name in proto) {
        property = proto[name];

        if (property instanceof _emberMetalComputed.ComputedProperty) {
          properties.push({
            name: name,
            meta: property._meta
          });
        }
      }
      return properties;
    }).readOnly(),

    /**
      Iterate over each computed property for the class, passing its name
      and any associated metadata (see `metaForProperty`) to the callback.
       @static
      @method eachComputedProperty
      @param {Function} callback
      @param {Object} binding
      @private
    */
    eachComputedProperty: function (callback, binding) {
      var property, name;
      var empty = {};

      var properties = (0, _emberMetalProperty_get.get)(this, "_computedProperties");

      for (var i = 0, length = properties.length; i < length; i++) {
        property = properties[i];
        name = property.name;
        callback.call(binding || this, property.name, property.meta || empty);
      }
    }
  };

  function injectedPropertyAssertion() {
    _emberMetal["default"].assert("Injected properties are invalid", (0, _emberRuntimeInject.validatePropertyInjections)(this));
  }

  _emberMetal["default"].runInDebug(function () {
    /**
      Provides lookup-time type validation for injected properties.
       @private
      @method _onLookup
    */
    ClassMixinProps._onLookup = injectedPropertyAssertion;
  });

  /**
    Returns a hash of property names and container names that injected
    properties will lookup on the container lazily.
  
    @method _lazyInjections
    @return {Object} Hash of all lazy injected property keys to container names
    @private
  */
  ClassMixinProps._lazyInjections = function () {
    var injections = {};
    var proto = this.proto();
    var key, desc;

    for (key in proto) {
      desc = proto[key];
      if (desc instanceof _emberMetalInjected_property["default"]) {
        injections[key] = desc.type + ":" + (desc.name || key);
      }
    }

    return injections;
  };

  var ClassMixin = _emberMetalMixin.Mixin.create(ClassMixinProps);

  ClassMixin.ownerConstructor = CoreObject;

  CoreObject.ClassMixin = ClassMixin;

  ClassMixin.apply(CoreObject);

  CoreObject.reopen({
    didDefineProperty: function (proto, key, value) {
      if (hasCachedComputedProperties === false) {
        return;
      }
      if (value instanceof _emberMetal["default"].ComputedProperty) {
        var cache = _emberMetal["default"].meta(this.constructor).cache;

        if (cache && cache._computedProperties !== undefined) {
          cache._computedProperties = undefined;
        }
      }
    }
  });

  exports["default"] = CoreObject;
});
/**
  @module ember
  @submodule ember-runtime
*/

// using ember-metal/lib/main here to ensure that ember-debug is setup
// if present

// Ember.assert, Ember.config

// NOTE: this object should never be included directly. Instead use `Ember.Object`.
// We only define this separately so that `Ember.Set` can depend on it.
enifed("ember-runtime/system/deferred", ["exports", "ember-metal/core", "ember-runtime/mixins/deferred", "ember-runtime/system/object"], function (exports, _emberMetalCore, _emberRuntimeMixinsDeferred, _emberRuntimeSystemObject) {

  var Deferred = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsDeferred["default"], {
    init: function () {
      _emberMetalCore["default"].deprecate("Usage of Ember.Deferred is deprecated.", false, { url: "http://emberjs.com/guides/deprecations/#toc_deprecate-ember-deferredmixin-and-ember-deferred" });
      this._super.apply(this, arguments);
    }
  });

  Deferred.reopenClass({
    promise: function (callback, binding) {
      var deferred = Deferred.create();
      callback.call(binding, deferred);
      return deferred;
    }
  });

  exports["default"] = Deferred;
});
enifed("ember-runtime/system/each_proxy", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/utils", "ember-runtime/utils", "ember-metal/enumerable_utils", "ember-metal/array", "ember-runtime/mixins/array", "ember-runtime/system/object", "ember-metal/computed", "ember-metal/observer", "ember-metal/events", "ember-metal/properties", "ember-metal/property_events"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalUtils, _emberRuntimeUtils, _emberMetalEnumerable_utils, _emberMetalArray, _emberRuntimeMixinsArray, _emberRuntimeSystemObject, _emberMetalComputed, _emberMetalObserver, _emberMetalEvents, _emberMetalProperties, _emberMetalProperty_events) {

  var EachArray = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsArray["default"], {

    init: function (content, keyName, owner) {
      this._super.apply(this, arguments);
      this._keyName = keyName;
      this._owner = owner;
      this._content = content;
    },

    objectAt: function (idx) {
      var item = this._content.objectAt(idx);
      return item && (0, _emberMetalProperty_get.get)(item, this._keyName);
    },

    length: (0, _emberMetalComputed.computed)(function () {
      var content = this._content;
      return content ? (0, _emberMetalProperty_get.get)(content, "length") : 0;
    })

  });

  var IS_OBSERVER = /^.+:(before|change)$/;

  function addObserverForContentKey(content, keyName, proxy, idx, loc) {
    var objects = proxy._objects;
    var guid;
    if (!objects) {
      objects = proxy._objects = {};
    }

    while (--loc >= idx) {
      var item = content.objectAt(loc);
      if (item) {
        _emberMetalCore["default"].assert("When using @each to observe the array " + content + ", the array must return an object", (0, _emberRuntimeUtils.typeOf)(item) === "instance" || (0, _emberRuntimeUtils.typeOf)(item) === "object");
        (0, _emberMetalObserver.addBeforeObserver)(item, keyName, proxy, "contentKeyWillChange");
        (0, _emberMetalObserver.addObserver)(item, keyName, proxy, "contentKeyDidChange");

        // keep track of the index each item was found at so we can map
        // it back when the obj changes.
        guid = (0, _emberMetalUtils.guidFor)(item);
        if (!objects[guid]) {
          objects[guid] = [];
        }

        objects[guid].push(loc);
      }
    }
  }

  function removeObserverForContentKey(content, keyName, proxy, idx, loc) {
    var objects = proxy._objects;
    if (!objects) {
      objects = proxy._objects = {};
    }

    var indices, guid;

    while (--loc >= idx) {
      var item = content.objectAt(loc);
      if (item) {
        (0, _emberMetalObserver.removeBeforeObserver)(item, keyName, proxy, "contentKeyWillChange");
        (0, _emberMetalObserver.removeObserver)(item, keyName, proxy, "contentKeyDidChange");

        guid = (0, _emberMetalUtils.guidFor)(item);
        indices = objects[guid];
        indices[_emberMetalArray.indexOf.call(indices, loc)] = null;
      }
    }
  }

  /**
    This is the object instance returned when you get the `@each` property on an
    array. It uses the unknownProperty handler to automatically create
    EachArray instances for property names.
    @class EachProxy
    @private
  */
  var EachProxy = _emberRuntimeSystemObject["default"].extend({

    init: function (content) {
      this._super.apply(this, arguments);
      this._content = content;
      content.addArrayObserver(this);

      // in case someone is already observing some keys make sure they are
      // added
      (0, _emberMetalEnumerable_utils.forEach)((0, _emberMetalEvents.watchedEvents)(this), function (eventName) {
        this.didAddListener(eventName);
      }, this);
    },

    /**
      You can directly access mapped properties by simply requesting them.
      The `unknownProperty` handler will generate an EachArray of each item.
       @method unknownProperty
      @param keyName {String}
      @param value {*}
      @private
    */
    unknownProperty: function (keyName, value) {
      var ret = new EachArray(this._content, keyName, this);
      (0, _emberMetalProperties.defineProperty)(this, keyName, null, ret);
      this.beginObservingContentKey(keyName);
      return ret;
    },

    // ..........................................................
    // ARRAY CHANGES
    // Invokes whenever the content array itself changes.

    arrayWillChange: function (content, idx, removedCnt, addedCnt) {
      var keys = this._keys;
      var key, lim;

      lim = removedCnt > 0 ? idx + removedCnt : -1;
      (0, _emberMetalProperty_events.beginPropertyChanges)(this);

      for (key in keys) {
        if (!keys.hasOwnProperty(key)) {
          continue;
        }

        if (lim > 0) {
          removeObserverForContentKey(content, key, this, idx, lim);
        }

        (0, _emberMetalProperty_events.propertyWillChange)(this, key);
      }

      (0, _emberMetalProperty_events.propertyWillChange)(this._content, "@each");
      (0, _emberMetalProperty_events.endPropertyChanges)(this);
    },

    arrayDidChange: function (content, idx, removedCnt, addedCnt) {
      var keys = this._keys;
      var lim;

      lim = addedCnt > 0 ? idx + addedCnt : -1;
      (0, _emberMetalProperty_events.changeProperties)(function () {
        for (var key in keys) {
          if (!keys.hasOwnProperty(key)) {
            continue;
          }

          if (lim > 0) {
            addObserverForContentKey(content, key, this, idx, lim);
          }

          (0, _emberMetalProperty_events.propertyDidChange)(this, key);
        }

        (0, _emberMetalProperty_events.propertyDidChange)(this._content, "@each");
      }, this);
    },

    // ..........................................................
    // LISTEN FOR NEW OBSERVERS AND OTHER EVENT LISTENERS
    // Start monitoring keys based on who is listening...

    didAddListener: function (eventName) {
      if (IS_OBSERVER.test(eventName)) {
        this.beginObservingContentKey(eventName.slice(0, -7));
      }
    },

    didRemoveListener: function (eventName) {
      if (IS_OBSERVER.test(eventName)) {
        this.stopObservingContentKey(eventName.slice(0, -7));
      }
    },

    // ..........................................................
    // CONTENT KEY OBSERVING
    // Actual watch keys on the source content.

    beginObservingContentKey: function (keyName) {
      var keys = this._keys;
      if (!keys) {
        keys = this._keys = {};
      }

      if (!keys[keyName]) {
        keys[keyName] = 1;
        var content = this._content;
        var len = (0, _emberMetalProperty_get.get)(content, "length");

        addObserverForContentKey(content, keyName, this, 0, len);
      } else {
        keys[keyName]++;
      }
    },

    stopObservingContentKey: function (keyName) {
      var keys = this._keys;
      if (keys && keys[keyName] > 0 && --keys[keyName] <= 0) {
        var content = this._content;
        var len = (0, _emberMetalProperty_get.get)(content, "length");

        removeObserverForContentKey(content, keyName, this, 0, len);
      }
    },

    contentKeyWillChange: function (obj, keyName) {
      (0, _emberMetalProperty_events.propertyWillChange)(this, keyName);
    },

    contentKeyDidChange: function (obj, keyName) {
      (0, _emberMetalProperty_events.propertyDidChange)(this, keyName);
    }
  });

  exports.EachArray = EachArray;
  exports.EachProxy = EachProxy;
});
/**
@module ember
@submodule ember-runtime
*/

// Ember.assert

// ES6TODO: WAT? Circular dep?
enifed("ember-runtime/system/lazy_load", ["exports", "ember-metal/core", "ember-metal/array", "ember-runtime/system/native_array"], function (exports, _emberMetalCore, _emberMetalArray, _emberRuntimeSystemNative_array) {
  exports.onLoad = onLoad;
  exports.runLoadHooks = runLoadHooks;
  // make sure Ember.A is setup.

  /**
    @module ember
    @submodule ember-runtime
  */

  var loadHooks = _emberMetalCore["default"].ENV.EMBER_LOAD_HOOKS || {};
  var loaded = {};

  /**
    Detects when a specific package of Ember (e.g. 'Ember.Handlebars')
    has fully loaded and is available for extension.
  
    The provided `callback` will be called with the `name` passed
    resolved from a string into the object:
  
    ``` javascript
    Ember.onLoad('Ember.Handlebars' function(hbars) {
      hbars.registerHelper(...);
    });
    ```
  
    @method onLoad
    @for Ember
    @param name {String} name of hook
    @param callback {Function} callback to be called
    @private
  */

  function onLoad(name, callback) {
    var object;

    loadHooks[name] = loadHooks[name] || _emberMetalCore["default"].A();
    loadHooks[name].pushObject(callback);

    if (object = loaded[name]) {
      callback(object);
    }
  }

  /**
    Called when an Ember.js package (e.g Ember.Handlebars) has finished
    loading. Triggers any callbacks registered for this event.
  
    @method runLoadHooks
    @for Ember
    @param name {String} name of hook
    @param object {Object} object to pass to callbacks
    @private
  */

  function runLoadHooks(name, object) {
    loaded[name] = object;

    if (typeof window === "object" && typeof window.dispatchEvent === "function" && typeof CustomEvent === "function") {
      var event = new CustomEvent(name, { detail: object, name: name });
      window.dispatchEvent(event);
    }

    if (loadHooks[name]) {
      _emberMetalArray.forEach.call(loadHooks[name], function (callback) {
        callback(object);
      });
    }
  }
});
/*globals CustomEvent */

// Ember.ENV.EMBER_LOAD_HOOKS
enifed("ember-runtime/system/namespace", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/array", "ember-metal/utils", "ember-metal/mixin", "ember-runtime/system/object"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalArray, _emberMetalUtils, _emberMetalMixin, _emberRuntimeSystemObject) {

  /**
    A Namespace is an object usually used to contain other objects or methods
    such as an application or framework. Create a namespace anytime you want
    to define one of these new containers.
  
    # Example Usage
  
    ```javascript
    MyFramework = Ember.Namespace.create({
      VERSION: '1.0.0'
    });
    ```
  
    @class Namespace
    @namespace Ember
    @extends Ember.Object
    @public
  */
  var Namespace = _emberRuntimeSystemObject["default"].extend({
    isNamespace: true,

    init: function () {
      Namespace.NAMESPACES.push(this);
      Namespace.PROCESSED = false;
    },

    toString: function () {
      var name = (0, _emberMetalProperty_get.get)(this, "name") || (0, _emberMetalProperty_get.get)(this, "modulePrefix");
      if (name) {
        return name;
      }

      findNamespaces();
      return this[NAME_KEY];
    },

    nameClasses: function () {
      processNamespace([this.toString()], this, {});
    },

    destroy: function () {
      var namespaces = Namespace.NAMESPACES;
      var toString = this.toString();

      if (toString) {
        _emberMetalCore["default"].lookup[toString] = undefined;
        delete Namespace.NAMESPACES_BY_ID[toString];
      }
      namespaces.splice(_emberMetalArray.indexOf.call(namespaces, this), 1);
      this._super.apply(this, arguments);
    }
  });

  Namespace.reopenClass({
    NAMESPACES: [_emberMetalCore["default"]],
    NAMESPACES_BY_ID: {},
    PROCESSED: false,
    processAll: processAllNamespaces,
    byName: function (name) {
      if (!_emberMetalCore["default"].BOOTED) {
        processAllNamespaces();
      }

      return NAMESPACES_BY_ID[name];
    }
  });

  var NAMESPACES_BY_ID = Namespace.NAMESPACES_BY_ID;

  var hasOwnProp = ({}).hasOwnProperty;

  function processNamespace(paths, root, seen) {
    var idx = paths.length;

    NAMESPACES_BY_ID[paths.join(".")] = root;

    // Loop over all of the keys in the namespace, looking for classes
    for (var key in root) {
      if (!hasOwnProp.call(root, key)) {
        continue;
      }
      var obj = root[key];

      // If we are processing the `Ember` namespace, for example, the
      // `paths` will start with `["Ember"]`. Every iteration through
      // the loop will update the **second** element of this list with
      // the key, so processing `Ember.View` will make the Array
      // `['Ember', 'View']`.
      paths[idx] = key;

      // If we have found an unprocessed class
      if (obj && obj.toString === classToString) {
        // Replace the class' `toString` with the dot-separated path
        // and set its `NAME_KEY`
        obj.toString = makeToString(paths.join("."));
        obj[NAME_KEY] = paths.join(".");

        // Support nested namespaces
      } else if (obj && obj.isNamespace) {
        // Skip aliased namespaces
        if (seen[(0, _emberMetalUtils.guidFor)(obj)]) {
          continue;
        }
        seen[(0, _emberMetalUtils.guidFor)(obj)] = true;

        // Process the child namespace
        processNamespace(paths, obj, seen);
      }
    }

    paths.length = idx; // cut out last item
  }

  var STARTS_WITH_UPPERCASE = /^[A-Z]/;

  function tryIsNamespace(lookup, prop) {
    try {
      var obj = lookup[prop];
      return obj && obj.isNamespace && obj;
    } catch (e) {}
  }

  function findNamespaces() {
    var lookup = _emberMetalCore["default"].lookup;
    var obj;

    if (Namespace.PROCESSED) {
      return;
    }

    for (var prop in lookup) {
      // Only process entities that start with uppercase A-Z
      if (!STARTS_WITH_UPPERCASE.test(prop)) {
        continue;
      }

      // Unfortunately, some versions of IE don't support window.hasOwnProperty
      if (lookup.hasOwnProperty && !lookup.hasOwnProperty(prop)) {
        continue;
      }

      // At times we are not allowed to access certain properties for security reasons.
      // There are also times where even if we can access them, we are not allowed to access their properties.
      obj = tryIsNamespace(lookup, prop);
      if (obj) {
        obj[NAME_KEY] = prop;
      }
    }
  }

  var NAME_KEY = _emberMetalCore["default"].NAME_KEY = _emberMetalUtils.GUID_KEY + "_name";

  function superClassString(mixin) {
    var superclass = mixin.superclass;
    if (superclass) {
      if (superclass[NAME_KEY]) {
        return superclass[NAME_KEY];
      } else {
        return superClassString(superclass);
      }
    } else {
      return;
    }
  }

  function classToString() {
    if (!_emberMetalCore["default"].BOOTED && !this[NAME_KEY]) {
      processAllNamespaces();
    }

    var ret;

    if (this[NAME_KEY]) {
      ret = this[NAME_KEY];
    } else if (this._toString) {
      ret = this._toString;
    } else {
      var str = superClassString(this);
      if (str) {
        ret = "(subclass of " + str + ")";
      } else {
        ret = "(unknown mixin)";
      }
      this.toString = makeToString(ret);
    }

    return ret;
  }

  function processAllNamespaces() {
    var unprocessedNamespaces = !Namespace.PROCESSED;
    var unprocessedMixins = _emberMetalCore["default"].anyUnprocessedMixins;

    if (unprocessedNamespaces) {
      findNamespaces();
      Namespace.PROCESSED = true;
    }

    if (unprocessedNamespaces || unprocessedMixins) {
      var namespaces = Namespace.NAMESPACES;
      var namespace;

      for (var i = 0, l = namespaces.length; i < l; i++) {
        namespace = namespaces[i];
        processNamespace([namespace.toString()], namespace, {});
      }

      _emberMetalCore["default"].anyUnprocessedMixins = false;
    }
  }

  function makeToString(ret) {
    return function () {
      return ret;
    };
  }

  _emberMetalMixin.Mixin.prototype.toString = classToString; // ES6TODO: altering imported objects. SBB.

  exports["default"] = Namespace;
});
/**
@module ember
@submodule ember-runtime
*/

// Ember.lookup, Ember.BOOTED, Ember.deprecate, Ember.NAME_KEY, Ember.anyUnprocessedMixins

// continue
enifed("ember-runtime/system/native_array", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/enumerable_utils", "ember-metal/mixin", "ember-metal/array", "ember-runtime/mixins/array", "ember-runtime/mixins/mutable_array", "ember-runtime/mixins/observable", "ember-runtime/mixins/copyable", "ember-runtime/mixins/freezable", "ember-runtime/copy"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalEnumerable_utils, _emberMetalMixin, _emberMetalArray, _emberRuntimeMixinsArray, _emberRuntimeMixinsMutable_array, _emberRuntimeMixinsObservable, _emberRuntimeMixinsCopyable, _emberRuntimeMixinsFreezable, _emberRuntimeCopy) {

  // Add Ember.Array to Array.prototype. Remove methods with native
  // implementations and supply some more optimized versions of generic methods
  // because they are so common.

  /**
    The NativeArray mixin contains the properties needed to make the native
    Array support Ember.MutableArray and all of its dependent APIs. Unless you
    have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array` set to
    false, this will be applied automatically. Otherwise you can apply the mixin
    at anytime by calling `Ember.NativeArray.activate`.
  
    @class NativeArray
    @namespace Ember
    @uses Ember.MutableArray
    @uses Ember.Observable
    @uses Ember.Copyable
    @public
  */
  var NativeArray = _emberMetalMixin.Mixin.create(_emberRuntimeMixinsMutable_array["default"], _emberRuntimeMixinsObservable["default"], _emberRuntimeMixinsCopyable["default"], {

    // because length is a built-in property we need to know to just get the
    // original property.
    get: function (key) {
      if (key === "length") {
        return this.length;
      } else if ("number" === typeof key) {
        return this[key];
      } else {
        return this._super(key);
      }
    },

    objectAt: function (idx) {
      return this[idx];
    },

    // primitive for array support.
    replace: function (idx, amt, objects) {

      if (this.isFrozen) {
        throw _emberRuntimeMixinsFreezable.FROZEN_ERROR;
      }

      // if we replaced exactly the same number of items, then pass only the
      // replaced range. Otherwise, pass the full remaining array length
      // since everything has shifted
      var len = objects ? (0, _emberMetalProperty_get.get)(objects, "length") : 0;
      this.arrayContentWillChange(idx, amt, len);

      if (len === 0) {
        this.splice(idx, amt);
      } else {
        (0, _emberMetalEnumerable_utils._replace)(this, idx, amt, objects);
      }

      this.arrayContentDidChange(idx, amt, len);
      return this;
    },

    // If you ask for an unknown property, then try to collect the value
    // from member items.
    unknownProperty: function (key, value) {
      var ret; // = this.reducedProperty(key, value);
      if (value !== undefined && ret === undefined) {
        ret = this[key] = value;
      }
      return ret;
    },

    indexOf: _emberMetalArray.indexOf,

    lastIndexOf: _emberMetalArray.lastIndexOf,

    copy: function (deep) {
      if (deep) {
        return this.map(function (item) {
          return (0, _emberRuntimeCopy["default"])(item, true);
        });
      }

      return this.slice();
    }
  });

  // Remove any methods implemented natively so we don't override them
  var ignore = ["length"];
  (0, _emberMetalEnumerable_utils.forEach)(NativeArray.keys(), function (methodName) {
    if (Array.prototype[methodName]) {
      ignore.push(methodName);
    }
  });

  exports.NativeArray // TODO: only use default export
   = NativeArray = NativeArray.without.apply(NativeArray, ignore);

  /**
    Creates an `Ember.NativeArray` from an Array like object.
    Does not modify the original object. Ember.A is not needed if
    `Ember.EXTEND_PROTOTYPES` is `true` (the default value). However,
    it is recommended that you use Ember.A when creating addons for
    ember or when you can not guarantee that `Ember.EXTEND_PROTOTYPES`
    will be `true`.
  
    Example
  
    ```js
    var Pagination = Ember.CollectionView.extend({
      tagName: 'ul',
      classNames: ['pagination'],
  
      init: function() {
        this._super.apply(this, arguments);
        if (!this.get('content')) {
          this.set('content', Ember.A());
        }
      }
    });
    ```
  
    @method A
    @for Ember
    @return {Ember.NativeArray}
    @public
  */
  var A = function (arr) {
    if (arr === undefined) {
      arr = [];
    }
    return _emberRuntimeMixinsArray["default"].detect(arr) ? arr : NativeArray.apply(arr);
  };

  /**
    Activates the mixin on the Array.prototype if not already applied. Calling
    this method more than once is safe. This will be called when ember is loaded
    unless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`
    set to `false`.
  
    Example
  
    ```js
    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {
      Ember.NativeArray.activate();
    }
    ```
  
    @method activate
    @for Ember.NativeArray
    @static
    @return {void}
    @private
  */
  NativeArray.activate = function () {
    NativeArray.apply(Array.prototype);

    exports.A = A = function (arr) {
      return arr || [];
    };
  };

  if (_emberMetalCore["default"].EXTEND_PROTOTYPES === true || _emberMetalCore["default"].EXTEND_PROTOTYPES.Array) {
    NativeArray.activate();
  }

  _emberMetalCore["default"].A = A; // ES6TODO: Setting A onto the object returned by ember-metal/core to avoid circles
  exports.A = A;
  exports.NativeArray = NativeArray;
  exports["default"] = NativeArray;
});
/**
@module ember
@submodule ember-runtime
*/

// Ember.EXTEND_PROTOTYPES
enifed("ember-runtime/system/object", ["exports", "ember-runtime/system/core_object", "ember-runtime/mixins/observable"], function (exports, _emberRuntimeSystemCore_object, _emberRuntimeMixinsObservable) {

  /**
    `Ember.Object` is the main base class for all Ember objects. It is a subclass
    of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,
    see the documentation for each of these.
  
    @class Object
    @namespace Ember
    @extends Ember.CoreObject
    @uses Ember.Observable
    @public
  */
  var EmberObject = _emberRuntimeSystemCore_object["default"].extend(_emberRuntimeMixinsObservable["default"]);
  EmberObject.toString = function () {
    return "Ember.Object";
  };

  exports["default"] = EmberObject;
});
/**
@module ember
@submodule ember-runtime
*/
enifed("ember-runtime/system/object_proxy", ["exports", "ember-runtime/system/object", "ember-runtime/mixins/-proxy"], function (exports, _emberRuntimeSystemObject, _emberRuntimeMixinsProxy) {

  /**
    `Ember.ObjectProxy` forwards all properties not defined by the proxy itself
    to a proxied `content` object.
  
    ```javascript
    object = Ember.Object.create({
      name: 'Foo'
    });
  
    proxy = Ember.ObjectProxy.create({
      content: object
    });
  
    // Access and change existing properties
    proxy.get('name')          // 'Foo'
    proxy.set('name', 'Bar');
    object.get('name')         // 'Bar'
  
    // Create new 'description' property on `object`
    proxy.set('description', 'Foo is a whizboo baz');
    object.get('description')  // 'Foo is a whizboo baz'
    ```
  
    While `content` is unset, setting a property to be delegated will throw an
    Error.
  
    ```javascript
    proxy = Ember.ObjectProxy.create({
      content: null,
      flag: null
    });
    proxy.set('flag', true);
    proxy.get('flag');         // true
    proxy.get('foo');          // undefined
    proxy.set('foo', 'data');  // throws Error
    ```
  
    Delegated properties can be bound to and will change when content is updated.
  
    Computed properties on the proxy itself can depend on delegated properties.
  
    ```javascript
    ProxyWithComputedProperty = Ember.ObjectProxy.extend({
      fullName: function () {
        var firstName = this.get('firstName'),
            lastName = this.get('lastName');
        if (firstName && lastName) {
          return firstName + ' ' + lastName;
        }
        return firstName || lastName;
      }.property('firstName', 'lastName')
    });
  
    proxy = ProxyWithComputedProperty.create();
  
    proxy.get('fullName');  // undefined
    proxy.set('content', {
      firstName: 'Tom', lastName: 'Dale'
    }); // triggers property change for fullName on proxy
  
    proxy.get('fullName');  // 'Tom Dale'
    ```
  
    @class ObjectProxy
    @namespace Ember
    @extends Ember.Object
    @extends Ember._ProxyMixin
    @private
  */

  exports["default"] = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsProxy["default"]);
});
enifed('ember-runtime/system/service', ['exports', 'ember-runtime/system/object', 'ember-runtime/inject'], function (exports, _emberRuntimeSystemObject, _emberRuntimeInject) {

  /**
    Creates a property that lazily looks up a service in the container. There
    are no restrictions as to what objects a service can be injected into.
  
    Example:
  
    ```javascript
    App.ApplicationRoute = Ember.Route.extend({
      authManager: Ember.inject.service('auth'),
  
      model: function() {
        return this.get('authManager').findCurrentUser();
      }
    });
    ```
  
    This example will create an `authManager` property on the application route
    that looks up the `auth` service in the container, making it easily
    accessible in the `model` hook.
  
    @method service
    @since 1.10.0
    @for Ember.inject
    @param {String} name (optional) name of the service to inject, defaults to
           the property's name
    @return {Ember.InjectedProperty} injection descriptor instance
    @public
  */
  (0, _emberRuntimeInject.createInjectionHelper)('service');

  /**
    @class Service
    @namespace Ember
    @extends Ember.Object
    @since 1.10.0
    @public
  */
  var Service = _emberRuntimeSystemObject["default"].extend();

  Service.reopenClass({
    isServiceFactory: true
  });

  exports["default"] = Service;
});
enifed("ember-runtime/system/set", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/utils", "ember-metal/is_none", "ember-runtime/system/string", "ember-runtime/system/core_object", "ember-runtime/mixins/mutable_enumerable", "ember-runtime/mixins/enumerable", "ember-runtime/mixins/copyable", "ember-runtime/mixins/freezable", "ember-metal/error", "ember-metal/property_events", "ember-metal/mixin", "ember-metal/computed"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalUtils, _emberMetalIs_none, _emberRuntimeSystemString, _emberRuntimeSystemCore_object, _emberRuntimeMixinsMutable_enumerable, _emberRuntimeMixinsEnumerable, _emberRuntimeMixinsCopyable, _emberRuntimeMixinsFreezable, _emberMetalError, _emberMetalProperty_events, _emberMetalMixin, _emberMetalComputed) {

  /**
    An unordered collection of objects.
  
    A Set works a bit like an array except that its items are not ordered. You
    can create a set to efficiently test for membership for an object. You can
    also iterate through a set just like an array, even accessing objects by
    index, however there is no guarantee as to their order.
  
    All Sets are observable via the Enumerable Observer API - which works
    on any enumerable object including both Sets and Arrays.
  
    ## Creating a Set
  
    You can create a set like you would most objects using
    `new Ember.Set()`. Most new sets you create will be empty, but you can
    also initialize the set with some content by passing an array or other
    enumerable of objects to the constructor.
  
    Finally, you can pass in an existing set and the set will be copied. You
    can also create a copy of a set by calling `Ember.Set#copy()`.
  
    ```javascript
    // creates a new empty set
    var foundNames = new Ember.Set();
  
    // creates a set with four names in it.
    var names = new Ember.Set(["Charles", "Tom", "Juan", "Alex"]); // :P
  
    // creates a copy of the names set.
    var namesCopy = new Ember.Set(names);
  
    // same as above.
    var anotherNamesCopy = names.copy();
    ```
  
    ## Adding/Removing Objects
  
    You generally add or remove objects from a set using `add()` or
    `remove()`. You can add any type of object including primitives such as
    numbers, strings, and booleans.
  
    Unlike arrays, objects can only exist one time in a set. If you call `add()`
    on a set with the same object multiple times, the object will only be added
    once. Likewise, calling `remove()` with the same object multiple times will
    remove the object the first time and have no effect on future calls until
    you add the object to the set again.
  
    NOTE: You cannot add/remove `null` or `undefined` to a set. Any attempt to do
    so will be ignored.
  
    In addition to add/remove you can also call `push()`/`pop()`. Push behaves
    just like `add()` but `pop()`, unlike `remove()` will pick an arbitrary
    object, remove it and return it. This is a good way to use a set as a job
    queue when you don't care which order the jobs are executed in.
  
    ## Testing for an Object
  
    To test for an object's presence in a set you simply call
    `Ember.Set#contains()`.
  
    ## Observing changes
  
    When using `Ember.Set`, you can observe the `"[]"` property to be
    alerted whenever the content changes. You can also add an enumerable
    observer to the set to be notified of specific objects that are added and
    removed from the set. See [Ember.Enumerable](/api/classes/Ember.Enumerable.html)
    for more information on enumerables.
  
    This is often unhelpful. If you are filtering sets of objects, for instance,
    it is very inefficient to re-filter all of the items each time the set
    changes. It would be better if you could just adjust the filtered set based
    on what was changed on the original set. The same issue applies to merging
    sets, as well.
  
    ## Other Methods
  
    `Ember.Set` primary implements other mixin APIs. For a complete reference
    on the methods you will use with `Ember.Set`, please consult these mixins.
    The most useful ones will be `Ember.Enumerable` and
    `Ember.MutableEnumerable` which implement most of the common iterator
    methods you are used to on Array.
  
    Note that you can also use the `Ember.Copyable` and `Ember.Freezable`
    APIs on `Ember.Set` as well. Once a set is frozen it can no longer be
    modified. The benefit of this is that when you call `frozenCopy()` on it,
    Ember will avoid making copies of the set. This allows you to write
    code that can know with certainty when the underlying set data will or
    will not be modified.
  
    @class Set
    @namespace Ember
    @extends Ember.CoreObject
    @uses Ember.MutableEnumerable
    @uses Ember.Copyable
    @uses Ember.Freezable
    @since Ember 0.9
    @deprecated
    @private
  */
  exports["default"] = _emberRuntimeSystemCore_object["default"].extend(_emberRuntimeMixinsMutable_enumerable["default"], _emberRuntimeMixinsCopyable["default"], _emberRuntimeMixinsFreezable.Freezable, {

    // ..........................................................
    // IMPLEMENT ENUMERABLE APIS
    //

    /**
      This property will change as the number of objects in the set changes.
       @property length
      @type number
      @default 0
      @private
    */
    length: 0,

    /**
      Clears the set. This is useful if you want to reuse an existing set
      without having to recreate it.
       ```javascript
      var colors = new Ember.Set(["red", "green", "blue"]);
      colors.length;  // 3
      colors.clear();
      colors.length;  // 0
      ```
       @method clear
      @return {Ember.Set} An empty Set
      @private
    */
    clear: function () {
      if (this.isFrozen) {
        throw new _emberMetalError["default"](_emberRuntimeMixinsFreezable.FROZEN_ERROR);
      }

      var len = (0, _emberMetalProperty_get.get)(this, "length");
      if (len === 0) {
        return this;
      }

      var guid;

      this.enumerableContentWillChange(len, 0);
      (0, _emberMetalProperty_events.propertyWillChange)(this, "firstObject");
      (0, _emberMetalProperty_events.propertyWillChange)(this, "lastObject");

      for (var i = 0; i < len; i++) {
        guid = (0, _emberMetalUtils.guidFor)(this[i]);
        delete this[guid];
        delete this[i];
      }

      (0, _emberMetalProperty_set.set)(this, "length", 0);

      (0, _emberMetalProperty_events.propertyDidChange)(this, "firstObject");
      (0, _emberMetalProperty_events.propertyDidChange)(this, "lastObject");
      this.enumerableContentDidChange(len, 0);

      return this;
    },

    /**
      Returns true if the passed object is also an enumerable that contains the
      same objects as the receiver.
       ```javascript
      var colors = ["red", "green", "blue"],
          same_colors = new Ember.Set(colors);
       same_colors.isEqual(colors);               // true
      same_colors.isEqual(["purple", "brown"]);  // false
      ```
       @method isEqual
      @param {Ember.Set} obj the other object.
      @return {Boolean}
      @private
    */
    isEqual: function (obj) {
      // fail fast
      if (!_emberRuntimeMixinsEnumerable["default"].detect(obj)) {
        return false;
      }

      var loc = (0, _emberMetalProperty_get.get)(this, "length");
      if ((0, _emberMetalProperty_get.get)(obj, "length") !== loc) {
        return false;
      }

      while (--loc >= 0) {
        if (!obj.contains(this[loc])) {
          return false;
        }
      }

      return true;
    },

    /**
      Adds an object to the set. Only non-`null` objects can be added to a set
      and those can only be added once. If the object is already in the set or
      the passed value is null this method will have no effect.
       This is an alias for `Ember.MutableEnumerable.addObject()`.
       ```javascript
      var colors = new Ember.Set();
      colors.add("blue");     // ["blue"]
      colors.add("blue");     // ["blue"]
      colors.add("red");      // ["blue", "red"]
      colors.add(null);       // ["blue", "red"]
      colors.add(undefined);  // ["blue", "red"]
      ```
       @method add
      @param {Object} obj The object to add.
      @return {Ember.Set} The set itself.
      @private
    */
    add: (0, _emberMetalMixin.aliasMethod)("addObject"),

    /**
      Removes the object from the set if it is found. If you pass a `null` value
      or an object that is already not in the set, this method will have no
      effect. This is an alias for `Ember.MutableEnumerable.removeObject()`.
       ```javascript
      var colors = new Ember.Set(["red", "green", "blue"]);
      colors.remove("red");     // ["blue", "green"]
      colors.remove("purple");  // ["blue", "green"]
      colors.remove(null);      // ["blue", "green"]
      ```
       @method remove
      @param {Object} obj The object to remove
      @return {Ember.Set} The set itself.
      @private
    */
    remove: (0, _emberMetalMixin.aliasMethod)("removeObject"),

    /**
      Removes the last element from the set and returns it, or `null` if it's empty.
       ```javascript
      var colors = new Ember.Set(["green", "blue"]);
      colors.pop();  // "blue"
      colors.pop();  // "green"
      colors.pop();  // null
      ```
       @method pop
      @return {Object} The removed object from the set or null.
      @private
    */
    pop: function () {
      if ((0, _emberMetalProperty_get.get)(this, "isFrozen")) {
        throw new _emberMetalError["default"](_emberRuntimeMixinsFreezable.FROZEN_ERROR);
      }

      var obj = this.length > 0 ? this[this.length - 1] : null;
      this.remove(obj);
      return obj;
    },

    /**
      Inserts the given object on to the end of the set. It returns
      the set itself.
       This is an alias for `Ember.MutableEnumerable.addObject()`.
       ```javascript
      var colors = new Ember.Set();
      colors.push("red");   // ["red"]
      colors.push("green"); // ["red", "green"]
      colors.push("blue");  // ["red", "green", "blue"]
      ```
       @method push
      @return {Ember.Set} The set itself.
      @private
    */
    push: (0, _emberMetalMixin.aliasMethod)("addObject"),

    /**
      Removes the last element from the set and returns it, or `null` if it's empty.
       This is an alias for `Ember.Set.pop()`.
       ```javascript
      var colors = new Ember.Set(["green", "blue"]);
      colors.shift();  // "blue"
      colors.shift();  // "green"
      colors.shift();  // null
      ```
       @method shift
      @return {Object} The removed object from the set or null.
      @private
    */
    shift: (0, _emberMetalMixin.aliasMethod)("pop"),

    /**
      Inserts the given object on to the end of the set. It returns
      the set itself.
       This is an alias of `Ember.Set.push()`
       ```javascript
      var colors = new Ember.Set();
      colors.unshift("red");    // ["red"]
      colors.unshift("green");  // ["red", "green"]
      colors.unshift("blue");   // ["red", "green", "blue"]
      ```
       @method unshift
      @return {Ember.Set} The set itself.
      @private
    */
    unshift: (0, _emberMetalMixin.aliasMethod)("push"),

    /**
      Adds each object in the passed enumerable to the set.
       This is an alias of `Ember.MutableEnumerable.addObjects()`
       ```javascript
      var colors = new Ember.Set();
      colors.addEach(["red", "green", "blue"]);  // ["red", "green", "blue"]
      ```
       @method addEach
      @param {Ember.Enumerable} objects the objects to add.
      @return {Ember.Set} The set itself.
      @private
    */
    addEach: (0, _emberMetalMixin.aliasMethod)("addObjects"),

    /**
      Removes each object in the passed enumerable to the set.
       This is an alias of `Ember.MutableEnumerable.removeObjects()`
       ```javascript
      var colors = new Ember.Set(["red", "green", "blue"]);
      colors.removeEach(["red", "blue"]);  //  ["green"]
      ```
       @method removeEach
      @param {Ember.Enumerable} objects the objects to remove.
      @return {Ember.Set} The set itself.
      @private
    */
    removeEach: (0, _emberMetalMixin.aliasMethod)("removeObjects"),

    // ..........................................................
    // PRIVATE ENUMERABLE SUPPORT
    //

    init: function (items) {
      _emberMetalCore["default"].deprecate("Ember.Set is deprecated and will be removed in a future release.");
      this._super.apply(this, arguments);

      if (items) {
        this.addObjects(items);
      }
    },

    // implement Ember.Enumerable
    nextObject: function (idx) {
      return this[idx];
    },

    // more optimized version
    firstObject: (0, _emberMetalComputed.computed)(function () {
      return this.length > 0 ? this[0] : undefined;
    }),

    // more optimized version
    lastObject: (0, _emberMetalComputed.computed)(function () {
      return this.length > 0 ? this[this.length - 1] : undefined;
    }),

    // implements Ember.MutableEnumerable
    addObject: function (obj) {
      if ((0, _emberMetalProperty_get.get)(this, "isFrozen")) {
        throw new _emberMetalError["default"](_emberRuntimeMixinsFreezable.FROZEN_ERROR);
      }

      if ((0, _emberMetalIs_none["default"])(obj)) {
        return this; // nothing to do
      }

      var guid = (0, _emberMetalUtils.guidFor)(obj);
      var idx = this[guid];
      var len = (0, _emberMetalProperty_get.get)(this, "length");
      var added;

      if (idx >= 0 && idx < len && this[idx] === obj) {
        return this; // added
      }

      added = [obj];

      this.enumerableContentWillChange(null, added);
      (0, _emberMetalProperty_events.propertyWillChange)(this, "lastObject");

      len = (0, _emberMetalProperty_get.get)(this, "length");
      this[guid] = len;
      this[len] = obj;
      (0, _emberMetalProperty_set.set)(this, "length", len + 1);

      (0, _emberMetalProperty_events.propertyDidChange)(this, "lastObject");
      this.enumerableContentDidChange(null, added);

      return this;
    },

    // implements Ember.MutableEnumerable
    removeObject: function (obj) {
      if ((0, _emberMetalProperty_get.get)(this, "isFrozen")) {
        throw new _emberMetalError["default"](_emberRuntimeMixinsFreezable.FROZEN_ERROR);
      }

      if ((0, _emberMetalIs_none["default"])(obj)) {
        return this; // nothing to do
      }

      var guid = (0, _emberMetalUtils.guidFor)(obj);
      var idx = this[guid];
      var len = (0, _emberMetalProperty_get.get)(this, "length");
      var isFirst = idx === 0;
      var isLast = idx === len - 1;
      var last, removed;

      if (idx >= 0 && idx < len && this[idx] === obj) {
        removed = [obj];

        this.enumerableContentWillChange(removed, null);
        if (isFirst) {
          (0, _emberMetalProperty_events.propertyWillChange)(this, "firstObject");
        }
        if (isLast) {
          (0, _emberMetalProperty_events.propertyWillChange)(this, "lastObject");
        }

        // swap items - basically move the item to the end so it can be removed
        if (idx < len - 1) {
          last = this[len - 1];
          this[idx] = last;
          this[(0, _emberMetalUtils.guidFor)(last)] = idx;
        }

        delete this[guid];
        delete this[len - 1];
        (0, _emberMetalProperty_set.set)(this, "length", len - 1);

        if (isFirst) {
          (0, _emberMetalProperty_events.propertyDidChange)(this, "firstObject");
        }
        if (isLast) {
          (0, _emberMetalProperty_events.propertyDidChange)(this, "lastObject");
        }
        this.enumerableContentDidChange(removed, null);
      }

      return this;
    },

    // optimized version
    contains: function (obj) {
      return this[(0, _emberMetalUtils.guidFor)(obj)] >= 0;
    },

    copy: function () {
      var C = this.constructor;
      var ret = new C();
      var loc = (0, _emberMetalProperty_get.get)(this, "length");

      (0, _emberMetalProperty_set.set)(ret, "length", loc);
      while (--loc >= 0) {
        ret[loc] = this[loc];
        ret[(0, _emberMetalUtils.guidFor)(this[loc])] = loc;
      }
      return ret;
    },

    toString: function () {
      var len = this.length;
      var array = [];
      var idx;

      for (idx = 0; idx < len; idx++) {
        array[idx] = this[idx];
      }
      return (0, _emberRuntimeSystemString.fmt)("Ember.Set<%@>", [array.join(",")]);
    }
  });
});
/**
@module ember
@submodule ember-runtime
*/
// Ember.isNone, Ember.A
enifed("ember-runtime/system/string", ["exports", "ember-metal/core", "ember-metal/utils", "ember-runtime/utils", "ember-metal/cache"], function (exports, _emberMetalCore, _emberMetalUtils, _emberRuntimeUtils, _emberMetalCache) {

  var STRING_DASHERIZE_REGEXP = /[ _]/g;

  var STRING_DASHERIZE_CACHE = new _emberMetalCache["default"](1000, function (key) {
    return decamelize(key).replace(STRING_DASHERIZE_REGEXP, "-");
  });

  var STRING_CAMELIZE_REGEXP_1 = /(\-|\_|\.|\s)+(.)?/g;
  var STRING_CAMELIZE_REGEXP_2 = /(^|\/)([A-Z])/g;

  var CAMELIZE_CACHE = new _emberMetalCache["default"](1000, function (key) {
    return key.replace(STRING_CAMELIZE_REGEXP_1, function (match, separator, chr) {
      return chr ? chr.toUpperCase() : "";
    }).replace(STRING_CAMELIZE_REGEXP_2, function (match, separator, chr) {
      return match.toLowerCase();
    });
  });

  var STRING_CLASSIFY_REGEXP_1 = /(\-|\_|\.|\s)+(.)?/g;
  var STRING_CLASSIFY_REGEXP_2 = /(^|\/|\.)([a-z])/g;

  var CLASSIFY_CACHE = new _emberMetalCache["default"](1000, function (str) {
    return str.replace(STRING_CLASSIFY_REGEXP_1, function (match, separator, chr) {
      return chr ? chr.toUpperCase() : "";
    }).replace(STRING_CLASSIFY_REGEXP_2, function (match, separator, chr) {
      return match.toUpperCase();
    });
  });

  var STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
  var STRING_UNDERSCORE_REGEXP_2 = /\-|\s+/g;

  var UNDERSCORE_CACHE = new _emberMetalCache["default"](1000, function (str) {
    return str.replace(STRING_UNDERSCORE_REGEXP_1, "$1_$2").replace(STRING_UNDERSCORE_REGEXP_2, "_").toLowerCase();
  });

  var STRING_CAPITALIZE_REGEXP = /(^|\/)([a-z])/g;

  var CAPITALIZE_CACHE = new _emberMetalCache["default"](1000, function (str) {
    return str.replace(STRING_CAPITALIZE_REGEXP, function (match, separator, chr) {
      return match.toUpperCase();
    });
  });

  var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;

  var DECAMELIZE_CACHE = new _emberMetalCache["default"](1000, function (str) {
    return str.replace(STRING_DECAMELIZE_REGEXP, "$1_$2").toLowerCase();
  });

  function fmt(str, formats) {
    var cachedFormats = formats;

    if (!(0, _emberRuntimeUtils.isArray)(cachedFormats) || arguments.length > 2) {
      cachedFormats = new Array(arguments.length - 1);

      for (var i = 1, l = arguments.length; i < l; i++) {
        cachedFormats[i - 1] = arguments[i];
      }
    }

    // first, replace any ORDERED replacements.
    var idx = 0; // the current index for non-numerical replacements
    return str.replace(/%@([0-9]+)?/g, function (s, argIndex) {
      argIndex = argIndex ? parseInt(argIndex, 10) - 1 : idx++;
      s = cachedFormats[argIndex];
      return s === null ? "(null)" : s === undefined ? "" : (0, _emberMetalUtils.inspect)(s);
    });
  }

  function loc(str, formats) {
    if (!(0, _emberRuntimeUtils.isArray)(formats) || arguments.length > 2) {
      formats = Array.prototype.slice.call(arguments, 1);
    }

    str = _emberMetalCore["default"].STRINGS[str] || str;
    return fmt(str, formats);
  }

  function w(str) {
    return str.split(/\s+/);
  }

  function decamelize(str) {
    return DECAMELIZE_CACHE.get(str);
  }

  function dasherize(str) {
    return STRING_DASHERIZE_CACHE.get(str);
  }

  function camelize(str) {
    return CAMELIZE_CACHE.get(str);
  }

  function classify(str) {
    return CLASSIFY_CACHE.get(str);
  }

  function underscore(str) {
    return UNDERSCORE_CACHE.get(str);
  }

  function capitalize(str) {
    return CAPITALIZE_CACHE.get(str);
  }

  /**
    Defines the hash of localized strings for the current language. Used by
    the `Ember.String.loc()` helper. To localize, add string values to this
    hash.
  
    @property STRINGS
    @for Ember
    @type Object
    @private
  */
  _emberMetalCore["default"].STRINGS = {};

  /**
    Defines string helper methods including string formatting and localization.
    Unless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be
    added to the `String.prototype` as well.
  
    @class String
    @namespace Ember
    @static
    @public
  */
  exports["default"] = {
    /**
      Apply formatting options to the string. This will look for occurrences
      of "%@" in your string and substitute them with the arguments you pass into
      this method. If you want to control the specific order of replacement,
      you can add a number after the key as well to indicate which argument
      you want to insert.
       Ordered insertions are most useful when building loc strings where values
      you need to insert may appear in different orders.
       ```javascript
      "Hello %@ %@".fmt('John', 'Doe');     // "Hello John Doe"
      "Hello %@2, %@1".fmt('John', 'Doe');  // "Hello Doe, John"
      ```
       @method fmt
      @param {String} str The string to format
      @param {Array} formats An array of parameters to interpolate into string.
      @return {String} formatted string
      @public
    */
    fmt: fmt,

    /**
      Formats the passed string, but first looks up the string in the localized
      strings hash. This is a convenient way to localize text. See
      `Ember.String.fmt()` for more information on formatting.
       Note that it is traditional but not required to prefix localized string
      keys with an underscore or other character so you can easily identify
      localized strings.
       ```javascript
      Ember.STRINGS = {
        '_Hello World': 'Bonjour le monde',
        '_Hello %@ %@': 'Bonjour %@ %@'
      };
       Ember.String.loc("_Hello World");  // 'Bonjour le monde';
      Ember.String.loc("_Hello %@ %@", ["John", "Smith"]);  // "Bonjour John Smith";
      ```
       @method loc
      @param {String} str The string to format
      @param {Array} formats Optional array of parameters to interpolate into string.
      @return {String} formatted string
      @public
    */
    loc: loc,

    /**
      Splits a string into separate units separated by spaces, eliminating any
      empty strings in the process. This is a convenience method for split that
      is mostly useful when applied to the `String.prototype`.
       ```javascript
      Ember.String.w("alpha beta gamma").forEach(function(key) {
        console.log(key);
      });
       // > alpha
      // > beta
      // > gamma
      ```
       @method w
      @param {String} str The string to split
      @return {Array} array containing the split strings
      @public
    */
    w: w,

    /**
      Converts a camelized string into all lower case separated by underscores.
       ```javascript
      'innerHTML'.decamelize();           // 'inner_html'
      'action_name'.decamelize();        // 'action_name'
      'css-class-name'.decamelize();     // 'css-class-name'
      'my favorite items'.decamelize();  // 'my favorite items'
      ```
       @method decamelize
      @param {String} str The string to decamelize.
      @return {String} the decamelized string.
      @public
    */
    decamelize: decamelize,

    /**
      Replaces underscores, spaces, or camelCase with dashes.
       ```javascript
      'innerHTML'.dasherize();          // 'inner-html'
      'action_name'.dasherize();        // 'action-name'
      'css-class-name'.dasherize();     // 'css-class-name'
      'my favorite items'.dasherize();  // 'my-favorite-items'
      'privateDocs/ownerInvoice'.dasherize(); // 'private-docs/owner-invoice'
      ```
       @method dasherize
      @param {String} str The string to dasherize.
      @return {String} the dasherized string.
      @public
    */
    dasherize: dasherize,

    /**
      Returns the lowerCamelCase form of a string.
       ```javascript
      'innerHTML'.camelize();          // 'innerHTML'
      'action_name'.camelize();        // 'actionName'
      'css-class-name'.camelize();     // 'cssClassName'
      'my favorite items'.camelize();  // 'myFavoriteItems'
      'My Favorite Items'.camelize();  // 'myFavoriteItems'
      'private-docs/owner-invoice'.camelize(); // 'privateDocs/ownerInvoice'
      ```
       @method camelize
      @param {String} str The string to camelize.
      @return {String} the camelized string.
      @public
    */
    camelize: camelize,

    /**
      Returns the UpperCamelCase form of a string.
       ```javascript
      'innerHTML'.classify();          // 'InnerHTML'
      'action_name'.classify();        // 'ActionName'
      'css-class-name'.classify();     // 'CssClassName'
      'my favorite items'.classify();  // 'MyFavoriteItems'
      'private-docs/owner-invoice'.classify(); // 'PrivateDocs/OwnerInvoice'
      ```
       @method classify
      @param {String} str the string to classify
      @return {String} the classified string
      @public
    */
    classify: classify,

    /**
      More general than decamelize. Returns the lower\_case\_and\_underscored
      form of a string.
       ```javascript
      'innerHTML'.underscore();          // 'inner_html'
      'action_name'.underscore();        // 'action_name'
      'css-class-name'.underscore();     // 'css_class_name'
      'my favorite items'.underscore();  // 'my_favorite_items'
      'privateDocs/ownerInvoice'.underscore(); // 'private_docs/owner_invoice'
      ```
       @method underscore
      @param {String} str The string to underscore.
      @return {String} the underscored string.
      @public
    */
    underscore: underscore,

    /**
      Returns the Capitalized form of a string
       ```javascript
      'innerHTML'.capitalize()         // 'InnerHTML'
      'action_name'.capitalize()       // 'Action_name'
      'css-class-name'.capitalize()    // 'Css-class-name'
      'my favorite items'.capitalize() // 'My favorite items'
      'privateDocs/ownerInvoice'.capitalize(); // 'PrivateDocs/OwnerInvoice'
      ```
       @method capitalize
      @param {String} str The string to capitalize.
      @return {String} The capitalized string.
      @public
    */
    capitalize: capitalize
  };
  exports.fmt = fmt;
  exports.loc = loc;
  exports.w = w;
  exports.decamelize = decamelize;
  exports.dasherize = dasherize;
  exports.camelize = camelize;
  exports.classify = classify;
  exports.underscore = underscore;
  exports.capitalize = capitalize;
});
/**
@module ember
@submodule ember-runtime
*/
// Ember.STRINGS, Ember.FEATURES
enifed("ember-runtime/system/subarray", ["exports", "ember-metal/error", "ember-metal/enumerable_utils"], function (exports, _emberMetalError, _emberMetalEnumerable_utils) {

  var RETAIN = "r";
  var FILTER = "f";

  function Operation(type, count) {
    this.type = type;
    this.count = count;
  }

  exports["default"] = SubArray;

  /**
    An `Ember.SubArray` tracks an array in a way similar to, but more specialized
    than, `Ember.TrackedArray`.  It is useful for keeping track of the indexes of
    items within a filtered array.
  
    @class SubArray
    @namespace Ember
    @private
  */
  function SubArray(length) {
    if (arguments.length < 1) {
      length = 0;
    }

    if (length > 0) {
      this._operations = [new Operation(RETAIN, length)];
    } else {
      this._operations = [];
    }
  }

  SubArray.prototype = {
    /**
      Track that an item was added to the tracked array.
       @method addItem
       @param {Number} index The index of the item in the tracked array.
      @param {Boolean} match `true` iff the item is included in the subarray.
       @return {number} The index of the item in the subarray.
      @private
    */
    addItem: function (index, match) {
      var returnValue = -1;
      var itemType = match ? RETAIN : FILTER;
      var self = this;

      this._findOperation(index, function (operation, operationIndex, rangeStart, rangeEnd, seenInSubArray) {
        var newOperation, splitOperation;

        if (itemType === operation.type) {
          ++operation.count;
        } else if (index === rangeStart) {
          // insert to the left of `operation`
          self._operations.splice(operationIndex, 0, new Operation(itemType, 1));
        } else {
          newOperation = new Operation(itemType, 1);
          splitOperation = new Operation(operation.type, rangeEnd - index + 1);
          operation.count = index - rangeStart;

          self._operations.splice(operationIndex + 1, 0, newOperation, splitOperation);
        }

        if (match) {
          if (operation.type === RETAIN) {
            returnValue = seenInSubArray + (index - rangeStart);
          } else {
            returnValue = seenInSubArray;
          }
        }

        self._composeAt(operationIndex);
      }, function (seenInSubArray) {
        self._operations.push(new Operation(itemType, 1));

        if (match) {
          returnValue = seenInSubArray;
        }

        self._composeAt(self._operations.length - 1);
      });

      return returnValue;
    },

    /**
      Track that an item was removed from the tracked array.
       @method removeItem
       @param {Number} index The index of the item in the tracked array.
       @return {number} The index of the item in the subarray, or `-1` if the item
      was not in the subarray.
      @private
    */
    removeItem: function (index) {
      var returnValue = -1;
      var self = this;

      this._findOperation(index, function (operation, operationIndex, rangeStart, rangeEnd, seenInSubArray) {
        if (operation.type === RETAIN) {
          returnValue = seenInSubArray + (index - rangeStart);
        }

        if (operation.count > 1) {
          --operation.count;
        } else {
          self._operations.splice(operationIndex, 1);
          self._composeAt(operationIndex);
        }
      }, function () {
        throw new _emberMetalError["default"]("Can't remove an item that has never been added.");
      });

      return returnValue;
    },

    _findOperation: function (index, foundCallback, notFoundCallback) {
      var seenInSubArray = 0;
      var operationIndex, len, operation, rangeStart, rangeEnd;

      // OPTIMIZE: change to balanced tree
      // find leftmost operation to the right of `index`
      for (operationIndex = rangeStart = 0, len = this._operations.length; operationIndex < len; rangeStart = rangeEnd + 1, ++operationIndex) {
        operation = this._operations[operationIndex];
        rangeEnd = rangeStart + operation.count - 1;

        if (index >= rangeStart && index <= rangeEnd) {
          foundCallback(operation, operationIndex, rangeStart, rangeEnd, seenInSubArray);
          return;
        } else if (operation.type === RETAIN) {
          seenInSubArray += operation.count;
        }
      }

      notFoundCallback(seenInSubArray);
    },

    _composeAt: function (index) {
      var op = this._operations[index];
      var otherOp;

      if (!op) {
        // Composing out of bounds is a no-op, as when removing the last operation
        // in the list.
        return;
      }

      if (index > 0) {
        otherOp = this._operations[index - 1];
        if (otherOp.type === op.type) {
          op.count += otherOp.count;
          this._operations.splice(index - 1, 1);
          --index;
        }
      }

      if (index < this._operations.length - 1) {
        otherOp = this._operations[index + 1];
        if (otherOp.type === op.type) {
          op.count += otherOp.count;
          this._operations.splice(index + 1, 1);
        }
      }
    },

    toString: function () {
      var str = "";
      (0, _emberMetalEnumerable_utils.forEach)(this._operations, function (operation) {
        str += " " + operation.type + ":" + operation.count;
      });
      return str.substring(1);
    }
  };
});
enifed("ember-runtime/system/tracked_array", ["exports", "ember-metal/property_get", "ember-metal/enumerable_utils"], function (exports, _emberMetalProperty_get, _emberMetalEnumerable_utils) {

  var RETAIN = "r";
  var INSERT = "i";
  var DELETE = "d";

  exports["default"] = TrackedArray;

  /**
    An `Ember.TrackedArray` tracks array operations.  It's useful when you want to
    lazily compute the indexes of items in an array after they've been shifted by
    subsequent operations.
  
    @class TrackedArray
    @namespace Ember
    @param {Array} [items=[]] The array to be tracked.  This is used just to get
    the initial items for the starting state of retain:n.
    @private
  */
  function TrackedArray(items) {
    if (arguments.length < 1) {
      items = [];
    }

    var length = (0, _emberMetalProperty_get.get)(items, "length");

    if (length) {
      this._operations = [new ArrayOperation(RETAIN, length, items)];
    } else {
      this._operations = [];
    }
  }

  TrackedArray.RETAIN = RETAIN;
  TrackedArray.INSERT = INSERT;
  TrackedArray.DELETE = DELETE;

  TrackedArray.prototype = {

    /**
      Track that `newItems` were added to the tracked array at `index`.
       @method addItems
      @param index
      @param newItems
      @private
    */
    addItems: function (index, newItems) {
      var count = (0, _emberMetalProperty_get.get)(newItems, "length");
      if (count < 1) {
        return;
      }

      var match = this._findArrayOperation(index);
      var arrayOperation = match.operation;
      var arrayOperationIndex = match.index;
      var arrayOperationRangeStart = match.rangeStart;
      var composeIndex, newArrayOperation;

      newArrayOperation = new ArrayOperation(INSERT, count, newItems);

      if (arrayOperation) {
        if (!match.split) {
          // insert left of arrayOperation
          this._operations.splice(arrayOperationIndex, 0, newArrayOperation);
          composeIndex = arrayOperationIndex;
        } else {
          this._split(arrayOperationIndex, index - arrayOperationRangeStart, newArrayOperation);
          composeIndex = arrayOperationIndex + 1;
        }
      } else {
        // insert at end
        this._operations.push(newArrayOperation);
        composeIndex = arrayOperationIndex;
      }

      this._composeInsert(composeIndex);
    },

    /**
      Track that `count` items were removed at `index`.
       @method removeItems
      @param index
      @param count
      @private
    */
    removeItems: function (index, count) {
      if (count < 1) {
        return;
      }

      var match = this._findArrayOperation(index);
      var arrayOperationIndex = match.index;
      var arrayOperationRangeStart = match.rangeStart;
      var newArrayOperation, composeIndex;

      newArrayOperation = new ArrayOperation(DELETE, count);
      if (!match.split) {
        // insert left of arrayOperation
        this._operations.splice(arrayOperationIndex, 0, newArrayOperation);
        composeIndex = arrayOperationIndex;
      } else {
        this._split(arrayOperationIndex, index - arrayOperationRangeStart, newArrayOperation);
        composeIndex = arrayOperationIndex + 1;
      }

      return this._composeDelete(composeIndex);
    },

    /**
      Apply all operations, reducing them to retain:n, for `n`, the number of
      items in the array.
       `callback` will be called for each operation and will be passed the following arguments:
       * {array} items The items for the given operation
      * {number} offset The computed offset of the items, ie the index in the
      array of the first item for this operation.
      * {string} operation The type of the operation.  One of
      `Ember.TrackedArray.{RETAIN, DELETE, INSERT}`
       @method apply
      @param {Function} callback
      @private
    */
    apply: function (callback) {
      var items = [];
      var offset = 0;

      (0, _emberMetalEnumerable_utils.forEach)(this._operations, function (arrayOperation, operationIndex) {
        callback(arrayOperation.items, offset, arrayOperation.type, operationIndex);

        if (arrayOperation.type !== DELETE) {
          offset += arrayOperation.count;
          items = items.concat(arrayOperation.items);
        }
      });

      this._operations = [new ArrayOperation(RETAIN, items.length, items)];
    },

    /**
      Return an `ArrayOperationMatch` for the operation that contains the item at `index`.
       @method _findArrayOperation
       @param {Number} index the index of the item whose operation information
      should be returned.
      @private
    */
    _findArrayOperation: function (index) {
      var split = false;
      var arrayOperationIndex, arrayOperation, arrayOperationRangeStart, arrayOperationRangeEnd, len;

      // OPTIMIZE: we could search these faster if we kept a balanced tree.
      // find leftmost arrayOperation to the right of `index`
      for (arrayOperationIndex = arrayOperationRangeStart = 0, len = this._operations.length; arrayOperationIndex < len; ++arrayOperationIndex) {
        arrayOperation = this._operations[arrayOperationIndex];

        if (arrayOperation.type === DELETE) {
          continue;
        }

        arrayOperationRangeEnd = arrayOperationRangeStart + arrayOperation.count - 1;

        if (index === arrayOperationRangeStart) {
          break;
        } else if (index > arrayOperationRangeStart && index <= arrayOperationRangeEnd) {
          split = true;
          break;
        } else {
          arrayOperationRangeStart = arrayOperationRangeEnd + 1;
        }
      }

      return new ArrayOperationMatch(arrayOperation, arrayOperationIndex, split, arrayOperationRangeStart);
    },

    _split: function (arrayOperationIndex, splitIndex, newArrayOperation) {
      var arrayOperation = this._operations[arrayOperationIndex];
      var splitItems = arrayOperation.items.slice(splitIndex);
      var splitArrayOperation = new ArrayOperation(arrayOperation.type, splitItems.length, splitItems);

      // truncate LHS
      arrayOperation.count = splitIndex;
      arrayOperation.items = arrayOperation.items.slice(0, splitIndex);

      this._operations.splice(arrayOperationIndex + 1, 0, newArrayOperation, splitArrayOperation);
    },

    // see SubArray for a better implementation.
    _composeInsert: function (index) {
      var newArrayOperation = this._operations[index];
      var leftArrayOperation = this._operations[index - 1]; // may be undefined
      var rightArrayOperation = this._operations[index + 1]; // may be undefined
      var leftOp = leftArrayOperation && leftArrayOperation.type;
      var rightOp = rightArrayOperation && rightArrayOperation.type;

      if (leftOp === INSERT) {
        // merge left
        leftArrayOperation.count += newArrayOperation.count;
        leftArrayOperation.items = leftArrayOperation.items.concat(newArrayOperation.items);

        if (rightOp === INSERT) {
          // also merge right (we have split an insert with an insert)
          leftArrayOperation.count += rightArrayOperation.count;
          leftArrayOperation.items = leftArrayOperation.items.concat(rightArrayOperation.items);
          this._operations.splice(index, 2);
        } else {
          // only merge left
          this._operations.splice(index, 1);
        }
      } else if (rightOp === INSERT) {
        // merge right
        newArrayOperation.count += rightArrayOperation.count;
        newArrayOperation.items = newArrayOperation.items.concat(rightArrayOperation.items);
        this._operations.splice(index + 1, 1);
      }
    },

    _composeDelete: function (index) {
      var arrayOperation = this._operations[index];
      var deletesToGo = arrayOperation.count;
      var leftArrayOperation = this._operations[index - 1]; // may be undefined
      var leftOp = leftArrayOperation && leftArrayOperation.type;
      var nextArrayOperation;
      var nextOp;
      var nextCount;
      var removeNewAndNextOp = false;
      var removedItems = [];

      if (leftOp === DELETE) {
        arrayOperation = leftArrayOperation;
        index -= 1;
      }

      for (var i = index + 1; deletesToGo > 0; ++i) {
        nextArrayOperation = this._operations[i];
        nextOp = nextArrayOperation.type;
        nextCount = nextArrayOperation.count;

        if (nextOp === DELETE) {
          arrayOperation.count += nextCount;
          continue;
        }

        if (nextCount > deletesToGo) {
          // d:2 {r,i}:5  we reduce the retain or insert, but it stays
          removedItems = removedItems.concat(nextArrayOperation.items.splice(0, deletesToGo));
          nextArrayOperation.count -= deletesToGo;

          // In the case where we truncate the last arrayOperation, we don't need to
          // remove it; also the deletesToGo reduction is not the entirety of
          // nextCount
          i -= 1;
          nextCount = deletesToGo;

          deletesToGo = 0;
        } else {
          if (nextCount === deletesToGo) {
            // Handle edge case of d:2 i:2 in which case both operations go away
            // during composition.
            removeNewAndNextOp = true;
          }
          removedItems = removedItems.concat(nextArrayOperation.items);
          deletesToGo -= nextCount;
        }

        if (nextOp === INSERT) {
          // d:2 i:3 will result in delete going away
          arrayOperation.count -= nextCount;
        }
      }

      if (arrayOperation.count > 0) {
        // compose our new delete with possibly several operations to the right of
        // disparate types
        this._operations.splice(index + 1, i - 1 - index);
      } else {
        // The delete operation can go away; it has merely reduced some other
        // operation, as in d:3 i:4; it may also have eliminated that operation,
        // as in d:3 i:3.
        this._operations.splice(index, removeNewAndNextOp ? 2 : 1);
      }

      return removedItems;
    },

    toString: function () {
      var str = "";
      (0, _emberMetalEnumerable_utils.forEach)(this._operations, function (operation) {
        str += " " + operation.type + ":" + operation.count;
      });
      return str.substring(1);
    }
  };

  /**
    Internal data structure to represent an array operation.
  
    @method ArrayOperation
    @private
    @param {String} operation The type of the operation.  One of
    `Ember.TrackedArray.{RETAIN, INSERT, DELETE}`
    @param {Number} count The number of items in this operation.
    @param {Array} items The items of the operation, if included.  RETAIN and
    INSERT include their items, DELETE does not.
    @private
  */
  function ArrayOperation(operation, count, items) {
    this.type = operation; // RETAIN | INSERT | DELETE
    this.count = count;
    this.items = items;
  }

  /**
    Internal data structure used to include information when looking up operations
    by item index.
  
    @method ArrayOperationMatch
    @private
    @param {ArrayOperation} operation
    @param {Number} index The index of `operation` in the array of operations.
    @param {Boolean} split Whether or not the item index searched for would
    require a split for a new operation type.
    @param {Number} rangeStart The index of the first item in the operation,
    with respect to the tracked array.  The index of the last item can be computed
    from `rangeStart` and `operation.count`.
    @private
  */
  function ArrayOperationMatch(operation, index, split, rangeStart) {
    this.operation = operation;
    this.index = index;
    this.split = split;
    this.rangeStart = rangeStart;
  }
});
enifed('ember-runtime/utils', ['exports', 'ember-runtime/mixins/array', 'ember-runtime/system/object', 'ember-metal/utils'], function (exports, _emberRuntimeMixinsArray, _emberRuntimeSystemObject, _emberMetalUtils) {
  exports.isArray = isArray;
  exports.typeOf = typeOf;

  // ........................................
  // TYPING & ARRAY MESSAGING
  //
  var TYPE_MAP = {
    '[object Boolean]': 'boolean',
    '[object Number]': 'number',
    '[object String]': 'string',
    '[object Function]': 'function',
    '[object Array]': 'array',
    '[object Date]': 'date',
    '[object RegExp]': 'regexp',
    '[object Object]': 'object'
  };

  var toString = Object.prototype.toString;

  /**
    Returns true if the passed object is an array or Array-like.
  
    Ember Array Protocol:
  
      - the object has an objectAt property
      - the object is a native Array
      - the object is an Object, and has a length property
  
    Unlike `Ember.typeOf` this method returns true even if the passed object is
    not formally array but appears to be array-like (i.e. implements `Ember.Array`)
  
    ```javascript
    Ember.isArray();                                          // false
    Ember.isArray([]);                                        // true
    Ember.isArray(Ember.ArrayProxy.create({ content: [] }));  // true
    ```
  
    @method isArray
    @for Ember
    @param {Object} obj The object to test
    @return {Boolean} true if the passed object is an array or Array-like
    @public
  */

  function isArray(obj) {
    if (!obj || obj.setInterval) {
      return false;
    }
    if ((0, _emberMetalUtils.isArray)(obj)) {
      return true;
    }
    if (_emberRuntimeMixinsArray["default"].detect(obj)) {
      return true;
    }

    var type = typeOf(obj);
    if ('array' === type) {
      return true;
    }
    if (obj.length !== undefined && 'object' === type) {
      return true;
    }
    return false;
  }

  /**
    Returns a consistent type for the passed item.
  
    Use this instead of the built-in `typeof` to get the type of an item.
    It will return the same result across all browsers and includes a bit
    more detail. Here is what will be returned:
  
        | Return Value  | Meaning                                              |
        |---------------|------------------------------------------------------|
        | 'string'      | String primitive or String object.                   |
        | 'number'      | Number primitive or Number object.                   |
        | 'boolean'     | Boolean primitive or Boolean object.                 |
        | 'null'        | Null value                                           |
        | 'undefined'   | Undefined value                                      |
        | 'function'    | A function                                           |
        | 'array'       | An instance of Array                                 |
        | 'regexp'      | An instance of RegExp                                |
        | 'date'        | An instance of Date                                  |
        | 'class'       | An Ember class (created using Ember.Object.extend()) |
        | 'instance'    | An Ember object instance                             |
        | 'error'       | An instance of the Error object                      |
        | 'object'      | A JavaScript object not inheriting from Ember.Object |
  
    Examples:
  
    ```javascript
    Ember.typeOf();                       // 'undefined'
    Ember.typeOf(null);                   // 'null'
    Ember.typeOf(undefined);              // 'undefined'
    Ember.typeOf('michael');              // 'string'
    Ember.typeOf(new String('michael'));  // 'string'
    Ember.typeOf(101);                    // 'number'
    Ember.typeOf(new Number(101));        // 'number'
    Ember.typeOf(true);                   // 'boolean'
    Ember.typeOf(new Boolean(true));      // 'boolean'
    Ember.typeOf(Ember.makeArray);        // 'function'
    Ember.typeOf([1, 2, 90]);             // 'array'
    Ember.typeOf(/abc/);                  // 'regexp'
    Ember.typeOf(new Date());             // 'date'
    Ember.typeOf(Ember.Object.extend());  // 'class'
    Ember.typeOf(Ember.Object.create());  // 'instance'
    Ember.typeOf(new Error('teamocil'));  // 'error'
  
    // 'normal' JavaScript object
    Ember.typeOf({ a: 'b' });             // 'object'
    ```
  
    @method typeOf
    @for Ember
    @param {Object} item the item to check
    @return {String} the type
    @public
  */

  function typeOf(item) {
    if (item === null) {
      return 'null';
    }
    if (item === undefined) {
      return 'undefined';
    }
    var ret = TYPE_MAP[toString.call(item)] || 'object';

    if (ret === 'function') {
      if (_emberRuntimeSystemObject["default"].detect(item)) {
        ret = 'class';
      }
    } else if (ret === 'object') {
      if (item instanceof Error) {
        ret = 'error';
      } else if (item instanceof _emberRuntimeSystemObject["default"]) {
        ret = 'instance';
      } else if (item instanceof Date) {
        ret = 'date';
      }
    }

    return ret;
  }
});
enifed("ember-template-compiler", ["exports", "ember-metal/core", "ember-template-compiler/system/precompile", "ember-template-compiler/system/compile", "ember-template-compiler/system/template", "ember-template-compiler/plugins", "ember-template-compiler/plugins/transform-each-in-to-block-params", "ember-template-compiler/plugins/transform-with-as-to-hash", "ember-template-compiler/plugins/transform-bind-attr-to-attributes", "ember-template-compiler/plugins/transform-each-into-collection", "ember-template-compiler/plugins/transform-single-arg-each", "ember-template-compiler/plugins/transform-old-binding-syntax", "ember-template-compiler/plugins/transform-old-class-binding-syntax", "ember-template-compiler/plugins/transform-item-class", "ember-template-compiler/plugins/transform-component-attrs-into-mut", "ember-template-compiler/plugins/transform-component-curly-to-readonly", "ember-template-compiler/plugins/transform-angle-bracket-components", "ember-template-compiler/plugins/transform-input-on-to-onEvent", "ember-template-compiler/plugins/deprecate-view-and-controller-paths", "ember-template-compiler/plugins/deprecate-view-helper", "ember-template-compiler/compat"], function (exports, _emberMetalCore, _emberTemplateCompilerSystemPrecompile, _emberTemplateCompilerSystemCompile, _emberTemplateCompilerSystemTemplate, _emberTemplateCompilerPlugins, _emberTemplateCompilerPluginsTransformEachInToBlockParams, _emberTemplateCompilerPluginsTransformWithAsToHash, _emberTemplateCompilerPluginsTransformBindAttrToAttributes, _emberTemplateCompilerPluginsTransformEachIntoCollection, _emberTemplateCompilerPluginsTransformSingleArgEach, _emberTemplateCompilerPluginsTransformOldBindingSyntax, _emberTemplateCompilerPluginsTransformOldClassBindingSyntax, _emberTemplateCompilerPluginsTransformItemClass, _emberTemplateCompilerPluginsTransformComponentAttrsIntoMut, _emberTemplateCompilerPluginsTransformComponentCurlyToReadonly, _emberTemplateCompilerPluginsTransformAngleBracketComponents, _emberTemplateCompilerPluginsTransformInputOnToOnEvent, _emberTemplateCompilerPluginsDeprecateViewAndControllerPaths, _emberTemplateCompilerPluginsDeprecateViewHelper, _emberTemplateCompilerCompat) {

  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformWithAsToHash["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformEachInToBlockParams["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformBindAttrToAttributes["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformSingleArgEach["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformEachIntoCollection["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformOldBindingSyntax["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformOldClassBindingSyntax["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformItemClass["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformComponentAttrsIntoMut["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformComponentCurlyToReadonly["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformAngleBracketComponents["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsTransformInputOnToOnEvent["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsDeprecateViewAndControllerPaths["default"]);
  (0, _emberTemplateCompilerPlugins.registerPlugin)("ast", _emberTemplateCompilerPluginsDeprecateViewHelper["default"]);

  exports._Ember = _emberMetalCore["default"];
  exports.precompile = _emberTemplateCompilerSystemPrecompile["default"];
  exports.compile = _emberTemplateCompilerSystemCompile["default"];
  exports.template = _emberTemplateCompilerSystemTemplate["default"];
  exports.registerPlugin = _emberTemplateCompilerPlugins.registerPlugin;
});

// used for adding Ember.Handlebars.compile for backwards compat
enifed("ember-template-compiler/compat", ["exports", "ember-metal/core", "ember-template-compiler/compat/precompile", "ember-template-compiler/system/compile", "ember-template-compiler/system/template"], function (exports, _emberMetalCore, _emberTemplateCompilerCompatPrecompile, _emberTemplateCompilerSystemCompile, _emberTemplateCompilerSystemTemplate) {

  var EmberHandlebars = _emberMetalCore["default"].Handlebars = _emberMetalCore["default"].Handlebars || {};

  EmberHandlebars.precompile = _emberTemplateCompilerCompatPrecompile["default"];
  EmberHandlebars.compile = _emberTemplateCompilerSystemCompile["default"];
  EmberHandlebars.template = _emberTemplateCompilerSystemTemplate["default"];
});
enifed('ember-template-compiler/compat/precompile', ['exports', 'ember-template-compiler/system/compile_options'], function (exports, _emberTemplateCompilerSystemCompile_options) {

  var compile, compileSpec;

  exports["default"] = function (string) {
    if ((!compile || !compileSpec) && Ember.__loader.registry['htmlbars-compiler/compiler']) {
      var Compiler = requireModule('htmlbars-compiler/compiler');

      compile = Compiler.compile;
      compileSpec = Compiler.compileSpec;
    }

    if (!compile || !compileSpec) {
      throw new Error('Cannot call `precompile` without the template compiler loaded. Please load `ember-template-compiler.js` prior to calling `precompile`.');
    }

    var asObject = arguments[1] === undefined ? true : arguments[1];
    var compileFunc = asObject ? compile : compileSpec;

    return compileFunc(string, (0, _emberTemplateCompilerSystemCompile_options["default"])());
  };
});
/**
@module ember
@submodule ember-template-compiler
*/
enifed('ember-template-compiler/plugins', ['exports'], function (exports) {
  exports.registerPlugin = registerPlugin;
  /**
  @module ember
  @submodule ember-template-compiler
  */

  /**
   @private
   @property helpers
  */
  var plugins = {
    ast: []
  };

  /**
    Adds an AST plugin to be used by Ember.HTMLBars.compile.
  
    @private
    @method registerASTPlugin
  */

  function registerPlugin(type, Plugin) {
    if (!plugins[type]) {
      throw new Error('Attempting to register "' + Plugin + '" as "' + type + '" which is not a valid HTMLBars plugin type.');
    }

    plugins[type].push(Plugin);
  }

  exports["default"] = plugins;
});
enifed("ember-template-compiler/plugins/deprecate-view-and-controller-paths", ["exports", "ember-metal/core", "ember-template-compiler/system/calculate-location-display"], function (exports, _emberMetalCore, _emberTemplateCompilerSystemCalculateLocationDisplay) {

  function DeprecateViewAndControllerPaths(options) {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
    this.options = options || {};
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  DeprecateViewAndControllerPaths.prototype.transform = function DeprecateViewAndControllerPaths_transform(ast) {
    var walker = new this.syntax.Walker();
    var moduleName = this.options && this.options.moduleName;

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      deprecatePath(moduleName, node, node.path);
      deprecatePaths(moduleName, node, node.params);
      deprecateHash(moduleName, node, node.hash);
    });

    return ast;
  };

  function deprecateHash(moduleName, node, hash) {
    if (!hash || !hash.pairs) {
      return;
    }
    var i, l, pair, paths;
    for (i = 0, l = hash.pairs.length; i < l; i++) {
      pair = hash.pairs[i];
      paths = pair.value.params;
      deprecatePaths(moduleName, pair, paths);
    }
  }

  function deprecatePaths(moduleName, node, paths) {
    if (!paths) {
      return;
    }
    var i, l, path;
    for (i = 0, l = paths.length; i < l; i++) {
      path = paths[i];
      deprecatePath(moduleName, node, path);
    }
  }

  function deprecatePath(moduleName, node, path) {
    _emberMetalCore["default"].deprecate("Using `{{" + (path && path.type === "PathExpression" && path.parts[0]) + "}}` or any path based on it " + (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, node.loc) + "has been deprecated.", function deprecatePath_test() {
      var noDeprecate = true;

      var viewKeyword = path && path.type === "PathExpression" && path.parts && path.parts[0];
      if (viewKeyword === "view") {
        noDeprecate = _emberMetalCore["default"].ENV._ENABLE_LEGACY_VIEW_SUPPORT;
      } else if (viewKeyword === "controller") {
        noDeprecate = false;
      }

      return noDeprecate;
    }, { url: "http://emberjs.com/deprecations/v1.x#toc_view-and-controller-template-keywords", id: path.parts && path.parts[0] === "view" ? "view.keyword.view" : "view.keyword.controller" });
  }

  function validate(node) {
    return node.type === "MustacheStatement" || node.type === "BlockStatement";
  }

  exports["default"] = DeprecateViewAndControllerPaths;
});
enifed("ember-template-compiler/plugins/deprecate-view-helper", ["exports", "ember-metal/core", "ember-template-compiler/system/calculate-location-display"], function (exports, _emberMetalCore, _emberTemplateCompilerSystemCalculateLocationDisplay) {

  function DeprecateViewHelper(options) {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
    this.options = options || {};
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  DeprecateViewHelper.prototype.transform = function DeprecateViewHelper_transform(ast) {
    if (!!_emberMetalCore["default"].ENV._ENABLE_LEGACY_VIEW_SUPPORT) {
      return ast;
    }
    var walker = new this.syntax.Walker();
    var moduleName = this.options && this.options.moduleName;

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      deprecateHelper(moduleName, node);
    });

    return ast;
  };

  function deprecateHelper(moduleName, node) {
    var paramValue = node.params.length && node.params[0].value;

    if (!paramValue) {
      return;
    } else if (paramValue === "select") {
      deprecateSelect(moduleName, node);
    } else {
      _emberMetalCore["default"].deprecate("Using the `{{view \"string\"}}` helper is deprecated. " + (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, node.loc), false, { url: "http://emberjs.com/deprecations/v1.x#toc_ember-view", id: "view.helper" });
    }
  }

  function deprecateSelect(moduleName, node) {
    _emberMetalCore["default"].deprecate("Using `{{view \"select\"}}` is deprecated. " + (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, node.loc), false, { url: "http://emberjs.com/deprecations/v1.x#toc_ember-select", id: "view.helper.select" });
  }

  function validate(node) {
    return (node.type === "MustacheStatement" || node.type === "BlockStatement") && node.path.parts[0] === "view";
  }

  exports["default"] = DeprecateViewHelper;
});
enifed('ember-template-compiler/plugins/transform-angle-bracket-components', ['exports'], function (exports) {
  function TransformAngleBracketComponents() {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  TransformAngleBracketComponents.prototype.transform = function TransformBindAttrToAttributes_transform(ast) {
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      node.tag = '<' + node.tag + '>';
    });

    return ast;
  };

  function validate(node) {
    return node.type === 'ComponentNode';
  }

  exports["default"] = TransformAngleBracketComponents;
});
enifed("ember-template-compiler/plugins/transform-bind-attr-to-attributes", ["exports", "ember-metal/core", "ember-template-compiler/system/string", "ember-template-compiler/system/calculate-location-display"], function (exports, _emberMetalCore, _emberTemplateCompilerSystemString, _emberTemplateCompilerSystemCalculateLocationDisplay) {

  /**
    An HTMLBars AST transformation that replaces all instances of
    {{bind-attr}} helpers with the equivalent HTMLBars-style bound
    attributes. For example
  
    ```handlebars
    <div {{bind-attr class=":foo some.path:bar"}}></div>
    ```
  
    becomes
  
    ```handlebars
    <div class="foo {{if some.path "bar" ""}}></div>
    ```
  
    @class TransformBindAttrToAttributes
    @private
  */
  function TransformBindAttrToAttributes(options) {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
    this.options = options || {};
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  TransformBindAttrToAttributes.prototype.transform = function TransformBindAttrToAttributes_transform(ast) {
    var plugin = this;
    var moduleName = this.options.moduleName;
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      if (node.type === "ElementNode") {
        for (var i = 0; i < node.modifiers.length; i++) {
          var modifier = node.modifiers[i];

          if (isBindAttrModifier(modifier, moduleName)) {
            node.modifiers.splice(i--, 1);
            plugin.assignAttrs(node, modifier.hash);
          }
        }
      }
    });

    return ast;
  };

  TransformBindAttrToAttributes.prototype.assignAttrs = function assignAttrs(element, hash) {
    var pairs = hash.pairs;

    for (var i = 0; i < pairs.length; i++) {
      var name = pairs[i].key;
      var value = pairs[i].value;

      assertAttrNameIsUnused(element, name);

      var attr = this.syntax.builders.attr(name, this.transformValue(name, value));
      element.attributes.push(attr);
    }
  };

  TransformBindAttrToAttributes.prototype.transformValue = function transformValue(name, value) {
    var b = this.syntax.builders;

    if (name === "class") {
      switch (value.type) {
        case "StringLiteral":
          return this.parseClasses(value.value);
        case "PathExpression":
          return this.parseClasses(value.original);
        case "SubExpression":
          return b.mustache(value.path, value.params, value.hash);
        default:
          _emberMetalCore["default"].assert("Unsupported attribute value type: " + value.type);
      }
    } else {
      switch (value.type) {
        case "StringLiteral":
          return b.mustache(b.path(value.value));
        case "PathExpression":
          return b.mustache(value);
        case "SubExpression":
          return b.mustache(value.path, value.params, value.hash);
        default:
          _emberMetalCore["default"].assert("Unsupported attribute value type: " + value.type);
      }
    }
  };

  TransformBindAttrToAttributes.prototype.parseClasses = function parseClasses(value) {
    var b = this.syntax.builders;

    var concat = b.concat();
    var classes = value.split(" ");

    for (var i = 0; i < classes.length; i++) {
      if (i > 0) {
        concat.parts.push(b.string(" "));
      }

      var concatPart = this.parseClass(classes[i]);
      concat.parts.push(concatPart);
    }

    return concat;
  };

  TransformBindAttrToAttributes.prototype.parseClass = function parseClass(value) {
    var b = this.syntax.builders;

    var parts = value.split(":");

    switch (parts.length) {
      case 1:
        // Before: {{bind-attr class="view.fooBar ..."}}
        // After: class="{{-bind-attr-class view.fooBar "foo-bar"}} ..."
        return b.sexpr(b.path("-bind-attr-class"), [b.path(parts[0]), b.string(dasherizeLastKey(parts[0]))]);
      case 2:
        if (parts[0] === "") {
          // Before: {{bind-attr class=":foo ..."}}
          // After: class="foo ..."
          return b.string(parts[1]);
        } else {
          // Before: {{bind-attr class="some.path:foo ..."}}
          // After: class="{{if some.path "foo" ""}} ..."
          return b.sexpr(b.path("if"), [b.path(parts[0]), b.string(parts[1]), b.string("")]);
        }
        break;
      case 3:
        // Before: {{bind-attr class="some.path:foo:bar ..."}}
        // After: class="{{if some.path "foo" "bar"}} ..."
        return b.sexpr(b.path("if"), [b.path(parts[0]), b.string(parts[1]), b.string(parts[2])]);
      default:
        _emberMetalCore["default"].assert("Unsupported bind-attr class syntax: `" + value + "`");
    }
  };

  function isBindAttrModifier(modifier, moduleName) {
    var name = modifier.path.original;

    var moduleInfo = (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, modifier.path.loc);

    if (name === "bind-attr" || name === "bindAttr") {
      _emberMetalCore["default"].deprecate("The `" + name + "` helper " + moduleInfo + "is deprecated in favor of " + "HTMLBars-style bound attributes.");
      return true;
    } else {
      return false;
    }
  }

  function assertAttrNameIsUnused(element, name) {
    for (var i = 0; i < element.attributes.length; i++) {
      var attr = element.attributes[i];

      if (attr.name === name) {
        if (name === "class") {
          _emberMetalCore["default"].assert("You cannot set `class` manually and via `{{bind-attr}}` helper " + "on the same element. Please use `{{bind-attr}}`'s `:static-class` " + "syntax instead.");
        } else {
          _emberMetalCore["default"].assert("You cannot set `" + name + "` manually and via `{{bind-attr}}` " + "helper on the same element.");
        }
      }
    }
  }

  function dasherizeLastKey(path) {
    var parts = path.split(".");
    return (0, _emberTemplateCompilerSystemString.dasherize)(parts[parts.length - 1]);
  }

  exports["default"] = TransformBindAttrToAttributes;
});
/**
@module ember
@submodule ember-htmlbars
*/

// Ember.assert
enifed('ember-template-compiler/plugins/transform-component-attrs-into-mut', ['exports'], function (exports) {
  function TransformComponentAttrsIntoMut() {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  TransformComponentAttrsIntoMut.prototype.transform = function TransformBindAttrToAttributes_transform(ast) {
    var b = this.syntax.builders;
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      each(node.hash.pairs, function (pair) {
        var value = pair.value;

        if (value.type === 'PathExpression') {
          pair.value = b.sexpr(b.path('@mut'), [pair.value]);
        }
      });
    });

    return ast;
  };

  function validate(node) {
    return node.type === 'BlockStatement' || node.type === 'MustacheStatement';
  }

  function each(list, callback) {
    for (var i = 0, l = list.length; i < l; i++) {
      callback(list[i]);
    }
  }

  exports["default"] = TransformComponentAttrsIntoMut;
});
enifed('ember-template-compiler/plugins/transform-component-curly-to-readonly', ['exports'], function (exports) {
  function TransformComponentCurlyToReadonly() {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  TransformComponentCurlyToReadonly.prototype.transform = function TransformComponetnCurlyToReadonly_transform(ast) {
    var b = this.syntax.builders;
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      each(node.attributes, function (attr) {
        if (attr.value.type !== 'MustacheStatement') {
          return;
        }
        if (attr.value.params.length || attr.value.hash.pairs.length) {
          return;
        }

        attr.value = b.mustache(b.path('readonly'), [attr.value.path], null, !attr.value.escape);
      });
    });

    return ast;
  };

  function validate(node) {
    return node.type === 'ComponentNode';
  }

  function each(list, callback) {
    for (var i = 0, l = list.length; i < l; i++) {
      callback(list[i]);
    }
  }

  exports["default"] = TransformComponentCurlyToReadonly;
});
enifed("ember-template-compiler/plugins/transform-each-in-to-block-params", ["exports", "ember-metal/core", "ember-template-compiler/system/calculate-location-display"], function (exports, _emberMetalCore, _emberTemplateCompilerSystemCalculateLocationDisplay) {
  /**
  @module ember
  @submodule ember-htmlbars
  */

  /**
    An HTMLBars AST transformation that replaces all instances of
  
    ```handlebars
    {{#each item in items}}
    {{/each}}
    ```
  
    with
  
    ```handlebars
    {{#each items as |item|}}
    {{/each}}
    ```
  
    @class TransformEachInToBlockParams
    @private
  */
  function TransformEachInToBlockParams(options) {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
    this.options = options;
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  TransformEachInToBlockParams.prototype.transform = function TransformEachInToBlockParams_transform(ast) {
    var b = this.syntax.builders;
    var walker = new this.syntax.Walker();
    var moduleName = this.options.moduleName;

    walker.visit(ast, function (node) {
      if (validate(node)) {

        var removedParams = node.params.splice(0, 2);
        var keyword = removedParams[0].original;
        var moduleInfo = undefined;

        if (node.type === "BlockStatement") {
          moduleInfo = (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, node.program.loc);

          if (node.program.blockParams.length) {
            throw new Error("You cannot use keyword (`{{#each foo in bar}}`) and block params (`{{#each bar as |foo|}}`) at the same time " + moduleInfo + ".");
          }

          node.program.blockParams = [keyword];
        } else {
          moduleInfo = (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, node.loc);

          node.hash.pairs.push(b.pair("keyword", b.string(keyword)));
        }

        _emberMetalCore["default"].deprecate("Using the '{{#each item in model}}' form of the {{#each}} helper " + moduleInfo + "is deprecated. " + "Please use the block param form instead ('{{#each model as |item|}}').", false, { url: "http://emberjs.com/guides/deprecations/#toc_code-in-code-syntax-for-code-each-code" });
      }
    });

    return ast;
  };

  function validate(node) {
    return (node.type === "BlockStatement" || node.type === "MustacheStatement") && node.path.original === "each" && node.params.length === 3 && node.params[1].type === "PathExpression" && node.params[1].original === "in";
  }

  exports["default"] = TransformEachInToBlockParams;
});
enifed('ember-template-compiler/plugins/transform-each-in-to-hash', ['exports'], function (exports) {
  /**
  @module ember
  @submodule ember-htmlbars
  */

  /**
    An HTMLBars AST transformation that replaces all instances of
  
    ```handlebars
    {{#each item in items}}
    {{/each}}
    ```
  
    with
  
    ```handlebars
    {{#each items keyword="item"}}
    {{/each}}
    ```
  
    @class TransformEachInToHash
    @private
  */
  function TransformEachInToHash(options) {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
    this.options = options || {};
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  TransformEachInToHash.prototype.transform = function TransformEachInToHash_transform(ast) {
    var pluginContext = this;
    var walker = new pluginContext.syntax.Walker();
    var b = pluginContext.syntax.builders;

    walker.visit(ast, function (node) {
      if (pluginContext.validate(node)) {

        if (node.program && node.program.blockParams.length) {
          throw new Error('You cannot use keyword (`{{each foo in bar}}`) and block params (`{{each bar as |foo|}}`) at the same time.');
        }

        var removedParams = node.sexpr.params.splice(0, 2);
        var keyword = removedParams[0].original;

        // TODO: This may not be necessary.
        if (!node.sexpr.hash) {
          node.sexpr.hash = b.hash();
        }

        node.sexpr.hash.pairs.push(b.pair('keyword', b.string(keyword)));
      }
    });

    return ast;
  };

  TransformEachInToHash.prototype.validate = function TransformEachInToHash_validate(node) {
    return (node.type === 'BlockStatement' || node.type === 'MustacheStatement') && node.sexpr.path.original === 'each' && node.sexpr.params.length === 3 && node.sexpr.params[1].type === 'PathExpression' && node.sexpr.params[1].original === 'in';
  };

  exports["default"] = TransformEachInToHash;
});
enifed('ember-template-compiler/plugins/transform-each-into-collection', ['exports', 'ember-metal/core', 'ember-template-compiler/system/calculate-location-display'], function (exports, _emberMetalCore, _emberTemplateCompilerSystemCalculateLocationDisplay) {
  exports["default"] = TransformEachIntoCollection;

  function TransformEachIntoCollection(options) {
    this.options = options;
    this.syntax = null;
  }

  TransformEachIntoCollection.prototype.transform = function TransformEachIntoCollection_transform(ast) {
    var moduleName = this.options.moduleName;
    var b = this.syntax.builders;
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      var legacyHashKey = validate(node);
      if (!legacyHashKey) {
        return;
      }

      var moduleInfo = (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, legacyHashKey.loc);

      _emberMetalCore["default"].deprecate('Using \'' + legacyHashKey.key + '\' with \'{{each}}\' ' + moduleInfo + 'is deprecated.  Please refactor to a component.');

      var list = node.params.shift();
      node.path = b.path('collection');

      node.params.unshift(b.string('-legacy-each'));

      var pair = b.pair('content', list);
      pair.loc = list.loc;

      node.hash.pairs.push(pair);

      //pair = b.pair('dataSource', list);
      //node.hash.pairs.push(pair);
    });

    return ast;
  };

  function validate(node) {
    if ((node.type === 'BlockStatement' || node.type === 'MustacheStatement') && node.path.original === 'each') {

      return any(node.hash.pairs, function (pair) {
        var key = pair.key;
        return key === 'itemController' || key === 'itemView' || key === 'itemViewClass' || key === 'tagName' || key === 'emptyView' || key === 'emptyViewClass';
      });
    }

    return false;
  }

  function any(list, predicate) {
    for (var i = 0, l = list.length; i < l; i++) {
      if (predicate(list[i])) {
        return list[i];
      }
    }

    return false;
  }
});
enifed("ember-template-compiler/plugins/transform-input-on-to-onEvent", ["exports", "ember-metal/core", "ember-template-compiler/system/calculate-location-display"], function (exports, _emberMetalCore, _emberTemplateCompilerSystemCalculateLocationDisplay) {

  /**
   @module ember
   @submodule ember-htmlbars
  */

  /**
    An HTMLBars AST transformation that replaces all instances of
  
    ```handlebars
   {{input on="enter" action="doStuff"}}
   {{input on="key-press" action="doStuff"}}
    ```
  
    with
  
    ```handlebars
   {{input enter="doStuff"}}
   {{input key-press="doStuff"}}
    ```
  
    @private
    @class TransformInputOnToOnEvent
  */
  function TransformInputOnToOnEvent(options) {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
    this.options = options || {};
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  TransformInputOnToOnEvent.prototype.transform = function TransformInputOnToOnEvent_transform(ast) {
    var pluginContext = this;
    var b = pluginContext.syntax.builders;
    var walker = new pluginContext.syntax.Walker();
    var moduleName = pluginContext.options.moduleName;

    walker.visit(ast, function (node) {
      if (pluginContext.validate(node)) {
        var action = hashPairForKey(node.hash, "action");
        var on = hashPairForKey(node.hash, "on");
        var onEvent = hashPairForKey(node.hash, "onEvent");
        var normalizedOn = on || onEvent;
        var moduleInfo = (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, node.loc);

        if (normalizedOn && normalizedOn.value.type !== "StringLiteral") {
          _emberMetalCore["default"].deprecate("Using a dynamic value for '#{normalizedOn.key}=' with the '{{input}}' helper " + moduleInfo + "is deprecated.");

          normalizedOn.key = "onEvent";
          return; // exit early, as we cannot transform further
        }

        removeFromHash(node.hash, normalizedOn);
        removeFromHash(node.hash, action);

        if (!action) {
          _emberMetalCore["default"].deprecate("Using '{{input " + normalizedOn.key + "=\"" + normalizedOn.value.value + "\" ...}}' without specifying an action " + moduleInfo + "will do nothing.");

          return; // exit early, if no action was available there is nothing to do
        }

        var specifiedOn = normalizedOn ? "" + normalizedOn.key + "=\"" + normalizedOn.value.value + "\" " : "";
        if (normalizedOn && normalizedOn.value.value === "keyPress") {
          // using `keyPress` in the root of the component will
          // clobber the keyPress event handler
          normalizedOn.value.value = "key-press";
        }

        var expected = "" + (normalizedOn ? normalizedOn.value.value : "enter") + "=\"" + action.value.original + "\"";

        _emberMetalCore["default"].deprecate("Using '{{input " + specifiedOn + "action=\"" + action.value.original + "\"}}' " + moduleInfo + "is deprecated. Please use '{{input " + expected + "}}' instead.");
        if (!normalizedOn) {
          normalizedOn = b.pair("onEvent", b.string("enter"));
        }

        node.hash.pairs.push(b.pair(normalizedOn.value.value, action.value));
      }
    });

    return ast;
  };

  TransformInputOnToOnEvent.prototype.validate = function TransformWithAsToHash_validate(node) {
    return node.type === "MustacheStatement" && node.path.original === "input" && (hashPairForKey(node.hash, "action") || hashPairForKey(node.hash, "on") || hashPairForKey(node.hash, "onEvent"));
  };

  function hashPairForKey(hash, key) {
    for (var i = 0, l = hash.pairs.length; i < l; i++) {
      var pair = hash.pairs[i];
      if (pair.key === key) {
        return pair;
      }
    }

    return false;
  }

  function removeFromHash(hash, pairToRemove) {
    var newPairs = [];
    for (var i = 0, l = hash.pairs.length; i < l; i++) {
      var pair = hash.pairs[i];

      if (pair !== pairToRemove) {
        newPairs.push(pair);
      }
    }

    hash.pairs = newPairs;
  }

  exports["default"] = TransformInputOnToOnEvent;
});
enifed('ember-template-compiler/plugins/transform-item-class', ['exports'], function (exports) {
  exports["default"] = TransformItemClass;

  function TransformItemClass() {
    this.syntax = null;
  }

  TransformItemClass.prototype.transform = function TransformItemClass_transform(ast) {
    var b = this.syntax.builders;
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      each(node.hash.pairs, function (pair) {
        var key = pair.key;
        var value = pair.value;

        if (key !== 'itemClass') {
          return;
        }
        if (value.type === 'StringLiteral') {
          return;
        }

        var propName = value.original;
        var params = [value];
        var sexprParams = [b.string(propName), b.path(propName)];

        params.push(b.sexpr(b.string('-normalize-class'), sexprParams));
        var sexpr = b.sexpr(b.string('if'), params);

        pair.value = sexpr;
      });
    });

    return ast;
  };

  function validate(node) {
    return (node.type === 'BlockStatement' || node.type === 'MustacheStatement') && node.path.original === 'collection';
  }

  function each(list, callback) {
    for (var i = 0, l = list.length; i < l; i++) {
      callback(list[i]);
    }
  }
});
enifed('ember-template-compiler/plugins/transform-old-binding-syntax', ['exports', 'ember-metal/core', 'ember-template-compiler/system/calculate-location-display'], function (exports, _emberMetalCore, _emberTemplateCompilerSystemCalculateLocationDisplay) {
  exports["default"] = TransformOldBindingSyntax;

  function TransformOldBindingSyntax(options) {
    this.syntax = null;
    this.options = options;
  }

  TransformOldBindingSyntax.prototype.transform = function TransformOldBindingSyntax_transform(ast) {
    var moduleName = this.options.moduleName;
    var b = this.syntax.builders;
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      each(node.hash.pairs, function (pair) {
        var key = pair.key;
        var value = pair.value;

        var sourceInformation = (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, pair.loc);

        if (key === 'classBinding') {
          return;
        }

        _emberMetalCore["default"].assert('Setting \'attributeBindings\' via template helpers is not allowed ' + sourceInformation, key !== 'attributeBindings');

        if (key.substr(-7) === 'Binding') {
          var newKey = key.slice(0, -7);

          _emberMetalCore["default"].deprecate('You\'re using legacy binding syntax: ' + key + '=' + exprToString(value) + ' ' + sourceInformation + '. Please replace with ' + newKey + '=' + value.original);

          pair.key = newKey;
          if (value.type === 'StringLiteral') {
            pair.value = b.path(value.original);
          }
        }
      });
    });

    return ast;
  };

  function validate(node) {
    return node.type === 'BlockStatement' || node.type === 'MustacheStatement';
  }

  function each(list, callback) {
    for (var i = 0, l = list.length; i < l; i++) {
      callback(list[i]);
    }
  }

  function exprToString(expr) {
    switch (expr.type) {
      case 'StringLiteral':
        return '"' + expr.original + '"';
      case 'PathExpression':
        return expr.original;
    }
  }
});
enifed('ember-template-compiler/plugins/transform-old-class-binding-syntax', ['exports'], function (exports) {
  exports["default"] = TransformOldClassBindingSyntax;

  function TransformOldClassBindingSyntax(options) {
    this.syntax = null;
    this.options = options;
  }

  TransformOldClassBindingSyntax.prototype.transform = function TransformOldClassBindingSyntax_transform(ast) {
    var b = this.syntax.builders;
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      var allOfTheMicrosyntaxes = [];
      var allOfTheMicrosyntaxIndexes = [];
      var classPair = undefined;

      each(node.hash.pairs, function (pair, index) {
        var key = pair.key;

        if (key === 'classBinding' || key === 'classNameBindings') {
          allOfTheMicrosyntaxIndexes.push(index);
          allOfTheMicrosyntaxes.push(pair);
        } else if (key === 'class') {
          classPair = pair;
        }
      });

      if (allOfTheMicrosyntaxes.length === 0) {
        return;
      }

      var classValue = [];

      if (classPair) {
        classValue.push(classPair.value);
        classValue.push(b.string(' '));
      } else {
        classPair = b.pair('class', null);
        node.hash.pairs.push(classPair);
      }

      each(allOfTheMicrosyntaxIndexes, function (index) {
        node.hash.pairs.splice(index, 1);
      });

      each(allOfTheMicrosyntaxes, function (_ref) {
        var value = _ref.value;
        var loc = _ref.loc;

        var sexprs = [];
        // TODO: add helpful deprecation when both `classNames` and `classNameBindings` can
        // be removed.

        if (value.type === 'StringLiteral') {
          var microsyntax = parseMicrosyntax(value.original);

          buildSexprs(microsyntax, sexprs, b);

          classValue.push.apply(classValue, sexprs);
        }
      });

      var hash = b.hash();
      classPair.value = b.sexpr(b.string('concat'), classValue, hash);
    });

    return ast;
  };

  function buildSexprs(microsyntax, sexprs, b) {
    for (var i = 0, l = microsyntax.length; i < l; i++) {
      var _microsyntax$i = microsyntax[i];
      var propName = _microsyntax$i[0];
      var activeClass = _microsyntax$i[1];
      var inactiveClass = _microsyntax$i[2];

      var sexpr = undefined;

      // :my-class-name microsyntax for static values
      if (propName === '') {
        sexpr = b.string(activeClass);
      } else {
        var params = [b.path(propName)];

        if (activeClass) {
          params.push(b.string(activeClass));
        } else {
          var sexprParams = [b.string(propName), b.path(propName)];

          var hash = b.hash();
          if (activeClass !== undefined) {
            hash.pairs.push(b.pair('activeClass', b.string(activeClass)));
          }

          if (inactiveClass !== undefined) {
            hash.pairs.push(b.pair('inactiveClass', b.string(inactiveClass)));
          }

          params.push(b.sexpr(b.string('-normalize-class'), sexprParams, hash));
        }

        if (inactiveClass) {
          params.push(b.string(inactiveClass));
        }

        sexpr = b.sexpr(b.string('if'), params);
      }

      sexprs.push(sexpr);
      sexprs.push(b.string(' '));
    }
  }

  function validate(node) {
    return node.type === 'BlockStatement' || node.type === 'MustacheStatement';
  }

  function each(list, callback) {
    for (var i = 0, l = list.length; i < l; i++) {
      callback(list[i], i);
    }
  }

  function parseMicrosyntax(string) {
    var segments = string.split(' ');

    for (var i = 0, l = segments.length; i < l; i++) {
      segments[i] = segments[i].split(':');
    }

    return segments;
  }
});
enifed('ember-template-compiler/plugins/transform-single-arg-each', ['exports'], function (exports) {
  exports["default"] = TransformSingleArgEach;

  function TransformSingleArgEach() {
    this.syntax = null;
  }

  TransformSingleArgEach.prototype.transform = function TransformSingleArgEach_transform(ast) {
    var b = this.syntax.builders;
    var walker = new this.syntax.Walker();

    walker.visit(ast, function (node) {
      if (!validate(node)) {
        return;
      }

      node.params.push(b.path('this'));
    });

    return ast;
  };

  function validate(node) {
    return (node.type === 'BlockStatement' || node.type === 'MustacheStatement') && node.path.original === 'each' && node.params.length === 0;
  }
});
enifed("ember-template-compiler/plugins/transform-with-as-to-hash", ["exports", "ember-template-compiler/system/calculate-location-display"], function (exports, _emberTemplateCompilerSystemCalculateLocationDisplay) {

  /**
    An HTMLBars AST transformation that replaces all instances of
  
    ```handlebars
    {{#with foo.bar as bar}}
    {{/with}}
    ```
  
    with
  
    ```handlebars
    {{#with foo.bar as |bar|}}
    {{/with}}
    ```
  
    @private
    @class TransformWithAsToHash
  */
  function TransformWithAsToHash(options) {
    // set later within HTMLBars to the syntax package
    this.syntax = null;
    this.options = options || {};
  }

  /**
    @private
    @method transform
    @param {AST} ast The AST to be transformed.
  */
  TransformWithAsToHash.prototype.transform = function TransformWithAsToHash_transform(ast) {
    var pluginContext = this;
    var walker = new pluginContext.syntax.Walker();
    var moduleName = this.options.moduleName;

    walker.visit(ast, function (node) {
      if (pluginContext.validate(node)) {

        if (node.program && node.program.blockParams.length) {
          throw new Error("You cannot use keyword (`{{with foo as bar}}`) and block params (`{{with foo as |bar|}}`) at the same time.");
        }

        var moduleInfo = (0, _emberTemplateCompilerSystemCalculateLocationDisplay["default"])(moduleName, node.program.loc);

        Ember.deprecate("Using {{with}} without block syntax " + moduleInfo + "is deprecated. " + "Please use standard block form (`{{#with foo as |bar|}}`) " + "instead.", false, { url: "http://emberjs.com/deprecations/v1.x/#toc_code-as-code-sytnax-for-code-with-code" });

        var removedParams = node.params.splice(1, 2);
        var keyword = removedParams[1].original;
        node.program.blockParams = [keyword];
      }
    });

    return ast;
  };

  TransformWithAsToHash.prototype.validate = function TransformWithAsToHash_validate(node) {
    return node.type === "BlockStatement" && node.path.original === "with" && node.params.length === 3 && node.params[1].type === "PathExpression" && node.params[1].original === "as";
  };

  exports["default"] = TransformWithAsToHash;
});
/**
@module ember
@submodule ember-htmlbars
*/
enifed('ember-template-compiler/system/calculate-location-display', ['exports'], function (exports) {
  exports["default"] = calculateLocationDisplay;

  function calculateLocationDisplay(moduleName, _loc) {
    var loc = _loc || {};

    var _ref = loc.start || {};

    var column = _ref.column;
    var line = _ref.line;

    var moduleInfo = '';
    if (moduleName) {
      moduleInfo += '\'' + moduleName + '\' ';
    }

    if (line !== undefined && column !== undefined) {
      if (moduleName) {
        // only prepend @ if the moduleName was present
        moduleInfo += '@ ';
      }
      moduleInfo += 'L' + line + ':C' + column;
    }

    if (moduleInfo) {
      moduleInfo = '(' + moduleInfo + ') ';
    }

    return moduleInfo;
  }
});
enifed("ember-template-compiler/system/compile", ["exports", "ember-template-compiler/system/compile_options", "ember-template-compiler/system/template"], function (exports, _emberTemplateCompilerSystemCompile_options, _emberTemplateCompilerSystemTemplate) {
  /**
  @module ember
  @submodule ember-template-compiler
  */

  var compile;

  /**
    Uses HTMLBars `compile` function to process a string into a compiled template.
  
    This is not present in production builds.
  
    @private
    @method compile
    @param {String} templateString This is the string to be compiled by HTMLBars.
    @param {Object} options This is an options hash to augment the compiler options.
  */

  exports["default"] = function (templateString, options) {
    if (!compile && Ember.__loader.registry["htmlbars-compiler/compiler"]) {
      compile = requireModule("htmlbars-compiler/compiler").compile;
    }

    if (!compile) {
      throw new Error("Cannot call `compile` without the template compiler loaded. Please load `ember-template-compiler.js` prior to calling `compile`.");
    }

    var templateSpec = compile(templateString, (0, _emberTemplateCompilerSystemCompile_options["default"])(options));

    return (0, _emberTemplateCompilerSystemTemplate["default"])(templateSpec);
  };
});
enifed("ember-template-compiler/system/compile_options", ["exports", "ember-metal/core", "ember-metal/merge", "ember-template-compiler/plugins"], function (exports, _emberMetalCore, _emberMetalMerge, _emberTemplateCompilerPlugins) {

  /**
    @private
    @property compileOptions
  */

  exports["default"] = function (_options) {
    var disableComponentGeneration = true;
    if (_emberMetalCore["default"].FEATURES.isEnabled("ember-htmlbars-component-generation")) {
      disableComponentGeneration = false;
    }

    var options = undefined;
    // When calling `Ember.Handlebars.compile()` a second argument of `true`
    // had a special meaning (long since lost), this just gaurds against
    // `options` being true, and causing an error during compilation.
    if (_options === true) {
      options = {};
    } else {
      options = (0, _emberMetalMerge.assign)({}, _options);
    }

    options.disableComponentGeneration = disableComponentGeneration;

    var plugins = {
      ast: _emberTemplateCompilerPlugins["default"].ast.slice()
    };

    if (options.plugins && options.plugins.ast) {
      plugins.ast = plugins.ast.concat(options.plugins.ast);
    }
    options.plugins = plugins;

    options.buildMeta = function buildMeta(program) {
      return {
        revision: "Ember@1.13.2",
        loc: program.loc,
        moduleName: options.moduleName
      };
    };

    return options;
  };
});
/**
@module ember
@submodule ember-template-compiler
*/
enifed('ember-template-compiler/system/precompile', ['exports', 'ember-template-compiler/system/compile_options'], function (exports, _emberTemplateCompilerSystemCompile_options) {
  var compileSpec;

  /**
    Uses HTMLBars `compile` function to process a string into a compiled template string.
    The returned string must be passed through `Ember.HTMLBars.template`.
  
    This is not present in production builds.
  
    @private
    @method precompile
    @param {String} templateString This is the string to be compiled by HTMLBars.
  */

  exports["default"] = function (templateString, options) {
    if (!compileSpec && Ember.__loader.registry['htmlbars-compiler/compiler']) {
      compileSpec = requireModule('htmlbars-compiler/compiler').compileSpec;
    }

    if (!compileSpec) {
      throw new Error('Cannot call `compileSpec` without the template compiler loaded. Please load `ember-template-compiler.js` prior to calling `compileSpec`.');
    }

    return compileSpec(templateString, (0, _emberTemplateCompilerSystemCompile_options["default"])(options));
  };
});
/**
@module ember
@submodule ember-template-compiler
*/
enifed('ember-template-compiler/system/string', ['exports'], function (exports) {
  exports.decamelize = decamelize;
  exports.dasherize = dasherize;
  /**
  @module ember
  @submodule ember-template-compiler
  */

  // This module is duplicated from ember-runtime to support bind-attr.

  var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
  var STRING_DASHERIZE_REGEXP = /[ _]/g;

  function decamelize(str) {
    return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();
  }

  function dasherize(str) {
    return decamelize(str).replace(STRING_DASHERIZE_REGEXP, '-');
  }
});
enifed("ember-template-compiler/system/template", ["exports", "htmlbars-runtime/hooks"], function (exports, _htmlbarsRuntimeHooks) {

  /**
  @module ember
  @submodule ember-template-compiler
  */

  /**
    Augments the default precompiled output of an HTMLBars template with
    additional information needed by Ember.
  
    @private
    @method template
    @param {Function} templateSpec This is the compiled HTMLBars template spec.
  */

  exports["default"] = function (templateSpec) {
    if (!templateSpec.render) {
      templateSpec = (0, _htmlbarsRuntimeHooks.wrap)(templateSpec);
    }

    templateSpec.isTop = true;
    templateSpec.isMethod = false;

    return templateSpec;
  };
});
enifed("ember-testing", ["exports", "ember-metal/core", "ember-testing/initializers", "ember-testing/support", "ember-testing/setup_for_testing", "ember-testing/test", "ember-testing/adapters/adapter", "ember-testing/adapters/qunit", "ember-testing/helpers"], function (exports, _emberMetalCore, _emberTestingInitializers, _emberTestingSupport, _emberTestingSetup_for_testing, _emberTestingTest, _emberTestingAdaptersAdapter, _emberTestingAdaptersQunit, _emberTestingHelpers) {
  // adds helpers to helpers object in Test

  /**
    @module ember
    @submodule ember-testing
  */

  _emberMetalCore["default"].Test = _emberTestingTest["default"];
  _emberMetalCore["default"].Test.Adapter = _emberTestingAdaptersAdapter["default"];
  _emberMetalCore["default"].Test.QUnitAdapter = _emberTestingAdaptersQunit["default"];
  _emberMetalCore["default"].setupForTesting = _emberTestingSetup_for_testing["default"];
});
// to setup initializer
// to handle various edge cases
enifed("ember-testing/adapters/adapter", ["exports", "ember-runtime/system/object"], function (exports, _emberRuntimeSystemObject) {

  function K() {
    return this;
  }

  /**
   @module ember
   @submodule ember-testing
  */

  /**
    The primary purpose of this class is to create hooks that can be implemented
    by an adapter for various test frameworks.
  
    @class Adapter
    @namespace Ember.Test
    @public
  */
  var Adapter = _emberRuntimeSystemObject["default"].extend({
    /**
      This callback will be called whenever an async operation is about to start.
       Override this to call your framework's methods that handle async
      operations.
       @public
      @method asyncStart
    */
    asyncStart: K,

    /**
      This callback will be called whenever an async operation has completed.
       @public
      @method asyncEnd
    */
    asyncEnd: K,

    /**
      Override this method with your testing framework's false assertion.
      This function is called whenever an exception occurs causing the testing
      promise to fail.
       QUnit example:
       ```javascript
        exception: function(error) {
          ok(false, error);
        };
      ```
       @public
      @method exception
      @param {String} error The exception to be raised.
    */
    exception: function (error) {
      throw error;
    }
  });

  exports["default"] = Adapter;
});
enifed("ember-testing/adapters/qunit", ["exports", "ember-testing/adapters/adapter", "ember-metal/utils"], function (exports, _emberTestingAdaptersAdapter, _emberMetalUtils) {

  /**
    This class implements the methods defined by Ember.Test.Adapter for the
    QUnit testing framework.
  
    @class QUnitAdapter
    @namespace Ember.Test
    @extends Ember.Test.Adapter
    @public
  */
  exports["default"] = _emberTestingAdaptersAdapter["default"].extend({
    asyncStart: function () {
      QUnit.stop();
    },
    asyncEnd: function () {
      QUnit.start();
    },
    exception: function (error) {
      ok(false, (0, _emberMetalUtils.inspect)(error));
    }
  });
});
enifed("ember-testing/helpers", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/error", "ember-metal/run_loop", "ember-views/system/jquery", "ember-testing/test", "ember-runtime/ext/rsvp"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalError, _emberMetalRun_loop, _emberViewsSystemJquery, _emberTestingTest, _emberRuntimeExtRsvp) {

  /**
  @module ember
  @submodule ember-testing
  */

  var helper = _emberTestingTest["default"].registerHelper;
  var asyncHelper = _emberTestingTest["default"].registerAsyncHelper;

  function currentRouteName(app) {
    var appController = app.__container__.lookup("controller:application");

    return (0, _emberMetalProperty_get.get)(appController, "currentRouteName");
  }

  function currentPath(app) {
    var appController = app.__container__.lookup("controller:application");

    return (0, _emberMetalProperty_get.get)(appController, "currentPath");
  }

  function currentURL(app) {
    var router = app.__container__.lookup("router:main");

    return (0, _emberMetalProperty_get.get)(router, "location").getURL();
  }

  function pauseTest() {
    _emberTestingTest["default"].adapter.asyncStart();
    return new _emberMetalCore["default"].RSVP.Promise(function () {}, "TestAdapter paused promise");
  }

  function focus(el) {
    if (el && el.is(":input, [contenteditable=true]")) {
      var type = el.prop("type");
      if (type !== "checkbox" && type !== "radio" && type !== "hidden") {
        (0, _emberMetalRun_loop["default"])(el, function () {
          // Firefox does not trigger the `focusin` event if the window
          // does not have focus. If the document doesn't have focus just
          // use trigger('focusin') instead.
          if (!document.hasFocus || document.hasFocus()) {
            this.focus();
          } else {
            this.trigger("focusin");
          }
        });
      }
    }
  }

  function visit(app, url) {
    var router = app.__container__.lookup("router:main");
    var shouldHandleURL = false;

    app.boot().then(function () {
      router.location.setURL(url);

      if (shouldHandleURL) {
        (0, _emberMetalRun_loop["default"])(app.__deprecatedInstance__, "handleURL", url);
      }
    });

    if (app._readinessDeferrals > 0) {
      router["initialURL"] = url;
      (0, _emberMetalRun_loop["default"])(app, "advanceReadiness");
      delete router["initialURL"];
    } else {
      shouldHandleURL = true;
    }

    return app.testHelpers.wait();
  }

  function click(app, selector, context) {
    var $el = app.testHelpers.findWithAssert(selector, context);
    (0, _emberMetalRun_loop["default"])($el, "mousedown");

    focus($el);

    (0, _emberMetalRun_loop["default"])($el, "mouseup");
    (0, _emberMetalRun_loop["default"])($el, "click");

    return app.testHelpers.wait();
  }

  function check(app, selector, context) {
    var $el = app.testHelpers.findWithAssert(selector, context);
    var type = $el.prop("type");

    _emberMetalCore["default"].assert("To check '" + selector + "', the input must be a checkbox", type === "checkbox");

    if (!$el.prop("checked")) {
      app.testHelpers.click(selector, context);
    }

    return app.testHelpers.wait();
  }

  function uncheck(app, selector, context) {
    var $el = app.testHelpers.findWithAssert(selector, context);
    var type = $el.prop("type");

    _emberMetalCore["default"].assert("To uncheck '" + selector + "', the input must be a checkbox", type === "checkbox");

    if ($el.prop("checked")) {
      app.testHelpers.click(selector, context);
    }

    return app.testHelpers.wait();
  }

  function triggerEvent(app, selector, contextOrType, typeOrOptions, possibleOptions) {
    var arity = arguments.length;
    var context, type, options;

    if (arity === 3) {
      // context and options are optional, so this is
      // app, selector, type
      context = null;
      type = contextOrType;
      options = {};
    } else if (arity === 4) {
      // context and options are optional, so this is
      if (typeof typeOrOptions === "object") {
        // either
        // app, selector, type, options
        context = null;
        type = contextOrType;
        options = typeOrOptions;
      } else {
        // or
        // app, selector, context, type
        context = contextOrType;
        type = typeOrOptions;
        options = {};
      }
    } else {
      context = contextOrType;
      type = typeOrOptions;
      options = possibleOptions;
    }

    var $el = app.testHelpers.findWithAssert(selector, context);

    var event = _emberViewsSystemJquery["default"].Event(type, options);

    (0, _emberMetalRun_loop["default"])($el, "trigger", event);

    return app.testHelpers.wait();
  }

  function keyEvent(app, selector, contextOrType, typeOrKeyCode, keyCode) {
    var context, type;

    if (typeof keyCode === "undefined") {
      context = null;
      keyCode = typeOrKeyCode;
      type = contextOrType;
    } else {
      context = contextOrType;
      type = typeOrKeyCode;
    }

    return app.testHelpers.triggerEvent(selector, context, type, { keyCode: keyCode, which: keyCode });
  }

  function fillIn(app, selector, contextOrText, text) {
    var $el, context;
    if (typeof text === "undefined") {
      text = contextOrText;
    } else {
      context = contextOrText;
    }
    $el = app.testHelpers.findWithAssert(selector, context);
    focus($el);
    (0, _emberMetalRun_loop["default"])(function () {
      $el.val(text).change();
    });
    return app.testHelpers.wait();
  }

  function findWithAssert(app, selector, context) {
    var $el = app.testHelpers.find(selector, context);
    if ($el.length === 0) {
      throw new _emberMetalError["default"]("Element " + selector + " not found.");
    }
    return $el;
  }

  function find(app, selector, context) {
    var $el;
    context = context || (0, _emberMetalProperty_get.get)(app, "rootElement");
    $el = app.$(selector, context);

    return $el;
  }

  function andThen(app, callback) {
    return app.testHelpers.wait(callback(app));
  }

  function wait(app, value) {
    return new _emberRuntimeExtRsvp["default"].Promise(function (resolve) {
      // Every 10ms, poll for the async thing to have finished
      var watcher = setInterval(function () {
        var router = app.__container__.lookup("router:main");

        // 1. If the router is loading, keep polling
        var routerIsLoading = router.router && !!router.router.activeTransition;
        if (routerIsLoading) {
          return;
        }

        // 2. If there are pending Ajax requests, keep polling
        if (_emberTestingTest["default"].pendingAjaxRequests) {
          return;
        }

        // 3. If there are scheduled timers or we are inside of a run loop, keep polling
        if (_emberMetalRun_loop["default"].hasScheduledTimers() || _emberMetalRun_loop["default"].currentRunLoop) {
          return;
        }
        if (_emberTestingTest["default"].waiters && _emberTestingTest["default"].waiters.any(function (waiter) {
          var context = waiter[0];
          var callback = waiter[1];
          return !callback.call(context);
        })) {
          return;
        }
        // Stop polling
        clearInterval(watcher);

        // Synchronously resolve the promise
        (0, _emberMetalRun_loop["default"])(null, resolve, value);
      }, 10);
    });
  }

  /**
    Loads a route, sets up any controllers, and renders any templates associated
    with the route as though a real user had triggered the route change while
    using your app.
  
    Example:
  
    ```javascript
    visit('posts/index').then(function() {
      // assert something
    });
    ```
  
    @method visit
    @param {String} url the name of the route
    @return {RSVP.Promise}
    @public
  */
  asyncHelper("visit", visit);

  /**
    Clicks an element and triggers any actions triggered by the element's `click`
    event.
  
    Example:
  
    ```javascript
    click('.some-jQuery-selector').then(function() {
      // assert something
    });
    ```
  
    @method click
    @param {String} selector jQuery selector for finding element on the DOM
    @return {RSVP.Promise}
    @public
  */
  asyncHelper("click", click);

  if (_emberMetalCore["default"].FEATURES.isEnabled("ember-testing-checkbox-helpers")) {
    /**
      Checks a checkbox. Ensures the presence of the `checked` attribute
       Example:
       ```javascript
      check('#remember-me').then(function() {
        // assert something
      });
      ```
       @method check
      @param {String} selector jQuery selector finding an `input[type="checkbox"]`
      element on the DOM to check
      @return {RSVP.Promise}
      @private
    */
    asyncHelper("check", check);

    /**
      Unchecks a checkbox. Ensures the absence of the `checked` attribute
       Example:
       ```javascript
      uncheck('#remember-me').then(function() {
       // assert something
      });
      ```
       @method check
      @param {String} selector jQuery selector finding an `input[type="checkbox"]`
      element on the DOM to uncheck
      @return {RSVP.Promise}
      @private
    */
    asyncHelper("uncheck", uncheck);
  }
  /**
    Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode
  
    Example:
  
    ```javascript
    keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {
     // assert something
    });
    ```
  
    @method keyEvent
    @param {String} selector jQuery selector for finding element on the DOM
    @param {String} type the type of key event, e.g. `keypress`, `keydown`, `keyup`
    @param {Number} keyCode the keyCode of the simulated key event
    @return {RSVP.Promise}
    @since 1.5.0
    @public
  */
  asyncHelper("keyEvent", keyEvent);

  /**
    Fills in an input element with some text.
  
    Example:
  
    ```javascript
    fillIn('#email', 'you@example.com').then(function() {
      // assert something
    });
    ```
  
    @method fillIn
    @param {String} selector jQuery selector finding an input element on the DOM
    to fill text with
    @param {String} text text to place inside the input element
    @return {RSVP.Promise}
    @public
  */
  asyncHelper("fillIn", fillIn);

  /**
    Finds an element in the context of the app's container element. A simple alias
    for `app.$(selector)`.
  
    Example:
  
    ```javascript
    var $el = find('.my-selector');
    ```
  
    @method find
    @param {String} selector jQuery string selector for element lookup
    @return {Object} jQuery object representing the results of the query
    @public
  */
  helper("find", find);

  /**
    Like `find`, but throws an error if the element selector returns no results.
  
    Example:
  
    ```javascript
    var $el = findWithAssert('.doesnt-exist'); // throws error
    ```
  
    @method findWithAssert
    @param {String} selector jQuery selector string for finding an element within
    the DOM
    @return {Object} jQuery object representing the results of the query
    @throws {Error} throws error if jQuery object returned has a length of 0
    @private
  */
  helper("findWithAssert", findWithAssert);

  /**
    Causes the run loop to process any pending events. This is used to ensure that
    any async operations from other helpers (or your assertions) have been processed.
  
    This is most often used as the return value for the helper functions (see 'click',
    'fillIn','visit',etc).
  
    Example:
  
    ```javascript
    Ember.Test.registerAsyncHelper('loginUser', function(app, username, password) {
      visit('secured/path/here')
      .fillIn('#username', username)
      .fillIn('#password', password)
      .click('.submit')
  
      return app.testHelpers.wait();
    });
  
    @method wait
    @param {Object} value The value to be returned.
    @return {RSVP.Promise}
    @public
  */
  asyncHelper("wait", wait);
  asyncHelper("andThen", andThen);

  /**
    Returns the currently active route name.
  
  Example:
  
  ```javascript
  function validateRouteName() {
    equal(currentRouteName(), 'some.path', "correct route was transitioned into.");
  }
  
  visit('/some/path').then(validateRouteName)
  ```
  
  @method currentRouteName
  @return {Object} The name of the currently active route.
  @since 1.5.0
  @public
  */
  helper("currentRouteName", currentRouteName);

  /**
    Returns the current path.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentPath(), 'some.path.index', "correct path was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentPath
  @return {Object} The currently active path.
  @since 1.5.0
  @public
  */
  helper("currentPath", currentPath);

  /**
    Returns the current URL.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentURL(), '/some/path', "correct URL was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentURL
  @return {Object} The currently active URL.
  @since 1.5.0
  @public
  */
  helper("currentURL", currentURL);

  /**
   Pauses the current test - this is useful for debugging while testing or for test-driving.
   It allows you to inspect the state of your application at any point.
  
   Example (The test will pause before clicking the button):
  
   ```javascript
   visit('/')
   return pauseTest();
  
   click('.btn');
   ```
  
   @since 1.9.0
   @method pauseTest
   @return {Object} A promise that will never resolve
   @public
  */
  helper("pauseTest", pauseTest);

  /**
    Triggers the given DOM event on the element identified by the provided selector.
  
    Example:
  
    ```javascript
    triggerEvent('#some-elem-id', 'blur');
    ```
  
    This is actually used internally by the `keyEvent` helper like so:
  
    ```javascript
    triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });
    ```
  
   @method triggerEvent
   @param {String} selector jQuery selector for finding element on the DOM
   @param {String} [context] jQuery selector that will limit the selector
                             argument to find only within the context's children
   @param {String} type The event type to be triggered.
   @param {Object} [options] The options to be passed to jQuery.Event.
   @return {RSVP.Promise}
   @since 1.5.0
   @public
  */
  asyncHelper("triggerEvent", triggerEvent);
});
enifed('ember-testing/initializers', ['exports', 'ember-runtime/system/lazy_load'], function (exports, _emberRuntimeSystemLazy_load) {

  var name = 'deferReadiness in `testing` mode';

  (0, _emberRuntimeSystemLazy_load.onLoad)('Ember.Application', function (Application) {
    if (!Application.initializers[name]) {
      Application.initializer({
        name: name,

        initialize: function (registry, application) {
          if (application.testing) {
            application.deferReadiness();
          }
        }
      });
    }
  });
});
enifed("ember-testing/setup_for_testing", ["exports", "ember-metal/core", "ember-testing/adapters/qunit", "ember-views/system/jquery"], function (exports, _emberMetalCore, _emberTestingAdaptersQunit, _emberViewsSystemJquery) {
  exports["default"] = setupForTesting;

  var Test, requests;

  function incrementAjaxPendingRequests(_, xhr) {
    requests.push(xhr);
    Test.pendingAjaxRequests = requests.length;
  }

  function decrementAjaxPendingRequests(_, xhr) {
    for (var i = 0; i < requests.length; i++) {
      if (xhr === requests[i]) {
        requests.splice(i, 1);
      }
    }
    Test.pendingAjaxRequests = requests.length;
  }

  /**
    Sets Ember up for testing. This is useful to perform
    basic setup steps in order to unit test.
  
    Use `App.setupForTesting` to perform integration tests (full
    application testing).
  
    @method setupForTesting
    @namespace Ember
    @since 1.5.0
    @private
  */

  function setupForTesting() {
    if (!Test) {
      Test = requireModule("ember-testing/test")["default"];
    }

    _emberMetalCore["default"].testing = true;

    // if adapter is not manually set default to QUnit
    if (!Test.adapter) {
      Test.adapter = _emberTestingAdaptersQunit["default"].create();
    }

    requests = [];
    Test.pendingAjaxRequests = requests.length;

    (0, _emberViewsSystemJquery["default"])(document).off("ajaxSend", incrementAjaxPendingRequests);
    (0, _emberViewsSystemJquery["default"])(document).off("ajaxComplete", decrementAjaxPendingRequests);
    (0, _emberViewsSystemJquery["default"])(document).on("ajaxSend", incrementAjaxPendingRequests);
    (0, _emberViewsSystemJquery["default"])(document).on("ajaxComplete", decrementAjaxPendingRequests);
  }
});

// import Test from "ember-testing/test";  // ES6TODO: fix when cycles are supported
enifed("ember-testing/support", ["exports", "ember-metal/core", "ember-views/system/jquery", "ember-metal/environment"], function (exports, _emberMetalCore, _emberViewsSystemJquery, _emberMetalEnvironment) {

  /**
    @module ember
    @submodule ember-testing
  */

  var $ = _emberViewsSystemJquery["default"];

  /**
    This method creates a checkbox and triggers the click event to fire the
    passed in handler. It is used to correct for a bug in older versions
    of jQuery (e.g 1.8.3).
  
    @private
    @method testCheckboxClick
  */
  function testCheckboxClick(handler) {
    $("<input type=\"checkbox\">").css({ position: "absolute", left: "-1000px", top: "-1000px" }).appendTo("body").on("click", handler).trigger("click").remove();
  }

  if (_emberMetalEnvironment["default"].hasDOM) {
    $(function () {
      /*
        Determine whether a checkbox checked using jQuery's "click" method will have
        the correct value for its checked property.
         If we determine that the current jQuery version exhibits this behavior,
        patch it to work correctly as in the commit for the actual fix:
        https://github.com/jquery/jquery/commit/1fb2f92.
      */
      testCheckboxClick(function () {
        if (!this.checked && !$.event.special.click) {
          $.event.special.click = {
            // For checkbox, fire native event so checked state will be right
            trigger: function () {
              if ($.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                this.click();
                return false;
              }
            }
          };
        }
      });

      // Try again to verify that the patch took effect or blow up.
      testCheckboxClick(function () {
        _emberMetalCore["default"].warn("clicked checkboxes should be checked! the jQuery patch didn't work", this.checked);
      });
    });
  }
});
enifed("ember-testing/test", ["exports", "ember-metal/core", "ember-metal/run_loop", "ember-metal/platform/create", "ember-runtime/ext/rsvp", "ember-testing/setup_for_testing", "ember-application/system/application"], function (exports, _emberMetalCore, _emberMetalRun_loop, _emberMetalPlatformCreate, _emberRuntimeExtRsvp, _emberTestingSetup_for_testing, _emberApplicationSystemApplication) {

  /**
    @module ember
    @submodule ember-testing
  */
  var helpers = {};
  var injectHelpersCallbacks = [];

  /**
    This is a container for an assortment of testing related functionality:
  
    * Choose your default test adapter (for your framework of choice).
    * Register/Unregister additional test helpers.
    * Setup callbacks to be fired when the test helpers are injected into
      your application.
  
    @class Test
    @namespace Ember
    @public
  */
  var Test = {
    /**
      Hash containing all known test helpers.
       @property _helpers
      @private
      @since 1.7.0
    */
    _helpers: helpers,

    /**
      `registerHelper` is used to register a test helper that will be injected
      when `App.injectTestHelpers` is called.
       The helper method will always be called with the current Application as
      the first parameter.
       For example:
       ```javascript
      Ember.Test.registerHelper('boot', function(app) {
        Ember.run(app, app.advanceReadiness);
      });
      ```
       This helper can later be called without arguments because it will be
      called with `app` as the first parameter.
       ```javascript
      App = Ember.Application.create();
      App.injectTestHelpers();
      boot();
      ```
       @public
      @method registerHelper
      @param {String} name The name of the helper method to add.
      @param {Function} helperMethod
      @param options {Object}
    */
    registerHelper: function (name, helperMethod) {
      helpers[name] = {
        method: helperMethod,
        meta: { wait: false }
      };
    },

    /**
      `registerAsyncHelper` is used to register an async test helper that will be injected
      when `App.injectTestHelpers` is called.
       The helper method will always be called with the current Application as
      the first parameter.
       For example:
       ```javascript
      Ember.Test.registerAsyncHelper('boot', function(app) {
        Ember.run(app, app.advanceReadiness);
      });
      ```
       The advantage of an async helper is that it will not run
      until the last async helper has completed.  All async helpers
      after it will wait for it complete before running.
        For example:
       ```javascript
      Ember.Test.registerAsyncHelper('deletePost', function(app, postId) {
        click('.delete-' + postId);
      });
       // ... in your test
      visit('/post/2');
      deletePost(2);
      visit('/post/3');
      deletePost(3);
      ```
       @public
      @method registerAsyncHelper
      @param {String} name The name of the helper method to add.
      @param {Function} helperMethod
      @since 1.2.0
    */
    registerAsyncHelper: function (name, helperMethod) {
      helpers[name] = {
        method: helperMethod,
        meta: { wait: true }
      };
    },

    /**
      Remove a previously added helper method.
       Example:
       ```javascript
      Ember.Test.unregisterHelper('wait');
      ```
       @public
      @method unregisterHelper
      @param {String} name The helper to remove.
    */
    unregisterHelper: function (name) {
      delete helpers[name];
      delete Test.Promise.prototype[name];
    },

    /**
      Used to register callbacks to be fired whenever `App.injectTestHelpers`
      is called.
       The callback will receive the current application as an argument.
       Example:
       ```javascript
      Ember.Test.onInjectHelpers(function() {
        Ember.$(document).ajaxSend(function() {
          Test.pendingAjaxRequests++;
        });
         Ember.$(document).ajaxComplete(function() {
          Test.pendingAjaxRequests--;
        });
      });
      ```
       @public
      @method onInjectHelpers
      @param {Function} callback The function to be called.
    */
    onInjectHelpers: function (callback) {
      injectHelpersCallbacks.push(callback);
    },

    /**
      This returns a thenable tailored for testing.  It catches failed
      `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
      callback in the last chained then.
       This method should be returned by async helpers such as `wait`.
       @public
      @method promise
      @param {Function} resolver The function used to resolve the promise.
      @param {String} label An optional string for identifying the promise.
    */
    promise: function (resolver, label) {
      var fullLabel = "Ember.Test.promise: " + (label || "<Unknown Promise>");
      return new Test.Promise(resolver, fullLabel);
    },

    /**
     Used to allow ember-testing to communicate with a specific testing
     framework.
      You can manually set it before calling `App.setupForTesting()`.
      Example:
      ```javascript
     Ember.Test.adapter = MyCustomAdapter.create()
     ```
      If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.
      @public
     @property adapter
     @type {Class} The adapter to be used.
     @default Ember.Test.QUnitAdapter
    */
    adapter: null,

    /**
      Replacement for `Ember.RSVP.resolve`
      The only difference is this uses
      an instance of `Ember.Test.Promise`
       @public
      @method resolve
      @param {Mixed} The value to resolve
      @since 1.2.0
    */
    resolve: function (val) {
      return Test.promise(function (resolve) {
        return resolve(val);
      });
    },

    /**
       This allows ember-testing to play nicely with other asynchronous
       events, such as an application that is waiting for a CSS3
       transition or an IndexDB transaction.
        For example:
        ```javascript
       Ember.Test.registerWaiter(function() {
         return myPendingTransactions() == 0;
       });
       ```
       The `context` argument allows you to optionally specify the `this`
       with which your callback will be invoked.
        For example:
        ```javascript
       Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);
       ```
        @public
       @method registerWaiter
       @param {Object} context (optional)
       @param {Function} callback
       @since 1.2.0
    */
    registerWaiter: function (context, callback) {
      if (arguments.length === 1) {
        callback = context;
        context = null;
      }
      if (!this.waiters) {
        this.waiters = _emberMetalCore["default"].A();
      }
      this.waiters.push([context, callback]);
    },
    /**
       `unregisterWaiter` is used to unregister a callback that was
       registered with `registerWaiter`.
        @public
       @method unregisterWaiter
       @param {Object} context (optional)
       @param {Function} callback
       @since 1.2.0
    */
    unregisterWaiter: function (context, callback) {
      if (!this.waiters) {
        return;
      }
      if (arguments.length === 1) {
        callback = context;
        context = null;
      }
      this.waiters = _emberMetalCore["default"].A(this.waiters.filter(function (elt) {
        return !(elt[0] === context && elt[1] === callback);
      }));
    }
  };

  function helper(app, name) {
    var fn = helpers[name].method;
    var meta = helpers[name].meta;

    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var lastPromise;

      args.unshift(app);

      // some helpers are not async and
      // need to return a value immediately.
      // example: `find`
      if (!meta.wait) {
        return fn.apply(app, args);
      }

      lastPromise = run(function () {
        return Test.resolve(Test.lastPromise);
      });

      // wait for last helper's promise to resolve and then
      // execute. To be safe, we need to tell the adapter we're going
      // asynchronous here, because fn may not be invoked before we
      // return.
      Test.adapter.asyncStart();
      return lastPromise.then(function () {
        return fn.apply(app, args);
      })["finally"](function () {
        Test.adapter.asyncEnd();
      });
    };
  }

  function run(fn) {
    if (!_emberMetalRun_loop["default"].currentRunLoop) {
      return (0, _emberMetalRun_loop["default"])(fn);
    } else {
      return fn();
    }
  }

  _emberApplicationSystemApplication["default"].reopen({
    /**
     This property contains the testing helpers for the current application. These
     are created once you call `injectTestHelpers` on your `Ember.Application`
     instance. The included helpers are also available on the `window` object by
     default, but can be used from this object on the individual application also.
       @property testHelpers
      @type {Object}
      @default {}
      @public
    */
    testHelpers: {},

    /**
     This property will contain the original methods that were registered
     on the `helperContainer` before `injectTestHelpers` is called.
      When `removeTestHelpers` is called, these methods are restored to the
     `helperContainer`.
       @property originalMethods
      @type {Object}
      @default {}
      @private
      @since 1.3.0
    */
    originalMethods: {},

    /**
    This property indicates whether or not this application is currently in
    testing mode. This is set when `setupForTesting` is called on the current
    application.
     @property testing
    @type {Boolean}
    @default false
    @since 1.3.0
    @public
    */
    testing: false,

    /**
      This hook defers the readiness of the application, so that you can start
      the app when your tests are ready to run. It also sets the router's
      location to 'none', so that the window's location will not be modified
      (preventing both accidental leaking of state between tests and interference
      with your testing framework).
       Example:
       ```
      App.setupForTesting();
      ```
       @method setupForTesting
      @public
    */
    setupForTesting: function () {
      (0, _emberTestingSetup_for_testing["default"])();

      this.testing = true;

      this.Router.reopen({
        location: "none"
      });
    },

    /**
      This will be used as the container to inject the test helpers into. By
      default the helpers are injected into `window`.
       @property helperContainer
      @type {Object} The object to be used for test helpers.
      @default window
      @since 1.2.0
      @private
    */
    helperContainer: null,

    /**
      This injects the test helpers into the `helperContainer` object. If an object is provided
      it will be used as the helperContainer. If `helperContainer` is not set it will default
      to `window`. If a function of the same name has already been defined it will be cached
      (so that it can be reset if the helper is removed with `unregisterHelper` or
      `removeTestHelpers`).
       Any callbacks registered with `onInjectHelpers` will be called once the
      helpers have been injected.
       Example:
      ```
      App.injectTestHelpers();
      ```
       @method injectTestHelpers
      @public
    */
    injectTestHelpers: function (helperContainer) {
      if (helperContainer) {
        this.helperContainer = helperContainer;
      } else {
        this.helperContainer = window;
      }

      this.testHelpers = {};
      for (var name in helpers) {
        this.originalMethods[name] = this.helperContainer[name];
        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);
        protoWrap(Test.Promise.prototype, name, helper(this, name), helpers[name].meta.wait);
      }

      for (var i = 0, l = injectHelpersCallbacks.length; i < l; i++) {
        injectHelpersCallbacks[i](this);
      }
    },

    /**
      This removes all helpers that have been registered, and resets and functions
      that were overridden by the helpers.
       Example:
       ```javascript
      App.removeTestHelpers();
      ```
       @public
      @method removeTestHelpers
    */
    removeTestHelpers: function () {
      if (!this.helperContainer) {
        return;
      }

      for (var name in helpers) {
        this.helperContainer[name] = this.originalMethods[name];
        delete this.testHelpers[name];
        delete this.originalMethods[name];
      }
    }
  });

  // This method is no longer needed
  // But still here for backwards compatibility
  // of helper chaining
  function protoWrap(proto, name, callback, isAsync) {
    proto[name] = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (isAsync) {
        return callback.apply(this, args);
      } else {
        return this.then(function () {
          return callback.apply(this, args);
        });
      }
    };
  }

  Test.Promise = function () {
    _emberRuntimeExtRsvp["default"].Promise.apply(this, arguments);
    Test.lastPromise = this;
  };

  Test.Promise.prototype = (0, _emberMetalPlatformCreate["default"])(_emberRuntimeExtRsvp["default"].Promise.prototype);
  Test.Promise.prototype.constructor = Test.Promise;
  Test.Promise.resolve = Test.resolve;

  // Patch `then` to isolate async methods
  // specifically `Ember.Test.lastPromise`
  var originalThen = _emberRuntimeExtRsvp["default"].Promise.prototype.then;
  Test.Promise.prototype.then = function (onSuccess, onFailure) {
    return originalThen.call(this, function (val) {
      return isolate(onSuccess, val);
    }, onFailure);
  };

  // This method isolates nested async methods
  // so that they don't conflict with other last promises.
  //
  // 1. Set `Ember.Test.lastPromise` to null
  // 2. Invoke method
  // 3. Return the last promise created during method
  function isolate(fn, val) {
    var value, lastPromise;

    // Reset lastPromise for nested helpers
    Test.lastPromise = null;

    value = fn(val);

    lastPromise = Test.lastPromise;
    Test.lastPromise = null;

    // If the method returned a promise
    // return that promise. If not,
    // return the last async helper's promise
    if (value && value instanceof Test.Promise || !lastPromise) {
      return value;
    } else {
      return run(function () {
        return Test.resolve(lastPromise).then(function () {
          return value;
        });
      });
    }
  }

  exports["default"] = Test;
});
enifed("ember-views", ["exports", "ember-runtime", "ember-views/system/jquery", "ember-views/system/utils", "ember-views/compat/render_buffer", "ember-views/system/ext", "ember-views/views/states", "ember-metal-views/renderer", "ember-views/views/core_view", "ember-views/views/view", "ember-views/views/container_view", "ember-views/views/collection_view", "ember-views/views/component", "ember-views/system/event_dispatcher", "ember-views/mixins/view_target_action_support", "ember-views/component_lookup", "ember-views/views/checkbox", "ember-views/mixins/text_support", "ember-views/views/text_field", "ember-views/views/text_area", "ember-views/views/select", "ember-views/compat/metamorph_view", "ember-views/views/legacy_each_view"], function (exports, _emberRuntime, _emberViewsSystemJquery, _emberViewsSystemUtils, _emberViewsCompatRender_buffer, _emberViewsSystemExt, _emberViewsViewsStates, _emberMetalViewsRenderer, _emberViewsViewsCore_view, _emberViewsViewsView, _emberViewsViewsContainer_view, _emberViewsViewsCollection_view, _emberViewsViewsComponent, _emberViewsSystemEvent_dispatcher, _emberViewsMixinsView_target_action_support, _emberViewsComponent_lookup, _emberViewsViewsCheckbox, _emberViewsMixinsText_support, _emberViewsViewsText_field, _emberViewsViewsText_area, _emberViewsViewsSelect, _emberViewsCompatMetamorph_view, _emberViewsViewsLegacy_each_view) {

  // END IMPORTS

  /**
    Alias for jQuery
  
    @method $
    @for Ember
   @public
  */

  // BEGIN EXPORTS
  _emberRuntime["default"].$ = _emberViewsSystemJquery["default"];

  _emberRuntime["default"].ViewTargetActionSupport = _emberViewsMixinsView_target_action_support["default"];
  _emberRuntime["default"].RenderBuffer = _emberViewsCompatRender_buffer["default"];

  var ViewUtils = _emberRuntime["default"].ViewUtils = {};
  ViewUtils.isSimpleClick = _emberViewsSystemUtils.isSimpleClick;
  ViewUtils.getViewClientRects = _emberViewsSystemUtils.getViewClientRects;
  ViewUtils.getViewBoundingClientRect = _emberViewsSystemUtils.getViewBoundingClientRect;

  _emberRuntime["default"].CoreView = _emberViewsViewsCore_view.DeprecatedCoreView;
  _emberRuntime["default"].View = _emberViewsViewsView.DeprecatedView;
  _emberRuntime["default"].View.states = _emberViewsViewsStates.states;
  _emberRuntime["default"].View.cloneStates = _emberViewsViewsStates.cloneStates;
  _emberRuntime["default"].View._Renderer = _emberMetalViewsRenderer["default"];
  _emberRuntime["default"].Checkbox = _emberViewsViewsCheckbox["default"];
  _emberRuntime["default"].TextField = _emberViewsViewsText_field["default"];
  _emberRuntime["default"].TextArea = _emberViewsViewsText_area["default"];

  _emberRuntime["default"].Select = _emberViewsViewsSelect.DeprecatedSelect;
  _emberRuntime["default"].SelectOption = _emberViewsViewsSelect.SelectOption;
  _emberRuntime["default"].SelectOptgroup = _emberViewsViewsSelect.SelectOptgroup;

  _emberRuntime["default"].TextSupport = _emberViewsMixinsText_support["default"];
  _emberRuntime["default"].ComponentLookup = _emberViewsComponent_lookup["default"];
  _emberRuntime["default"].ContainerView = _emberViewsViewsContainer_view["default"];
  _emberRuntime["default"].CollectionView = _emberViewsViewsCollection_view["default"];
  _emberRuntime["default"].Component = _emberViewsViewsComponent["default"];
  _emberRuntime["default"].EventDispatcher = _emberViewsSystemEvent_dispatcher["default"];

  // Deprecated:
  _emberRuntime["default"]._Metamorph = _emberViewsCompatMetamorph_view._Metamorph;
  _emberRuntime["default"]._MetamorphView = _emberViewsCompatMetamorph_view["default"];
  _emberRuntime["default"]._LegacyEachView = _emberViewsViewsLegacy_each_view["default"];

  // END EXPORTS

  exports["default"] = _emberRuntime["default"];
});
/**
@module ember
@submodule ember-views
*/

// BEGIN IMPORTS
// for the side effect of extending Ember.run.queues
enifed("ember-views/compat/attrs-proxy", ["exports", "ember-metal/property_get", "ember-metal/mixin", "ember-metal/events", "ember-metal/utils", "ember-metal/keys", "ember-metal/property_events", "ember-metal/observer"], function (exports, _emberMetalProperty_get, _emberMetalMixin, _emberMetalEvents, _emberMetalUtils, _emberMetalKeys, _emberMetalProperty_events, _emberMetalObserver) {
  exports.deprecation = deprecation;

  function deprecation(key) {
    return "You tried to look up an attribute directly on the component. This is deprecated. Use attrs." + key + " instead.";
  }

  var MUTABLE_CELL = (0, _emberMetalUtils.symbol)("MUTABLE_CELL");

  exports.MUTABLE_CELL = MUTABLE_CELL;
  function isCell(val) {
    return val && val[MUTABLE_CELL];
  }

  function attrsWillChange(view, attrsKey) {
    var key = attrsKey.slice(6);
    view.currentState.legacyAttrWillChange(view, key);
  }

  function attrsDidChange(view, attrsKey) {
    var key = attrsKey.slice(6);
    view.currentState.legacyAttrDidChange(view, key);
  }

  var AttrsProxyMixin = {
    attrs: null,

    getAttr: function (key) {
      var attrs = this.attrs;
      if (!attrs) {
        return;
      }
      return this.getAttrFor(attrs, key);
    },

    getAttrFor: function (attrs, key) {
      var val = attrs[key];
      return isCell(val) ? val.value : val;
    },

    setAttr: function (key, value) {
      var attrs = this.attrs;
      var val = attrs[key];

      if (!isCell(val)) {
        throw new Error("You can't update attrs." + key + ", because it's not mutable");
      }

      val.update(value);
    },

    willWatchProperty: function (key) {
      if (this._isAngleBracket || key === "attrs") {
        return;
      }

      var attrsKey = "attrs." + key;
      (0, _emberMetalObserver.addBeforeObserver)(this, attrsKey, null, attrsWillChange);
      (0, _emberMetalObserver.addObserver)(this, attrsKey, null, attrsDidChange);
    },

    didUnwatchProperty: function (key) {
      if (this._isAngleBracket || key === "attrs") {
        return;
      }

      var attrsKey = "attrs." + key;
      (0, _emberMetalObserver.removeBeforeObserver)(this, attrsKey, null, attrsWillChange);
      (0, _emberMetalObserver.removeObserver)(this, attrsKey, null, attrsDidChange);
    },

    legacyDidReceiveAttrs: (0, _emberMetalEvents.on)("didReceiveAttrs", function () {
      if (this._isAngleBracket) {
        return;
      }

      var keys = (0, _emberMetalKeys["default"])(this.attrs);

      for (var i = 0, l = keys.length; i < l; i++) {
        // Only issue the deprecation if it wasn't already issued when
        // setting attributes initially.
        if (!(keys[i] in this)) {
          this.notifyPropertyChange(keys[i]);
        }
      }
    }),

    unknownProperty: function (key) {
      if (this._isAngleBracket) {
        return;
      }

      var attrs = (0, _emberMetalProperty_get.get)(this, "attrs");

      if (attrs && key in attrs) {
        // do not deprecate accessing `this[key]` at this time.
        // add this back when we have a proper migration path
        // Ember.deprecate(deprecation(key));
        var possibleCell = (0, _emberMetalProperty_get.get)(attrs, key);

        if (possibleCell && possibleCell[MUTABLE_CELL]) {
          return possibleCell.value;
        }

        return possibleCell;
      }
    }

    //setUnknownProperty(key) {

    //}
  };

  AttrsProxyMixin[_emberMetalProperty_events.PROPERTY_DID_CHANGE] = function (key) {
    if (this._isAngleBracket) {
      return;
    }

    if (this.currentState) {
      this.currentState.legacyPropertyDidChange(this, key);
    }
  };

  exports["default"] = _emberMetalMixin.Mixin.create(AttrsProxyMixin);
});

//import { set } from "ember-metal/property_set";

//import run from "ember-metal/run_loop";
enifed("ember-views/compat/metamorph_view", ["exports", "ember-metal/core", "ember-views/views/view", "ember-metal/mixin"], function (exports, _emberMetalCore, _emberViewsViewsView, _emberMetalMixin) {

  /**
   @module ember
   @submodule ember-views
  */

  // The `morph` and `outerHTML` properties are internal only
  // and not observable.

  /**
   @class _Metamorph
   @namespace Ember
   @private
  */
  var _Metamorph = _emberMetalMixin.Mixin.create({
    tagName: "",
    __metamorphType: "Ember._Metamorph",

    instrumentName: "metamorph",

    init: function () {
      this._super.apply(this, arguments);
      _emberMetalCore["default"].deprecate("Supplying a tagName to Metamorph views is unreliable and is deprecated." + " You may be setting the tagName on a Handlebars helper that creates a Metamorph.", !this.tagName);

      _emberMetalCore["default"].deprecate("Using " + this.__metamorphType + " is deprecated.");
    }
  });

  exports._Metamorph = _Metamorph;
  /**
   @class _MetamorphView
   @namespace Ember
   @extends Ember.View
   @uses Ember._Metamorph
   @private
  */
  exports["default"] = _emberViewsViewsView["default"].extend(_Metamorph, {
    __metamorphType: "Ember._MetamorphView"
  });
});
/*jshint newcap:false*/
// Ember.deprecate
enifed("ember-views/compat/render_buffer", ["exports", "ember-views/system/jquery", "ember-metal/core", "ember-metal/platform/create", "dom-helper/prop", "ember-views/system/platform"], function (exports, _emberViewsSystemJquery, _emberMetalCore, _emberMetalPlatformCreate, _domHelperProp, _emberViewsSystemPlatform) {
  exports.renderComponentWithBuffer = renderComponentWithBuffer;

  // The HTML spec allows for "omitted start tags". These tags are optional
  // when their intended child is the first thing in the parent tag. For
  // example, this is a tbody start tag:
  //
  // <table>
  //   <tbody>
  //     <tr>
  //
  // The tbody may be omitted, and the browser will accept and render:
  //
  // <table>
  //   <tr>
  //
  // However, the omitted start tag will still be added to the DOM. Here
  // we test the string and context to see if the browser is about to
  // perform this cleanup, but with a special allowance for disregarding
  // <script tags. This disregarding of <script being the first child item
  // may bend the official spec a bit, and is only needed for Handlebars
  // templates.
  //
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#optional-tags
  // describes which tags are omittable. The spec for tbody and colgroup
  // explains this behavior:
  //
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-tbody-element
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-colgroup-element
  //
  var omittedStartTagChildren;
  var omittedStartTagChildTest = /(?:<script)*.*?<([\w:]+)/i;

  function detectOmittedStartTag(dom, string, contextualElement) {
    omittedStartTagChildren = omittedStartTagChildren || {
      tr: dom.createElement("tbody"),
      col: dom.createElement("colgroup")
    };

    // Omitted start tags are only inside table tags.
    if (contextualElement.tagName === "TABLE") {
      var omittedStartTagChildMatch = omittedStartTagChildTest.exec(string);
      if (omittedStartTagChildMatch) {
        // It is already asserted that the contextual element is a table
        // and not the proper start tag. Just look up the start tag.
        return omittedStartTagChildren[omittedStartTagChildMatch[1].toLowerCase()];
      }
    }
  }

  function ClassSet() {
    this.seen = (0, _emberMetalPlatformCreate["default"])(null);
    this.list = [];
  }

  ClassSet.prototype = {
    add: function (string) {
      if (this.seen[string] === true) {
        return;
      }
      this.seen[string] = true;

      this.list.push(string);
    }
  };

  var BAD_TAG_NAME_TEST_REGEXP = /[^a-zA-Z0-9\-]/;
  var BAD_TAG_NAME_REPLACE_REGEXP = /[^a-zA-Z0-9\-]/g;

  function stripTagName(tagName) {
    if (!tagName) {
      return tagName;
    }

    if (!BAD_TAG_NAME_TEST_REGEXP.test(tagName)) {
      return tagName;
    }

    return tagName.replace(BAD_TAG_NAME_REPLACE_REGEXP, "");
  }

  var BAD_CHARS_REGEXP = /&(?!\w+;)|[<>"'`]/g;
  var POSSIBLE_CHARS_REGEXP = /[&<>"'`]/;

  function escapeAttribute(value) {
    // Stolen shamelessly from Handlebars

    var escape = {
      "<": "&lt;",
      ">": "&gt;",
      "\"": "&quot;",
      "'": "&#x27;",
      "`": "&#x60;"
    };

    var escapeChar = function (chr) {
      return escape[chr] || "&amp;";
    };

    var string = value.toString();

    if (!POSSIBLE_CHARS_REGEXP.test(string)) {
      return string;
    }
    return string.replace(BAD_CHARS_REGEXP, escapeChar);
  }

  function renderComponentWithBuffer(component, contextualElement, dom) {
    var buffer = [];
    component.render(buffer);
    var element = dom.parseHTML(buffer.join(""), contextualElement);
    return element;
  }

  /**
    `Ember.RenderBuffer` gathers information regarding the view and generates the
    final representation. `Ember.RenderBuffer` will generate HTML which can be pushed
    to the DOM.
  
     ```javascript
     var buffer = new Ember.RenderBuffer('div', contextualElement);
    ```
  
    @class RenderBuffer
    @namespace Ember
    @deprecated
    @private
  */

  var RenderBuffer = function (domHelper) {
    _emberMetalCore["default"].deprecate("`Ember.RenderBuffer` is deprecated.");
    this.buffer = null;
    this.childViews = [];
    this.attrNodes = [];

    _emberMetalCore["default"].assert("RenderBuffer requires a DOM helper to be passed to its constructor.", !!domHelper);

    this.dom = domHelper;
  };

  RenderBuffer.prototype = {

    reset: function (tagName, contextualElement) {
      this.tagName = tagName;
      this.buffer = null;
      this._element = null;
      this._outerContextualElement = contextualElement;
      this.elementClasses = null;
      this.elementId = null;
      this.elementAttributes = null;
      this.elementProperties = null;
      this.elementTag = null;
      this.elementStyle = null;
      this.childViews.length = 0;
      this.attrNodes.length = 0;
    },

    // The root view's element
    _element: null,

    // The root view's contextualElement
    _outerContextualElement: null,

    /**
      An internal set used to de-dupe class names when `addClass()` is
      used. After each call to `addClass()`, the `classes` property
      will be updated.
       @private
      @property elementClasses
      @type Array
      @default null
    */
    elementClasses: null,

    /**
      Array of class names which will be applied in the class attribute.
       You can use `setClasses()` to set this property directly. If you
      use `addClass()`, it will be maintained for you.
       @property classes
      @type Array
      @default null
      @private
    */
    classes: null,

    /**
      The id in of the element, to be applied in the id attribute.
       You should not set this property yourself, rather, you should use
      the `id()` method of `Ember.RenderBuffer`.
       @property elementId
      @type String
      @default null
      @private
    */
    elementId: null,

    /**
      A hash keyed on the name of the attribute and whose value will be
      applied to that attribute. For example, if you wanted to apply a
      `data-view="Foo.bar"` property to an element, you would set the
      elementAttributes hash to `{'data-view':'Foo.bar'}`.
       You should not maintain this hash yourself, rather, you should use
      the `attr()` method of `Ember.RenderBuffer`.
       @property elementAttributes
      @type Hash
      @default {}
      @private
    */
    elementAttributes: null,

    /**
      A hash keyed on the name of the properties and whose value will be
      applied to that property. For example, if you wanted to apply a
      `checked=true` property to an element, you would set the
      elementProperties hash to `{'checked':true}`.
       You should not maintain this hash yourself, rather, you should use
      the `prop()` method of `Ember.RenderBuffer`.
       @property elementProperties
      @type Hash
      @default {}
      @private
    */
    elementProperties: null,

    /**
      The tagname of the element an instance of `Ember.RenderBuffer` represents.
       Usually, this gets set as the first parameter to `Ember.RenderBuffer`. For
      example, if you wanted to create a `p` tag, then you would call
       ```javascript
      Ember.RenderBuffer('p', contextualElement)
      ```
       @property elementTag
      @type String
      @default null
      @private
    */
    elementTag: null,

    /**
      A hash keyed on the name of the style attribute and whose value will
      be applied to that attribute. For example, if you wanted to apply a
      `background-color:black;` style to an element, you would set the
      elementStyle hash to `{'background-color':'black'}`.
       You should not maintain this hash yourself, rather, you should use
      the `style()` method of `Ember.RenderBuffer`.
       @property elementStyle
      @type Hash
      @default {}
      @private
    */
    elementStyle: null,

    pushChildView: function (view) {
      var index = this.childViews.length;
      this.childViews[index] = view;
      this.push("<script id='morph-" + index + "' type='text/x-placeholder'></script>");
    },

    pushAttrNode: function (node) {
      var index = this.attrNodes.length;
      this.attrNodes[index] = node;
    },

    hydrateMorphs: function (contextualElement) {
      var childViews = this.childViews;
      var el = this._element;
      for (var i = 0, l = childViews.length; i < l; i++) {
        var childView = childViews[i];
        var ref = el.querySelector("#morph-" + i);

        _emberMetalCore["default"].assert("An error occurred while setting up template bindings. Please check " + (childView && childView.parentView && childView._parentView._debugTemplateName ? "\"" + childView._parentView._debugTemplateName + "\" template " : "") + "for invalid markup or bindings within HTML comments.", ref);

        var parent = ref.parentNode;

        childView._morph = this.dom.insertMorphBefore(parent, ref, parent.nodeType === 1 ? parent : contextualElement);
        parent.removeChild(ref);
      }
    },

    /**
      Adds a string of HTML to the `RenderBuffer`.
       @method push
      @param {String} string HTML to push into the buffer
      @chainable
      @private
    */
    push: function (content) {
      if (typeof content === "string") {
        if (this.buffer === null) {
          this.buffer = "";
        }
        _emberMetalCore["default"].assert("A string cannot be pushed into the buffer after a fragment", !this.buffer.nodeType);
        this.buffer += content;
      } else {
        _emberMetalCore["default"].assert("A fragment cannot be pushed into a buffer that contains content", !this.buffer);
        this.buffer = content;
      }
      return this;
    },

    /**
      Adds a class to the buffer, which will be rendered to the class attribute.
       @method addClass
      @param {String} className Class name to add to the buffer
      @chainable
      @private
    */
    addClass: function (className) {
      // lazily create elementClasses
      this.elementClasses = this.elementClasses || new ClassSet();
      this.elementClasses.add(className);
      this.classes = this.elementClasses.list;

      return this;
    },

    setClasses: function (classNames) {
      this.elementClasses = null;
      var len = classNames.length;
      var i;
      for (i = 0; i < len; i++) {
        this.addClass(classNames[i]);
      }
    },

    /**
      Sets the elementID to be used for the element.
       @method id
      @param {String} id
      @chainable
      @private
    */
    id: function (id) {
      this.elementId = id;
      return this;
    },

    // duck type attribute functionality like jQuery so a render buffer
    // can be used like a jQuery object in attribute binding scenarios.

    /**
      Adds an attribute which will be rendered to the element.
       @method attr
      @param {String} name The name of the attribute
      @param {String} value The value to add to the attribute
      @chainable
      @return {Ember.RenderBuffer|String} this or the current attribute value
      @private
    */
    attr: function (name, value) {
      var attributes = this.elementAttributes = this.elementAttributes || {};

      if (arguments.length === 1) {
        return attributes[name];
      } else {
        attributes[name] = value;
      }

      return this;
    },

    /**
      Remove an attribute from the list of attributes to render.
       @method removeAttr
      @param {String} name The name of the attribute
      @chainable
      @private
    */
    removeAttr: function (name) {
      var attributes = this.elementAttributes;
      if (attributes) {
        delete attributes[name];
      }

      return this;
    },

    /**
      Adds a property which will be rendered to the element.
       @method prop
      @param {String} name The name of the property
      @param {String} value The value to add to the property
      @chainable
      @return {Ember.RenderBuffer|String} this or the current property value
      @private
    */
    prop: function (name, value) {
      var properties = this.elementProperties = this.elementProperties || {};

      if (arguments.length === 1) {
        return properties[name];
      } else {
        properties[name] = value;
      }

      return this;
    },

    /**
      Remove an property from the list of properties to render.
       @method removeProp
      @param {String} name The name of the property
      @chainable
      @private
    */
    removeProp: function (name) {
      var properties = this.elementProperties;
      if (properties) {
        delete properties[name];
      }

      return this;
    },

    /**
      Adds a style to the style attribute which will be rendered to the element.
       @method style
      @param {String} name Name of the style
      @param {String} value
      @chainable
      @private
    */
    style: function (name, value) {
      this.elementStyle = this.elementStyle || {};

      this.elementStyle[name] = value;
      return this;
    },

    generateElement: function () {
      var tagName = this.tagName;
      var id = this.elementId;
      var classes = this.classes;
      var attrs = this.elementAttributes;
      var props = this.elementProperties;
      var style = this.elementStyle;
      var styleBuffer = "";
      var attr, prop, tagString;

      if (!_emberViewsSystemPlatform.canSetNameOnInputs && attrs && attrs.name) {
        // IE allows passing a tag to createElement. See note on `canSetNameOnInputs` above as well.
        tagString = "<" + stripTagName(tagName) + " name=\"" + escapeAttribute(attrs.name) + "\">";
      } else {
        tagString = tagName;
      }

      var element = this.dom.createElement(tagString, this.outerContextualElement());

      if (id) {
        this.dom.setAttribute(element, "id", id);
        this.elementId = null;
      }
      if (classes) {
        this.dom.setAttribute(element, "class", classes.join(" "));
        this.classes = null;
        this.elementClasses = null;
      }

      if (style) {
        for (prop in style) {
          styleBuffer += prop + ":" + style[prop] + ";";
        }

        this.dom.setAttribute(element, "style", styleBuffer);

        this.elementStyle = null;
      }

      if (attrs) {
        for (attr in attrs) {
          this.dom.setAttribute(element, attr, attrs[attr]);
        }

        this.elementAttributes = null;
      }

      if (props) {
        for (prop in props) {
          var normalizedCase = (0, _domHelperProp.normalizeProperty)(element, prop.toLowerCase()) || prop;

          this.dom.setPropertyStrict(element, normalizedCase, props[prop]);
        }

        this.elementProperties = null;
      }

      return this._element = element;
    },

    /**
      @method element
      @return {DOMElement} The element corresponding to the generated HTML
        of this buffer
      @private
    */
    element: function () {

      if (this._element && this.attrNodes.length > 0) {
        var i, l, attrMorph, attrNode;
        for (i = 0, l = this.attrNodes.length; i < l; i++) {
          attrNode = this.attrNodes[i];
          attrMorph = this.dom.createAttrMorph(this._element, attrNode.attrName);
          attrNode._morph = attrMorph;
        }
      }

      var content = this.innerContent();
      // No content means a text node buffer, with the content
      // in _element. Ember._BoundView is an example.
      if (content === null) {
        return this._element;
      }

      var contextualElement = this.innerContextualElement(content);
      this.dom.detectNamespace(contextualElement);

      if (!this._element) {
        this._element = this.dom.createDocumentFragment();
      }

      if (content.nodeType) {
        this._element.appendChild(content);
      } else {
        var frag = this.dom.parseHTML(content, contextualElement);
        this._element.appendChild(frag);
      }

      // This should only happen with legacy string buffers
      if (this.childViews.length > 0) {
        this.hydrateMorphs(contextualElement);
      }

      return this._element;
    },

    /**
      Generates the HTML content for this buffer.
       @method string
      @return {String} The generated HTML
      @private
    */
    string: function () {
      if (this._element) {
        // Firefox versions < 11 do not have support for element.outerHTML.
        var thisElement = this.element();
        var outerHTML = thisElement.outerHTML;
        if (typeof outerHTML === "undefined") {
          return (0, _emberViewsSystemJquery["default"])("<div/>").append(thisElement).html();
        }
        return outerHTML;
      } else {
        return this.innerString();
      }
    },

    outerContextualElement: function () {
      if (this._outerContextualElement === undefined) {
        _emberMetalCore["default"].deprecate("The render buffer expects an outer contextualElement to exist." + " This ensures DOM that requires context is correctly generated (tr, SVG tags)." + " Defaulting to document.body, but this will be removed in the future");
        this.outerContextualElement = document.body;
      }
      return this._outerContextualElement;
    },

    innerContextualElement: function (html) {
      var innerContextualElement;
      if (this._element && this._element.nodeType === 1) {
        innerContextualElement = this._element;
      } else {
        innerContextualElement = this.outerContextualElement();
      }

      var omittedStartTag;
      if (html) {
        omittedStartTag = detectOmittedStartTag(this.dom, html, innerContextualElement);
      }
      return omittedStartTag || innerContextualElement;
    },

    innerString: function () {
      var content = this.innerContent();
      if (content && !content.nodeType) {
        return content;
      }
    },

    innerContent: function () {
      return this.buffer;
    }
  };

  exports["default"] = RenderBuffer;
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/component_lookup", ["exports", "ember-metal/core", "ember-runtime/system/object", "ember-htmlbars/system/lookup-helper"], function (exports, _emberMetalCore, _emberRuntimeSystemObject, _emberHtmlbarsSystemLookupHelper) {
  exports["default"] = _emberRuntimeSystemObject["default"].extend({
    invalidName: function (name) {
      if (!_emberHtmlbarsSystemLookupHelper.CONTAINS_DASH_CACHE.get(name)) {
        _emberMetalCore["default"].assert("You cannot use '" + name + "' as a component name. Component names must contain a hyphen.");
        return true;
      }
    },

    lookupFactory: function (name, container) {

      container = container || this.container;

      var fullName = "component:" + name;
      var templateFullName = "template:components/" + name;
      var templateRegistered = container && container._registry.has(templateFullName);

      if (templateRegistered) {
        container._registry.injection(fullName, "layout", templateFullName);
      }

      var Component = container.lookupFactory(fullName);

      // Only treat as a component if either the component
      // or a template has been registered.
      if (templateRegistered || Component) {
        if (!Component) {
          container._registry.register(fullName, _emberMetalCore["default"].Component);
          Component = container.lookupFactory(fullName);
        }
        return Component;
      }
    },

    componentFor: function (name, container) {
      if (this.invalidName(name)) {
        return;
      }

      var fullName = "component:" + name;
      return container.lookupFactory(fullName);
    },

    layoutFor: function (name, container) {
      if (this.invalidName(name)) {
        return;
      }

      var templateFullName = "template:components/" + name;
      return container.lookup(templateFullName);
    }
  });
});
enifed("ember-views/mixins/aria_role_support", ["exports", "ember-metal/mixin"], function (exports, _emberMetalMixin) {

  /**
   @class AriaRoleSupport
   @namespace Ember
   @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create({
    attributeBindings: ["ariaRole:role"],

    /**
     The WAI-ARIA role of the control represented by this view. For example, a
     button may have a role of type 'button', or a pane may have a role of
     type 'alertdialog'. This property is used by assistive software to help
     visually challenged users navigate rich web applications.
      The full list of valid WAI-ARIA roles is available at:
     [http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)
      @property ariaRole
     @type String
     @default null
     @public
    */
    ariaRole: null
  });
});
/**
 @module ember
 @submodule ember-views
*/
enifed("ember-views/mixins/class_names_support", ["exports", "ember-metal/core", "ember-metal/mixin", "ember-runtime/system/native_array", "ember-metal/utils"], function (exports, _emberMetalCore, _emberMetalMixin, _emberRuntimeSystemNative_array, _emberMetalUtils) {

  var EMPTY_ARRAY = [];

  /**
    @class ClassNamesSupport
    @namespace Ember
    @private
  */
  var ClassNamesSupport = _emberMetalMixin.Mixin.create({
    concatenatedProperties: ["classNames", "classNameBindings"],

    init: function () {
      this._super.apply(this, arguments);

      _emberMetalCore["default"].assert("Only arrays are allowed for 'classNameBindings'", (0, _emberMetalUtils.isArray)(this.classNameBindings));
      this.classNameBindings = (0, _emberRuntimeSystemNative_array.A)(this.classNameBindings.slice());

      _emberMetalCore["default"].assert("Only arrays of static class strings are allowed for 'classNames'. For dynamic classes, use 'classNameBindings'.", (0, _emberMetalUtils.isArray)(this.classNames));
      this.classNames = (0, _emberRuntimeSystemNative_array.A)(this.classNames.slice());
    },

    /**
      Standard CSS class names to apply to the view's outer element. This
      property automatically inherits any class names defined by the view's
      superclasses as well.
       @property classNames
      @type Array
      @default ['ember-view']
      @private
    */
    classNames: ["ember-view"],

    /**
      A list of properties of the view to apply as class names. If the property
      is a string value, the value of that string will be applied as a class
      name.
       ```javascript
      // Applies the 'high' class to the view element
      Ember.View.extend({
        classNameBindings: ['priority']
        priority: 'high'
      });
      ```
       If the value of the property is a Boolean, the name of that property is
      added as a dasherized class name.
       ```javascript
      // Applies the 'is-urgent' class to the view element
      Ember.View.extend({
        classNameBindings: ['isUrgent']
        isUrgent: true
      });
      ```
       If you would prefer to use a custom value instead of the dasherized
      property name, you can pass a binding like this:
       ```javascript
      // Applies the 'urgent' class to the view element
      Ember.View.extend({
        classNameBindings: ['isUrgent:urgent']
        isUrgent: true
      });
      ```
       This list of properties is inherited from the view's superclasses as well.
       @property classNameBindings
      @type Array
      @default []
      @private
    */
    classNameBindings: EMPTY_ARRAY
  });

  exports["default"] = ClassNamesSupport;
});
/**
@module ember
@submodule ember-views
*/
enifed('ember-views/mixins/component_template_deprecation', ['exports', 'ember-metal/core', 'ember-metal/property_get', 'ember-metal/mixin'], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalMixin) {

  /*
    The ComponentTemplateDeprecation mixin is used to provide a useful
    deprecation warning when using either `template` or `templateName` with
    a component. The `template` and `templateName` properties specified at
    extend time are moved to `layout` and `layoutName` respectively.
  
    This is used internally by Ember in `Ember.Component`.
  */
  exports["default"] = _emberMetalMixin.Mixin.create({
    /**
      @private
       Moves `templateName` to `layoutName` and `template` to `layout` at extend
      time if a layout is not also specified.
       Note that this currently modifies the mixin themselves, which is technically
      dubious but is practically of little consequence. This may change in the
      future.
       @method willMergeMixin
      @since 1.4.0
    */
    willMergeMixin: function (props) {
      // must call _super here to ensure that the ActionHandler
      // mixin is setup properly (moves actions -> _actions)
      //
      // Calling super is only OK here since we KNOW that
      // there is another Mixin loaded first.
      this._super.apply(this, arguments);

      var deprecatedProperty, replacementProperty;
      var layoutSpecified = props.layoutName || props.layout || (0, _emberMetalProperty_get.get)(this, 'layoutName');

      if (props.templateName && !layoutSpecified) {
        deprecatedProperty = 'templateName';
        replacementProperty = 'layoutName';

        props.layoutName = props.templateName;
        delete props['templateName'];
      }

      if (props.template && !layoutSpecified) {
        deprecatedProperty = 'template';
        replacementProperty = 'layout';

        props.layout = props.template;
        delete props['template'];
      }

      _emberMetalCore["default"].deprecate('Do not specify ' + deprecatedProperty + ' on a Component, use ' + replacementProperty + ' instead.', !deprecatedProperty);
    }
  });
});
// Ember.deprecate
enifed("ember-views/mixins/empty_view_support", ["exports", "ember-metal/mixin", "ember-views/views/view", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/computed"], function (exports, _emberMetalMixin, _emberViewsViewsView, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalComputed) {

  /**
   @class EmptyViewSupport
   @namespace Ember
   @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create({
    /**
     This provides metadata about what kind of empty view class this
     collection would like if it is being instantiated from another
     system (like Handlebars)
      @private
     @property emptyViewClass
    */
    emptyViewClass: _emberViewsViewsView["default"],

    /**
     An optional view to display if content is set to an empty array.
      @property emptyView
     @type Ember.View
     @default null
     @private
    */
    emptyView: null,

    _emptyView: (0, _emberMetalComputed.computed)("emptyView", "attrs.emptyViewClass", "emptyViewClass", function () {
      var emptyView = (0, _emberMetalProperty_get.get)(this, "emptyView");
      var attrsEmptyViewClass = this.getAttr("emptyViewClass");
      var emptyViewClass = (0, _emberMetalProperty_get.get)(this, "emptyViewClass");
      var inverse = (0, _emberMetalProperty_get.get)(this, "_itemViewInverse");
      var actualEmpty = emptyView || attrsEmptyViewClass;

      // Somehow, our previous semantics differed depending on whether the
      // `emptyViewClass` was provided on the JavaScript class or via the
      // Handlebars template.
      // In Glimmer, we disambiguate between the two by checking first (and
      // preferring) the attrs-supplied class.
      // If not present, we fall back to the class's `emptyViewClass`, but only
      // if an inverse has been provided via an `{{else}}`.
      if (inverse && actualEmpty) {
        if (actualEmpty.extend) {
          return actualEmpty.extend({ template: inverse });
        } else {
          (0, _emberMetalProperty_set.set)(actualEmpty, "template", inverse);
        }
      } else if (inverse && emptyViewClass) {
        return emptyViewClass.extend({ template: inverse });
      }

      return actualEmpty;
    })
  });
});
/**
 @module ember
 @submodule ember-views
*/
enifed("ember-views/mixins/instrumentation_support", ["exports", "ember-metal/mixin", "ember-metal/computed", "ember-metal/property_get"], function (exports, _emberMetalMixin, _emberMetalComputed, _emberMetalProperty_get) {

  /**
    @class InstrumentationSupport
    @namespace Ember
    @public
  */
  var InstrumentationSupport = _emberMetalMixin.Mixin.create({
    /**
      Used to identify this view during debugging
       @property instrumentDisplay
      @type String
      @public
    */
    instrumentDisplay: (0, _emberMetalComputed.computed)(function () {
      if (this.helperName) {
        return "{{" + this.helperName + "}}";
      }
    }),

    instrumentName: "view",

    instrumentDetails: function (hash) {
      hash.template = (0, _emberMetalProperty_get.get)(this, "templateName");
      this._super(hash);
    }
  });

  exports["default"] = InstrumentationSupport;
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/mixins/legacy_view_support", ["exports", "ember-metal/core", "ember-metal/mixin", "ember-metal/property_get"], function (exports, _emberMetalCore, _emberMetalMixin, _emberMetalProperty_get) {

  /**
    @class LegacyViewSupport
    @namespace Ember
    @private
  */
  var LegacyViewSupport = _emberMetalMixin.Mixin.create({
    beforeRender: function (buffer) {},

    afterRender: function (buffer) {},

    walkChildViews: function (callback) {
      var childViews = this.childViews.slice();

      while (childViews.length) {
        var view = childViews.pop();
        callback(view);
        childViews.push.apply(childViews, view.childViews);
      }
    },

    mutateChildViews: function (callback) {
      var childViews = (0, _emberMetalProperty_get.get)(this, "childViews");
      var idx = childViews.length;
      var view;

      while (--idx >= 0) {
        view = childViews[idx];
        callback(this, view, idx);
      }

      return this;
    },

    /**
      Removes all children from the `parentView`.
       @method removeAllChildren
      @return {Ember.View} receiver
      @private
    */
    removeAllChildren: function () {
      return this.mutateChildViews(function (parentView, view) {
        parentView.removeChild(view);
      });
    },

    destroyAllChildren: function () {
      return this.mutateChildViews(function (parentView, view) {
        view.destroy();
      });
    },

    /**
      Return the nearest ancestor whose parent is an instance of
      `klass`.
       @method nearestChildOf
      @param {Class} klass Subclass of Ember.View (or Ember.View itself)
      @return Ember.View
      @deprecated
      @private
    */
    nearestChildOf: function (klass) {
      _emberMetalCore["default"].deprecate("nearestChildOf has been deprecated.");

      var view = (0, _emberMetalProperty_get.get)(this, "parentView");

      while (view) {
        if ((0, _emberMetalProperty_get.get)(view, "parentView") instanceof klass) {
          return view;
        }
        view = (0, _emberMetalProperty_get.get)(view, "parentView");
      }
    },

    /**
      Return the nearest ancestor that is an instance of the provided
      class.
       @method nearestInstanceOf
      @param {Class} klass Subclass of Ember.View (or Ember.View itself)
      @return Ember.View
      @deprecated
      @private
    */
    nearestInstanceOf: function (klass) {
      _emberMetalCore["default"].deprecate("nearestInstanceOf is deprecated and will be removed from future releases. Use nearestOfType.");
      var view = (0, _emberMetalProperty_get.get)(this, "parentView");

      while (view) {
        if (view instanceof klass) {
          return view;
        }
        view = (0, _emberMetalProperty_get.get)(view, "parentView");
      }
    }
  });

  exports["default"] = LegacyViewSupport;
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/mixins/normalized_rerender_if_needed", ["exports", "ember-metal/property_get", "ember-metal/mixin", "ember-metal/merge", "ember-views/views/states"], function (exports, _emberMetalProperty_get, _emberMetalMixin, _emberMetalMerge, _emberViewsViewsStates) {

  var states = (0, _emberViewsViewsStates.cloneStates)(_emberViewsViewsStates.states);

  (0, _emberMetalMerge["default"])(states._default, {
    rerenderIfNeeded: function () {
      return this;
    }
  });

  (0, _emberMetalMerge["default"])(states.inDOM, {
    rerenderIfNeeded: function (view) {
      if (view.normalizedValue() !== view._lastNormalizedValue) {
        view.rerender();
      }
    }
  });

  exports["default"] = _emberMetalMixin.Mixin.create({
    _states: states,

    normalizedValue: function () {
      var value = this.lazyValue.value();
      var valueNormalizer = (0, _emberMetalProperty_get.get)(this, "valueNormalizerFunc");
      return valueNormalizer ? valueNormalizer(value) : value;
    },

    rerenderIfNeeded: function () {
      this.currentState.rerenderIfNeeded(this);
    }
  });
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/mixins/template_rendering_support", ["exports", "ember-metal/mixin"], function (exports, _emberMetalMixin) {

  // Circular dep
  var _renderView;

  /**
    @class TemplateRenderingSupport
    @namespace Ember
    @private
  */
  var TemplateRenderingSupport = _emberMetalMixin.Mixin.create({
    /**
      Called on your view when it should push strings of HTML into a
      `Ember.RenderBuffer`. Most users will want to override the `template`
      or `templateName` properties instead of this method.
       By default, `Ember.View` will look for a function in the `template`
      property and invoke it with the value of `context`. The value of
      `context` will be the view's controller unless you override it.
       @method renderBlock
      @param {Ember.RenderBuffer} buffer The render buffer
      @private
    */

    renderBlock: function (block, renderNode) {
      if (_renderView === undefined) {
        _renderView = eriuqer("ember-htmlbars/system/render-view");
      }

      return _renderView.renderHTMLBarsBlock(this, block, renderNode);
    }
  });

  exports["default"] = TemplateRenderingSupport;
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/mixins/text_support", ["exports", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/mixin", "ember-runtime/mixins/target_action_support"], function (exports, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalMixin, _emberRuntimeMixinsTarget_action_support) {

  /**
    `TextSupport` is a shared mixin used by both `Ember.TextField` and
    `Ember.TextArea`. `TextSupport` adds a number of methods that allow you to
    specify a controller action to invoke when a certain event is fired on your
    text field or textarea. The specifed controller action would get the current
    value of the field passed in as the only argument unless the value of
    the field is empty. In that case, the instance of the field itself is passed
    in as the only argument.
  
    Let's use the pressing of the escape key as an example. If you wanted to
    invoke a controller action when a user presses the escape key while on your
    field, you would use the `escape-press` attribute on your field like so:
  
    ```handlebars
      {{! application.hbs}}
  
      {{input escape-press='alertUser'}}
    ```
  
    ```javascript
        App = Ember.Application.create();
  
        App.ApplicationController = Ember.Controller.extend({
          actions: {
            alertUser: function ( currentValue ) {
              alert( 'escape pressed, current value: ' + currentValue );
            }
          }
        });
    ```
  
    The following chart is a visual representation of what takes place when the
    escape key is pressed in this scenario:
  
    ```
    The Template
    +---------------------------+
    |                           |
    | escape-press='alertUser'  |
    |                           |          TextSupport Mixin
    +----+----------------------+          +-------------------------------+
         |                                 | cancel method                 |
         |      escape button pressed      |                               |
         +-------------------------------> | checks for the `escape-press` |
                                           | attribute and pulls out the   |
         +-------------------------------+ | `alertUser` value             |
         |     action name 'alertUser'     +-------------------------------+
         |     sent to controller
         v
    Controller
    +------------------------------------------ +
    |                                           |
    |  actions: {                               |
    |     alertUser: function( currentValue ){  |
    |       alert( 'the esc key was pressed!' ) |
    |     }                                     |
    |  }                                        |
    |                                           |
    +-------------------------------------------+
    ```
  
    Here are the events that we currently support along with the name of the
    attribute you would need to use on your field. To reiterate, you would use the
    attribute name like so:
  
    ```handlebars
      {{input attribute-name='controllerAction'}}
    ```
  
    ```
    +--------------------+----------------+
    |                    |                |
    | event              | attribute name |
    +--------------------+----------------+
    | new line inserted  | insert-newline |
    |                    |                |
    | enter key pressed  | insert-newline |
    |                    |                |
    | cancel key pressed | escape-press   |
    |                    |                |
    | focusin            | focus-in       |
    |                    |                |
    | focusout           | focus-out      |
    |                    |                |
    | keypress           | key-press      |
    |                    |                |
    | keyup              | key-up         |
    |                    |                |
    | keydown            | key-down       |
    +--------------------+----------------+
    ```
  
    @class TextSupport
    @namespace Ember
    @uses Ember.TargetActionSupport
    @extends Ember.Mixin
    @private
  */
  var TextSupport = _emberMetalMixin.Mixin.create(_emberRuntimeMixinsTarget_action_support["default"], {
    value: "",

    attributeBindings: ["autocapitalize", "autocorrect", "autofocus", "disabled", "form", "maxlength", "placeholder", "readonly", "required", "selectionDirection", "spellcheck", "tabindex", "title"],
    placeholder: null,
    disabled: false,
    maxlength: null,

    init: function () {
      this._super.apply(this, arguments);
      this.on("paste", this, this._elementValueDidChange);
      this.on("cut", this, this._elementValueDidChange);
      this.on("input", this, this._elementValueDidChange);
    },

    /**
      The action to be sent when the user presses the return key.
       This is similar to the `{{action}}` helper, but is fired when
      the user presses the return key when editing a text field, and sends
      the value of the field as the context.
       @property action
      @type String
      @default null
      @private
    */
    action: null,

    /**
      The event that should send the action.
       Options are:
       * `enter`: the user pressed enter
      * `keyPress`: the user pressed a key
       @property onEvent
      @type String
      @default enter
      @private
    */
    onEvent: "enter",

    /**
      Whether the `keyUp` event that triggers an `action` to be sent continues
      propagating to other views.
       By default, when the user presses the return key on their keyboard and
      the text field has an `action` set, the action will be sent to the view's
      controller and the key event will stop propagating.
       If you would like parent views to receive the `keyUp` event even after an
      action has been dispatched, set `bubbles` to true.
       @property bubbles
      @type Boolean
      @default false
      @private
    */
    bubbles: false,

    interpretKeyEvents: function (event) {
      var map = TextSupport.KEY_EVENTS;
      var method = map[event.keyCode];

      this._elementValueDidChange();
      if (method) {
        return this[method](event);
      }
    },

    _elementValueDidChange: function () {
      // Using readDOMAttr will ensure that HTMLBars knows the last
      // value.
      (0, _emberMetalProperty_set.set)(this, "value", this.readDOMAttr("value"));
    },

    change: function (event) {
      this._elementValueDidChange(event);
    },

    /**
      Allows you to specify a controller action to invoke when either the `enter`
      key is pressed or, in the case of the field being a textarea, when a newline
      is inserted. To use this method, give your field an `insert-newline`
      attribute. The value of that attribute should be the name of the action
      in your controller that you wish to invoke.
       For an example on how to use the `insert-newline` attribute, please
      reference the example near the top of this file.
       @method insertNewline
      @param {Event} event
      @private
    */
    insertNewline: function (event) {
      sendAction("enter", this, event);
      sendAction("insert-newline", this, event);
    },

    /**
      Allows you to specify a controller action to invoke when the escape button
      is pressed. To use this method, give your field an `escape-press`
      attribute. The value of that attribute should be the name of the action
      in your controller that you wish to invoke.
       For an example on how to use the `escape-press` attribute, please reference
      the example near the top of this file.
       @method cancel
      @param {Event} event
      @private
    */
    cancel: function (event) {
      sendAction("escape-press", this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a field receives
      focus. To use this method, give your field a `focus-in` attribute. The value
      of that attribute should be the name of the action in your controller
      that you wish to invoke.
       For an example on how to use the `focus-in` attribute, please reference the
      example near the top of this file.
       @method focusIn
      @param {Event} event
      @private
    */
    focusIn: function (event) {
      sendAction("focus-in", this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a field loses
      focus. To use this method, give your field a `focus-out` attribute. The value
      of that attribute should be the name of the action in your controller
      that you wish to invoke.
       For an example on how to use the `focus-out` attribute, please reference the
      example near the top of this file.
       @method focusOut
      @param {Event} event
      @private
    */
    focusOut: function (event) {
      this._elementValueDidChange(event);
      sendAction("focus-out", this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a key is pressed.
      To use this method, give your field a `key-press` attribute. The value of
      that attribute should be the name of the action in your controller you
      that wish to invoke.
       For an example on how to use the `key-press` attribute, please reference the
      example near the top of this file.
       @method keyPress
      @param {Event} event
      @private
    */
    keyPress: function (event) {
      sendAction("key-press", this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a key-up event is
      fired. To use this method, give your field a `key-up` attribute. The value
      of that attribute should be the name of the action in your controller
      that you wish to invoke.
       For an example on how to use the `key-up` attribute, please reference the
      example near the top of this file.
       @method keyUp
      @param {Event} event
      @private
    */
    keyUp: function (event) {
      this.interpretKeyEvents(event);

      this.sendAction("key-up", (0, _emberMetalProperty_get.get)(this, "value"), event);
    },

    /**
      Allows you to specify a controller action to invoke when a key-down event is
      fired. To use this method, give your field a `key-down` attribute. The value
      of that attribute should be the name of the action in your controller that
      you wish to invoke.
       For an example on how to use the `key-down` attribute, please reference the
      example near the top of this file.
       @method keyDown
      @param {Event} event
      @private
    */
    keyDown: function (event) {
      this.sendAction("key-down", (0, _emberMetalProperty_get.get)(this, "value"), event);
    }
  });

  TextSupport.KEY_EVENTS = {
    13: "insertNewline",
    27: "cancel"
  };

  // In principle, this shouldn't be necessary, but the legacy
  // sendAction semantics for TextField are different from
  // the component semantics so this method normalizes them.
  function sendAction(eventName, view, event) {
    var action = (0, _emberMetalProperty_get.get)(view, "attrs." + eventName) || (0, _emberMetalProperty_get.get)(view, eventName);
    var on = (0, _emberMetalProperty_get.get)(view, "onEvent");
    var value = (0, _emberMetalProperty_get.get)(view, "value");

    // back-compat support for keyPress as an event name even though
    // it's also a method name that consumes the event (and therefore
    // incompatible with sendAction semantics).
    if (on === eventName || on === "keyPress" && eventName === "key-press") {
      view.sendAction("action", value);
    }

    view.sendAction(eventName, value);

    if (action || on === eventName) {
      if (!(0, _emberMetalProperty_get.get)(view, "bubbles")) {
        event.stopPropagation();
      }
    }
  }

  exports["default"] = TextSupport;
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/mixins/view_child_views_support", ["exports", "ember-metal/core", "ember-metal/mixin", "ember-metal/enumerable_utils", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/set_properties"], function (exports, _emberMetalCore, _emberMetalMixin, _emberMetalEnumerable_utils, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalSet_properties) {

  var EMPTY_ARRAY = [];

  var ViewChildViewsSupport = _emberMetalMixin.Mixin.create({
    /**
      Array of child views. You should never edit this array directly.
      Instead, use `appendChild` and `removeFromParent`.
       @property childViews
      @type Array
      @default []
      @private
    */
    childViews: EMPTY_ARRAY,

    init: function () {
      this._super.apply(this, arguments);

      // setup child views. be sure to clone the child views array first
      // 2.0TODO: Remove Ember.A() here
      this.childViews = _emberMetalCore["default"].A(this.childViews.slice());
      this.ownerView = this;
    },

    appendChild: function (view) {
      this.linkChild(view);
      this.childViews.push(view);
    },

    destroyChild: function (view) {
      view.destroy();
    },

    /**
      Removes the child view from the parent view.
       @method removeChild
      @param {Ember.View} view
      @return {Ember.View} receiver
      @private
    */
    removeChild: function (view) {
      // If we're destroying, the entire subtree will be
      // freed, and the DOM will be handled separately,
      // so no need to mess with childViews.
      if (this.isDestroying) {
        return;
      }

      // update parent node
      this.unlinkChild(view);

      // remove view from childViews array.
      var childViews = (0, _emberMetalProperty_get.get)(this, "childViews");

      (0, _emberMetalEnumerable_utils.removeObject)(childViews, view);

      return this;
    },

    /**
      Instantiates a view to be added to the childViews array during view
      initialization. You generally will not call this method directly unless
      you are overriding `createChildViews()`. Note that this method will
      automatically configure the correct settings on the new view instance to
      act as a child of the parent.
       @method createChildView
      @param {Class|String} viewClass
      @param {Object} [attrs] Attributes to add
      @return {Ember.View} new instance
      @private
    */
    createChildView: function (maybeViewClass, _attrs) {
      if (!maybeViewClass) {
        throw new TypeError("createChildViews first argument must exist");
      }

      if (maybeViewClass.isView && maybeViewClass.parentView === this && maybeViewClass.container === this.container) {
        return maybeViewClass;
      }

      var attrs = _attrs || {};
      var view;
      attrs.renderer = this.renderer;
      attrs._viewRegistry = this._viewRegistry;

      if (maybeViewClass.isViewFactory) {
        attrs.container = this.container;

        view = maybeViewClass.create(attrs);

        if (view.viewName) {
          (0, _emberMetalProperty_set.set)(this, view.viewName, view);
        }
      } else if ("string" === typeof maybeViewClass) {
        var fullName = "view:" + maybeViewClass;
        var ViewKlass = this.container.lookupFactory(fullName);

        _emberMetalCore["default"].assert("Could not find view: '" + fullName + "'", !!ViewKlass);

        view = ViewKlass.create(attrs);
      } else {
        view = maybeViewClass;
        _emberMetalCore["default"].assert("You must pass instance or subclass of View", view.isView);

        attrs.container = this.container;
        (0, _emberMetalSet_properties["default"])(view, attrs);
      }

      this.linkChild(view);

      return view;
    },

    linkChild: function (instance) {
      instance.container = this.container;
      (0, _emberMetalProperty_set.set)(instance, "parentView", this);
      instance.trigger("parentViewDidChange");
      instance.ownerView = this.ownerView;
    },

    unlinkChild: function (instance) {
      (0, _emberMetalProperty_set.set)(instance, "parentView", null);
      instance.trigger("parentViewDidChange");
    }
  });

  exports["default"] = ViewChildViewsSupport;
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/mixins/view_context_support", ["exports", "ember-metal/mixin", "ember-metal/computed", "ember-metal/property_get", "ember-metal/property_set", "ember-views/mixins/legacy_view_support", "ember-metal/events"], function (exports, _emberMetalMixin, _emberMetalComputed, _emberMetalProperty_get, _emberMetalProperty_set, _emberViewsMixinsLegacy_view_support, _emberMetalEvents) {

  var ViewContextSupport = _emberMetalMixin.Mixin.create(_emberViewsMixinsLegacy_view_support["default"], {
    /**
      The object from which templates should access properties.
       This object will be passed to the template function each time the render
      method is called, but it is up to the individual function to decide what
      to do with it.
       By default, this will be the view's controller.
       @property context
      @type Object
      @private
    */
    context: (0, _emberMetalComputed.computed)({
      get: function () {
        return (0, _emberMetalProperty_get.get)(this, "_context");
      },
      set: function (key, value) {
        (0, _emberMetalProperty_set.set)(this, "_context", value);
        return value;
      }
    })["volatile"](),

    /**
      Private copy of the view's template context. This can be set directly
      by Handlebars without triggering the observer that causes the view
      to be re-rendered.
       The context of a view is looked up as follows:
       1. Supplied context (usually by Handlebars)
      2. Specified controller
      3. `parentView`'s context (for a child of a ContainerView)
       The code in Handlebars that overrides the `_context` property first
      checks to see whether the view has a specified controller. This is
      something of a hack and should be revisited.
       @property _context
      @private
    */
    _context: (0, _emberMetalComputed.computed)({
      get: function () {
        var parentView, controller;

        if (controller = (0, _emberMetalProperty_get.get)(this, "controller")) {
          return controller;
        }

        parentView = this.parentView;
        if (parentView) {
          return (0, _emberMetalProperty_get.get)(parentView, "_context");
        }
        return null;
      },
      set: function (key, value) {
        return value;
      }
    }),

    _controller: null,

    /**
      The controller managing this view. If this property is set, it will be
      made available for use by the template.
       @property controller
      @type Object
      @private
    */
    controller: (0, _emberMetalComputed.computed)({
      get: function () {
        if (this._controller) {
          return this._controller;
        }

        return this.parentView ? (0, _emberMetalProperty_get.get)(this.parentView, "controller") : null;
      },
      set: function (_, value) {
        this._controller = value;
        return value;
      }
    }),

    _legacyControllerDidChange: (0, _emberMetalMixin.observer)("controller", function () {
      this.walkChildViews(function (view) {
        return view.notifyPropertyChange("controller");
      });
    }),

    _notifyControllerChange: (0, _emberMetalEvents.on)("parentViewDidChange", function () {
      this.notifyPropertyChange("controller");
    })
  });

  exports["default"] = ViewContextSupport;
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/mixins/view_state_support", ["exports", "ember-metal/core", "ember-metal/mixin"], function (exports, _emberMetalCore, _emberMetalMixin) {

  var ViewStateSupport = _emberMetalMixin.Mixin.create({
    transitionTo: function (state) {
      _emberMetalCore["default"].deprecate("Ember.View#transitionTo has been deprecated, it is for internal use only");
      this._transitionTo(state);
    },

    _transitionTo: function (state) {
      var priorState = this.currentState;
      var currentState = this.currentState = this._states[state];
      this._state = state;

      if (priorState && priorState.exit) {
        priorState.exit(this);
      }
      if (currentState.enter) {
        currentState.enter(this);
      }
    }
  });

  exports["default"] = ViewStateSupport;
});
enifed("ember-views/mixins/view_target_action_support", ["exports", "ember-metal/mixin", "ember-runtime/mixins/target_action_support", "ember-metal/alias"], function (exports, _emberMetalMixin, _emberRuntimeMixinsTarget_action_support, _emberMetalAlias) {

  /**
  `Ember.ViewTargetActionSupport` is a mixin that can be included in a
  view class to add a `triggerAction` method with semantics similar to
  the Handlebars `{{action}}` helper. It provides intelligent defaults
  for the action's target: the view's controller; and the context that is
  sent with the action: the view's context.
  
  Note: In normal Ember usage, the `{{action}}` helper is usually the best
  choice. This mixin is most often useful when you are doing more complex
  event handling in custom View subclasses.
  
  For example:
  
  ```javascript
  App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {
    action: 'save',
    click: function() {
      this.triggerAction(); // Sends the `save` action, along with the current context
                            // to the current controller
    }
  });
  ```
  
  The `action` can be provided as properties of an optional object argument
  to `triggerAction` as well.
  
  ```javascript
  App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {
    click: function() {
      this.triggerAction({
        action: 'save'
      }); // Sends the `save` action, along with the current context
          // to the current controller
    }
  });
  ```
  
  @class ViewTargetActionSupport
  @namespace Ember
  @extends Ember.TargetActionSupport
  @private
  */
  exports["default"] = _emberMetalMixin.Mixin.create(_emberRuntimeMixinsTarget_action_support["default"], {
    /**
     @property target
     @private
    */
    target: (0, _emberMetalAlias["default"])("controller"),
    /**
     @property actionContext
     @private
    */
    actionContext: (0, _emberMetalAlias["default"])("context")
  });
});
enifed("ember-views/mixins/visibility_support", ["exports", "ember-metal/mixin", "ember-metal/property_get", "ember-metal/run_loop"], function (exports, _emberMetalMixin, _emberMetalProperty_get, _emberMetalRun_loop) {

  function K() {
    return this;
  }

  /**
   @class VisibilitySupport
   @namespace Ember
   @public
  */
  var VisibilitySupport = _emberMetalMixin.Mixin.create({
    /**
      If `false`, the view will appear hidden in DOM.
       @property isVisible
      @type Boolean
      @default null
      @public
    */
    isVisible: true,

    becameVisible: K,
    becameHidden: K,

    /**
      When the view's `isVisible` property changes, toggle the visibility
      element of the actual DOM element.
       @method _isVisibleDidChange
      @private
    */
    _isVisibleDidChange: (0, _emberMetalMixin.observer)("isVisible", function () {
      if (this._isVisible === (0, _emberMetalProperty_get.get)(this, "isVisible")) {
        return;
      }
      _emberMetalRun_loop["default"].scheduleOnce("render", this, this._toggleVisibility);
    }),

    _toggleVisibility: function () {
      var $el = this.$();
      var isVisible = (0, _emberMetalProperty_get.get)(this, "isVisible");

      if (this._isVisible === isVisible) {
        return;
      }

      // It's important to keep these in sync, even if we don't yet have
      // an element in the DOM to manipulate:
      this._isVisible = isVisible;

      if (!$el) {
        return;
      }

      $el.toggle(isVisible);

      if (this._isAncestorHidden()) {
        return;
      }

      if (isVisible) {
        this._notifyBecameVisible();
      } else {
        this._notifyBecameHidden();
      }
    },

    _notifyBecameVisible: function () {
      this.trigger("becameVisible");

      this.forEachChildView(function (view) {
        var isVisible = (0, _emberMetalProperty_get.get)(view, "isVisible");

        if (isVisible || isVisible === null) {
          view._notifyBecameVisible();
        }
      });
    },

    _notifyBecameHidden: function () {
      this.trigger("becameHidden");
      this.forEachChildView(function (view) {
        var isVisible = (0, _emberMetalProperty_get.get)(view, "isVisible");

        if (isVisible || isVisible === null) {
          view._notifyBecameHidden();
        }
      });
    },

    _isAncestorHidden: function () {
      var parent = (0, _emberMetalProperty_get.get)(this, "parentView");

      while (parent) {
        if ((0, _emberMetalProperty_get.get)(parent, "isVisible") === false) {
          return true;
        }

        parent = (0, _emberMetalProperty_get.get)(parent, "parentView");
      }

      return false;
    }
  });

  exports["default"] = VisibilitySupport;
});
/**
 @module ember
 @submodule ember-views
*/
enifed("ember-views/streams/class_name_binding", ["exports", "ember-metal/streams/utils", "ember-metal/property_get", "ember-runtime/system/string", "ember-metal/utils"], function (exports, _emberMetalStreamsUtils, _emberMetalProperty_get, _emberRuntimeSystemString, _emberMetalUtils) {
  exports.parsePropertyPath = parsePropertyPath;
  exports.classStringForValue = classStringForValue;
  exports.streamifyClassNameBinding = streamifyClassNameBinding;

  /**
    Parse a path and return an object which holds the parsed properties.
  
    For example a path like "content.isEnabled:enabled:disabled" will return the
    following object:
  
    ```javascript
    {
      path: "content.isEnabled",
      className: "enabled",
      falsyClassName: "disabled",
      classNames: ":enabled:disabled"
    }
    ```
  
    @method parsePropertyPath
    @static
    @private
  */

  function parsePropertyPath(path) {
    var split = path.split(":");
    var propertyPath = split[0];
    var classNames = "";
    var className, falsyClassName;

    // check if the property is defined as prop:class or prop:trueClass:falseClass
    if (split.length > 1) {
      className = split[1];
      if (split.length === 3) {
        falsyClassName = split[2];
      }

      classNames = ":" + className;
      if (falsyClassName) {
        classNames += ":" + falsyClassName;
      }
    }

    return {
      path: propertyPath,
      classNames: classNames,
      className: className === "" ? undefined : className,
      falsyClassName: falsyClassName
    };
  }

  /**
    Get the class name for a given value, based on the path, optional
    `className` and optional `falsyClassName`.
  
    - if a `className` or `falsyClassName` has been specified:
      - if the value is truthy and `className` has been specified,
        `className` is returned
      - if the value is falsy and `falsyClassName` has been specified,
        `falsyClassName` is returned
      - otherwise `null` is returned
    - if the value is `true`, the dasherized last part of the supplied path
      is returned
    - if the value is not `false`, `undefined` or `null`, the `value`
      is returned
    - if none of the above rules apply, `null` is returned
  
    @method classStringForValue
    @param path
    @param val
    @param className
    @param falsyClassName
    @static
    @private
  */

  function classStringForValue(path, val, className, falsyClassName) {
    if ((0, _emberMetalUtils.isArray)(val)) {
      val = (0, _emberMetalProperty_get.get)(val, "length") !== 0;
    }

    // When using the colon syntax, evaluate the truthiness or falsiness
    // of the value to determine which className to return
    if (className || falsyClassName) {
      if (className && !!val) {
        return className;
      } else if (falsyClassName && !val) {
        return falsyClassName;
      } else {
        return null;
      }

      // If value is a Boolean and true, return the dasherized property
      // name.
    } else if (val === true) {
      // Normalize property path to be suitable for use
      // as a class name. For exaple, content.foo.barBaz
      // becomes bar-baz.
      var parts = path.split(".");
      return (0, _emberRuntimeSystemString.dasherize)(parts[parts.length - 1]);

      // If the value is not false, undefined, or null, return the current
      // value of the property.
    } else if (val !== false && val != null) {
      return val;

      // Nothing to display. Return null so that the old class is removed
      // but no new class is added.
    } else {
      return null;
    }
  }

  function streamifyClassNameBinding(view, classNameBinding, prefix) {
    prefix = prefix || "";
    Ember.assert("classNameBindings must not have spaces in them. Multiple class name bindings can be provided as elements of an array, e.g. ['foo', ':bar']", classNameBinding.indexOf(" ") === -1);
    var parsedPath = parsePropertyPath(classNameBinding);
    if (parsedPath.path === "") {
      return classStringForValue(parsedPath.path, true, parsedPath.className, parsedPath.falsyClassName);
    } else {
      var pathValue = view.getStream(prefix + parsedPath.path);
      return (0, _emberMetalStreamsUtils.chain)(pathValue, function () {
        return classStringForValue(parsedPath.path, (0, _emberMetalStreamsUtils.read)(pathValue), parsedPath.className, parsedPath.falsyClassName);
      });
    }
  }
});
enifed("ember-views/streams/should_display", ["exports", "ember-metal/platform/create", "ember-metal/merge", "ember-metal/property_get", "ember-runtime/utils", "ember-metal/streams/stream", "ember-metal/streams/utils"], function (exports, _emberMetalPlatformCreate, _emberMetalMerge, _emberMetalProperty_get, _emberRuntimeUtils, _emberMetalStreamsStream, _emberMetalStreamsUtils) {
  exports["default"] = shouldDisplay;

  function shouldDisplay(predicate) {
    if ((0, _emberMetalStreamsUtils.isStream)(predicate)) {
      return new ShouldDisplayStream(predicate);
    }

    var truthy = predicate && (0, _emberMetalProperty_get.get)(predicate, "isTruthy");
    if (typeof truthy === "boolean") {
      return truthy;
    }

    if ((0, _emberRuntimeUtils.isArray)(predicate)) {
      return (0, _emberMetalProperty_get.get)(predicate, "length") !== 0;
    } else {
      return !!predicate;
    }
  }

  function ShouldDisplayStream(predicate) {
    Ember.assert("ShouldDisplayStream error: predicate must be a stream", (0, _emberMetalStreamsUtils.isStream)(predicate));

    var isTruthy = predicate.get("isTruthy");

    this.init();
    this.predicate = predicate;
    this.isTruthy = isTruthy;
    this.lengthDep = null;

    this.addDependency(predicate);
    this.addDependency(isTruthy);
  }

  ShouldDisplayStream.prototype = (0, _emberMetalPlatformCreate["default"])(_emberMetalStreamsStream["default"].prototype);

  (0, _emberMetalMerge["default"])(ShouldDisplayStream.prototype, {
    compute: function () {
      var truthy = (0, _emberMetalStreamsUtils.read)(this.isTruthy);

      if (typeof truthy === "boolean") {
        return truthy;
      }

      if (this.lengthDep) {
        return this.lengthDep.getValue() !== 0;
      } else {
        return !!(0, _emberMetalStreamsUtils.read)(this.predicate);
      }
    },

    revalidate: function () {
      if ((0, _emberRuntimeUtils.isArray)((0, _emberMetalStreamsUtils.read)(this.predicate))) {
        if (!this.lengthDep) {
          this.lengthDep = this.addMutableDependency(this.predicate.get("length"));
        }
      } else {
        if (this.lengthDep) {
          this.lengthDep.destroy();
          this.lengthDep = null;
        }
      }
    }
  });
});
enifed("ember-views/streams/utils", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/path_cache", "ember-runtime/system/string", "ember-metal/streams/utils", "ember-runtime/mixins/controller"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalPath_cache, _emberRuntimeSystemString, _emberMetalStreamsUtils, _emberRuntimeMixinsController) {
  exports.readViewFactory = readViewFactory;
  exports.readComponentFactory = readComponentFactory;
  exports.readUnwrappedModel = readUnwrappedModel;

  function readViewFactory(object, container) {
    var value = (0, _emberMetalStreamsUtils.read)(object);
    var viewClass;

    if (typeof value === "string") {
      if ((0, _emberMetalPath_cache.isGlobal)(value)) {
        viewClass = (0, _emberMetalProperty_get.get)(null, value);
        _emberMetalCore["default"].deprecate("Resolved the view \"" + value + "\" on the global context. Pass a view name to be looked up on the container instead, such as {{view \"select\"}}.", !viewClass, { url: "http://emberjs.com/guides/deprecations/#toc_global-lookup-of-views" });
      } else {
        _emberMetalCore["default"].assert("View requires a container to resolve views not passed in through the context", !!container);
        viewClass = container.lookupFactory("view:" + value);
      }
    } else {
      viewClass = value;
    }

    _emberMetalCore["default"].assert((0, _emberRuntimeSystemString.fmt)(value + " must be a subclass or an instance of Ember.View, not %@", [viewClass]), (function (viewClass) {
      return viewClass && (viewClass.isViewFactory || viewClass.isView || viewClass.isComponentFactory || viewClass.isComponent);
    })(viewClass));

    return viewClass;
  }

  function readComponentFactory(nameOrStream, container) {
    var name = (0, _emberMetalStreamsUtils.read)(nameOrStream);
    var componentLookup = container.lookup("component-lookup:main");
    _emberMetalCore["default"].assert("Could not find 'component-lookup:main' on the provided container," + " which is necessary for performing component lookups", componentLookup);

    return componentLookup.lookupFactory(name, container);
  }

  function readUnwrappedModel(object) {
    if ((0, _emberMetalStreamsUtils.isStream)(object)) {
      var result = object.value();

      // If the path is exactly `controller` then we don't unwrap it.
      if (object.label !== "controller") {
        while (_emberRuntimeMixinsController["default"].detect(result)) {
          result = (0, _emberMetalProperty_get.get)(result, "model");
        }
      }

      return result;
    } else {
      return object;
    }
  }
});
enifed("ember-views/system/action_manager", ["exports"], function (exports) {
  /**
  @module ember
  @submodule ember-views
  */

  function ActionManager() {}

  /**
    Global action id hash.
  
    @private
    @property registeredActions
    @type Object
  */
  ActionManager.registeredActions = {};

  exports["default"] = ActionManager;
});
enifed("ember-views/system/build-component-template", ["exports", "htmlbars-runtime", "ember-htmlbars/hooks/get-value", "ember-metal/property_get", "ember-metal/path_cache"], function (exports, _htmlbarsRuntime, _emberHtmlbarsHooksGetValue, _emberMetalProperty_get, _emberMetalPath_cache) {
  exports["default"] = buildComponentTemplate;

  function buildComponentTemplate(_ref, attrs, content) {
    var component = _ref.component;
    var layout = _ref.layout;
    var isAngleBracket = _ref.isAngleBracket;

    var blockToRender, tagName, meta;

    if (component === undefined) {
      component = null;
    }

    if (layout && layout.raw) {
      var yieldTo = createContentBlocks(content.templates, content.scope, content.self, component);
      blockToRender = createLayoutBlock(layout.raw, yieldTo, content.self, component, attrs);
      meta = layout.raw.meta;
    } else if (content.templates && content.templates["default"]) {
      blockToRender = createContentBlock(content.templates["default"], content.scope, content.self, component);
      meta = content.templates["default"].meta;
    }

    if (component) {
      tagName = tagNameFor(component);

      // If this is not a tagless component, we need to create the wrapping
      // element. We use `manualElement` to create a template that represents
      // the wrapping element and yields to the previous block.
      if (tagName !== "") {
        var attributes = normalizeComponentAttributes(component, isAngleBracket, attrs);
        var elementTemplate = _htmlbarsRuntime.internal.manualElement(tagName, attributes);
        elementTemplate.meta = meta;

        blockToRender = createElementBlock(elementTemplate, blockToRender, component);
      } else {
        validateTaglessComponent(component);
      }
    }

    // tagName is one of:
    //   * `undefined` if no component is present
    //   * the falsy value "" if set explicitly on the component
    //   * an actual tagName set explicitly on the component
    return { createdElement: !!tagName, block: blockToRender };
  }

  function blockFor(template, options) {
    Ember.assert("BUG: Must pass a template to blockFor", !!template);
    return _htmlbarsRuntime.internal.blockFor(_htmlbarsRuntime.render, template, options);
  }

  function createContentBlock(template, scope, self, component) {
    Ember.assert("BUG: buildComponentTemplate can take a scope or a self, but not both", !(scope && self));

    return blockFor(template, {
      scope: scope,
      self: self,
      options: { view: component }
    });
  }

  function createContentBlocks(templates, scope, self, component) {
    if (!templates) {
      return;
    }
    var output = {};
    for (var name in templates) {
      if (templates.hasOwnProperty(name)) {
        var template = templates[name];
        if (template) {
          output[name] = createContentBlock(templates[name], scope, self, component);
        }
      }
    }
    return output;
  }

  function createLayoutBlock(template, yieldTo, self, component, attrs) {
    return blockFor(template, {
      yieldTo: yieldTo,

      // If we have an old-style Controller with a template it will be
      // passed as our `self` argument, and it should be the context for
      // the template. Otherwise, we must have a real Component and it
      // should be its own template context.
      self: self || component,

      options: { view: component, attrs: attrs }
    });
  }

  function createElementBlock(template, yieldTo, component) {
    return blockFor(template, {
      yieldTo: yieldTo,
      self: component,
      options: { view: component }
    });
  }

  function tagNameFor(view) {
    var tagName = view.tagName;

    if (tagName !== null && typeof tagName === "object" && tagName.isDescriptor) {
      tagName = (0, _emberMetalProperty_get.get)(view, "tagName");
      Ember.deprecate("In the future using a computed property to define tagName will not be permitted. That value will be respected, but changing it will not update the element.", !tagName);
    }

    if (tagName === null || tagName === undefined) {
      tagName = view._defaultTagName || "div";
    }

    return tagName;
  }

  // Takes a component and builds a normalized set of attribute
  // bindings consumable by HTMLBars' `attribute` hook.
  function normalizeComponentAttributes(component, isAngleBracket, attrs) {
    var normalized = {};
    var attributeBindings = component.attributeBindings;
    var i, l;

    if (attributeBindings) {
      for (i = 0, l = attributeBindings.length; i < l; i++) {
        var attr = attributeBindings[i];
        var colonIndex = attr.indexOf(":");

        var attrName, expression;
        if (colonIndex !== -1) {
          var attrProperty = attr.substring(0, colonIndex);
          attrName = attr.substring(colonIndex + 1);
          expression = ["get", "view." + attrProperty];
        } else if (attrs[attr]) {
          // TODO: For compatibility with 1.x, we probably need to `set`
          // the component's attribute here if it is a CP, but we also
          // probably want to suspend observers and allow the
          // willUpdateAttrs logic to trigger observers at the correct time.
          attrName = attr;
          expression = ["value", attrs[attr]];
        } else {
          attrName = attr;
          expression = ["get", "view." + attr];
        }

        Ember.assert("You cannot use class as an attributeBinding, use classNameBindings instead.", attrName !== "class");

        normalized[attrName] = expression;
      }
    }

    if (isAngleBracket) {
      for (var prop in attrs) {
        var val = attrs[prop];
        if (!val) {
          continue;
        }

        if (typeof val === "string" || val.isConcat) {
          normalized[prop] = ["value", val];
        }
      }
    }

    if (attrs.id && (0, _emberHtmlbarsHooksGetValue["default"])(attrs.id)) {
      // Do not allow binding to the `id`
      normalized.id = (0, _emberHtmlbarsHooksGetValue["default"])(attrs.id);
      component.elementId = normalized.id;
    } else {
      normalized.id = component.elementId;
    }

    if (attrs.tagName) {
      component.tagName = attrs.tagName;
    }

    var normalizedClass = normalizeClass(component, attrs);

    if (normalizedClass) {
      normalized["class"] = normalizedClass;
    }

    if ((0, _emberMetalProperty_get.get)(component, "isVisible") === false) {
      var hiddenStyle = ["subexpr", "-html-safe", ["display: none;"], []];
      var existingStyle = normalized.style;

      if (existingStyle) {
        normalized.style = ["subexpr", "concat", [existingStyle, " ", hiddenStyle], []];
      } else {
        normalized.style = hiddenStyle;
      }
    }

    return normalized;
  }

  function normalizeClass(component, attrs) {
    var i, l;
    var normalizedClass = [];
    var classNames = (0, _emberMetalProperty_get.get)(component, "classNames");
    var classNameBindings = (0, _emberMetalProperty_get.get)(component, "classNameBindings");

    if (attrs["class"]) {
      if (typeof attrs["class"] === "string") {
        normalizedClass.push(attrs["class"]);
      } else {
        normalizedClass.push(["subexpr", "-normalize-class", [["value", attrs["class"].path], ["value", attrs["class"]]], []]);
      }
    }

    if (attrs.classBinding) {
      normalizeClasses(attrs.classBinding.split(" "), normalizedClass);
    }

    if (attrs.classNames) {
      normalizedClass.push(["value", attrs.classNames]);
    }

    if (classNames) {
      for (i = 0, l = classNames.length; i < l; i++) {
        normalizedClass.push(classNames[i]);
      }
    }

    if (classNameBindings) {
      normalizeClasses(classNameBindings, normalizedClass);
    }

    if (normalizeClass.length) {
      return ["subexpr", "-join-classes", normalizedClass, []];
    }
  }

  function normalizeClasses(classes, output) {
    var i, l;

    for (i = 0, l = classes.length; i < l; i++) {
      var className = classes[i];
      Ember.assert("classNameBindings must not have spaces in them. Multiple class name bindings can be provided as elements of an array, e.g. ['foo', ':bar']", className.indexOf(" ") === -1);

      var _className$split = className.split(":");

      var propName = _className$split[0];
      var activeClass = _className$split[1];
      var inactiveClass = _className$split[2];

      // Legacy :class microsyntax for static class names
      if (propName === "") {
        output.push(activeClass);
        continue;
      }

      // 2.0TODO: Remove deprecated global path
      var prop = (0, _emberMetalPath_cache.isGlobal)(propName) ? propName : "view." + propName;

      output.push(["subexpr", "-normalize-class", [
      // params
      ["value", propName], ["get", prop]], [
      // hash
      "activeClass", activeClass, "inactiveClass", inactiveClass]]);
    }
  }

  function validateTaglessComponent(component) {
    Ember.assert("You cannot use `classNameBindings` on a tag-less component: " + component.toString(), function () {
      var classNameBindings = component.classNameBindings;
      return !classNameBindings || classNameBindings.length === 0;
    });
  }
});
enifed("ember-views/system/event_dispatcher", ["exports", "ember-metal/core", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/is_none", "ember-metal/run_loop", "ember-runtime/system/string", "ember-runtime/system/object", "ember-views/system/jquery", "ember-views/system/action_manager", "ember-views/views/view", "ember-metal/merge"], function (exports, _emberMetalCore, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalIs_none, _emberMetalRun_loop, _emberRuntimeSystemString, _emberRuntimeSystemObject, _emberViewsSystemJquery, _emberViewsSystemAction_manager, _emberViewsViewsView, _emberMetalMerge) {

  /**
    `Ember.EventDispatcher` handles delegating browser events to their
    corresponding `Ember.Views.` For example, when you click on a view,
    `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
    called.
  
    @class EventDispatcher
    @namespace Ember
    @private
    @extends Ember.Object
  */
  exports["default"] = _emberRuntimeSystemObject["default"].extend({

    /**
      The set of events names (and associated handler function names) to be setup
      and dispatched by the `EventDispatcher`. Custom events can added to this list at setup
      time, generally via the `Ember.Application.customEvents` hash. Only override this
      default set to prevent the EventDispatcher from listening on some events all together.
       This set will be modified by `setup` to also include any events added at that time.
       @property events
      @type Object
      @private
    */
    events: {
      touchstart: "touchStart",
      touchmove: "touchMove",
      touchend: "touchEnd",
      touchcancel: "touchCancel",
      keydown: "keyDown",
      keyup: "keyUp",
      keypress: "keyPress",
      mousedown: "mouseDown",
      mouseup: "mouseUp",
      contextmenu: "contextMenu",
      click: "click",
      dblclick: "doubleClick",
      mousemove: "mouseMove",
      focusin: "focusIn",
      focusout: "focusOut",
      mouseenter: "mouseEnter",
      mouseleave: "mouseLeave",
      submit: "submit",
      input: "input",
      change: "change",
      dragstart: "dragStart",
      drag: "drag",
      dragenter: "dragEnter",
      dragleave: "dragLeave",
      dragover: "dragOver",
      drop: "drop",
      dragend: "dragEnd"
    },

    /**
      The root DOM element to which event listeners should be attached. Event
      listeners will be attached to the document unless this is overridden.
       Can be specified as a DOMElement or a selector string.
       The default body is a string since this may be evaluated before document.body
      exists in the DOM.
       @private
      @property rootElement
      @type DOMElement
      @default 'body'
    */
    rootElement: "body",

    /**
      It enables events to be dispatched to the view's `eventManager.` When present,
      this object takes precedence over handling of events on the view itself.
       Note that most Ember applications do not use this feature. If your app also
      does not use it, consider setting this property to false to gain some performance
      improvement by allowing the EventDispatcher to skip the search for the
      `eventManager` on the view tree.
       ```javascript
      var EventDispatcher = Em.EventDispatcher.extend({
        events: {
            click       : 'click',
            focusin     : 'focusIn',
            focusout    : 'focusOut',
            change      : 'change'
        },
        canDispatchToEventManager: false
      });
      container.register('event_dispatcher:main', EventDispatcher);
      ```
       @property canDispatchToEventManager
      @type boolean
      @default 'true'
      @since 1.7.0
      @private
    */
    canDispatchToEventManager: true,

    /**
      Sets up event listeners for standard browser events.
       This will be called after the browser sends a `DOMContentReady` event. By
      default, it will set up all of the listeners on the document body. If you
      would like to register the listeners on a different element, set the event
      dispatcher's `root` property.
       @private
      @method setup
      @param addedEvents {Object}
    */
    setup: function (addedEvents, rootElement) {
      var event;
      var events = (0, _emberMetalProperty_get.get)(this, "events");

      (0, _emberMetalMerge["default"])(events, addedEvents || {});

      if (!(0, _emberMetalIs_none["default"])(rootElement)) {
        (0, _emberMetalProperty_set.set)(this, "rootElement", rootElement);
      }

      rootElement = (0, _emberViewsSystemJquery["default"])((0, _emberMetalProperty_get.get)(this, "rootElement"));

      _emberMetalCore["default"].assert((0, _emberRuntimeSystemString.fmt)("You cannot use the same root element (%@) multiple times in an Ember.Application", [rootElement.selector || rootElement[0].tagName]), !rootElement.is(".ember-application"));
      _emberMetalCore["default"].assert("You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application", !rootElement.closest(".ember-application").length);
      _emberMetalCore["default"].assert("You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application", !rootElement.find(".ember-application").length);

      rootElement.addClass("ember-application");

      _emberMetalCore["default"].assert("Unable to add \"ember-application\" class to rootElement. Make sure you set rootElement to the body or an element in the body.", rootElement.is(".ember-application"));

      for (event in events) {
        if (events.hasOwnProperty(event)) {
          this.setupHandler(rootElement, event, events[event]);
        }
      }
    },

    /**
      Registers an event listener on the rootElement. If the given event is
      triggered, the provided event handler will be triggered on the target view.
       If the target view does not implement the event handler, or if the handler
      returns `false`, the parent view will be called. The event will continue to
      bubble to each successive parent view until it reaches the top.
       @private
      @method setupHandler
      @param {Element} rootElement
      @param {String} event the browser-originated event to listen to
      @param {String} eventName the name of the method to call on the view
    */
    setupHandler: function (rootElement, event, eventName) {
      var self = this;
      var viewRegistry = this.container && this.container.lookup("-view-registry:main") || _emberViewsViewsView["default"].views;

      rootElement.on(event + ".ember", ".ember-view", function (evt, triggeringManager) {
        var view = viewRegistry[this.id];
        var result = true;

        var manager = self.canDispatchToEventManager ? self._findNearestEventManager(view, eventName) : null;

        if (manager && manager !== triggeringManager) {
          result = self._dispatchEvent(manager, evt, eventName, view);
        } else if (view) {
          result = self._bubbleEvent(view, evt, eventName);
        }

        return result;
      });

      rootElement.on(event + ".ember", "[data-ember-action]", function (evt) {
        var actionId = (0, _emberViewsSystemJquery["default"])(evt.currentTarget).attr("data-ember-action");
        var actions = _emberViewsSystemAction_manager["default"].registeredActions[actionId];

        // We have to check for actions here since in some cases, jQuery will trigger
        // an event on `removeChild` (i.e. focusout) after we've already torn down the
        // action handlers for the view.
        if (!actions) {
          return;
        }

        for (var index = 0, _length = actions.length; index < _length; index++) {
          var action = actions[index];

          if (action && action.eventName === eventName) {
            return action.handler(evt);
          }
        }
      });
    },

    _findNearestEventManager: function (view, eventName) {
      var manager = null;

      while (view) {
        manager = (0, _emberMetalProperty_get.get)(view, "eventManager");
        if (manager && manager[eventName]) {
          break;
        }

        view = (0, _emberMetalProperty_get.get)(view, "parentView");
      }

      return manager;
    },

    _dispatchEvent: function (object, evt, eventName, view) {
      var result = true;

      var handler = object[eventName];
      if (typeof handler === "function") {
        result = (0, _emberMetalRun_loop["default"])(object, handler, evt, view);
        // Do not preventDefault in eventManagers.
        evt.stopPropagation();
      } else {
        result = this._bubbleEvent(view, evt, eventName);
      }

      return result;
    },

    _bubbleEvent: function (view, evt, eventName) {
      return _emberMetalRun_loop["default"].join(view, view.handleEvent, eventName, evt);
    },

    destroy: function () {
      var rootElement = (0, _emberMetalProperty_get.get)(this, "rootElement");
      (0, _emberViewsSystemJquery["default"])(rootElement).off(".ember", "**").removeClass("ember-application");
      return this._super.apply(this, arguments);
    },

    toString: function () {
      return "(EventDispatcher)";
    }
  });
});
/**
@module ember
@submodule ember-views
*/
// Ember.assert
enifed('ember-views/system/ext', ['exports', 'ember-metal/run_loop'], function (exports, _emberMetalRun_loop) {

  // Add a new named queue for rendering views that happens
  // after bindings have synced, and a queue for scheduling actions
  // that that should occur after view rendering.
  _emberMetalRun_loop["default"]._addQueue('render', 'actions');
  _emberMetalRun_loop["default"]._addQueue('afterRender', 'render');
});
/**
@module ember
@submodule ember-views
*/
enifed('ember-views/system/jquery', ['exports', 'ember-metal/core', 'ember-metal/enumerable_utils', 'ember-metal/environment'], function (exports, _emberMetalCore, _emberMetalEnumerable_utils, _emberMetalEnvironment) {

  var jQuery;

  if (_emberMetalEnvironment["default"].hasDOM) {
    // mainContext is set in `package/loader/lib/main.js` to the `this` context before entering strict mode
    jQuery = _emberMetalCore["default"].imports && _emberMetalCore["default"].imports.jQuery || mainContext && mainContext.jQuery; //jshint ignore:line
    if (!jQuery && typeof eriuqer === 'function') {
      jQuery = eriuqer('jquery');
    }

    _emberMetalCore["default"].assert('Ember Views require jQuery between 1.7 and 2.1', jQuery && (jQuery().jquery.match(/^((1\.(7|8|9|10|11))|(2\.(0|1)))(\.\d+)?(pre|rc\d?)?/) || _emberMetalCore["default"].ENV.FORCE_JQUERY));

    if (jQuery) {
      // http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dndevents
      var dragEvents = ['dragstart', 'drag', 'dragenter', 'dragleave', 'dragover', 'drop', 'dragend'];

      // Copies the `dataTransfer` property from a browser event object onto the
      // jQuery event object for the specified events
      (0, _emberMetalEnumerable_utils.forEach)(dragEvents, function (eventName) {
        jQuery.event.fixHooks[eventName] = {
          props: ['dataTransfer']
        };
      });
    }
  }

  exports["default"] = jQuery;
});
// Ember.assert

// ES6TODO: the functions on EnumerableUtils need their own exports
enifed("ember-views/system/lookup_partial", ["exports", "ember-metal/core", "ember-metal/error"], function (exports, _emberMetalCore, _emberMetalError) {
  exports["default"] = lookupPartial;

  function lookupPartial(env, templateName) {
    if (templateName == null) {
      return;
    }

    var nameParts = templateName.split("/");
    var lastPart = nameParts[nameParts.length - 1];

    nameParts[nameParts.length - 1] = "_" + lastPart;

    var underscoredName = nameParts.join("/");
    var template = templateFor(env, underscoredName, templateName);

    _emberMetalCore["default"].assert("Unable to find partial with name \"" + templateName + "\"", !!template);

    return template;
  }

  function templateFor(env, underscored, name) {
    if (!name) {
      return;
    }
    _emberMetalCore["default"].assert("templateNames are not allowed to contain periods: " + name, name.indexOf(".") === -1);

    if (!env.container) {
      throw new _emberMetalError["default"]("Container was not found when looking up a views template. " + "This is most likely due to manually instantiating an Ember.View. " + "See: http://git.io/EKPpnA");
    }

    return env.container.lookup("template:" + underscored) || env.container.lookup("template:" + name);
  }
});
// Ember.assert
enifed('ember-views/system/platform', ['exports', 'ember-metal/environment'], function (exports, _emberMetalEnvironment) {

  // IE 6/7 have bugs around setting names on inputs during creation.
  // From http://msdn.microsoft.com/en-us/library/ie/ms536389(v=vs.85).aspx:
  // "To include the NAME attribute at run time on objects created with the createElement method, use the eTag."
  var canSetNameOnInputs = _emberMetalEnvironment["default"].hasDOM && (function () {
    var div = document.createElement('div');
    var el = document.createElement('input');

    el.setAttribute('name', 'foo');
    div.appendChild(el);

    return !!div.innerHTML.match('foo');
  })();
  exports.canSetNameOnInputs = canSetNameOnInputs;
});
enifed("ember-views/system/utils", ["exports"], function (exports) {
  exports.isSimpleClick = isSimpleClick;
  exports.getViewClientRects = getViewClientRects;
  exports.getViewBoundingClientRect = getViewBoundingClientRect;
  /**
  @module ember
  @submodule ember-views
  */

  function isSimpleClick(event) {
    var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;
    var secondaryClick = event.which > 1; // IE9 may return undefined

    return !modifier && !secondaryClick;
  }

  /**
    @private
    @method getViewRange
    @param {Ember.View} view
  */
  function getViewRange(view) {
    var range = document.createRange();
    range.setStartBefore(view._renderNode.firstNode);
    range.setEndAfter(view._renderNode.lastNode);
    return range;
  }

  /**
    `getViewClientRects` provides information about the position of the border
    box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewClientRects
    @param {Ember.View} view
  */

  function getViewClientRects(view) {
    var range = getViewRange(view);
    return range.getClientRects();
  }

  /**
    `getViewBoundingClientRect` provides information about the position of the
    bounding border box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inpsector
    and may not work on older browsers.
  
    @private
    @method getViewBoundingClientRect
    @param {Ember.View} view
  */

  function getViewBoundingClientRect(view) {
    var range = getViewRange(view);
    return range.getBoundingClientRect();
  }
});
enifed("ember-views/views/checkbox", ["exports", "ember-metal/property_get", "ember-metal/property_set", "ember-views/views/view"], function (exports, _emberMetalProperty_get, _emberMetalProperty_set, _emberViewsViewsView) {

  /**
  @module ember
  @submodule ember-views
  */

  /**
    The internal class used to create text inputs when the `{{input}}`
    helper is used with `type` of `checkbox`.
  
    See [handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.
  
    ## Direct manipulation of `checked`
  
    The `checked` attribute of an `Ember.Checkbox` object should always be set
    through the Ember object or by interacting with its rendered element
    representation via the mouse, keyboard, or touch. Updating the value of the
    checkbox via jQuery will result in the checked value of the object and its
    element losing synchronization.
  
    ## Layout and LayoutName properties
  
    Because HTML `input` elements are self closing `layout` and `layoutName`
    properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
    layout section for more information.
  
    @class Checkbox
    @namespace Ember
    @extends Ember.View
    @public
  */
  // 2.0TODO: Subclass Component rather than View
  exports["default"] = _emberViewsViewsView["default"].extend({
    instrumentDisplay: "{{input type=\"checkbox\"}}",

    classNames: ["ember-checkbox"],

    tagName: "input",

    attributeBindings: ["type", "checked", "indeterminate", "disabled", "tabindex", "name", "autofocus", "required", "form"],

    type: "checkbox",
    checked: false,
    disabled: false,
    indeterminate: false,

    init: function () {
      this._super.apply(this, arguments);
      this.on("change", this, this._updateElementValue);
    },

    didInsertElement: function () {
      this._super.apply(this, arguments);
      (0, _emberMetalProperty_get.get)(this, "element").indeterminate = !!(0, _emberMetalProperty_get.get)(this, "indeterminate");
    },

    _updateElementValue: function () {
      (0, _emberMetalProperty_set.set)(this, "checked", this.$().prop("checked"));
    }
  });
});
enifed("ember-views/views/collection_view", ["exports", "ember-metal/core", "ember-views/views/container_view", "ember-views/views/view", "ember-runtime/mixins/array", "ember-metal/property_get", "ember-metal/property_set", "ember-runtime/system/string", "ember-metal/computed", "ember-metal/mixin", "ember-views/streams/utils", "ember-views/mixins/empty_view_support"], function (exports, _emberMetalCore, _emberViewsViewsContainer_view, _emberViewsViewsView, _emberRuntimeMixinsArray, _emberMetalProperty_get, _emberMetalProperty_set, _emberRuntimeSystemString, _emberMetalComputed, _emberMetalMixin, _emberViewsStreamsUtils, _emberViewsMixinsEmpty_view_support) {

  /**
    `Ember.CollectionView` is an `Ember.View` descendent responsible for managing
    a collection (an array or array-like object) by maintaining a child view object
    and associated DOM representation for each item in the array and ensuring
    that child views and their associated rendered HTML are updated when items in
    the array are added, removed, or replaced.
  
    ## Setting content
  
    The managed collection of objects is referenced as the `Ember.CollectionView`
    instance's `content` property.
  
    ```javascript
    someItemsView = Ember.CollectionView.create({
      content: ['A', 'B','C']
    })
    ```
  
    The view for each item in the collection will have its `content` property set
    to the item.
  
    ## Specifying `itemViewClass`
  
    By default the view class for each item in the managed collection will be an
    instance of `Ember.View`. You can supply a different class by setting the
    `CollectionView`'s `itemViewClass` property.
  
    Given the following application code:
  
    ```javascript
    var App = Ember.Application.create();
    App.ItemListView = Ember.CollectionView.extend({
      classNames: ['a-collection'],
      content: ['A','B','C'],
      itemViewClass: Ember.View.extend({
        template: Ember.Handlebars.compile("the letter: {{view.content}}")
      })
    });
    ```
  
    And a simple application template:
  
    ```handlebars
    {{view 'item-list'}}
    ```
  
    The following HTML will result:
  
    ```html
    <div class="ember-view a-collection">
      <div class="ember-view">the letter: A</div>
      <div class="ember-view">the letter: B</div>
      <div class="ember-view">the letter: C</div>
    </div>
    ```
  
    ## Automatic matching of parent/child tagNames
  
    Setting the `tagName` property of a `CollectionView` to any of
    "ul", "ol", "table", "thead", "tbody", "tfoot", "tr", or "select" will result
    in the item views receiving an appropriately matched `tagName` property.
  
    Given the following application code:
  
    ```javascript
    var App = Ember.Application.create();
    App.UnorderedListView = Ember.CollectionView.create({
      tagName: 'ul',
      content: ['A','B','C'],
      itemViewClass: Ember.View.extend({
        template: Ember.Handlebars.compile("the letter: {{view.content}}")
      })
    });
    ```
  
    And a simple application template:
  
    ```handlebars
    {{view 'unordered-list-view'}}
    ```
  
    The following HTML will result:
  
    ```html
    <ul class="ember-view a-collection">
      <li class="ember-view">the letter: A</li>
      <li class="ember-view">the letter: B</li>
      <li class="ember-view">the letter: C</li>
    </ul>
    ```
  
    Additional `tagName` pairs can be provided by adding to
    `Ember.CollectionView.CONTAINER_MAP`. For example:
  
    ```javascript
    Ember.CollectionView.CONTAINER_MAP['article'] = 'section'
    ```
  
    ## Programmatic creation of child views
  
    For cases where additional customization beyond the use of a single
    `itemViewClass` or `tagName` matching is required CollectionView's
    `createChildView` method can be overridden:
  
    ```javascript
    App.CustomCollectionView = Ember.CollectionView.extend({
      createChildView: function(viewClass, attrs) {
        if (attrs.content.kind == 'album') {
          viewClass = App.AlbumView;
        } else {
          viewClass = App.SongView;
        }
        return this._super(viewClass, attrs);
      }
    });
    ```
  
    ## Empty View
  
    You can provide an `Ember.View` subclass to the `Ember.CollectionView`
    instance as its `emptyView` property. If the `content` property of a
    `CollectionView` is set to `null` or an empty array, an instance of this view
    will be the `CollectionView`s only child.
  
    ```javascript
    var App = Ember.Application.create();
    App.ListWithNothing = Ember.CollectionView.create({
      classNames: ['nothing'],
      content: null,
      emptyView: Ember.View.extend({
        template: Ember.Handlebars.compile("The collection is empty")
      })
    });
    ```
  
    And a simple application template:
  
    ```handlebars
    {{view 'list-with-nothing'}}
    ```
  
    The following HTML will result:
  
    ```html
    <div class="ember-view nothing">
      <div class="ember-view">
        The collection is empty
      </div>
    </div>
    ```
  
    ## Adding and Removing items
  
    The `childViews` property of a `CollectionView` should not be directly
    manipulated. Instead, add, remove, replace items from its `content` property.
    This will trigger appropriate changes to its rendered HTML.
  
  
    @class CollectionView
    @namespace Ember
    @extends Ember.ContainerView
    @uses Ember.EmptyViewSupport
    @since Ember 0.9
    @private
  */
  var CollectionView = _emberViewsViewsContainer_view["default"].extend(_emberViewsMixinsEmpty_view_support["default"], {

    /**
      A list of items to be displayed by the `Ember.CollectionView`.
       @property content
      @type Ember.Array
      @default null
      @private
    */
    content: null,

    /**
      @property itemViewClass
      @type Ember.View
      @default Ember.View
      @private
    */
    itemViewClass: _emberViewsViewsView["default"],

    /**
      Setup a CollectionView
       @method init
      @private
    */
    init: function () {
      var ret = this._super.apply(this, arguments);
      this._contentDidChange();
      return ret;
    },

    /**
      Invoked when the content property is about to change. Notifies observers that the
      entire array content will change.
       @private
      @method _contentWillChange
    */
    _contentWillChange: (0, _emberMetalMixin.beforeObserver)("content", function () {
      var content = this.get("content");

      if (content) {
        content.removeArrayObserver(this);
      }
      var len = content ? (0, _emberMetalProperty_get.get)(content, "length") : 0;
      this.arrayWillChange(content, 0, len);
    }),

    /**
      Check to make sure that the content has changed, and if so,
      update the children directly. This is always scheduled
      asynchronously, to allow the element to be created before
      bindings have synchronized and vice versa.
       @private
      @method _contentDidChange
    */
    _contentDidChange: (0, _emberMetalMixin.observer)("content", function () {
      var content = (0, _emberMetalProperty_get.get)(this, "content");

      if (content) {
        this._assertArrayLike(content);
        content.addArrayObserver(this);
      }

      var len = content ? (0, _emberMetalProperty_get.get)(content, "length") : 0;
      this.arrayDidChange(content, 0, null, len);
    }),

    /**
      Ensure that the content implements Ember.Array
       @private
      @method _assertArrayLike
    */
    _assertArrayLike: function (content) {
      _emberMetalCore["default"].assert((0, _emberRuntimeSystemString.fmt)("an Ember.CollectionView's content must implement Ember.Array. You passed %@", [content]), _emberRuntimeMixinsArray["default"].detect(content));
    },

    /**
      Removes the content and content observers.
       @method destroy
      @private
    */
    destroy: function () {
      if (!this._super.apply(this, arguments)) {
        return;
      }

      var content = (0, _emberMetalProperty_get.get)(this, "content");
      if (content) {
        content.removeArrayObserver(this);
      }

      if (this._createdEmptyView) {
        this._createdEmptyView.destroy();
      }

      return this;
    },

    /**
      Called when a mutation to the underlying content array will occur.
       This method will remove any views that are no longer in the underlying
      content array.
       Invokes whenever the content array itself will change.
       @method arrayWillChange
      @param {Array} content the managed collection of objects
      @param {Number} start the index at which the changes will occur
      @param {Number} removed number of object to be removed from content
      @private
    */
    arrayWillChange: function (content, start, removedCount) {
      this.replace(start, removedCount, []);
    },

    /**
      Called when a mutation to the underlying content array occurs.
       This method will replay that mutation against the views that compose the
      `Ember.CollectionView`, ensuring that the view reflects the model.
       This array observer is added in `contentDidChange`.
       @method arrayDidChange
      @param {Array} content the managed collection of objects
      @param {Number} start the index at which the changes occurred
      @param {Number} removed number of object removed from content
      @param {Number} added number of object added to content
      @private
    */
    arrayDidChange: function (content, start, removed, added) {
      var addedViews = [];
      var view, item, idx, len, itemViewClass, itemViewProps;

      len = content ? (0, _emberMetalProperty_get.get)(content, "length") : 0;

      if (len) {
        itemViewProps = this._itemViewProps || {};
        itemViewClass = this.getAttr("itemViewClass") || (0, _emberMetalProperty_get.get)(this, "itemViewClass");

        itemViewClass = (0, _emberViewsStreamsUtils.readViewFactory)(itemViewClass, this.container);

        for (idx = start; idx < start + added; idx++) {
          item = content.objectAt(idx);
          itemViewProps._context = this.keyword ? this.get("context") : item;
          itemViewProps.content = item;
          itemViewProps.contentIndex = idx;

          view = this.createChildView(itemViewClass, itemViewProps);

          addedViews.push(view);
        }

        this.replace(start, 0, addedViews);
      }
    },

    /**
      Instantiates a view to be added to the childViews array during view
      initialization. You generally will not call this method directly unless
      you are overriding `createChildViews()`. Note that this method will
      automatically configure the correct settings on the new view instance to
      act as a child of the parent.
       The tag name for the view will be set to the tagName of the viewClass
      passed in.
       @method createChildView
      @param {Class} viewClass
      @param {Object} [attrs] Attributes to add
      @return {Ember.View} new instance
      @private
    */
    createChildView: function (_view, attrs) {
      var view = this._super(_view, attrs);

      var itemTagName = (0, _emberMetalProperty_get.get)(view, "tagName");

      if (itemTagName === null || itemTagName === undefined) {
        itemTagName = CollectionView.CONTAINER_MAP[(0, _emberMetalProperty_get.get)(this, "tagName")];
        (0, _emberMetalProperty_set.set)(view, "tagName", itemTagName);
      }

      return view;
    },

    _willRender: function () {
      var attrs = this.attrs;
      var itemProps = buildItemViewProps(this._itemViewTemplate, attrs);
      this._itemViewProps = itemProps;
      var childViews = (0, _emberMetalProperty_get.get)(this, "childViews");

      for (var i = 0, l = childViews.length; i < l; i++) {
        childViews[i].setProperties(itemProps);
      }

      if ("content" in attrs) {
        (0, _emberMetalProperty_set.set)(this, "content", this.getAttr("content"));
      }

      if ("emptyView" in attrs) {
        (0, _emberMetalProperty_set.set)(this, "emptyView", this.getAttr("emptyView"));
      }
    },

    _emptyViewTagName: (0, _emberMetalComputed.computed)("tagName", function () {
      var tagName = (0, _emberMetalProperty_get.get)(this, "tagName");
      return CollectionView.CONTAINER_MAP[tagName] || "div";
    })
  });

  /**
    A map of parent tags to their default child tags. You can add
    additional parent tags if you want collection views that use
    a particular parent tag to default to a child tag.
  
    @property CONTAINER_MAP
    @type Object
    @static
    @final
    @private
  */
  CollectionView.CONTAINER_MAP = {
    ul: "li",
    ol: "li",
    table: "tr",
    thead: "tr",
    tbody: "tr",
    tfoot: "tr",
    tr: "td",
    select: "option"
  };

  var CONTAINER_MAP = CollectionView.CONTAINER_MAP;

  exports.CONTAINER_MAP = CONTAINER_MAP;
  function buildItemViewProps(template, attrs) {
    var props = {};

    // Go through options passed to the {{collection}} helper and extract options
    // that configure item views instead of the collection itself.
    for (var prop in attrs) {
      if (prop === "itemViewClass" || prop === "itemController" || prop === "itemClassBinding") {
        continue;
      }
      if (attrs.hasOwnProperty(prop)) {
        var match = prop.match(/^item(.)(.*)$/);
        if (match) {
          var childProp = match[1].toLowerCase() + match[2];

          if (childProp === "class" || childProp === "classNames") {
            props.classNames = [attrs[prop]];
          } else {
            props[childProp] = attrs[prop];
          }

          delete attrs[prop];
        }
      }
    }

    if (template) {
      props.template = template;
    }

    return props;
  }

  exports["default"] = CollectionView;
});
/**
@module ember
@submodule ember-views
*/

// Ember.assert
enifed("ember-views/views/component", ["exports", "ember-metal/core", "ember-views/mixins/component_template_deprecation", "ember-runtime/mixins/target_action_support", "ember-views/views/view", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/is_none", "ember-metal/computed", "ember-views/compat/attrs-proxy"], function (exports, _emberMetalCore, _emberViewsMixinsComponent_template_deprecation, _emberRuntimeMixinsTarget_action_support, _emberViewsViewsView, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalIs_none, _emberMetalComputed, _emberViewsCompatAttrsProxy) {

  function validateAction(component, actionName) {
    if (actionName && actionName[_emberViewsCompatAttrsProxy.MUTABLE_CELL]) {
      actionName = actionName.value;
    }
    _emberMetalCore["default"].assert("The default action was triggered on the component " + component.toString() + ", but the action name (" + actionName + ") was not a string.", (0, _emberMetalIs_none["default"])(actionName) || typeof actionName === "string" || typeof actionName === "function");
    return actionName;
  }

  /**
  @module ember
  @submodule ember-views
  */

  /**
    An `Ember.Component` is a view that is completely
    isolated. Properties accessed in its templates go
    to the view object and actions are targeted at
    the view object. There is no access to the
    surrounding context or outer controller; all
    contextual information must be passed in.
  
    The easiest way to create an `Ember.Component` is via
    a template. If you name a template
    `components/my-foo`, you will be able to use
    `{{my-foo}}` in other templates, which will make
    an instance of the isolated component.
  
    ```handlebars
    {{app-profile person=currentUser}}
    ```
  
    ```handlebars
    <!-- app-profile template -->
    <h1>{{person.title}}</h1>
    <img {{bind-attr src=person.avatar}}>
    <p class='signature'>{{person.signature}}</p>
    ```
  
    You can use `yield` inside a template to
    include the **contents** of any block attached to
    the component. The block will be executed in the
    context of the surrounding context or outer controller:
  
    ```handlebars
    {{#app-profile person=currentUser}}
      <p>Admin mode</p>
      {{! Executed in the controller's context. }}
    {{/app-profile}}
    ```
  
    ```handlebars
    <!-- app-profile template -->
    <h1>{{person.title}}</h1>
    {{! Executed in the components context. }}
    {{yield}} {{! block contents }}
    ```
  
    If you want to customize the component, in order to
    handle events or actions, you implement a subclass
    of `Ember.Component` named after the name of the
    component. Note that `Component` needs to be appended to the name of
    your subclass like `AppProfileComponent`.
  
    For example, you could implement the action
    `hello` for the `app-profile` component:
  
    ```javascript
    App.AppProfileComponent = Ember.Component.extend({
      actions: {
        hello: function(name) {
          console.log("Hello", name);
        }
      }
    });
    ```
  
    And then use it in the component's template:
  
    ```handlebars
    <!-- app-profile template -->
  
    <h1>{{person.title}}</h1>
    {{yield}} <!-- block contents -->
  
    <button {{action 'hello' person.name}}>
      Say Hello to {{person.name}}
    </button>
    ```
  
    Components must have a `-` in their name to avoid
    conflicts with built-in controls that wrap HTML
    elements. This is consistent with the same
    requirement in web components.
  
    @class Component
    @namespace Ember
    @extends Ember.View
    @public
  */
  var Component = _emberViewsViewsView["default"].extend(_emberRuntimeMixinsTarget_action_support["default"], _emberViewsMixinsComponent_template_deprecation["default"], {
    isComponent: true,
    /*
      This is set so that the proto inspection in appendTemplatedView does not
      think that it should set the components `context` to that of the parent view.
    */
    controller: null,
    context: null,

    instrumentName: "component",
    instrumentDisplay: (0, _emberMetalComputed.computed)(function () {
      if (this._debugContainerKey) {
        return "{{" + this._debugContainerKey.split(":")[1] + "}}";
      }
    }),

    init: function () {
      this._super.apply(this, arguments);
      (0, _emberMetalProperty_set.set)(this, "controller", this);
      (0, _emberMetalProperty_set.set)(this, "context", this);
    },

    /**
    A components template property is set by passing a block
    during its invocation. It is executed within the parent context.
     Example:
     ```handlebars
    {{#my-component}}
      // something that is run in the context
      // of the parent context
    {{/my-component}}
    ```
     Specifying a template directly to a component is deprecated without
    also specifying the layout property.
     @deprecated
    @property template
    @public
    */
    template: (0, _emberMetalComputed.computed)("_template", {
      get: function () {
        _emberMetalCore["default"].deprecate("Accessing 'template' in " + this + " is deprecated. To determine if a block was specified to " + this + " please use '{{#if hasBlock}}' in the components layout.");

        return (0, _emberMetalProperty_get.get)(this, "_template");
      },

      set: function (key, value) {
        return (0, _emberMetalProperty_set.set)(this, "_template", value);
      }
    }),

    _template: (0, _emberMetalComputed.computed)("templateName", {
      get: function () {
        if ((0, _emberMetalProperty_get.get)(this, "_deprecatedFlagForBlockProvided")) {
          return true;
        }
        var templateName = (0, _emberMetalProperty_get.get)(this, "templateName");
        var template = this.templateForName(templateName, "template");

        _emberMetalCore["default"].assert("You specified the templateName " + templateName + " for " + this + ", but it did not exist.", !templateName || !!template);
        return template || (0, _emberMetalProperty_get.get)(this, "defaultTemplate");
      },
      set: function (key, value) {
        return value;
      }
    }),

    /**
    Specifying a components `templateName` is deprecated without also
    providing the `layout` or `layoutName` properties.
     @deprecated
    @property templateName
    @public
    */
    templateName: null,

    /**
      If the component is currently inserted into the DOM of a parent view, this
      property will point to the controller of the parent view.
       @property targetObject
      @type Ember.Controller
      @default null
      @private
    */
    targetObject: (0, _emberMetalComputed.computed)("controller", function (key) {
      if (this._targetObject) {
        return this._targetObject;
      }
      if (this._controller) {
        return this._controller;
      }
      var parentView = (0, _emberMetalProperty_get.get)(this, "parentView");
      return parentView ? (0, _emberMetalProperty_get.get)(parentView, "controller") : null;
    }),

    /**
      Triggers a named action on the controller context where the component is used if
      this controller has registered for notifications of the action.
       For example a component for playing or pausing music may translate click events
      into action notifications of "play" or "stop" depending on some internal state
      of the component:
        ```javascript
      App.PlayButtonComponent = Ember.Component.extend({
        click: function() {
          if (this.get('isPlaying')) {
            this.sendAction('play');
          } else {
            this.sendAction('stop');
          }
        }
      });
      ```
       When used inside a template these component actions are configured to
      trigger actions in the outer application context:
       ```handlebars
      {{! application.hbs }}
      {{play-button play="musicStarted" stop="musicStopped"}}
      ```
       When the component receives a browser `click` event it translate this
      interaction into application-specific semantics ("play" or "stop") and
      triggers the specified action name on the controller for the template
      where the component is used:
        ```javascript
      App.ApplicationController = Ember.Controller.extend({
        actions: {
          musicStarted: function() {
            // called when the play button is clicked
            // and the music started playing
          },
          musicStopped: function() {
            // called when the play button is clicked
            // and the music stopped playing
          }
        }
      });
      ```
       If no action name is passed to `sendAction` a default name of "action"
      is assumed.
       ```javascript
      App.NextButtonComponent = Ember.Component.extend({
        click: function() {
          this.sendAction();
        }
      });
      ```
       ```handlebars
      {{! application.hbs }}
      {{next-button action="playNextSongInAlbum"}}
      ```
       ```javascript
      App.ApplicationController = Ember.Controller.extend({
        actions: {
          playNextSongInAlbum: function() {
            ...
          }
        }
      });
      ```
       @method sendAction
      @param [action] {String} the action to trigger
      @param [context] {*} a context to send with the action
      @public
    */
    sendAction: function (action) {
      for (var _len = arguments.length, contexts = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        contexts[_key - 1] = arguments[_key];
      }

      var actionName;

      // Send the default action
      if (action === undefined) {
        action = "action";
      }
      actionName = (0, _emberMetalProperty_get.get)(this, "attrs." + action) || (0, _emberMetalProperty_get.get)(this, action);
      actionName = validateAction(this, actionName);

      // If no action name for that action could be found, just abort.
      if (actionName === undefined) {
        return;
      }

      if (typeof actionName === "function") {
        actionName.apply(null, contexts);
      } else {
        this.triggerAction({
          action: actionName,
          actionContext: contexts
        });
      }
    },

    send: function (actionName) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var target;
      var hasAction = this._actions && this._actions[actionName];

      if (hasAction) {
        var shouldBubble = this._actions[actionName].apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }

      if (target = (0, _emberMetalProperty_get.get)(this, "target")) {
        _emberMetalCore["default"].assert("The `target` for " + this + " (" + target + ") does not have a `send` method", typeof target.send === "function");
        target.send.apply(target, arguments);
      } else {
        if (!hasAction) {
          throw new Error(_emberMetalCore["default"].inspect(this) + " had no action handler for: " + actionName);
        }
      }
    }

    /**
      Returns true when the component was invoked with a block template.
       Example (`hasBlock` will be `false`):
       ```hbs
      {{! templates/application.hbs }}
       {{foo-bar}}
       {{! templates/components/foo-bar.js }}
      {{#if hasBlock}}
        This will not be printed, because no block was provided
      {{/if}}
      ```
       Example (`hasBlock` will be `true`):
       ```hbs
      {{! templates/application.hbs }}
       {{#foo-bar}}
        Hi!
      {{/foo-bar}}
       {{! templates/components/foo-bar.js }}
      {{#if hasBlock}}
        This will be printed because a block was provided
        {{yield}}
      {{/if}}
      ```
       @public
      @property hasBlock
      @returns Boolean
    */

    /**
      Returns true when the component was invoked with a block parameter
      supplied.
       Example (`hasBlockParams` will be `false`):
       ```hbs
      {{! templates/application.hbs }}
       {{#foo-bar}}
        No block parameter.
      {{/foo-bar}}
       {{! templates/components/foo-bar.js }}
      {{#if hasBlockParams}}
        This will not be printed, because no block was provided
        {{yield this}}
      {{/if}}
      ```
       Example (`hasBlockParams` will be `true`):
       ```hbs
      {{! templates/application.hbs }}
       {{#foo-bar as |foo|}}
        Hi!
      {{/foo-bar}}
       {{! templates/components/foo-bar.js }}
      {{#if hasBlockParams}}
        This will be printed because a block was provided
        {{yield this}}
      {{/if}}
      ```
      @public
      @property hasBlockParams
      @returns Boolean
    */
  });

  Component.reopenClass({
    isComponentFactory: true
  });

  exports["default"] = Component;
});
// Ember.assert, Ember.Handlebars
enifed("ember-views/views/container_view", ["exports", "ember-metal/core", "ember-runtime/mixins/mutable_array", "ember-views/views/view", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/enumerable_utils", "ember-metal/mixin", "ember-metal/events", "ember-htmlbars/templates/container-view"], function (exports, _emberMetalCore, _emberRuntimeMixinsMutable_array, _emberViewsViewsView, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalEnumerable_utils, _emberMetalMixin, _emberMetalEvents, _emberHtmlbarsTemplatesContainerView) {
  _emberHtmlbarsTemplatesContainerView["default"].meta.revision = "Ember@1.13.2";

  /**
  @module ember
  @submodule ember-views
  */

  /**
    A `ContainerView` is an `Ember.View` subclass that implements `Ember.MutableArray`
    allowing programmatic management of its child views.
  
    ## Setting Initial Child Views
  
    The initial array of child views can be set in one of two ways. You can
    provide a `childViews` property at creation time that contains instance of
    `Ember.View`:
  
    ```javascript
    aContainer = Ember.ContainerView.create({
      childViews: [Ember.View.create(), Ember.View.create()]
    });
    ```
  
    You can also provide a list of property names whose values are instances of
    `Ember.View`:
  
    ```javascript
    aContainer = Ember.ContainerView.create({
      childViews: ['aView', 'bView', 'cView'],
      aView: Ember.View.create(),
      bView: Ember.View.create(),
      cView: Ember.View.create()
    });
    ```
  
    The two strategies can be combined:
  
    ```javascript
    aContainer = Ember.ContainerView.create({
      childViews: ['aView', Ember.View.create()],
      aView: Ember.View.create()
    });
    ```
  
    Each child view's rendering will be inserted into the container's rendered
    HTML in the same order as its position in the `childViews` property.
  
    ## Adding and Removing Child Views
  
    The container view implements `Ember.MutableArray` allowing programmatic management of its child views.
  
    To remove a view, pass that view into a `removeObject` call on the container view.
  
    Given an empty `<body>` the following code
  
    ```javascript
    aContainer = Ember.ContainerView.create({
      classNames: ['the-container'],
      childViews: ['aView', 'bView'],
      aView: Ember.View.create({
        template: Ember.Handlebars.compile("A")
      }),
      bView: Ember.View.create({
        template: Ember.Handlebars.compile("B")
      })
    });
  
    aContainer.appendTo('body');
    ```
  
    Results in the HTML
  
    ```html
    <div class="ember-view the-container">
      <div class="ember-view">A</div>
      <div class="ember-view">B</div>
    </div>
    ```
  
    Removing a view
  
    ```javascript
    aContainer.toArray();  // [aContainer.aView, aContainer.bView]
    aContainer.removeObject(aContainer.get('bView'));
    aContainer.toArray();  // [aContainer.aView]
    ```
  
    Will result in the following HTML
  
    ```html
    <div class="ember-view the-container">
      <div class="ember-view">A</div>
    </div>
    ```
  
    Similarly, adding a child view is accomplished by adding `Ember.View` instances to the
    container view.
  
    Given an empty `<body>` the following code
  
    ```javascript
    aContainer = Ember.ContainerView.create({
      classNames: ['the-container'],
      childViews: ['aView', 'bView'],
      aView: Ember.View.create({
        template: Ember.Handlebars.compile("A")
      }),
      bView: Ember.View.create({
        template: Ember.Handlebars.compile("B")
      })
    });
  
    aContainer.appendTo('body');
    ```
  
    Results in the HTML
  
    ```html
    <div class="ember-view the-container">
      <div class="ember-view">A</div>
      <div class="ember-view">B</div>
    </div>
    ```
  
    Adding a view
  
    ```javascript
    AnotherViewClass = Ember.View.extend({
      template: Ember.Handlebars.compile("Another view")
    });
  
    aContainer.toArray();  // [aContainer.aView, aContainer.bView]
    aContainer.pushObject(AnotherViewClass.create());
    aContainer.toArray(); // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]
    ```
  
    Will result in the following HTML
  
    ```html
    <div class="ember-view the-container">
      <div class="ember-view">A</div>
      <div class="ember-view">B</div>
      <div class="ember-view">Another view</div>
    </div>
    ```
  
    ## Templates and Layout
  
    A `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or
    `defaultLayout` property on a container view will not result in the template
    or layout being rendered. The HTML contents of a `Ember.ContainerView`'s DOM
    representation will only be the rendered HTML of its child views.
  
    @class ContainerView
    @namespace Ember
    @extends Ember.View
    @private
  */
  var ContainerView = _emberViewsViewsView["default"].extend(_emberRuntimeMixinsMutable_array["default"], {
    willWatchProperty: function (prop) {
      _emberMetalCore["default"].deprecate("ContainerViews should not be observed as arrays. This behavior will change in future implementations of ContainerView.", !prop.match(/\[]/) && prop.indexOf("@") !== 0);
    },

    init: function () {
      this._super.apply(this, arguments);

      var userChildViews = (0, _emberMetalProperty_get.get)(this, "childViews");
      _emberMetalCore["default"].deprecate("Setting `childViews` on a Container is deprecated.", _emberMetalCore["default"].isEmpty(userChildViews));

      // redefine view's childViews property that was obliterated
      // 2.0TODO: Don't Ember.A() this so users disabling prototype extensions
      // don't pay a penalty.
      var childViews = this.childViews = _emberMetalCore["default"].A([]);

      (0, _emberMetalEnumerable_utils.forEach)(userChildViews, function (viewName, idx) {
        var view;

        if ("string" === typeof viewName) {
          view = (0, _emberMetalProperty_get.get)(this, viewName);
          view = this.createChildView(view);
          (0, _emberMetalProperty_set.set)(this, viewName, view);
        } else {
          view = this.createChildView(viewName);
        }

        childViews[idx] = view;
      }, this);

      var currentView = (0, _emberMetalProperty_get.get)(this, "currentView");
      if (currentView) {
        if (!childViews.length) {
          childViews = this.childViews = _emberMetalCore["default"].A(this.childViews.slice());
        }
        childViews.push(this.createChildView(currentView));
      }

      (0, _emberMetalProperty_set.set)(this, "length", childViews.length);
    },

    // Normally parentView and childViews are managed at render time.  However,
    // the ContainerView is an unusual legacy case. People expect to be able to
    // push a child view into the ContainerView and have its parentView set
    // appropriately. As a result, we link the child nodes ahead of time and
    // ignore render-time linking.
    appendChild: function (view) {
      // This occurs if the view being appended is the empty view, rather than
      // a view eagerly inserted into the childViews array.
      if (view.parentView !== this) {
        this.linkChild(view);
      }
    },

    _currentViewWillChange: (0, _emberMetalMixin.beforeObserver)("currentView", function () {
      var currentView = (0, _emberMetalProperty_get.get)(this, "currentView");
      if (currentView) {
        currentView.destroy();
      }
    }),

    _currentViewDidChange: (0, _emberMetalMixin.observer)("currentView", function () {
      var currentView = (0, _emberMetalProperty_get.get)(this, "currentView");
      if (currentView) {
        _emberMetalCore["default"].assert("You tried to set a current view that already has a parent. Make sure you don't have multiple outlets in the same view.", !currentView.parentView);
        this.pushObject(currentView);
      }
    }),

    layout: _emberHtmlbarsTemplatesContainerView["default"],

    replace: function (idx, removedCount) {
      var _this = this;

      var addedViews = arguments[2] === undefined ? [] : arguments[2];

      var addedCount = (0, _emberMetalProperty_get.get)(addedViews, "length");
      var childViews = (0, _emberMetalProperty_get.get)(this, "childViews");

      _emberMetalCore["default"].assert("You can't add a child to a container - the child is already a child of another view", function () {
        for (var i = 0, l = addedViews.length; i < l; i++) {
          var item = addedViews[i];
          if (item.parentView && item.parentView !== _this) {
            return false;
          }
        }
        return true;
      });

      this.arrayContentWillChange(idx, removedCount, addedCount);

      // Normally parentView and childViews are managed at render time.  However,
      // the ContainerView is an unusual legacy case. People expect to be able to
      // push a child view into the ContainerView and have its parentView set
      // appropriately.
      //
      // Because of this, we synchronously fix up the parentView/childViews tree
      // as soon as views are added or removed, despite the fact that this will
      // happen automatically when we render.
      var removedViews = childViews.slice(idx, idx + removedCount);
      (0, _emberMetalEnumerable_utils.forEach)(removedViews, function (view) {
        return _this.unlinkChild(view);
      });
      (0, _emberMetalEnumerable_utils.forEach)(addedViews, function (view) {
        return _this.linkChild(view);
      });

      childViews.splice.apply(childViews, [idx, removedCount].concat(addedViews));

      this.notifyPropertyChange("childViews");
      this.arrayContentDidChange(idx, removedCount, addedCount);

      //Ember.assert("You can't add a child to a container - the child is already a child of another view", emberA(addedViews).every(function(item) { return !item.parentView || item.parentView === self; }));

      (0, _emberMetalProperty_set.set)(this, "length", childViews.length);

      return this;
    },

    objectAt: function (idx) {
      return this.childViews[idx];
    },

    _triggerChildWillDestroyElement: (0, _emberMetalEvents.on)("willDestroyElement", function () {
      var childViews = this.childViews;
      if (childViews) {
        for (var i = 0; i < childViews.length; i++) {
          this.renderer.willDestroyElement(childViews[i]);
        }
      }
    }),

    _triggerChildDidDestroyElement: (0, _emberMetalEvents.on)("didDestroyElement", function () {
      var childViews = this.childViews;
      if (childViews) {
        for (var i = 0; i < childViews.length; i++) {
          this.renderer.didDestroyElement(childViews[i]);
        }
      }
    })
  });

  exports["default"] = ContainerView;
});
enifed("ember-views/views/core_view", ["exports", "ember-metal-views/renderer", "ember-views/views/states", "ember-runtime/system/object", "ember-runtime/mixins/evented", "ember-runtime/mixins/action_handler", "ember-metal/property_get", "ember-runtime/utils", "htmlbars-runtime"], function (exports, _emberMetalViewsRenderer, _emberViewsViewsStates, _emberRuntimeSystemObject, _emberRuntimeMixinsEvented, _emberRuntimeMixinsAction_handler, _emberMetalProperty_get, _emberRuntimeUtils, _htmlbarsRuntime) {

  function K() {
    return this;
  }

  // Normally, the renderer is injected by the container when the view is looked
  // up. However, if someone creates a view without looking it up via the
  // container (e.g. `Ember.View.create().append()`) then we create a fallback
  // DOM renderer that is shared. In general, this path should be avoided since
  // views created this way cannot run in a node environment.
  var renderer;

  /**
    `Ember.CoreView` is an abstract class that exists to give view-like behavior
    to both Ember's main view class `Ember.View` and other classes that don't need
    the fully functionaltiy of `Ember.View`.
  
    Unless you have specific needs for `CoreView`, you will use `Ember.View`
    in your applications.
  
    @class CoreView
    @namespace Ember
    @extends Ember.Object
    @deprecated Use `Ember.View` instead.
    @uses Ember.Evented
    @uses Ember.ActionHandler
    @private
  */
  var CoreView = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsEvented["default"], _emberRuntimeMixinsAction_handler["default"], {
    isView: true,

    _states: (0, _emberViewsViewsStates.cloneStates)(_emberViewsViewsStates.states),

    init: function () {
      this._super.apply(this, arguments);
      this._state = "preRender";
      this.currentState = this._states.preRender;
      this._isVisible = (0, _emberMetalProperty_get.get)(this, "isVisible");

      // Fallback for legacy cases where the view was created directly
      // via `create()` instead of going through the container.
      if (!this.renderer) {
        var DOMHelper = domHelper();
        renderer = renderer || new _emberMetalViewsRenderer["default"](new DOMHelper());
        this.renderer = renderer;
      }

      this.isDestroyingSubtree = false;
      this._dispatching = null;
    },

    /**
      If the view is currently inserted into the DOM of a parent view, this
      property will point to the parent of the view.
       @property parentView
      @type Ember.View
      @default null
      @private
    */
    parentView: null,

    _state: null,

    instrumentName: "core_view",

    instrumentDetails: function (hash) {
      hash.object = this.toString();
      hash.containerKey = this._debugContainerKey;
      hash.view = this;
    },

    /**
      Override the default event firing from `Ember.Evented` to
      also call methods with the given name.
       @method trigger
      @param name {String}
      @private
    */
    trigger: function () {
      this._super.apply(this, arguments);
      var name = arguments[0];
      var method = this[name];
      if (method) {
        var length = arguments.length;
        var args = new Array(length - 1);
        for (var i = 1; i < length; i++) {
          args[i - 1] = arguments[i];
        }
        return method.apply(this, args);
      }
    },

    has: function (name) {
      return (0, _emberRuntimeUtils.typeOf)(this[name]) === "function" || this._super(name);
    },

    destroy: function () {
      var parent = this.parentView;

      if (!this._super.apply(this, arguments)) {
        return;
      }

      this.currentState.cleanup(this);

      if (!this.ownerView.isDestroyingSubtree) {
        this.ownerView.isDestroyingSubtree = true;
        if (parent) {
          parent.removeChild(this);
        }
        if (this._renderNode) {
          Ember.assert("BUG: Render node exists without concomitant env.", this.ownerView.env);
          _htmlbarsRuntime.internal.clearMorph(this._renderNode, this.ownerView.env, true);
        }
        this.ownerView.isDestroyingSubtree = false;
      }

      return this;
    },

    clearRenderedChildren: K,
    _transitionTo: K,
    destroyElement: K
  });

  CoreView.reopenClass({
    isViewFactory: true
  });

  var DeprecatedCoreView = CoreView.extend({
    init: function () {
      Ember.deprecate("Ember.CoreView is deprecated. Please use Ember.View.", false);
      this._super.apply(this, arguments);
    }
  });

  exports.DeprecatedCoreView = DeprecatedCoreView;
  var _domHelper;
  function domHelper() {
    return _domHelper = _domHelper || Ember.__loader.require("ember-htmlbars/system/dom-helper")["default"];
  }

  exports["default"] = CoreView;
});
enifed("ember-views/views/legacy_each_view", ["exports", "ember-htmlbars/templates/legacy-each", "ember-metal/property_get", "ember-metal/property_set", "ember-metal/computed", "ember-views/views/view", "ember-views/views/collection_view", "ember-views/mixins/empty_view_support"], function (exports, _emberHtmlbarsTemplatesLegacyEach, _emberMetalProperty_get, _emberMetalProperty_set, _emberMetalComputed, _emberViewsViewsView, _emberViewsViewsCollection_view, _emberViewsMixinsEmpty_view_support) {
  exports["default"] = _emberViewsViewsView["default"].extend(_emberViewsMixinsEmpty_view_support["default"], {
    template: _emberHtmlbarsTemplatesLegacyEach["default"],
    tagName: "",

    _arrayController: (0, _emberMetalComputed.computed)(function () {
      var itemController = this.getAttr("itemController");
      var controller = (0, _emberMetalProperty_get.get)(this, "container").lookupFactory("controller:array").create({
        _isVirtual: true,
        parentController: (0, _emberMetalProperty_get.get)(this, "controller"),
        itemController: itemController,
        target: (0, _emberMetalProperty_get.get)(this, "controller"),
        _eachView: this,
        content: this.getAttr("content")
      });

      return controller;
    }),

    _willUpdate: function (attrs) {
      var itemController = this.getAttrFor(attrs, "itemController");

      if (itemController) {
        var arrayController = (0, _emberMetalProperty_get.get)(this, "_arrayController");
        (0, _emberMetalProperty_set.set)(arrayController, "content", this.getAttrFor(attrs, "content"));
      }
    },

    _arrangedContent: (0, _emberMetalComputed.computed)("attrs.content", function () {
      if (this.getAttr("itemController")) {
        return (0, _emberMetalProperty_get.get)(this, "_arrayController");
      }

      return this.getAttr("content");
    }),

    _itemTagName: (0, _emberMetalComputed.computed)(function () {
      var tagName = (0, _emberMetalProperty_get.get)(this, "tagName");
      return _emberViewsViewsCollection_view.CONTAINER_MAP[tagName];
    })
  });
});
//2.0TODO: Remove this in 2.0
//This is a fallback path for the `{{#each}}` helper that supports deprecated
//behavior such as itemController.
enifed("ember-views/views/select", ["exports", "ember-metal/enumerable_utils", "ember-metal/property_get", "ember-metal/property_set", "ember-views/views/view", "ember-runtime/utils", "ember-metal/is_none", "ember-metal/computed", "ember-runtime/system/native_array", "ember-metal/mixin", "ember-metal/properties", "ember-htmlbars/templates/select", "ember-htmlbars/templates/select-option", "ember-htmlbars/templates/select-optgroup"], function (exports, _emberMetalEnumerable_utils, _emberMetalProperty_get, _emberMetalProperty_set, _emberViewsViewsView, _emberRuntimeUtils, _emberMetalIs_none, _emberMetalComputed, _emberRuntimeSystemNative_array, _emberMetalMixin, _emberMetalProperties, _emberHtmlbarsTemplatesSelect, _emberHtmlbarsTemplatesSelectOption, _emberHtmlbarsTemplatesSelectOptgroup) {

  var defaultTemplate = _emberHtmlbarsTemplatesSelect["default"];

  var SelectOption = _emberViewsViewsView["default"].extend({
    instrumentDisplay: "Ember.SelectOption",

    tagName: "option",
    attributeBindings: ["value", "selected"],

    defaultTemplate: _emberHtmlbarsTemplatesSelectOption["default"],

    content: null,

    _willRender: function () {
      this.labelPathDidChange();
      this.valuePathDidChange();
    },

    selected: (0, _emberMetalComputed.computed)(function () {
      var value = (0, _emberMetalProperty_get.get)(this, "value");
      var selection = (0, _emberMetalProperty_get.get)(this, "attrs.selection");
      if ((0, _emberMetalProperty_get.get)(this, "attrs.multiple")) {
        return selection && (0, _emberMetalEnumerable_utils.indexOf)(selection, value) > -1;
      } else {
        // Primitives get passed through bindings as objects... since
        // `new Number(4) !== 4`, we use `==` below
        return value == (0, _emberMetalProperty_get.get)(this, "attrs.parentValue"); // jshint ignore:line
      }
    }).property("attrs.content", "attrs.selection"),

    labelPathDidChange: (0, _emberMetalMixin.observer)("attrs.optionLabelPath", function () {
      var labelPath = (0, _emberMetalProperty_get.get)(this, "attrs.optionLabelPath");
      (0, _emberMetalProperties.defineProperty)(this, "label", _emberMetalComputed.computed.alias(labelPath));
    }),

    valuePathDidChange: (0, _emberMetalMixin.observer)("attrs.optionValuePath", function () {
      var valuePath = (0, _emberMetalProperty_get.get)(this, "attrs.optionValuePath");
      (0, _emberMetalProperties.defineProperty)(this, "value", _emberMetalComputed.computed.alias(valuePath));
    })
  });

  var SelectOptgroup = _emberViewsViewsView["default"].extend({
    instrumentDisplay: "Ember.SelectOptgroup",

    tagName: "optgroup",
    defaultTemplate: _emberHtmlbarsTemplatesSelectOptgroup["default"],
    attributeBindings: ["label"]
  });

  /**
    The `Ember.Select` view class renders a
    [select](https://developer.mozilla.org/en/HTML/Element/select) HTML element,
    allowing the user to choose from a list of options.
  
    The text and `value` property of each `<option>` element within the
    `<select>` element are populated from the objects in the `Element.Select`'s
    `content` property. The underlying data object of the selected `<option>` is
    stored in the `Element.Select`'s `value` property.
  
    ## The Content Property (array of strings)
  
    The simplest version of an `Ember.Select` takes an array of strings as its
    `content` property. The string will be used as both the `value` property and
    the inner text of each `<option>` element inside the rendered `<select>`.
  
    Example:
  
    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      names: ["Yehuda", "Tom"]
    });
    ```
  
    ```handlebars
    {{view "select" content=names}}
    ```
  
    Would result in the following HTML:
  
    ```html
    <select class="ember-select">
      <option value="Yehuda">Yehuda</option>
      <option value="Tom">Tom</option>
    </select>
    ```
  
    You can control which `<option>` is selected through the `Ember.Select`'s
    `value` property:
  
    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      selectedName: 'Tom',
      names: ["Yehuda", "Tom"]
    });
    ```
  
    ```handlebars
    {{view "select" content=names value=selectedName}}
    ```
  
    Would result in the following HTML with the `<option>` for 'Tom' selected:
  
    ```html
    <select class="ember-select">
      <option value="Yehuda">Yehuda</option>
      <option value="Tom" selected="selected">Tom</option>
    </select>
    ```
  
    A user interacting with the rendered `<select>` to choose "Yehuda" would
    update the value of `selectedName` to "Yehuda".
  
    ## The Content Property (array of Objects)
  
    An `Ember.Select` can also take an array of JavaScript or Ember objects as
    its `content` property.
  
    When using objects you need to tell the `Ember.Select` which property should
    be accessed on each object to supply the `value` attribute of the `<option>`
    and which property should be used to supply the element text.
  
    The `optionValuePath` option is used to specify the path on each object to
    the desired property for the `value` attribute. The `optionLabelPath`
    specifies the path on each object to the desired property for the
    element's text. Both paths must reference each object itself as `content`:
  
    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      programmers: [
        {firstName: "Yehuda", id: 1},
        {firstName: "Tom",    id: 2}
      ]
    });
    ```
  
    ```handlebars
    {{view "select"
           content=programmers
           optionValuePath="content.id"
           optionLabelPath="content.firstName"}}
    ```
  
    Would result in the following HTML:
  
    ```html
    <select class="ember-select">
      <option value="1">Yehuda</option>
      <option value="2">Tom</option>
    </select>
    ```
  
    The `value` attribute of the selected `<option>` within an `Ember.Select`
    can be bound to a property on another object:
  
    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      programmers: [
        {firstName: "Yehuda", id: 1},
        {firstName: "Tom",    id: 2}
      ],
      currentProgrammer: {
        id: 2
      }
    });
    ```
  
    ```handlebars
    {{view "select"
           content=programmers
           optionValuePath="content.id"
           optionLabelPath="content.firstName"
           value=currentProgrammer.id}}
    ```
  
    Would result in the following HTML with a selected option:
  
    ```html
    <select class="ember-select">
      <option value="1">Yehuda</option>
      <option value="2" selected="selected">Tom</option>
    </select>
    ```
  
    Interacting with the rendered element by selecting the first option
    ('Yehuda') will update the `id` of `currentProgrammer`
    to match the `value` property of the newly selected `<option>`.
  
    Alternatively, you can control selection through the underlying objects
    used to render each object by binding the `selection` option. When the selected
    `<option>` is changed, the property path provided to `selection`
    will be updated to match the content object of the rendered `<option>`
    element:
  
    ```javascript
  
    var yehuda = {firstName: "Yehuda", id: 1, bff4eva: 'tom'}
    var tom = {firstName: "Tom", id: 2, bff4eva: 'yehuda'};
  
    App.ApplicationController = Ember.Controller.extend({
      selectedPerson: tom,
      programmers: [ yehuda, tom ]
    });
    ```
  
    ```handlebars
    {{view "select"
           content=programmers
           optionValuePath="content.id"
           optionLabelPath="content.firstName"
           selection=selectedPerson}}
    ```
  
    Would result in the following HTML with a selected option:
  
    ```html
    <select class="ember-select">
      <option value="1">Yehuda</option>
      <option value="2" selected="selected">Tom</option>
    </select>
    ```
  
    Interacting with the rendered element by selecting the first option
    ('Yehuda') will update the `selectedPerson` to match the object of
    the newly selected `<option>`. In this case it is the first object
    in the `programmers`
  
    ## Supplying a Prompt
  
    A `null` value for the `Ember.Select`'s `value` or `selection` property
    results in there being no `<option>` with a `selected` attribute:
  
    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      selectedProgrammer: null,
      programmers: ["Yehuda", "Tom"]
    });
    ```
  
    ``` handlebars
    {{view "select"
           content=programmers
           value=selectedProgrammer
    }}
    ```
  
    Would result in the following HTML:
  
    ```html
    <select class="ember-select">
      <option value="Yehuda">Yehuda</option>
      <option value="Tom">Tom</option>
    </select>
    ```
  
    Although `selectedProgrammer` is `null` and no `<option>`
    has a `selected` attribute the rendered HTML will display the
    first item as though it were selected. You can supply a string
    value for the `Ember.Select` to display when there is no selection
    with the `prompt` option:
  
    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      selectedProgrammer: null,
      programmers: [ "Yehuda", "Tom" ]
    });
    ```
  
    ```handlebars
    {{view "select"
           content=programmers
           value=selectedProgrammer
           prompt="Please select a name"
    }}
    ```
  
    Would result in the following HTML:
  
    ```html
    <select class="ember-select">
      <option>Please select a name</option>
      <option value="Yehuda">Yehuda</option>
      <option value="Tom">Tom</option>
    </select>
    ```
  
    @class Select
    @namespace Ember
    @extends Ember.View
    @public
    @deprecated See http://emberjs.com/deprecations/v1.x/#toc_ember-select
  */
  var Select = _emberViewsViewsView["default"].extend({
    instrumentDisplay: "Ember.Select",

    tagName: "select",
    classNames: ["ember-select"],
    defaultTemplate: defaultTemplate,
    attributeBindings: ["autofocus", "autocomplete", "disabled", "form", "multiple", "name", "required", "size", "tabindex"],

    /**
      The `multiple` attribute of the select element. Indicates whether multiple
      options can be selected.
       @property multiple
      @type Boolean
      @default false
      @public
    */
    multiple: false,

    /**
      The `disabled` attribute of the select element. Indicates whether
      the element is disabled from interactions.
       @property disabled
      @type Boolean
      @default false
      @public
    */
    disabled: false,

    /**
      The `required` attribute of the select element. Indicates whether
      a selected option is required for form validation.
       @property required
      @type Boolean
      @default false
      @since 1.5.0
      @public
    */
    required: false,

    /**
      The list of options.
       If `optionLabelPath` and `optionValuePath` are not overridden, this should
      be a list of strings, which will serve simultaneously as labels and values.
       Otherwise, this should be a list of objects. For instance:
       ```javascript
      var App = Ember.Application.create();
      var App.MySelect = Ember.Select.extend({
        content: Ember.A([
            { id: 1, firstName: 'Yehuda' },
            { id: 2, firstName: 'Tom' }
          ]),
        optionLabelPath: 'content.firstName',
        optionValuePath: 'content.id'
      });
      ```
       @property content
      @type Array
      @default null
      @public
    */
    content: null,

    /**
      When `multiple` is `false`, the element of `content` that is currently
      selected, if any.
       When `multiple` is `true`, an array of such elements.
       @property selection
      @type Object or Array
      @default null
      @public
    */
    selection: null,

    /**
      In single selection mode (when `multiple` is `false`), value can be used to
      get the current selection's value or set the selection by its value.
       It is not currently supported in multiple selection mode.
       @property value
      @type String
      @default null
      @public
    */
    value: (0, _emberMetalComputed.computed)({
      get: function (key) {
        var valuePath = (0, _emberMetalProperty_get.get)(this, "_valuePath");
        return valuePath ? (0, _emberMetalProperty_get.get)(this, "selection." + valuePath) : (0, _emberMetalProperty_get.get)(this, "selection");
      },
      set: function (key, value) {
        return value;
      }
    }).property("_valuePath", "selection"),

    /**
      If given, a top-most dummy option will be rendered to serve as a user
      prompt.
       @property prompt
      @type String
      @default null
      @public
    */
    prompt: null,

    /**
      The path of the option labels. See [content](/api/classes/Ember.Select.html#property_content).
       @property optionLabelPath
      @type String
      @default 'content'
      @public
    */
    optionLabelPath: "content",

    /**
      The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).
       @property optionValuePath
      @type String
      @default 'content'
      @public
    */
    optionValuePath: "content",

    /**
      The path of the option group.
      When this property is used, `content` should be sorted by `optionGroupPath`.
       @property optionGroupPath
      @type String
      @default null
      @public
    */
    optionGroupPath: null,

    /**
      The view class for optgroup.
       @property groupView
      @type Ember.View
      @default Ember.SelectOptgroup
      @public
    */
    groupView: SelectOptgroup,

    groupedContent: (0, _emberMetalComputed.computed)(function () {
      var groupPath = (0, _emberMetalProperty_get.get)(this, "optionGroupPath");
      var groupedContent = (0, _emberRuntimeSystemNative_array.A)();
      var content = (0, _emberMetalProperty_get.get)(this, "content") || [];

      (0, _emberMetalEnumerable_utils.forEach)(content, function (item) {
        var label = (0, _emberMetalProperty_get.get)(item, groupPath);

        if ((0, _emberMetalProperty_get.get)(groupedContent, "lastObject.label") !== label) {
          groupedContent.pushObject({
            label: label,
            content: (0, _emberRuntimeSystemNative_array.A)()
          });
        }

        (0, _emberMetalProperty_get.get)(groupedContent, "lastObject.content").push(item);
      });

      return groupedContent;
    }).property("optionGroupPath", "content.@each"),

    /**
      The view class for option.
       @property optionView
      @type Ember.View
      @default Ember.SelectOption
      @private
    */
    optionView: SelectOption,

    _change: function (hasDOM) {
      if ((0, _emberMetalProperty_get.get)(this, "multiple")) {
        this._changeMultiple(hasDOM);
      } else {
        this._changeSingle(hasDOM);
      }
    },

    selectionDidChange: (0, _emberMetalMixin.observer)("selection.@each", function () {
      var selection = (0, _emberMetalProperty_get.get)(this, "selection");
      if ((0, _emberMetalProperty_get.get)(this, "multiple")) {
        if (!(0, _emberRuntimeUtils.isArray)(selection)) {
          (0, _emberMetalProperty_set.set)(this, "selection", (0, _emberRuntimeSystemNative_array.A)([selection]));
          return;
        }
        this._selectionDidChangeMultiple();
      } else {
        this._selectionDidChangeSingle();
      }
    }),

    valueDidChange: (0, _emberMetalMixin.observer)("value", function () {
      var content = (0, _emberMetalProperty_get.get)(this, "content");
      var value = (0, _emberMetalProperty_get.get)(this, "value");
      var valuePath = (0, _emberMetalProperty_get.get)(this, "optionValuePath").replace(/^content\.?/, "");
      var selectedValue = valuePath ? (0, _emberMetalProperty_get.get)(this, "selection." + valuePath) : (0, _emberMetalProperty_get.get)(this, "selection");
      var selection;

      if (value !== selectedValue) {
        selection = content ? content.find(function (obj) {
          return value === (valuePath ? (0, _emberMetalProperty_get.get)(obj, valuePath) : obj);
        }) : null;

        this.set("selection", selection);
      }
    }),

    _setDefaults: function () {
      var selection = (0, _emberMetalProperty_get.get)(this, "selection");
      var value = (0, _emberMetalProperty_get.get)(this, "value");

      if (!(0, _emberMetalIs_none["default"])(selection)) {
        this.selectionDidChange();
      }
      if (!(0, _emberMetalIs_none["default"])(value)) {
        this.valueDidChange();
      }
      if ((0, _emberMetalIs_none["default"])(selection)) {
        this._change(false);
      }
    },

    _changeSingle: function (hasDOM) {
      var value = this.get("value");
      var selectedIndex = hasDOM !== false ? this.$()[0].selectedIndex : this._selectedIndex(value);
      var content = (0, _emberMetalProperty_get.get)(this, "content");
      var prompt = (0, _emberMetalProperty_get.get)(this, "prompt");

      if (!content || !(0, _emberMetalProperty_get.get)(content, "length")) {
        return;
      }
      if (prompt && selectedIndex === 0) {
        (0, _emberMetalProperty_set.set)(this, "selection", null);
        return;
      }

      if (prompt) {
        selectedIndex -= 1;
      }
      (0, _emberMetalProperty_set.set)(this, "selection", content.objectAt(selectedIndex));
    },

    _selectedIndex: function (value) {
      var defaultIndex = arguments[1] === undefined ? 0 : arguments[1];

      var content = (0, _emberMetalProperty_get.get)(this, "contentValues");

      var selectionIndex = (0, _emberMetalEnumerable_utils.indexOf)(content, value);

      var prompt = (0, _emberMetalProperty_get.get)(this, "prompt");
      if (prompt) {
        selectionIndex += 1;
      }

      if (selectionIndex < 0) {
        selectionIndex = defaultIndex;
      }

      return selectionIndex;
    },

    _changeMultiple: function (hasDOM) {
      var options = hasDOM !== false ? this.$("option:selected") : [];
      var prompt = (0, _emberMetalProperty_get.get)(this, "prompt");
      var offset = prompt ? 1 : 0;
      var content = (0, _emberMetalProperty_get.get)(this, "content");
      var selection = (0, _emberMetalProperty_get.get)(this, "selection");

      if (!content) {
        return;
      }
      if (options) {
        var selectedIndexes = options.map(function () {
          return this.index - offset;
        });
        var newSelection = content.objectsAt([].slice.call(selectedIndexes));

        if ((0, _emberRuntimeUtils.isArray)(selection)) {
          (0, _emberMetalEnumerable_utils.replace)(selection, 0, (0, _emberMetalProperty_get.get)(selection, "length"), newSelection);
        } else {
          (0, _emberMetalProperty_set.set)(this, "selection", newSelection);
        }
      }
    },

    _selectionDidChangeSingle: function () {
      var value = (0, _emberMetalProperty_get.get)(this, "value");
      var self = this;
      if (value && value.then) {
        value.then(function (resolved) {
          // Ensure that we don't overwrite new value
          if ((0, _emberMetalProperty_get.get)(self, "value") === value) {
            self._setSelectedIndex(resolved);
          }
        });
      } else {
        this._setSelectedIndex(value);
      }
    },

    _setSelectedIndex: function (selectionValue) {
      var el = (0, _emberMetalProperty_get.get)(this, "element");
      if (!el) {
        return;
      }

      el.selectedIndex = this._selectedIndex(selectionValue, -1);
    },

    _valuePath: (0, _emberMetalComputed.computed)("optionValuePath", function () {
      var optionValuePath = (0, _emberMetalProperty_get.get)(this, "optionValuePath");
      return optionValuePath.replace(/^content\.?/, "");
    }),

    contentValues: (0, _emberMetalComputed.computed)("content.[]", "_valuePath", function () {
      var valuePath = (0, _emberMetalProperty_get.get)(this, "_valuePath");
      var content = (0, _emberMetalProperty_get.get)(this, "content") || [];

      if (valuePath) {
        return (0, _emberMetalEnumerable_utils.map)(content, function (el) {
          return (0, _emberMetalProperty_get.get)(el, valuePath);
        });
      } else {
        return (0, _emberMetalEnumerable_utils.map)(content, function (el) {
          return el;
        });
      }
    }),

    _selectionDidChangeMultiple: function () {
      var content = (0, _emberMetalProperty_get.get)(this, "content");
      var selection = (0, _emberMetalProperty_get.get)(this, "selection");
      var selectedIndexes = content ? (0, _emberMetalEnumerable_utils.indexesOf)(content, selection) : [-1];
      var prompt = (0, _emberMetalProperty_get.get)(this, "prompt");
      var offset = prompt ? 1 : 0;
      var options = this.$("option");
      var adjusted;

      if (options) {
        options.each(function () {
          adjusted = this.index > -1 ? this.index - offset : -1;
          this.selected = (0, _emberMetalEnumerable_utils.indexOf)(selectedIndexes, adjusted) > -1;
        });
      }
    },

    _willRender: function () {
      this._setDefaults();
    },

    init: function () {
      this._super.apply(this, arguments);
      this.on("change", this, this._change);
    }
  });

  var DeprecatedSelect = Select.extend({
    init: function () {
      this._super.apply(this, arguments);
      Ember.deprecate("Ember.Select is deprecated. Consult the Deprecations Guide for a migration strategy.", !!Ember.ENV._ENABLE_LEGACY_VIEW_SUPPORT, { url: "http://emberjs.com/deprecations/v1.x/#toc_ember-select" });
    }
  });

  exports["default"] = Select;
  exports.Select = Select;
  exports.DeprecatedSelect = DeprecatedSelect;
  exports.SelectOption = SelectOption;
  exports.SelectOptgroup = SelectOptgroup;
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/views/states", ["exports", "ember-metal/platform/create", "ember-metal/merge", "ember-views/views/states/default", "ember-views/views/states/pre_render", "ember-views/views/states/has_element", "ember-views/views/states/in_dom", "ember-views/views/states/destroying"], function (exports, _emberMetalPlatformCreate, _emberMetalMerge, _emberViewsViewsStatesDefault, _emberViewsViewsStatesPre_render, _emberViewsViewsStatesHas_element, _emberViewsViewsStatesIn_dom, _emberViewsViewsStatesDestroying) {
  exports.cloneStates = cloneStates;

  function cloneStates(from) {
    var into = {};

    into._default = {};
    into.preRender = (0, _emberMetalPlatformCreate["default"])(into._default);
    into.destroying = (0, _emberMetalPlatformCreate["default"])(into._default);
    into.hasElement = (0, _emberMetalPlatformCreate["default"])(into._default);
    into.inDOM = (0, _emberMetalPlatformCreate["default"])(into.hasElement);

    for (var stateName in from) {
      if (!from.hasOwnProperty(stateName)) {
        continue;
      }
      (0, _emberMetalMerge["default"])(into[stateName], from[stateName]);
    }

    return into;
  }

  var states = {
    _default: _emberViewsViewsStatesDefault["default"],
    preRender: _emberViewsViewsStatesPre_render["default"],
    inDOM: _emberViewsViewsStatesIn_dom["default"],
    hasElement: _emberViewsViewsStatesHas_element["default"],
    destroying: _emberViewsViewsStatesDestroying["default"]
  };
  exports.states = states;
});
enifed("ember-views/views/states/default", ["exports", "ember-metal/error", "ember-metal/property_get", "ember-metal/property_events", "ember-views/compat/attrs-proxy"], function (exports, _emberMetalError, _emberMetalProperty_get, _emberMetalProperty_events, _emberViewsCompatAttrsProxy) {

  /**
  @module ember
  @submodule ember-views
  */
  exports["default"] = {
    // appendChild is only legal while rendering the buffer.
    appendChild: function () {
      throw new _emberMetalError["default"]("You can't use appendChild outside of the rendering process");
    },

    $: function () {
      return undefined;
    },

    getElement: function () {
      return null;
    },

    legacyAttrWillChange: function (view, key) {
      if (key in view.attrs && !(key in view)) {
        (0, _emberMetalProperty_events.propertyWillChange)(view, key);
      }
    },

    legacyAttrDidChange: function (view, key) {
      if (key in view.attrs && !(key in view)) {
        (0, _emberMetalProperty_events.propertyDidChange)(view, key);
      }
    },

    legacyPropertyDidChange: function (view, key) {
      var attrs = view.attrs;

      if (attrs && key in attrs) {
        var possibleCell = attrs[key];

        if (possibleCell && possibleCell[_emberViewsCompatAttrsProxy.MUTABLE_CELL]) {
          var value = (0, _emberMetalProperty_get.get)(view, key);
          if (value === possibleCell.value) {
            return;
          }
          possibleCell.update(value);
        }
      }
    },

    // Handle events from `Ember.EventDispatcher`
    handleEvent: function () {
      return true; // continue event propagation
    },

    cleanup: function () {},
    destroyElement: function () {},

    rerender: function (view) {
      view.renderer.ensureViewNotRendering(view);
    },
    invokeObserver: function () {}
  };
});
enifed("ember-views/views/states/destroying", ["exports", "ember-metal/merge", "ember-metal/platform/create", "ember-runtime/system/string", "ember-views/views/states/default", "ember-metal/error"], function (exports, _emberMetalMerge, _emberMetalPlatformCreate, _emberRuntimeSystemString, _emberViewsViewsStatesDefault, _emberMetalError) {
  /**
  @module ember
  @submodule ember-views
  */

  var destroyingError = "You can't call %@ on a view being destroyed";

  var destroying = (0, _emberMetalPlatformCreate["default"])(_emberViewsViewsStatesDefault["default"]);

  (0, _emberMetalMerge["default"])(destroying, {
    appendChild: function () {
      throw new _emberMetalError["default"]((0, _emberRuntimeSystemString.fmt)(destroyingError, ["appendChild"]));
    },
    rerender: function () {
      throw new _emberMetalError["default"]((0, _emberRuntimeSystemString.fmt)(destroyingError, ["rerender"]));
    },
    destroyElement: function () {
      throw new _emberMetalError["default"]((0, _emberRuntimeSystemString.fmt)(destroyingError, ["destroyElement"]));
    }
  });

  exports["default"] = destroying;
});
enifed("ember-views/views/states/has_element", ["exports", "ember-views/views/states/default", "ember-metal/merge", "ember-metal/platform/create", "ember-views/system/jquery", "ember-metal/property_get", "htmlbars-runtime"], function (exports, _emberViewsViewsStatesDefault, _emberMetalMerge, _emberMetalPlatformCreate, _emberViewsSystemJquery, _emberMetalProperty_get, _htmlbarsRuntime) {

  var hasElement = (0, _emberMetalPlatformCreate["default"])(_emberViewsViewsStatesDefault["default"]);

  (0, _emberMetalMerge["default"])(hasElement, {
    $: function (view, sel) {
      var elem = view.element;
      return sel ? (0, _emberViewsSystemJquery["default"])(sel, elem) : (0, _emberViewsSystemJquery["default"])(elem);
    },

    getElement: function (view) {
      var parent = (0, _emberMetalProperty_get.get)(view, "parentView");
      if (parent) {
        parent = (0, _emberMetalProperty_get.get)(parent, "element");
      }
      if (parent) {
        return view.findElementInParentElement(parent);
      }
      return (0, _emberViewsSystemJquery["default"])("#" + (0, _emberMetalProperty_get.get)(view, "elementId"))[0];
    },

    // once the view has been inserted into the DOM, rerendering is
    // deferred to allow bindings to synchronize.
    rerender: function (view) {
      view.renderer.ensureViewNotRendering(view);

      var renderNode = view._renderNode;

      renderNode.isDirty = true;
      _htmlbarsRuntime.internal.visitChildren(renderNode.childNodes, function (node) {
        if (node.state && node.state.manager) {
          node.shouldReceiveAttrs = true;
        }
        node.isDirty = true;
      });

      renderNode.ownerNode.emberView.scheduleRevalidate(renderNode, view.toString(), "rerendering");
    },

    cleanup: function (view) {
      view.currentState.destroyElement(view);
    },

    // once the view is already in the DOM, destroying it removes it
    // from the DOM, nukes its element, and puts it back into the
    // preRender state if inDOM.

    destroyElement: function (view) {
      view.renderer.remove(view, false);
      return view;
    },

    // Handle events from `Ember.EventDispatcher`
    handleEvent: function (view, eventName, evt) {
      if (view.has(eventName)) {
        // Handler should be able to re-dispatch events, so we don't
        // preventDefault or stopPropagation.
        return view.trigger(eventName, evt);
      } else {
        return true; // continue event propagation
      }
    },

    invokeObserver: function (target, observer) {
      observer.call(target);
    }
  });

  exports["default"] = hasElement;
});

/**
@module ember
@submodule ember-views
*/
enifed("ember-views/views/states/in_dom", ["exports", "ember-metal/platform/create", "ember-metal/merge", "ember-metal/error", "ember-metal/observer", "ember-views/views/states/has_element"], function (exports, _emberMetalPlatformCreate, _emberMetalMerge, _emberMetalError, _emberMetalObserver, _emberViewsViewsStatesHas_element) {
  /**
  @module ember
  @submodule ember-views
  */

  var inDOM = (0, _emberMetalPlatformCreate["default"])(_emberViewsViewsStatesHas_element["default"]);

  (0, _emberMetalMerge["default"])(inDOM, {
    enter: function (view) {
      // Register the view for event handling. This hash is used by
      // Ember.EventDispatcher to dispatch incoming events.
      if (view.tagName !== "") {
        view._register();
      }

      Ember.runInDebug(function () {
        (0, _emberMetalObserver.addBeforeObserver)(view, "elementId", function () {
          throw new _emberMetalError["default"]("Changing a view's elementId after creation is not allowed");
        });
      });
    },

    exit: function (view) {
      view._unregister();
    },

    appendAttr: function (view, attrNode) {
      var childViews = view.childViews;

      if (!childViews.length) {
        childViews = view.childViews = childViews.slice();
      }
      childViews.push(attrNode);

      attrNode.parentView = view;
      view.renderer.appendAttrTo(attrNode, view.element, attrNode.attrName);

      view.propertyDidChange("childViews");

      return attrNode;
    }

  });

  exports["default"] = inDOM;
});
enifed("ember-views/views/states/pre_render", ["exports", "ember-views/views/states/default", "ember-metal/platform/create", "ember-metal/merge"], function (exports, _emberViewsViewsStatesDefault, _emberMetalPlatformCreate, _emberMetalMerge) {

  /**
  @module ember
  @submodule ember-views
  */

  var preRender = (0, _emberMetalPlatformCreate["default"])(_emberViewsViewsStatesDefault["default"]);

  (0, _emberMetalMerge["default"])(preRender, {
    legacyAttrWillChange: function (view, key) {},
    legacyAttrDidChange: function (view, key) {},
    legacyPropertyDidChange: function (view, key) {}
  });

  exports["default"] = preRender;
});
enifed("ember-views/views/text_area", ["exports", "ember-views/views/component", "ember-views/mixins/text_support"], function (exports, _emberViewsViewsComponent, _emberViewsMixinsText_support) {

  /**
    The internal class used to create textarea element when the `{{textarea}}`
    helper is used.
  
    See [handlebars.helpers.textarea](/api/classes/Ember.Handlebars.helpers.html#method_textarea)  for usage details.
  
    ## Layout and LayoutName properties
  
    Because HTML `textarea` elements do not contain inner HTML the `layout` and
    `layoutName` properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
    layout section for more information.
  
    @class TextArea
    @namespace Ember
    @extends Ember.Component
    @uses Ember.TextSupport
    @public
  */
  exports["default"] = _emberViewsViewsComponent["default"].extend(_emberViewsMixinsText_support["default"], {
    instrumentDisplay: "{{textarea}}",

    classNames: ["ember-text-area"],

    tagName: "textarea",
    attributeBindings: ["rows", "cols", "name", "selectionEnd", "selectionStart", "wrap", "lang", "dir", "value"],
    rows: null,
    cols: null
  });
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/views/text_field", ["exports", "ember-metal/computed", "ember-metal/environment", "ember-metal/platform/create", "ember-views/views/component", "ember-views/mixins/text_support"], function (exports, _emberMetalComputed, _emberMetalEnvironment, _emberMetalPlatformCreate, _emberViewsViewsComponent, _emberViewsMixinsText_support) {

  var inputTypeTestElement;
  var inputTypes = (0, _emberMetalPlatformCreate["default"])(null);
  function canSetTypeOfInput(type) {
    if (type in inputTypes) {
      return inputTypes[type];
    }

    // if running in outside of a browser always return the
    // original type
    if (!_emberMetalEnvironment["default"].hasDOM) {
      inputTypes[type] = type;

      return type;
    }

    if (!inputTypeTestElement) {
      inputTypeTestElement = document.createElement("input");
    }

    try {
      inputTypeTestElement.type = type;
    } catch (e) {}

    return inputTypes[type] = inputTypeTestElement.type === type;
  }

  /**
  
    The internal class used to create text inputs when the `{{input}}`
    helper is used with `type` of `text`.
  
    See [Handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.
  
    ## Layout and LayoutName properties
  
    Because HTML `input` elements are self closing `layout` and `layoutName`
    properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
    layout section for more information.
  
    @class TextField
    @namespace Ember
    @extends Ember.Component
    @uses Ember.TextSupport
    @public
  */
  exports["default"] = _emberViewsViewsComponent["default"].extend(_emberViewsMixinsText_support["default"], {
    instrumentDisplay: "{{input type=\"text\"}}",

    classNames: ["ember-text-field"],
    tagName: "input",
    attributeBindings: ["accept", "autocomplete", "autosave", "dir", "formaction", "formenctype", "formmethod", "formnovalidate", "formtarget", "height", "inputmode", "lang", "list", "max", "min", "multiple", "name", "pattern", "size", "step", "type", "value", "width"],

    defaultLayout: null,

    /**
      The `value` attribute of the input element. As the user inputs text, this
      property is updated live.
       @property value
      @type String
      @default ""
      @public
    */
    value: "",

    /**
      The `type` attribute of the input element.
       @property type
      @type String
      @default "text"
      @public
    */
    type: (0, _emberMetalComputed.computed)({
      get: function () {
        return "text";
      },

      set: function (key, value) {
        var type = "text";

        if (canSetTypeOfInput(value)) {
          type = value;
        }

        return type;
      }
    }),

    /**
      The `size` of the text field in characters.
       @property size
      @type String
      @default null
      @public
    */
    size: null,

    /**
      The `pattern` attribute of input element.
       @property pattern
      @type String
      @default null
      @public
    */
    pattern: null,

    /**
      The `min` attribute of input element used with `type="number"` or `type="range"`.
       @property min
      @type String
      @default null
      @since 1.4.0
      @public
    */
    min: null,

    /**
      The `max` attribute of input element used with `type="number"` or `type="range"`.
       @property max
      @type String
      @default null
      @since 1.4.0
      @public
    */
    max: null
  });
});
/**
@module ember
@submodule ember-views
*/
enifed("ember-views/views/view", ["exports", "ember-metal/core", "ember-runtime/mixins/evented", "ember-runtime/system/object", "ember-metal/error", "ember-metal/property_get", "ember-metal/run_loop", "ember-metal/observer", "ember-metal/utils", "ember-metal/computed", "ember-metal/mixin", "ember-metal/deprecate_property", "ember-views/system/jquery", "ember-views/system/ext", "ember-views/views/core_view", "ember-views/mixins/view_context_support", "ember-views/mixins/view_child_views_support", "ember-views/mixins/view_state_support", "ember-views/mixins/template_rendering_support", "ember-views/mixins/class_names_support", "ember-views/mixins/legacy_view_support", "ember-views/mixins/instrumentation_support", "ember-views/mixins/aria_role_support", "ember-views/mixins/visibility_support", "ember-views/compat/attrs-proxy"], function (exports, _emberMetalCore, _emberRuntimeMixinsEvented, _emberRuntimeSystemObject, _emberMetalError, _emberMetalProperty_get, _emberMetalRun_loop, _emberMetalObserver, _emberMetalUtils, _emberMetalComputed, _emberMetalMixin, _emberMetalDeprecate_property, _emberViewsSystemJquery, _emberViewsSystemExt, _emberViewsViewsCore_view, _emberViewsMixinsView_context_support, _emberViewsMixinsView_child_views_support, _emberViewsMixinsView_state_support, _emberViewsMixinsTemplate_rendering_support, _emberViewsMixinsClass_names_support, _emberViewsMixinsLegacy_view_support, _emberViewsMixinsInstrumentation_support, _emberViewsMixinsAria_role_support, _emberViewsMixinsVisibility_support, _emberViewsCompatAttrsProxy) {

  function K() {
    return this;
  }

  /**
  @module ember
  @submodule ember-views
  */

  _emberMetalCore["default"].warn("The VIEW_PRESERVES_CONTEXT flag has been removed and the functionality can no longer be disabled.", _emberMetalCore["default"].ENV.VIEW_PRESERVES_CONTEXT !== false);

  /**
    Global hash of shared templates. This will automatically be populated
    by the build tools so that you can store your Handlebars templates in
    separate files that get loaded into JavaScript at buildtime.
  
    @property TEMPLATES
    @for Ember
    @type Object
    @private
  */
  _emberMetalCore["default"].TEMPLATES = {};

  /**
    `Ember.View` is the class in Ember responsible for encapsulating templates of
    HTML content, combining templates with data to render as sections of a page's
    DOM, and registering and responding to user-initiated events.
  
    ## HTML Tag
  
    The default HTML tag name used for a view's DOM representation is `div`. This
    can be customized by setting the `tagName` property. The following view
    class:
  
    ```javascript
    ParagraphView = Ember.View.extend({
      tagName: 'em'
    });
    ```
  
    Would result in instances with the following HTML:
  
    ```html
    <em id="ember1" class="ember-view"></em>
    ```
  
    ## HTML `class` Attribute
  
    The HTML `class` attribute of a view's tag can be set by providing a
    `classNames` property that is set to an array of strings:
  
    ```javascript
    MyView = Ember.View.extend({
      classNames: ['my-class', 'my-other-class']
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view my-class my-other-class"></div>
    ```
  
    `class` attribute values can also be set by providing a `classNameBindings`
    property set to an array of properties names for the view. The return value
    of these properties will be added as part of the value for the view's `class`
    attribute. These properties can be computed properties:
  
    ```javascript
    MyView = Ember.View.extend({
      classNameBindings: ['propertyA', 'propertyB'],
      propertyA: 'from-a',
      propertyB: function() {
        if (someLogic) { return 'from-b'; }
      }.property()
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view from-a from-b"></div>
    ```
  
    If the value of a class name binding returns a boolean the property name
    itself will be used as the class name if the property is true. The class name
    will not be added if the value is `false` or `undefined`.
  
    ```javascript
    MyView = Ember.View.extend({
      classNameBindings: ['hovered'],
      hovered: true
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view hovered"></div>
    ```
  
    When using boolean class name bindings you can supply a string value other
    than the property name for use as the `class` HTML attribute by appending the
    preferred value after a ":" character when defining the binding:
  
    ```javascript
    MyView = Ember.View.extend({
      classNameBindings: ['awesome:so-very-cool'],
      awesome: true
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view so-very-cool"></div>
    ```
  
    Boolean value class name bindings whose property names are in a
    camelCase-style format will be converted to a dasherized format:
  
    ```javascript
    MyView = Ember.View.extend({
      classNameBindings: ['isUrgent'],
      isUrgent: true
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view is-urgent"></div>
    ```
  
    Class name bindings can also refer to object values that are found by
    traversing a path relative to the view itself:
  
    ```javascript
    MyView = Ember.View.extend({
      classNameBindings: ['messages.empty']
      messages: Ember.Object.create({
        empty: true
      })
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view empty"></div>
    ```
  
    If you want to add a class name for a property which evaluates to true and
    and a different class name if it evaluates to false, you can pass a binding
    like this:
  
    ```javascript
    // Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false
    Ember.View.extend({
      classNameBindings: ['isEnabled:enabled:disabled']
      isEnabled: true
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view enabled"></div>
    ```
  
    When isEnabled is `false`, the resulting HTML representation looks like
    this:
  
    ```html
    <div id="ember1" class="ember-view disabled"></div>
    ```
  
    This syntax offers the convenience to add a class if a property is `false`:
  
    ```javascript
    // Applies no class when isEnabled is true and class 'disabled' when isEnabled is false
    Ember.View.extend({
      classNameBindings: ['isEnabled::disabled']
      isEnabled: true
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view"></div>
    ```
  
    When the `isEnabled` property on the view is set to `false`, it will result
    in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view disabled"></div>
    ```
  
    Updates to the the value of a class name binding will result in automatic
    update of the  HTML `class` attribute in the view's rendered HTML
    representation. If the value becomes `false` or `undefined` the class name
    will be removed.
  
    Both `classNames` and `classNameBindings` are concatenated properties. See
    [Ember.Object](/api/classes/Ember.Object.html) documentation for more
    information about concatenated properties.
  
    ## HTML Attributes
  
    The HTML attribute section of a view's tag can be set by providing an
    `attributeBindings` property set to an array of property names on the view.
    The return value of these properties will be used as the value of the view's
    HTML associated attribute:
  
    ```javascript
    AnchorView = Ember.View.extend({
      tagName: 'a',
      attributeBindings: ['href'],
      href: 'http://google.com'
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <a id="ember1" class="ember-view" href="http://google.com"></a>
    ```
  
    One property can be mapped on to another by placing a ":" between
    the source property and the destination property:
  
    ```javascript
    AnchorView = Ember.View.extend({
      tagName: 'a',
      attributeBindings: ['url:href'],
      url: 'http://google.com'
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <a id="ember1" class="ember-view" href="http://google.com"></a>
    ```
  
    Namespaced attributes (e.g. `xlink:href`) are supported, but have to be
    mapped, since `:` is not a valid character for properties in Javascript:
  
    ```javascript
    UseView = Ember.View.extend({
      tagName: 'use',
      attributeBindings: ['xlinkHref:xlink:href'],
      xlinkHref: '#triangle'
    });
    ```
    Will result in view instances with an HTML representation of:
  
    ```html
    <use xlink:href="#triangle"></use>
    ```
  
    If the return value of an `attributeBindings` monitored property is a boolean
    the property will follow HTML's pattern of repeating the attribute's name as
    its value:
  
    ```javascript
    MyTextInput = Ember.View.extend({
      tagName: 'input',
      attributeBindings: ['disabled'],
      disabled: true
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <input id="ember1" class="ember-view" disabled="disabled" />
    ```
  
    `attributeBindings` can refer to computed properties:
  
    ```javascript
    MyTextInput = Ember.View.extend({
      tagName: 'input',
      attributeBindings: ['disabled'],
      disabled: function() {
        if (someLogic) {
          return true;
        } else {
          return false;
        }
      }.property()
    });
    ```
  
    Updates to the the property of an attribute binding will result in automatic
    update of the  HTML attribute in the view's rendered HTML representation.
  
    `attributeBindings` is a concatenated property. See [Ember.Object](/api/classes/Ember.Object.html)
    documentation for more information about concatenated properties.
  
    ## Templates
  
    The HTML contents of a view's rendered representation are determined by its
    template. Templates can be any function that accepts an optional context
    parameter and returns a string of HTML that will be inserted within the
    view's tag. Most typically in Ember this function will be a compiled
    `Ember.Handlebars` template.
  
    ```javascript
    AView = Ember.View.extend({
      template: Ember.Handlebars.compile('I am the template')
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view">I am the template</div>
    ```
  
    Within an Ember application is more common to define a Handlebars templates as
    part of a page:
  
    ```html
    <script type='text/x-handlebars' data-template-name='some-template'>
      Hello
    </script>
    ```
  
    And associate it by name using a view's `templateName` property:
  
    ```javascript
    AView = Ember.View.extend({
      templateName: 'some-template'
    });
    ```
  
    If you have nested resources, your Handlebars template will look like this:
  
    ```html
    <script type='text/x-handlebars' data-template-name='posts/new'>
      <h1>New Post</h1>
    </script>
    ```
  
    And `templateName` property:
  
    ```javascript
    AView = Ember.View.extend({
      templateName: 'posts/new'
    });
    ```
  
    Using a value for `templateName` that does not have a Handlebars template
    with a matching `data-template-name` attribute will throw an error.
  
    For views classes that may have a template later defined (e.g. as the block
    portion of a `{{view}}` Handlebars helper call in another template or in
    a subclass), you can provide a `defaultTemplate` property set to compiled
    template function. If a template is not later provided for the view instance
    the `defaultTemplate` value will be used:
  
    ```javascript
    AView = Ember.View.extend({
      defaultTemplate: Ember.Handlebars.compile('I was the default'),
      template: null,
      templateName: null
    });
    ```
  
    Will result in instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view">I was the default</div>
    ```
  
    If a `template` or `templateName` is provided it will take precedence over
    `defaultTemplate`:
  
    ```javascript
    AView = Ember.View.extend({
      defaultTemplate: Ember.Handlebars.compile('I was the default')
    });
  
    aView = AView.create({
      template: Ember.Handlebars.compile('I was the template, not default')
    });
    ```
  
    Will result in the following HTML representation when rendered:
  
    ```html
    <div id="ember1" class="ember-view">I was the template, not default</div>
    ```
  
    ## View Context
  
    The default context of the compiled template is the view's controller:
  
    ```javascript
    AView = Ember.View.extend({
      template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')
    });
  
    aController = Ember.Object.create({
      firstName: 'Barry',
      excitedGreeting: function() {
        return this.get("content.firstName") + "!!!"
      }.property()
    });
  
    aView = AView.create({
      controller: aController
    });
    ```
  
    Will result in an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view">Hello Barry!!!</div>
    ```
  
    A context can also be explicitly supplied through the view's `context`
    property. If the view has neither `context` nor `controller` properties, the
    `parentView`'s context will be used.
  
    ## Layouts
  
    Views can have a secondary template that wraps their main template. Like
    primary templates, layouts can be any function that  accepts an optional
    context parameter and returns a string of HTML that will be inserted inside
    view's tag. Views whose HTML element is self closing (e.g. `<input />`)
    cannot have a layout and this property will be ignored.
  
    Most typically in Ember a layout will be a compiled `Ember.Handlebars`
    template.
  
    A view's layout can be set directly with the `layout` property or reference
    an existing Handlebars template by name with the `layoutName` property.
  
    A template used as a layout must contain a single use of the Handlebars
    `{{yield}}` helper. The HTML contents of a view's rendered `template` will be
    inserted at this location:
  
    ```javascript
    AViewWithLayout = Ember.View.extend({
      layout: Ember.Handlebars.compile("<div class='my-decorative-class'>{{yield}}</div>"),
      template: Ember.Handlebars.compile("I got wrapped")
    });
    ```
  
    Will result in view instances with an HTML representation of:
  
    ```html
    <div id="ember1" class="ember-view">
      <div class="my-decorative-class">
        I got wrapped
      </div>
    </div>
    ```
  
    See [Ember.Handlebars.helpers.yield](/api/classes/Ember.Handlebars.helpers.html#method_yield)
    for more information.
  
    ## Responding to Browser Events
  
    Views can respond to user-initiated events in one of three ways: method
    implementation, through an event manager, and through `{{action}}` helper use
    in their template or layout.
  
    ### Method Implementation
  
    Views can respond to user-initiated events by implementing a method that
    matches the event name. A `jQuery.Event` object will be passed as the
    argument to this method.
  
    ```javascript
    AView = Ember.View.extend({
      click: function(event) {
        // will be called when when an instance's
        // rendered element is clicked
      }
    });
    ```
  
    ### Event Managers
  
    Views can define an object as their `eventManager` property. This object can
    then implement methods that match the desired event names. Matching events
    that occur on the view's rendered HTML or the rendered HTML of any of its DOM
    descendants will trigger this method. A `jQuery.Event` object will be passed
    as the first argument to the method and an  `Ember.View` object as the
    second. The `Ember.View` will be the view whose rendered HTML was interacted
    with. This may be the view with the `eventManager` property or one of its
    descendant views.
  
    ```javascript
    AView = Ember.View.extend({
      eventManager: Ember.Object.create({
        doubleClick: function(event, view) {
          // will be called when when an instance's
          // rendered element or any rendering
          // of this view's descendant
          // elements is clicked
        }
      })
    });
    ```
  
    An event defined for an event manager takes precedence over events of the
    same name handled through methods on the view.
  
    ```javascript
    AView = Ember.View.extend({
      mouseEnter: function(event) {
        // will never trigger.
      },
      eventManager: Ember.Object.create({
        mouseEnter: function(event, view) {
          // takes precedence over AView#mouseEnter
        }
      })
    });
    ```
  
    Similarly a view's event manager will take precedence for events of any views
    rendered as a descendant. A method name that matches an event name will not
    be called if the view instance was rendered inside the HTML representation of
    a view that has an `eventManager` property defined that handles events of the
    name. Events not handled by the event manager will still trigger method calls
    on the descendant.
  
    ```javascript
    var App = Ember.Application.create();
    App.OuterView = Ember.View.extend({
      template: Ember.Handlebars.compile("outer {{#view 'inner'}}inner{{/view}} outer"),
      eventManager: Ember.Object.create({
        mouseEnter: function(event, view) {
          // view might be instance of either
          // OuterView or InnerView depending on
          // where on the page the user interaction occurred
        }
      })
    });
  
    App.InnerView = Ember.View.extend({
      click: function(event) {
        // will be called if rendered inside
        // an OuterView because OuterView's
        // eventManager doesn't handle click events
      },
      mouseEnter: function(event) {
        // will never be called if rendered inside
        // an OuterView.
      }
    });
    ```
  
    ### Handlebars `{{action}}` Helper
  
    See [Handlebars.helpers.action](/api/classes/Ember.Handlebars.helpers.html#method_action).
  
    ### Event Names
  
    All of the event handling approaches described above respond to the same set
    of events. The names of the built-in events are listed below. (The hash of
    built-in events exists in `Ember.EventDispatcher`.) Additional, custom events
    can be registered by using `Ember.Application.customEvents`.
  
    Touch events:
  
    * `touchStart`
    * `touchMove`
    * `touchEnd`
    * `touchCancel`
  
    Keyboard events
  
    * `keyDown`
    * `keyUp`
    * `keyPress`
  
    Mouse events
  
    * `mouseDown`
    * `mouseUp`
    * `contextMenu`
    * `click`
    * `doubleClick`
    * `mouseMove`
    * `focusIn`
    * `focusOut`
    * `mouseEnter`
    * `mouseLeave`
  
    Form events:
  
    * `submit`
    * `change`
    * `focusIn`
    * `focusOut`
    * `input`
  
    HTML5 drag and drop events:
  
    * `dragStart`
    * `drag`
    * `dragEnter`
    * `dragLeave`
    * `dragOver`
    * `dragEnd`
    * `drop`
  
    ## Handlebars `{{view}}` Helper
  
    Other `Ember.View` instances can be included as part of a view's template by
    using the `{{view}}` Handlebars helper. See [Ember.Handlebars.helpers.view](/api/classes/Ember.Handlebars.helpers.html#method_view)
    for additional information.
  
    @class View
    @namespace Ember
    @extends Ember.CoreView
    @deprecated See http://emberjs.com/deprecations/v1.x/#toc_ember-view
    @uses Ember.ViewContextSupport
    @uses Ember.ViewChildViewsSupport
    @uses Ember.TemplateRenderingSupport
    @uses Ember.ClassNamesSupport
    @uses Ember.AttributeBindingsSupport
    @uses Ember.LegacyViewSupport
    @uses Ember.InstrumentationSupport
    @uses Ember.VisibilitySupport
    @uses Ember.AriaRoleSupport
    @public
  */
  // jscs:disable validateIndentation
  var View = _emberViewsViewsCore_view["default"].extend(_emberViewsMixinsView_context_support["default"], _emberViewsMixinsView_child_views_support["default"], _emberViewsMixinsView_state_support["default"], _emberViewsMixinsTemplate_rendering_support["default"], _emberViewsMixinsClass_names_support["default"], _emberViewsMixinsLegacy_view_support["default"], _emberViewsMixinsInstrumentation_support["default"], _emberViewsMixinsVisibility_support["default"], _emberViewsCompatAttrsProxy["default"], _emberViewsMixinsAria_role_support["default"], {
    concatenatedProperties: ["attributeBindings"],

    /**
      @property isView
      @type Boolean
      @default true
      @static
      @private
    */
    isView: true,

    // ..........................................................
    // TEMPLATE SUPPORT
    //

    /**
      The name of the template to lookup if no template is provided.
       By default `Ember.View` will lookup a template with this name in
      `Ember.TEMPLATES` (a shared global object).
       @property templateName
      @type String
      @default null
      @private
    */
    templateName: null,

    /**
      The name of the layout to lookup if no layout is provided.
       By default `Ember.View` will lookup a template with this name in
      `Ember.TEMPLATES` (a shared global object).
       @property layoutName
      @type String
      @default null
      @private
    */
    layoutName: null,

    /**
      The template used to render the view. This should be a function that
      accepts an optional context parameter and returns a string of HTML that
      will be inserted into the DOM relative to its parent view.
       In general, you should set the `templateName` property instead of setting
      the template yourself.
       @property template
      @type Function
      @private
    */

    template: (0, _emberMetalComputed.computed)("templateName", {
      get: function () {
        var templateName = (0, _emberMetalProperty_get.get)(this, "templateName");
        var template = this.templateForName(templateName, "template");
        _emberMetalCore["default"].assert("You specified the templateName " + templateName + " for " + this + ", but it did not exist.", !templateName || !!template);
        return template || (0, _emberMetalProperty_get.get)(this, "defaultTemplate");
      },
      set: function (key, value) {
        if (value !== undefined) {
          return value;
        }
        return (0, _emberMetalProperty_get.get)(this, key);
      }
    }),

    /**
      A view may contain a layout. A layout is a regular template but
      supersedes the `template` property during rendering. It is the
      responsibility of the layout template to retrieve the `template`
      property from the view (or alternatively, call `Handlebars.helpers.yield`,
      `{{yield}}`) to render it in the correct location.
       This is useful for a view that has a shared wrapper, but which delegates
      the rendering of the contents of the wrapper to the `template` property
      on a subclass.
       @property layout
      @type Function
      @private
    */
    layout: (0, _emberMetalComputed.computed)("layoutName", {
      get: function (key) {
        var layoutName = (0, _emberMetalProperty_get.get)(this, "layoutName");
        var layout = this.templateForName(layoutName, "layout");

        _emberMetalCore["default"].assert("You specified the layoutName " + layoutName + " for " + this + ", but it did not exist.", !layoutName || !!layout);

        return layout || (0, _emberMetalProperty_get.get)(this, "defaultLayout");
      },

      set: function (key, value) {
        return value;
      }
    }),

    templateForName: function (name, type) {
      if (!name) {
        return;
      }
      _emberMetalCore["default"].assert("templateNames are not allowed to contain periods: " + name, name.indexOf(".") === -1);

      if (!this.container) {
        throw new _emberMetalError["default"]("Container was not found when looking up a views template. " + "This is most likely due to manually instantiating an Ember.View. " + "See: http://git.io/EKPpnA");
      }

      return this.container.lookup("template:" + name);
    },

    /**
      If a value that affects template rendering changes, the view should be
      re-rendered to reflect the new value.
       @method _contextDidChange
      @private
      @private
    */
    _contextDidChange: (0, _emberMetalMixin.observer)("context", function () {
      this.rerender();
    }),

    /**
      Return the nearest ancestor that is an instance of the provided
      class or mixin.
       @method nearestOfType
      @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
             or an instance of Ember.Mixin.
      @return Ember.View
      @private
    */
    nearestOfType: function (klass) {
      var view = (0, _emberMetalProperty_get.get)(this, "parentView");
      var isOfType = klass instanceof _emberMetalMixin.Mixin ? function (view) {
        return klass.detect(view);
      } : function (view) {
        return klass.detect(view.constructor);
      };

      while (view) {
        if (isOfType(view)) {
          return view;
        }
        view = (0, _emberMetalProperty_get.get)(view, "parentView");
      }
    },

    /**
      Return the nearest ancestor that has a given property.
       @method nearestWithProperty
      @param {String} property A property name
      @return Ember.View
      @private
    */
    nearestWithProperty: function (property) {
      var view = (0, _emberMetalProperty_get.get)(this, "parentView");

      while (view) {
        if (property in view) {
          return view;
        }
        view = (0, _emberMetalProperty_get.get)(view, "parentView");
      }
    },

    /**
      Renders the view again. This will work regardless of whether the
      view is already in the DOM or not. If the view is in the DOM, the
      rendering process will be deferred to give bindings a chance
      to synchronize.
       If children were added during the rendering process using `appendChild`,
      `rerender` will remove them, because they will be added again
      if needed by the next `render`.
       In general, if the display of your view changes, you should modify
      the DOM element directly instead of manually calling `rerender`, which can
      be slow.
       @method rerender
      @public
    */
    rerender: function () {
      return this.currentState.rerender(this);
    },

    /*
     * @private
     *
     * @method _rerender
     */
    _rerender: function () {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }

      this._renderer.renderTree(this, this.parentView);
    },

    /**
      Given a property name, returns a dasherized version of that
      property name if the property evaluates to a non-falsy value.
       For example, if the view has property `isUrgent` that evaluates to true,
      passing `isUrgent` to this method will return `"is-urgent"`.
       @method _classStringForProperty
      @param property
      @private
    */
    _classStringForProperty: function (parsedPath) {
      return View._classStringForValue(parsedPath.path, parsedPath.stream.value(), parsedPath.className, parsedPath.falsyClassName);
    },

    // ..........................................................
    // ELEMENT SUPPORT
    //

    /**
      Returns the current DOM element for the view.
       @property element
      @type DOMElement
      @public
    */
    element: null,

    /**
      Returns a jQuery object for this view's element. If you pass in a selector
      string, this method will return a jQuery object, using the current element
      as its buffer.
       For example, calling `view.$('li')` will return a jQuery object containing
      all of the `li` elements inside the DOM element of this view.
       @method $
      @param {String} [selector] a jQuery-compatible selector string
      @return {jQuery} the jQuery object for the DOM node
      @public
    */
    $: function (sel) {
      _emberMetalCore["default"].assert("You cannot access this.$() on a component with `tagName: ''` specified.", this.tagName !== "");
      return this.currentState.$(this, sel);
    },

    forEachChildView: function (callback) {
      var childViews = this.childViews;

      if (!childViews) {
        return this;
      }

      var len = childViews.length;
      var view, idx;

      for (idx = 0; idx < len; idx++) {
        view = childViews[idx];
        callback(view);
      }

      return this;
    },

    /**
      Appends the view's element to the specified parent element.
       If the view does not have an HTML representation yet, `createElement()`
      will be called automatically.
       Note that this method just schedules the view to be appended; the DOM
      element will not be appended to the given element until all bindings have
      finished synchronizing.
       This is not typically a function that you will need to call directly when
      building your application. You might consider using `Ember.ContainerView`
      instead. If you do need to use `appendTo`, be sure that the target element
      you are providing is associated with an `Ember.Application` and does not
      have an ancestor element that is associated with an Ember view.
       @method appendTo
      @param {String|DOMElement|jQuery} A selector, element, HTML string, or jQuery object
      @return {Ember.View} receiver
      @private
    */
    appendTo: function (selector) {
      var target = (0, _emberViewsSystemJquery["default"])(selector);

      _emberMetalCore["default"].assert("You tried to append to (" + selector + ") but that isn't in the DOM", target.length > 0);
      _emberMetalCore["default"].assert("You cannot append to an existing Ember.View. Consider using Ember.ContainerView instead.", !target.is(".ember-view") && !target.parents().is(".ember-view"));

      this.renderer.appendTo(this, target[0]);

      return this;
    },

    /**
      @private
       Creates a new DOM element, renders the view into it, then returns the
      element.
       By default, the element created and rendered into will be a `BODY` element,
      since this is the default context that views are rendered into when being
      inserted directly into the DOM.
       ```js
      var element = view.renderToElement();
      element.tagName; // => "BODY"
      ```
       You can override the kind of element rendered into and returned by
      specifying an optional tag name as the first argument.
       ```js
      var element = view.renderToElement('table');
      element.tagName; // => "TABLE"
      ```
       This method is useful if you want to render the view into an element that
      is not in the document's body. Instead, a new `body` element, detached from
      the DOM is returned. FastBoot uses this to serialize the rendered view into
      a string for transmission over the network.
       ```js
      app.visit('/').then(function(instance) {
        var element;
        Ember.run(function() {
          element = renderToElement(instance);
        });
         res.send(serialize(element));
      });
      ```
       @method renderToElement
      @param {String} tagName The tag of the element to create and render into. Defaults to "body".
      @return {HTMLBodyElement} element
      @private
    */
    renderToElement: function (tagName) {
      tagName = tagName || "body";

      var element = this.renderer._dom.createElement(tagName);

      this.renderer.appendTo(this, element);
      return element;
    },

    /**
      Replaces the content of the specified parent element with this view's
      element. If the view does not have an HTML representation yet,
      the element will be generated automatically.
       Note that this method just schedules the view to be appended; the DOM
      element will not be appended to the given element until all bindings have
      finished synchronizing
       @method replaceIn
      @param {String|DOMElement|jQuery} target A selector, element, HTML string, or jQuery object
      @return {Ember.View} received
      @private
    */
    replaceIn: function (selector) {
      var target = (0, _emberViewsSystemJquery["default"])(selector);

      _emberMetalCore["default"].assert("You tried to replace in (" + selector + ") but that isn't in the DOM", target.length > 0);
      _emberMetalCore["default"].assert("You cannot replace an existing Ember.View. Consider using Ember.ContainerView instead.", !target.is(".ember-view") && !target.parents().is(".ember-view"));

      this.renderer.replaceIn(this, target[0]);

      return this;
    },

    /**
      Appends the view's element to the document body. If the view does
      not have an HTML representation yet
      the element will be generated automatically.
       If your application uses the `rootElement` property, you must append
      the view within that element. Rendering views outside of the `rootElement`
      is not supported.
       Note that this method just schedules the view to be appended; the DOM
      element will not be appended to the document body until all bindings have
      finished synchronizing.
       @method append
      @return {Ember.View} receiver
      @private
    */
    append: function () {
      return this.appendTo(document.body);
    },

    /**
      Removes the view's element from the element to which it is attached.
       @method remove
      @return {Ember.View} receiver
      @private
    */
    remove: function () {
      // What we should really do here is wait until the end of the run loop
      // to determine if the element has been re-appended to a different
      // element.
      // In the interim, we will just re-render if that happens. It is more
      // important than elements get garbage collected.
      if (!this.removedFromDOM) {
        this.destroyElement();
      }

      // Set flag to avoid future renders
      this._willInsert = false;
    },

    /**
      The HTML `id` of the view's element in the DOM. You can provide this
      value yourself but it must be unique (just as in HTML):
       ```handlebars
        {{my-component elementId="a-really-cool-id"}}
      ```
       If not manually set a default value will be provided by the framework.
       Once rendered an element's `elementId` is considered immutable and you
      should never change it. If you need to compute a dynamic value for the
      `elementId`, you should do this when the component or element is being
      instantiated:
       ```javascript
        export default Ember.Component.extend({
          setElementId: function() {
            var index = this.get('index');
            this.set('elementId', 'component-id' + index);
          }.on('init')
        });
      ```
       @property elementId
      @type String
      @public
    */
    elementId: null,

    /**
      Attempts to discover the element in the parent element. The default
      implementation looks for an element with an ID of `elementId` (or the
      view's guid if `elementId` is null). You can override this method to
      provide your own form of lookup. For example, if you want to discover your
      element using a CSS class name instead of an ID.
       @method findElementInParentElement
      @param {DOMElement} parentElement The parent's DOM element
      @return {DOMElement} The discovered element
      @private
    */
    findElementInParentElement: function (parentElem) {
      var id = "#" + this.elementId;
      return (0, _emberViewsSystemJquery["default"])(id)[0] || (0, _emberViewsSystemJquery["default"])(id, parentElem)[0];
    },

    /**
      Creates a DOM representation of the view and all of its child views by
      recursively calling the `render()` method. Once the element is created,
      it sets the `element` property of the view to the rendered element.
       After the element has been inserted into the DOM, `didInsertElement` will
      be called on this view and all of its child views.
       @method createElement
      @return {Ember.View} receiver
      @private
    */
    createElement: function () {
      if (this.element) {
        return this;
      }

      this.renderer.createElement(this);

      return this;
    },

    /**
      Called when a view is going to insert an element into the DOM.
       @event willInsertElement
      @public
    */
    willInsertElement: K,

    /**
      Called when the element of the view has been inserted into the DOM
      or after the view was re-rendered. Override this function to do any
      set up that requires an element in the document body.
       When a view has children, didInsertElement will be called on the
      child view(s) first, bubbling upwards through the hierarchy.
       @event didInsertElement
      @public
    */
    didInsertElement: K,

    /**
      Called when the view is about to rerender, but before anything has
      been torn down. This is a good opportunity to tear down any manual
      observers you have installed based on the DOM state
       @event willClearRender
      @public
    */
    willClearRender: K,

    /**
      Destroys any existing element along with the element for any child views
      as well. If the view does not currently have a element, then this method
      will do nothing.
       If you implement `willDestroyElement()` on your view, then this method will
      be invoked on your view before your element is destroyed to give you a
      chance to clean up any event handlers, etc.
       If you write a `willDestroyElement()` handler, you can assume that your
      `didInsertElement()` handler was called earlier for the same element.
       You should not call or override this method yourself, but you may
      want to implement the above callbacks.
       @method destroyElement
      @return {Ember.View} receiver
      @private
    */
    destroyElement: function () {
      return this.currentState.destroyElement(this);
    },

    /**
      Called when the element of the view is going to be destroyed. Override
      this function to do any teardown that requires an element, like removing
      event listeners.
       Please note: any property changes made during this event will have no
      effect on object observers.
       @event willDestroyElement
      @public
    */
    willDestroyElement: K,

    /**
      Called when the parentView property has changed.
       @event parentViewDidChange
      @private
    */
    parentViewDidChange: K,

    // ..........................................................
    // STANDARD RENDER PROPERTIES
    //

    /**
      Tag name for the view's outer element. The tag name is only used when an
      element is first created. If you change the `tagName` for an element, you
      must destroy and recreate the view element.
       By default, the render buffer will use a `<div>` tag for views.
       @property tagName
      @type String
      @default null
      @public
    */

    // We leave this null by default so we can tell the difference between
    // the default case and a user-specified tag.
    tagName: null,

    /*
      Used to specify a default tagName that can be overridden when extending
      or invoking from a template.
       @property _defaultTagName
      @private
    */

    /**
      Normally, Ember's component model is "write-only". The component takes a
      bunch of attributes that it got passed in, and uses them to render its
      template.
       One nice thing about this model is that if you try to set a value to the
      same thing as last time, Ember (through HTMLBars) will avoid doing any
      work on the DOM.
       This is not just a performance optimization. If an attribute has not
      changed, it is important not to clobber the element's "hidden state".
      For example, if you set an input's `value` to the same value as before,
      it will clobber selection state and cursor position. In other words,
      setting an attribute is not **always** idempotent.
       This method provides a way to read an element's attribute and also
      update the last value Ember knows about at the same time. This makes
      setting an attribute idempotent.
       In particular, what this means is that if you get an `<input>` element's
      `value` attribute and then re-render the template with the same value,
      it will avoid clobbering the cursor and selection position.
       Since most attribute sets are idempotent in the browser, you typically
      can get away with reading attributes using jQuery, but the most reliable
      way to do so is through this method.
       @method readDOMAttr
      @param {String} name the name of the attribute
      @return String
      @public
    */
    readDOMAttr: function (name) {
      var attr = this._renderNode.childNodes.filter(function (node) {
        return node.attrName === name;
      })[0];
      if (!attr) {
        return null;
      }
      return attr.getContent();
    },

    // .......................................................
    // CORE DISPLAY METHODS
    //

    /**
      Setup a view, but do not finish waking it up.
       * configure `childViews`
      * register the view with the global views hash, which is used for event
        dispatch
       @method init
      @private
    */
    init: function () {
      if (!this.elementId) {
        this.elementId = (0, _emberMetalUtils.guidFor)(this);
      }

      this.scheduledRevalidation = false;

      this._super.apply(this, arguments);

      if (!this._viewRegistry) {
        this._viewRegistry = View.views;
      }
    },

    __defineNonEnumerable: function (property) {
      this[property.name] = property.descriptor.value;
    },

    revalidate: function () {
      this.renderer.revalidateTopLevelView(this);
      this.scheduledRevalidation = false;
    },

    scheduleRevalidate: function (node, label, manualRerender) {
      if (node && !this._dispatching && node.guid in this.env.renderedNodes) {
        if (manualRerender) {
          _emberMetalCore["default"].deprecate("You manually rerendered " + label + " (a parent component) from a child component during the rendering process. This rarely worked in Ember 1.x and will be removed in Ember 2.0");
        } else {
          _emberMetalCore["default"].deprecate("You modified " + label + " twice in a single render. This was unreliable in Ember 1.x and will be removed in Ember 2.0");
        }
        _emberMetalRun_loop["default"].scheduleOnce("render", this, this.revalidate);
        return;
      }

      _emberMetalCore["default"].deprecate("A property of " + this + " was modified inside the " + this._dispatching + " hook. You should never change properties on components, services or models during " + this._dispatching + " because it causes significant performance degradation.", !this._dispatching);

      if (!this.scheduledRevalidation || this._dispatching) {
        this.scheduledRevalidation = true;
        _emberMetalRun_loop["default"].scheduleOnce("render", this, this.revalidate);
      }
    },

    appendAttr: function (node, buffer) {
      return this.currentState.appendAttr(this, node, buffer);
    },

    templateRenderer: null,

    /**
      Removes the view from its `parentView`, if one is found. Otherwise
      does nothing.
       @method removeFromParent
      @return {Ember.View} receiver
      @private
    */
    removeFromParent: function () {
      var parent = this.parentView;

      // Remove DOM element from parent
      this.remove();

      if (parent) {
        parent.removeChild(this);
      }
      return this;
    },

    /**
      You must call `destroy` on a view to destroy the view (and all of its
      child views). This will remove the view from any parent node, then make
      sure that the DOM element managed by the view can be released by the
      memory manager.
       @method destroy
      @private
    */
    destroy: function () {
      // get parentView before calling super because it'll be destroyed
      var parentView = this.parentView;
      var viewName = this.viewName;

      if (!this._super.apply(this, arguments)) {
        return;
      }

      // remove from non-virtual parent view if viewName was specified
      if (viewName && parentView) {
        parentView.set(viewName, null);
      }

      // Destroy HTMLbars template
      if (this.lastResult) {
        this.lastResult.destroy();
      }

      return this;
    },

    // .......................................................
    // EVENT HANDLING
    //

    /**
      Handle events from `Ember.EventDispatcher`
       @method handleEvent
      @param eventName {String}
      @param evt {Event}
      @private
    */
    handleEvent: function (eventName, evt) {
      return this.currentState.handleEvent(this, eventName, evt);
    },

    /**
      Registers the view in the view registry, keyed on the view's `elementId`.
      This is used by the EventDispatcher to locate the view in response to
      events.
       This method should only be called once the view has been inserted into the
      DOM.
       @method _register
      @private
    */
    _register: function () {
      _emberMetalCore["default"].assert("Attempted to register a view with an id already in use: " + this.elementId, !this._viewRegistry[this.elementId]);
      this._viewRegistry[this.elementId] = this;
    },

    /**
      Removes the view from the view registry. This should be called when the
      view is removed from DOM.
       @method _unregister
      @private
    */
    _unregister: function () {
      delete this._viewRegistry[this.elementId];
    },

    registerObserver: function (root, path, target, observer) {
      if (!observer && "function" === typeof target) {
        observer = target;
        target = null;
      }

      if (!root || typeof root !== "object") {
        return;
      }

      var scheduledObserver = this._wrapAsScheduled(observer);

      (0, _emberMetalObserver.addObserver)(root, path, target, scheduledObserver);

      this.one("willClearRender", function () {
        (0, _emberMetalObserver.removeObserver)(root, path, target, scheduledObserver);
      });
    },

    _wrapAsScheduled: function (fn) {
      var view = this;
      var stateCheckedFn = function () {
        view.currentState.invokeObserver(this, fn);
      };
      var scheduledFn = function () {
        _emberMetalRun_loop["default"].scheduleOnce("render", this, stateCheckedFn);
      };
      return scheduledFn;
    }
  });
  // jscs:enable validateIndentation

  (0, _emberMetalDeprecate_property.deprecateProperty)(View.prototype, "state", "_state");
  (0, _emberMetalDeprecate_property.deprecateProperty)(View.prototype, "states", "_states");

  /*
    Describe how the specified actions should behave in the various
    states that a view can exist in. Possible states:
  
    * preRender: when a view is first instantiated, and after its
      element was destroyed, it is in the preRender state
    * inBuffer: once a view has been rendered, but before it has
      been inserted into the DOM, it is in the inBuffer state
    * hasElement: the DOM representation of the view is created,
      and is ready to be inserted
    * inDOM: once a view has been inserted into the DOM it is in
      the inDOM state. A view spends the vast majority of its
      existence in this state.
    * destroyed: once a view has been destroyed (using the destroy
      method), it is in this state. No further actions can be invoked
      on a destroyed view.
  */

  // in the destroyed state, everything is illegal

  // before rendering has begun, all legal manipulations are noops.

  // inside the buffer, legal manipulations are done on the buffer

  // once the view has been inserted into the DOM, legal manipulations
  // are done on the DOM element.

  var mutation = _emberRuntimeSystemObject["default"].extend(_emberRuntimeMixinsEvented["default"]).create();
  // TODO MOVE TO RENDERER HOOKS
  View.addMutationListener = function (callback) {
    mutation.on("change", callback);
  };

  View.removeMutationListener = function (callback) {
    mutation.off("change", callback);
  };

  View.notifyMutationListeners = function () {
    mutation.trigger("change");
  };

  /**
    Global views hash
  
    @property views
    @static
    @type Object
    @private
  */
  View.views = {};

  // If someone overrides the child views computed property when
  // defining their class, we want to be able to process the user's
  // supplied childViews and then restore the original computed property
  // at view initialization time. This happens in Ember.ContainerView's init
  // method.
  View.childViewsProperty = _emberViewsMixinsView_child_views_support.childViewsProperty;

  var DeprecatedView = View.extend({
    init: function () {
      this._super.apply(this, arguments);
      _emberMetalCore["default"].deprecate("Ember.View is deprecated. Consult the Deprecations Guide for a migration strategy.", !!_emberMetalCore["default"].ENV._ENABLE_LEGACY_VIEW_SUPPORT, { url: "http://emberjs.com/deprecations/v1.x/#toc_ember-view" });
    }
  });

  exports["default"] = View;
  exports.ViewContextSupport = _emberViewsMixinsView_context_support["default"];
  exports.ViewChildViewsSupport = _emberViewsMixinsView_child_views_support["default"];
  exports.ViewStateSupport = _emberViewsMixinsView_state_support["default"];
  exports.TemplateRenderingSupport = _emberViewsMixinsTemplate_rendering_support["default"];
  exports.ClassNamesSupport = _emberViewsMixinsClass_names_support["default"];
  exports.DeprecatedView = DeprecatedView;
});
// Ember.assert, Ember.deprecate, Ember.warn, Ember.TEMPLATES,
// jQuery, Ember.lookup,
// Ember.ContainerView circular dependency
// Ember.ENV
// for the side effect of extending Ember.run.queues
enifed("ember", ["exports", "ember-metal", "ember-runtime", "ember-views", "ember-routing", "ember-application", "ember-extension-support", "ember-htmlbars", "ember-routing-htmlbars", "ember-routing-views", "ember-metal/environment", "ember-runtime/system/lazy_load"], function (exports, _emberMetal, _emberRuntime, _emberViews, _emberRouting, _emberApplication, _emberExtensionSupport, _emberHtmlbars, _emberRoutingHtmlbars, _emberRoutingViews, _emberMetalEnvironment, _emberRuntimeSystemLazy_load) {

  if (Ember.__loader.registry["ember-template-compiler"]) {
    requireModule("ember-template-compiler");
  }

  // do this to ensure that Ember.Test is defined properly on the global
  // if it is present.
  if (Ember.__loader.registry["ember-testing"]) {
    requireModule("ember-testing");
  }

  (0, _emberRuntimeSystemLazy_load.runLoadHooks)("Ember");

  /**
  @module ember
  */

  Ember.deprecate("Usage of Ember is deprecated for Internet Explorer 6 and 7, support will be removed in the next major version.", !_emberMetalEnvironment["default"].userAgent.match(/MSIE [67]/));
});
// require the main entry points for each of these packages
// this is so that the global exports occur properly
enifed('htmlbars-runtime', ['exports', './htmlbars-runtime/hooks', './htmlbars-runtime/render', '../htmlbars-util/morph-utils', '../htmlbars-util/template-utils', './htmlbars-runtime/expression-visitor', 'htmlbars-runtime/hooks'], function (exports, _htmlbarsRuntimeHooks, _htmlbarsRuntimeRender, _htmlbarsUtilMorphUtils, _htmlbarsUtilTemplateUtils, _htmlbarsRuntimeExpressionVisitor, _htmlbarsRuntimeHooks2) {

  var internal = {
    blockFor: _htmlbarsUtilTemplateUtils.blockFor,
    manualElement: _htmlbarsRuntimeRender.manualElement,
    hostBlock: _htmlbarsRuntimeHooks2.hostBlock,
    continueBlock: _htmlbarsRuntimeHooks2.continueBlock,
    hostYieldWithShadowTemplate: _htmlbarsRuntimeHooks2.hostYieldWithShadowTemplate,
    visitChildren: _htmlbarsUtilMorphUtils.visitChildren,
    validateChildMorphs: _htmlbarsRuntimeExpressionVisitor.validateChildMorphs,
    clearMorph: _htmlbarsUtilTemplateUtils.clearMorph
  };

  exports.hooks = _htmlbarsRuntimeHooks["default"];
  exports.render = _htmlbarsRuntimeRender["default"];
  exports.internal = internal;
});
enifed("htmlbars-runtime/expression-visitor", ["exports", "../htmlbars-util/object-utils", "../htmlbars-util/morph-utils"], function (exports, _htmlbarsUtilObjectUtils, _htmlbarsUtilMorphUtils) {

  /**
    Node classification:
  
    # Primary Statement Nodes:
  
    These nodes are responsible for a render node that represents a morph-range.
  
    * block
    * inline
    * content
    * element
    * component
  
    # Leaf Statement Nodes:
  
    This node is responsible for a render node that represents a morph-attr.
  
    * attribute
  
    # Expression Nodes:
  
    These nodes are not directly responsible for any part of the DOM, but are
    eventually passed to a Statement Node.
  
    * get
    * subexpr
    * concat
  */

  var base = {
    acceptExpression: function (node, env, scope) {
      var ret = { value: null };

      // Primitive literals are unambiguously non-array representations of
      // themselves.
      if (typeof node !== "object" || node === null) {
        ret.value = node;
        return ret;
      }

      switch (node[0]) {
        // can be used by manualElement
        case "value":
          ret.value = node[1];break;
        case "get":
          ret.value = this.get(node, env, scope);break;
        case "subexpr":
          ret.value = this.subexpr(node, env, scope);break;
        case "concat":
          ret.value = this.concat(node, env, scope);break;
      }

      return ret;
    },

    acceptParams: function (nodes, env, scope) {
      var arr = new Array(nodes.length);

      for (var i = 0, l = nodes.length; i < l; i++) {
        arr[i] = this.acceptExpression(nodes[i], env, scope).value;
      }

      return arr;
    },

    acceptHash: function (pairs, env, scope) {
      var object = {};

      for (var i = 0, l = pairs.length; i < l; i += 2) {
        object[pairs[i]] = this.acceptExpression(pairs[i + 1], env, scope).value;
      }

      return object;
    },

    // [ 'get', path ]
    get: function (node, env, scope) {
      return env.hooks.get(env, scope, node[1]);
    },

    // [ 'subexpr', path, params, hash ]
    subexpr: function (node, env, scope) {
      var path = node[1],
          params = node[2],
          hash = node[3];
      return env.hooks.subexpr(env, scope, path, this.acceptParams(params, env, scope), this.acceptHash(hash, env, scope));
    },

    // [ 'concat', parts ]
    concat: function (node, env, scope) {
      return env.hooks.concat(env, this.acceptParams(node[1], env, scope));
    },

    linkParamsAndHash: function (env, scope, morph, path, params, hash) {
      if (morph.linkedParams) {
        params = morph.linkedParams.params;
        hash = morph.linkedParams.hash;
      } else {
        params = params && this.acceptParams(params, env, scope);
        hash = hash && this.acceptHash(hash, env, scope);
      }

      (0, _htmlbarsUtilMorphUtils.linkParams)(env, scope, morph, path, params, hash);
      return [params, hash];
    }
  };

  var AlwaysDirtyVisitor = (0, _htmlbarsUtilObjectUtils.merge)((0, _htmlbarsUtilObjectUtils.createObject)(base), {
    // [ 'block', path, params, hash, templateId, inverseId ]
    block: function (node, morph, env, scope, template, visitor) {
      var path = node[1],
          params = node[2],
          hash = node[3],
          templateId = node[4],
          inverseId = node[5];
      var paramsAndHash = this.linkParamsAndHash(env, scope, morph, path, params, hash);

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.block(morph, env, scope, path, paramsAndHash[0], paramsAndHash[1], templateId === null ? null : template.templates[templateId], inverseId === null ? null : template.templates[inverseId], visitor);
    },

    // [ 'inline', path, params, hash ]
    inline: function (node, morph, env, scope, visitor) {
      var path = node[1],
          params = node[2],
          hash = node[3];
      var paramsAndHash = this.linkParamsAndHash(env, scope, morph, path, params, hash);

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.inline(morph, env, scope, path, paramsAndHash[0], paramsAndHash[1], visitor);
    },

    // [ 'content', path ]
    content: function (node, morph, env, scope, visitor) {
      var path = node[1];

      morph.isDirty = morph.isSubtreeDirty = false;

      if (isHelper(env, scope, path)) {
        env.hooks.inline(morph, env, scope, path, [], {}, visitor);
        if (morph.linkedResult) {
          (0, _htmlbarsUtilMorphUtils.linkParams)(env, scope, morph, "@content-helper", [morph.linkedResult], null);
        }
        return;
      }

      var params;
      if (morph.linkedParams) {
        params = morph.linkedParams.params;
      } else {
        params = [env.hooks.get(env, scope, path)];
      }

      (0, _htmlbarsUtilMorphUtils.linkParams)(env, scope, morph, "@range", params, null);
      env.hooks.range(morph, env, scope, path, params[0], visitor);
    },

    // [ 'element', path, params, hash ]
    element: function (node, morph, env, scope, visitor) {
      var path = node[1],
          params = node[2],
          hash = node[3];
      var paramsAndHash = this.linkParamsAndHash(env, scope, morph, path, params, hash);

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.element(morph, env, scope, path, paramsAndHash[0], paramsAndHash[1], visitor);
    },

    // [ 'attribute', name, value ]
    attribute: function (node, morph, env, scope) {
      var name = node[1],
          value = node[2];
      var paramsAndHash = this.linkParamsAndHash(env, scope, morph, "@attribute", [value], null);

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.attribute(morph, env, scope, name, paramsAndHash[0][0]);
    },

    // [ 'component', path, attrs, templateId, inverseId ]
    component: function (node, morph, env, scope, template, visitor) {
      var path = node[1],
          attrs = node[2],
          templateId = node[3],
          inverseId = node[4];
      var paramsAndHash = this.linkParamsAndHash(env, scope, morph, path, [], attrs);
      var templates = {
        "default": template.templates[templateId],
        inverse: template.templates[inverseId]
      };

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.component(morph, env, scope, path, paramsAndHash[0], paramsAndHash[1], templates, visitor);
    },

    // [ 'attributes', template ]
    attributes: function (node, morph, env, scope, parentMorph, visitor) {
      var template = node[1];
      env.hooks.attributes(morph, env, scope, template, parentMorph, visitor);
    }
  });

  exports.AlwaysDirtyVisitor = AlwaysDirtyVisitor;
  exports["default"] = (0, _htmlbarsUtilObjectUtils.merge)((0, _htmlbarsUtilObjectUtils.createObject)(base), {
    // [ 'block', path, params, hash, templateId, inverseId ]
    block: function (node, morph, env, scope, template, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.block(node, morph, env, scope, template, visitor);
      });
    },

    // [ 'inline', path, params, hash ]
    inline: function (node, morph, env, scope, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.inline(node, morph, env, scope, visitor);
      });
    },

    // [ 'content', path ]
    content: function (node, morph, env, scope, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.content(node, morph, env, scope, visitor);
      });
    },

    // [ 'element', path, params, hash ]
    element: function (node, morph, env, scope, template, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.element(node, morph, env, scope, template, visitor);
      });
    },

    // [ 'attribute', name, value ]
    attribute: function (node, morph, env, scope, template) {
      dirtyCheck(env, morph, null, function () {
        AlwaysDirtyVisitor.attribute(node, morph, env, scope, template);
      });
    },

    // [ 'component', path, attrs, templateId ]
    component: function (node, morph, env, scope, template, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.component(node, morph, env, scope, template, visitor);
      });
    },

    // [ 'attributes', template ]
    attributes: function (node, morph, env, scope, parentMorph, visitor) {
      AlwaysDirtyVisitor.attributes(node, morph, env, scope, parentMorph, visitor);
    }
  });

  function dirtyCheck(_env, morph, visitor, callback) {
    var isDirty = morph.isDirty;
    var isSubtreeDirty = morph.isSubtreeDirty;
    var env = _env;

    if (isSubtreeDirty) {
      visitor = AlwaysDirtyVisitor;
    }

    if (isDirty || isSubtreeDirty) {
      callback(visitor);
    } else {
      if (morph.buildChildEnv) {
        env = morph.buildChildEnv(morph.state, env);
      }
      (0, _htmlbarsUtilMorphUtils.validateChildMorphs)(env, morph, visitor);
    }
  }

  function isHelper(env, scope, path) {
    return env.hooks.keywords[path] !== undefined || env.hooks.hasHelper(env, scope, path);
  }
});
enifed("htmlbars-runtime/hooks", ["exports", "./render", "../morph-range/morph-list", "../htmlbars-util/object-utils", "../htmlbars-util/morph-utils", "../htmlbars-util/template-utils"], function (exports, _render, _morphRangeMorphList, _htmlbarsUtilObjectUtils, _htmlbarsUtilMorphUtils, _htmlbarsUtilTemplateUtils) {
  exports.wrap = wrap;
  exports.wrapForHelper = wrapForHelper;
  exports.hostYieldWithShadowTemplate = hostYieldWithShadowTemplate;
  exports.createScope = createScope;
  exports.createFreshScope = createFreshScope;
  exports.bindShadowScope = bindShadowScope;
  exports.createChildScope = createChildScope;
  exports.bindSelf = bindSelf;
  exports.updateSelf = updateSelf;
  exports.bindLocal = bindLocal;
  exports.updateLocal = updateLocal;
  exports.bindBlock = bindBlock;
  exports.block = block;
  exports.continueBlock = continueBlock;
  exports.hostBlock = hostBlock;
  exports.handleRedirect = handleRedirect;
  exports.handleKeyword = handleKeyword;
  exports.linkRenderNode = linkRenderNode;
  exports.inline = inline;
  exports.keyword = keyword;
  exports.invokeHelper = invokeHelper;
  exports.classify = classify;
  exports.partial = partial;
  exports.range = range;
  exports.element = element;
  exports.attribute = attribute;
  exports.subexpr = subexpr;
  exports.get = get;
  exports.getRoot = getRoot;
  exports.getChild = getChild;
  exports.getValue = getValue;
  exports.getCellOrValue = getCellOrValue;
  exports.component = component;
  exports.concat = concat;
  exports.hasHelper = hasHelper;
  exports.lookupHelper = lookupHelper;
  exports.bindScope = bindScope;
  exports.updateScope = updateScope;

  /**
    HTMLBars delegates the runtime behavior of a template to
    hooks provided by the host environment. These hooks explain
    the lexical environment of a Handlebars template, the internal
    representation of references, and the interaction between an
    HTMLBars template and the DOM it is managing.
  
    While HTMLBars host hooks have access to all of this internal
    machinery, templates and helpers have access to the abstraction
    provided by the host hooks.
  
    ## The Lexical Environment
  
    The default lexical environment of an HTMLBars template includes:
  
    * Any local variables, provided by *block arguments*
    * The current value of `self`
  
    ## Simple Nesting
  
    Let's look at a simple template with a nested block:
  
    ```hbs
    <h1>{{title}}</h1>
  
    {{#if author}}
      <p class="byline">{{author}}</p>
    {{/if}}
    ```
  
    In this case, the lexical environment at the top-level of the
    template does not change inside of the `if` block. This is
    achieved via an implementation of `if` that looks like this:
  
    ```js
    registerHelper('if', function(params) {
      if (!!params[0]) {
        return this.yield();
      }
    });
    ```
  
    A call to `this.yield` invokes the child template using the
    current lexical environment.
  
    ## Block Arguments
  
    It is possible for nested blocks to introduce new local
    variables:
  
    ```hbs
    {{#count-calls as |i|}}
    <h1>{{title}}</h1>
    <p>Called {{i}} times</p>
    {{/count}}
    ```
  
    In this example, the child block inherits its surrounding
    lexical environment, but augments it with a single new
    variable binding.
  
    The implementation of `count-calls` supplies the value of
    `i`, but does not otherwise alter the environment:
  
    ```js
    var count = 0;
    registerHelper('count-calls', function() {
      return this.yield([ ++count ]);
    });
    ```
  */

  function wrap(template) {
    if (template === null) {
      return null;
    }

    return {
      meta: template.meta,
      arity: template.arity,
      raw: template,
      render: function (self, env, options, blockArguments) {
        var scope = env.hooks.createFreshScope();

        options = options || {};
        options.self = self;
        options.blockArguments = blockArguments;

        return (0, _render["default"])(template, env, scope, options);
      }
    };
  }

  function wrapForHelper(template, env, scope, morph, renderState, visitor) {
    if (!template) {
      return {
        yieldIn: yieldInShadowTemplate(null, env, scope, morph, renderState, visitor)
      };
    }

    var yieldArgs = yieldTemplate(template, env, scope, morph, renderState, visitor);

    return {
      meta: template.meta,
      arity: template.arity,
      yield: yieldArgs,
      yieldItem: yieldItem(template, env, scope, morph, renderState, visitor),
      yieldIn: yieldInShadowTemplate(template, env, scope, morph, renderState, visitor),
      raw: template,

      render: function (self, blockArguments) {
        yieldArgs(blockArguments, self);
      }
    };
  }

  // Called by a user-land helper to render a template.
  function yieldTemplate(template, env, parentScope, morph, renderState, visitor) {
    return function (blockArguments, self) {
      // Render state is used to track the progress of the helper (since it
      // may call into us multiple times). As the user-land helper calls
      // into library code, we track what needs to be cleaned up after the
      // helper has returned.
      //
      // Here, we remember that a template has been yielded and so we do not
      // need to remove the previous template. (If no template is yielded
      // this render by the helper, we assume nothing should be shown and
      // remove any previous rendered templates.)
      renderState.morphToClear = null;

      // In this conditional is true, it means that on the previous rendering pass
      // the helper yielded multiple items via `yieldItem()`, but this time they
      // are yielding a single template. In that case, we mark the morph list for
      // cleanup so it is removed from the DOM.
      if (morph.morphList) {
        (0, _htmlbarsUtilTemplateUtils.clearMorphList)(morph.morphList, morph, env);
        renderState.morphListToClear = null;
      }

      var scope = parentScope;

      if (morph.lastYielded && isStableTemplate(template, morph.lastYielded)) {
        return morph.lastResult.revalidateWith(env, undefined, self, blockArguments, visitor);
      }

      // Check to make sure that we actually **need** a new scope, and can't
      // share the parent scope. Note that we need to move this check into
      // a host hook, because the host's notion of scope may require a new
      // scope in more cases than the ones we can determine statically.
      if (self !== undefined || parentScope === null || template.arity) {
        scope = env.hooks.createChildScope(parentScope);
      }

      morph.lastYielded = { self: self, template: template, shadowTemplate: null };

      // Render the template that was selected by the helper
      (0, _render["default"])(template, env, scope, { renderNode: morph, self: self, blockArguments: blockArguments });
    };
  }

  function yieldItem(template, env, parentScope, morph, renderState, visitor) {
    // Initialize state that tracks multiple items being
    // yielded in.
    var currentMorph = null;

    // Candidate morphs for deletion.
    var candidates = {};

    // Reuse existing MorphList if this is not a first-time
    // render.
    var morphList = morph.morphList;
    if (morphList) {
      currentMorph = morphList.firstChildMorph;
    }

    // Advances the currentMorph pointer to the morph in the previously-rendered
    // list that matches the yielded key. While doing so, it marks any morphs
    // that it advances past as candidates for deletion. Assuming those morphs
    // are not yielded in later, they will be removed in the prune step during
    // cleanup.
    // Note that this helper function assumes that the morph being seeked to is
    // guaranteed to exist in the previous MorphList; if this is called and the
    // morph does not exist, it will result in an infinite loop
    function advanceToKey(key) {
      var seek = currentMorph;

      while (seek.key !== key) {
        candidates[seek.key] = seek;
        seek = seek.nextMorph;
      }

      currentMorph = seek.nextMorph;
      return seek;
    }

    return function (key, blockArguments, self) {
      if (typeof key !== "string") {
        throw new Error("You must provide a string key when calling `yieldItem`; you provided " + key);
      }

      // At least one item has been yielded, so we do not wholesale
      // clear the last MorphList but instead apply a prune operation.
      renderState.morphListToClear = null;
      morph.lastYielded = null;

      var morphList, morphMap;

      if (!morph.morphList) {
        morph.morphList = new _morphRangeMorphList["default"]();
        morph.morphMap = {};
        morph.setMorphList(morph.morphList);
      }

      morphList = morph.morphList;
      morphMap = morph.morphMap;

      // A map of morphs that have been yielded in on this
      // rendering pass. Any morphs that do not make it into
      // this list will be pruned from the MorphList during the cleanup
      // process.
      var handledMorphs = renderState.handledMorphs;

      if (currentMorph && currentMorph.key === key) {
        yieldTemplate(template, env, parentScope, currentMorph, renderState, visitor)(blockArguments, self);
        currentMorph = currentMorph.nextMorph;
        handledMorphs[key] = currentMorph;
      } else if (morphMap[key] !== undefined) {
        var foundMorph = morphMap[key];

        if (key in candidates) {
          // If we already saw this morph, move it forward to this position
          morphList.insertBeforeMorph(foundMorph, currentMorph);
        } else {
          // Otherwise, move the pointer forward to the existing morph for this key
          advanceToKey(key);
        }

        handledMorphs[foundMorph.key] = foundMorph;
        yieldTemplate(template, env, parentScope, foundMorph, renderState, visitor)(blockArguments, self);
      } else {
        var childMorph = (0, _render.createChildMorph)(env.dom, morph);
        childMorph.key = key;
        morphMap[key] = handledMorphs[key] = childMorph;
        morphList.insertBeforeMorph(childMorph, currentMorph);
        yieldTemplate(template, env, parentScope, childMorph, renderState, visitor)(blockArguments, self);
      }

      renderState.morphListToPrune = morphList;
      morph.childNodes = null;
    };
  }

  function isStableTemplate(template, lastYielded) {
    return !lastYielded.shadowTemplate && template === lastYielded.template;
  }

  function yieldInShadowTemplate(template, env, parentScope, morph, renderState, visitor) {
    var hostYield = hostYieldWithShadowTemplate(template, env, parentScope, morph, renderState, visitor);

    return function (shadowTemplate, self) {
      hostYield(shadowTemplate, env, self, []);
    };
  }

  function hostYieldWithShadowTemplate(template, env, parentScope, morph, renderState, visitor) {
    return function (shadowTemplate, env, self, blockArguments) {
      renderState.morphToClear = null;

      if (morph.lastYielded && isStableShadowRoot(template, shadowTemplate, morph.lastYielded)) {
        return morph.lastResult.revalidateWith(env, undefined, self, blockArguments, visitor);
      }

      var shadowScope = env.hooks.createFreshScope();
      env.hooks.bindShadowScope(env, parentScope, shadowScope, renderState.shadowOptions);
      blockToYield.arity = template.arity;
      env.hooks.bindBlock(env, shadowScope, blockToYield);

      morph.lastYielded = { self: self, template: template, shadowTemplate: shadowTemplate };

      // Render the shadow template with the block available
      (0, _render["default"])(shadowTemplate.raw, env, shadowScope, { renderNode: morph, self: self, blockArguments: blockArguments });
    };

    function blockToYield(env, blockArguments, self, renderNode, shadowParent, visitor) {
      if (renderNode.lastResult) {
        renderNode.lastResult.revalidateWith(env, undefined, undefined, blockArguments, visitor);
      } else {
        var scope = parentScope;

        // Since a yielded template shares a `self` with its original context,
        // we only need to create a new scope if the template has block parameters
        if (template.arity) {
          scope = env.hooks.createChildScope(parentScope);
        }

        (0, _render["default"])(template, env, scope, { renderNode: renderNode, self: self, blockArguments: blockArguments });
      }
    }
  }

  function isStableShadowRoot(template, shadowTemplate, lastYielded) {
    return template === lastYielded.template && shadowTemplate === lastYielded.shadowTemplate;
  }

  function optionsFor(template, inverse, env, scope, morph, visitor) {
    // If there was a template yielded last time, set morphToClear so it will be cleared
    // if no template is yielded on this render.
    var morphToClear = morph.lastResult ? morph : null;
    var renderState = new _htmlbarsUtilTemplateUtils.RenderState(morphToClear, morph.morphList || null);

    return {
      templates: {
        template: wrapForHelper(template, env, scope, morph, renderState, visitor),
        inverse: wrapForHelper(inverse, env, scope, morph, renderState, visitor)
      },
      renderState: renderState
    };
  }

  function thisFor(options) {
    return {
      arity: options.template.arity,
      yield: options.template.yield,
      yieldItem: options.template.yieldItem,
      yieldIn: options.template.yieldIn
    };
  }

  /**
    Host Hook: createScope
  
    @param {Scope?} parentScope
    @return Scope
  
    Corresponds to entering a new HTMLBars block.
  
    This hook is invoked when a block is entered with
    a new `self` or additional local variables.
  
    When invoked for a top-level template, the
    `parentScope` is `null`, and this hook should return
    a fresh Scope.
  
    When invoked for a child template, the `parentScope`
    is the scope for the parent environment.
  
    Note that the `Scope` is an opaque value that is
    passed to other host hooks. For example, the `get`
    hook uses the scope to retrieve a value for a given
    scope and variable name.
  */

  function createScope(env, parentScope) {
    if (parentScope) {
      return env.hooks.createChildScope(parentScope);
    } else {
      return env.hooks.createFreshScope();
    }
  }

  function createFreshScope() {
    // because `in` checks have unpredictable performance, keep a
    // separate dictionary to track whether a local was bound.
    // See `bindLocal` for more information.
    return { self: null, blocks: {}, locals: {}, localPresent: {} };
  }

  /**
    Host Hook: bindShadowScope
  
    @param {Scope?} parentScope
    @return Scope
  
    Corresponds to rendering a new template into an existing
    render tree, but with a new top-level lexical scope. This
    template is called the "shadow root".
  
    If a shadow template invokes `{{yield}}`, it will render
    the block provided to the shadow root in the original
    lexical scope.
  
    ```hbs
    {{!-- post template --}}
    <p>{{props.title}}</p>
    {{yield}}
  
    {{!-- blog template --}}
    {{#post title="Hello world"}}
      <p>by {{byline}}</p>
      <article>This is my first post</article>
    {{/post}}
  
    {{#post title="Goodbye world"}}
      <p>by {{byline}}</p>
      <article>This is my last post</article>
    {{/post}}
    ```
  
    ```js
    helpers.post = function(params, hash, options) {
      options.template.yieldIn(postTemplate, { props: hash });
    };
  
    blog.render({ byline: "Yehuda Katz" });
    ```
  
    Produces:
  
    ```html
    <p>Hello world</p>
    <p>by Yehuda Katz</p>
    <article>This is my first post</article>
  
    <p>Goodbye world</p>
    <p>by Yehuda Katz</p>
    <article>This is my last post</article>
    ```
  
    In short, `yieldIn` creates a new top-level scope for the
    provided template and renders it, making the original block
    available to `{{yield}}` in that template.
  */

  function bindShadowScope(env /*, parentScope, shadowScope */) {
    return env.hooks.createFreshScope();
  }

  function createChildScope(parent) {
    var scope = (0, _htmlbarsUtilObjectUtils.createObject)(parent);
    scope.locals = (0, _htmlbarsUtilObjectUtils.createObject)(parent.locals);
    return scope;
  }

  /**
    Host Hook: bindSelf
  
    @param {Scope} scope
    @param {any} self
  
    Corresponds to entering a template.
  
    This hook is invoked when the `self` value for a scope is ready to be bound.
  
    The host must ensure that child scopes reflect the change to the `self` in
    future calls to the `get` hook.
  */

  function bindSelf(env, scope, self) {
    scope.self = self;
  }

  function updateSelf(env, scope, self) {
    env.hooks.bindSelf(env, scope, self);
  }

  /**
    Host Hook: bindLocal
  
    @param {Environment} env
    @param {Scope} scope
    @param {String} name
    @param {any} value
  
    Corresponds to entering a template with block arguments.
  
    This hook is invoked when a local variable for a scope has been provided.
  
    The host must ensure that child scopes reflect the change in future calls
    to the `get` hook.
  */

  function bindLocal(env, scope, name, value) {
    scope.localPresent[name] = true;
    scope.locals[name] = value;
  }

  function updateLocal(env, scope, name, value) {
    env.hooks.bindLocal(env, scope, name, value);
  }

  /**
    Host Hook: bindBlock
  
    @param {Environment} env
    @param {Scope} scope
    @param {Function} block
  
    Corresponds to entering a shadow template that was invoked by a block helper with
    `yieldIn`.
  
    This hook is invoked with an opaque block that will be passed along
    to the shadow template, and inserted into the shadow template when
    `{{yield}}` is used. Optionally provide a non-default block name
    that can be targeted by `{{yield to=blockName}}`.
  */

  function bindBlock(env, scope, block) {
    var name = arguments[3] === undefined ? "default" : arguments[3];

    scope.blocks[name] = block;
  }

  /**
    Host Hook: block
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
    @param {Array} params
    @param {Object} hash
    @param {Block} block
    @param {Block} elseBlock
  
    Corresponds to:
  
    ```hbs
    {{#helper param1 param2 key1=val1 key2=val2}}
      {{!-- child template --}}
    {{/helper}}
    ```
  
    This host hook is a workhorse of the system. It is invoked
    whenever a block is encountered, and is responsible for
    resolving the helper to call, and then invoke it.
  
    The helper should be invoked with:
  
    - `{Array} params`: the parameters passed to the helper
      in the template.
    - `{Object} hash`: an object containing the keys and values passed
      in the hash position in the template.
  
    The values in `params` and `hash` will already be resolved
    through a previous call to the `get` host hook.
  
    The helper should be invoked with a `this` value that is
    an object with one field:
  
    `{Function} yield`: when invoked, this function executes the
    block with the current scope. It takes an optional array of
    block parameters. If block parameters are supplied, HTMLBars
    will invoke the `bindLocal` host hook to bind the supplied
    values to the block arguments provided by the template.
  
    In general, the default implementation of `block` should work
    for most host environments. It delegates to other host hooks
    where appropriate, and properly invokes the helper with the
    appropriate arguments.
  */

  function block(morph, env, scope, path, params, hash, template, inverse, visitor) {
    if (handleRedirect(morph, env, scope, path, params, hash, template, inverse, visitor)) {
      return;
    }

    continueBlock(morph, env, scope, path, params, hash, template, inverse, visitor);
  }

  function continueBlock(morph, env, scope, path, params, hash, template, inverse, visitor) {
    hostBlock(morph, env, scope, template, inverse, null, visitor, function (options) {
      var helper = env.hooks.lookupHelper(env, scope, path);
      return env.hooks.invokeHelper(morph, env, scope, visitor, params, hash, helper, options.templates, thisFor(options.templates));
    });
  }

  function hostBlock(morph, env, scope, template, inverse, shadowOptions, visitor, callback) {
    var options = optionsFor(template, inverse, env, scope, morph, visitor);
    (0, _htmlbarsUtilTemplateUtils.renderAndCleanup)(morph, env, options, shadowOptions, callback);
  }

  function handleRedirect(morph, env, scope, path, params, hash, template, inverse, visitor) {
    if (!path) {
      return false;
    }

    var redirect = env.hooks.classify(env, scope, path);
    if (redirect) {
      switch (redirect) {
        case "component":
          env.hooks.component(morph, env, scope, path, params, hash, { "default": template, inverse: inverse }, visitor);break;
        case "inline":
          env.hooks.inline(morph, env, scope, path, params, hash, visitor);break;
        case "block":
          env.hooks.block(morph, env, scope, path, params, hash, template, inverse, visitor);break;
        default:
          throw new Error("Internal HTMLBars redirection to " + redirect + " not supported");
      }
      return true;
    }

    if (handleKeyword(path, morph, env, scope, params, hash, template, inverse, visitor)) {
      return true;
    }

    return false;
  }

  function handleKeyword(path, morph, env, scope, params, hash, template, inverse, visitor) {
    var keyword = env.hooks.keywords[path];
    if (!keyword) {
      return false;
    }

    if (typeof keyword === "function") {
      return keyword(morph, env, scope, params, hash, template, inverse, visitor);
    }

    if (keyword.willRender) {
      keyword.willRender(morph, env);
    }

    var lastState, newState;
    if (keyword.setupState) {
      lastState = (0, _htmlbarsUtilObjectUtils.shallowCopy)(morph.state);
      newState = morph.state = keyword.setupState(lastState, env, scope, params, hash);
    }

    if (keyword.childEnv) {
      // Build the child environment...
      env = keyword.childEnv(morph.state, env);

      // ..then save off the child env builder on the render node. If the render
      // node tree is re-rendered and this node is not dirty, the child env
      // builder will still be invoked so that child dirty render nodes still get
      // the correct child env.
      morph.buildChildEnv = keyword.childEnv;
    }

    var firstTime = !morph.rendered;

    if (keyword.isEmpty) {
      var isEmpty = keyword.isEmpty(morph.state, env, scope, params, hash);

      if (isEmpty) {
        if (!firstTime) {
          (0, _htmlbarsUtilTemplateUtils.clearMorph)(morph, env, false);
        }
        return true;
      }
    }

    if (firstTime) {
      if (keyword.render) {
        keyword.render(morph, env, scope, params, hash, template, inverse, visitor);
      }
      morph.rendered = true;
      return true;
    }

    var isStable;
    if (keyword.isStable) {
      isStable = keyword.isStable(lastState, newState);
    } else {
      isStable = stableState(lastState, newState);
    }

    if (isStable) {
      if (keyword.rerender) {
        var newEnv = keyword.rerender(morph, env, scope, params, hash, template, inverse, visitor);
        env = newEnv || env;
      }
      (0, _htmlbarsUtilMorphUtils.validateChildMorphs)(env, morph, visitor);
      return true;
    } else {
      (0, _htmlbarsUtilTemplateUtils.clearMorph)(morph, env, false);
    }

    // If the node is unstable, re-render from scratch
    if (keyword.render) {
      keyword.render(morph, env, scope, params, hash, template, inverse, visitor);
      morph.rendered = true;
      return true;
    }
  }

  function stableState(oldState, newState) {
    if ((0, _htmlbarsUtilObjectUtils.keyLength)(oldState) !== (0, _htmlbarsUtilObjectUtils.keyLength)(newState)) {
      return false;
    }

    for (var prop in oldState) {
      if (oldState[prop] !== newState[prop]) {
        return false;
      }
    }

    return true;
  }

  function linkRenderNode() {
    return;
  }

  /**
    Host Hook: inline
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
    @param {Array} params
    @param {Hash} hash
  
    Corresponds to:
  
    ```hbs
    {{helper param1 param2 key1=val1 key2=val2}}
    ```
  
    This host hook is similar to the `block` host hook, but it
    invokes helpers that do not supply an attached block.
  
    Like the `block` hook, the helper should be invoked with:
  
    - `{Array} params`: the parameters passed to the helper
      in the template.
    - `{Object} hash`: an object containing the keys and values passed
      in the hash position in the template.
  
    The values in `params` and `hash` will already be resolved
    through a previous call to the `get` host hook.
  
    In general, the default implementation of `inline` should work
    for most host environments. It delegates to other host hooks
    where appropriate, and properly invokes the helper with the
    appropriate arguments.
  
    The default implementation of `inline` also makes `partial`
    a keyword. Instead of invoking a helper named `partial`,
    it invokes the `partial` host hook.
  */

  function inline(morph, env, scope, path, params, hash, visitor) {
    if (handleRedirect(morph, env, scope, path, params, hash, null, null, visitor)) {
      return;
    }

    var value = undefined,
        hasValue = undefined;
    if (morph.linkedResult) {
      value = env.hooks.getValue(morph.linkedResult);
      hasValue = true;
    } else {
      var options = optionsFor(null, null, env, scope, morph);

      var helper = env.hooks.lookupHelper(env, scope, path);
      var result = env.hooks.invokeHelper(morph, env, scope, visitor, params, hash, helper, options.templates, thisFor(options.templates));

      if (result && result.link) {
        morph.linkedResult = result.value;
        (0, _htmlbarsUtilMorphUtils.linkParams)(env, scope, morph, "@content-helper", [morph.linkedResult], null);
      }

      if (result && "value" in result) {
        value = env.hooks.getValue(result.value);
        hasValue = true;
      }
    }

    if (hasValue) {
      if (morph.lastValue !== value) {
        morph.setContent(value);
      }
      morph.lastValue = value;
    }
  }

  function keyword(path, morph, env, scope, params, hash, template, inverse, visitor) {
    handleKeyword(path, morph, env, scope, params, hash, template, inverse, visitor);
  }

  function invokeHelper(morph, env, scope, visitor, _params, _hash, helper, templates, context) {
    var params = normalizeArray(env, _params);
    var hash = normalizeObject(env, _hash);
    return { value: helper.call(context, params, hash, templates) };
  }

  function normalizeArray(env, array) {
    var out = new Array(array.length);

    for (var i = 0, l = array.length; i < l; i++) {
      out[i] = env.hooks.getCellOrValue(array[i]);
    }

    return out;
  }

  function normalizeObject(env, object) {
    var out = {};

    for (var prop in object) {
      out[prop] = env.hooks.getCellOrValue(object[prop]);
    }

    return out;
  }

  function classify() {
    return null;
  }

  var keywords = {
    partial: function (morph, env, scope, params) {
      var value = env.hooks.partial(morph, env, scope, params[0]);
      morph.setContent(value);
      return true;
    },

    yield: function (morph, env, scope, params, hash, template, inverse, visitor) {
      // the current scope is provided purely for the creation of shadow
      // scopes; it should not be provided to user code.

      var to = env.hooks.getValue(hash.to) || "default";
      if (scope.blocks[to]) {
        scope.blocks[to](env, params, hash.self, morph, scope, visitor);
      }
      return true;
    },

    hasBlock: function (morph, env, scope, params) {
      var name = env.hooks.getValue(params[0]) || "default";
      return !!scope.blocks[name];
    },

    hasBlockParams: function (morph, env, scope, params) {
      var name = env.hooks.getValue(params[0]) || "default";
      return !!(scope.blocks[name] && scope.blocks[name].arity);
    }

  };

  exports.keywords = keywords;
  /**
    Host Hook: partial
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
  
    Corresponds to:
  
    ```hbs
    {{partial "location"}}
    ```
  
    This host hook is invoked by the default implementation of
    the `inline` hook. This makes `partial` a keyword in an
    HTMLBars environment using the default `inline` host hook.
  
    It is implemented as a host hook so that it can retrieve
    the named partial out of the `Environment`. Helpers, in
    contrast, only have access to the values passed in to them,
    and not to the ambient lexical environment.
  
    The host hook should invoke the referenced partial with
    the ambient `self`.
  */

  function partial(renderNode, env, scope, path) {
    var template = env.partials[path];
    return template.render(scope.self, env, {}).fragment;
  }

  /**
    Host hook: range
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {any} value
  
    Corresponds to:
  
    ```hbs
    {{content}}
    {{{unescaped}}}
    ```
  
    This hook is responsible for updating a render node
    that represents a range of content with a value.
  */

  function range(morph, env, scope, path, value, visitor) {
    if (handleRedirect(morph, env, scope, path, [value], {}, null, null, visitor)) {
      return;
    }

    value = env.hooks.getValue(value);

    if (morph.lastValue !== value) {
      morph.setContent(value);
    }

    morph.lastValue = value;
  }

  /**
    Host hook: element
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
    @param {Array} params
    @param {Hash} hash
  
    Corresponds to:
  
    ```hbs
    <div {{bind-attr foo=bar}}></div>
    ```
  
    This hook is responsible for invoking a helper that
    modifies an element.
  
    Its purpose is largely legacy support for awkward
    idioms that became common when using the string-based
    Handlebars engine.
  
    Most of the uses of the `element` hook are expected
    to be superseded by component syntax and the
    `attribute` hook.
  */

  function element(morph, env, scope, path, params, hash, visitor) {
    if (handleRedirect(morph, env, scope, path, params, hash, null, null, visitor)) {
      return;
    }

    var helper = env.hooks.lookupHelper(env, scope, path);
    if (helper) {
      env.hooks.invokeHelper(null, env, scope, null, params, hash, helper, { element: morph.element });
    }
  }

  /**
    Host hook: attribute
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {String} name
    @param {any} value
  
    Corresponds to:
  
    ```hbs
    <div foo={{bar}}></div>
    ```
  
    This hook is responsible for updating a render node
    that represents an element's attribute with a value.
  
    It receives the name of the attribute as well as an
    already-resolved value, and should update the render
    node with the value if appropriate.
  */

  function attribute(morph, env, scope, name, value) {
    value = env.hooks.getValue(value);

    if (morph.lastValue !== value) {
      morph.setContent(value);
    }

    morph.lastValue = value;
  }

  function subexpr(env, scope, helperName, params, hash) {
    var helper = env.hooks.lookupHelper(env, scope, helperName);
    var result = env.hooks.invokeHelper(null, env, scope, null, params, hash, helper, {});
    if (result && "value" in result) {
      return env.hooks.getValue(result.value);
    }
  }

  /**
    Host Hook: get
  
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
  
    Corresponds to:
  
    ```hbs
    {{foo.bar}}
      ^
  
    {{helper foo.bar key=value}}
             ^           ^
    ```
  
    This hook is the "leaf" hook of the system. It is used to
    resolve a path relative to the current scope.
  */

  function get(env, scope, path) {
    if (path === "") {
      return scope.self;
    }

    var keys = path.split(".");
    var value = env.hooks.getRoot(scope, keys[0])[0];

    for (var i = 1; i < keys.length; i++) {
      if (value) {
        value = env.hooks.getChild(value, keys[i]);
      } else {
        break;
      }
    }

    return value;
  }

  function getRoot(scope, key) {
    if (scope.localPresent[key]) {
      return [scope.locals[key]];
    } else if (scope.self) {
      return [scope.self[key]];
    } else {
      return [undefined];
    }
  }

  function getChild(value, key) {
    return value[key];
  }

  function getValue(reference) {
    return reference;
  }

  function getCellOrValue(reference) {
    return reference;
  }

  function component(morph, env, scope, tagName, params, attrs, templates, visitor) {
    if (env.hooks.hasHelper(env, scope, tagName)) {
      return env.hooks.block(morph, env, scope, tagName, params, attrs, templates["default"], templates.inverse, visitor);
    }

    componentFallback(morph, env, scope, tagName, attrs, templates["default"]);
  }

  function concat(env, params) {
    var value = "";
    for (var i = 0, l = params.length; i < l; i++) {
      value += env.hooks.getValue(params[i]);
    }
    return value;
  }

  function componentFallback(morph, env, scope, tagName, attrs, template) {
    var element = env.dom.createElement(tagName);
    for (var name in attrs) {
      element.setAttribute(name, env.hooks.getValue(attrs[name]));
    }
    var fragment = (0, _render["default"])(template, env, scope, {}).fragment;
    element.appendChild(fragment);
    morph.setNode(element);
  }

  function hasHelper(env, scope, helperName) {
    return env.helpers[helperName] !== undefined;
  }

  function lookupHelper(env, scope, helperName) {
    return env.helpers[helperName];
  }

  function bindScope() {}

  function updateScope(env, scope) {
    env.hooks.bindScope(env, scope);
  }

  exports["default"] = {
    // fundamental hooks that you will likely want to override
    bindLocal: bindLocal,
    bindSelf: bindSelf,
    bindScope: bindScope,
    classify: classify,
    component: component,
    concat: concat,
    createFreshScope: createFreshScope,
    getChild: getChild,
    getRoot: getRoot,
    getValue: getValue,
    getCellOrValue: getCellOrValue,
    keywords: keywords,
    linkRenderNode: linkRenderNode,
    partial: partial,
    subexpr: subexpr,

    // fundamental hooks with good default behavior
    bindBlock: bindBlock,
    bindShadowScope: bindShadowScope,
    updateLocal: updateLocal,
    updateSelf: updateSelf,
    updateScope: updateScope,
    createChildScope: createChildScope,
    hasHelper: hasHelper,
    lookupHelper: lookupHelper,
    invokeHelper: invokeHelper,
    cleanupRenderNode: null,
    destroyRenderNode: null,
    willCleanupTree: null,
    didCleanupTree: null,
    willRenderNode: null,
    didRenderNode: null,

    // derived hooks
    attribute: attribute,
    block: block,
    createScope: createScope,
    element: element,
    get: get,
    inline: inline,
    range: range,
    keyword: keyword
  };
});
/* morph, env, scope, params, hash */ /* env, scope, path */ /* env, scope */
// this function is used to handle host-specified extensions to scope
// other than `self`, `locals` and `block`.
enifed("htmlbars-runtime/morph", ["exports", "../morph-range", "../htmlbars-util/object-utils"], function (exports, _morphRange, _htmlbarsUtilObjectUtils) {

  var guid = 1;

  function HTMLBarsMorph(domHelper, contextualElement) {
    this.super$constructor(domHelper, contextualElement);

    this.state = {};
    this.ownerNode = null;
    this.isDirty = false;
    this.isSubtreeDirty = false;
    this.lastYielded = null;
    this.lastResult = null;
    this.lastValue = null;
    this.buildChildEnv = null;
    this.morphList = null;
    this.morphMap = null;
    this.key = null;
    this.linkedParams = null;
    this.linkedResult = null;
    this.childNodes = null;
    this.rendered = false;
    this.guid = "range" + guid++;
  }

  HTMLBarsMorph.empty = function (domHelper, contextualElement) {
    var morph = new HTMLBarsMorph(domHelper, contextualElement);
    morph.clear();
    return morph;
  };

  HTMLBarsMorph.create = function (domHelper, contextualElement, node) {
    var morph = new HTMLBarsMorph(domHelper, contextualElement);
    morph.setNode(node);
    return morph;
  };

  HTMLBarsMorph.attach = function (domHelper, contextualElement, firstNode, lastNode) {
    var morph = new HTMLBarsMorph(domHelper, contextualElement);
    morph.setRange(firstNode, lastNode);
    return morph;
  };

  var prototype = HTMLBarsMorph.prototype = (0, _htmlbarsUtilObjectUtils.createObject)(_morphRange["default"].prototype);
  prototype.constructor = HTMLBarsMorph;
  prototype.super$constructor = _morphRange["default"];

  exports["default"] = HTMLBarsMorph;
});
enifed("htmlbars-runtime/render", ["exports", "../htmlbars-util/array-utils", "../htmlbars-util/morph-utils", "./expression-visitor", "./morph", "../htmlbars-util/template-utils", "../htmlbars-util/void-tag-names"], function (exports, _htmlbarsUtilArrayUtils, _htmlbarsUtilMorphUtils, _expressionVisitor, _morph, _htmlbarsUtilTemplateUtils, _htmlbarsUtilVoidTagNames) {
  exports["default"] = render;
  exports.manualElement = manualElement;
  exports.attachAttributes = attachAttributes;
  exports.createChildMorph = createChildMorph;
  exports.getCachedFragment = getCachedFragment;

  var svgNamespace = "http://www.w3.org/2000/svg";

  function render(template, env, scope, options) {
    var dom = env.dom;
    var contextualElement;

    if (options) {
      if (options.renderNode) {
        contextualElement = options.renderNode.contextualElement;
      } else if (options.contextualElement) {
        contextualElement = options.contextualElement;
      }
    }

    dom.detectNamespace(contextualElement);

    var renderResult = RenderResult.build(env, scope, template, options, contextualElement);
    renderResult.render();

    return renderResult;
  }

  function RenderResult(env, scope, options, rootNode, ownerNode, nodes, fragment, template, shouldSetContent) {
    this.root = rootNode;
    this.fragment = fragment;

    this.nodes = nodes;
    this.template = template;
    this.statements = template.statements.slice();
    this.env = env;
    this.scope = scope;
    this.shouldSetContent = shouldSetContent;

    this.bindScope();

    if (options.attributes !== undefined) {
      nodes.push({ state: {} });
      this.statements.push(["attributes", attachAttributes(options.attributes)]);
    }

    if (options.self !== undefined) {
      this.bindSelf(options.self);
    }
    if (options.blockArguments !== undefined) {
      this.bindLocals(options.blockArguments);
    }

    this.initializeNodes(ownerNode);
  }

  RenderResult.build = function (env, scope, template, options, contextualElement) {
    var dom = env.dom;
    var fragment = getCachedFragment(template, env);
    var nodes = template.buildRenderNodes(dom, fragment, contextualElement);

    var rootNode, ownerNode, shouldSetContent;

    if (options && options.renderNode) {
      rootNode = options.renderNode;
      ownerNode = rootNode.ownerNode;
      shouldSetContent = true;
    } else {
      rootNode = dom.createMorph(null, fragment.firstChild, fragment.lastChild, contextualElement);
      ownerNode = rootNode;
      initializeNode(rootNode, ownerNode);
      shouldSetContent = false;
    }

    if (rootNode.childNodes) {
      (0, _htmlbarsUtilMorphUtils.visitChildren)(rootNode.childNodes, function (node) {
        (0, _htmlbarsUtilTemplateUtils.clearMorph)(node, env, true);
      });
    }

    rootNode.childNodes = nodes;
    return new RenderResult(env, scope, options, rootNode, ownerNode, nodes, fragment, template, shouldSetContent);
  };

  function manualElement(tagName, attributes) {
    var statements = [];

    for (var key in attributes) {
      if (typeof attributes[key] === "string") {
        continue;
      }
      statements.push(["attribute", key, attributes[key]]);
    }

    statements.push(["content", "yield"]);

    var template = {
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        if (tagName === "svg") {
          dom.setNamespace(svgNamespace);
        }
        var el1 = dom.createElement(tagName);

        for (var key in attributes) {
          if (typeof attributes[key] !== "string") {
            continue;
          }
          dom.setAttribute(el1, key, attributes[key]);
        }

        if (!_htmlbarsUtilVoidTagNames["default"][tagName]) {
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
        }

        dom.appendChild(el0, el1);

        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment) {
        var element = dom.childAt(fragment, [0]);
        var morphs = [];

        for (var key in attributes) {
          if (typeof attributes[key] === "string") {
            continue;
          }
          morphs.push(dom.createAttrMorph(element, key));
        }

        morphs.push(dom.createMorphAt(element, 0, 0));
        return morphs;
      },
      statements: statements,
      locals: [],
      templates: []
    };

    return template;
  }

  function attachAttributes(attributes) {
    var statements = [];

    for (var key in attributes) {
      if (typeof attributes[key] === "string") {
        continue;
      }
      statements.push(["attribute", key, attributes[key]]);
    }

    var template = {
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = this.element;
        if (el0.namespaceURI === "http://www.w3.org/2000/svg") {
          dom.setNamespace(svgNamespace);
        }
        for (var key in attributes) {
          if (typeof attributes[key] !== "string") {
            continue;
          }
          dom.setAttribute(el0, key, attributes[key]);
        }

        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom) {
        var element = this.element;
        var morphs = [];

        for (var key in attributes) {
          if (typeof attributes[key] === "string") {
            continue;
          }
          morphs.push(dom.createAttrMorph(element, key));
        }

        return morphs;
      },
      statements: statements,
      locals: [],
      templates: [],
      element: null
    };

    return template;
  }

  RenderResult.prototype.initializeNodes = function (ownerNode) {
    (0, _htmlbarsUtilArrayUtils.forEach)(this.root.childNodes, function (node) {
      initializeNode(node, ownerNode);
    });
  };

  RenderResult.prototype.render = function () {
    this.root.lastResult = this;
    this.root.rendered = true;
    this.populateNodes(_expressionVisitor.AlwaysDirtyVisitor);

    if (this.shouldSetContent && this.root.setContent) {
      this.root.setContent(this.fragment);
    }
  };

  RenderResult.prototype.dirty = function () {
    (0, _htmlbarsUtilMorphUtils.visitChildren)([this.root], function (node) {
      node.isDirty = true;
    });
  };

  RenderResult.prototype.revalidate = function (env, self, blockArguments, scope) {
    this.revalidateWith(env, scope, self, blockArguments, _expressionVisitor["default"]);
  };

  RenderResult.prototype.rerender = function (env, self, blockArguments, scope) {
    this.revalidateWith(env, scope, self, blockArguments, _expressionVisitor.AlwaysDirtyVisitor);
  };

  RenderResult.prototype.revalidateWith = function (env, scope, self, blockArguments, visitor) {
    if (env !== undefined) {
      this.env = env;
    }
    if (scope !== undefined) {
      this.scope = scope;
    }
    this.updateScope();

    if (self !== undefined) {
      this.updateSelf(self);
    }
    if (blockArguments !== undefined) {
      this.updateLocals(blockArguments);
    }

    this.populateNodes(visitor);
  };

  RenderResult.prototype.destroy = function () {
    var rootNode = this.root;
    (0, _htmlbarsUtilTemplateUtils.clearMorph)(rootNode, this.env, true);
  };

  RenderResult.prototype.populateNodes = function (visitor) {
    var env = this.env;
    var scope = this.scope;
    var template = this.template;
    var nodes = this.nodes;
    var statements = this.statements;
    var i, l;

    for (i = 0, l = statements.length; i < l; i++) {
      var statement = statements[i];
      var morph = nodes[i];

      if (env.hooks.willRenderNode) {
        env.hooks.willRenderNode(morph, env, scope);
      }

      switch (statement[0]) {
        case "block":
          visitor.block(statement, morph, env, scope, template, visitor);break;
        case "inline":
          visitor.inline(statement, morph, env, scope, visitor);break;
        case "content":
          visitor.content(statement, morph, env, scope, visitor);break;
        case "element":
          visitor.element(statement, morph, env, scope, template, visitor);break;
        case "attribute":
          visitor.attribute(statement, morph, env, scope);break;
        case "component":
          visitor.component(statement, morph, env, scope, template, visitor);break;
        case "attributes":
          visitor.attributes(statement, morph, env, scope, this.fragment, visitor);break;
      }

      if (env.hooks.didRenderNode) {
        env.hooks.didRenderNode(morph, env, scope);
      }
    }
  };

  RenderResult.prototype.bindScope = function () {
    this.env.hooks.bindScope(this.env, this.scope);
  };

  RenderResult.prototype.updateScope = function () {
    this.env.hooks.updateScope(this.env, this.scope);
  };

  RenderResult.prototype.bindSelf = function (self) {
    this.env.hooks.bindSelf(this.env, this.scope, self);
  };

  RenderResult.prototype.updateSelf = function (self) {
    this.env.hooks.updateSelf(this.env, this.scope, self);
  };

  RenderResult.prototype.bindLocals = function (blockArguments) {
    var localNames = this.template.locals;

    for (var i = 0, l = localNames.length; i < l; i++) {
      this.env.hooks.bindLocal(this.env, this.scope, localNames[i], blockArguments[i]);
    }
  };

  RenderResult.prototype.updateLocals = function (blockArguments) {
    var localNames = this.template.locals;

    for (var i = 0, l = localNames.length; i < l; i++) {
      this.env.hooks.updateLocal(this.env, this.scope, localNames[i], blockArguments[i]);
    }
  };

  function initializeNode(node, owner) {
    node.ownerNode = owner;
  }

  function createChildMorph(dom, parentMorph, contextualElement) {
    var morph = _morph["default"].empty(dom, contextualElement || parentMorph.contextualElement);
    initializeNode(morph, parentMorph.ownerNode);
    return morph;
  }

  function getCachedFragment(template, env) {
    var dom = env.dom,
        fragment;
    if (env.useFragmentCache && dom.canClone) {
      if (template.cachedFragment === null) {
        fragment = template.buildFragment(dom);
        if (template.hasRendered) {
          template.cachedFragment = fragment;
        } else {
          template.hasRendered = true;
        }
      }
      if (template.cachedFragment) {
        fragment = dom.cloneNode(template.cachedFragment, true);
      }
    } else if (!fragment) {
      fragment = template.buildFragment(dom);
    }

    return fragment;
  }
});
enifed('htmlbars-util', ['exports', './htmlbars-util/safe-string', './htmlbars-util/handlebars/utils', './htmlbars-util/namespaces', './htmlbars-util/morph-utils'], function (exports, _htmlbarsUtilSafeString, _htmlbarsUtilHandlebarsUtils, _htmlbarsUtilNamespaces, _htmlbarsUtilMorphUtils) {
  exports.SafeString = _htmlbarsUtilSafeString["default"];
  exports.escapeExpression = _htmlbarsUtilHandlebarsUtils.escapeExpression;
  exports.getAttrNamespace = _htmlbarsUtilNamespaces.getAttrNamespace;
  exports.validateChildMorphs = _htmlbarsUtilMorphUtils.validateChildMorphs;
  exports.linkParams = _htmlbarsUtilMorphUtils.linkParams;
  exports.dump = _htmlbarsUtilMorphUtils.dump;
});
enifed('htmlbars-util/array-utils', ['exports'], function (exports) {
  exports.forEach = forEach;
  exports.map = map;

  function forEach(array, callback, binding) {
    var i, l;
    if (binding === undefined) {
      for (i = 0, l = array.length; i < l; i++) {
        callback(array[i], i, array);
      }
    } else {
      for (i = 0, l = array.length; i < l; i++) {
        callback.call(binding, array[i], i, array);
      }
    }
  }

  function map(array, callback) {
    var output = [];
    var i, l;

    for (i = 0, l = array.length; i < l; i++) {
      output.push(callback(array[i], i, array));
    }

    return output;
  }

  var getIdx;
  if (Array.prototype.indexOf) {
    getIdx = function (array, obj, from) {
      return array.indexOf(obj, from);
    };
  } else {
    getIdx = function (array, obj, from) {
      if (from === undefined || from === null) {
        from = 0;
      } else if (from < 0) {
        from = Math.max(0, array.length + from);
      }
      for (var i = from, l = array.length; i < l; i++) {
        if (array[i] === obj) {
          return i;
        }
      }
      return -1;
    };
  }

  var isArray = Array.isArray || function (array) {
    return Object.prototype.toString.call(array) === '[object Array]';
  };

  exports.isArray = isArray;
  var indexOfArray = getIdx;
  exports.indexOfArray = indexOfArray;
});
enifed('htmlbars-util/handlebars/safe-string', ['exports'], function (exports) {
  // Build out our basic SafeString type
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
    return '' + this.string;
  };

  exports["default"] = SafeString;
});
enifed('htmlbars-util/handlebars/utils', ['exports'], function (exports) {
  exports.extend = extend;
  exports.indexOf = indexOf;
  exports.escapeExpression = escapeExpression;
  exports.isEmpty = isEmpty;
  exports.blockParams = blockParams;
  exports.appendContextPath = appendContextPath;
  var escape = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&#x27;',
    '`': '&#x60;'
  };

  var badChars = /[&<>"'`]/g,
      possible = /[&<>"'`]/;

  function escapeChar(chr) {
    return escape[chr];
  }

  function extend(obj /* , ...source */) {
    for (var i = 1; i < arguments.length; i++) {
      for (var key in arguments[i]) {
        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
          obj[key] = arguments[i][key];
        }
      }
    }

    return obj;
  }

  var toString = Object.prototype.toString;

  exports.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  /*eslint-disable func-style, no-var */
  var isFunction = function (value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  /* istanbul ignore next */
  if (isFunction(/x/)) {
    exports.isFunction = isFunction = function (value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  var isFunction;
  exports.isFunction = isFunction;
  /*eslint-enable func-style, no-var */

  /* istanbul ignore next */
  var isArray = Array.isArray || function (value) {
    return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
  };

  exports.isArray = isArray;
  // Older IE versions do not directly support indexOf so we must implement our own, sadly.

  function indexOf(array, value) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] === value) {
        return i;
      }
    }
    return -1;
  }

  function escapeExpression(string) {
    if (typeof string !== 'string') {
      // don't escape SafeStrings, since they're already safe
      if (string && string.toHTML) {
        return string.toHTML();
      } else if (string == null) {
        return '';
      } else if (!string) {
        return string + '';
      }

      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      string = '' + string;
    }

    if (!possible.test(string)) {
      return string;
    }
    return string.replace(badChars, escapeChar);
  }

  function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  function blockParams(params, ids) {
    params.path = ids;
    return params;
  }

  function appendContextPath(contextPath, id) {
    return (contextPath ? contextPath + '.' : '') + id;
  }
});
enifed("htmlbars-util/morph-utils", ["exports"], function (exports) {
  exports.visitChildren = visitChildren;
  exports.validateChildMorphs = validateChildMorphs;
  exports.linkParams = linkParams;
  exports.dump = dump;
  /*globals console*/

  function visitChildren(nodes, callback) {
    if (!nodes || nodes.length === 0) {
      return;
    }

    nodes = nodes.slice();

    while (nodes.length) {
      var node = nodes.pop();
      callback(node);

      if (node.childNodes) {
        nodes.push.apply(nodes, node.childNodes);
      } else if (node.firstChildMorph) {
        var current = node.firstChildMorph;

        while (current) {
          nodes.push(current);
          current = current.nextMorph;
        }
      } else if (node.morphList) {
        nodes.push(node.morphList);
      }
    }
  }

  function validateChildMorphs(env, morph, visitor) {
    var morphList = morph.morphList;
    if (morph.morphList) {
      var current = morphList.firstChildMorph;

      while (current) {
        var next = current.nextMorph;
        validateChildMorphs(env, current, visitor);
        current = next;
      }
    } else if (morph.lastResult) {
      morph.lastResult.revalidateWith(env, undefined, undefined, undefined, visitor);
    } else if (morph.childNodes) {
      // This means that the childNodes were wired up manually
      for (var i = 0, l = morph.childNodes.length; i < l; i++) {
        validateChildMorphs(env, morph.childNodes[i], visitor);
      }
    }
  }

  function linkParams(env, scope, morph, path, params, hash) {
    if (morph.linkedParams) {
      return;
    }

    if (env.hooks.linkRenderNode(morph, env, scope, path, params, hash)) {
      morph.linkedParams = { params: params, hash: hash };
    }
  }

  function dump(node) {
    console.group(node, node.isDirty);

    if (node.childNodes) {
      map(node.childNodes, dump);
    } else if (node.firstChildMorph) {
      var current = node.firstChildMorph;

      while (current) {
        dump(current);
        current = current.nextMorph;
      }
    } else if (node.morphList) {
      dump(node.morphList);
    }

    console.groupEnd();
  }

  function map(nodes, cb) {
    for (var i = 0, l = nodes.length; i < l; i++) {
      cb(nodes[i]);
    }
  }
});
enifed('htmlbars-util/namespaces', ['exports'], function (exports) {
  exports.getAttrNamespace = getAttrNamespace;
  // ref http://dev.w3.org/html5/spec-LC/namespaces.html
  var defaultNamespaces = {
    html: 'http://www.w3.org/1999/xhtml',
    mathml: 'http://www.w3.org/1998/Math/MathML',
    svg: 'http://www.w3.org/2000/svg',
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace'
  };

  function getAttrNamespace(attrName) {
    var namespace;

    var colonIndex = attrName.indexOf(':');
    if (colonIndex !== -1) {
      var prefix = attrName.slice(0, colonIndex);
      namespace = defaultNamespaces[prefix];
    }

    return namespace || null;
  }
});
enifed('htmlbars-util/object-utils', ['exports'], function (exports) {
  exports.merge = merge;
  exports.createObject = createObject;
  exports.objectKeys = objectKeys;
  exports.shallowCopy = shallowCopy;
  exports.keySet = keySet;
  exports.keyLength = keyLength;

  function merge(options, defaults) {
    for (var prop in defaults) {
      if (options.hasOwnProperty(prop)) {
        continue;
      }
      options[prop] = defaults[prop];
    }
    return options;
  }

  // IE8 does not have Object.create, so use a polyfill if needed.
  // Polyfill based on Mozilla's (MDN)

  function createObject(obj) {
    if (typeof Object.create === 'function') {
      return Object.create(obj);
    } else {
      var Temp = function () {};
      Temp.prototype = obj;
      return new Temp();
    }
  }

  function objectKeys(obj) {
    if (typeof Object.keys === 'function') {
      return Object.keys(obj);
    } else {
      return legacyKeys(obj);
    }
  }

  function shallowCopy(obj) {
    return merge({}, obj);
  }

  function legacyKeys(obj) {
    var keys = [];

    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        keys.push(prop);
      }
    }

    return keys;
  }

  function keySet(obj) {
    var set = {};

    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        set[prop] = true;
      }
    }

    return set;
  }

  function keyLength(obj) {
    var count = 0;

    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        count++;
      }
    }

    return count;
  }
});
enifed("htmlbars-util/quoting", ["exports"], function (exports) {
  exports.hash = hash;
  exports.repeat = repeat;
  function escapeString(str) {
    str = str.replace(/\\/g, "\\\\");
    str = str.replace(/"/g, "\\\"");
    str = str.replace(/\n/g, "\\n");
    return str;
  }

  exports.escapeString = escapeString;

  function string(str) {
    return "\"" + escapeString(str) + "\"";
  }

  exports.string = string;

  function array(a) {
    return "[" + a + "]";
  }

  exports.array = array;

  function hash(pairs) {
    return "{" + pairs.join(", ") + "}";
  }

  function repeat(chars, times) {
    var str = "";
    while (times--) {
      str += chars;
    }
    return str;
  }
});
enifed('htmlbars-util/safe-string', ['exports', './handlebars/safe-string'], function (exports, _handlebarsSafeString) {
  exports["default"] = _handlebarsSafeString["default"];
});
enifed("htmlbars-util/template-utils", ["exports", "../htmlbars-util/morph-utils"], function (exports, _htmlbarsUtilMorphUtils) {
  exports.RenderState = RenderState;
  exports.blockFor = blockFor;
  exports.renderAndCleanup = renderAndCleanup;
  exports.clearMorph = clearMorph;
  exports.clearMorphList = clearMorphList;

  function RenderState(renderNode, morphList) {
    // The morph list that is no longer needed and can be
    // destroyed.
    this.morphListToClear = morphList;

    // The morph list that needs to be pruned of any items
    // that were not yielded on a subsequent render.
    this.morphListToPrune = null;

    // A map of morphs for each item yielded in during this
    // rendering pass. Any morphs in the DOM but not in this map
    // will be pruned during cleanup.
    this.handledMorphs = {};

    // The morph to clear once rendering is complete. By
    // default, we set this to the previous morph (to catch
    // the case where nothing is yielded; in that case, we
    // should just clear the morph). Otherwise this gets set
    // to null if anything is rendered.
    this.morphToClear = renderNode;

    this.shadowOptions = null;
  }

  function blockFor(render, template, blockOptions) {
    var block = function (env, blockArguments, self, renderNode, parentScope, visitor) {
      if (renderNode.lastResult) {
        renderNode.lastResult.revalidateWith(env, undefined, self, blockArguments, visitor);
      } else {
        var options = { renderState: new RenderState(renderNode) };

        var scope = blockOptions.scope;
        var shadowScope = scope ? env.hooks.createChildScope(scope) : env.hooks.createFreshScope();
        var attributes = blockOptions.attributes;

        env.hooks.bindShadowScope(env, parentScope, shadowScope, blockOptions.options);

        if (self !== undefined) {
          env.hooks.bindSelf(env, shadowScope, self);
        } else if (blockOptions.self !== undefined) {
          env.hooks.bindSelf(env, shadowScope, blockOptions.self);
        }

        bindBlocks(env, shadowScope, blockOptions.yieldTo);

        renderAndCleanup(renderNode, env, options, null, function () {
          options.renderState.morphToClear = null;
          render(template, env, shadowScope, { renderNode: renderNode, blockArguments: blockArguments, attributes: attributes });
        });
      }
    };

    block.arity = template.arity;

    return block;
  }

  function bindBlocks(env, shadowScope, blocks) {
    if (!blocks) {
      return;
    }
    if (typeof blocks === "function") {
      env.hooks.bindBlock(env, shadowScope, blocks);
    } else {
      for (var name in blocks) {
        if (blocks.hasOwnProperty(name)) {
          env.hooks.bindBlock(env, shadowScope, blocks[name], name);
        }
      }
    }
  }

  function renderAndCleanup(morph, env, options, shadowOptions, callback) {
    // The RenderState object is used to collect information about what the
    // helper or hook being invoked has yielded. Once it has finished either
    // yielding multiple items (via yieldItem) or a single template (via
    // yieldTemplate), we detect what was rendered and how it differs from
    // the previous render, cleaning up old state in DOM as appropriate.
    var renderState = options.renderState;
    renderState.shadowOptions = shadowOptions;

    // Invoke the callback, instructing it to save information about what it
    // renders into RenderState.
    var result = callback(options);

    // The hook can opt-out of cleanup if it handled cleanup itself.
    if (result && result.handled) {
      return;
    }

    var morphMap = morph.morphMap;

    // Walk the morph list, clearing any items that were yielded in a previous
    // render but were not yielded during this render.
    var morphList = renderState.morphListToPrune;
    if (morphList) {
      var handledMorphs = renderState.handledMorphs;
      var item = morphList.firstChildMorph;

      while (item) {
        var next = item.nextMorph;

        // If we don't see the key in handledMorphs, it wasn't
        // yielded in and we can safely remove it from DOM.
        if (!(item.key in handledMorphs)) {
          delete morphMap[item.key];
          clearMorph(item, env, true);
          item.destroy();
        }

        item = next;
      }
    }

    morphList = renderState.morphListToClear;
    if (morphList) {
      clearMorphList(morphList, morph, env);
    }

    var toClear = renderState.morphToClear;
    if (toClear) {
      clearMorph(toClear, env);
    }
  }

  function clearMorph(morph, env, destroySelf) {
    var cleanup = env.hooks.cleanupRenderNode;
    var destroy = env.hooks.destroyRenderNode;
    var willCleanup = env.hooks.willCleanupTree;
    var didCleanup = env.hooks.didCleanupTree;

    function destroyNode(node) {
      if (cleanup) {
        cleanup(node);
      }
      if (destroy) {
        destroy(node);
      }
    }

    if (willCleanup) {
      willCleanup(env, morph, destroySelf);
    }
    if (cleanup) {
      cleanup(morph);
    }
    if (destroySelf && destroy) {
      destroy(morph);
    }

    (0, _htmlbarsUtilMorphUtils.visitChildren)(morph.childNodes, destroyNode);

    // TODO: Deal with logical children that are not in the DOM tree
    morph.clear();
    if (didCleanup) {
      didCleanup(env, morph, destroySelf);
    }

    morph.lastResult = null;
    morph.lastYielded = null;
    morph.childNodes = null;
  }

  function clearMorphList(morphList, morph, env) {
    var item = morphList.firstChildMorph;

    while (item) {
      var next = item.nextMorph;
      delete morph.morphMap[item.key];
      clearMorph(item, env, true);
      item.destroy();

      item = next;
    }

    // Remove the MorphList from the morph.
    morphList.clear();
    morph.morphList = null;
  }
});
enifed("htmlbars-util/void-tag-names", ["exports", "./array-utils"], function (exports, _arrayUtils) {

  // The HTML elements in this list are speced by
  // http://www.w3.org/TR/html-markup/syntax.html#syntax-elements,
  // and will be forced to close regardless of if they have a
  // self-closing /> at the end.
  var voidTagNames = "area base br col command embed hr img input keygen link meta param source track wbr";
  var voidMap = {};

  (0, _arrayUtils.forEach)(voidTagNames.split(" "), function (tagName) {
    voidMap[tagName] = true;
  });

  exports["default"] = voidMap;
});
enifed("morph-attr", ["exports", "./morph-attr/sanitize-attribute-value", "./dom-helper/prop", "./dom-helper/build-html-dom", "./htmlbars-util"], function (exports, _morphAttrSanitizeAttributeValue, _domHelperProp, _domHelperBuildHtmlDom, _htmlbarsUtil) {

  function getProperty() {
    return this.domHelper.getPropertyStrict(this.element, this.attrName);
  }

  function updateProperty(value) {
    if (this._renderedInitially === true || !(0, _domHelperProp.isAttrRemovalValue)(value)) {
      // do not render if initial value is undefined or null
      this.domHelper.setPropertyStrict(this.element, this.attrName, value);
    }

    this._renderedInitially = true;
  }

  function getAttribute() {
    return this.domHelper.getAttribute(this.element, this.attrName);
  }

  function updateAttribute(value) {
    if ((0, _domHelperProp.isAttrRemovalValue)(value)) {
      this.domHelper.removeAttribute(this.element, this.attrName);
    } else {
      this.domHelper.setAttribute(this.element, this.attrName, value);
    }
  }

  function getAttributeNS() {
    return this.domHelper.getAttributeNS(this.element, this.namespace, this.attrName);
  }

  function updateAttributeNS(value) {
    if ((0, _domHelperProp.isAttrRemovalValue)(value)) {
      this.domHelper.removeAttribute(this.element, this.attrName);
    } else {
      this.domHelper.setAttributeNS(this.element, this.namespace, this.attrName, value);
    }
  }

  var UNSET = { unset: true };

  var guid = 1;

  function AttrMorph(element, attrName, domHelper, namespace) {
    this.element = element;
    this.domHelper = domHelper;
    this.namespace = namespace !== undefined ? namespace : (0, _htmlbarsUtil.getAttrNamespace)(attrName);
    this.state = {};
    this.isDirty = false;
    this.isSubtreeDirty = false;
    this.escaped = true;
    this.lastValue = UNSET;
    this.lastResult = null;
    this.lastYielded = null;
    this.childNodes = null;
    this.linkedParams = null;
    this.linkedResult = null;
    this.guid = "attr" + guid++;
    this.ownerNode = null;
    this.rendered = false;
    this._renderedInitially = false;

    var normalizedAttrName = (0, _domHelperProp.normalizeProperty)(this.element, attrName);
    if (this.namespace) {
      this._update = updateAttributeNS;
      this._get = getAttributeNS;
      this.attrName = attrName;
    } else {
      if (element.namespaceURI === _domHelperBuildHtmlDom.svgNamespace || attrName === "style" || !normalizedAttrName) {
        this._update = updateAttribute;
        this._get = getAttribute;
        this.attrName = attrName;
      } else {
        this._update = updateProperty;
        this._get = getProperty;
        this.attrName = normalizedAttrName;
      }
    }
  }

  AttrMorph.prototype.setContent = function (value) {
    if (this.lastValue === value) {
      return;
    }
    this.lastValue = value;

    if (this.escaped) {
      var sanitized = (0, _morphAttrSanitizeAttributeValue.sanitizeAttributeValue)(this.domHelper, this.element, this.attrName, value);
      this._update(sanitized, this.namespace);
    } else {
      this._update(value, this.namespace);
    }
  };

  AttrMorph.prototype.getContent = function () {
    var value = this.lastValue = this._get();
    return value;
  };

  // renderAndCleanup calls `clear` on all items in the morph map
  // just before calling `destroy` on the morph.
  //
  // As a future refactor this could be changed to set the property
  // back to its original/default value.
  AttrMorph.prototype.clear = function () {};

  AttrMorph.prototype.destroy = function () {
    this.element = null;
    this.domHelper = null;
  };

  exports["default"] = AttrMorph;
  exports.sanitizeAttributeValue = _morphAttrSanitizeAttributeValue.sanitizeAttributeValue;
});
enifed('morph-attr/sanitize-attribute-value', ['exports'], function (exports) {
  exports.sanitizeAttributeValue = sanitizeAttributeValue;
  /* jshint scripturl:true */

  var badProtocols = {
    'javascript:': true,
    'vbscript:': true
  };

  var badTags = {
    'A': true,
    'BODY': true,
    'LINK': true,
    'IMG': true,
    'IFRAME': true,
    'BASE': true
  };

  var badTagsForDataURI = {
    'EMBED': true
  };

  var badAttributes = {
    'href': true,
    'src': true,
    'background': true
  };

  exports.badAttributes = badAttributes;
  var badAttributesForDataURI = {
    'src': true
  };

  function sanitizeAttributeValue(dom, element, attribute, value) {
    var tagName;

    if (!element) {
      tagName = null;
    } else {
      tagName = element.tagName.toUpperCase();
    }

    if (value && value.toHTML) {
      return value.toHTML();
    }

    if ((tagName === null || badTags[tagName]) && badAttributes[attribute]) {
      var protocol = dom.protocolForURL(value);
      if (badProtocols[protocol] === true) {
        return 'unsafe:' + value;
      }
    }

    if (badTagsForDataURI[tagName] && badAttributesForDataURI[attribute]) {
      return 'unsafe:' + value;
    }

    return value;
  }
});
enifed('morph-range', ['exports', './morph-range/utils'], function (exports, _morphRangeUtils) {

  // constructor just initializes the fields
  // use one of the static initializers to create a valid morph.
  function Morph(domHelper, contextualElement) {
    this.domHelper = domHelper;
    // context if content if current content is detached
    this.contextualElement = contextualElement;
    // inclusive range of morph
    // these should be nodeType 1, 3, or 8
    this.firstNode = null;
    this.lastNode = null;

    // flag to force text to setContent to be treated as html
    this.parseTextAsHTML = false;

    // morph list graph
    this.parentMorphList = null;
    this.previousMorph = null;
    this.nextMorph = null;
  }

  Morph.empty = function (domHelper, contextualElement) {
    var morph = new Morph(domHelper, contextualElement);
    morph.clear();
    return morph;
  };

  Morph.create = function (domHelper, contextualElement, node) {
    var morph = new Morph(domHelper, contextualElement);
    morph.setNode(node);
    return morph;
  };

  Morph.attach = function (domHelper, contextualElement, firstNode, lastNode) {
    var morph = new Morph(domHelper, contextualElement);
    morph.setRange(firstNode, lastNode);
    return morph;
  };

  Morph.prototype.setContent = function Morph$setContent(content) {
    if (content === null || content === undefined) {
      return this.clear();
    }

    var type = typeof content;
    switch (type) {
      case 'string':
        if (this.parseTextAsHTML) {
          return this.setHTML(content);
        }
        return this.setText(content);
      case 'object':
        if (typeof content.nodeType === 'number') {
          return this.setNode(content);
        }
        /* Handlebars.SafeString */
        if (typeof content.string === 'string') {
          return this.setHTML(content.string);
        }
        if (this.parseTextAsHTML) {
          return this.setHTML(content.toString());
        }
      /* falls through */
      case 'boolean':
      case 'number':
        return this.setText(content.toString());
      default:
        throw new TypeError('unsupported content');
    }
  };

  Morph.prototype.clear = function Morph$clear() {
    var node = this.setNode(this.domHelper.createComment(''));
    return node;
  };

  Morph.prototype.setText = function Morph$setText(text) {
    var firstNode = this.firstNode;
    var lastNode = this.lastNode;

    if (firstNode && lastNode === firstNode && firstNode.nodeType === 3) {
      firstNode.nodeValue = text;
      return firstNode;
    }

    return this.setNode(text ? this.domHelper.createTextNode(text) : this.domHelper.createComment(''));
  };

  Morph.prototype.setNode = function Morph$setNode(newNode) {
    var firstNode, lastNode;
    switch (newNode.nodeType) {
      case 3:
        firstNode = newNode;
        lastNode = newNode;
        break;
      case 11:
        firstNode = newNode.firstChild;
        lastNode = newNode.lastChild;
        if (firstNode === null) {
          firstNode = this.domHelper.createComment('');
          newNode.appendChild(firstNode);
          lastNode = firstNode;
        }
        break;
      default:
        firstNode = newNode;
        lastNode = newNode;
        break;
    }

    this.setRange(firstNode, lastNode);

    return newNode;
  };

  Morph.prototype.setRange = function (firstNode, lastNode) {
    var previousFirstNode = this.firstNode;
    if (previousFirstNode !== null) {

      var parentNode = previousFirstNode.parentNode;
      if (parentNode !== null) {
        (0, _morphRangeUtils.insertBefore)(parentNode, firstNode, lastNode, previousFirstNode);
        (0, _morphRangeUtils.clear)(parentNode, previousFirstNode, this.lastNode);
      }
    }

    this.firstNode = firstNode;
    this.lastNode = lastNode;

    if (this.parentMorphList) {
      this._syncFirstNode();
      this._syncLastNode();
    }
  };

  Morph.prototype.destroy = function Morph$destroy() {
    this.unlink();

    var firstNode = this.firstNode;
    var lastNode = this.lastNode;
    var parentNode = firstNode && firstNode.parentNode;

    this.firstNode = null;
    this.lastNode = null;

    (0, _morphRangeUtils.clear)(parentNode, firstNode, lastNode);
  };

  Morph.prototype.unlink = function Morph$unlink() {
    var parentMorphList = this.parentMorphList;
    var previousMorph = this.previousMorph;
    var nextMorph = this.nextMorph;

    if (previousMorph) {
      if (nextMorph) {
        previousMorph.nextMorph = nextMorph;
        nextMorph.previousMorph = previousMorph;
      } else {
        previousMorph.nextMorph = null;
        parentMorphList.lastChildMorph = previousMorph;
      }
    } else {
      if (nextMorph) {
        nextMorph.previousMorph = null;
        parentMorphList.firstChildMorph = nextMorph;
      } else if (parentMorphList) {
        parentMorphList.lastChildMorph = parentMorphList.firstChildMorph = null;
      }
    }

    this.parentMorphList = null;
    this.nextMorph = null;
    this.previousMorph = null;

    if (parentMorphList && parentMorphList.mountedMorph) {
      if (!parentMorphList.firstChildMorph) {
        // list is empty
        parentMorphList.mountedMorph.clear();
        return;
      } else {
        parentMorphList.firstChildMorph._syncFirstNode();
        parentMorphList.lastChildMorph._syncLastNode();
      }
    }
  };

  Morph.prototype.setHTML = function (text) {
    var fragment = this.domHelper.parseHTML(text, this.contextualElement);
    return this.setNode(fragment);
  };

  Morph.prototype.setMorphList = function Morph$appendMorphList(morphList) {
    morphList.mountedMorph = this;
    this.clear();

    var originalFirstNode = this.firstNode;

    if (morphList.firstChildMorph) {
      this.firstNode = morphList.firstChildMorph.firstNode;
      this.lastNode = morphList.lastChildMorph.lastNode;

      var current = morphList.firstChildMorph;

      while (current) {
        var next = current.nextMorph;
        current.insertBeforeNode(originalFirstNode, null);
        current = next;
      }
      originalFirstNode.parentNode.removeChild(originalFirstNode);
    }
  };

  Morph.prototype._syncFirstNode = function Morph$syncFirstNode() {
    var morph = this;
    var parentMorphList;
    while (parentMorphList = morph.parentMorphList) {
      if (parentMorphList.mountedMorph === null) {
        break;
      }
      if (morph !== parentMorphList.firstChildMorph) {
        break;
      }
      if (morph.firstNode === parentMorphList.mountedMorph.firstNode) {
        break;
      }

      parentMorphList.mountedMorph.firstNode = morph.firstNode;

      morph = parentMorphList.mountedMorph;
    }
  };

  Morph.prototype._syncLastNode = function Morph$syncLastNode() {
    var morph = this;
    var parentMorphList;
    while (parentMorphList = morph.parentMorphList) {
      if (parentMorphList.mountedMorph === null) {
        break;
      }
      if (morph !== parentMorphList.lastChildMorph) {
        break;
      }
      if (morph.lastNode === parentMorphList.mountedMorph.lastNode) {
        break;
      }

      parentMorphList.mountedMorph.lastNode = morph.lastNode;

      morph = parentMorphList.mountedMorph;
    }
  };

  Morph.prototype.insertBeforeNode = function Morph$insertBeforeNode(parent, reference) {
    var current = this.firstNode;

    while (current) {
      var next = current.nextSibling;
      parent.insertBefore(current, reference);
      current = next;
    }
  };

  Morph.prototype.appendToNode = function Morph$appendToNode(parent) {
    this.insertBeforeNode(parent, null);
  };

  exports["default"] = Morph;
});
enifed('morph-range/morph-list', ['exports', './utils'], function (exports, _utils) {

  function MorphList() {
    // morph graph
    this.firstChildMorph = null;
    this.lastChildMorph = null;

    this.mountedMorph = null;
  }

  var prototype = MorphList.prototype;

  prototype.clear = function MorphList$clear() {
    var current = this.firstChildMorph;

    while (current) {
      var next = current.nextMorph;
      current.previousMorph = null;
      current.nextMorph = null;
      current.parentMorphList = null;
      current = next;
    }

    this.firstChildMorph = this.lastChildMorph = null;
  };

  prototype.destroy = function MorphList$destroy() {};

  prototype.appendMorph = function MorphList$appendMorph(morph) {
    this.insertBeforeMorph(morph, null);
  };

  prototype.insertBeforeMorph = function MorphList$insertBeforeMorph(morph, referenceMorph) {
    if (morph.parentMorphList !== null) {
      morph.unlink();
    }
    if (referenceMorph && referenceMorph.parentMorphList !== this) {
      throw new Error('The morph before which the new morph is to be inserted is not a child of this morph.');
    }

    var mountedMorph = this.mountedMorph;

    if (mountedMorph) {

      var parentNode = mountedMorph.firstNode.parentNode;
      var referenceNode = referenceMorph ? referenceMorph.firstNode : mountedMorph.lastNode.nextSibling;

      (0, _utils.insertBefore)(parentNode, morph.firstNode, morph.lastNode, referenceNode);

      // was not in list mode replace current content
      if (!this.firstChildMorph) {
        (0, _utils.clear)(this.mountedMorph.firstNode.parentNode, this.mountedMorph.firstNode, this.mountedMorph.lastNode);
      }
    }

    morph.parentMorphList = this;

    var previousMorph = referenceMorph ? referenceMorph.previousMorph : this.lastChildMorph;
    if (previousMorph) {
      previousMorph.nextMorph = morph;
      morph.previousMorph = previousMorph;
    } else {
      this.firstChildMorph = morph;
    }

    if (referenceMorph) {
      referenceMorph.previousMorph = morph;
      morph.nextMorph = referenceMorph;
    } else {
      this.lastChildMorph = morph;
    }

    this.firstChildMorph._syncFirstNode();
    this.lastChildMorph._syncLastNode();
  };

  prototype.removeChildMorph = function MorphList$removeChildMorph(morph) {
    if (morph.parentMorphList !== this) {
      throw new Error('Cannot remove a morph from a parent it is not inside of');
    }

    morph.destroy();
  };

  exports["default"] = MorphList;
});
enifed('morph-range/morph-list.umd', ['exports', './morph-list'], function (exports, _morphList) {

  (function (root, factory) {
    if (typeof enifed === 'function' && enifed.amd) {
      enifed([], factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      root.MorphList = factory();
    }
  })(this, function () {
    return _morphList["default"];
  });
});
enifed("morph-range/utils", ["exports"], function (exports) {
  exports.clear = clear;
  exports.insertBefore = insertBefore;
  // inclusive of both nodes

  function clear(parentNode, firstNode, lastNode) {
    if (!parentNode) {
      return;
    }

    var node = firstNode;
    var nextNode;
    do {
      nextNode = node.nextSibling;
      parentNode.removeChild(node);
      if (node === lastNode) {
        break;
      }
      node = nextNode;
    } while (node);
  }

  function insertBefore(parentNode, firstNode, lastNode, _refNode) {
    var node = lastNode;
    var refNode = _refNode;
    var prevNode;
    do {
      prevNode = node.previousSibling;
      parentNode.insertBefore(node, refNode);
      if (node === firstNode) {
        break;
      }
      refNode = node;
      node = prevNode;
    } while (node);
  }
});
enifed('route-recognizer', ['exports', './route-recognizer/dsl'], function (exports, _routeRecognizerDsl) {

  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];

  var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');

  function isArray(test) {
    return Object.prototype.toString.call(test) === '[object Array]';
  }

  // A Segment represents a segment in the original route description.
  // Each Segment type provides an `eachChar` and `regex` method.
  //
  // The `eachChar` method invokes the callback with one or more character
  // specifications. A character specification consumes one or more input
  // characters.
  //
  // The `regex` method returns a regex fragment for the segment. If the
  // segment is a dynamic of star segment, the regex fragment also includes
  // a capture.
  //
  // A character specification contains:
  //
  // * `validChars`: a String with a list of all valid characters, or
  // * `invalidChars`: a String with a list of all invalid characters
  // * `repeat`: true if the character specification can repeat

  function StaticSegment(string) {
    this.string = string;
  }
  StaticSegment.prototype = {
    eachChar: function (callback) {
      var string = this.string,
          ch;

      for (var i = 0, l = string.length; i < l; i++) {
        ch = string.charAt(i);
        callback({ validChars: ch });
      }
    },

    regex: function () {
      return this.string.replace(escapeRegex, '\\$1');
    },

    generate: function () {
      return this.string;
    }
  };

  function DynamicSegment(name) {
    this.name = name;
  }
  DynamicSegment.prototype = {
    eachChar: function (callback) {
      callback({ invalidChars: '/', repeat: true });
    },

    regex: function () {
      return '([^/]+)';
    },

    generate: function (params) {
      return params[this.name];
    }
  };

  function StarSegment(name) {
    this.name = name;
  }
  StarSegment.prototype = {
    eachChar: function (callback) {
      callback({ invalidChars: '', repeat: true });
    },

    regex: function () {
      return '(.+)';
    },

    generate: function (params) {
      return params[this.name];
    }
  };

  function EpsilonSegment() {}
  EpsilonSegment.prototype = {
    eachChar: function () {},
    regex: function () {
      return '';
    },
    generate: function () {
      return '';
    }
  };

  function parse(route, names, types) {
    // normalize route as not starting with a "/". Recognition will
    // also normalize.
    if (route.charAt(0) === '/') {
      route = route.substr(1);
    }

    var segments = route.split('/'),
        results = [];

    for (var i = 0, l = segments.length; i < l; i++) {
      var segment = segments[i],
          match;

      if (match = segment.match(/^:([^\/]+)$/)) {
        results.push(new DynamicSegment(match[1]));
        names.push(match[1]);
        types.dynamics++;
      } else if (match = segment.match(/^\*([^\/]+)$/)) {
        results.push(new StarSegment(match[1]));
        names.push(match[1]);
        types.stars++;
      } else if (segment === '') {
        results.push(new EpsilonSegment());
      } else {
        results.push(new StaticSegment(segment));
        types.statics++;
      }
    }

    return results;
  }

  // A State has a character specification and (`charSpec`) and a list of possible
  // subsequent states (`nextStates`).
  //
  // If a State is an accepting state, it will also have several additional
  // properties:
  //
  // * `regex`: A regular expression that is used to extract parameters from paths
  //   that reached this accepting state.
  // * `handlers`: Information on how to convert the list of captures into calls
  //   to registered handlers with the specified parameters
  // * `types`: How many static, dynamic or star segments in this route. Used to
  //   decide which route to use if multiple registered routes match a path.
  //
  // Currently, State is implemented naively by looping over `nextStates` and
  // comparing a character specification against a character. A more efficient
  // implementation would use a hash of keys pointing at one or more next states.

  function State(charSpec) {
    this.charSpec = charSpec;
    this.nextStates = [];
  }

  State.prototype = {
    get: function (charSpec) {
      var nextStates = this.nextStates;

      for (var i = 0, l = nextStates.length; i < l; i++) {
        var child = nextStates[i];

        var isEqual = child.charSpec.validChars === charSpec.validChars;
        isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;

        if (isEqual) {
          return child;
        }
      }
    },

    put: function (charSpec) {
      var state;

      // If the character specification already exists in a child of the current
      // state, just return that state.
      if (state = this.get(charSpec)) {
        return state;
      }

      // Make a new state for the character spec
      state = new State(charSpec);

      // Insert the new state as a child of the current state
      this.nextStates.push(state);

      // If this character specification repeats, insert the new state as a child
      // of itself. Note that this will not trigger an infinite loop because each
      // transition during recognition consumes a character.
      if (charSpec.repeat) {
        state.nextStates.push(state);
      }

      // Return the new state
      return state;
    },

    // Find a list of child states matching the next character
    match: function (ch) {
      // DEBUG "Processing `" + ch + "`:"
      var nextStates = this.nextStates,
          child,
          charSpec,
          chars;

      // DEBUG "  " + debugState(this)
      var returned = [];

      for (var i = 0, l = nextStates.length; i < l; i++) {
        child = nextStates[i];

        charSpec = child.charSpec;

        if (typeof (chars = charSpec.validChars) !== 'undefined') {
          if (chars.indexOf(ch) !== -1) {
            returned.push(child);
          }
        } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {
          if (chars.indexOf(ch) === -1) {
            returned.push(child);
          }
        }
      }

      return returned;
    }

    /** IF DEBUG
    , debug: function() {
      var charSpec = this.charSpec,
          debug = "[",
          chars = charSpec.validChars || charSpec.invalidChars;
       if (charSpec.invalidChars) { debug += "^"; }
      debug += chars;
      debug += "]";
       if (charSpec.repeat) { debug += "+"; }
       return debug;
    }
    END IF **/
  };

  /** IF DEBUG
  function debug(log) {
    console.log(log);
  }
  
  function debugState(state) {
    return state.nextStates.map(function(n) {
      if (n.nextStates.length === 0) { return "( " + n.debug() + " [accepting] )"; }
      return "( " + n.debug() + " <then> " + n.nextStates.map(function(s) { return s.debug() }).join(" or ") + " )";
    }).join(", ")
  }
  END IF **/

  // This is a somewhat naive strategy, but should work in a lot of cases
  // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.
  //
  // This strategy generally prefers more static and less dynamic matching.
  // Specifically, it
  //
  //  * prefers fewer stars to more, then
  //  * prefers using stars for less of the match to more, then
  //  * prefers fewer dynamic segments to more, then
  //  * prefers more static segments to more
  function sortSolutions(states) {
    return states.sort(function (a, b) {
      if (a.types.stars !== b.types.stars) {
        return a.types.stars - b.types.stars;
      }

      if (a.types.stars) {
        if (a.types.statics !== b.types.statics) {
          return b.types.statics - a.types.statics;
        }
        if (a.types.dynamics !== b.types.dynamics) {
          return b.types.dynamics - a.types.dynamics;
        }
      }

      if (a.types.dynamics !== b.types.dynamics) {
        return a.types.dynamics - b.types.dynamics;
      }
      if (a.types.statics !== b.types.statics) {
        return b.types.statics - a.types.statics;
      }

      return 0;
    });
  }

  function recognizeChar(states, ch) {
    var nextStates = [];

    for (var i = 0, l = states.length; i < l; i++) {
      var state = states[i];

      nextStates = nextStates.concat(state.match(ch));
    }

    return nextStates;
  }

  var oCreate = Object.create || function (proto) {
    function F() {}
    F.prototype = proto;
    return new F();
  };

  function RecognizeResults(queryParams) {
    this.queryParams = queryParams || {};
  }
  RecognizeResults.prototype = oCreate({
    splice: Array.prototype.splice,
    slice: Array.prototype.slice,
    push: Array.prototype.push,
    length: 0,
    queryParams: null
  });

  function findHandler(state, path, queryParams) {
    var handlers = state.handlers,
        regex = state.regex;
    var captures = path.match(regex),
        currentCapture = 1;
    var result = new RecognizeResults(queryParams);

    for (var i = 0, l = handlers.length; i < l; i++) {
      var handler = handlers[i],
          names = handler.names,
          params = {};

      for (var j = 0, m = names.length; j < m; j++) {
        params[names[j]] = captures[currentCapture++];
      }

      result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });
    }

    return result;
  }

  function addSegment(currentState, segment) {
    segment.eachChar(function (ch) {
      var state;

      currentState = currentState.put(ch);
    });

    return currentState;
  }

  function decodeQueryParamPart(part) {
    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
    part = part.replace(/\+/gm, '%20');
    return decodeURIComponent(part);
  }

  // The main interface

  var RouteRecognizer = function () {
    this.rootState = new State();
    this.names = {};
  };

  RouteRecognizer.prototype = {
    add: function (routes, options) {
      var currentState = this.rootState,
          regex = '^',
          types = { statics: 0, dynamics: 0, stars: 0 },
          handlers = [],
          allSegments = [],
          name;

      var isEmpty = true;

      for (var i = 0, l = routes.length; i < l; i++) {
        var route = routes[i],
            names = [];

        var segments = parse(route.path, names, types);

        allSegments = allSegments.concat(segments);

        for (var j = 0, m = segments.length; j < m; j++) {
          var segment = segments[j];

          if (segment instanceof EpsilonSegment) {
            continue;
          }

          isEmpty = false;

          // Add a "/" for the new segment
          currentState = currentState.put({ validChars: '/' });
          regex += '/';

          // Add a representation of the segment to the NFA and regex
          currentState = addSegment(currentState, segment);
          regex += segment.regex();
        }

        var handler = { handler: route.handler, names: names };
        handlers.push(handler);
      }

      if (isEmpty) {
        currentState = currentState.put({ validChars: '/' });
        regex += '/';
      }

      currentState.handlers = handlers;
      currentState.regex = new RegExp(regex + '$');
      currentState.types = types;

      if (name = options && options.as) {
        this.names[name] = {
          segments: allSegments,
          handlers: handlers
        };
      }
    },

    handlersFor: function (name) {
      var route = this.names[name],
          result = [];
      if (!route) {
        throw new Error('There is no route named ' + name);
      }

      for (var i = 0, l = route.handlers.length; i < l; i++) {
        result.push(route.handlers[i]);
      }

      return result;
    },

    hasRoute: function (name) {
      return !!this.names[name];
    },

    generate: function (name, params) {
      var route = this.names[name],
          output = '';
      if (!route) {
        throw new Error('There is no route named ' + name);
      }

      var segments = route.segments;

      for (var i = 0, l = segments.length; i < l; i++) {
        var segment = segments[i];

        if (segment instanceof EpsilonSegment) {
          continue;
        }

        output += '/';
        output += segment.generate(params);
      }

      if (output.charAt(0) !== '/') {
        output = '/' + output;
      }

      if (params && params.queryParams) {
        output += this.generateQueryString(params.queryParams, route.handlers);
      }

      return output;
    },

    generateQueryString: function (params, handlers) {
      var pairs = [];
      var keys = [];
      for (var key in params) {
        if (params.hasOwnProperty(key)) {
          keys.push(key);
        }
      }
      keys.sort();
      for (var i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        var value = params[key];
        if (value == null) {
          continue;
        }
        var pair = encodeURIComponent(key);
        if (isArray(value)) {
          for (var j = 0, l = value.length; j < l; j++) {
            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);
            pairs.push(arrayPair);
          }
        } else {
          pair += '=' + encodeURIComponent(value);
          pairs.push(pair);
        }
      }

      if (pairs.length === 0) {
        return '';
      }

      return '?' + pairs.join('&');
    },

    parseQueryString: function (queryString) {
      var pairs = queryString.split('&'),
          queryParams = {};
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i].split('='),
            key = decodeQueryParamPart(pair[0]),
            keyLength = key.length,
            isArray = false,
            value;
        if (pair.length === 1) {
          value = 'true';
        } else {
          //Handle arrays
          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {
            isArray = true;
            key = key.slice(0, keyLength - 2);
            if (!queryParams[key]) {
              queryParams[key] = [];
            }
          }
          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';
        }
        if (isArray) {
          queryParams[key].push(value);
        } else {
          queryParams[key] = value;
        }
      }
      return queryParams;
    },

    recognize: function (path) {
      var states = [this.rootState],
          pathLen,
          i,
          l,
          queryStart,
          queryParams = {},
          isSlashDropped = false;

      queryStart = path.indexOf('?');
      if (queryStart !== -1) {
        var queryString = path.substr(queryStart + 1, path.length);
        path = path.substr(0, queryStart);
        queryParams = this.parseQueryString(queryString);
      }

      path = decodeURI(path);

      // DEBUG GROUP path

      if (path.charAt(0) !== '/') {
        path = '/' + path;
      }

      pathLen = path.length;
      if (pathLen > 1 && path.charAt(pathLen - 1) === '/') {
        path = path.substr(0, pathLen - 1);
        isSlashDropped = true;
      }

      for (i = 0, l = path.length; i < l; i++) {
        states = recognizeChar(states, path.charAt(i));
        if (!states.length) {
          break;
        }
      }

      // END DEBUG GROUP

      var solutions = [];
      for (i = 0, l = states.length; i < l; i++) {
        if (states[i].handlers) {
          solutions.push(states[i]);
        }
      }

      states = sortSolutions(solutions);

      var state = solutions[0];

      if (state && state.handlers) {
        // if a trailing slash was dropped and a star segment is the last segment
        // specified, put the trailing slash back
        if (isSlashDropped && state.regex.source.slice(-5) === '(.+)$') {
          path = path + '/';
        }
        return findHandler(state, path, queryParams);
      }
    }
  };

  RouteRecognizer.prototype.map = _routeRecognizerDsl["default"];

  RouteRecognizer.VERSION = '0.1.5';

  exports["default"] = RouteRecognizer;
});
enifed("route-recognizer/dsl", ["exports"], function (exports) {
  function Target(path, matcher, delegate) {
    this.path = path;
    this.matcher = matcher;
    this.delegate = delegate;
  }

  Target.prototype = {
    to: function (target, callback) {
      var delegate = this.delegate;

      if (delegate && delegate.willAddRoute) {
        target = delegate.willAddRoute(this.matcher.target, target);
      }

      this.matcher.add(this.path, target);

      if (callback) {
        if (callback.length === 0) {
          throw new Error("You must have an argument in the function passed to `to`");
        }
        this.matcher.addChild(this.path, target, callback, this.delegate);
      }
      return this;
    }
  };

  function Matcher(target) {
    this.routes = {};
    this.children = {};
    this.target = target;
  }

  Matcher.prototype = {
    add: function (path, handler) {
      this.routes[path] = handler;
    },

    addChild: function (path, target, callback, delegate) {
      var matcher = new Matcher(target);
      this.children[path] = matcher;

      var match = generateMatch(path, matcher, delegate);

      if (delegate && delegate.contextEntered) {
        delegate.contextEntered(target, match);
      }

      callback(match);
    }
  };

  function generateMatch(startingPath, matcher, delegate) {
    return function (path, nestedCallback) {
      var fullPath = startingPath + path;

      if (nestedCallback) {
        nestedCallback(generateMatch(fullPath, matcher, delegate));
      } else {
        return new Target(startingPath + path, matcher, delegate);
      }
    };
  }

  function addRoute(routeArray, path, handler) {
    var len = 0;
    for (var i = 0, l = routeArray.length; i < l; i++) {
      len += routeArray[i].path.length;
    }

    path = path.substr(len);
    var route = { path: path, handler: handler };
    routeArray.push(route);
  }

  function eachRoute(baseRoute, matcher, callback, binding) {
    var routes = matcher.routes;

    for (var path in routes) {
      if (routes.hasOwnProperty(path)) {
        var routeArray = baseRoute.slice();
        addRoute(routeArray, path, routes[path]);

        if (matcher.children[path]) {
          eachRoute(routeArray, matcher.children[path], callback, binding);
        } else {
          callback.call(binding, routeArray);
        }
      }
    }
  }

  exports["default"] = function (callback, addRouteCallback) {
    var matcher = new Matcher();

    callback(generateMatch("", matcher, this.delegate));

    eachRoute([], matcher, function (route) {
      if (addRouteCallback) {
        addRouteCallback(this, route);
      } else {
        this.add(route);
      }
    }, this);
  };
});
enifed('router', ['exports', './router/router'], function (exports, _routerRouter) {
  exports["default"] = _routerRouter["default"];
});
enifed('router/handler-info', ['exports', './utils', 'rsvp/promise'], function (exports, _utils, _rsvpPromise) {

  function HandlerInfo(_props) {
    var props = _props || {};
    (0, _utils.merge)(this, props);
    this.initialize(props);
  }

  HandlerInfo.prototype = {
    name: null,
    handler: null,
    params: null,
    context: null,

    // Injected by the handler info factory.
    factory: null,

    initialize: function () {},

    log: function (payload, message) {
      if (payload.log) {
        payload.log(this.name + ': ' + message);
      }
    },

    promiseLabel: function (label) {
      return (0, _utils.promiseLabel)('\'' + this.name + '\' ' + label);
    },

    getUnresolved: function () {
      return this;
    },

    serialize: function () {
      return this.params || {};
    },

    resolve: function (shouldContinue, payload) {
      var checkForAbort = (0, _utils.bind)(this, this.checkForAbort, shouldContinue),
          beforeModel = (0, _utils.bind)(this, this.runBeforeModelHook, payload),
          model = (0, _utils.bind)(this, this.getModel, payload),
          afterModel = (0, _utils.bind)(this, this.runAfterModelHook, payload),
          becomeResolved = (0, _utils.bind)(this, this.becomeResolved, payload);

      return _rsvpPromise["default"].resolve(undefined, this.promiseLabel('Start handler')).then(checkForAbort, null, this.promiseLabel('Check for abort')).then(beforeModel, null, this.promiseLabel('Before model')).then(checkForAbort, null, this.promiseLabel('Check if aborted during \'beforeModel\' hook')).then(model, null, this.promiseLabel('Model')).then(checkForAbort, null, this.promiseLabel('Check if aborted in \'model\' hook')).then(afterModel, null, this.promiseLabel('After model')).then(checkForAbort, null, this.promiseLabel('Check if aborted in \'afterModel\' hook')).then(becomeResolved, null, this.promiseLabel('Become resolved'));
    },

    runBeforeModelHook: function (payload) {
      if (payload.trigger) {
        payload.trigger(true, 'willResolveModel', payload, this.handler);
      }
      return this.runSharedModelHook(payload, 'beforeModel', []);
    },

    runAfterModelHook: function (payload, resolvedModel) {
      // Stash the resolved model on the payload.
      // This makes it possible for users to swap out
      // the resolved model in afterModel.
      var name = this.name;
      this.stashResolvedModel(payload, resolvedModel);

      return this.runSharedModelHook(payload, 'afterModel', [resolvedModel]).then(function () {
        // Ignore the fulfilled value returned from afterModel.
        // Return the value stashed in resolvedModels, which
        // might have been swapped out in afterModel.
        return payload.resolvedModels[name];
      }, null, this.promiseLabel('Ignore fulfillment value and return model value'));
    },

    runSharedModelHook: function (payload, hookName, args) {
      this.log(payload, 'calling ' + hookName + ' hook');

      if (this.queryParams) {
        args.push(this.queryParams);
      }
      args.push(payload);

      var result = (0, _utils.applyHook)(this.handler, hookName, args);

      if (result && result.isTransition) {
        result = null;
      }

      return _rsvpPromise["default"].resolve(result, this.promiseLabel('Resolve value returned from one of the model hooks'));
    },

    // overridden by subclasses
    getModel: null,

    checkForAbort: function (shouldContinue, promiseValue) {
      return _rsvpPromise["default"].resolve(shouldContinue(), this.promiseLabel('Check for abort')).then(function () {
        // We don't care about shouldContinue's resolve value;
        // pass along the original value passed to this fn.
        return promiseValue;
      }, null, this.promiseLabel('Ignore fulfillment value and continue'));
    },

    stashResolvedModel: function (payload, resolvedModel) {
      payload.resolvedModels = payload.resolvedModels || {};
      payload.resolvedModels[this.name] = resolvedModel;
    },

    becomeResolved: function (payload, resolvedContext) {
      var params = this.serialize(resolvedContext);

      if (payload) {
        this.stashResolvedModel(payload, resolvedContext);
        payload.params = payload.params || {};
        payload.params[this.name] = params;
      }

      return this.factory('resolved', {
        context: resolvedContext,
        name: this.name,
        handler: this.handler,
        params: params
      });
    },

    shouldSupercede: function (other) {
      // Prefer this newer handlerInfo over `other` if:
      // 1) The other one doesn't exist
      // 2) The names don't match
      // 3) This handler has a context that doesn't match
      //    the other one (or the other one doesn't have one).
      // 4) This handler has parameters that don't match the other.
      if (!other) {
        return true;
      }

      var contextsMatch = other.context === this.context;
      return other.name !== this.name || this.hasOwnProperty('context') && !contextsMatch || this.hasOwnProperty('params') && !paramsMatch(this.params, other.params);
    }
  };

  function paramsMatch(a, b) {
    if (!a ^ !b) {
      // Only one is null.
      return false;
    }

    if (!a) {
      // Both must be null.
      return true;
    }

    // Note: this assumes that both params have the same
    // number of keys, but since we're comparing the
    // same handlers, they should.
    for (var k in a) {
      if (a.hasOwnProperty(k) && a[k] !== b[k]) {
        return false;
      }
    }
    return true;
  }

  exports["default"] = HandlerInfo;
});
enifed('router/handler-info/factory', ['exports', 'router/handler-info/resolved-handler-info', 'router/handler-info/unresolved-handler-info-by-object', 'router/handler-info/unresolved-handler-info-by-param'], function (exports, _routerHandlerInfoResolvedHandlerInfo, _routerHandlerInfoUnresolvedHandlerInfoByObject, _routerHandlerInfoUnresolvedHandlerInfoByParam) {

  handlerInfoFactory.klasses = {
    resolved: _routerHandlerInfoResolvedHandlerInfo["default"],
    param: _routerHandlerInfoUnresolvedHandlerInfoByParam["default"],
    object: _routerHandlerInfoUnresolvedHandlerInfoByObject["default"]
  };

  function handlerInfoFactory(name, props) {
    var Ctor = handlerInfoFactory.klasses[name],
        handlerInfo = new Ctor(props || {});
    handlerInfo.factory = handlerInfoFactory;
    return handlerInfo;
  }

  exports["default"] = handlerInfoFactory;
});
enifed('router/handler-info/resolved-handler-info', ['exports', '../handler-info', 'router/utils', 'rsvp/promise'], function (exports, _handlerInfo, _routerUtils, _rsvpPromise) {

  var ResolvedHandlerInfo = (0, _routerUtils.subclass)(_handlerInfo["default"], {
    resolve: function (shouldContinue, payload) {
      // A ResolvedHandlerInfo just resolved with itself.
      if (payload && payload.resolvedModels) {
        payload.resolvedModels[this.name] = this.context;
      }
      return _rsvpPromise["default"].resolve(this, this.promiseLabel('Resolve'));
    },

    getUnresolved: function () {
      return this.factory('param', {
        name: this.name,
        handler: this.handler,
        params: this.params
      });
    },

    isResolved: true
  });

  exports["default"] = ResolvedHandlerInfo;
});
enifed('router/handler-info/unresolved-handler-info-by-object', ['exports', '../handler-info', 'router/utils', 'rsvp/promise'], function (exports, _handlerInfo, _routerUtils, _rsvpPromise) {

  var UnresolvedHandlerInfoByObject = (0, _routerUtils.subclass)(_handlerInfo["default"], {
    getModel: function (payload) {
      this.log(payload, this.name + ': resolving provided model');
      return _rsvpPromise["default"].resolve(this.context);
    },

    initialize: function (props) {
      this.names = props.names || [];
      this.context = props.context;
    },

    /**
      @private
       Serializes a handler using its custom `serialize` method or
      by a default that looks up the expected property name from
      the dynamic segment.
       @param {Object} model the model to be serialized for this handler
    */
    serialize: function (_model) {
      var model = _model || this.context,
          names = this.names,
          handler = this.handler;

      var object = {};
      if ((0, _routerUtils.isParam)(model)) {
        object[names[0]] = model;
        return object;
      }

      // Use custom serialize if it exists.
      if (handler.serialize) {
        return handler.serialize(model, names);
      }

      if (names.length !== 1) {
        return;
      }

      var name = names[0];

      if (/_id$/.test(name)) {
        object[name] = model.id;
      } else {
        object[name] = model;
      }
      return object;
    }
  });

  exports["default"] = UnresolvedHandlerInfoByObject;
});
enifed('router/handler-info/unresolved-handler-info-by-param', ['exports', '../handler-info', 'router/utils'], function (exports, _handlerInfo, _routerUtils) {

  // Generated by URL transitions and non-dynamic route segments in named Transitions.
  var UnresolvedHandlerInfoByParam = (0, _routerUtils.subclass)(_handlerInfo["default"], {
    initialize: function (props) {
      this.params = props.params || {};
    },

    getModel: function (payload) {
      var fullParams = this.params;
      if (payload && payload.queryParams) {
        fullParams = {};
        (0, _routerUtils.merge)(fullParams, this.params);
        fullParams.queryParams = payload.queryParams;
      }

      var handler = this.handler;
      var hookName = (0, _routerUtils.resolveHook)(handler, 'deserialize') || (0, _routerUtils.resolveHook)(handler, 'model');

      return this.runSharedModelHook(payload, hookName, [fullParams]);
    }
  });

  exports["default"] = UnresolvedHandlerInfoByParam;
});
enifed('router/router', ['exports', 'route-recognizer', 'rsvp/promise', './utils', './transition-state', './transition', './transition-intent/named-transition-intent', './transition-intent/url-transition-intent', './handler-info'], function (exports, _routeRecognizer, _rsvpPromise, _utils, _transitionState, _transition, _transitionIntentNamedTransitionIntent, _transitionIntentUrlTransitionIntent, _handlerInfo) {

  var pop = Array.prototype.pop;

  function Router(_options) {
    var options = _options || {};
    this.getHandler = options.getHandler || this.getHandler;
    this.updateURL = options.updateURL || this.updateURL;
    this.replaceURL = options.replaceURL || this.replaceURL;
    this.didTransition = options.didTransition || this.didTransition;
    this.willTransition = options.willTransition || this.willTransition;
    this.delegate = options.delegate || this.delegate;
    this.triggerEvent = options.triggerEvent || this.triggerEvent;
    this.log = options.log || this.log;

    this.recognizer = new _routeRecognizer["default"]();
    this.reset();
  }

  function getTransitionByIntent(intent, isIntermediate) {
    var wasTransitioning = !!this.activeTransition;
    var oldState = wasTransitioning ? this.activeTransition.state : this.state;
    var newTransition;

    var newState = intent.applyToState(oldState, this.recognizer, this.getHandler, isIntermediate);
    var queryParamChangelist = (0, _utils.getChangelist)(oldState.queryParams, newState.queryParams);

    if (handlerInfosEqual(newState.handlerInfos, oldState.handlerInfos)) {

      // This is a no-op transition. See if query params changed.
      if (queryParamChangelist) {
        newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);
        if (newTransition) {
          return newTransition;
        }
      }

      // No-op. No need to create a new transition.
      return this.activeTransition || new _transition.Transition(this);
    }

    if (isIntermediate) {
      setupContexts(this, newState);
      return;
    }

    // Create a new transition to the destination route.
    newTransition = new _transition.Transition(this, intent, newState);

    // Abort and usurp any previously active transition.
    if (this.activeTransition) {
      this.activeTransition.abort();
    }
    this.activeTransition = newTransition;

    // Transition promises by default resolve with resolved state.
    // For our purposes, swap out the promise to resolve
    // after the transition has been finalized.
    newTransition.promise = newTransition.promise.then(function (result) {
      return finalizeTransition(newTransition, result.state);
    }, null, (0, _utils.promiseLabel)('Settle transition promise when transition is finalized'));

    if (!wasTransitioning) {
      notifyExistingHandlers(this, newState, newTransition);
    }

    fireQueryParamDidChange(this, newState, queryParamChangelist);

    return newTransition;
  }

  Router.prototype = {

    /**
      The main entry point into the router. The API is essentially
      the same as the `map` method in `route-recognizer`.
       This method extracts the String handler at the last `.to()`
      call and uses it as the name of the whole route.
       @param {Function} callback
    */
    map: function (callback) {
      this.recognizer.delegate = this.delegate;

      this.recognizer.map(callback, function (recognizer, routes) {
        for (var i = routes.length - 1, proceed = true; i >= 0 && proceed; --i) {
          var route = routes[i];
          recognizer.add(routes, { as: route.handler });
          proceed = route.path === '/' || route.path === '' || route.handler.slice(-6) === '.index';
        }
      });
    },

    hasRoute: function (route) {
      return this.recognizer.hasRoute(route);
    },

    getHandler: function () {},

    queryParamsTransition: function (changelist, wasTransitioning, oldState, newState) {
      var router = this;

      fireQueryParamDidChange(this, newState, changelist);

      if (!wasTransitioning && this.activeTransition) {
        // One of the handlers in queryParamsDidChange
        // caused a transition. Just return that transition.
        return this.activeTransition;
      } else {
        // Running queryParamsDidChange didn't change anything.
        // Just update query params and be on our way.

        // We have to return a noop transition that will
        // perform a URL update at the end. This gives
        // the user the ability to set the url update
        // method (default is replaceState).
        var newTransition = new _transition.Transition(this);
        newTransition.queryParamsOnly = true;

        oldState.queryParams = finalizeQueryParamChange(this, newState.handlerInfos, newState.queryParams, newTransition);

        newTransition.promise = newTransition.promise.then(function (result) {
          updateURL(newTransition, oldState, true);
          if (router.didTransition) {
            router.didTransition(router.currentHandlerInfos);
          }
          return result;
        }, null, (0, _utils.promiseLabel)('Transition complete'));
        return newTransition;
      }
    },

    // NOTE: this doesn't really belong here, but here
    // it shall remain until our ES6 transpiler can
    // handle cyclical deps.
    transitionByIntent: function (intent, isIntermediate) {
      try {
        return getTransitionByIntent.apply(this, arguments);
      } catch (e) {
        return new _transition.Transition(this, intent, null, e);
      }
    },

    /**
      Clears the current and target route handlers and triggers exit
      on each of them starting at the leaf and traversing up through
      its ancestors.
    */
    reset: function () {
      if (this.state) {
        (0, _utils.forEach)(this.state.handlerInfos.slice().reverse(), function (handlerInfo) {
          var handler = handlerInfo.handler;
          (0, _utils.callHook)(handler, 'exit');
        });
      }

      this.state = new _transitionState["default"]();
      this.currentHandlerInfos = null;
    },

    activeTransition: null,

    /**
      var handler = handlerInfo.handler;
      The entry point for handling a change to the URL (usually
      via the back and forward button).
       Returns an Array of handlers and the parameters associated
      with those parameters.
       @param {String} url a URL to process
       @return {Array} an Array of `[handler, parameter]` tuples
    */
    handleURL: function (url) {
      // Perform a URL-based transition, but don't change
      // the URL afterward, since it already happened.
      var args = _utils.slice.call(arguments);
      if (url.charAt(0) !== '/') {
        args[0] = '/' + url;
      }

      return doTransition(this, args).method(null);
    },

    /**
      Hook point for updating the URL.
       @param {String} url a URL to update to
    */
    updateURL: function () {
      throw new Error('updateURL is not implemented');
    },

    /**
      Hook point for replacing the current URL, i.e. with replaceState
       By default this behaves the same as `updateURL`
       @param {String} url a URL to update to
    */
    replaceURL: function (url) {
      this.updateURL(url);
    },

    /**
      Transition into the specified named route.
       If necessary, trigger the exit callback on any handlers
      that are no longer represented by the target route.
       @param {String} name the name of the route
    */
    transitionTo: function (name) {
      return doTransition(this, arguments);
    },

    intermediateTransitionTo: function (name) {
      return doTransition(this, arguments, true);
    },

    refresh: function (pivotHandler) {
      var state = this.activeTransition ? this.activeTransition.state : this.state;
      var handlerInfos = state.handlerInfos;
      var params = {};
      for (var i = 0, len = handlerInfos.length; i < len; ++i) {
        var handlerInfo = handlerInfos[i];
        params[handlerInfo.name] = handlerInfo.params || {};
      }

      (0, _utils.log)(this, 'Starting a refresh transition');
      var intent = new _transitionIntentNamedTransitionIntent["default"]({
        name: handlerInfos[handlerInfos.length - 1].name,
        pivotHandler: pivotHandler || handlerInfos[0].handler,
        contexts: [], // TODO collect contexts...?
        queryParams: this._changedQueryParams || state.queryParams || {}
      });

      return this.transitionByIntent(intent, false);
    },

    /**
      Identical to `transitionTo` except that the current URL will be replaced
      if possible.
       This method is intended primarily for use with `replaceState`.
       @param {String} name the name of the route
    */
    replaceWith: function (name) {
      return doTransition(this, arguments).method('replace');
    },

    /**
      Take a named route and context objects and generate a
      URL.
       @param {String} name the name of the route to generate
        a URL for
      @param {...Object} objects a list of objects to serialize
       @return {String} a URL
    */
    generate: function (handlerName) {

      var partitionedArgs = (0, _utils.extractQueryParams)(_utils.slice.call(arguments, 1)),
          suppliedParams = partitionedArgs[0],
          queryParams = partitionedArgs[1];

      // Construct a TransitionIntent with the provided params
      // and apply it to the present state of the router.
      var intent = new _transitionIntentNamedTransitionIntent["default"]({ name: handlerName, contexts: suppliedParams });
      var state = intent.applyToState(this.state, this.recognizer, this.getHandler);
      var params = {};

      for (var i = 0, len = state.handlerInfos.length; i < len; ++i) {
        var handlerInfo = state.handlerInfos[i];
        var handlerParams = handlerInfo.serialize();
        (0, _utils.merge)(params, handlerParams);
      }
      params.queryParams = queryParams;

      return this.recognizer.generate(handlerName, params);
    },

    applyIntent: function (handlerName, contexts) {
      var intent = new _transitionIntentNamedTransitionIntent["default"]({
        name: handlerName,
        contexts: contexts
      });

      var state = this.activeTransition && this.activeTransition.state || this.state;
      return intent.applyToState(state, this.recognizer, this.getHandler);
    },

    isActiveIntent: function (handlerName, contexts, queryParams, _state) {
      var state = _state || this.state,
          targetHandlerInfos = state.handlerInfos,
          found = false,
          names,
          object,
          handlerInfo,
          handlerObj,
          i,
          len;

      if (!targetHandlerInfos.length) {
        return false;
      }

      var targetHandler = targetHandlerInfos[targetHandlerInfos.length - 1].name;
      var recogHandlers = this.recognizer.handlersFor(targetHandler);

      var index = 0;
      for (len = recogHandlers.length; index < len; ++index) {
        handlerInfo = targetHandlerInfos[index];
        if (handlerInfo.name === handlerName) {
          break;
        }
      }

      if (index === recogHandlers.length) {
        // The provided route name isn't even in the route hierarchy.
        return false;
      }

      var testState = new _transitionState["default"]();
      testState.handlerInfos = targetHandlerInfos.slice(0, index + 1);
      recogHandlers = recogHandlers.slice(0, index + 1);

      var intent = new _transitionIntentNamedTransitionIntent["default"]({
        name: targetHandler,
        contexts: contexts
      });

      var newState = intent.applyToHandlers(testState, recogHandlers, this.getHandler, targetHandler, true, true);

      var handlersEqual = handlerInfosEqual(newState.handlerInfos, testState.handlerInfos);
      if (!queryParams || !handlersEqual) {
        return handlersEqual;
      }

      // Get a hash of QPs that will still be active on new route
      var activeQPsOnNewHandler = {};
      (0, _utils.merge)(activeQPsOnNewHandler, queryParams);

      var activeQueryParams = state.queryParams;
      for (var key in activeQueryParams) {
        if (activeQueryParams.hasOwnProperty(key) && activeQPsOnNewHandler.hasOwnProperty(key)) {
          activeQPsOnNewHandler[key] = activeQueryParams[key];
        }
      }

      return handlersEqual && !(0, _utils.getChangelist)(activeQPsOnNewHandler, queryParams);
    },

    isActive: function (handlerName) {
      var partitionedArgs = (0, _utils.extractQueryParams)(_utils.slice.call(arguments, 1));
      return this.isActiveIntent(handlerName, partitionedArgs[0], partitionedArgs[1]);
    },

    trigger: function (name) {
      var args = _utils.slice.call(arguments);
      (0, _utils.trigger)(this, this.currentHandlerInfos, false, args);
    },

    /**
      Hook point for logging transition status updates.
       @param {String} message The message to log.
    */
    log: null
  };

  /**
    @private
  
    Fires queryParamsDidChange event
  */
  function fireQueryParamDidChange(router, newState, queryParamChangelist) {
    // If queryParams changed trigger event
    if (queryParamChangelist) {

      // This is a little hacky but we need some way of storing
      // changed query params given that no activeTransition
      // is guaranteed to have occurred.
      router._changedQueryParams = queryParamChangelist.all;
      (0, _utils.trigger)(router, newState.handlerInfos, true, ['queryParamsDidChange', queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);
      router._changedQueryParams = null;
    }
  }

  /**
    @private
  
    Takes an Array of `HandlerInfo`s, figures out which ones are
    exiting, entering, or changing contexts, and calls the
    proper handler hooks.
  
    For example, consider the following tree of handlers. Each handler is
    followed by the URL segment it handles.
  
    ```
    |~index ("/")
    | |~posts ("/posts")
    | | |-showPost ("/:id")
    | | |-newPost ("/new")
    | | |-editPost ("/edit")
    | |~about ("/about/:id")
    ```
  
    Consider the following transitions:
  
    1. A URL transition to `/posts/1`.
       1. Triggers the `*model` callbacks on the
          `index`, `posts`, and `showPost` handlers
       2. Triggers the `enter` callback on the same
       3. Triggers the `setup` callback on the same
    2. A direct transition to `newPost`
       1. Triggers the `exit` callback on `showPost`
       2. Triggers the `enter` callback on `newPost`
       3. Triggers the `setup` callback on `newPost`
    3. A direct transition to `about` with a specified
       context object
       1. Triggers the `exit` callback on `newPost`
          and `posts`
       2. Triggers the `serialize` callback on `about`
       3. Triggers the `enter` callback on `about`
       4. Triggers the `setup` callback on `about`
  
    @param {Router} transition
    @param {TransitionState} newState
  */
  function setupContexts(router, newState, transition) {
    var partition = partitionHandlers(router.state, newState);
    var i, l, handler;

    for (i = 0, l = partition.exited.length; i < l; i++) {
      handler = partition.exited[i].handler;
      delete handler.context;

      (0, _utils.callHook)(handler, 'reset', true, transition);
      (0, _utils.callHook)(handler, 'exit', transition);
    }

    var oldState = router.oldState = router.state;
    router.state = newState;
    var currentHandlerInfos = router.currentHandlerInfos = partition.unchanged.slice();

    try {
      for (i = 0, l = partition.reset.length; i < l; i++) {
        handler = partition.reset[i].handler;
        (0, _utils.callHook)(handler, 'reset', false, transition);
      }

      for (i = 0, l = partition.updatedContext.length; i < l; i++) {
        handlerEnteredOrUpdated(currentHandlerInfos, partition.updatedContext[i], false, transition);
      }

      for (i = 0, l = partition.entered.length; i < l; i++) {
        handlerEnteredOrUpdated(currentHandlerInfos, partition.entered[i], true, transition);
      }
    } catch (e) {
      router.state = oldState;
      router.currentHandlerInfos = oldState.handlerInfos;
      throw e;
    }

    router.state.queryParams = finalizeQueryParamChange(router, currentHandlerInfos, newState.queryParams, transition);
  }

  /**
    @private
  
    Helper method used by setupContexts. Handles errors or redirects
    that may happen in enter/setup.
  */
  function handlerEnteredOrUpdated(currentHandlerInfos, handlerInfo, enter, transition) {

    var handler = handlerInfo.handler,
        context = handlerInfo.context;

    if (enter) {
      (0, _utils.callHook)(handler, 'enter', transition);
    }
    if (transition && transition.isAborted) {
      throw new _transition.TransitionAborted();
    }

    handler.context = context;
    (0, _utils.callHook)(handler, 'contextDidChange');

    (0, _utils.callHook)(handler, 'setup', context, transition);
    if (transition && transition.isAborted) {
      throw new _transition.TransitionAborted();
    }

    currentHandlerInfos.push(handlerInfo);

    return true;
  }

  /**
    @private
  
    This function is called when transitioning from one URL to
    another to determine which handlers are no longer active,
    which handlers are newly active, and which handlers remain
    active but have their context changed.
  
    Take a list of old handlers and new handlers and partition
    them into four buckets:
  
    * unchanged: the handler was active in both the old and
      new URL, and its context remains the same
    * updated context: the handler was active in both the
      old and new URL, but its context changed. The handler's
      `setup` method, if any, will be called with the new
      context.
    * exited: the handler was active in the old URL, but is
      no longer active.
    * entered: the handler was not active in the old URL, but
      is now active.
  
    The PartitionedHandlers structure has four fields:
  
    * `updatedContext`: a list of `HandlerInfo` objects that
      represent handlers that remain active but have a changed
      context
    * `entered`: a list of `HandlerInfo` objects that represent
      handlers that are newly active
    * `exited`: a list of `HandlerInfo` objects that are no
      longer active.
    * `unchanged`: a list of `HanderInfo` objects that remain active.
  
    @param {Array[HandlerInfo]} oldHandlers a list of the handler
      information for the previous URL (or `[]` if this is the
      first handled transition)
    @param {Array[HandlerInfo]} newHandlers a list of the handler
      information for the new URL
  
    @return {Partition}
  */
  function partitionHandlers(oldState, newState) {
    var oldHandlers = oldState.handlerInfos;
    var newHandlers = newState.handlerInfos;

    var handlers = {
      updatedContext: [],
      exited: [],
      entered: [],
      unchanged: []
    };

    var handlerChanged,
        contextChanged = false,
        i,
        l;

    for (i = 0, l = newHandlers.length; i < l; i++) {
      var oldHandler = oldHandlers[i],
          newHandler = newHandlers[i];

      if (!oldHandler || oldHandler.handler !== newHandler.handler) {
        handlerChanged = true;
      }

      if (handlerChanged) {
        handlers.entered.push(newHandler);
        if (oldHandler) {
          handlers.exited.unshift(oldHandler);
        }
      } else if (contextChanged || oldHandler.context !== newHandler.context) {
        contextChanged = true;
        handlers.updatedContext.push(newHandler);
      } else {
        handlers.unchanged.push(oldHandler);
      }
    }

    for (i = newHandlers.length, l = oldHandlers.length; i < l; i++) {
      handlers.exited.unshift(oldHandlers[i]);
    }

    handlers.reset = handlers.updatedContext.slice();
    handlers.reset.reverse();

    return handlers;
  }

  function updateURL(transition, state, inputUrl) {
    var urlMethod = transition.urlMethod;

    if (!urlMethod) {
      return;
    }

    var router = transition.router,
        handlerInfos = state.handlerInfos,
        handlerName = handlerInfos[handlerInfos.length - 1].name,
        params = {};

    for (var i = handlerInfos.length - 1; i >= 0; --i) {
      var handlerInfo = handlerInfos[i];
      (0, _utils.merge)(params, handlerInfo.params);
      if (handlerInfo.handler.inaccessibleByURL) {
        urlMethod = null;
      }
    }

    if (urlMethod) {
      params.queryParams = transition._visibleQueryParams || state.queryParams;
      var url = router.recognizer.generate(handlerName, params);

      if (urlMethod === 'replace') {
        router.replaceURL(url);
      } else {
        router.updateURL(url);
      }
    }
  }

  /**
    @private
  
    Updates the URL (if necessary) and calls `setupContexts`
    to update the router's array of `currentHandlerInfos`.
   */
  function finalizeTransition(transition, newState) {

    try {
      (0, _utils.log)(transition.router, transition.sequence, 'Resolved all models on destination route; finalizing transition.');

      var router = transition.router,
          handlerInfos = newState.handlerInfos,
          seq = transition.sequence;

      // Run all the necessary enter/setup/exit hooks
      setupContexts(router, newState, transition);

      // Check if a redirect occurred in enter/setup
      if (transition.isAborted) {
        // TODO: cleaner way? distinguish b/w targetHandlerInfos?
        router.state.handlerInfos = router.currentHandlerInfos;
        return _rsvpPromise["default"].reject((0, _transition.logAbort)(transition));
      }

      updateURL(transition, newState, transition.intent.url);

      transition.isActive = false;
      router.activeTransition = null;

      (0, _utils.trigger)(router, router.currentHandlerInfos, true, ['didTransition']);

      if (router.didTransition) {
        router.didTransition(router.currentHandlerInfos);
      }

      (0, _utils.log)(router, transition.sequence, 'TRANSITION COMPLETE.');

      // Resolve with the final handler.
      return handlerInfos[handlerInfos.length - 1].handler;
    } catch (e) {
      if (!(e instanceof _transition.TransitionAborted)) {
        //var erroneousHandler = handlerInfos.pop();
        var infos = transition.state.handlerInfos;
        transition.trigger(true, 'error', e, transition, infos[infos.length - 1].handler);
        transition.abort();
      }

      throw e;
    }
  }

  /**
    @private
  
    Begins and returns a Transition based on the provided
    arguments. Accepts arguments in the form of both URL
    transitions and named transitions.
  
    @param {Router} router
    @param {Array[Object]} args arguments passed to transitionTo,
      replaceWith, or handleURL
  */
  function doTransition(router, args, isIntermediate) {
    // Normalize blank transitions to root URL transitions.
    var name = args[0] || '/';

    var lastArg = args[args.length - 1];
    var queryParams = {};
    if (lastArg && lastArg.hasOwnProperty('queryParams')) {
      queryParams = pop.call(args).queryParams;
    }

    var intent;
    if (args.length === 0) {

      (0, _utils.log)(router, 'Updating query params');

      // A query param update is really just a transition
      // into the route you're already on.
      var handlerInfos = router.state.handlerInfos;
      intent = new _transitionIntentNamedTransitionIntent["default"]({
        name: handlerInfos[handlerInfos.length - 1].name,
        contexts: [],
        queryParams: queryParams
      });
    } else if (name.charAt(0) === '/') {

      (0, _utils.log)(router, 'Attempting URL transition to ' + name);
      intent = new _transitionIntentUrlTransitionIntent["default"]({ url: name });
    } else {

      (0, _utils.log)(router, 'Attempting transition to ' + name);
      intent = new _transitionIntentNamedTransitionIntent["default"]({
        name: args[0],
        contexts: _utils.slice.call(args, 1),
        queryParams: queryParams
      });
    }

    return router.transitionByIntent(intent, isIntermediate);
  }

  function handlerInfosEqual(handlerInfos, otherHandlerInfos) {
    if (handlerInfos.length !== otherHandlerInfos.length) {
      return false;
    }

    for (var i = 0, len = handlerInfos.length; i < len; ++i) {
      if (handlerInfos[i] !== otherHandlerInfos[i]) {
        return false;
      }
    }
    return true;
  }

  function finalizeQueryParamChange(router, resolvedHandlers, newQueryParams, transition) {
    // We fire a finalizeQueryParamChange event which
    // gives the new route hierarchy a chance to tell
    // us which query params it's consuming and what
    // their final values are. If a query param is
    // no longer consumed in the final route hierarchy,
    // its serialized segment will be removed
    // from the URL.

    for (var k in newQueryParams) {
      if (newQueryParams.hasOwnProperty(k) && newQueryParams[k] === null) {
        delete newQueryParams[k];
      }
    }

    var finalQueryParamsArray = [];
    (0, _utils.trigger)(router, resolvedHandlers, true, ['finalizeQueryParamChange', newQueryParams, finalQueryParamsArray, transition]);

    if (transition) {
      transition._visibleQueryParams = {};
    }

    var finalQueryParams = {};
    for (var i = 0, len = finalQueryParamsArray.length; i < len; ++i) {
      var qp = finalQueryParamsArray[i];
      finalQueryParams[qp.key] = qp.value;
      if (transition && qp.visible !== false) {
        transition._visibleQueryParams[qp.key] = qp.value;
      }
    }
    return finalQueryParams;
  }

  function notifyExistingHandlers(router, newState, newTransition) {
    var oldHandlers = router.state.handlerInfos,
        changing = [],
        leavingIndex = null,
        leaving,
        leavingChecker,
        i,
        oldHandlerLen,
        oldHandler,
        newHandler;

    oldHandlerLen = oldHandlers.length;
    for (i = 0; i < oldHandlerLen; i++) {
      oldHandler = oldHandlers[i];
      newHandler = newState.handlerInfos[i];

      if (!newHandler || oldHandler.name !== newHandler.name) {
        leavingIndex = i;
        break;
      }

      if (!newHandler.isResolved) {
        changing.push(oldHandler);
      }
    }

    if (leavingIndex !== null) {
      leaving = oldHandlers.slice(leavingIndex, oldHandlerLen);
      leavingChecker = function (name) {
        for (var h = 0, len = leaving.length; h < len; h++) {
          if (leaving[h].name === name) {
            return true;
          }
        }
        return false;
      };
    }

    (0, _utils.trigger)(router, oldHandlers, true, ['willTransition', newTransition]);

    if (router.willTransition) {
      router.willTransition(oldHandlers, newState.handlerInfos, newTransition);
    }
  }

  exports["default"] = Router;
});
enifed('router/transition-intent', ['exports', './utils'], function (exports, _utils) {

  function TransitionIntent(props) {
    this.initialize(props);

    // TODO: wat
    this.data = this.data || {};
  }

  TransitionIntent.prototype = {
    initialize: null,
    applyToState: null
  };

  exports["default"] = TransitionIntent;
});
enifed('router/transition-intent/named-transition-intent', ['exports', '../transition-intent', '../transition-state', '../handler-info/factory', '../utils'], function (exports, _transitionIntent, _transitionState, _handlerInfoFactory, _utils) {
  exports["default"] = (0, _utils.subclass)(_transitionIntent["default"], {
    name: null,
    pivotHandler: null,
    contexts: null,
    queryParams: null,

    initialize: function (props) {
      this.name = props.name;
      this.pivotHandler = props.pivotHandler;
      this.contexts = props.contexts || [];
      this.queryParams = props.queryParams;
    },

    applyToState: function (oldState, recognizer, getHandler, isIntermediate) {

      var partitionedArgs = (0, _utils.extractQueryParams)([this.name].concat(this.contexts)),
          pureArgs = partitionedArgs[0],
          queryParams = partitionedArgs[1],
          handlers = recognizer.handlersFor(pureArgs[0]);

      var targetRouteName = handlers[handlers.length - 1].handler;

      return this.applyToHandlers(oldState, handlers, getHandler, targetRouteName, isIntermediate);
    },

    applyToHandlers: function (oldState, handlers, getHandler, targetRouteName, isIntermediate, checkingIfActive) {

      var i, len;
      var newState = new _transitionState["default"]();
      var objects = this.contexts.slice(0);

      var invalidateIndex = handlers.length;

      // Pivot handlers are provided for refresh transitions
      if (this.pivotHandler) {
        for (i = 0, len = handlers.length; i < len; ++i) {
          if (getHandler(handlers[i].handler) === this.pivotHandler) {
            invalidateIndex = i;
            break;
          }
        }
      }

      var pivotHandlerFound = !this.pivotHandler;

      for (i = handlers.length - 1; i >= 0; --i) {
        var result = handlers[i];
        var name = result.handler;
        var handler = getHandler(name);

        var oldHandlerInfo = oldState.handlerInfos[i];
        var newHandlerInfo = null;

        if (result.names.length > 0) {
          if (i >= invalidateIndex) {
            newHandlerInfo = this.createParamHandlerInfo(name, handler, result.names, objects, oldHandlerInfo);
          } else {
            newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, handler, result.names, objects, oldHandlerInfo, targetRouteName, i);
          }
        } else {
          // This route has no dynamic segment.
          // Therefore treat as a param-based handlerInfo
          // with empty params. This will cause the `model`
          // hook to be called with empty params, which is desirable.
          newHandlerInfo = this.createParamHandlerInfo(name, handler, result.names, objects, oldHandlerInfo);
        }

        if (checkingIfActive) {
          // If we're performing an isActive check, we want to
          // serialize URL params with the provided context, but
          // ignore mismatches between old and new context.
          newHandlerInfo = newHandlerInfo.becomeResolved(null, newHandlerInfo.context);
          var oldContext = oldHandlerInfo && oldHandlerInfo.context;
          if (result.names.length > 0 && newHandlerInfo.context === oldContext) {
            // If contexts match in isActive test, assume params also match.
            // This allows for flexibility in not requiring that every last
            // handler provide a `serialize` method
            newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;
          }
          newHandlerInfo.context = oldContext;
        }

        var handlerToUse = oldHandlerInfo;
        if (i >= invalidateIndex || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {
          invalidateIndex = Math.min(i, invalidateIndex);
          handlerToUse = newHandlerInfo;
        }

        if (isIntermediate && !checkingIfActive) {
          handlerToUse = handlerToUse.becomeResolved(null, handlerToUse.context);
        }

        newState.handlerInfos.unshift(handlerToUse);
      }

      if (objects.length > 0) {
        throw new Error('More context objects were passed than there are dynamic segments for the route: ' + targetRouteName);
      }

      if (!isIntermediate) {
        this.invalidateChildren(newState.handlerInfos, invalidateIndex);
      }

      (0, _utils.merge)(newState.queryParams, this.queryParams || {});

      return newState;
    },

    invalidateChildren: function (handlerInfos, invalidateIndex) {
      for (var i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {
        var handlerInfo = handlerInfos[i];
        handlerInfos[i] = handlerInfos[i].getUnresolved();
      }
    },

    getHandlerInfoForDynamicSegment: function (name, handler, names, objects, oldHandlerInfo, targetRouteName, i) {

      var numNames = names.length;
      var objectToUse;
      if (objects.length > 0) {

        // Use the objects provided for this transition.
        objectToUse = objects[objects.length - 1];
        if ((0, _utils.isParam)(objectToUse)) {
          return this.createParamHandlerInfo(name, handler, names, objects, oldHandlerInfo);
        } else {
          objects.pop();
        }
      } else if (oldHandlerInfo && oldHandlerInfo.name === name) {
        // Reuse the matching oldHandlerInfo
        return oldHandlerInfo;
      } else {
        if (this.preTransitionState) {
          var preTransitionHandlerInfo = this.preTransitionState.handlerInfos[i];
          objectToUse = preTransitionHandlerInfo && preTransitionHandlerInfo.context;
        } else {
          // Ideally we should throw this error to provide maximal
          // information to the user that not enough context objects
          // were provided, but this proves too cumbersome in Ember
          // in cases where inner template helpers are evaluated
          // before parent helpers un-render, in which cases this
          // error somewhat prematurely fires.
          //throw new Error("Not enough context objects were provided to complete a transition to " + targetRouteName + ". Specifically, the " + name + " route needs an object that can be serialized into its dynamic URL segments [" + names.join(', ') + "]");
          return oldHandlerInfo;
        }
      }

      return (0, _handlerInfoFactory["default"])('object', {
        name: name,
        handler: handler,
        context: objectToUse,
        names: names
      });
    },

    createParamHandlerInfo: function (name, handler, names, objects, oldHandlerInfo) {
      var params = {};

      // Soak up all the provided string/numbers
      var numNames = names.length;
      while (numNames--) {

        // Only use old params if the names match with the new handler
        var oldParams = oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params || {};

        var peek = objects[objects.length - 1];
        var paramName = names[numNames];
        if ((0, _utils.isParam)(peek)) {
          params[paramName] = '' + objects.pop();
        } else {
          // If we're here, this means only some of the params
          // were string/number params, so try and use a param
          // value from a previous handler.
          if (oldParams.hasOwnProperty(paramName)) {
            params[paramName] = oldParams[paramName];
          } else {
            throw new Error('You didn\'t provide enough string/numeric parameters to satisfy all of the dynamic segments for route ' + name);
          }
        }
      }

      return (0, _handlerInfoFactory["default"])('param', {
        name: name,
        handler: handler,
        params: params
      });
    }
  });
});
enifed('router/transition-intent/url-transition-intent', ['exports', '../transition-intent', '../transition-state', '../handler-info/factory', '../utils', './../unrecognized-url-error'], function (exports, _transitionIntent, _transitionState, _handlerInfoFactory, _utils, _unrecognizedUrlError) {
  exports["default"] = (0, _utils.subclass)(_transitionIntent["default"], {
    url: null,

    initialize: function (props) {
      this.url = props.url;
    },

    applyToState: function (oldState, recognizer, getHandler) {
      var newState = new _transitionState["default"]();

      var results = recognizer.recognize(this.url),
          queryParams = {},
          i,
          len;

      if (!results) {
        throw new _unrecognizedUrlError["default"](this.url);
      }

      var statesDiffer = false;

      for (i = 0, len = results.length; i < len; ++i) {
        var result = results[i];
        var name = result.handler;
        var handler = getHandler(name);

        if (handler.inaccessibleByURL) {
          throw new _unrecognizedUrlError["default"](this.url);
        }

        var newHandlerInfo = (0, _handlerInfoFactory["default"])('param', {
          name: name,
          handler: handler,
          params: result.params
        });

        var oldHandlerInfo = oldState.handlerInfos[i];
        if (statesDiffer || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {
          statesDiffer = true;
          newState.handlerInfos[i] = newHandlerInfo;
        } else {
          newState.handlerInfos[i] = oldHandlerInfo;
        }
      }

      (0, _utils.merge)(newState.queryParams, results.queryParams);

      return newState;
    }
  });
});
enifed('router/transition-state', ['exports', './handler-info', './utils', 'rsvp/promise'], function (exports, _handlerInfo, _utils, _rsvpPromise) {

  function TransitionState(other) {
    this.handlerInfos = [];
    this.queryParams = {};
    this.params = {};
  }

  TransitionState.prototype = {
    handlerInfos: null,
    queryParams: null,
    params: null,

    promiseLabel: function (label) {
      var targetName = '';
      (0, _utils.forEach)(this.handlerInfos, function (handlerInfo) {
        if (targetName !== '') {
          targetName += '.';
        }
        targetName += handlerInfo.name;
      });
      return (0, _utils.promiseLabel)('\'' + targetName + '\': ' + label);
    },

    resolve: function (shouldContinue, payload) {
      var self = this;
      // First, calculate params for this state. This is useful
      // information to provide to the various route hooks.
      var params = this.params;
      (0, _utils.forEach)(this.handlerInfos, function (handlerInfo) {
        params[handlerInfo.name] = handlerInfo.params || {};
      });

      payload = payload || {};
      payload.resolveIndex = 0;

      var currentState = this;
      var wasAborted = false;

      // The prelude RSVP.resolve() asyncs us into the promise land.
      return _rsvpPromise["default"].resolve(null, this.promiseLabel('Start transition')).then(resolveOneHandlerInfo, null, this.promiseLabel('Resolve handler'))['catch'](handleError, this.promiseLabel('Handle error'));

      function innerShouldContinue() {
        return _rsvpPromise["default"].resolve(shouldContinue(), currentState.promiseLabel('Check if should continue'))['catch'](function (reason) {
          // We distinguish between errors that occurred
          // during resolution (e.g. beforeModel/model/afterModel),
          // and aborts due to a rejecting promise from shouldContinue().
          wasAborted = true;
          return _rsvpPromise["default"].reject(reason);
        }, currentState.promiseLabel('Handle abort'));
      }

      function handleError(error) {
        // This is the only possible
        // reject value of TransitionState#resolve
        var handlerInfos = currentState.handlerInfos;
        var errorHandlerIndex = payload.resolveIndex >= handlerInfos.length ? handlerInfos.length - 1 : payload.resolveIndex;
        return _rsvpPromise["default"].reject({
          error: error,
          handlerWithError: currentState.handlerInfos[errorHandlerIndex].handler,
          wasAborted: wasAborted,
          state: currentState
        });
      }

      function proceed(resolvedHandlerInfo) {
        var wasAlreadyResolved = currentState.handlerInfos[payload.resolveIndex].isResolved;

        // Swap the previously unresolved handlerInfo with
        // the resolved handlerInfo
        currentState.handlerInfos[payload.resolveIndex++] = resolvedHandlerInfo;

        if (!wasAlreadyResolved) {
          // Call the redirect hook. The reason we call it here
          // vs. afterModel is so that redirects into child
          // routes don't re-run the model hooks for this
          // already-resolved route.
          var handler = resolvedHandlerInfo.handler;
          (0, _utils.callHook)(handler, 'redirect', resolvedHandlerInfo.context, payload);
        }

        // Proceed after ensuring that the redirect hook
        // didn't abort this transition by transitioning elsewhere.
        return innerShouldContinue().then(resolveOneHandlerInfo, null, currentState.promiseLabel('Resolve handler'));
      }

      function resolveOneHandlerInfo() {
        if (payload.resolveIndex === currentState.handlerInfos.length) {
          // This is is the only possible
          // fulfill value of TransitionState#resolve
          return {
            error: null,
            state: currentState
          };
        }

        var handlerInfo = currentState.handlerInfos[payload.resolveIndex];

        return handlerInfo.resolve(innerShouldContinue, payload).then(proceed, null, currentState.promiseLabel('Proceed'));
      }
    }
  };

  exports["default"] = TransitionState;
});
enifed('router/transition', ['exports', 'rsvp/promise', './handler-info', './utils'], function (exports, _rsvpPromise, _handlerInfo, _utils) {

  /**
    @private
  
    A Transition is a thennable (a promise-like object) that represents
    an attempt to transition to another route. It can be aborted, either
    explicitly via `abort` or by attempting another transition while a
    previous one is still underway. An aborted transition can also
    be `retry()`d later.
   */
  function Transition(router, intent, state, error) {
    var transition = this;
    this.state = state || router.state;
    this.intent = intent;
    this.router = router;
    this.data = this.intent && this.intent.data || {};
    this.resolvedModels = {};
    this.queryParams = {};

    if (error) {
      this.promise = _rsvpPromise["default"].reject(error);
      this.error = error;
      return;
    }

    if (state) {
      this.params = state.params;
      this.queryParams = state.queryParams;
      this.handlerInfos = state.handlerInfos;

      var len = state.handlerInfos.length;
      if (len) {
        this.targetName = state.handlerInfos[len - 1].name;
      }

      for (var i = 0; i < len; ++i) {
        var handlerInfo = state.handlerInfos[i];

        // TODO: this all seems hacky
        if (!handlerInfo.isResolved) {
          break;
        }
        this.pivotHandler = handlerInfo.handler;
      }

      this.sequence = Transition.currentSequence++;
      this.promise = state.resolve(checkForAbort, this)['catch'](function (result) {
        if (result.wasAborted || transition.isAborted) {
          return _rsvpPromise["default"].reject(logAbort(transition));
        } else {
          transition.trigger('error', result.error, transition, result.handlerWithError);
          transition.abort();
          return _rsvpPromise["default"].reject(result.error);
        }
      }, (0, _utils.promiseLabel)('Handle Abort'));
    } else {
      this.promise = _rsvpPromise["default"].resolve(this.state);
      this.params = {};
    }

    function checkForAbort() {
      if (transition.isAborted) {
        return _rsvpPromise["default"].reject(undefined, (0, _utils.promiseLabel)('Transition aborted - reject'));
      }
    }
  }

  Transition.currentSequence = 0;

  Transition.prototype = {
    targetName: null,
    urlMethod: 'update',
    intent: null,
    params: null,
    pivotHandler: null,
    resolveIndex: 0,
    handlerInfos: null,
    resolvedModels: null,
    isActive: true,
    state: null,
    queryParamsOnly: false,

    isTransition: true,

    isExiting: function (handler) {
      var handlerInfos = this.handlerInfos;
      for (var i = 0, len = handlerInfos.length; i < len; ++i) {
        var handlerInfo = handlerInfos[i];
        if (handlerInfo.name === handler || handlerInfo.handler === handler) {
          return false;
        }
      }
      return true;
    },

    /**
      @public
       The Transition's internal promise. Calling `.then` on this property
      is that same as calling `.then` on the Transition object itself, but
      this property is exposed for when you want to pass around a
      Transition's promise, but not the Transition object itself, since
      Transition object can be externally `abort`ed, while the promise
      cannot.
     */
    promise: null,

    /**
      @public
       Custom state can be stored on a Transition's `data` object.
      This can be useful for decorating a Transition within an earlier
      hook and shared with a later hook. Properties set on `data` will
      be copied to new transitions generated by calling `retry` on this
      transition.
     */
    data: null,

    /**
      @public
       A standard promise hook that resolves if the transition
      succeeds and rejects if it fails/redirects/aborts.
       Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thennable,
      but not the Transition itself.
       @param {Function} onFulfilled
      @param {Function} onRejected
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
     */
    then: function (onFulfilled, onRejected, label) {
      return this.promise.then(onFulfilled, onRejected, label);
    },

    /**
      @public
       Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thennable,
      but not the Transition itself.
       @method catch
      @param {Function} onRejection
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
     */
    "catch": function (onRejection, label) {
      return this.promise["catch"](onRejection, label);
    },

    /**
      @public
       Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thennable,
      but not the Transition itself.
       @method finally
      @param {Function} callback
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
     */
    "finally": function (callback, label) {
      return this.promise["finally"](callback, label);
    },

    /**
      @public
       Aborts the Transition. Note you can also implicitly abort a transition
      by initiating another transition while a previous one is underway.
     */
    abort: function () {
      if (this.isAborted) {
        return this;
      }
      (0, _utils.log)(this.router, this.sequence, this.targetName + ': transition was aborted');
      this.intent.preTransitionState = this.router.state;
      this.isAborted = true;
      this.isActive = false;
      this.router.activeTransition = null;
      return this;
    },

    /**
      @public
       Retries a previously-aborted transition (making sure to abort the
      transition if it's still active). Returns a new transition that
      represents the new attempt to transition.
     */
    retry: function () {
      // TODO: add tests for merged state retry()s
      this.abort();
      return this.router.transitionByIntent(this.intent, false);
    },

    /**
      @public
       Sets the URL-changing method to be employed at the end of a
      successful transition. By default, a new Transition will just
      use `updateURL`, but passing 'replace' to this method will
      cause the URL to update using 'replaceWith' instead. Omitting
      a parameter will disable the URL change, allowing for transitions
      that don't update the URL at completion (this is also used for
      handleURL, since the URL has already changed before the
      transition took place).
       @param {String} method the type of URL-changing method to use
        at the end of a transition. Accepted values are 'replace',
        falsy values, or any other non-falsy value (which is
        interpreted as an updateURL transition).
       @return {Transition} this transition
     */
    method: function (method) {
      this.urlMethod = method;
      return this;
    },

    /**
      @public
       Fires an event on the current list of resolved/resolving
      handlers within this transition. Useful for firing events
      on route hierarchies that haven't fully been entered yet.
       Note: This method is also aliased as `send`
       @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
      @param {String} name the name of the event to fire
     */
    trigger: function (ignoreFailure) {
      var args = _utils.slice.call(arguments);
      if (typeof ignoreFailure === 'boolean') {
        args.shift();
      } else {
        // Throw errors on unhandled trigger events by default
        ignoreFailure = false;
      }
      (0, _utils.trigger)(this.router, this.state.handlerInfos.slice(0, this.resolveIndex + 1), ignoreFailure, args);
    },

    /**
      @public
       Transitions are aborted and their promises rejected
      when redirects occur; this method returns a promise
      that will follow any redirects that occur and fulfill
      with the value fulfilled by any redirecting transitions
      that occur.
       @return {Promise} a promise that fulfills with the same
        value that the final redirecting transition fulfills with
     */
    followRedirects: function () {
      var router = this.router;
      return this.promise['catch'](function (reason) {
        if (router.activeTransition) {
          return router.activeTransition.followRedirects();
        }
        return _rsvpPromise["default"].reject(reason);
      });
    },

    toString: function () {
      return 'Transition (sequence ' + this.sequence + ')';
    },

    /**
      @private
     */
    log: function (message) {
      (0, _utils.log)(this.router, this.sequence, message);
    }
  };

  // Alias 'trigger' as 'send'
  Transition.prototype.send = Transition.prototype.trigger;

  /**
    @private
  
    Logs and returns a TransitionAborted error.
   */
  function logAbort(transition) {
    (0, _utils.log)(transition.router, transition.sequence, 'detected abort.');
    return new TransitionAborted();
  }

  function TransitionAborted(message) {
    this.message = message || 'TransitionAborted';
    this.name = 'TransitionAborted';
  }

  exports.Transition = Transition;
  exports.logAbort = logAbort;
  exports.TransitionAborted = TransitionAborted;
});
enifed("router/unrecognized-url-error", ["exports", "./utils"], function (exports, _utils) {

  /**
    Promise reject reasons passed to promise rejection
    handlers for failed transitions.
   */
  function UnrecognizedURLError(message) {
    this.message = message || "UnrecognizedURLError";
    this.name = "UnrecognizedURLError";
    Error.call(this);
  }

  UnrecognizedURLError.prototype = (0, _utils.oCreate)(Error.prototype);

  exports["default"] = UnrecognizedURLError;
});
enifed('router/utils', ['exports'], function (exports) {
  exports.extractQueryParams = extractQueryParams;
  exports.log = log;
  exports.bind = bind;
  exports.forEach = forEach;
  exports.trigger = trigger;
  exports.getChangelist = getChangelist;
  exports.promiseLabel = promiseLabel;
  exports.subclass = subclass;
  var slice = Array.prototype.slice;

  var _isArray;
  if (!Array.isArray) {
    _isArray = function (x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  } else {
    _isArray = Array.isArray;
  }

  var isArray = _isArray;

  exports.isArray = isArray;
  function merge(hash, other) {
    for (var prop in other) {
      if (other.hasOwnProperty(prop)) {
        hash[prop] = other[prop];
      }
    }
  }

  var oCreate = Object.create || function (proto) {
    function F() {}
    F.prototype = proto;
    return new F();
  };

  exports.oCreate = oCreate;
  /**
    @private
  
    Extracts query params from the end of an array
  **/

  function extractQueryParams(array) {
    var len = array && array.length,
        head,
        queryParams;

    if (len && len > 0 && array[len - 1] && array[len - 1].hasOwnProperty('queryParams')) {
      queryParams = array[len - 1].queryParams;
      head = slice.call(array, 0, len - 1);
      return [head, queryParams];
    } else {
      return [array, null];
    }
  }

  /**
    @private
  
    Coerces query param properties and array elements into strings.
  **/
  function coerceQueryParamsToString(queryParams) {
    for (var key in queryParams) {
      if (typeof queryParams[key] === 'number') {
        queryParams[key] = '' + queryParams[key];
      } else if (isArray(queryParams[key])) {
        for (var i = 0, l = queryParams[key].length; i < l; i++) {
          queryParams[key][i] = '' + queryParams[key][i];
        }
      }
    }
  }
  /**
    @private
   */

  function log(router, sequence, msg) {
    if (!router.log) {
      return;
    }

    if (arguments.length === 3) {
      router.log('Transition #' + sequence + ': ' + msg);
    } else {
      msg = sequence;
      router.log(msg);
    }
  }

  function bind(context, fn) {
    var boundArgs = arguments;
    return function (value) {
      var args = slice.call(boundArgs, 2);
      args.push(value);
      return fn.apply(context, args);
    };
  }

  function isParam(object) {
    return typeof object === 'string' || object instanceof String || typeof object === 'number' || object instanceof Number;
  }

  function forEach(array, callback) {
    for (var i = 0, l = array.length; i < l && false !== callback(array[i]); i++) {}
  }

  function trigger(router, handlerInfos, ignoreFailure, args) {
    if (router.triggerEvent) {
      router.triggerEvent(handlerInfos, ignoreFailure, args);
      return;
    }

    var name = args.shift();

    if (!handlerInfos) {
      if (ignoreFailure) {
        return;
      }
      throw new Error('Could not trigger event \'' + name + '\'. There are no active handlers');
    }

    var eventWasHandled = false;

    for (var i = handlerInfos.length - 1; i >= 0; i--) {
      var handlerInfo = handlerInfos[i],
          handler = handlerInfo.handler;

      if (handler.events && handler.events[name]) {
        if (handler.events[name].apply(handler, args) === true) {
          eventWasHandled = true;
        } else {
          return;
        }
      }
    }

    if (!eventWasHandled && !ignoreFailure) {
      throw new Error('Nothing handled the event \'' + name + '\'.');
    }
  }

  function getChangelist(oldObject, newObject) {
    var key;
    var results = {
      all: {},
      changed: {},
      removed: {}
    };

    merge(results.all, newObject);

    var didChange = false;
    coerceQueryParamsToString(oldObject);
    coerceQueryParamsToString(newObject);

    // Calculate removals
    for (key in oldObject) {
      if (oldObject.hasOwnProperty(key)) {
        if (!newObject.hasOwnProperty(key)) {
          didChange = true;
          results.removed[key] = oldObject[key];
        }
      }
    }

    // Calculate changes
    for (key in newObject) {
      if (newObject.hasOwnProperty(key)) {
        if (isArray(oldObject[key]) && isArray(newObject[key])) {
          if (oldObject[key].length !== newObject[key].length) {
            results.changed[key] = newObject[key];
            didChange = true;
          } else {
            for (var i = 0, l = oldObject[key].length; i < l; i++) {
              if (oldObject[key][i] !== newObject[key][i]) {
                results.changed[key] = newObject[key];
                didChange = true;
              }
            }
          }
        } else {
          if (oldObject[key] !== newObject[key]) {
            results.changed[key] = newObject[key];
            didChange = true;
          }
        }
      }
    }

    return didChange && results;
  }

  function promiseLabel(label) {
    return 'Router: ' + label;
  }

  function subclass(parentConstructor, proto) {
    function C(props) {
      parentConstructor.call(this, props || {});
    }
    C.prototype = oCreate(parentConstructor.prototype);
    merge(C.prototype, proto);
    return C;
  }

  function resolveHook(obj, hookName) {
    if (!obj) {
      return;
    }
    var underscored = '_' + hookName;
    return obj[underscored] && underscored || obj[hookName] && hookName;
  }

  function callHook(obj, _hookName, arg1, arg2) {
    var hookName = resolveHook(obj, _hookName);
    return hookName && obj[hookName].call(obj, arg1, arg2);
  }

  function applyHook(obj, _hookName, args) {
    var hookName = resolveHook(obj, _hookName);
    if (hookName) {
      if (args.length === 0) {
        return obj[hookName].call(obj);
      } else if (args.length === 1) {
        return obj[hookName].call(obj, args[0]);
      } else if (args.length === 2) {
        return obj[hookName].call(obj, args[0], args[1]);
      } else {
        return obj[hookName].apply(obj, args);
      }
    }
  }

  exports.merge = merge;
  exports.slice = slice;
  exports.isParam = isParam;
  exports.coerceQueryParamsToString = coerceQueryParamsToString;
  exports.callHook = callHook;
  exports.resolveHook = resolveHook;
  exports.applyHook = applyHook;
});
enifed('rsvp', ['exports', './rsvp/promise', './rsvp/events', './rsvp/node', './rsvp/all', './rsvp/all-settled', './rsvp/race', './rsvp/hash', './rsvp/hash-settled', './rsvp/rethrow', './rsvp/defer', './rsvp/config', './rsvp/map', './rsvp/resolve', './rsvp/reject', './rsvp/filter', './rsvp/asap'], function (exports, _rsvpPromise, _rsvpEvents, _rsvpNode, _rsvpAll, _rsvpAllSettled, _rsvpRace, _rsvpHash, _rsvpHashSettled, _rsvpRethrow, _rsvpDefer, _rsvpConfig, _rsvpMap, _rsvpResolve, _rsvpReject, _rsvpFilter, _rsvpAsap) {

  _rsvpConfig.config.async = _rsvpAsap["default"]; // default async is asap;
  var cast = _rsvpResolve["default"];
  function async(callback, arg) {
    _rsvpConfig.config.async(callback, arg);
  }

  function on() {
    _rsvpConfig.config.on.apply(_rsvpConfig.config, arguments);
  }

  function off() {
    _rsvpConfig.config.off.apply(_rsvpConfig.config, arguments);
  }

  // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`
  if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {
    var callbacks = window['__PROMISE_INSTRUMENTATION__'];
    (0, _rsvpConfig.configure)('instrument', true);
    for (var eventName in callbacks) {
      if (callbacks.hasOwnProperty(eventName)) {
        on(eventName, callbacks[eventName]);
      }
    }
  }

  exports.cast = cast;
  exports.Promise = _rsvpPromise["default"];
  exports.EventTarget = _rsvpEvents["default"];
  exports.all = _rsvpAll["default"];
  exports.allSettled = _rsvpAllSettled["default"];
  exports.race = _rsvpRace["default"];
  exports.hash = _rsvpHash["default"];
  exports.hashSettled = _rsvpHashSettled["default"];
  exports.rethrow = _rsvpRethrow["default"];
  exports.defer = _rsvpDefer["default"];
  exports.denodeify = _rsvpNode["default"];
  exports.configure = _rsvpConfig.configure;
  exports.on = on;
  exports.off = off;
  exports.resolve = _rsvpResolve["default"];
  exports.reject = _rsvpReject["default"];
  exports.async = async;
  exports.map = _rsvpMap["default"];
  exports.filter = _rsvpFilter["default"];
});
enifed('rsvp.umd', ['exports', './rsvp'], function (exports, _rsvp) {

  var RSVP = {
    'race': _rsvp.race,
    'Promise': _rsvp.Promise,
    'allSettled': _rsvp.allSettled,
    'hash': _rsvp.hash,
    'hashSettled': _rsvp.hashSettled,
    'denodeify': _rsvp.denodeify,
    'on': _rsvp.on,
    'off': _rsvp.off,
    'map': _rsvp.map,
    'filter': _rsvp.filter,
    'resolve': _rsvp.resolve,
    'reject': _rsvp.reject,
    'all': _rsvp.all,
    'rethrow': _rsvp.rethrow,
    'defer': _rsvp.defer,
    'EventTarget': _rsvp.EventTarget,
    'configure': _rsvp.configure,
    'async': _rsvp.async
  };

  /* global define:true module:true window: true */
  if (typeof enifed === 'function' && enifed['amd']) {
    enifed(function () {
      return RSVP;
    });
  } else if (typeof module !== 'undefined' && module['exports']) {
    module['exports'] = RSVP;
  } else if (typeof this !== 'undefined') {
    this['RSVP'] = RSVP;
  }
});
enifed('rsvp/-internal', ['exports', './utils', './instrument', './config'], function (exports, _utils, _instrument, _config) {

  function withOwnPromise() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function noop() {}

  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;

  var GET_THEN_ERROR = new ErrorObject();

  function getThen(promise) {
    try {
      return promise.then;
    } catch (error) {
      GET_THEN_ERROR.error = error;
      return GET_THEN_ERROR;
    }
  }

  function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
    try {
      then.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }

  function handleForeignThenable(promise, thenable, then) {
    _config.config.async(function (promise) {
      var sealed = false;
      var error = tryThen(then, thenable, function (value) {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable !== value) {
          resolve(promise, value);
        } else {
          fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }
        sealed = true;

        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }

  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (promise._state === REJECTED) {
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, function (value) {
        if (thenable !== value) {
          resolve(promise, value);
        } else {
          fulfill(promise, value);
        }
      }, function (reason) {
        reject(promise, reason);
      });
    }
  }

  function handleMaybeThenable(promise, maybeThenable) {
    if (maybeThenable.constructor === promise.constructor) {
      handleOwnThenable(promise, maybeThenable);
    } else {
      var then = getThen(maybeThenable);

      if (then === GET_THEN_ERROR) {
        reject(promise, GET_THEN_ERROR.error);
      } else if (then === undefined) {
        fulfill(promise, maybeThenable);
      } else if ((0, _utils.isFunction)(then)) {
        handleForeignThenable(promise, maybeThenable, then);
      } else {
        fulfill(promise, maybeThenable);
      }
    }
  }

  function resolve(promise, value) {
    if (promise === value) {
      fulfill(promise, value);
    } else if ((0, _utils.objectOrFunction)(value)) {
      handleMaybeThenable(promise, value);
    } else {
      fulfill(promise, value);
    }
  }

  function publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }

    publish(promise);
  }

  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._result = value;
    promise._state = FULFILLED;

    if (promise._subscribers.length === 0) {
      if (_config.config.instrument) {
        (0, _instrument["default"])('fulfilled', promise);
      }
    } else {
      _config.config.async(publish, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._state = REJECTED;
    promise._result = reason;

    _config.config.async(publishRejection, promise);
  }

  function subscribe(parent, child, onFulfillment, onRejection) {
    var subscribers = parent._subscribers;
    var length = subscribers.length;

    parent._onerror = null;

    subscribers[length] = child;
    subscribers[length + FULFILLED] = onFulfillment;
    subscribers[length + REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      _config.config.async(publish, parent);
    }
  }

  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (_config.config.instrument) {
      (0, _instrument["default"])(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);
    }

    if (subscribers.length === 0) {
      return;
    }

    var child,
        callback,
        detail = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }

    promise._subscribers.length = 0;
  }

  function ErrorObject() {
    this.error = null;
  }

  var TRY_CATCH_ERROR = new ErrorObject();

  function tryCatch(callback, detail) {
    try {
      return callback(detail);
    } catch (e) {
      TRY_CATCH_ERROR.error = e;
      return TRY_CATCH_ERROR;
    }
  }

  function invokeCallback(settled, promise, callback, detail) {
    var hasCallback = (0, _utils.isFunction)(callback),
        value,
        error,
        succeeded,
        failed;

    if (hasCallback) {
      value = tryCatch(callback, detail);

      if (value === TRY_CATCH_ERROR) {
        failed = true;
        error = value.error;
        value = null;
      } else {
        succeeded = true;
      }

      if (promise === value) {
        reject(promise, withOwnPromise());
        return;
      }
    } else {
      value = detail;
      succeeded = true;
    }

    if (promise._state !== PENDING) {} else if (hasCallback && succeeded) {
      resolve(promise, value);
    } else if (failed) {
      reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      reject(promise, value);
    }
  }

  function initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        resolve(promise, value);
      }, function rejectPromise(reason) {
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }

  exports.noop = noop;
  exports.resolve = resolve;
  exports.reject = reject;
  exports.fulfill = fulfill;
  exports.subscribe = subscribe;
  exports.publish = publish;
  exports.publishRejection = publishRejection;
  exports.initializePromise = initializePromise;
  exports.invokeCallback = invokeCallback;
  exports.FULFILLED = FULFILLED;
  exports.REJECTED = REJECTED;
  exports.PENDING = PENDING;
});

// noop
enifed('rsvp/all-settled', ['exports', './enumerator', './promise', './utils'], function (exports, _enumerator, _promise, _utils) {
  exports["default"] = allSettled;

  function AllSettled(Constructor, entries, label) {
    this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);
  }

  AllSettled.prototype = (0, _utils.o_create)(_enumerator["default"].prototype);
  AllSettled.prototype._superConstructor = _enumerator["default"];
  AllSettled.prototype._makeResult = _enumerator.makeSettledResult;
  AllSettled.prototype._validationError = function () {
    return new Error('allSettled must be called with an array');
  };

  /**
    `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
    a fail-fast method, it waits until all the promises have returned and
    shows you all the results. This is useful if you want to handle multiple
    promises' failure states together as a set.
  
    Returns a promise that is fulfilled when all the given promises have been
    settled. The return promise is fulfilled with an array of the states of
    the promises passed into the `promises` array argument.
  
    Each state object will either indicate fulfillment or rejection, and
    provide the corresponding value or reason. The states will take one of
    the following formats:
  
    ```javascript
    { state: 'fulfilled', value: value }
      or
    { state: 'rejected', reason: reason }
    ```
  
    Example:
  
    ```javascript
    var promise1 = RSVP.Promise.resolve(1);
    var promise2 = RSVP.Promise.reject(new Error('2'));
    var promise3 = RSVP.Promise.reject(new Error('3'));
    var promises = [ promise1, promise2, promise3 ];
  
    RSVP.allSettled(promises).then(function(array){
      // array == [
      //   { state: 'fulfilled', value: 1 },
      //   { state: 'rejected', reason: Error },
      //   { state: 'rejected', reason: Error }
      // ]
      // Note that for the second item, reason.message will be '2', and for the
      // third item, reason.message will be '3'.
    }, function(error) {
      // Not run. (This block would only be called if allSettled had failed,
      // for instance if passed an incorrect argument type.)
    });
    ```
  
    @method allSettled
    @static
    @for RSVP
    @param {Array} promises
    @param {String} label - optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled with an array of the settled
    states of the constituent promises.
  */

  function allSettled(entries, label) {
    return new AllSettled(_promise["default"], entries, label).promise;
  }
});
enifed("rsvp/all", ["exports", "./promise"], function (exports, _promise) {
  exports["default"] = all;

  /**
    This is a convenient alias for `RSVP.Promise.all`.
  
    @method all
    @static
    @for RSVP
    @param {Array} array Array of promises.
    @param {String} label An optional label. This is useful
    for tooling.
  */

  function all(array, label) {
    return _promise["default"].all(array, label);
  }
});
enifed('rsvp/asap', ['exports'], function (exports) {
  exports["default"] = asap;
  var len = 0;

  function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;
    if (len === 2) {
      // If len is 1, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      scheduleFlush();
    }
  }

  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;

  // test for web worker but not in IE10
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function useNextTick() {
    return function () {
      process.nextTick(flush);
    };
  }

  // vertx
  function useVertxTimer() {
    return function () {
      vertxNext(flush);
    };
  }

  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, { characterData: true });

    return function () {
      node.data = iterations = ++iterations % 2;
    };
  }

  // web worker
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function () {
      channel.port2.postMessage(0);
    };
  }

  function useSetTimeout() {
    return function () {
      setTimeout(flush, 1);
    };
  }

  var queue = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];

      callback(arg);

      queue[i] = undefined;
      queue[i + 1] = undefined;
    }

    len = 0;
  }

  function attemptVertex() {
    try {
      var vertx = eriuqer('vertx');
      var vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }

  var scheduleFlush;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]') {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && typeof eriuqer === 'function') {
    scheduleFlush = attemptVertex();
  } else {
    scheduleFlush = useSetTimeout();
  }
});
enifed('rsvp/config', ['exports', './events'], function (exports, _events) {

  var config = {
    instrument: false
  };

  _events["default"].mixin(config);

  function configure(name, value) {
    if (name === 'onerror') {
      // handle for legacy users that expect the actual
      // error to be passed to their function added via
      // `RSVP.configure('onerror', someFunctionHere);`
      config.on('error', value);
      return;
    }

    if (arguments.length === 2) {
      config[name] = value;
    } else {
      return config[name];
    }
  }

  exports.config = config;
  exports.configure = configure;
});
enifed('rsvp/defer', ['exports', './promise'], function (exports, _promise) {
  exports["default"] = defer;

  /**
    `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.
    `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s
    interface. New code should use the `RSVP.Promise` constructor instead.
  
    The object returned from `RSVP.defer` is a plain object with three properties:
  
    * promise - an `RSVP.Promise`.
    * reject - a function that causes the `promise` property on this object to
      become rejected
    * resolve - a function that causes the `promise` property on this object to
      become fulfilled.
  
    Example:
  
     ```javascript
     var deferred = RSVP.defer();
  
     deferred.resolve("Success!");
  
     defered.promise.then(function(value){
       // value here is "Success!"
     });
     ```
  
    @method defer
    @static
    @for RSVP
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Object}
   */

  function defer(label) {
    var deferred = {};

    deferred['promise'] = new _promise["default"](function (resolve, reject) {
      deferred['resolve'] = resolve;
      deferred['reject'] = reject;
    }, label);

    return deferred;
  }
});
enifed('rsvp/enumerator', ['exports', './utils', './-internal'], function (exports, _utils, _internal) {
  exports.makeSettledResult = makeSettledResult;

  function makeSettledResult(state, position, value) {
    if (state === _internal.FULFILLED) {
      return {
        state: 'fulfilled',
        value: value
      };
    } else {
      return {
        state: 'rejected',
        reason: value
      };
    }
  }

  function Enumerator(Constructor, input, abortOnReject, label) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(_internal.noop, label);
    this._abortOnReject = abortOnReject;

    if (this._validateInput(input)) {
      this._input = input;
      this.length = input.length;
      this._remaining = input.length;

      this._init();

      if (this.length === 0) {
        (0, _internal.fulfill)(this.promise, this._result);
      } else {
        this.length = this.length || 0;
        this._enumerate();
        if (this._remaining === 0) {
          (0, _internal.fulfill)(this.promise, this._result);
        }
      }
    } else {
      (0, _internal.reject)(this.promise, this._validationError());
    }
  }

  Enumerator.prototype._validateInput = function (input) {
    return (0, _utils.isArray)(input);
  };

  Enumerator.prototype._validationError = function () {
    return new Error('Array Methods must be provided an Array');
  };

  Enumerator.prototype._init = function () {
    this._result = new Array(this.length);
  };

  exports["default"] = Enumerator;

  Enumerator.prototype._enumerate = function () {
    var length = this.length;
    var promise = this.promise;
    var input = this._input;

    for (var i = 0; promise._state === _internal.PENDING && i < length; i++) {
      this._eachEntry(input[i], i);
    }
  };

  Enumerator.prototype._eachEntry = function (entry, i) {
    var c = this._instanceConstructor;
    if ((0, _utils.isMaybeThenable)(entry)) {
      if (entry.constructor === c && entry._state !== _internal.PENDING) {
        entry._onerror = null;
        this._settledAt(entry._state, i, entry._result);
      } else {
        this._willSettleAt(c.resolve(entry), i);
      }
    } else {
      this._remaining--;
      this._result[i] = this._makeResult(_internal.FULFILLED, i, entry);
    }
  };

  Enumerator.prototype._settledAt = function (state, i, value) {
    var promise = this.promise;

    if (promise._state === _internal.PENDING) {
      this._remaining--;

      if (this._abortOnReject && state === _internal.REJECTED) {
        (0, _internal.reject)(promise, value);
      } else {
        this._result[i] = this._makeResult(state, i, value);
      }
    }

    if (this._remaining === 0) {
      (0, _internal.fulfill)(promise, this._result);
    }
  };

  Enumerator.prototype._makeResult = function (state, i, value) {
    return value;
  };

  Enumerator.prototype._willSettleAt = function (promise, i) {
    var enumerator = this;

    (0, _internal.subscribe)(promise, undefined, function (value) {
      enumerator._settledAt(_internal.FULFILLED, i, value);
    }, function (reason) {
      enumerator._settledAt(_internal.REJECTED, i, reason);
    });
  };
});
enifed("rsvp/events", ["exports"], function (exports) {
  function indexOf(callbacks, callback) {
    for (var i = 0, l = callbacks.length; i < l; i++) {
      if (callbacks[i] === callback) {
        return i;
      }
    }

    return -1;
  }

  function callbacksFor(object) {
    var callbacks = object._promiseCallbacks;

    if (!callbacks) {
      callbacks = object._promiseCallbacks = {};
    }

    return callbacks;
  }

  /**
    @class RSVP.EventTarget
  */
  exports["default"] = {

    /**
      `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For
      Example:
       ```javascript
      var object = {};
       RSVP.EventTarget.mixin(object);
       object.on('finished', function(event) {
        // handle event
      });
       object.trigger('finished', { detail: value });
      ```
       `EventTarget.mixin` also works with prototypes:
       ```javascript
      var Person = function() {};
      RSVP.EventTarget.mixin(Person.prototype);
       var yehuda = new Person();
      var tom = new Person();
       yehuda.on('poke', function(event) {
        console.log('Yehuda says OW');
      });
       tom.on('poke', function(event) {
        console.log('Tom says OW');
      });
       yehuda.trigger('poke');
      tom.trigger('poke');
      ```
       @method mixin
      @for RSVP.EventTarget
      @private
      @param {Object} object object to extend with EventTarget methods
    */
    mixin: function (object) {
      object.on = this.on;
      object.off = this.off;
      object.trigger = this.trigger;
      object._promiseCallbacks = undefined;
      return object;
    },

    /**
      Registers a callback to be executed when `eventName` is triggered
       ```javascript
      object.on('event', function(eventInfo){
        // handle the event
      });
       object.trigger('event');
      ```
       @method on
      @for RSVP.EventTarget
      @private
      @param {String} eventName name of the event to listen for
      @param {Function} callback function to be called when the event is triggered.
    */
    on: function (eventName, callback) {
      var allCallbacks = callbacksFor(this),
          callbacks;

      callbacks = allCallbacks[eventName];

      if (!callbacks) {
        callbacks = allCallbacks[eventName] = [];
      }

      if (indexOf(callbacks, callback) === -1) {
        callbacks.push(callback);
      }
    },

    /**
      You can use `off` to stop firing a particular callback for an event:
       ```javascript
      function doStuff() { // do stuff! }
      object.on('stuff', doStuff);
       object.trigger('stuff'); // doStuff will be called
       // Unregister ONLY the doStuff callback
      object.off('stuff', doStuff);
      object.trigger('stuff'); // doStuff will NOT be called
      ```
       If you don't pass a `callback` argument to `off`, ALL callbacks for the
      event will not be executed when the event fires. For example:
       ```javascript
      var callback1 = function(){};
      var callback2 = function(){};
       object.on('stuff', callback1);
      object.on('stuff', callback2);
       object.trigger('stuff'); // callback1 and callback2 will be executed.
       object.off('stuff');
      object.trigger('stuff'); // callback1 and callback2 will not be executed!
      ```
       @method off
      @for RSVP.EventTarget
      @private
      @param {String} eventName event to stop listening to
      @param {Function} callback optional argument. If given, only the function
      given will be removed from the event's callback queue. If no `callback`
      argument is given, all callbacks will be removed from the event's callback
      queue.
    */
    off: function (eventName, callback) {
      var allCallbacks = callbacksFor(this),
          callbacks,
          index;

      if (!callback) {
        allCallbacks[eventName] = [];
        return;
      }

      callbacks = allCallbacks[eventName];

      index = indexOf(callbacks, callback);

      if (index !== -1) {
        callbacks.splice(index, 1);
      }
    },

    /**
      Use `trigger` to fire custom events. For example:
       ```javascript
      object.on('foo', function(){
        console.log('foo event happened!');
      });
      object.trigger('foo');
      // 'foo event happened!' logged to the console
      ```
       You can also pass a value as a second argument to `trigger` that will be
      passed as an argument to all event listeners for the event:
       ```javascript
      object.on('foo', function(value){
        console.log(value.name);
      });
       object.trigger('foo', { name: 'bar' });
      // 'bar' logged to the console
      ```
       @method trigger
      @for RSVP.EventTarget
      @private
      @param {String} eventName name of the event to be triggered
      @param {Any} options optional value to be passed to any event handlers for
      the given `eventName`
    */
    trigger: function (eventName, options) {
      var allCallbacks = callbacksFor(this),
          callbacks,
          callback;

      if (callbacks = allCallbacks[eventName]) {
        // Don't cache the callbacks.length since it may grow
        for (var i = 0; i < callbacks.length; i++) {
          callback = callbacks[i];

          callback(options);
        }
      }
    }
  };
});
enifed('rsvp/filter', ['exports', './promise', './utils'], function (exports, _promise, _utils) {
  exports["default"] = filter;

  /**
   `RSVP.filter` is similar to JavaScript's native `filter` method, except that it
    waits for all promises to become fulfilled before running the `filterFn` on
    each item in given to `promises`. `RSVP.filter` returns a promise that will
    become fulfilled with the result of running `filterFn` on the values the
    promises become fulfilled with.
  
    For example:
  
    ```javascript
  
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.resolve(2);
    var promise3 = RSVP.resolve(3);
  
    var promises = [promise1, promise2, promise3];
  
    var filterFn = function(item){
      return item > 1;
    };
  
    RSVP.filter(promises, filterFn).then(function(result){
      // result is [ 2, 3 ]
    });
    ```
  
    If any of the `promises` given to `RSVP.filter` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.reject(new Error('2'));
    var promise3 = RSVP.reject(new Error('3'));
    var promises = [ promise1, promise2, promise3 ];
  
    var filterFn = function(item){
      return item > 1;
    };
  
    RSVP.filter(promises, filterFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `RSVP.filter` will also wait for any promises returned from `filterFn`.
    For instance, you may want to fetch a list of users then return a subset
    of those users based on some asynchronous operation:
  
    ```javascript
  
    var alice = { name: 'alice' };
    var bob   = { name: 'bob' };
    var users = [ alice, bob ];
  
    var promises = users.map(function(user){
      return RSVP.resolve(user);
    });
  
    var filterFn = function(user){
      // Here, Alice has permissions to create a blog post, but Bob does not.
      return getPrivilegesForUser(user).then(function(privs){
        return privs.can_create_blog_post === true;
      });
    };
    RSVP.filter(promises, filterFn).then(function(users){
      // true, because the server told us only Alice can create a blog post.
      users.length === 1;
      // false, because Alice is the only user present in `users`
      users[0] === bob;
    });
    ```
  
    @method filter
    @static
    @for RSVP
    @param {Array} promises
    @param {Function} filterFn - function to be called on each resolved value to
    filter the final results.
    @param {String} label optional string describing the promise. Useful for
    tooling.
    @return {Promise}
  */

  function filter(promises, filterFn, label) {
    return _promise["default"].all(promises, label).then(function (values) {
      if (!(0, _utils.isFunction)(filterFn)) {
        throw new TypeError('You must pass a function as filter\'s second argument.');
      }

      var length = values.length;
      var filtered = new Array(length);

      for (var i = 0; i < length; i++) {
        filtered[i] = filterFn(values[i]);
      }

      return _promise["default"].all(filtered, label).then(function (filtered) {
        var results = new Array(length);
        var newLength = 0;

        for (var i = 0; i < length; i++) {
          if (filtered[i]) {
            results[newLength] = values[i];
            newLength++;
          }
        }

        results.length = newLength;

        return results;
      });
    });
  }
});
enifed('rsvp/hash-settled', ['exports', './promise', './enumerator', './promise-hash', './utils'], function (exports, _promise, _enumerator, _promiseHash, _utils) {
  exports["default"] = hashSettled;

  function HashSettled(Constructor, object, label) {
    this._superConstructor(Constructor, object, false, label);
  }

  HashSettled.prototype = (0, _utils.o_create)(_promiseHash["default"].prototype);
  HashSettled.prototype._superConstructor = _enumerator["default"];
  HashSettled.prototype._makeResult = _enumerator.makeSettledResult;

  HashSettled.prototype._validationError = function () {
    return new Error('hashSettled must be called with an object');
  };

  /**
    `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object
    instead of an array for its `promises` argument.
  
    Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,
    but like `RSVP.allSettled`, `hashSettled` waits until all the
    constituent promises have returned and then shows you all the results
    with their states and values/reasons. This is useful if you want to
    handle multiple promises' failure states together as a set.
  
    Returns a promise that is fulfilled when all the given promises have been
    settled, or rejected if the passed parameters are invalid.
  
    The returned promise is fulfilled with a hash that has the same key names as
    the `promises` object argument. If any of the values in the object are not
    promises, they will be copied over to the fulfilled object and marked with state
    'fulfilled'.
  
    Example:
  
    ```javascript
    var promises = {
      myPromise: RSVP.Promise.resolve(1),
      yourPromise: RSVP.Promise.resolve(2),
      theirPromise: RSVP.Promise.resolve(3),
      notAPromise: 4
    };
  
    RSVP.hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: { state: 'fulfilled', value: 1 },
      //   yourPromise: { state: 'fulfilled', value: 2 },
      //   theirPromise: { state: 'fulfilled', value: 3 },
      //   notAPromise: { state: 'fulfilled', value: 4 }
      // }
    });
    ```
  
    If any of the `promises` given to `RSVP.hash` are rejected, the state will
    be set to 'rejected' and the reason for rejection provided.
  
    Example:
  
    ```javascript
    var promises = {
      myPromise: RSVP.Promise.resolve(1),
      rejectedPromise: RSVP.Promise.reject(new Error('rejection')),
      anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),
    };
  
    RSVP.hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise:              { state: 'fulfilled', value: 1 },
      //   rejectedPromise:        { state: 'rejected', reason: Error },
      //   anotherRejectedPromise: { state: 'rejected', reason: Error },
      // }
      // Note that for rejectedPromise, reason.message == 'rejection',
      // and for anotherRejectedPromise, reason.message == 'more rejection'.
    });
    ```
  
    An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that
    are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    function MyConstructor(){
      this.example = RSVP.Promise.resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: RSVP.Promise.resolve('Proto Property')
    };
  
    var myObject = new MyConstructor();
  
    RSVP.hashSettled(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: { state: 'fulfilled', value: 'Example' }
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hashSettled
    @for RSVP
    @param {Object} promises
    @param {String} label optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when when all properties of `promises`
    have been settled.
    @static
  */

  function hashSettled(object, label) {
    return new HashSettled(_promise["default"], object, label).promise;
  }
});
enifed('rsvp/hash', ['exports', './promise', './promise-hash'], function (exports, _promise, _promiseHash) {
  exports["default"] = hash;

  /**
    `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array
    for its `promises` argument.
  
    Returns a promise that is fulfilled when all the given promises have been
    fulfilled, or rejected if any of them become rejected. The returned promise
    is fulfilled with a hash that has the same key names as the `promises` object
    argument. If any of the values in the object are not promises, they will
    simply be copied over to the fulfilled object.
  
    Example:
  
    ```javascript
    var promises = {
      myPromise: RSVP.resolve(1),
      yourPromise: RSVP.resolve(2),
      theirPromise: RSVP.resolve(3),
      notAPromise: 4
    };
  
    RSVP.hash(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: 1,
      //   yourPromise: 2,
      //   theirPromise: 3,
      //   notAPromise: 4
      // }
    });
    ````
  
    If any of the `promises` given to `RSVP.hash` are rejected, the first promise
    that is rejected will be given as the reason to the rejection handler.
  
    Example:
  
    ```javascript
    var promises = {
      myPromise: RSVP.resolve(1),
      rejectedPromise: RSVP.reject(new Error('rejectedPromise')),
      anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),
    };
  
    RSVP.hash(promises).then(function(hash){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === 'rejectedPromise'
    });
    ```
  
    An important note: `RSVP.hash` is intended for plain JavaScript objects that
    are just a set of keys and values. `RSVP.hash` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    function MyConstructor(){
      this.example = RSVP.resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: RSVP.resolve('Proto Property')
    };
  
    var myObject = new MyConstructor();
  
    RSVP.hash(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: 'Example'
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hash
    @static
    @for RSVP
    @param {Object} promises
    @param {String} label optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all properties of `promises`
    have been fulfilled, or rejected if any of them become rejected.
  */

  function hash(object, label) {
    return new _promiseHash["default"](_promise["default"], object, label).promise;
  }
});
enifed('rsvp/instrument', ['exports', './config', './utils'], function (exports, _config, _utils) {
  exports["default"] = instrument;

  var queue = [];

  function scheduleFlush() {
    setTimeout(function () {
      var entry;
      for (var i = 0; i < queue.length; i++) {
        entry = queue[i];

        var payload = entry.payload;

        payload.guid = payload.key + payload.id;
        payload.childGuid = payload.key + payload.childId;
        if (payload.error) {
          payload.stack = payload.error.stack;
        }

        _config.config.trigger(entry.name, entry.payload);
      }
      queue.length = 0;
    }, 50);
  }

  function instrument(eventName, promise, child) {
    if (1 === queue.push({
      name: eventName,
      payload: {
        key: promise._guidKey,
        id: promise._id,
        eventName: eventName,
        detail: promise._result,
        childId: child && child._id,
        label: promise._label,
        timeStamp: (0, _utils.now)(),
        error: _config.config['instrument-with-stack'] ? new Error(promise._label) : null
      } })) {
      scheduleFlush();
    }
  }
});
enifed('rsvp/map', ['exports', './promise', './utils'], function (exports, _promise, _utils) {
  exports["default"] = map;

  /**
   `RSVP.map` is similar to JavaScript's native `map` method, except that it
    waits for all promises to become fulfilled before running the `mapFn` on
    each item in given to `promises`. `RSVP.map` returns a promise that will
    become fulfilled with the result of running `mapFn` on the values the promises
    become fulfilled with.
  
    For example:
  
    ```javascript
  
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.resolve(2);
    var promise3 = RSVP.resolve(3);
    var promises = [ promise1, promise2, promise3 ];
  
    var mapFn = function(item){
      return item + 1;
    };
  
    RSVP.map(promises, mapFn).then(function(result){
      // result is [ 2, 3, 4 ]
    });
    ```
  
    If any of the `promises` given to `RSVP.map` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.reject(new Error('2'));
    var promise3 = RSVP.reject(new Error('3'));
    var promises = [ promise1, promise2, promise3 ];
  
    var mapFn = function(item){
      return item + 1;
    };
  
    RSVP.map(promises, mapFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,
    say you want to get all comments from a set of blog posts, but you need
    the blog posts first because they contain a url to those comments.
  
    ```javscript
  
    var mapFn = function(blogPost){
      // getComments does some ajax and returns an RSVP.Promise that is fulfilled
      // with some comments data
      return getComments(blogPost.comments_url);
    };
  
    // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled
    // with some blog post data
    RSVP.map(getBlogPosts(), mapFn).then(function(comments){
      // comments is the result of asking the server for the comments
      // of all blog posts returned from getBlogPosts()
    });
    ```
  
    @method map
    @static
    @for RSVP
    @param {Array} promises
    @param {Function} mapFn function to be called on each fulfilled promise.
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled with the result of calling
    `mapFn` on each fulfilled promise or value when they become fulfilled.
     The promise will be rejected if any of the given `promises` become rejected.
    @static
  */

  function map(promises, mapFn, label) {
    return _promise["default"].all(promises, label).then(function (values) {
      if (!(0, _utils.isFunction)(mapFn)) {
        throw new TypeError('You must pass a function as map\'s second argument.');
      }

      var length = values.length;
      var results = new Array(length);

      for (var i = 0; i < length; i++) {
        results[i] = mapFn(values[i]);
      }

      return _promise["default"].all(results, label);
    });
  }
});
enifed('rsvp/node', ['exports', './promise', './-internal', './utils'], function (exports, _promise, _internal, _utils) {
  exports["default"] = denodeify;

  function Result() {
    this.value = undefined;
  }

  var ERROR = new Result();
  var GET_THEN_ERROR = new Result();

  function getThen(obj) {
    try {
      return obj.then;
    } catch (error) {
      ERROR.value = error;
      return ERROR;
    }
  }

  function tryApply(f, s, a) {
    try {
      f.apply(s, a);
    } catch (error) {
      ERROR.value = error;
      return ERROR;
    }
  }

  function makeObject(_, argumentNames) {
    var obj = {};
    var name;
    var i;
    var length = _.length;
    var args = new Array(length);

    for (var x = 0; x < length; x++) {
      args[x] = _[x];
    }

    for (i = 0; i < argumentNames.length; i++) {
      name = argumentNames[i];
      obj[name] = args[i + 1];
    }

    return obj;
  }

  function arrayResult(_) {
    var length = _.length;
    var args = new Array(length - 1);

    for (var i = 1; i < length; i++) {
      args[i - 1] = _[i];
    }

    return args;
  }

  function wrapThenable(then, promise) {
    return {
      then: function (onFulFillment, onRejection) {
        return then.call(promise, onFulFillment, onRejection);
      }
    };
  }

  /**
    `RSVP.denodeify` takes a 'node-style' function and returns a function that
    will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the
    browser when you'd prefer to use promises over using callbacks. For example,
    `denodeify` transforms the following:
  
    ```javascript
    var fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      handleData(data);
    });
    ```
  
    into:
  
    ```javascript
    var fs = require('fs');
    var readFile = RSVP.denodeify(fs.readFile);
  
    readFile('myfile.txt').then(handleData, handleError);
    ```
  
    If the node function has multiple success parameters, then `denodeify`
    just returns the first one:
  
    ```javascript
    var request = RSVP.denodeify(require('request'));
  
    request('http://example.com').then(function(res) {
      // ...
    });
    ```
  
    However, if you need all success parameters, setting `denodeify`'s
    second parameter to `true` causes it to return all success parameters
    as an array:
  
    ```javascript
    var request = RSVP.denodeify(require('request'), true);
  
    request('http://example.com').then(function(result) {
      // result[0] -> res
      // result[1] -> body
    });
    ```
  
    Or if you pass it an array with names it returns the parameters as a hash:
  
    ```javascript
    var request = RSVP.denodeify(require('request'), ['res', 'body']);
  
    request('http://example.com').then(function(result) {
      // result.res
      // result.body
    });
    ```
  
    Sometimes you need to retain the `this`:
  
    ```javascript
    var app = require('express')();
    var render = RSVP.denodeify(app.render.bind(app));
    ```
  
    The denodified function inherits from the original function. It works in all
    environments, except IE 10 and below. Consequently all properties of the original
    function are available to you. However, any properties you change on the
    denodeified function won't be changed on the original function. Example:
  
    ```javascript
    var request = RSVP.denodeify(require('request')),
        cookieJar = request.jar(); // <- Inheritance is used here
  
    request('http://example.com', {jar: cookieJar}).then(function(res) {
      // cookieJar.cookies holds now the cookies returned by example.com
    });
    ```
  
    Using `denodeify` makes it easier to compose asynchronous operations instead
    of using callbacks. For example, instead of:
  
    ```javascript
    var fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) { ... } // Handle error
      fs.writeFile('myfile2.txt', data, function(err){
        if (err) { ... } // Handle error
        console.log('done')
      });
    });
    ```
  
    you can chain the operations together using `then` from the returned promise:
  
    ```javascript
    var fs = require('fs');
    var readFile = RSVP.denodeify(fs.readFile);
    var writeFile = RSVP.denodeify(fs.writeFile);
  
    readFile('myfile.txt').then(function(data){
      return writeFile('myfile2.txt', data);
    }).then(function(){
      console.log('done')
    }).catch(function(error){
      // Handle error
    });
    ```
  
    @method denodeify
    @static
    @for RSVP
    @param {Function} nodeFunc a 'node-style' function that takes a callback as
    its last argument. The callback expects an error to be passed as its first
    argument (if an error occurred, otherwise null), and the value from the
    operation as its second argument ('function(err, value){ }').
    @param {Boolean|Array} argumentNames An optional paramter that if set
    to `true` causes the promise to fulfill with the callback's success arguments
    as an array. This is useful if the node function has multiple success
    paramters. If you set this paramter to an array with names, the promise will
    fulfill with a hash with these names as keys and the success parameters as
    values.
    @return {Function} a function that wraps `nodeFunc` to return an
    `RSVP.Promise`
    @static
  */

  function denodeify(nodeFunc, options) {
    var fn = function () {
      var self = this;
      var l = arguments.length;
      var args = new Array(l + 1);
      var arg;
      var promiseInput = false;

      for (var i = 0; i < l; ++i) {
        arg = arguments[i];

        if (!promiseInput) {
          // TODO: clean this up
          promiseInput = needsPromiseInput(arg);
          if (promiseInput === GET_THEN_ERROR) {
            var p = new _promise["default"](_internal.noop);
            (0, _internal.reject)(p, GET_THEN_ERROR.value);
            return p;
          } else if (promiseInput && promiseInput !== true) {
            arg = wrapThenable(promiseInput, arg);
          }
        }
        args[i] = arg;
      }

      var promise = new _promise["default"](_internal.noop);

      args[l] = function (err, val) {
        if (err) (0, _internal.reject)(promise, err);else if (options === undefined) (0, _internal.resolve)(promise, val);else if (options === true) (0, _internal.resolve)(promise, arrayResult(arguments));else if ((0, _utils.isArray)(options)) (0, _internal.resolve)(promise, makeObject(arguments, options));else (0, _internal.resolve)(promise, val);
      };

      if (promiseInput) {
        return handlePromiseInput(promise, args, nodeFunc, self);
      } else {
        return handleValueInput(promise, args, nodeFunc, self);
      }
    };

    fn.__proto__ = nodeFunc;

    return fn;
  }

  function handleValueInput(promise, args, nodeFunc, self) {
    var result = tryApply(nodeFunc, self, args);
    if (result === ERROR) {
      (0, _internal.reject)(promise, result.value);
    }
    return promise;
  }

  function handlePromiseInput(promise, args, nodeFunc, self) {
    return _promise["default"].all(args).then(function (args) {
      var result = tryApply(nodeFunc, self, args);
      if (result === ERROR) {
        (0, _internal.reject)(promise, result.value);
      }
      return promise;
    });
  }

  function needsPromiseInput(arg) {
    if (arg && typeof arg === 'object') {
      if (arg.constructor === _promise["default"]) {
        return true;
      } else {
        return getThen(arg);
      }
    } else {
      return false;
    }
  }
});
enifed('rsvp/promise-hash', ['exports', './enumerator', './-internal', './utils'], function (exports, _enumerator, _internal, _utils) {

  function PromiseHash(Constructor, object, label) {
    this._superConstructor(Constructor, object, true, label);
  }

  exports["default"] = PromiseHash;

  PromiseHash.prototype = (0, _utils.o_create)(_enumerator["default"].prototype);
  PromiseHash.prototype._superConstructor = _enumerator["default"];
  PromiseHash.prototype._init = function () {
    this._result = {};
  };

  PromiseHash.prototype._validateInput = function (input) {
    return input && typeof input === 'object';
  };

  PromiseHash.prototype._validationError = function () {
    return new Error('Promise.hash must be called with an object');
  };

  PromiseHash.prototype._enumerate = function () {
    var promise = this.promise;
    var input = this._input;
    var results = [];

    for (var key in input) {
      if (promise._state === _internal.PENDING && input.hasOwnProperty(key)) {
        results.push({
          position: key,
          entry: input[key]
        });
      }
    }

    var length = results.length;
    this._remaining = length;
    var result;

    for (var i = 0; promise._state === _internal.PENDING && i < length; i++) {
      result = results[i];
      this._eachEntry(result.entry, result.position);
    }
  };
});
enifed('rsvp/promise', ['exports', './config', './instrument', './utils', './-internal', './promise/all', './promise/race', './promise/resolve', './promise/reject'], function (exports, _config, _instrument, _utils, _internal, _promiseAll, _promiseRace, _promiseResolve, _promiseReject) {

  var guidKey = 'rsvp_' + (0, _utils.now)() + '-';
  var counter = 0;

  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function needsNew() {
    throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
  }
  exports["default"] = Promise;

  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise’s eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    var promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        var xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class RSVP.Promise
    @param {function} resolver
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @constructor
  */
  function Promise(resolver, label) {
    this._id = counter++;
    this._label = label;
    this._state = undefined;
    this._result = undefined;
    this._subscribers = [];

    if (_config.config.instrument) {
      (0, _instrument["default"])('created', this);
    }

    if (_internal.noop !== resolver) {
      if (!(0, _utils.isFunction)(resolver)) {
        needsResolver();
      }

      if (!(this instanceof Promise)) {
        needsNew();
      }

      (0, _internal.initializePromise)(this, resolver);
    }
  }

  Promise.cast = _promiseResolve["default"]; // deprecated
  Promise.all = _promiseAll["default"];
  Promise.race = _promiseRace["default"];
  Promise.resolve = _promiseResolve["default"];
  Promise.reject = _promiseReject["default"];

  Promise.prototype = {
    constructor: Promise,

    _guidKey: guidKey,

    _onerror: function (reason) {
      _config.config.trigger('error', reason);
    },

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.
    
      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```
    
      Chaining
      --------
    
      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.
    
      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });
    
      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
    
      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```
    
      Assimilation
      ------------
    
      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.
    
      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```
    
      If the assimliated promise rejects, then the downstream promise will also reject.
    
      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```
    
      Simple Example
      --------------
    
      Synchronous Example
    
      ```javascript
      var result;
    
      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```
    
      Errback Example
    
      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```
    
      Promise Example;
    
      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```
    
      Advanced Example
      --------------
    
      Synchronous Example
    
      ```javascript
      var author, books;
    
      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```
    
      Errback Example
    
      ```js
    
      function foundBooks(books) {
    
      }
    
      function failure(reason) {
    
      }
    
      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```
    
      Promise Example;
    
      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```
    
      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    then: function (onFulfillment, onRejection, label) {
      var parent = this;
      var state = parent._state;

      if (state === _internal.FULFILLED && !onFulfillment || state === _internal.REJECTED && !onRejection) {
        if (_config.config.instrument) {
          (0, _instrument["default"])('chained', this, this);
        }
        return this;
      }

      parent._onerror = null;

      var child = new this.constructor(_internal.noop, label);
      var result = parent._result;

      if (_config.config.instrument) {
        (0, _instrument["default"])('chained', parent, child);
      }

      if (state) {
        var callback = arguments[state - 1];
        _config.config.async(function () {
          (0, _internal.invokeCallback)(state, child, callback, result);
        });
      } else {
        (0, _internal.subscribe)(parent, child, onFulfillment, onRejection);
      }

      return child;
    },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.
    
      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }
    
      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }
    
      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```
    
      @method catch
      @param {Function} onRejection
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    'catch': function (onRejection, label) {
      return this.then(null, onRejection, label);
    },

    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuther();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuther();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
    'finally': function (callback, label) {
      var constructor = this.constructor;

      return this.then(function (value) {
        return constructor.resolve(callback()).then(function () {
          return value;
        });
      }, function (reason) {
        return constructor.resolve(callback()).then(function () {
          throw reason;
        });
      }, label);
    }
  };
});
enifed('rsvp/promise/all', ['exports', '../enumerator'], function (exports, _enumerator) {
  exports["default"] = all;

  /**
    `RSVP.Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.resolve(2);
    var promise3 = RSVP.resolve(3);
    var promises = [ promise1, promise2, promise3 ];
  
    RSVP.Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `RSVP.all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.reject(new Error("2"));
    var promise3 = RSVP.reject(new Error("3"));
    var promises = [ promise1, promise2, promise3 ];
  
    RSVP.Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @static
    @param {Array} entries array of promises
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */

  function all(entries, label) {
    return new _enumerator["default"](this, entries, true, /* abort on reject */label).promise;
  }
});
enifed('rsvp/promise/race', ['exports', '../utils', '../-internal'], function (exports, _utils, _internal) {
  exports["default"] = race;

  /**
    `RSVP.Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    var promise1 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    var promise2 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    RSVP.Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `RSVP.Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    var promise1 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    var promise2 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    RSVP.Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    RSVP.Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @static
    @param {Array} promises array of promises to observe
    @param {String} label optional string for describing the promise returned.
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */

  function race(entries, label) {
    /*jshint validthis:true */
    var Constructor = this;

    var promise = new Constructor(_internal.noop, label);

    if (!(0, _utils.isArray)(entries)) {
      (0, _internal.reject)(promise, new TypeError('You must pass an array to race.'));
      return promise;
    }

    var length = entries.length;

    function onFulfillment(value) {
      (0, _internal.resolve)(promise, value);
    }

    function onRejection(reason) {
      (0, _internal.reject)(promise, reason);
    }

    for (var i = 0; promise._state === _internal.PENDING && i < length; i++) {
      (0, _internal.subscribe)(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
    }

    return promise;
  }
});
enifed('rsvp/promise/reject', ['exports', '../-internal'], function (exports, _internal) {
  exports["default"] = reject;

  /**
    `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    var promise = new RSVP.Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    var promise = RSVP.Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @static
    @param {Any} reason value that the returned promise will be rejected with.
    @param {String} label optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */

  function reject(reason, label) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(_internal.noop, label);
    (0, _internal.reject)(promise, reason);
    return promise;
  }
});
enifed('rsvp/promise/resolve', ['exports', '../-internal'], function (exports, _internal) {
  exports["default"] = resolve;

  /**
    `RSVP.Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    var promise = new RSVP.Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    var promise = RSVP.Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @static
    @param {Any} value value that the returned promise will be resolved with
    @param {String} label optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */

  function resolve(object, label) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && typeof object === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(_internal.noop, label);
    (0, _internal.resolve)(promise, object);
    return promise;
  }
});
enifed('rsvp/race', ['exports', './promise'], function (exports, _promise) {
  exports["default"] = race;

  /**
    This is a convenient alias for `RSVP.Promise.race`.
  
    @method race
    @static
    @for RSVP
    @param {Array} array Array of promises.
    @param {String} label An optional label. This is useful
    for tooling.
   */

  function race(array, label) {
    return _promise["default"].race(array, label);
  }
});
enifed('rsvp/reject', ['exports', './promise'], function (exports, _promise) {
  exports["default"] = reject;

  /**
    This is a convenient alias for `RSVP.Promise.reject`.
  
    @method reject
    @static
    @for RSVP
    @param {Any} reason value that the returned promise will be rejected with.
    @param {String} label optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */

  function reject(reason, label) {
    return _promise["default"].reject(reason, label);
  }
});
enifed('rsvp/resolve', ['exports', './promise'], function (exports, _promise) {
  exports["default"] = resolve;

  /**
    This is a convenient alias for `RSVP.Promise.resolve`.
  
    @method resolve
    @static
    @for RSVP
    @param {Any} value value that the returned promise will be resolved with
    @param {String} label optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */

  function resolve(value, label) {
    return _promise["default"].resolve(value, label);
  }
});
enifed("rsvp/rethrow", ["exports"], function (exports) {
  exports["default"] = rethrow;
  /**
    `RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event
    loop in order to aid debugging.
  
    Promises A+ specifies that any exceptions that occur with a promise must be
    caught by the promises implementation and bubbled to the last handler. For
    this reason, it is recommended that you always specify a second rejection
    handler function to `then`. However, `RSVP.rethrow` will throw the exception
    outside of the promise, so it bubbles up to your console if in the browser,
    or domain/cause uncaught exception in Node. `rethrow` will also throw the
    error again so the error can be handled by the promise per the spec.
  
    ```javascript
    function throws(){
      throw new Error('Whoops!');
    }
  
    var promise = new RSVP.Promise(function(resolve, reject){
      throws();
    });
  
    promise.catch(RSVP.rethrow).then(function(){
      // Code here doesn't run because the promise became rejected due to an
      // error!
    }, function (err){
      // handle the error here
    });
    ```
  
    The 'Whoops' error will be thrown on the next turn of the event loop
    and you can watch for it in your console. You can also handle it using a
    rejection handler given to `.then` or `.catch` on the returned promise.
  
    @method rethrow
    @static
    @for RSVP
    @param {Error} reason reason the promise became rejected.
    @throws Error
    @static
  */

  function rethrow(reason) {
    setTimeout(function () {
      throw reason;
    });
    throw reason;
  }
});
enifed('rsvp/utils', ['exports'], function (exports) {
  exports.objectOrFunction = objectOrFunction;
  exports.isFunction = isFunction;
  exports.isMaybeThenable = isMaybeThenable;

  function objectOrFunction(x) {
    return typeof x === 'function' || typeof x === 'object' && x !== null;
  }

  function isFunction(x) {
    return typeof x === 'function';
  }

  function isMaybeThenable(x) {
    return typeof x === 'object' && x !== null;
  }

  var _isArray;
  if (!Array.isArray) {
    _isArray = function (x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  } else {
    _isArray = Array.isArray;
  }

  var isArray = _isArray;

  exports.isArray = isArray;
  // Date.now is not available in browsers < IE9
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility
  var now = Date.now || function () {
    return new Date().getTime();
  };

  exports.now = now;
  function F() {}

  var o_create = Object.create || function (o) {
    if (arguments.length > 1) {
      throw new Error('Second argument not supported');
    }
    if (typeof o !== 'object') {
      throw new TypeError('Argument must be an object');
    }
    F.prototype = o;
    return new F();
  };
  exports.o_create = o_create;
});
requireModule("ember");

})();
;(function() {
/* global define, Ember */
define('ember', [], function() {
  "use strict";

  return {
    'default': Ember
  };
});

define('ember-data', [], function() {
  "use strict";

  return {
    'default': DS
  };
});
})();

define('jquery', [], function() {
  "use strict";

  return {
    'default': jQuery
  };
});

;(function() {
/*globals define registry requirejs */

define("ember/resolver",
  [],
  function() {
    "use strict";

    if (typeof requirejs.entries === 'undefined') {
      requirejs.entries = requirejs._eak_seen;
    }

  /*
   * This module defines a subclass of Ember.DefaultResolver that adds two
   * important features:
   *
   *  1) The resolver makes the container aware of es6 modules via the AMD
   *     output. The loader's _moduleEntries is consulted so that classes can be
   *     resolved directly via the module loader, without needing a manual
   *     `import`.
   *  2) is able to provide injections to classes that implement `extend`
   *     (as is typical with Ember).
   */

  function classFactory(klass) {
    return {
      create: function (injections) {
        if (typeof klass.extend === 'function') {
          return klass.extend(injections);
        } else {
          return klass;
        }
      }
    };
  }

  if (!(Object.create && !Object.create(null).hasOwnProperty)) {
    throw new Error("This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg");
  }

  function makeDictionary() {
    var cache = Ember.create(null);
    cache['_dict'] = null;
    delete cache['_dict'];
    return cache;
  }

  var underscore = Ember.String.underscore;
  var classify = Ember.String.classify;
  var get = Ember.get;

  function parseName(fullName) {
    /*jshint validthis:true */

    if (fullName.parsedName === true) { return fullName; }

    var prefixParts = fullName.split('@');
    var prefix;

    if (prefixParts.length === 2) {
      if (prefixParts[0].split(':')[0] === 'view') {
        prefixParts[0] = prefixParts[0].split(':')[1];
        prefixParts[1] = 'view:' + prefixParts[1];
      }

      prefix = prefixParts[0];
    }

    var nameParts = prefixParts[prefixParts.length - 1].split(":");
    var type = nameParts[0], fullNameWithoutType = nameParts[1];
    var name = fullNameWithoutType;
    var namespace = get(this, 'namespace');
    var root = namespace;

    return {
      parsedName: true,
      fullName: fullName,
      prefix: prefix || this.prefix({type: type}),
      type: type,
      fullNameWithoutType: fullNameWithoutType,
      name: name,
      root: root,
      resolveMethodName: "resolve" + classify(type)
    };
  }

  function resolveOther(parsedName) {
    /*jshint validthis:true */

    // Temporarily disabling podModulePrefix deprecation
    /*
    if (!this._deprecatedPodModulePrefix) {
      var podModulePrefix = this.namespace.podModulePrefix || '';
      var podPath = podModulePrefix.substr(podModulePrefix.lastIndexOf('/') + 1);

      Ember.deprecate('`podModulePrefix` is deprecated and will be removed '+
        'from future versions of ember-cli. Please move existing pods from '+
        '\'app/' + podPath + '/\' to \'app/\'.', !this.namespace.podModulePrefix);

      this._deprecatedPodModulePrefix = true;
    }
    */
    Ember.assert('`modulePrefix` must be defined', this.namespace.modulePrefix);

    var normalizedModuleName = this.findModuleName(parsedName);

    if (normalizedModuleName) {
      var defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);

      if (defaultExport === undefined) {
        throw new Error(" Expected to find: '" + parsedName.fullName + "' within '" + normalizedModuleName + "' but got 'undefined'. Did you forget to `export default` within '" + normalizedModuleName + "'?");
      }

      if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {
        defaultExport = classFactory(defaultExport);
      }

      return defaultExport;
    } else {
      return this._super(parsedName);
    }
  }

  // Ember.DefaultResolver docs:
  //   https://github.com/emberjs/ember.js/blob/master/packages/ember-application/lib/system/resolver.js
  var Resolver = Ember.DefaultResolver.extend({
    resolveOther: resolveOther,
    resolveTemplate: resolveOther,
    pluralizedTypes: null,

    makeToString: function(factory, fullName) {
      return '' + this.namespace.modulePrefix + '@' + fullName + ':';
    },
    parseName: parseName,
    shouldWrapInClassFactory: function(module, parsedName){
      return false;
    },
    init: function() {
      this._super();
      this.moduleBasedResolver = true;
      this._normalizeCache = makeDictionary();

      this.pluralizedTypes = this.pluralizedTypes || makeDictionary();

      if (!this.pluralizedTypes.config) {
        this.pluralizedTypes.config = 'config';
      }

      this._deprecatedPodModulePrefix = false;
    },
    normalize: function(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));
    },
    _normalize: function(fullName) {
      // replace `.` with `/` in order to make nested controllers work in the following cases
      // 1. `needs: ['posts/post']`
      // 2. `{{render "posts/post"}}`
      // 3. `this.render('posts/post')` from Route
      var split = fullName.split(':');
      if (split.length > 1) {
        return split[0] + ':' + Ember.String.dasherize(split[1].replace(/\./g, '/'));
      } else {
        return fullName;
      }
    },

    pluralize: function(type) {
      return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');
    },

    podBasedLookupWithPrefix: function(podPrefix, parsedName) {
      var fullNameWithoutType = parsedName.fullNameWithoutType;

      if (parsedName.type === 'template') {
        fullNameWithoutType = fullNameWithoutType.replace(/^components\//, '');
      }

        return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;
    },

    podBasedModuleName: function(parsedName) {
      var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;

      return this.podBasedLookupWithPrefix(podPrefix, parsedName);
    },

    podBasedComponentsInSubdir: function(parsedName) {
      var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      podPrefix = podPrefix + '/components';

      if (parsedName.type === 'component' || parsedName.fullNameWithoutType.match(/^components/)) {
        return this.podBasedLookupWithPrefix(podPrefix, parsedName);
      }
    },

    mainModuleName: function(parsedName) {
      // if router:main or adapter:main look for a module with just the type first
      var tmpModuleName = parsedName.prefix + '/' + parsedName.type;

      if (parsedName.fullNameWithoutType === 'main') {
        return tmpModuleName;
      }
    },

    defaultModuleName: function(parsedName) {
      return parsedName.prefix + '/' +  this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
    },

    prefix: function(parsedName) {
      var tmpPrefix = this.namespace.modulePrefix;

      if (this.namespace[parsedName.type + 'Prefix']) {
        tmpPrefix = this.namespace[parsedName.type + 'Prefix'];
      }

      return tmpPrefix;
    },

    /**

      A listing of functions to test for moduleName's based on the provided
      `parsedName`. This allows easy customization of additional module based
      lookup patterns.

      @property moduleNameLookupPatterns
      @returns {Ember.Array}
    */
    moduleNameLookupPatterns: Ember.computed(function(){
      return Ember.A([
        this.podBasedModuleName,
        this.podBasedComponentsInSubdir,
        this.mainModuleName,
        this.defaultModuleName
      ]);
    }),

    findModuleName: function(parsedName, loggingDisabled){
      var self = this;
      var moduleName;

      this.get('moduleNameLookupPatterns').find(function(item) {
        var moduleEntries = requirejs.entries;
        var tmpModuleName = item.call(self, parsedName);

        // allow treat all dashed and all underscored as the same thing
        // supports components with dashes and other stuff with underscores.
        if (tmpModuleName) {
          tmpModuleName = self.chooseModuleName(moduleEntries, tmpModuleName);
        }

        if (tmpModuleName && moduleEntries[tmpModuleName]) {
          if (!loggingDisabled) {
            self._logLookup(true, parsedName, tmpModuleName);
          }

          moduleName = tmpModuleName;
        }

        if (!loggingDisabled) {
          self._logLookup(moduleName, parsedName, tmpModuleName);
        }

        return moduleName;
      });

      return moduleName;
    },

    chooseModuleName: function(moduleEntries, moduleName) {
      var underscoredModuleName = Ember.String.underscore(moduleName);

      if (moduleName !== underscoredModuleName && moduleEntries[moduleName] && moduleEntries[underscoredModuleName]) {
        throw new TypeError("Ambiguous module names: `" + moduleName + "` and `" + underscoredModuleName + "`");
      }

      if (moduleEntries[moduleName]) {
        return moduleName;
      } else if (moduleEntries[underscoredModuleName]) {
        return underscoredModuleName;
      } else {
        // workaround for dasherized partials:
        // something/something/-something => something/something/_something
        var partializedModuleName = moduleName.replace(/\/-([^\/]*)$/, '/_$1');

        if (moduleEntries[partializedModuleName]) {
          Ember.deprecate('Modules should not contain underscores. ' +
                          'Attempted to lookup "'+moduleName+'" which ' +
                          'was not found. Please rename "'+partializedModuleName+'" '+
                          'to "'+moduleName+'" instead.', false);

          return partializedModuleName;
        } else {
          return moduleName;
        }
      }
    },

    // used by Ember.DefaultResolver.prototype._logLookup
    lookupDescription: function(fullName) {
      var parsedName = this.parseName(fullName);

      var moduleName = this.findModuleName(parsedName, true);

      return moduleName;
    },

    // only needed until 1.6.0-beta.2 can be required
    _logLookup: function(found, parsedName, description) {
      if (!Ember.ENV.LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {
        return;
      }

      var symbol, padding;

      if (found) { symbol = '[✓]'; }
      else       { symbol = '[ ]'; }

      if (parsedName.fullName.length > 60) {
        padding = '.';
      } else {
        padding = new Array(60 - parsedName.fullName.length).join('.');
      }

      if (!description) {
        description = this.lookupDescription(parsedName);
      }

      Ember.Logger.info(symbol, parsedName.fullName, padding, description);
    },

    knownForType: function(type) {
      var moduleEntries = requirejs.entries;
      var moduleKeys = Ember.keys(moduleEntries);

      var items = makeDictionary();
      for (var index = 0, length = moduleKeys.length; index < length; index++) {
        var moduleName = moduleKeys[index];
        var fullname = this.translateToContainerFullname(type, moduleName);

        if (fullname) {
          items[fullname] = true;
        }
      }

      return items;
    },

    translateToContainerFullname: function(type, moduleName) {
      var prefix = this.prefix({ type: type });
      var pluralizedType = this.pluralize(type);
      var nonPodRegExp = new RegExp('^' + prefix + '/' + pluralizedType + '/(.+)$');
      var podRegExp = new RegExp('^' + prefix + '/(.+)/' + type + '$');
      var matches;


      if ((matches = moduleName.match(podRegExp))) {
        return type + ':' + matches[1];
      }

      if ((matches = moduleName.match(nonPodRegExp))) {
        return type + ':' + matches[1];
      }
    },

    _extractDefaultExport: function(normalizedModuleName) {
      var module = require(normalizedModuleName, null, null, true /* force sync */);

      if (module && module['default']) {
        module = module['default'];
      }

      return module;
    }
  });

  Resolver.moduleBasedResolver = true;
  Resolver['default'] = Resolver;
  return Resolver;
});

define("resolver",
  ["ember/resolver"],
  function (Resolver) {
    Ember.deprecate('Importing/requiring Ember Resolver as "resolver" is deprecated, please use "ember/resolver" instead');
    return Resolver;
  });

})();



(function() {
/*globals define registry requirejs */

define("ember/container-debug-adapter",
  [],
  function() {
    "use strict";

  // Support Ember < 1.5-beta.4
  // TODO: Remove this after 1.5.0 is released
  if (typeof Ember.ContainerDebugAdapter === 'undefined') {
    return null;
  }
  /*
   * This module defines a subclass of Ember.ContainerDebugAdapter that adds two
   * important features:
   *
   *  1) is able provide injections to classes that implement `extend`
   *     (as is typical with Ember).
   */

  var ContainerDebugAdapter = Ember.ContainerDebugAdapter.extend({
    /**
      The container of the application being debugged.
      This property will be injected
      on creation.

      @property container
      @default null
    */
    // container: null, LIVES IN PARENT

    /**
      The resolver instance of the application
      being debugged. This property will be injected
      on creation.

      @property resolver
      @default null
    */
    // resolver: null,  LIVES IN PARENT
    /**
      Returns true if it is possible to catalog a list of available
      classes in the resolver for a given type.

      @method canCatalogEntriesByType
      @param {string} type The type. e.g. "model", "controller", "route"
      @return {boolean} whether a list is available for this type.
    */
    canCatalogEntriesByType: function(type) {
      return true;
    },

    /**
     * Get all defined modules.
     *
     * @method _getEntries
     * @return {Array} the list of registered modules.
     * @private
     */
    _getEntries: function() {
      return requirejs.entries;
    },

    /**
      Returns the available classes a given type.

      @method catalogEntriesByType
      @param {string} type The type. e.g. "model", "controller", "route"
      @return {Array} An array of classes.
    */
    catalogEntriesByType: function(type) {
      var entries = this._getEntries(),
          module,
          types = Ember.A();

      var makeToString = function(){
        return this.shortname;
      };

      var prefix = this.namespace.modulePrefix;

      for(var key in entries) {
        if(entries.hasOwnProperty(key) && key.indexOf(type) !== -1) {
          // Check if it's a pod module
          var name = getPod(type, key, this.namespace.podModulePrefix || prefix);
          if (!name) {
            // Not pod
            name = key.split(type + 's/').pop();

            // Support for different prefix (such as ember-cli addons).
            // Uncomment the code below when
            // https://github.com/ember-cli/ember-resolver/pull/80 is merged.

            //var match = key.match('^/?(.+)/' + type);
            //if (match && match[1] !== prefix) {
              // Different prefix such as an addon
              //name = match[1] + '@' + name;
            //}
          }
          types.addObject(name);
        }
      }
      return types;
    }
  });

  function getPod(type, key, prefix) {
    var match = key.match(new RegExp('^/?' + prefix + '/(.+)/' + type + '$'));
    if (match) {
      return match[1];
    }
  }

  ContainerDebugAdapter['default'] = ContainerDebugAdapter;
  return ContainerDebugAdapter;
});

})();



(function() {
(function() {
  "use strict";

  Ember.Application.initializer({
    name: 'container-debug-adapter',

    initialize: function(container, app) {
      var ContainerDebugAdapter = require('ember/container-debug-adapter');
      var Resolver = require('ember/resolver');

      container.register('container-debug-adapter:main', ContainerDebugAdapter);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  });
}());

})();



(function() {

})();


;(function() {
define("ember/load-initializers",
  [],
  function() {
    "use strict";

    return {
      'default': function(app, prefix) {
        var regex = new RegExp('^' + prefix + '\/((?:instance-)?initializers)\/');

        Ember.keys(requirejs._eak_seen).map(function (moduleName) {
            return {
              moduleName: moduleName,
              matches: regex.exec(moduleName)
            };
          })
          .filter(function(dep) {
            return dep.matches && dep.matches.length === 2;
          })
          .forEach(function(dep) {
            var moduleName = dep.moduleName;

            var module = require(moduleName, null, null, true);
            if (!module) { throw new Error(moduleName + ' must export an initializer.'); }

            var initializerType = Ember.String.camelize(dep.matches[1].substring(0, dep.matches[1].length - 1));
            var initializer = module['default'];
            if (!initializer.name) {
              var initializerName = moduleName.match(/[^\/]+\/?$/)[0];
              initializer.name = initializerName;
            }

            app[initializerType](initializer);
          });
      }
    }
  }
);
})();

;/* Chosen v1.4.2 | (c) 2011-2015 by Harvest | MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md */
(function(){var a,AbstractChosen,Chosen,SelectParser,b,c={}.hasOwnProperty,d=function(a,b){function d(){this.constructor=a}for(var e in b)c.call(b,e)&&(a[e]=b[e]);return d.prototype=b.prototype,a.prototype=new d,a.__super__=b.prototype,a};SelectParser=function(){function SelectParser(){this.options_index=0,this.parsed=[]}return SelectParser.prototype.add_node=function(a){return"OPTGROUP"===a.nodeName.toUpperCase()?this.add_group(a):this.add_option(a)},SelectParser.prototype.add_group=function(a){var b,c,d,e,f,g;for(b=this.parsed.length,this.parsed.push({array_index:b,group:!0,label:this.escapeExpression(a.label),title:a.title?a.title:void 0,children:0,disabled:a.disabled,classes:a.className}),f=a.childNodes,g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(this.add_option(c,b,a.disabled));return g},SelectParser.prototype.add_option=function(a,b,c){return"OPTION"===a.nodeName.toUpperCase()?(""!==a.text?(null!=b&&(this.parsed[b].children+=1),this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,value:a.value,text:a.text,html:a.innerHTML,title:a.title?a.title:void 0,selected:a.selected,disabled:c===!0?c:a.disabled,group_array_index:b,group_label:null!=b?this.parsed[b].label:null,classes:a.className,style:a.style.cssText})):this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,empty:!0}),this.options_index+=1):void 0},SelectParser.prototype.escapeExpression=function(a){var b,c;return null==a||a===!1?"":/[\&\<\>\"\'\`]/.test(a)?(b={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},c=/&(?!\w+;)|[\<\>\"\'\`]/g,a.replace(c,function(a){return b[a]||"&amp;"})):a},SelectParser}(),SelectParser.select_to_array=function(a){var b,c,d,e,f;for(c=new SelectParser,f=a.childNodes,d=0,e=f.length;e>d;d++)b=f[d],c.add_node(b);return c.parsed},AbstractChosen=function(){function AbstractChosen(a,b){this.form_field=a,this.options=null!=b?b:{},AbstractChosen.browser_is_supported()&&(this.is_multiple=this.form_field.multiple,this.set_default_text(),this.set_default_values(),this.setup(),this.set_up_html(),this.register_observers(),this.on_ready())}return AbstractChosen.prototype.set_default_values=function(){var a=this;return this.click_test_action=function(b){return a.test_active_click(b)},this.activate_action=function(b){return a.activate_field(b)},this.active_field=!1,this.mouse_on_container=!1,this.results_showing=!1,this.result_highlighted=null,this.allow_single_deselect=null!=this.options.allow_single_deselect&&null!=this.form_field.options[0]&&""===this.form_field.options[0].text?this.options.allow_single_deselect:!1,this.disable_search_threshold=this.options.disable_search_threshold||0,this.disable_search=this.options.disable_search||!1,this.enable_split_word_search=null!=this.options.enable_split_word_search?this.options.enable_split_word_search:!0,this.group_search=null!=this.options.group_search?this.options.group_search:!0,this.search_contains=this.options.search_contains||!1,this.single_backstroke_delete=null!=this.options.single_backstroke_delete?this.options.single_backstroke_delete:!0,this.max_selected_options=this.options.max_selected_options||1/0,this.inherit_select_classes=this.options.inherit_select_classes||!1,this.display_selected_options=null!=this.options.display_selected_options?this.options.display_selected_options:!0,this.display_disabled_options=null!=this.options.display_disabled_options?this.options.display_disabled_options:!0,this.include_group_label_in_selected=this.options.include_group_label_in_selected||!1},AbstractChosen.prototype.set_default_text=function(){return this.default_text=this.form_field.getAttribute("data-placeholder")?this.form_field.getAttribute("data-placeholder"):this.is_multiple?this.options.placeholder_text_multiple||this.options.placeholder_text||AbstractChosen.default_multiple_text:this.options.placeholder_text_single||this.options.placeholder_text||AbstractChosen.default_single_text,this.results_none_found=this.form_field.getAttribute("data-no_results_text")||this.options.no_results_text||AbstractChosen.default_no_result_text},AbstractChosen.prototype.choice_label=function(a){return this.include_group_label_in_selected&&null!=a.group_label?"<b class='group-name'>"+a.group_label+"</b>"+a.html:a.html},AbstractChosen.prototype.mouse_enter=function(){return this.mouse_on_container=!0},AbstractChosen.prototype.mouse_leave=function(){return this.mouse_on_container=!1},AbstractChosen.prototype.input_focus=function(){var a=this;if(this.is_multiple){if(!this.active_field)return setTimeout(function(){return a.container_mousedown()},50)}else if(!this.active_field)return this.activate_field()},AbstractChosen.prototype.input_blur=function(){var a=this;return this.mouse_on_container?void 0:(this.active_field=!1,setTimeout(function(){return a.blur_test()},100))},AbstractChosen.prototype.results_option_build=function(a){var b,c,d,e,f;for(b="",f=this.results_data,d=0,e=f.length;e>d;d++)c=f[d],b+=c.group?this.result_add_group(c):this.result_add_option(c),(null!=a?a.first:void 0)&&(c.selected&&this.is_multiple?this.choice_build(c):c.selected&&!this.is_multiple&&this.single_set_selected_text(this.choice_label(c)));return b},AbstractChosen.prototype.result_add_option=function(a){var b,c;return a.search_match?this.include_option_in_results(a)?(b=[],a.disabled||a.selected&&this.is_multiple||b.push("active-result"),!a.disabled||a.selected&&this.is_multiple||b.push("disabled-result"),a.selected&&b.push("result-selected"),null!=a.group_array_index&&b.push("group-option"),""!==a.classes&&b.push(a.classes),c=document.createElement("li"),c.className=b.join(" "),c.style.cssText=a.style,c.setAttribute("data-option-array-index",a.array_index),c.innerHTML=a.search_text,a.title&&(c.title=a.title),this.outerHTML(c)):"":""},AbstractChosen.prototype.result_add_group=function(a){var b,c;return a.search_match||a.group_match?a.active_options>0?(b=[],b.push("group-result"),a.classes&&b.push(a.classes),c=document.createElement("li"),c.className=b.join(" "),c.innerHTML=a.search_text,a.title&&(c.title=a.title),this.outerHTML(c)):"":""},AbstractChosen.prototype.results_update_field=function(){return this.set_default_text(),this.is_multiple||this.results_reset_cleanup(),this.result_clear_highlight(),this.results_build(),this.results_showing?this.winnow_results():void 0},AbstractChosen.prototype.reset_single_select_options=function(){var a,b,c,d,e;for(d=this.results_data,e=[],b=0,c=d.length;c>b;b++)a=d[b],a.selected?e.push(a.selected=!1):e.push(void 0);return e},AbstractChosen.prototype.results_toggle=function(){return this.results_showing?this.results_hide():this.results_show()},AbstractChosen.prototype.results_search=function(){return this.results_showing?this.winnow_results():this.results_show()},AbstractChosen.prototype.winnow_results=function(){var a,b,c,d,e,f,g,h,i,j,k,l;for(this.no_results_clear(),d=0,f=this.get_search_text(),a=f.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),i=new RegExp(a,"i"),c=this.get_search_regex(a),l=this.results_data,j=0,k=l.length;k>j;j++)b=l[j],b.search_match=!1,e=null,this.include_option_in_results(b)&&(b.group&&(b.group_match=!1,b.active_options=0),null!=b.group_array_index&&this.results_data[b.group_array_index]&&(e=this.results_data[b.group_array_index],0===e.active_options&&e.search_match&&(d+=1),e.active_options+=1),b.search_text=b.group?b.label:b.html,(!b.group||this.group_search)&&(b.search_match=this.search_string_match(b.search_text,c),b.search_match&&!b.group&&(d+=1),b.search_match?(f.length&&(g=b.search_text.search(i),h=b.search_text.substr(0,g+f.length)+"</em>"+b.search_text.substr(g+f.length),b.search_text=h.substr(0,g)+"<em>"+h.substr(g)),null!=e&&(e.group_match=!0)):null!=b.group_array_index&&this.results_data[b.group_array_index].search_match&&(b.search_match=!0)));return this.result_clear_highlight(),1>d&&f.length?(this.update_results_content(""),this.no_results(f)):(this.update_results_content(this.results_option_build()),this.winnow_results_set_highlight())},AbstractChosen.prototype.get_search_regex=function(a){var b;return b=this.search_contains?"":"^",new RegExp(b+a,"i")},AbstractChosen.prototype.search_string_match=function(a,b){var c,d,e,f;if(b.test(a))return!0;if(this.enable_split_word_search&&(a.indexOf(" ")>=0||0===a.indexOf("["))&&(d=a.replace(/\[|\]/g,"").split(" "),d.length))for(e=0,f=d.length;f>e;e++)if(c=d[e],b.test(c))return!0},AbstractChosen.prototype.choices_count=function(){var a,b,c,d;if(null!=this.selected_option_count)return this.selected_option_count;for(this.selected_option_count=0,d=this.form_field.options,b=0,c=d.length;c>b;b++)a=d[b],a.selected&&(this.selected_option_count+=1);return this.selected_option_count},AbstractChosen.prototype.choices_click=function(a){return a.preventDefault(),this.results_showing||this.is_disabled?void 0:this.results_show()},AbstractChosen.prototype.keyup_checker=function(a){var b,c;switch(b=null!=(c=a.which)?c:a.keyCode,this.search_field_scale(),b){case 8:if(this.is_multiple&&this.backstroke_length<1&&this.choices_count()>0)return this.keydown_backstroke();if(!this.pending_backstroke)return this.result_clear_highlight(),this.results_search();break;case 13:if(a.preventDefault(),this.results_showing)return this.result_select(a);break;case 27:return this.results_showing&&this.results_hide(),!0;case 9:case 38:case 40:case 16:case 91:case 17:break;default:return this.results_search()}},AbstractChosen.prototype.clipboard_event_checker=function(){var a=this;return setTimeout(function(){return a.results_search()},50)},AbstractChosen.prototype.container_width=function(){return null!=this.options.width?this.options.width:""+this.form_field.offsetWidth+"px"},AbstractChosen.prototype.include_option_in_results=function(a){return this.is_multiple&&!this.display_selected_options&&a.selected?!1:!this.display_disabled_options&&a.disabled?!1:a.empty?!1:!0},AbstractChosen.prototype.search_results_touchstart=function(a){return this.touch_started=!0,this.search_results_mouseover(a)},AbstractChosen.prototype.search_results_touchmove=function(a){return this.touch_started=!1,this.search_results_mouseout(a)},AbstractChosen.prototype.search_results_touchend=function(a){return this.touch_started?this.search_results_mouseup(a):void 0},AbstractChosen.prototype.outerHTML=function(a){var b;return a.outerHTML?a.outerHTML:(b=document.createElement("div"),b.appendChild(a),b.innerHTML)},AbstractChosen.browser_is_supported=function(){return"Microsoft Internet Explorer"===window.navigator.appName?document.documentMode>=8:/iP(od|hone)/i.test(window.navigator.userAgent)?!1:/Android/i.test(window.navigator.userAgent)&&/Mobile/i.test(window.navigator.userAgent)?!1:!0},AbstractChosen.default_multiple_text="Select Some Options",AbstractChosen.default_single_text="Select an Option",AbstractChosen.default_no_result_text="No results match",AbstractChosen}(),a=jQuery,a.fn.extend({chosen:function(b){return AbstractChosen.browser_is_supported()?this.each(function(){var c,d;c=a(this),d=c.data("chosen"),"destroy"===b&&d instanceof Chosen?d.destroy():d instanceof Chosen||c.data("chosen",new Chosen(this,b))}):this}}),Chosen=function(c){function Chosen(){return b=Chosen.__super__.constructor.apply(this,arguments)}return d(Chosen,c),Chosen.prototype.setup=function(){return this.form_field_jq=a(this.form_field),this.current_selectedIndex=this.form_field.selectedIndex,this.is_rtl=this.form_field_jq.hasClass("chosen-rtl")},Chosen.prototype.set_up_html=function(){var b,c;return b=["chosen-container"],b.push("chosen-container-"+(this.is_multiple?"multi":"single")),this.inherit_select_classes&&this.form_field.className&&b.push(this.form_field.className),this.is_rtl&&b.push("chosen-rtl"),c={"class":b.join(" "),style:"width: "+this.container_width()+";",title:this.form_field.title},this.form_field.id.length&&(c.id=this.form_field.id.replace(/[^\w]/g,"_")+"_chosen"),this.container=a("<div />",c),this.is_multiple?this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="'+this.default_text+'" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>'):this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>'+this.default_text+'</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>'),this.form_field_jq.hide().after(this.container),this.dropdown=this.container.find("div.chosen-drop").first(),this.search_field=this.container.find("input").first(),this.search_results=this.container.find("ul.chosen-results").first(),this.search_field_scale(),this.search_no_results=this.container.find("li.no-results").first(),this.is_multiple?(this.search_choices=this.container.find("ul.chosen-choices").first(),this.search_container=this.container.find("li.search-field").first()):(this.search_container=this.container.find("div.chosen-search").first(),this.selected_item=this.container.find(".chosen-single").first()),this.results_build(),this.set_tab_index(),this.set_label_behavior()},Chosen.prototype.on_ready=function(){return this.form_field_jq.trigger("chosen:ready",{chosen:this})},Chosen.prototype.register_observers=function(){var a=this;return this.container.bind("touchstart.chosen",function(b){return a.container_mousedown(b),b.preventDefault()}),this.container.bind("touchend.chosen",function(b){return a.container_mouseup(b),b.preventDefault()}),this.container.bind("mousedown.chosen",function(b){a.container_mousedown(b)}),this.container.bind("mouseup.chosen",function(b){a.container_mouseup(b)}),this.container.bind("mouseenter.chosen",function(b){a.mouse_enter(b)}),this.container.bind("mouseleave.chosen",function(b){a.mouse_leave(b)}),this.search_results.bind("mouseup.chosen",function(b){a.search_results_mouseup(b)}),this.search_results.bind("mouseover.chosen",function(b){a.search_results_mouseover(b)}),this.search_results.bind("mouseout.chosen",function(b){a.search_results_mouseout(b)}),this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen",function(b){a.search_results_mousewheel(b)}),this.search_results.bind("touchstart.chosen",function(b){a.search_results_touchstart(b)}),this.search_results.bind("touchmove.chosen",function(b){a.search_results_touchmove(b)}),this.search_results.bind("touchend.chosen",function(b){a.search_results_touchend(b)}),this.form_field_jq.bind("chosen:updated.chosen",function(b){a.results_update_field(b)}),this.form_field_jq.bind("chosen:activate.chosen",function(b){a.activate_field(b)}),this.form_field_jq.bind("chosen:open.chosen",function(b){a.container_mousedown(b)}),this.form_field_jq.bind("chosen:close.chosen",function(b){a.input_blur(b)}),this.search_field.bind("blur.chosen",function(b){a.input_blur(b)}),this.search_field.bind("keyup.chosen",function(b){a.keyup_checker(b)}),this.search_field.bind("keydown.chosen",function(b){a.keydown_checker(b)}),this.search_field.bind("focus.chosen",function(b){a.input_focus(b)}),this.search_field.bind("cut.chosen",function(b){a.clipboard_event_checker(b)}),this.search_field.bind("paste.chosen",function(b){a.clipboard_event_checker(b)}),this.is_multiple?this.search_choices.bind("click.chosen",function(b){a.choices_click(b)}):this.container.bind("click.chosen",function(a){a.preventDefault()})},Chosen.prototype.destroy=function(){return a(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.search_field[0].tabIndex&&(this.form_field_jq[0].tabIndex=this.search_field[0].tabIndex),this.container.remove(),this.form_field_jq.removeData("chosen"),this.form_field_jq.show()},Chosen.prototype.search_field_disabled=function(){return this.is_disabled=this.form_field_jq[0].disabled,this.is_disabled?(this.container.addClass("chosen-disabled"),this.search_field[0].disabled=!0,this.is_multiple||this.selected_item.unbind("focus.chosen",this.activate_action),this.close_field()):(this.container.removeClass("chosen-disabled"),this.search_field[0].disabled=!1,this.is_multiple?void 0:this.selected_item.bind("focus.chosen",this.activate_action))},Chosen.prototype.container_mousedown=function(b){return this.is_disabled||(b&&"mousedown"===b.type&&!this.results_showing&&b.preventDefault(),null!=b&&a(b.target).hasClass("search-choice-close"))?void 0:(this.active_field?this.is_multiple||!b||a(b.target)[0]!==this.selected_item[0]&&!a(b.target).parents("a.chosen-single").length||(b.preventDefault(),this.results_toggle()):(this.is_multiple&&this.search_field.val(""),a(this.container[0].ownerDocument).bind("click.chosen",this.click_test_action),this.results_show()),this.activate_field())},Chosen.prototype.container_mouseup=function(a){return"ABBR"!==a.target.nodeName||this.is_disabled?void 0:this.results_reset(a)},Chosen.prototype.search_results_mousewheel=function(a){var b;return a.originalEvent&&(b=a.originalEvent.deltaY||-a.originalEvent.wheelDelta||a.originalEvent.detail),null!=b?(a.preventDefault(),"DOMMouseScroll"===a.type&&(b=40*b),this.search_results.scrollTop(b+this.search_results.scrollTop())):void 0},Chosen.prototype.blur_test=function(){return!this.active_field&&this.container.hasClass("chosen-container-active")?this.close_field():void 0},Chosen.prototype.close_field=function(){return a(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.active_field=!1,this.results_hide(),this.container.removeClass("chosen-container-active"),this.clear_backstroke(),this.show_search_field_default(),this.search_field_scale()},Chosen.prototype.activate_field=function(){return this.container.addClass("chosen-container-active"),this.active_field=!0,this.search_field.val(this.search_field.val()),this.search_field.focus()},Chosen.prototype.test_active_click=function(b){var c;return c=a(b.target).closest(".chosen-container"),c.length&&this.container[0]===c[0]?this.active_field=!0:this.close_field()},Chosen.prototype.results_build=function(){return this.parsing=!0,this.selected_option_count=null,this.results_data=SelectParser.select_to_array(this.form_field),this.is_multiple?this.search_choices.find("li.search-choice").remove():this.is_multiple||(this.single_set_selected_text(),this.disable_search||this.form_field.options.length<=this.disable_search_threshold?(this.search_field[0].readOnly=!0,this.container.addClass("chosen-container-single-nosearch")):(this.search_field[0].readOnly=!1,this.container.removeClass("chosen-container-single-nosearch"))),this.update_results_content(this.results_option_build({first:!0})),this.search_field_disabled(),this.show_search_field_default(),this.search_field_scale(),this.parsing=!1},Chosen.prototype.result_do_highlight=function(a){var b,c,d,e,f;if(a.length){if(this.result_clear_highlight(),this.result_highlight=a,this.result_highlight.addClass("highlighted"),d=parseInt(this.search_results.css("maxHeight"),10),f=this.search_results.scrollTop(),e=d+f,c=this.result_highlight.position().top+this.search_results.scrollTop(),b=c+this.result_highlight.outerHeight(),b>=e)return this.search_results.scrollTop(b-d>0?b-d:0);if(f>c)return this.search_results.scrollTop(c)}},Chosen.prototype.result_clear_highlight=function(){return this.result_highlight&&this.result_highlight.removeClass("highlighted"),this.result_highlight=null},Chosen.prototype.results_show=function(){return this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.container.addClass("chosen-with-drop"),this.results_showing=!0,this.search_field.focus(),this.search_field.val(this.search_field.val()),this.winnow_results(),this.form_field_jq.trigger("chosen:showing_dropdown",{chosen:this}))},Chosen.prototype.update_results_content=function(a){return this.search_results.html(a)},Chosen.prototype.results_hide=function(){return this.results_showing&&(this.result_clear_highlight(),this.container.removeClass("chosen-with-drop"),this.form_field_jq.trigger("chosen:hiding_dropdown",{chosen:this})),this.results_showing=!1},Chosen.prototype.set_tab_index=function(){var a;return this.form_field.tabIndex?(a=this.form_field.tabIndex,this.form_field.tabIndex=-1,this.search_field[0].tabIndex=a):void 0},Chosen.prototype.set_label_behavior=function(){var b=this;return this.form_field_label=this.form_field_jq.parents("label"),!this.form_field_label.length&&this.form_field.id.length&&(this.form_field_label=a("label[for='"+this.form_field.id+"']")),this.form_field_label.length>0?this.form_field_label.bind("click.chosen",function(a){return b.is_multiple?b.container_mousedown(a):b.activate_field()}):void 0},Chosen.prototype.show_search_field_default=function(){return this.is_multiple&&this.choices_count()<1&&!this.active_field?(this.search_field.val(this.default_text),this.search_field.addClass("default")):(this.search_field.val(""),this.search_field.removeClass("default"))},Chosen.prototype.search_results_mouseup=function(b){var c;return c=a(b.target).hasClass("active-result")?a(b.target):a(b.target).parents(".active-result").first(),c.length?(this.result_highlight=c,this.result_select(b),this.search_field.focus()):void 0},Chosen.prototype.search_results_mouseover=function(b){var c;return c=a(b.target).hasClass("active-result")?a(b.target):a(b.target).parents(".active-result").first(),c?this.result_do_highlight(c):void 0},Chosen.prototype.search_results_mouseout=function(b){return a(b.target).hasClass("active-result")?this.result_clear_highlight():void 0},Chosen.prototype.choice_build=function(b){var c,d,e=this;return c=a("<li />",{"class":"search-choice"}).html("<span>"+this.choice_label(b)+"</span>"),b.disabled?c.addClass("search-choice-disabled"):(d=a("<a />",{"class":"search-choice-close","data-option-array-index":b.array_index}),d.bind("click.chosen",function(a){return e.choice_destroy_link_click(a)}),c.append(d)),this.search_container.before(c)},Chosen.prototype.choice_destroy_link_click=function(b){return b.preventDefault(),b.stopPropagation(),this.is_disabled?void 0:this.choice_destroy(a(b.target))},Chosen.prototype.choice_destroy=function(a){return this.result_deselect(a[0].getAttribute("data-option-array-index"))?(this.show_search_field_default(),this.is_multiple&&this.choices_count()>0&&this.search_field.val().length<1&&this.results_hide(),a.parents("li").first().remove(),this.search_field_scale()):void 0},Chosen.prototype.results_reset=function(){return this.reset_single_select_options(),this.form_field.options[0].selected=!0,this.single_set_selected_text(),this.show_search_field_default(),this.results_reset_cleanup(),this.form_field_jq.trigger("change"),this.active_field?this.results_hide():void 0},Chosen.prototype.results_reset_cleanup=function(){return this.current_selectedIndex=this.form_field.selectedIndex,this.selected_item.find("abbr").remove()},Chosen.prototype.result_select=function(a){var b,c;return this.result_highlight?(b=this.result_highlight,this.result_clear_highlight(),this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.is_multiple?b.removeClass("active-result"):this.reset_single_select_options(),b.addClass("result-selected"),c=this.results_data[b[0].getAttribute("data-option-array-index")],c.selected=!0,this.form_field.options[c.options_index].selected=!0,this.selected_option_count=null,this.is_multiple?this.choice_build(c):this.single_set_selected_text(this.choice_label(c)),(a.metaKey||a.ctrlKey)&&this.is_multiple||this.results_hide(),this.search_field.val(""),(this.is_multiple||this.form_field.selectedIndex!==this.current_selectedIndex)&&this.form_field_jq.trigger("change",{selected:this.form_field.options[c.options_index].value}),this.current_selectedIndex=this.form_field.selectedIndex,a.preventDefault(),this.search_field_scale())):void 0},Chosen.prototype.single_set_selected_text=function(a){return null==a&&(a=this.default_text),a===this.default_text?this.selected_item.addClass("chosen-default"):(this.single_deselect_control_build(),this.selected_item.removeClass("chosen-default")),this.selected_item.find("span").html(a)},Chosen.prototype.result_deselect=function(a){var b;return b=this.results_data[a],this.form_field.options[b.options_index].disabled?!1:(b.selected=!1,this.form_field.options[b.options_index].selected=!1,this.selected_option_count=null,this.result_clear_highlight(),this.results_showing&&this.winnow_results(),this.form_field_jq.trigger("change",{deselected:this.form_field.options[b.options_index].value}),this.search_field_scale(),!0)},Chosen.prototype.single_deselect_control_build=function(){return this.allow_single_deselect?(this.selected_item.find("abbr").length||this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'),this.selected_item.addClass("chosen-single-with-deselect")):void 0},Chosen.prototype.get_search_text=function(){return a("<div/>").text(a.trim(this.search_field.val())).html()},Chosen.prototype.winnow_results_set_highlight=function(){var a,b;return b=this.is_multiple?[]:this.search_results.find(".result-selected.active-result"),a=b.length?b.first():this.search_results.find(".active-result").first(),null!=a?this.result_do_highlight(a):void 0},Chosen.prototype.no_results=function(b){var c;return c=a('<li class="no-results">'+this.results_none_found+' "<span></span>"</li>'),c.find("span").first().html(b),this.search_results.append(c),this.form_field_jq.trigger("chosen:no_results",{chosen:this})},Chosen.prototype.no_results_clear=function(){return this.search_results.find(".no-results").remove()},Chosen.prototype.keydown_arrow=function(){var a;return this.results_showing&&this.result_highlight?(a=this.result_highlight.nextAll("li.active-result").first())?this.result_do_highlight(a):void 0:this.results_show()},Chosen.prototype.keyup_arrow=function(){var a;return this.results_showing||this.is_multiple?this.result_highlight?(a=this.result_highlight.prevAll("li.active-result"),a.length?this.result_do_highlight(a.first()):(this.choices_count()>0&&this.results_hide(),this.result_clear_highlight())):void 0:this.results_show()},Chosen.prototype.keydown_backstroke=function(){var a;return this.pending_backstroke?(this.choice_destroy(this.pending_backstroke.find("a").first()),this.clear_backstroke()):(a=this.search_container.siblings("li.search-choice").last(),a.length&&!a.hasClass("search-choice-disabled")?(this.pending_backstroke=a,this.single_backstroke_delete?this.keydown_backstroke():this.pending_backstroke.addClass("search-choice-focus")):void 0)},Chosen.prototype.clear_backstroke=function(){return this.pending_backstroke&&this.pending_backstroke.removeClass("search-choice-focus"),this.pending_backstroke=null},Chosen.prototype.keydown_checker=function(a){var b,c;switch(b=null!=(c=a.which)?c:a.keyCode,this.search_field_scale(),8!==b&&this.pending_backstroke&&this.clear_backstroke(),b){case 8:this.backstroke_length=this.search_field.val().length;break;case 9:this.results_showing&&!this.is_multiple&&this.result_select(a),this.mouse_on_container=!1;break;case 13:this.results_showing&&a.preventDefault();break;case 32:this.disable_search&&a.preventDefault();break;case 38:a.preventDefault(),this.keyup_arrow();break;case 40:a.preventDefault(),this.keydown_arrow()}},Chosen.prototype.search_field_scale=function(){var b,c,d,e,f,g,h,i,j;if(this.is_multiple){for(d=0,h=0,f="position:absolute; left: -1000px; top: -1000px; display:none;",g=["font-size","font-style","font-weight","font-family","line-height","text-transform","letter-spacing"],i=0,j=g.length;j>i;i++)e=g[i],f+=e+":"+this.search_field.css(e)+";";return b=a("<div />",{style:f}),b.text(this.search_field.val()),a("body").append(b),h=b.width()+25,b.remove(),c=this.container.outerWidth(),h>c-10&&(h=c-10),this.search_field.css({width:h+"px"})}},Chosen}(AbstractChosen)}).call(this);
;/**
 * @license
 * lodash 3.7.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -o ./lodash.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.7.0';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_DROP_WHILE_FLAG = 0,
      LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]+|(["'])(?:(?!\1)[^\n\\]|\\.)*?)\1\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [special characters](http://www.regular-expressions.info/characters.html#special).
   * In addition to special characters the forward slash is escaped to allow for
   * easier `eval` use and `Function` compilation.
   */
  var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to detect and test for whitespace. */
  var whitespace = (
    // Basic whitespace characters.
    ' \t\x0b\f\xa0\ufeff' +

    // Line terminators.
    '\n\r\u2028\u2029' +

    // Unicode category "Zs" space separators.
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document',
    'isFinite', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    'window'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used as an internal `_.debounce` options object by `_.throttle`. */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it is the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare to `other`.
   * @param {*} other The value to compare to `value`.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsReflexive = value === value,
          othIsReflexive = other === other;

      if (value > other || !valIsReflexive || (value === undefined && othIsReflexive)) {
        return 1;
      }
      if (value < other || !othIsReflexive || (other === undefined && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it is not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.max` and `_.min` as the default callback for string values.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the code unit of the first character of the string.
   */
  function charAtCallback(string) {
    return string.charCodeAt(0);
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare to `other`.
   * @param {Object} other The object to compare to `object`.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of each element
   * in a collection and stable sort them in the following order:
   *
   * If `orders` is unspecified, sort in ascending order for all properties.
   * Otherwise, for each property, sort in ascending order if its corresponding value in
   * orders is true, and descending order if false.
   *
   * @private
   * @param {Object} object The object to compare to `other`.
   * @param {Object} other The object to compare to `object`.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        return result * (orders[index] ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to detect DOM support. */
    var document = (document = context.window) && document.document;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = context._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      escapeRegExp(objToString)
      .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = isNative(ArrayBuffer = context.ArrayBuffer) && ArrayBuffer,
        bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice,
        ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        getOwnPropertySymbols = isNative(getOwnPropertySymbols = Object.getOwnPropertySymbols) && getOwnPropertySymbols,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        push = arrayProto.push,
        preventExtensions = isNative(Object.preventExtensions = Object.preventExtensions) && preventExtensions,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = isNative(Set = context.Set) && Set,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = isNative(Uint8Array = context.Uint8Array) && Uint8Array,
        WeakMap = isNative(WeakMap = context.WeakMap) && WeakMap;

    /** Used to clone array buffers. */
    var Float64Array = (function() {
      // Safari 5 errors when using an array buffer to initialize a typed array
      // where the array buffer's `byteLength` is not a multiple of the typed
      // array's `BYTES_PER_ELEMENT`.
      try {
        var func = isNative(func = context.Float64Array) && func,
            result = new func(new ArrayBuffer(10), 0, 1) && func;
      } catch(e) {}
      return result;
    }());

    /** Used as `baseAssign`. */
    var nativeAssign = (function() {
      // Avoid `Object.assign` in Firefox 34-37 which have an early implementation
      // with a now defunct try/catch behavior. See https://bugzilla.mozilla.org/show_bug.cgi?id=1103344
      // for more details.
      //
      // Use `Object.preventExtensions` on a plain object instead of simply using
      // `Object('x')` because Chrome and IE fail to throw an error when attempting
      // to assign values to readonly indexes of strings in strict mode.
      var object = { '1': 0 },
          func = preventExtensions && isNative(func = Object.assign) && func;

      try { func(preventExtensions(object), 'xo'); } catch(e) {}
      return !object[1] && func;
    }());

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsFinite = context.isFinite,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = isNative(nativeNow = Date.now) && nativeNow,
        nativeNumIsFinite = isNative(nativeNumIsFinite = Number.isFinite) && nativeNumIsFinite,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1,
        MAX_ARRAY_INDEX =  MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used as the size, in bytes, of each `Float64Array` element. */
    var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;

    /**
     * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that return a boolean or single value will
     * automatically end the chain returning the unwrapped value. Explicit chaining
     * may be enabled using `_.chain`. The execution of chained methods is lazy,
     * that is, execution is deferred until `_#value` is implicitly or explicitly
     * called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization that merges iteratees to avoid creating intermediate
     * arrays and reduce the number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,
     * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,
     * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,
     * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,
     * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,
     * `keysIn`, `map`, `mapValues`, `matches`, `matchesProperty`, `memoize`,
     * `merge`, `mixin`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `reverse`,
     * `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`, `sortByOrder`, `splice`,
     * `spread`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`,
     * `throttle`, `thru`, `times`, `toArray`, `toPlainObject`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `valuesIn`, `where`,
     * `without`, `wrap`, `xor`, `zip`, and `zipObject`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,
     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,
     * `identity`, `includes`, `indexOf`, `inRange`, `isArguments`, `isArray`,
     * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`, `isFinite`
     * `isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`,
     * `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `isTypedArray`,
     * `join`, `kebabCase`, `last`, `lastIndexOf`, `max`, `min`, `noConflict`,
     * `noop`, `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`,
     * `reduce`, `reduceRight`, `repeat`, `result`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`, `startsWith`,
     * `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`, `unescape`,
     * `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    (function(x) {
      var Ctor = function() { this.x = x; },
          object = { '0': x, 'length': x },
          props = [];

      Ctor.prototype = { 'valueOf': x, 'y': x };
      for (var key in new Ctor) { props.push(key); }

      /**
       * Detect if functions can be decompiled by `Function#toString`
       * (all but Firefox OS certified apps, older Opera mobile browsers, and
       * the PlayStation 3; forced `false` for Windows 8 apps).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcDecomp = /\bthis\b/.test(function() { return this; });

      /**
       * Detect if `Function#name` is supported (all but IE).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcNames = typeof Function.name == 'string';

      /**
       * Detect if the DOM is supported.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.dom = document.createDocumentFragment().nodeType === 11;
      } catch(e) {
        support.dom = false;
      }

      /**
       * Detect if `arguments` object indexes are non-enumerable.
       *
       * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object
       * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat
       * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`
       * checks for indexes that exceed the number of function parameters and
       * whose associated argument values are `0`.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
      } catch(e) {
        support.nonEnumArgs = true;
      }
    }(1, 0));

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = null;
      this.__dir__ = 1;
      this.__dropCount__ = 0;
      this.__filtered__ = false;
      this.__iteratees__ = null;
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = null;
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var actions = this.__actions__,
          iteratees = this.__iteratees__,
          views = this.__views__,
          result = new LazyWrapper(this.__wrapped__);

      result.__actions__ = actions ? arrayCopy(actions) : null;
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = iteratees ? arrayCopy(iteratees) : null;
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = views ? arrayCopy(views) : null;
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value();
      if (!isArray(array)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var dir = this.__dir__,
          isRight = dir < 0,
          view = getView(0, array.length, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          takeCount = nativeMin(length, this.__takeCount__),
          iteratees = this.__iteratees__,
          iterLength = iteratees ? iteratees.length : 0,
          resIndex = 0,
          result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type;

          if (type == LAZY_DROP_WHILE_FLAG) {
            if (data.done && (isRight ? (index > data.index) : (index < data.index))) {
              data.count = 0;
              data.done = false;
            }
            data.index = index;
            if (!data.done) {
              var limit = data.limit;
              if (!(data.done = limit > -1 ? (data.count++ >= limit) : !iteratee(value))) {
                continue outer;
              }
            }
          } else {
            var computed = iteratee(value);
            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * A specialized version of `_.max` for arrays without support for iteratees.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     */
    function arrayMax(array) {
      var index = -1,
          length = array.length,
          result = NEGATIVE_INFINITY;

      while (++index < length) {
        var value = array[index];
        if (value > result) {
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.min` for arrays without support for iteratees.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     */
    function arrayMin(array) {
      var index = -1,
          length = array.length,
          result = POSITIVE_INFINITY;

      while (++index < length) {
        var value = array[index];
        if (value < result) {
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for iteratees.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     */
    function arraySum(array) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +array[length] || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var props = keys(source);
      push.apply(props, getSymbols(source));

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    var baseAssign = nativeAssign || function(object, source) {
      return source == null
        ? object
        : baseCopy(source, getSymbols(source), baseCopy(source, keys(source), object));
    };

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          length = collection.length,
          isArr = isLength(length),
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function Object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          Object.prototype = prototype;
          var result = new Object;
          Object.prototype = null;
        }
        return result || context.Object();
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= 200) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} isDeep Specify a deep flatten.
     * @param {boolean} isStrict Restrict flattening to arrays and `arguments` objects.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            value = baseFlatten(value, isDeep, isStrict);
          }
          var valIndex = -1,
              valLength = value.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[++resIndex] = value[valIndex];
          }
        } else if (!isStrict) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = -1,
          length = path.length;

      while (object != null && ++index < length) {
        var result = object = object[path[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      // Exit early for identical values.
      if (value === other) {
        // Treat `+0` vs. `-0` as not equal.
        return value !== 0 || (1 / value == 1 / other);
      }
      var valType = typeof value,
          othType = typeof other;

      // Exit early for unlike primitive values.
      if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||
          value == null || other == null) {
        // Return `false` unless both values are `NaN`.
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (valWrapped || othWrapped) {
          return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The source property names to match.
     * @param {Array} values The source values to match.
     * @param {Array} strictCompareFlags Strict comparison flags for source values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
      var index = -1,
          length = props.length,
          noCustomizer = !customizer;

      while (++index < length) {
        if ((noCustomizer && strictCompareFlags[index])
              ? values[index] !== object[props[index]]
              : !(props[index] in object)
            ) {
          return false;
        }
      }
      index = -1;
      while (++index < length) {
        var key = props[index],
            objValue = object[key],
            srcValue = values[index];

        if (noCustomizer && strictCompareFlags[index]) {
          var result = objValue !== undefined || (key in object);
        } else {
          result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (result === undefined) {
            result = baseIsEqual(srcValue, objValue, customizer, true);
          }
        }
        if (!result) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          length = getLength(collection),
          result = isLength(length) ? Array(length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var props = keys(source),
          length = props.length;

      if (!length) {
        return constant(true);
      }
      if (length == 1) {
        var key = props[0],
            value = source[key];

        if (isStrictComparable(value)) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === value && (value !== undefined || (key in toObject(object)));
          };
        }
      }
      var values = Array(length),
          strictCompareFlags = Array(length);

      while (length--) {
        value = source[props[length]];
        values[length] = value;
        strictCompareFlags[length] = isStrictComparable(value);
      }
      return function(object) {
        return object != null && baseIsMatch(toObject(object), props, values, strictCompareFlags);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not which does
     * not clone `value`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} value The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, value) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(value),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === value
          ? (value !== undefined || (key in object))
          : baseIsEqual(value, object[key], null, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));
      if (!isSrcArr) {
        var props = keys(source);
        push.apply(props, getSymbols(source));
      }
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((isSrcArr || result !== undefined) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isLength(srcValue.length) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (getLength(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = indexes.length;
      while (length--) {
        var index = parseFloat(indexes[length]);
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= 200,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var args = [result],
            action = actions[index];

        push.apply(args, action.args);
        result = action.func.apply(action.thisArg, args);
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (retHighest ? (computed <= value) : (computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = floor((low + high) / 2),
            computed = iteratee(array[mid]),
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || computed !== undefined);
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      return bufferSlice.call(buffer, 0);
    }
    if (!bufferSlice) {
      // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.
      bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
        var byteLength = buffer.byteLength,
            floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,
            offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,
            result = new ArrayBuffer(byteLength);

        if (floatLength) {
          var view = new Float64Array(result, 0, floatLength);
          view.set(new Float64Array(buffer, 0, floatLength));
        }
        if (byteLength != offset) {
          view = new Uint8Array(result, offset);
          view.set(new Uint8Array(buffer, offset));
        }
        return result;
      };
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(argsLength + leftLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var pad = argsIndex;
      while (++rightIndex < rightLength) {
        result[pad + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[pad + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an accumulator
     * object composed from the results of running each element in the collection
     * through an iteratee.
     *
     * **Note:** This function is used to create `_.countBy`, `_.groupBy`, `_.indexBy`,
     * and `_.partition`.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that assigns properties of source object(s) to a given
     * destination object.
     *
     * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 && sources[length - 2],
            guard = length > 2 && sources[2],
            thisArg = length > 1 && sources[length - 1];

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : null;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? null : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
      return new SetCache(values);
    };

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, arguments);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = null;
        }
        var result = createWrapper(func, flag, null, null, null, null, null, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} arrayFunc The function to get the extremum value from an array.
     * @param {boolean} [isMin] Specify returning the minimum, instead of the maximum,
     *  extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(arrayFunc, isMin) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = null;
        }
        var func = getCallback(),
            noIteratee = iteratee == null;

        if (!(func === baseCallback && noIteratee)) {
          noIteratee = false;
          iteratee = func(iteratee, thisArg, 3);
        }
        if (noIteratee) {
          var isArr = isArray(collection);
          if (!isArr && isString(collection)) {
            iteratee = charAtCallback;
          } else {
            return arrayFunc(isArr ? collection : toIterable(collection));
          }
        }
        return extremumBy(collection, iteratee, isMin);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      }
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var length = arguments.length;
        if (!length) {
          return function() { return arguments[0]; };
        }
        var wrapper,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var funcName = wrapper ? '' : getFuncName(func);
          wrapper = funcName == 'wrapper' ? new LodashWrapper([]) : wrapper;
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];
          funcName = getFuncName(func);

          var data = funcName == 'wrapper' ? getData(func) : null;
          if (data && isLaziable(data[0])) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments;
          if (wrapper && args.length == 1 && isArray(args[0])) {
            return wrapper.plant(args[0]).value();
          }
          var index = 0,
              result = funcs[index].apply(this, args);

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return string && ((fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string));
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, null, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG;

      var Ctor = !isBindKey && createCtorWrapper(func),
          key = func;

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : null,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : null,
                newHoldersRight = isCurry ? null : argsHolders,
                newPartials = isCurry ? args : null,
                newPartialsRight = isCurry ? null : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this;
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        var fn = (this && this !== root && this instanceof wrapper) ? (Ctor || createCtorWrapper(func)) : func;
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(argsLength + leftLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var func = getCallback(iteratee);
        return (func === baseCallback && iteratee == null)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, func(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = null;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = null;
      }
      var data = isBindKey ? null : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length,
          result = true;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Deep compare the contents, ignoring non-numeric properties.
      while (result && ++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        result = undefined;
        if (customizer) {
          result = isLoose
            ? customizer(othValue, arrValue, index)
            : customizer(arrValue, othValue, index);
        }
        if (result === undefined) {
          // Recursively compare arrays (susceptible to call stack limits).
          if (isLoose) {
            var othIndex = othLength;
            while (othIndex--) {
              othValue = other[othIndex];
              result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              if (result) {
                break;
              }
            }
          } else {
            result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
          }
        }
      }
      return !!result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} value The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            // But, treat `-0` vs. `+0` as not equal.
            : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var skipCtor = isLoose,
          index = -1;

      while (++index < objLength) {
        var key = objProps[index],
            result = isLoose ? key in other : hasOwnProperty.call(other, key);

        if (result) {
          var objValue = object[key],
              othValue = other[key];

          result = undefined;
          if (customizer) {
            result = isLoose
              ? customizer(othValue, objValue, key)
              : customizer(objValue, othValue, key);
          }
          if (result === undefined) {
            // Recursively compare objects (susceptible to call stack limits).
            result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB);
          }
        }
        if (!result) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [isMin] Specify returning the minimum, instead of the
     *  maximum, extremum value.
     * @returns {*} Returns the extremum value.
     */
    function extremumBy(collection, iteratee, isMin) {
      var exValue = isMin ? POSITIVE_INFINITY : NEGATIVE_INFINITY,
          computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = iteratee(value, index, collection);
        if ((isMin ? (current < computed) : (current > computed)) ||
            (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    var getFuncName = (function() {
      if (!support.funcNames) {
        return constant('');
      }
      if (constant.name == 'constant') {
        return baseProperty('name');
      }
      return function(func) {
        var result = func.name,
            array = realNames[result],
            length = array ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      };
    }());

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * in Safari on iOS 8.1 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Creates an array of the own symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !getOwnPropertySymbols ? constant([]) : function(object) {
      return getOwnPropertySymbols(toObject(object));
    };

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} [transforms] The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms ? transforms.length : 0;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = +value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number') {
        var length = getLength(object),
            prereq = isLength(length) && isIndex(index, length);
      } else {
        prereq = type == 'string' && index in object;
      }
      if (prereq) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      return !!funcName && func === lodash[funcName] && funcName in LazyWrapper.prototype;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * A specialized version of `_.pick` that picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` that picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `_.isPlainObject` which checks if `value`
     * is an object created by the `Object` constructor or has a `[[Prototype]]`
     * of `null`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var Ctor,
          support = lodash.support;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag) ||
          (!hasOwnProperty.call(value, 'constructor') &&
            (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length,
          support = lodash.support;

      var allowIndexes = length && isLength(length) &&
        (isArray(object) || (support.nonEnumArgs && isArguments(object)));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it is not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isLength(getLength(value))) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it is not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it is not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(+size || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(ceil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using
     * `SameValueZero` for equality comparisons.
     *
     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * comparisons are like strict equality comparisons, e.g. `===`, except that
     * `NaN` matches `NaN`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isArray(array) || isArguments(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using `SameValueZero` for equality comparisons. If `fromIndex` is negative,
     * it is used as the offset from the end of `array`. If `array` is sorted
     * providing `true` for `fromIndex` performs a faster binary search.
     *
     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * comparisons are like strict equality comparisons, e.g. `===`, except that
     * `NaN` matches `NaN`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value),
            other = array[index];

        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values in all provided arrays using `SameValueZero`
     * for equality comparisons.
     *
     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * comparisons are like strict equality comparisons, e.g. `===`, except that
     * `NaN` matches `NaN`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = [],
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push((isCommon && value.length >= 120) ? createCache(argsIndex && value) : null);
        }
      }
      argsLength = args.length;
      if (argsLength < 2) {
        return result;
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          argsIndex = argsLength;
          while (--argsIndex) {
            var cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using `SameValueZero` for equality
     * comparisons.
     *
     * **Notes:**
     *  - Unlike `_.without`, this method mutates `array`
     *  - [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     *    comparisons are like strict equality comparisons, e.g. `===`, except
     *    that `NaN` matches `NaN`
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      array || (array = []);
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * `SameValueZero` for equality comparisons.
     *
     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * comparisons are like strict equality comparisons, e.g. `===`, except that
     * `NaN` matches `NaN`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using `SameValueZero` for
     * equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * comparisons are like strict equality comparisons, e.g. `===`, except that
     * `NaN` matches `NaN`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
        isSorted = false;
      }
      var func = getCallback();
      if (!(func === baseCallback && iteratee == null)) {
        iteratee = func(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-`_.zip`
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      var index = -1,
          length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0,
          result = Array(length);

      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * Creates an array excluding all provided values using `SameValueZero` for
     * equality comparisons.
     *
     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * comparisons are like strict equality comparisons, e.g. `===`, except that
     * `NaN` matches `NaN`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return (isArray(array) || isArguments(array))
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseDifference(result, array).concat(baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapper = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapper = wrapper.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapper.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapper = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapper = wrapper.plant(other);
     *
     * otherWrapper.value();
     * // => [9, 16]
     *
     * wrapper.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        if (this.__actions__.length) {
          value = new LazyWrapper(this);
        }
        return new LodashWrapper(value.reverse(), this.__chain__);
      }
      return this.thru(function(value) {
        return value.reverse();
      });
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      var length = collection ? getLength(collection) : 0;
      if (isLength(length)) {
        collection = toIterable(collection);
      }
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = null;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using `SameValueZero` for equality
     * comparisons. If `fromIndex` is negative, it is used as the offset from
     * the end of `collection`.
     *
     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * comparisons are like strict equality comparisons, e.g. `===`, except that
     * `NaN` matches `NaN`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (!length) {
        return false;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex < length && collection.indexOf(target, fromIndex) > -1)
        : (getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` on each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          length = getLength(collection),
          result = isLength(length) ? Array(length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : (isProp && value != null && value[path]);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as interatees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`, `drop`,
     * `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`, `parseInt`,
     * `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimLeft`,
     * `trimRight`, `trunc`, `random`, `range`, `sample`, `some`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as interatees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `includes`, `merge`, `sortByAll`, and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight =  createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(n < 0 ? 0 : (+n || 0), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      collection = toIterable(collection);

      var index = -1,
          length = collection.length,
          result = Array(length);

      while (++index < length) {
        var rand = baseRandom(0, index);
        if (index != rand) {
          result[index] = result[rand];
        }
        result[rand] = collection[index];
      }
      return result;
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = null;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = null;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. A truthy value in `orders` will
     * sort the corresponding property name in ascending order while a falsey
     * value will sort it in descending order.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], [true, false]), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = null;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = null;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, null, null, null, null, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = null;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a function that delays invoking `func` until after `wait` milliseconds
     * have elapsed since the last time it was invoked. The created function comes
     * with a `cancel` method to cancel delayed invocations. Provide an options
     * object to indicate that `func` should be invoked on the leading and/or
     * trailing edge of the `wait` timeout. Subsequent calls to the debounced
     * function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            cache = memoized.cache,
            key = resolver ? resolver.apply(this, args) : args[0];

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, null, null, null, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a function that only invokes `func` at most once per every `wait`
     * milliseconds. The created function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the throttled function return the result of the last
     * `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = +wait;
      debounceOptions.trailing = trailing;
      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, null, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
      return baseClone(value, isDeep, customizer);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
      return baseClone(value, true, customizer);
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      var length = isObjectLike(value) ? value.length : undefined;
      return isLength(length) && objToString.call(value) == argsTag;
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) &&
        (objToString.call(value).indexOf('Element') > -1);
    }
    // Fallback for environments without DOM support.
    if (!support.dom) {
      isElement = function(value) {
        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
      };
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      var length = getLength(value);
      if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
      if (!customizer && isStrictComparable(value) && isStrictComparable(other)) {
        return value === other;
      }
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    var isFinite = nativeNumIsFinite || function(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    };

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    var isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return objToString.call(value) == funcTag;
    };

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return type == 'function' || (!!value && type == 'object');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      var props = keys(source),
          length = props.length;

      if (!length) {
        return true;
      }
      if (object == null) {
        return false;
      }
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
      object = toObject(object);
      if (!customizer && length == 1) {
        var key = props[0],
            value = source[key];

        if (isStrictComparable(value)) {
          return value === object[key] && (value !== undefined || (key in object));
        }
      }
      var values = Array(length),
          strictCompareFlags = Array(length);

      while (length--) {
        value = values[length] = source[props[length]];
        strictCompareFlags[length] = isStrictComparable(value);
      }
      return baseIsMatch(object, props, values, strictCompareFlags, customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (objToString.call(value) == funcTag) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && objToString.call(value) == objectTag)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return (isObjectLike(value) && objToString.call(value) == regexpTag) || false;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).
     *
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = null;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = restParam(function(args) {
      var object = args[0];
      if (object == null) {
        return object;
      }
      args.push(assignDefaults);
      return assign.apply(undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value of `path` on `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
        result = object != null && hasOwnProperty.call(object, path);
      }
      return result;
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = null;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (object) {
        var Ctor = object.constructor,
            length = object.length;
      }
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isLength(length))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee, thisArg) {
      var result = {};
      iteratee = getCallback(iteratee, thisArg, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If `predicate` is provided it is invoked for each property
     * of `object` omitting the properties `predicate` returns truthy for. The
     * predicate is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          endIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == endIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) && Ctor.prototype);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (typeof end === 'undefined') {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = null;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't require escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, '\\$&')
        : string;
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it is shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = floor(mid),
          rightLength = ceil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it is shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it is shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard && isIterateeCall(string, radix, guard)) {
        radix = 0;
      }
      return nativeParseInt(string, radix);
    }
    // Fallback for environments with pre-ES5 implementations.
    if (nativeParseInt(whitespace + '08') != 8) {
      parseInt = function(string, radix, guard) {
        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
        // Chrome fails to trim leading <BOM> whitespace characters.
        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        string = trim(string);
        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
      };
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = floor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = null;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it is longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = null;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = null;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = null;
      }
      return baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function which performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function which compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} value The value to compare.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, value) {
      return baseMatchesProperty(path, baseClone(value, true));
    }

    /**
     * Creates a function which invokes the method at `path` on a given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      }
    });

    /**
     * The opposite of `_.method`; this method creates a function which invokes
     * the method at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * // use `_.runInContext` to avoid conflicts (esp. in Node.js)
     * var _ = require('lodash').runInContext();
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj && keys(source),
            methodNames = props && props.length && baseFunctions(source, props);

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              var args = [this.value()];
              push.apply(args, arguments);
              return func.apply(object, args);
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function which returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function which returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function which returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = null;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(ceil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = floor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(arrayMax);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(arrayMin, true);

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = null;
      }
      var func = getCallback(),
          noIteratee = iteratee == null;

      if (!(func === baseCallback && noIteratee)) {
        noIteratee = false;
        iteratee = func(iteratee, thisArg, 3);
      }
      return noIteratee
        ? arraySum(isArray(collection) ? collection : toIterable(collection))
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.get = get;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['dropWhile', 'filter', 'map', 'takeWhile'], function(methodName, type) {
      var isFilter = type != LAZY_MAP_FLAG,
          isDropWhile = type == LAZY_DROP_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var filtered = this.__filtered__,
            result = (filtered && isDropWhile) ? new LazyWrapper(this) : this.clone(),
            iteratees = result.__iteratees__ || (result.__iteratees__ = []);

        iteratees.push({
          'done': false,
          'count': 0,
          'index': 0,
          'iteratee': getCallback(iteratee, thisArg, 1),
          'limit': -1,
          'type': type
        });

        result.__filtered__ = filtered || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      var whileName = methodName + 'While';

      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__,
            result = (filtered && !index) ? this.dropWhile() : this.clone();

        n = n == null ? 1 : nativeMax(floor(n) || 0, 0);
        if (filtered) {
          if (index) {
            result.__takeCount__ = nativeMin(result.__takeCount__, n);
          } else {
            last(result.__iteratees__).limit = n;
          }
        } else {
          var views = result.__views__ || (result.__views__ = []);
          views.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };

      LazyWrapper.prototype[methodName + 'RightWhile'] = function(predicate, thisArg) {
        return this.reverse()[whileName](predicate, thisArg).reverse();
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);
      var result = start < 0 ? this.takeRight(-start) : this.drop(start);

      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.toArray = function() {
      return this.drop(0);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (!lodashFunc) {
        return;
      }
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments,
            length = args.length,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // avoid lazy use if the iteratee has a "length" value other than `1`
          isLazy = useLazy = false;
        }
        var onlyLazy = isLazy && !isHybrid;
        if (retUnwrapped && !chainAll) {
          return onlyLazy
            ? func.call(value)
            : lodashFunc.call(lodash, this.value());
        }
        var interceptor = function(value) {
          var otherArgs = [value];
          push.apply(otherArgs, args);
          return lodashFunc.apply(lodash, otherArgs);
        };
        if (useLazy) {
          var wrapper = onlyLazy ? value : new LazyWrapper(this),
              result = func.apply(wrapper, args);

          if (!retUnwrapped && (isHybrid || result.__actions__)) {
            var actions = result.__actions__ || (result.__actions__ = []);
            actions.push({ 'func': thru, 'args': [interceptor], 'thisArg': lodash });
          }
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['concat', 'join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(null, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': null }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Narwhal or Rhino -require.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

;define("ic-ajax",
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /*!
     * ic-ajax
     *
     * - (c) 2013 Instructure, Inc
     * - please see license at https://github.com/instructure/ic-ajax/blob/master/LICENSE
     * - inspired by discourse ajax: https://github.com/discourse/discourse/blob/master/app/assets/javascripts/discourse/mixins/ajax.js#L19
     */

    var Ember = __dependency1__["default"] || __dependency1__;

    /*
     * jQuery.ajax wrapper, supports the same signature except providing
     * `success` and `error` handlers will throw an error (use promises instead)
     * and it resolves only the response (no access to jqXHR or textStatus).
     */

    function request() {
      return raw.apply(null, arguments).then(function(result) {
        return result.response;
      }, null, 'ic-ajax: unwrap raw ajax response');
    }

    __exports__.request = request;__exports__["default"] = request;

    /*
     * Same as `request` except it resolves an object with `{response, textStatus,
     * jqXHR}`, useful if you need access to the jqXHR object for headers, etc.
     */

    function raw() {
      return makePromise(parseArgs.apply(null, arguments));
    }

    __exports__.raw = raw;var __fixtures__ = {};
    __exports__.__fixtures__ = __fixtures__;
    /*
     * Defines a fixture that will be used instead of an actual ajax
     * request to a given url. This is useful for testing, allowing you to
     * stub out responses your application will send without requiring
     * libraries like sinon or mockjax, etc.
     *
     * For example:
     *
     *    defineFixture('/self', {
     *      response: { firstName: 'Ryan', lastName: 'Florence' },
     *      textStatus: 'success'
     *      jqXHR: {}
     *    });
     *
     * @param {String} url
     * @param {Object} fixture
     */

    function defineFixture(url, fixture) {
      if (fixture.response) {
        fixture.response = JSON.parse(JSON.stringify(fixture.response));
      }
      __fixtures__[url] = fixture;
    }

    __exports__.defineFixture = defineFixture;/*
     * Looks up a fixture by url.
     *
     * @param {String} url
     */

    function lookupFixture (url) {
      return __fixtures__ && __fixtures__[url];
    }

    __exports__.lookupFixture = lookupFixture;function makePromise(settings) {
      return new Ember.RSVP.Promise(function(resolve, reject) {
        var fixture = lookupFixture(settings.url);
        if (fixture) {
          if (fixture.textStatus === 'success' || fixture.textStatus == null) {
            return Ember.run.later(null, resolve, fixture);
          } else {
            return Ember.run.later(null, reject, fixture);
          }
        }
        settings.success = makeSuccess(resolve);
        settings.error = makeError(reject);
        Ember.$.ajax(settings);
      }, 'ic-ajax: ' + (settings.type || 'GET') + ' to ' + settings.url);
    };

    function parseArgs() {
      var settings = {};
      if (arguments.length === 1) {
        if (typeof arguments[0] === "string") {
          settings.url = arguments[0];
        } else {
          settings = arguments[0];
        }
      } else if (arguments.length === 2) {
        settings = arguments[1];
        settings.url = arguments[0];
      }
      if (settings.success || settings.error) {
        throw new Ember.Error("ajax should use promises, received 'success' or 'error' callback");
      }
      return settings;
    }

    function makeSuccess(resolve) {
      return function(response, textStatus, jqXHR) {
        Ember.run(null, resolve, {
          response: response,
          textStatus: textStatus,
          jqXHR: jqXHR
        });
      }
    }

    function makeError(reject) {
      return function(jqXHR, textStatus, errorThrown) {
        Ember.run(null, reject, {
          jqXHR: jqXHR,
          textStatus: textStatus,
          errorThrown: errorThrown
        });
      };
    }
  });
;(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  global.FakeXMLHttpRequest = factory()
}(this, function () { 'use strict';

  /**
   * Minimal Event interface implementation
   *
   * Original implementation by Sven Fuchs: https://gist.github.com/995028
   * Modifications and tests by Christian Johansen.
   *
   * @author Sven Fuchs (svenfuchs@artweb-design.de)
   * @author Christian Johansen (christian@cjohansen.no)
   * @license BSD
   *
   * Copyright (c) 2011 Sven Fuchs, Christian Johansen
   */

  var _Event = function Event(type, bubbles, cancelable, target) {
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
    this.target = target;
  };

  _Event.prototype = {
    stopPropagation: function () {},
    preventDefault: function () {
      this.defaultPrevented = true;
    }
  };

  /*
    Used to set the statusText property of an xhr object
  */
  var httpStatusCodes = {
    100: "Continue",
    101: "Switching Protocols",
    200: "OK",
    201: "Created",
    202: "Accepted",
    203: "Non-Authoritative Information",
    204: "No Content",
    205: "Reset Content",
    206: "Partial Content",
    300: "Multiple Choice",
    301: "Moved Permanently",
    302: "Found",
    303: "See Other",
    304: "Not Modified",
    305: "Use Proxy",
    307: "Temporary Redirect",
    400: "Bad Request",
    401: "Unauthorized",
    402: "Payment Required",
    403: "Forbidden",
    404: "Not Found",
    405: "Method Not Allowed",
    406: "Not Acceptable",
    407: "Proxy Authentication Required",
    408: "Request Timeout",
    409: "Conflict",
    410: "Gone",
    411: "Length Required",
    412: "Precondition Failed",
    413: "Request Entity Too Large",
    414: "Request-URI Too Long",
    415: "Unsupported Media Type",
    416: "Requested Range Not Satisfiable",
    417: "Expectation Failed",
    422: "Unprocessable Entity",
    500: "Internal Server Error",
    501: "Not Implemented",
    502: "Bad Gateway",
    503: "Service Unavailable",
    504: "Gateway Timeout",
    505: "HTTP Version Not Supported"
  };


  /*
    Cross-browser XML parsing. Used to turn
    XML responses into Document objects
    Borrowed from JSpec
  */
  function parseXML(text) {
    var xmlDoc;

    if (typeof DOMParser != "undefined") {
      var parser = new DOMParser();
      xmlDoc = parser.parseFromString(text, "text/xml");
    } else {
      xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
      xmlDoc.async = "false";
      xmlDoc.loadXML(text);
    }

    return xmlDoc;
  }

  /*
    Without mocking, the native XMLHttpRequest object will throw
    an error when attempting to set these headers. We match this behavior.
  */
  var unsafeHeaders = {
    "Accept-Charset": true,
    "Accept-Encoding": true,
    "Connection": true,
    "Content-Length": true,
    "Cookie": true,
    "Cookie2": true,
    "Content-Transfer-Encoding": true,
    "Date": true,
    "Expect": true,
    "Host": true,
    "Keep-Alive": true,
    "Referer": true,
    "TE": true,
    "Trailer": true,
    "Transfer-Encoding": true,
    "Upgrade": true,
    "User-Agent": true,
    "Via": true
  };

  /*
    Adds an "event" onto the fake xhr object
    that just calls the same-named method. This is
    in case a library adds callbacks for these events.
  */
  function _addEventListener(eventName, xhr){
    xhr.addEventListener(eventName, function (event) {
      var listener = xhr["on" + eventName];

      if (listener && typeof listener == "function") {
        listener(event);
      }
    });
  }

  function EventedObject() {
    this._eventListeners = {};
    var events = ["loadstart", "progress", "load", "abort", "loadend"];
    for (var i = events.length - 1; i >= 0; i--) {
      _addEventListener(events[i], this);
    }
  };

  EventedObject.prototype = {
    /*
      Duplicates the behavior of native XMLHttpRequest's addEventListener function
    */
    addEventListener: function addEventListener(event, listener) {
      this._eventListeners[event] = this._eventListeners[event] || [];
      this._eventListeners[event].push(listener);
    },

    /*
      Duplicates the behavior of native XMLHttpRequest's removeEventListener function
    */
    removeEventListener: function removeEventListener(event, listener) {
      var listeners = this._eventListeners[event] || [];

      for (var i = 0, l = listeners.length; i < l; ++i) {
        if (listeners[i] == listener) {
          return listeners.splice(i, 1);
        }
      }
    },

    /*
      Duplicates the behavior of native XMLHttpRequest's dispatchEvent function
    */
    dispatchEvent: function dispatchEvent(event) {
      var type = event.type;
      var listeners = this._eventListeners[type] || [];

      for (var i = 0; i < listeners.length; i++) {
        if (typeof listeners[i] == "function") {
          listeners[i].call(this, event);
        } else {
          listeners[i].handleEvent(event);
        }
      }

      return !!event.defaultPrevented;
    },

    /*
      Triggers an `onprogress` event with the given parameters.
    */
    _progress: function _progress(lengthComputable, loaded, total) {
      var event = new _Event('progress');
      event.target = this;
      event.lengthComputable = lengthComputable;
      event.loaded = loaded;
      event.total = total;
      this.dispatchEvent(event);
    }
  }

  /*
    Constructor for a fake window.XMLHttpRequest
  */
  function FakeXMLHttpRequest() {
    EventedObject.call(this);
    this.readyState = FakeXMLHttpRequest.UNSENT;
    this.requestHeaders = {};
    this.requestBody = null;
    this.status = 0;
    this.statusText = "";
    this.upload = new EventedObject();
  }

  FakeXMLHttpRequest.prototype = new EventedObject();

  // These status codes are available on the native XMLHttpRequest
  // object, so we match that here in case a library is relying on them.
  FakeXMLHttpRequest.UNSENT = 0;
  FakeXMLHttpRequest.OPENED = 1;
  FakeXMLHttpRequest.HEADERS_RECEIVED = 2;
  FakeXMLHttpRequest.LOADING = 3;
  FakeXMLHttpRequest.DONE = 4;

  var FakeXMLHttpRequestProto = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4,
    async: true,

    /*
      Duplicates the behavior of native XMLHttpRequest's open function
    */
    open: function open(method, url, async, username, password) {
      this.method = method;
      this.url = url;
      this.async = typeof async == "boolean" ? async : true;
      this.username = username;
      this.password = password;
      this.responseText = null;
      this.responseXML = null;
      this.requestHeaders = {};
      this.sendFlag = false;
      this._readyStateChange(FakeXMLHttpRequest.OPENED);
    },

    /*
      Duplicates the behavior of native XMLHttpRequest's setRequestHeader function
    */
    setRequestHeader: function setRequestHeader(header, value) {
      verifyState(this);

      if (unsafeHeaders[header] || /^(Sec-|Proxy-)/.test(header)) {
        throw new Error("Refused to set unsafe header \"" + header + "\"");
      }

      if (this.requestHeaders[header]) {
        this.requestHeaders[header] += "," + value;
      } else {
        this.requestHeaders[header] = value;
      }
    },

    /*
      Duplicates the behavior of native XMLHttpRequest's send function
    */
    send: function send(data) {
      verifyState(this);

      if (!/^(get|head)$/i.test(this.method)) {
        if (this.requestHeaders["Content-Type"]) {
          var value = this.requestHeaders["Content-Type"].split(";");
          this.requestHeaders["Content-Type"] = value[0] + ";charset=utf-8";
        } else {
          this.requestHeaders["Content-Type"] = "text/plain;charset=utf-8";
        }

        this.requestBody = data;
      }

      this.errorFlag = false;
      this.sendFlag = this.async;
      this._readyStateChange(FakeXMLHttpRequest.OPENED);

      if (typeof this.onSend == "function") {
        this.onSend(this);
      }

      this.dispatchEvent(new _Event("loadstart", false, false, this));
    },

    /*
      Duplicates the behavior of native XMLHttpRequest's abort function
    */
    abort: function abort() {
      this.aborted = true;
      this.responseText = null;
      this.errorFlag = true;
      this.requestHeaders = {};

      if (this.readyState > FakeXMLHttpRequest.UNSENT && this.sendFlag) {
        this._readyStateChange(FakeXMLHttpRequest.DONE);
        this.sendFlag = false;
      }

      this.readyState = FakeXMLHttpRequest.UNSENT;

      this.dispatchEvent(new _Event("abort", false, false, this));
      if (typeof this.onerror === "function") {
          this.onerror();
      }
    },

    /*
      Duplicates the behavior of native XMLHttpRequest's getResponseHeader function
    */
    getResponseHeader: function getResponseHeader(header) {
      if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {
        return null;
      }

      if (/^Set-Cookie2?$/i.test(header)) {
        return null;
      }

      header = header.toLowerCase();

      for (var h in this.responseHeaders) {
        if (h.toLowerCase() == header) {
          return this.responseHeaders[h];
        }
      }

      return null;
    },

    /*
      Duplicates the behavior of native XMLHttpRequest's getAllResponseHeaders function
    */
    getAllResponseHeaders: function getAllResponseHeaders() {
      if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {
        return "";
      }

      var headers = "";

      for (var header in this.responseHeaders) {
        if (this.responseHeaders.hasOwnProperty(header) && !/^Set-Cookie2?$/i.test(header)) {
          headers += header + ": " + this.responseHeaders[header] + "\r\n";
        }
      }

      return headers;
    },

    /*
      Places a FakeXMLHttpRequest object into the passed
      state.
    */
    _readyStateChange: function _readyStateChange(state) {
      this.readyState = state;

      if (typeof this.onreadystatechange == "function") {
        this.onreadystatechange();
      }

      this.dispatchEvent(new _Event("readystatechange"));

      if (this.readyState == FakeXMLHttpRequest.DONE) {
        this.dispatchEvent(new _Event("load", false, false, this));
        this.dispatchEvent(new _Event("loadend", false, false, this));
      }
    },


    /*
      Sets the FakeXMLHttpRequest object's response headers and
      places the object into readyState 2
    */
    _setResponseHeaders: function _setResponseHeaders(headers) {
      this.responseHeaders = {};

      for (var header in headers) {
        if (headers.hasOwnProperty(header)) {
            this.responseHeaders[header] = headers[header];
        }
      }

      if (this.async) {
        this._readyStateChange(FakeXMLHttpRequest.HEADERS_RECEIVED);
      } else {
        this.readyState = FakeXMLHttpRequest.HEADERS_RECEIVED;
      }
    },

    /*
      Sets the FakeXMLHttpRequest object's response body and
      if body text is XML, sets responseXML to parsed document
      object
    */
    _setResponseBody: function _setResponseBody(body) {
      verifyRequestSent(this);
      verifyHeadersReceived(this);
      verifyResponseBodyType(body);

      var chunkSize = this.chunkSize || 10;
      var index = 0;
      this.responseText = "";

      do {
        if (this.async) {
          this._readyStateChange(FakeXMLHttpRequest.LOADING);
        }

        this.responseText += body.substring(index, index + chunkSize);
        index += chunkSize;
      } while (index < body.length);

      var type = this.getResponseHeader("Content-Type");

      if (this.responseText && (!type || /(text\/xml)|(application\/xml)|(\+xml)/.test(type))) {
        try {
          this.responseXML = parseXML(this.responseText);
        } catch (e) {
          // Unable to parse XML - no biggie
        }
      }

      if (this.async) {
        this._readyStateChange(FakeXMLHttpRequest.DONE);
      } else {
        this.readyState = FakeXMLHttpRequest.DONE;
      }
    },

    /*
      Forces a response on to the FakeXMLHttpRequest object.

      This is the public API for faking responses. This function
      takes a number status, headers object, and string body:

      ```
      xhr.respond(404, {Content-Type: 'text/plain'}, "Sorry. This object was not found.")

      ```
    */
    respond: function respond(status, headers, body) {
      this._setResponseHeaders(headers || {});
      this.status = typeof status == "number" ? status : 200;
      this.statusText = httpStatusCodes[this.status];
      this._setResponseBody(body || "");
    }
  };

  for (var property in FakeXMLHttpRequestProto) {
    FakeXMLHttpRequest.prototype[property] = FakeXMLHttpRequestProto[property];
  }

  function verifyState(xhr) {
    if (xhr.readyState !== FakeXMLHttpRequest.OPENED) {
      throw new Error("INVALID_STATE_ERR");
    }

    if (xhr.sendFlag) {
      throw new Error("INVALID_STATE_ERR");
    }
  }


  function verifyRequestSent(xhr) {
      if (xhr.readyState == FakeXMLHttpRequest.DONE) {
          throw new Error("Request done");
      }
  }

  function verifyHeadersReceived(xhr) {
      if (xhr.async && xhr.readyState != FakeXMLHttpRequest.HEADERS_RECEIVED) {
          throw new Error("No headers received");
      }
  }

  function verifyResponseBodyType(body) {
      if (typeof body != "string") {
          var error = new Error("Attempted to respond to fake XMLHttpRequest with " +
                               body + ", which is not a string.");
          error.name = "InvalidBodyException";
          throw error;
      }
  }
  var fake_xml_http_request = FakeXMLHttpRequest;

  return fake_xml_http_request;

}));
;(function() {
    "use strict";
    function $$route$recognizer$dsl$$Target(path, matcher, delegate) {
      this.path = path;
      this.matcher = matcher;
      this.delegate = delegate;
    }

    $$route$recognizer$dsl$$Target.prototype = {
      to: function(target, callback) {
        var delegate = this.delegate;

        if (delegate && delegate.willAddRoute) {
          target = delegate.willAddRoute(this.matcher.target, target);
        }

        this.matcher.add(this.path, target);

        if (callback) {
          if (callback.length === 0) { throw new Error("You must have an argument in the function passed to `to`"); }
          this.matcher.addChild(this.path, target, callback, this.delegate);
        }
        return this;
      }
    };

    function $$route$recognizer$dsl$$Matcher(target) {
      this.routes = {};
      this.children = {};
      this.target = target;
    }

    $$route$recognizer$dsl$$Matcher.prototype = {
      add: function(path, handler) {
        this.routes[path] = handler;
      },

      addChild: function(path, target, callback, delegate) {
        var matcher = new $$route$recognizer$dsl$$Matcher(target);
        this.children[path] = matcher;

        var match = $$route$recognizer$dsl$$generateMatch(path, matcher, delegate);

        if (delegate && delegate.contextEntered) {
          delegate.contextEntered(target, match);
        }

        callback(match);
      }
    };

    function $$route$recognizer$dsl$$generateMatch(startingPath, matcher, delegate) {
      return function(path, nestedCallback) {
        var fullPath = startingPath + path;

        if (nestedCallback) {
          nestedCallback($$route$recognizer$dsl$$generateMatch(fullPath, matcher, delegate));
        } else {
          return new $$route$recognizer$dsl$$Target(startingPath + path, matcher, delegate);
        }
      };
    }

    function $$route$recognizer$dsl$$addRoute(routeArray, path, handler) {
      var len = 0;
      for (var i=0, l=routeArray.length; i<l; i++) {
        len += routeArray[i].path.length;
      }

      path = path.substr(len);
      var route = { path: path, handler: handler };
      routeArray.push(route);
    }

    function $$route$recognizer$dsl$$eachRoute(baseRoute, matcher, callback, binding) {
      var routes = matcher.routes;

      for (var path in routes) {
        if (routes.hasOwnProperty(path)) {
          var routeArray = baseRoute.slice();
          $$route$recognizer$dsl$$addRoute(routeArray, path, routes[path]);

          if (matcher.children[path]) {
            $$route$recognizer$dsl$$eachRoute(routeArray, matcher.children[path], callback, binding);
          } else {
            callback.call(binding, routeArray);
          }
        }
      }
    }

    var $$route$recognizer$dsl$$default = function(callback, addRouteCallback) {
      var matcher = new $$route$recognizer$dsl$$Matcher();

      callback($$route$recognizer$dsl$$generateMatch("", matcher, this.delegate));

      $$route$recognizer$dsl$$eachRoute([], matcher, function(route) {
        if (addRouteCallback) { addRouteCallback(this, route); }
        else { this.add(route); }
      }, this);
    };

    var $$route$recognizer$$specials = [
      '/', '.', '*', '+', '?', '|',
      '(', ')', '[', ']', '{', '}', '\\'
    ];

    var $$route$recognizer$$escapeRegex = new RegExp('(\\' + $$route$recognizer$$specials.join('|\\') + ')', 'g');

    function $$route$recognizer$$isArray(test) {
      return Object.prototype.toString.call(test) === "[object Array]";
    }

    // A Segment represents a segment in the original route description.
    // Each Segment type provides an `eachChar` and `regex` method.
    //
    // The `eachChar` method invokes the callback with one or more character
    // specifications. A character specification consumes one or more input
    // characters.
    //
    // The `regex` method returns a regex fragment for the segment. If the
    // segment is a dynamic of star segment, the regex fragment also includes
    // a capture.
    //
    // A character specification contains:
    //
    // * `validChars`: a String with a list of all valid characters, or
    // * `invalidChars`: a String with a list of all invalid characters
    // * `repeat`: true if the character specification can repeat

    function $$route$recognizer$$StaticSegment(string) { this.string = string; }
    $$route$recognizer$$StaticSegment.prototype = {
      eachChar: function(callback) {
        var string = this.string, ch;

        for (var i=0, l=string.length; i<l; i++) {
          ch = string.charAt(i);
          callback({ validChars: ch });
        }
      },

      regex: function() {
        return this.string.replace($$route$recognizer$$escapeRegex, '\\$1');
      },

      generate: function() {
        return this.string;
      }
    };

    function $$route$recognizer$$DynamicSegment(name) { this.name = name; }
    $$route$recognizer$$DynamicSegment.prototype = {
      eachChar: function(callback) {
        callback({ invalidChars: "/", repeat: true });
      },

      regex: function() {
        return "([^/]+)";
      },

      generate: function(params) {
        return params[this.name];
      }
    };

    function $$route$recognizer$$StarSegment(name) { this.name = name; }
    $$route$recognizer$$StarSegment.prototype = {
      eachChar: function(callback) {
        callback({ invalidChars: "", repeat: true });
      },

      regex: function() {
        return "(.+)";
      },

      generate: function(params) {
        return params[this.name];
      }
    };

    function $$route$recognizer$$EpsilonSegment() {}
    $$route$recognizer$$EpsilonSegment.prototype = {
      eachChar: function() {},
      regex: function() { return ""; },
      generate: function() { return ""; }
    };

    function $$route$recognizer$$parse(route, names, specificity) {
      // normalize route as not starting with a "/". Recognition will
      // also normalize.
      if (route.charAt(0) === "/") { route = route.substr(1); }

      var segments = route.split("/"), results = [];

      // A routes has specificity determined by the order that its different segments
      // appear in. This system mirrors how the magnitude of numbers written as strings
      // works.
      // Consider a number written as: "abc". An example would be "200". Any other number written
      // "xyz" will be smaller than "abc" so long as `a > z`. For instance, "199" is smaller
      // then "200", even though "y" and "z" (which are both 9) are larger than "0" (the value
      // of (`b` and `c`). This is because the leading symbol, "2", is larger than the other
      // leading symbol, "1".
      // The rule is that symbols to the left carry more weight than symbols to the right
      // when a number is written out as a string. In the above strings, the leading digit
      // represents how many 100's are in the number, and it carries more weight than the middle
      // number which represents how many 10's are in the number.
      // This system of number magnitude works well for route specificity, too. A route written as
      // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than
      // `x`, irrespective of the other parts.
      // Because of this similarity, we assign each type of segment a number value written as a
      // string. We can find the specificity of compound routes by concatenating these strings
      // together, from left to right. After we have looped through all of the segments,
      // we convert the string to a number.
      specificity.val = '';

      for (var i=0, l=segments.length; i<l; i++) {
        var segment = segments[i], match;

        if (match = segment.match(/^:([^\/]+)$/)) {
          results.push(new $$route$recognizer$$DynamicSegment(match[1]));
          names.push(match[1]);
          specificity.val += '3';
        } else if (match = segment.match(/^\*([^\/]+)$/)) {
          results.push(new $$route$recognizer$$StarSegment(match[1]));
          specificity.val += '2';
          names.push(match[1]);
        } else if(segment === "") {
          results.push(new $$route$recognizer$$EpsilonSegment());
          specificity.val += '1';
        } else {
          results.push(new $$route$recognizer$$StaticSegment(segment));
          specificity.val += '4';
        }
      }

      specificity.val = +specificity.val;

      return results;
    }

    // A State has a character specification and (`charSpec`) and a list of possible
    // subsequent states (`nextStates`).
    //
    // If a State is an accepting state, it will also have several additional
    // properties:
    //
    // * `regex`: A regular expression that is used to extract parameters from paths
    //   that reached this accepting state.
    // * `handlers`: Information on how to convert the list of captures into calls
    //   to registered handlers with the specified parameters
    // * `types`: How many static, dynamic or star segments in this route. Used to
    //   decide which route to use if multiple registered routes match a path.
    //
    // Currently, State is implemented naively by looping over `nextStates` and
    // comparing a character specification against a character. A more efficient
    // implementation would use a hash of keys pointing at one or more next states.

    function $$route$recognizer$$State(charSpec) {
      this.charSpec = charSpec;
      this.nextStates = [];
    }

    $$route$recognizer$$State.prototype = {
      get: function(charSpec) {
        var nextStates = this.nextStates;

        for (var i=0, l=nextStates.length; i<l; i++) {
          var child = nextStates[i];

          var isEqual = child.charSpec.validChars === charSpec.validChars;
          isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;

          if (isEqual) { return child; }
        }
      },

      put: function(charSpec) {
        var state;

        // If the character specification already exists in a child of the current
        // state, just return that state.
        if (state = this.get(charSpec)) { return state; }

        // Make a new state for the character spec
        state = new $$route$recognizer$$State(charSpec);

        // Insert the new state as a child of the current state
        this.nextStates.push(state);

        // If this character specification repeats, insert the new state as a child
        // of itself. Note that this will not trigger an infinite loop because each
        // transition during recognition consumes a character.
        if (charSpec.repeat) {
          state.nextStates.push(state);
        }

        // Return the new state
        return state;
      },

      // Find a list of child states matching the next character
      match: function(ch) {
        // DEBUG "Processing `" + ch + "`:"
        var nextStates = this.nextStates,
            child, charSpec, chars;

        // DEBUG "  " + debugState(this)
        var returned = [];

        for (var i=0, l=nextStates.length; i<l; i++) {
          child = nextStates[i];

          charSpec = child.charSpec;

          if (typeof (chars = charSpec.validChars) !== 'undefined') {
            if (chars.indexOf(ch) !== -1) { returned.push(child); }
          } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {
            if (chars.indexOf(ch) === -1) { returned.push(child); }
          }
        }

        return returned;
      }

      /** IF DEBUG
      , debug: function() {
        var charSpec = this.charSpec,
            debug = "[",
            chars = charSpec.validChars || charSpec.invalidChars;

        if (charSpec.invalidChars) { debug += "^"; }
        debug += chars;
        debug += "]";

        if (charSpec.repeat) { debug += "+"; }

        return debug;
      }
      END IF **/
    };

    /** IF DEBUG
    function debug(log) {
      console.log(log);
    }

    function debugState(state) {
      return state.nextStates.map(function(n) {
        if (n.nextStates.length === 0) { return "( " + n.debug() + " [accepting] )"; }
        return "( " + n.debug() + " <then> " + n.nextStates.map(function(s) { return s.debug() }).join(" or ") + " )";
      }).join(", ")
    }
    END IF **/

    // Sort the routes by specificity
    function $$route$recognizer$$sortSolutions(states) {
      return states.sort(function(a, b) {
        return b.specificity.val - a.specificity.val;
      });
    }

    function $$route$recognizer$$recognizeChar(states, ch) {
      var nextStates = [];

      for (var i=0, l=states.length; i<l; i++) {
        var state = states[i];

        nextStates = nextStates.concat(state.match(ch));
      }

      return nextStates;
    }

    var $$route$recognizer$$oCreate = Object.create || function(proto) {
      function F() {}
      F.prototype = proto;
      return new F();
    };

    function $$route$recognizer$$RecognizeResults(queryParams) {
      this.queryParams = queryParams || {};
    }
    $$route$recognizer$$RecognizeResults.prototype = $$route$recognizer$$oCreate({
      splice: Array.prototype.splice,
      slice:  Array.prototype.slice,
      push:   Array.prototype.push,
      length: 0,
      queryParams: null
    });

    function $$route$recognizer$$findHandler(state, path, queryParams) {
      var handlers = state.handlers, regex = state.regex;
      var captures = path.match(regex), currentCapture = 1;
      var result = new $$route$recognizer$$RecognizeResults(queryParams);

      for (var i=0, l=handlers.length; i<l; i++) {
        var handler = handlers[i], names = handler.names, params = {};

        for (var j=0, m=names.length; j<m; j++) {
          params[names[j]] = captures[currentCapture++];
        }

        result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });
      }

      return result;
    }

    function $$route$recognizer$$addSegment(currentState, segment) {
      segment.eachChar(function(ch) {
        var state;

        currentState = currentState.put(ch);
      });

      return currentState;
    }

    function $$route$recognizer$$decodeQueryParamPart(part) {
      // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
      part = part.replace(/\+/gm, '%20');
      return decodeURIComponent(part);
    }

    // The main interface

    var $$route$recognizer$$RouteRecognizer = function() {
      this.rootState = new $$route$recognizer$$State();
      this.names = {};
    };


    $$route$recognizer$$RouteRecognizer.prototype = {
      add: function(routes, options) {
        var currentState = this.rootState, regex = "^",
            specificity = {},
            handlers = [], allSegments = [], name;

        var isEmpty = true;

        for (var i=0, l=routes.length; i<l; i++) {
          var route = routes[i], names = [];

          var segments = $$route$recognizer$$parse(route.path, names, specificity);

          allSegments = allSegments.concat(segments);

          for (var j=0, m=segments.length; j<m; j++) {
            var segment = segments[j];

            if (segment instanceof $$route$recognizer$$EpsilonSegment) { continue; }

            isEmpty = false;

            // Add a "/" for the new segment
            currentState = currentState.put({ validChars: "/" });
            regex += "/";

            // Add a representation of the segment to the NFA and regex
            currentState = $$route$recognizer$$addSegment(currentState, segment);
            regex += segment.regex();
          }

          var handler = { handler: route.handler, names: names };
          handlers.push(handler);
        }

        if (isEmpty) {
          currentState = currentState.put({ validChars: "/" });
          regex += "/";
        }

        currentState.handlers = handlers;
        currentState.regex = new RegExp(regex + "$");
        currentState.specificity = specificity;

        if (name = options && options.as) {
          this.names[name] = {
            segments: allSegments,
            handlers: handlers
          };
        }
      },

      handlersFor: function(name) {
        var route = this.names[name], result = [];
        if (!route) { throw new Error("There is no route named " + name); }

        for (var i=0, l=route.handlers.length; i<l; i++) {
          result.push(route.handlers[i]);
        }

        return result;
      },

      hasRoute: function(name) {
        return !!this.names[name];
      },

      generate: function(name, params) {
        var route = this.names[name], output = "";
        if (!route) { throw new Error("There is no route named " + name); }

        var segments = route.segments;

        for (var i=0, l=segments.length; i<l; i++) {
          var segment = segments[i];

          if (segment instanceof $$route$recognizer$$EpsilonSegment) { continue; }

          output += "/";
          output += segment.generate(params);
        }

        if (output.charAt(0) !== '/') { output = '/' + output; }

        if (params && params.queryParams) {
          output += this.generateQueryString(params.queryParams, route.handlers);
        }

        return output;
      },

      generateQueryString: function(params, handlers) {
        var pairs = [];
        var keys = [];
        for(var key in params) {
          if (params.hasOwnProperty(key)) {
            keys.push(key);
          }
        }
        keys.sort();
        for (var i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          var value = params[key];
          if (value == null) {
            continue;
          }
          var pair = encodeURIComponent(key);
          if ($$route$recognizer$$isArray(value)) {
            for (var j = 0, l = value.length; j < l; j++) {
              var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);
              pairs.push(arrayPair);
            }
          } else {
            pair += "=" + encodeURIComponent(value);
            pairs.push(pair);
          }
        }

        if (pairs.length === 0) { return ''; }

        return "?" + pairs.join("&");
      },

      parseQueryString: function(queryString) {
        var pairs = queryString.split("&"), queryParams = {};
        for(var i=0; i < pairs.length; i++) {
          var pair      = pairs[i].split('='),
              key       = $$route$recognizer$$decodeQueryParamPart(pair[0]),
              keyLength = key.length,
              isArray = false,
              value;
          if (pair.length === 1) {
            value = 'true';
          } else {
            //Handle arrays
            if (keyLength > 2 && key.slice(keyLength -2) === '[]') {
              isArray = true;
              key = key.slice(0, keyLength - 2);
              if(!queryParams[key]) {
                queryParams[key] = [];
              }
            }
            value = pair[1] ? $$route$recognizer$$decodeQueryParamPart(pair[1]) : '';
          }
          if (isArray) {
            queryParams[key].push(value);
          } else {
            queryParams[key] = value;
          }
        }
        return queryParams;
      },

      recognize: function(path) {
        var states = [ this.rootState ],
            pathLen, i, l, queryStart, queryParams = {},
            isSlashDropped = false;

        queryStart = path.indexOf('?');
        if (queryStart !== -1) {
          var queryString = path.substr(queryStart + 1, path.length);
          path = path.substr(0, queryStart);
          queryParams = this.parseQueryString(queryString);
        }

        path = decodeURI(path);

        // DEBUG GROUP path

        if (path.charAt(0) !== "/") { path = "/" + path; }

        pathLen = path.length;
        if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
          path = path.substr(0, pathLen - 1);
          isSlashDropped = true;
        }

        for (i=0, l=path.length; i<l; i++) {
          states = $$route$recognizer$$recognizeChar(states, path.charAt(i));
          if (!states.length) { break; }
        }

        // END DEBUG GROUP

        var solutions = [];
        for (i=0, l=states.length; i<l; i++) {
          if (states[i].handlers) { solutions.push(states[i]); }
        }

        states = $$route$recognizer$$sortSolutions(solutions);

        var state = solutions[0];

        if (state && state.handlers) {
          // if a trailing slash was dropped and a star segment is the last segment
          // specified, put the trailing slash back
          if (isSlashDropped && state.regex.source.slice(-5) === "(.+)$") {
            path = path + "/";
          }
          return $$route$recognizer$$findHandler(state, path, queryParams);
        }
      }
    };

    $$route$recognizer$$RouteRecognizer.prototype.map = $$route$recognizer$dsl$$default;

    $$route$recognizer$$RouteRecognizer.VERSION = '0.1.9';

    var $$route$recognizer$$default = $$route$recognizer$$RouteRecognizer;

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define('route-recognizer', function() { return $$route$recognizer$$default; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = $$route$recognizer$$default;
    } else if (typeof this !== 'undefined') {
      this['RouteRecognizer'] = $$route$recognizer$$default;
    }
}).call(this);


;(function(window){

var isNode = typeof process !== 'undefined' && process.toString() === '[object process]';
var RouteRecognizer = isNode ? require('route-recognizer')['default'] : window.RouteRecognizer;
var FakeXMLHttpRequest = isNode ? require('./bower_components/FakeXMLHttpRequest/fake_xml_http_request') : window.FakeXMLHttpRequest;
var slice = [].slice;

function Pretender(/* routeMap1, routeMap2, ...*/){
  maps = slice.call(arguments);
  // Herein we keep track of RouteRecognizer instances
  // keyed by HTTP method. Feel free to add more as needed.
  this.registry = {
    GET: new RouteRecognizer(),
    PUT: new RouteRecognizer(),
    POST: new RouteRecognizer(),
    DELETE: new RouteRecognizer(),
    PATCH: new RouteRecognizer(),
    HEAD: new RouteRecognizer()
  };

  this.handlers = [];
  this.handledRequests = [];
  this.passthroughRequests = [];
  this.unhandledRequests = [];
  this.requestReferences = [];

  // reference the native XMLHttpRequest object so
  // it can be restored later
  this._nativeXMLHttpRequest = window.XMLHttpRequest;

  // capture xhr requests, channeling them into
  // the route map.
  window.XMLHttpRequest = interceptor(this);

  // "start" the server
  this.running = true;

  // trigger the route map DSL.
  for(i=0; i < arguments.length; i++){
    this.map(arguments[i]);
  }
}

function interceptor(pretender) {
  function FakeRequest(){
    // super()
    FakeXMLHttpRequest.call(this);
  }
  // extend
  var proto = new FakeXMLHttpRequest();
  proto.send = function send(){
    if (!pretender.running) {
      throw new Error('You shut down a Pretender instance while there was a pending request. '+
            'That request just tried to complete. Check to see if you accidentally shut down '+
            'a pretender earlier than you intended to');
    }

    FakeXMLHttpRequest.prototype.send.apply(this, arguments);
    if (!pretender.checkPassthrough(this)) {
      pretender.handleRequest(this);
    }
    else {
      var xhr = createPassthrough(this);
      xhr.send.apply(xhr, arguments);
    }
  };

  // passthrough handling
  var evts = ['error', 'timeout', 'progress', 'abort'];
  var lifecycleProps = ['readyState', 'responseText', 'responseXML', 'status', 'statusText'];
  function createPassthrough(fakeXHR) {
    var xhr = fakeXHR._passthroughRequest = new pretender._nativeXMLHttpRequest();

    // use onload instead of onreadystatechange if the browser supports it
    if ('onload' in xhr) {
      evts.push('load');
    } else {
      evts.push('readystatechange');
    }

    // listen to all events to update lifecycle properties
    for (var i = 0; i < evts.length; i++) (function(evt) {
      xhr['on' + evt] = function(e) {
        // update lifecycle props on each event
        for (var i = 0; i < lifecycleProps.length; i++) {
          var prop = lifecycleProps[i];
          if (xhr[prop]) {
            fakeXHR[prop] = xhr[prop];
          }
        }
        // fire fake events where applicable
        fakeXHR.dispatchEvent(evt, e);
        if (fakeXHR['on' + evt]) {
          fakeXHR['on' + evt](e);
        }
      };
    })(evts[i]);
    xhr.open(fakeXHR.method, fakeXHR.url, fakeXHR.async, fakeXHR.username, fakeXHR.password);
    xhr.timeout = fakeXHR.timeout;
    xhr.withCredentials = fakeXHR.withCredentials;
    for (var h in fakeXHR.requestHeaders) {
      xhr.setRequestHeader(h, fakeXHR.requestHeaders[h]);
    }
    return xhr;
  }
  proto._passthroughCheck = function(method, arguments) {
    if (this._passthroughRequest) {
      return this._passthroughRequest[method].apply(this._passthroughRequest, arguments);
    }
    return FakeXMLHttpRequest.prototype[method].apply(this, arguments);
  }
  proto.abort = function abort(){
    return this._passthroughCheck('abort', arguments);
  }
  proto.getResponseHeader = function getResponseHeader(){
    return this._passthroughCheck('getResponseHeader', arguments);
  }
  proto.getAllResponseHeaders = function getAllResponseHeaders(){
    return this._passthroughCheck('getAllResponseHeaders', arguments);
  }

  FakeRequest.prototype = proto;
  return FakeRequest;
}

function verbify(verb){
  return function(path, handler, async){
    this.register(verb, path, handler, async);
  };
}

function throwIfURLDetected(url){
  var HTTP_REGEXP = /^https?/;
  var message;

  if(HTTP_REGEXP.test(url)) {
    var parser = window.document.createElement('a');
    parser.href = url;

    message = "Pretender will not respond to requests for URLs. It is not possible to accurately simluate the browser's CSP. "+
              "Remove the " + parser.protocol +"//"+ parser.hostname +" from " + url + " and try again";
    throw new Error(message)
  }
}

function scheduleProgressEvent(request, startTime, totalTime) {
  setTimeout(function() {
    if (!request.aborted && !request.status) {
      var ellapsedTime = new Date().getTime() - startTime.getTime();
      request.upload._progress(true, ellapsedTime, totalTime);
      request._progress(true, ellapsedTime, totalTime);
      scheduleProgressEvent(request, startTime, totalTime);
    }
  }, 50);
}

var PASSTHROUGH = {};

Pretender.prototype = {
  get: verbify('GET'),
  post: verbify('POST'),
  put: verbify('PUT'),
  'delete': verbify('DELETE'),
  patch: verbify('PATCH'),
  head: verbify('HEAD'),
  map: function(maps){
    maps.call(this);
  },
  register: function register(verb, path, handler, async){
    if (!handler) {
      throw new Error("The function you tried passing to Pretender to handle " + verb + " " + path + " is undefined or missing.");
    }

    handler.numberOfCalls = 0;
    handler.async = async;
    this.handlers.push(handler);

    var registry = this.registry[verb];
    registry.add([{path: path, handler: handler}]);
  },
  passthrough: PASSTHROUGH,
  checkPassthrough: function(request) {
    var verb = request.method.toUpperCase();
    var path = request.url;

    throwIfURLDetected(path);

    verb = verb.toUpperCase();

    var recognized = this.registry[verb].recognize(path);
    var match = recognized && recognized[0];
    if (match && match.handler == PASSTHROUGH) {
      this.passthroughRequests.push(request);
      this.passthroughRequest(verb, path, request);
      return true;
    }

    return false;
  },
  handleRequest: function handleRequest(request){
    var verb = request.method.toUpperCase();
    var path = request.url;

    var handler = this._handlerFor(verb, path, request);

    if (handler) {
      handler.handler.numberOfCalls++;
      var async = handler.handler.async;
      this.handledRequests.push(request);

      try {
        var statusHeadersAndBody = handler.handler(request),
            status = statusHeadersAndBody[0],
            headers = this.prepareHeaders(statusHeadersAndBody[1]),
            body = this.prepareBody(statusHeadersAndBody[2]),
            pretender = this;

        this.handleResponse(request, async, function() {
          request.respond(status, headers, body);
          pretender.handledRequest(verb, path, request);
        });
      } catch (error) {
        this.erroredRequest(verb, path, request, error);
        this.resolve(request);
      }
    } else {
      this.unhandledRequests.push(request);
      this.unhandledRequest(verb, path, request);
    }
  },
  handleResponse: function handleResponse(request, strategy, callback) {
    var delay = typeof strategy === 'function' ? strategy() : strategy;
    delay = typeof delay === 'boolean' || typeof delay === 'number' ? delay : 0;

    if (delay === false) {
      callback();
    } else {
      var pretender = this;
      pretender.requestReferences.push({
        request: request,
        callback: callback
      });

      if (delay !== true) {
        scheduleProgressEvent(request, new Date(), delay);
        setTimeout(function() {
          pretender.resolve(request);
        }, delay);
      }
    }
  },
  resolve: function resolve(request) {
    for(var i = 0, len = this.requestReferences.length; i < len; i++) {
      var res = this.requestReferences[i];
      if (res.request === request) {
        res.callback();
        this.requestReferences.splice(i, 1);
        break;
      }
    }
  },
  requiresManualResolution: function(verb, path) {
    var handler = this._handlerFor(verb.toUpperCase(), path, {});
    if (!handler) { return false; }

    var async = handler.handler.async;
    return typeof async === 'function' ? async() === true : async === true;
  },
  prepareBody: function(body) { return body; },
  prepareHeaders: function(headers) { return headers; },
  handledRequest: function(verb, path, request) { /* no-op */},
  passthroughRequest: function(verb, path, request) { /* no-op */},
  unhandledRequest: function(verb, path, request) {
    throw new Error("Pretender intercepted "+verb+" "+path+" but no handler was defined for this type of request");
  },
  erroredRequest: function(verb, path, request, error){
    error.message = "Pretender intercepted "+verb+" "+path+" but encountered an error: " + error.message;
    throw error;
  },
  _handlerFor: function(verb, path, request){
    var registry = this.registry[verb];
    var matches = registry.recognize(path);

    var match = matches ? matches[0] : null;
    if (match) {
      request.params = match.params;
      request.queryParams = matches.queryParams;
    }

    return match;
  },
  shutdown: function shutdown(){
    window.XMLHttpRequest = this._nativeXMLHttpRequest;

    // "stop" the server
    this.running = false;
  }
};

if (isNode) {
  module.exports = Pretender;
} else {
  window.Pretender = Pretender;
}

})(window);

;/* globals Pretender */

define('pretender', [], function() {
  "use strict";

  return {
    'default': Pretender
  };
});

;(function() {
    "use strict";
    var ember$inflector$lib$system$inflector$$capitalize = Ember.String.capitalize;

    var ember$inflector$lib$system$inflector$$BLANK_REGEX = /^\s*$/;
    var ember$inflector$lib$system$inflector$$LAST_WORD_DASHED_REGEX = /(\w+[_-])([a-z\d]+$)/;
    var ember$inflector$lib$system$inflector$$LAST_WORD_CAMELIZED_REGEX = /(\w+)([A-Z][a-z\d]*$)/;
    var ember$inflector$lib$system$inflector$$CAMELIZED_REGEX = /[A-Z][a-z\d]*$/;

    function ember$inflector$lib$system$inflector$$loadUncountable(rules, uncountable) {
      for (var i = 0, length = uncountable.length; i < length; i++) {
        rules.uncountable[uncountable[i].toLowerCase()] = true;
      }
    }

    function ember$inflector$lib$system$inflector$$loadIrregular(rules, irregularPairs) {
      var pair;

      for (var i = 0, length = irregularPairs.length; i < length; i++) {
        pair = irregularPairs[i];

        //pluralizing
        rules.irregular[pair[0].toLowerCase()] = pair[1];
        rules.irregular[pair[1].toLowerCase()] = pair[1];

        //singularizing
        rules.irregularInverse[pair[1].toLowerCase()] = pair[0];
        rules.irregularInverse[pair[0].toLowerCase()] = pair[0];
      }
    }

    /**
      Inflector.Ember provides a mechanism for supplying inflection rules for your
      application. Ember includes a default set of inflection rules, and provides an
      API for providing additional rules.

      Examples:

      Creating an inflector with no rules.

      ```js
      var inflector = new Ember.Inflector();
      ```

      Creating an inflector with the default ember ruleset.

      ```js
      var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);

      inflector.pluralize('cow'); //=> 'kine'
      inflector.singularize('kine'); //=> 'cow'
      ```

      Creating an inflector and adding rules later.

      ```javascript
      var inflector = Ember.Inflector.inflector;

      inflector.pluralize('advice'); // => 'advices'
      inflector.uncountable('advice');
      inflector.pluralize('advice'); // => 'advice'

      inflector.pluralize('formula'); // => 'formulas'
      inflector.irregular('formula', 'formulae');
      inflector.pluralize('formula'); // => 'formulae'

      // you would not need to add these as they are the default rules
      inflector.plural(/$/, 's');
      inflector.singular(/s$/i, '');
      ```

      Creating an inflector with a nondefault ruleset.

      ```javascript
      var rules = {
        plurals:  [ /$/, 's' ],
        singular: [ /\s$/, '' ],
        irregularPairs: [
          [ 'cow', 'kine' ]
        ],
        uncountable: [ 'fish' ]
      };

      var inflector = new Ember.Inflector(rules);
      ```

      @class Inflector
      @namespace Ember
    */
    function ember$inflector$lib$system$inflector$$Inflector(ruleSet) {
      ruleSet = ruleSet || {};
      ruleSet.uncountable = ruleSet.uncountable || ember$inflector$lib$system$inflector$$makeDictionary();
      ruleSet.irregularPairs = ruleSet.irregularPairs || ember$inflector$lib$system$inflector$$makeDictionary();

      var rules = this.rules = {
        plurals:  ruleSet.plurals || [],
        singular: ruleSet.singular || [],
        irregular: ember$inflector$lib$system$inflector$$makeDictionary(),
        irregularInverse: ember$inflector$lib$system$inflector$$makeDictionary(),
        uncountable: ember$inflector$lib$system$inflector$$makeDictionary()
      };

      ember$inflector$lib$system$inflector$$loadUncountable(rules, ruleSet.uncountable);
      ember$inflector$lib$system$inflector$$loadIrregular(rules, ruleSet.irregularPairs);

      this.enableCache();
    }

    if (!Object.create && !Object.create(null).hasOwnProperty) {
      throw new Error("This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg");
    }

    function ember$inflector$lib$system$inflector$$makeDictionary() {
      var cache = Object.create(null);
      cache['_dict'] = null;
      delete cache['_dict'];
      return cache;
    }

    ember$inflector$lib$system$inflector$$Inflector.prototype = {
      /**
        @public

        As inflections can be costly, and commonly the same subset of words are repeatedly
        inflected an optional cache is provided.

        @method enableCache
      */
      enableCache: function() {
        this.purgeCache();

        this.singularize = function(word) {
          this._cacheUsed = true;
          return this._sCache[word] || (this._sCache[word] = this._singularize(word));
        };

        this.pluralize = function(word) {
          this._cacheUsed = true;
          return this._pCache[word] || (this._pCache[word] = this._pluralize(word));
        };
      },

      /**
        @public

        @method purgedCache
      */
      purgeCache: function() {
        this._cacheUsed = false;
        this._sCache = ember$inflector$lib$system$inflector$$makeDictionary();
        this._pCache = ember$inflector$lib$system$inflector$$makeDictionary();
      },

      /**
        @public
        disable caching

        @method disableCache;
      */
      disableCache: function() {
        this._sCache = null;
        this._pCache = null;
        this.singularize = function(word) {
          return this._singularize(word);
        };

        this.pluralize = function(word) {
          return this._pluralize(word);
        };
      },

      /**
        @method plural
        @param {RegExp} regex
        @param {String} string
      */
      plural: function(regex, string) {
        if (this._cacheUsed) { this.purgeCache(); }
        this.rules.plurals.push([regex, string.toLowerCase()]);
      },

      /**
        @method singular
        @param {RegExp} regex
        @param {String} string
      */
      singular: function(regex, string) {
        if (this._cacheUsed) { this.purgeCache(); }
        this.rules.singular.push([regex, string.toLowerCase()]);
      },

      /**
        @method uncountable
        @param {String} regex
      */
      uncountable: function(string) {
        if (this._cacheUsed) { this.purgeCache(); }
        ember$inflector$lib$system$inflector$$loadUncountable(this.rules, [string.toLowerCase()]);
      },

      /**
        @method irregular
        @param {String} singular
        @param {String} plural
      */
      irregular: function (singular, plural) {
        if (this._cacheUsed) { this.purgeCache(); }
        ember$inflector$lib$system$inflector$$loadIrregular(this.rules, [[singular, plural]]);
      },

      /**
        @method pluralize
        @param {String} word
      */
      pluralize: function(word) {
        return this._pluralize(word);
      },

      _pluralize: function(word) {
        return this.inflect(word, this.rules.plurals, this.rules.irregular);
      },
      /**
        @method singularize
        @param {String} word
      */
      singularize: function(word) {
        return this._singularize(word);
      },

      _singularize: function(word) {
        return this.inflect(word, this.rules.singular,  this.rules.irregularInverse);
      },

      /**
        @protected

        @method inflect
        @param {String} word
        @param {Object} typeRules
        @param {Object} irregular
      */
      inflect: function(word, typeRules, irregular) {
        var inflection, substitution, result, lowercase, wordSplit,
          firstPhrase, lastWord, isBlank, isCamelized, isUncountable,
          isIrregular, isIrregularInverse, rule;

        isBlank = ember$inflector$lib$system$inflector$$BLANK_REGEX.test(word);
        isCamelized = ember$inflector$lib$system$inflector$$CAMELIZED_REGEX.test(word);
        firstPhrase = "";

        if (isBlank) {
          return word;
        }

        lowercase = word.toLowerCase();
        wordSplit = ember$inflector$lib$system$inflector$$LAST_WORD_DASHED_REGEX.exec(word) || ember$inflector$lib$system$inflector$$LAST_WORD_CAMELIZED_REGEX.exec(word);
        if (wordSplit){
          firstPhrase = wordSplit[1];
          lastWord = wordSplit[2].toLowerCase();
        }

        isUncountable = this.rules.uncountable[lowercase] || this.rules.uncountable[lastWord];

        if (isUncountable) {
          return word;
        }

        isIrregular = irregular && (irregular[lowercase] || irregular[lastWord]);

        if (isIrregular) {
          if (irregular[lowercase]){
            return isIrregular;
          }
          else {
            isIrregular = (isCamelized) ? ember$inflector$lib$system$inflector$$capitalize(isIrregular) : isIrregular;
            return firstPhrase + isIrregular;
          }
        }

        for (var i = typeRules.length, min = 0; i > min; i--) {
           inflection = typeRules[i-1];
           rule = inflection[0];

          if (rule.test(word)) {
            break;
          }
        }

        inflection = inflection || [];

        rule = inflection[0];
        substitution = inflection[1];

        result = word.replace(rule, substitution);

        return result;
      }
    };

    var ember$inflector$lib$system$inflector$$default = ember$inflector$lib$system$inflector$$Inflector;

    function ember$inflector$lib$system$string$$pluralize(word) {
      return ember$inflector$lib$system$inflector$$default.inflector.pluralize(word);
    }

    function ember$inflector$lib$system$string$$singularize(word) {
      return ember$inflector$lib$system$inflector$$default.inflector.singularize(word);
    }

    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {
      /**
        See {{#crossLink "Ember.String/pluralize"}}{{/crossLink}}

        @method pluralize
        @for String
      */
      String.prototype.pluralize = function() {
        return ember$inflector$lib$system$string$$pluralize(this);
      };

      /**
        See {{#crossLink "Ember.String/singularize"}}{{/crossLink}}

        @method singularize
        @for String
      */
      String.prototype.singularize = function() {
        return ember$inflector$lib$system$string$$singularize(this);
      };
    }

    /**
     *
     * If you have Ember Inflector (such as if Ember Data is present),
     * singularize a word. For example, turn "oxen" into "ox".
     *
     * Example:
     *
     * {{singularize myProperty}}
     * {{singularize "oxen"}}
     *
     * @for Ember.Handlebars.helpers
     * @method singularize
     * @param {String|Property} word word to singularize
    */
    Ember.Handlebars.helper('singularize', ember$inflector$lib$system$string$$singularize);

    /**
     *
     * If you have Ember Inflector (such as if Ember Data is present),
     * pluralize a word. For example, turn "ox" into "oxen".
     *
     * Example:
     *
     * {{pluralize count myProperty}}
     * {{pluralize 1 "oxen"}}
     * {{pluralize myProperty}}
     * {{pluralize "ox"}}
     *
     * @for Ember.Handlebars.helpers
     * @method pluralize
     * @param {Number|Property} [count] count of objects
     * @param {String|Property} word word to pluralize
    */
    Ember.Handlebars.helper('pluralize', function(count, word, options) {
      if(arguments.length < 3) {
        return ember$inflector$lib$system$string$$pluralize(count);
      } else {
        /* jshint eqeqeq: false */
        if(count != 1) {
          /* jshint eqeqeq: true */
          word = ember$inflector$lib$system$string$$pluralize(word);
        }
        return count + " " + word;
      }
    });

    var ember$inflector$lib$system$inflections$$default = {
      plurals: [
        [/$/, 's'],
        [/s$/i, 's'],
        [/^(ax|test)is$/i, '$1es'],
        [/(octop|vir)us$/i, '$1i'],
        [/(octop|vir)i$/i, '$1i'],
        [/(alias|status)$/i, '$1es'],
        [/(bu)s$/i, '$1ses'],
        [/(buffal|tomat)o$/i, '$1oes'],
        [/([ti])um$/i, '$1a'],
        [/([ti])a$/i, '$1a'],
        [/sis$/i, 'ses'],
        [/(?:([^f])fe|([lr])f)$/i, '$1$2ves'],
        [/(hive)$/i, '$1s'],
        [/([^aeiouy]|qu)y$/i, '$1ies'],
        [/(x|ch|ss|sh)$/i, '$1es'],
        [/(matr|vert|ind)(?:ix|ex)$/i, '$1ices'],
        [/^(m|l)ouse$/i, '$1ice'],
        [/^(m|l)ice$/i, '$1ice'],
        [/^(ox)$/i, '$1en'],
        [/^(oxen)$/i, '$1'],
        [/(quiz)$/i, '$1zes']
      ],

      singular: [
        [/s$/i, ''],
        [/(ss)$/i, '$1'],
        [/(n)ews$/i, '$1ews'],
        [/([ti])a$/i, '$1um'],
        [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis'],
        [/(^analy)(sis|ses)$/i, '$1sis'],
        [/([^f])ves$/i, '$1fe'],
        [/(hive)s$/i, '$1'],
        [/(tive)s$/i, '$1'],
        [/([lr])ves$/i, '$1f'],
        [/([^aeiouy]|qu)ies$/i, '$1y'],
        [/(s)eries$/i, '$1eries'],
        [/(m)ovies$/i, '$1ovie'],
        [/(x|ch|ss|sh)es$/i, '$1'],
        [/^(m|l)ice$/i, '$1ouse'],
        [/(bus)(es)?$/i, '$1'],
        [/(o)es$/i, '$1'],
        [/(shoe)s$/i, '$1'],
        [/(cris|test)(is|es)$/i, '$1is'],
        [/^(a)x[ie]s$/i, '$1xis'],
        [/(octop|vir)(us|i)$/i, '$1us'],
        [/(alias|status)(es)?$/i, '$1'],
        [/^(ox)en/i, '$1'],
        [/(vert|ind)ices$/i, '$1ex'],
        [/(matr)ices$/i, '$1ix'],
        [/(quiz)zes$/i, '$1'],
        [/(database)s$/i, '$1']
      ],

      irregularPairs: [
        ['person', 'people'],
        ['man', 'men'],
        ['child', 'children'],
        ['sex', 'sexes'],
        ['move', 'moves'],
        ['cow', 'kine'],
        ['zombie', 'zombies']
      ],

      uncountable: [
        'equipment',
        'information',
        'rice',
        'money',
        'species',
        'series',
        'fish',
        'sheep',
        'jeans',
        'police'
      ]
    };

    ember$inflector$lib$system$inflector$$default.inflector = new ember$inflector$lib$system$inflector$$default(ember$inflector$lib$system$inflections$$default);

    ember$inflector$lib$system$inflector$$default.defaultRules = ember$inflector$lib$system$inflections$$default;
    Ember.Inflector        = ember$inflector$lib$system$inflector$$default;

    Ember.String.pluralize   = ember$inflector$lib$system$string$$pluralize;
    Ember.String.singularize = ember$inflector$lib$system$string$$singularize;

    var ember$inflector$lib$main$$default = ember$inflector$lib$system$inflector$$default;

    if (typeof 'define' !== 'undefined' && define.amd){
      define('ember-inflector', ['exports'], function(__exports__){
        __exports__['default'] = ember$inflector$lib$system$inflector$$default;
        return ember$inflector$lib$system$inflector$$default;
      });
    } else if (typeof module !== 'undefined' && module['exports']){
      module['exports'] = ember$inflector$lib$system$inflector$$default;
    }
}).call(this);


;!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.faker=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// since we are requiring the top level of faker, load all locales by default
var Faker = require('./lib');
var faker = new Faker({ locales: require('./lib/locales') });
module['exports'] = faker;
},{"./lib":11,"./lib/locales":13}],2:[function(require,module,exports){
function Address (faker) {
  var f = faker.fake,
      Helpers = faker.helpers;

  this.zipCode = function(format) {
    // if zip format is not specified, use the zip format defined for the locale
    if (typeof format === 'undefined') {
      var localeFormat = faker.definitions.address.postcode;
      if (typeof localeFormat === 'string') {
        format = localeFormat;
      } else {
        format = faker.random.arrayElement(localeFormat);
      }
    }
    return Helpers.replaceSymbols(format);
  }

  this.city = function (format) {
    var formats = [
      '{{address.cityPrefix}} {{name.firstName}} {{address.citySuffix}}',
      '{{address.cityPrefix}} {{name.firstName}}',
      '{{name.firstName}} {{address.citySuffix}}',
      '{{name.lastName}} {{address.citySuffix}}'
    ];

    if (typeof format !== "number") {
      format = faker.random.number(formats.length - 1);
    }

    return f(formats[format]);

  }

  this.cityPrefix = function () {
    return faker.random.arrayElement(faker.definitions.address.city_prefix);
  }

  this.citySuffix = function () {
    return faker.random.arrayElement(faker.definitions.address.city_suffix);
  }

  this.streetName = function () {
      var result;
      switch (faker.random.number(1)) {
      case 0:
          result = faker.name.lastName() + " " + faker.address.streetSuffix();
          break;
      case 1:
          result = faker.name.firstName() + " " + faker.address.streetSuffix();
          break;
      }
      return result;
  }

  //
  // TODO: change all these methods that accept a boolean to instead accept an options hash.
  //
  this.streetAddress = function (useFullAddress) {
      if (useFullAddress === undefined) { useFullAddress = false; }
      var address = "";
      switch (faker.random.number(2)) {
      case 0:
          address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
          break;
      case 1:
          address = Helpers.replaceSymbolWithNumber("####") +  " " + faker.address.streetName();
          break;
      case 2:
          address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
          break;
      }
      return useFullAddress ? (address + " " + faker.address.secondaryAddress()) : address;
  }

  this.streetSuffix = function () {
      return faker.random.arrayElement(faker.definitions.address.street_suffix);
  }
  
  this.streetPrefix = function () {
      return faker.random.arrayElement(faker.definitions.address.street_prefix);
  }

  this.secondaryAddress = function () {
      return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(
          [
              'Apt. ###',
              'Suite ###'
          ]
      ));
  }

  this.county = function () {
    return faker.random.arrayElement(faker.definitions.address.county);
  }

  this.country = function () {
    return faker.random.arrayElement(faker.definitions.address.country);
  }

  this.countryCode = function () {
    return faker.random.arrayElement(faker.definitions.address.country_code);
  }

  this.state = function (useAbbr) {
      return faker.random.arrayElement(faker.definitions.address.state);
  }

  this.stateAbbr = function () {
      return faker.random.arrayElement(faker.definitions.address.state_abbr);
  }

  this.latitude = function () {
      return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
  }

  this.longitude = function () {
      return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
  }
  
  return this;
}


module.exports = Address;

},{}],3:[function(require,module,exports){
var Commerce = function (faker) {
  var self = this;

  self.color = function() {
      return faker.random.arrayElement(faker.definitions.commerce.color);
  };

  self.department = function(max, fixedAmount) {
    
      return faker.random.arrayElement(faker.definitions.commerce.department);
      /*
      max = max || 3;

      var num = Math.floor((Math.random() * max) + 1);
      if (fixedAmount) {
          num = max;
      }

      var categories = faker.commerce.categories(num);

      if(num > 1) {
          return faker.commerce.mergeCategories(categories);
      }

      return categories[0];
      */
  };

  self.productName = function() {
      return faker.commerce.productAdjective() + " " +
              faker.commerce.productMaterial() + " " +
              faker.commerce.product();
  };

  self.price = function(min, max, dec, symbol) {
      min = min || 0;
      max = max || 1000;
      dec = dec || 2;
      symbol = symbol || '';

      if(min < 0 || max < 0) {
          return symbol + 0.00;
      }

      return symbol + (Math.round((Math.random() * (max - min) + min) * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);
  };

  /*
  self.categories = function(num) {
      var categories = [];

      do {
          var category = faker.random.arrayElement(faker.definitions.commerce.department);
          if(categories.indexOf(category) === -1) {
              categories.push(category);
          }
      } while(categories.length < num);

      return categories;
  };

  */
  /*
  self.mergeCategories = function(categories) {
      var separator = faker.definitions.separator || " &";
      // TODO: find undefined here
      categories = categories || faker.definitions.commerce.categories;
      var commaSeparated = categories.slice(0, -1).join(', ');

      return [commaSeparated, categories[categories.length - 1]].join(separator + " ");
  };
  */

  self.productAdjective = function() {
      return faker.random.arrayElement(faker.definitions.commerce.product_name.adjective);
  };

  self.productMaterial = function() {
      return faker.random.arrayElement(faker.definitions.commerce.product_name.material);
  };

  self.product = function() {
      return faker.random.arrayElement(faker.definitions.commerce.product_name.product);
  }

  return self;
};

module['exports'] = Commerce;
},{}],4:[function(require,module,exports){
var Company = function (faker) {
  
  var self = this;
  var f = faker.fake;
  
  this.suffixes = function () {
    // Don't want the source array exposed to modification, so return a copy
    return faker.definitions.company.suffix.slice(0);
  }

  this.companyName = function (format) {

    var formats = [
      '{{name.lastName}} {{company.companySuffix}}',
      '{{name.lastName}} - {{name.lastName}}',
      '{{name.lastName}}, {{name.lastName}} and {{name.lastName}}'
    ];

    if (typeof format !== "number") {
      format = faker.random.number(formats.length - 1);
    }

    return f(formats[format]);
  }

  this.companySuffix = function () {
      return faker.random.arrayElement(faker.company.suffixes());
  }

  this.catchPhrase = function () {
    return f('{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}')
  }

  this.bs = function () {
    return f('{{company.bsAdjective}} {{company.bsBuzz}} {{company.bsNoun}}');
  }

  this.catchPhraseAdjective = function () {
      return faker.random.arrayElement(faker.definitions.company.adjective);
  }

  this.catchPhraseDescriptor = function () {
      return faker.random.arrayElement(faker.definitions.company.descriptor);
  }

  this.catchPhraseNoun = function () {
      return faker.random.arrayElement(faker.definitions.company.noun);
  }

  this.bsAdjective = function () {
      return faker.random.arrayElement(faker.definitions.company.bs_adjective);
  }

  this.bsBuzz = function () {
      return faker.random.arrayElement(faker.definitions.company.bs_verb);
  }

  this.bsNoun = function () {
      return faker.random.arrayElement(faker.definitions.company.bs_noun);
  }
  
}

module['exports'] = Company;
},{}],5:[function(require,module,exports){
var _Date = function (faker) {
  var self = this;
  self.past = function (years, refDate) {
      var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
      var range = {
        min: 1000,
        max: (years || 1) * 365 * 24 * 3600 * 1000
      };

      var past = date.getTime();
      past -= faker.random.number(range); // some time from now to N years ago, in milliseconds
      date.setTime(past);

      return date;
  };

  self.future = function (years, refDate) {
      var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
      var range = {
        min: 1000,
        max: (years || 1) * 365 * 24 * 3600 * 1000
      };

      var future = date.getTime();
      future += faker.random.number(range); // some time from now to N years later, in milliseconds
      date.setTime(future);

      return date;
  };

  self.between = function (from, to) {
      var fromMilli = Date.parse(from);
      var dateOffset = faker.random.number(Date.parse(to) - fromMilli);

      var newDate = new Date(fromMilli + dateOffset);

      return newDate;
  };

  self.recent = function (days) {
      var date = new Date();
      var range = {
        min: 1000,
        max: (days || 1) * 24 * 3600 * 1000
      };

      var future = date.getTime();
      future -= faker.random.number(range); // some time from now to N days ago, in milliseconds
      date.setTime(future);

      return date;
  }
  
  return self;
  
};

module['exports'] = _Date;
},{}],6:[function(require,module,exports){
/*
  fake.js - generator method for combining faker methods based on string input

*/

function Fake (faker) {
  
  this.fake = function fake (str) {
    // setup default response as empty string
    var res = '';

    // if incoming str parameter is not provided, return error message
    if (typeof str !== 'string' || str.length === 0) {
      res = 'string parameter is required!';
      return res;
    }

    // find first matching {{ and }}
    var start = str.search('{{');
    var end = str.search('}}');

    // if no {{ and }} is found, we are done
    if (start === -1 && end === -1) {
      return str;
    }

    // console.log('attempting to parse', str);

    // extract method name from between the {{ }} that we found
    // for example: {{name.firstName}}
    var method = str.substr(start + 2,  end - start - 2);
    method = method.replace('}}', '');
    method = method.replace('{{', '');

    // console.log('method', method)

    // split the method into module and function
    var parts = method.split('.');

    if (typeof faker[parts[0]] === "undefined") {
      throw new Error('Invalid module: ' + parts[0]);
    }

    if (typeof faker[parts[0]][parts[1]] === "undefined") {
      throw new Error('Invalid method: ' + parts[0] + "." + parts[1]);
    }

    // assign the function from the module.function namespace
    var fn = faker[parts[0]][parts[1]];

    // replace the found tag with the returned fake value
    res = str.replace('{{' + method + '}}', fn());

    // return the response recursively until we are done finding all tags
    return fake(res);    
  }
  
  return this;
  
  
}

module['exports'] = Fake;
},{}],7:[function(require,module,exports){
var Finance = function (faker) {
  var Helpers = faker.helpers,
      self = this;

  self.account = function (length) {

      length = length || 8;

      var template = '';

      for (var i = 0; i < length; i++) {
          template = template + '#';
      }
      length = null;
      return Helpers.replaceSymbolWithNumber(template);
  }

  self.accountName = function () {

      return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');
  }

  self.mask = function (length, parens, elipsis) {


      //set defaults
      length = (length == 0 || !length || typeof length == 'undefined') ? 4 : length;
      parens = (parens === null) ? true : parens;
      elipsis = (elipsis === null) ? true : elipsis;

      //create a template for length
      var template = '';

      for (var i = 0; i < length; i++) {
          template = template + '#';
      }

      //prefix with elipsis
      template = (elipsis) ? ['...', template].join('') : template;

      template = (parens) ? ['(', template, ')'].join('') : template;

      //generate random numbers
      template = Helpers.replaceSymbolWithNumber(template);

      return template;

  }

  //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
  //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

  self.amount = function (min, max, dec, symbol) {

      min = min || 0;
      max = max || 1000;
      dec = dec || 2;
      symbol = symbol || '';

      return symbol + (Math.round((Math.random() * (max - min) + min) * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);

  }

  self.transactionType = function () {
      return Helpers.randomize(faker.definitions.finance.transaction_type);
  }

  self.currencyCode = function () {
      return faker.random.objectElement(faker.definitions.finance.currency)['code'];
  }

  self.currencyName = function () {
      return faker.random.objectElement(faker.definitions.finance.currency, 'key');
  }

  self.currencySymbol = function () {
      var symbol;

      while (!symbol) {
          symbol = faker.random.objectElement(faker.definitions.finance.currency)['symbol'];
      }
      return symbol;
  }
}

module['exports'] = Finance;
},{}],8:[function(require,module,exports){
var Hacker = function (faker) {
  var self = this;
  
  self.abbreviation = function () {
    return faker.random.arrayElement(faker.definitions.hacker.abbreviation);
  };

  self.adjective = function () {
    return faker.random.arrayElement(faker.definitions.hacker.adjective);
  };

  self.noun = function () {
    return faker.random.arrayElement(faker.definitions.hacker.noun);
  };

  self.verb = function () {
    return faker.random.arrayElement(faker.definitions.hacker.verb);
  };

  self.ingverb = function () {
    return faker.random.arrayElement(faker.definitions.hacker.ingverb);
  };

  self.phrase = function () {

    var data = {
      abbreviation: self.abbreviation(),
      adjective: self.adjective(),
      ingverb: self.ingverb(),
      noun: self.noun(),
      verb: self.verb()
    };

    var phrase = faker.random.arrayElement([ "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!",
      "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!",
      "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!",
      "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!",
      "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"
   ]);

   return faker.helpers.mustache(phrase, data);

  };
  
  return self;
};

module['exports'] = Hacker;
},{}],9:[function(require,module,exports){
var Helpers = function (faker) {

  var self = this;

  // backword-compatibility
  self.randomize = function (array) {
      array = array || ["a", "b", "c"];
      return faker.random.arrayElement(array);
  };

  // slugifies string
  self.slugify = function (string) {
      string = string || "";
      return string.replace(/ /g, '-').replace(/[^\w\.\-]+/g, '');
  };

  // parses string for a symbol and replace it with a random number from 1-10
  self.replaceSymbolWithNumber = function (string, symbol) {
      string = string || "";
      // default symbol is '#'
      if (symbol === undefined) {
          symbol = '#';
      }

      var str = '';
      for (var i = 0; i < string.length; i++) {
          if (string.charAt(i) == symbol) {
              str += faker.random.number(9);
          } else {
              str += string.charAt(i);
          }
      }
      return str;
  };

  // parses string for symbols (numbers or letters) and replaces them appropriately
  self.replaceSymbols = function (string) {
      string = string || "";
  	var alpha = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
      var str = '';

      for (var i = 0; i < string.length; i++) {
          if (string.charAt(i) == "#") {
              str += faker.random.number(9);
  		} else if (string.charAt(i) == "?") {
  			str += alpha[Math.floor(Math.random() * alpha.length)];
          } else {
              str += string.charAt(i);
          }
      }
      return str;
  };

  // takes an array and returns it randomized
  self.shuffle = function (o) {
      o = o || ["a", "b", "c"];
      for (var j, x, i = o.length-1; i; j = faker.random.number(i), x = o[--i], o[i] = o[j], o[j] = x);
      return o;
  };

  self.mustache = function (str, data) {
    if (typeof str === 'undefined') {
      return '';
    }
    for(var p in data) {
      var re = new RegExp('{{' + p + '}}', 'g')
      str = str.replace(re, data[p]);
    }
    return str;
  };

  self.createCard = function () {
      return {
          "name": faker.name.findName(),
          "username": faker.internet.userName(),
          "email": faker.internet.email(),
          "address": {
              "streetA": faker.address.streetName(),
              "streetB": faker.address.streetAddress(),
              "streetC": faker.address.streetAddress(true),
              "streetD": faker.address.secondaryAddress(),
              "city": faker.address.city(),
              "state": faker.address.state(),
              "country": faker.address.country(),
              "zipcode": faker.address.zipCode(),
              "geo": {
                  "lat": faker.address.latitude(),
                  "lng": faker.address.longitude()
              }
          },
          "phone": faker.phone.phoneNumber(),
          "website": faker.internet.domainName(),
          "company": {
              "name": faker.company.companyName(),
              "catchPhrase": faker.company.catchPhrase(),
              "bs": faker.company.bs()
          },
          "posts": [
              {
                  "words": faker.lorem.words(),
                  "sentence": faker.lorem.sentence(),
                  "sentences": faker.lorem.sentences(),
                  "paragraph": faker.lorem.paragraph()
              },
              {
                  "words": faker.lorem.words(),
                  "sentence": faker.lorem.sentence(),
                  "sentences": faker.lorem.sentences(),
                  "paragraph": faker.lorem.paragraph()
              },
              {
                  "words": faker.lorem.words(),
                  "sentence": faker.lorem.sentence(),
                  "sentences": faker.lorem.sentences(),
                  "paragraph": faker.lorem.paragraph()
              }
          ],
          "accountHistory": [faker.helpers.createTransaction(), faker.helpers.createTransaction(), faker.helpers.createTransaction()]
      };
  };

  self.contextualCard = function () {
    var name = faker.name.firstName(),
        userName = faker.internet.userName(name);
    return {
        "name": name,
        "username": userName,
        "avatar": faker.internet.avatar(),
        "email": faker.internet.email(userName),
        "dob": faker.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
        "phone": faker.phone.phoneNumber(),
        "address": {
            "street": faker.address.streetName(true),
            "suite": faker.address.secondaryAddress(),
            "city": faker.address.city(),
            "zipcode": faker.address.zipCode(),
            "geo": {
                "lat": faker.address.latitude(),
                "lng": faker.address.longitude()
            }
        },
        "website": faker.internet.domainName(),
        "company": {
            "name": faker.company.companyName(),
            "catchPhrase": faker.company.catchPhrase(),
            "bs": faker.company.bs()
        }
    };
  };


  self.userCard = function () {
      return {
          "name": faker.name.findName(),
          "username": faker.internet.userName(),
          "email": faker.internet.email(),
          "address": {
              "street": faker.address.streetName(true),
              "suite": faker.address.secondaryAddress(),
              "city": faker.address.city(),
              "zipcode": faker.address.zipCode(),
              "geo": {
                  "lat": faker.address.latitude(),
                  "lng": faker.address.longitude()
              }
          },
          "phone": faker.phone.phoneNumber(),
          "website": faker.internet.domainName(),
          "company": {
              "name": faker.company.companyName(),
              "catchPhrase": faker.company.catchPhrase(),
              "bs": faker.company.bs()
          }
      };
  };

  self.createTransaction = function(){
    return {
      "amount" : faker.finance.amount(),
      "date" : new Date(2012, 1, 2),  //TODO: add a ranged date method
      "business": faker.company.companyName(),
      "name": [faker.finance.accountName(), faker.finance.mask()].join(' '),
      "type" : self.randomize(faker.definitions.finance.transaction_type),
      "account" : faker.finance.account()
    };
  };
  
  return self;
  
};


/*
String.prototype.capitalize = function () { //v1.0
    return this.replace(/\w+/g, function (a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
    });
};
*/

module['exports'] = Helpers;
},{}],10:[function(require,module,exports){
var Image = function (faker) {

  var self = this;

  self.image = function () {
    var categories = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
    return self[faker.random.arrayElement(categories)]();
  };
  self.avatar = function () {
    return faker.internet.avatar();
  };
  self.imageUrl = function (width, height, category) {
      var width = width || 640;
      var height = height || 480;

      var url ='http://lorempixel.com/' + width + '/' + height;
      if (typeof category !== 'undefined') {
        url += '/' + category;
      }
      return url;
  };
  self.abstract = function (width, height) {
    return faker.image.imageUrl(width, height, 'abstract');
  };
  self.animals = function (width, height) {
    return faker.image.imageUrl(width, height, 'animals');
  };
  self.business = function (width, height) {
    return faker.image.imageUrl(width, height, 'business');
  };
  self.cats = function (width, height) {
    return faker.image.imageUrl(width, height, 'cats');
  };
  self.city = function (width, height) {
    return faker.image.imageUrl(width, height, 'city');
  };
  self.food = function (width, height) {
    return faker.image.imageUrl(width, height, 'food');
  };
  self.nightlife = function (width, height) {
    return faker.image.imageUrl(width, height, 'nightlife');
  };
  self.fashion = function (width, height) {
    return faker.image.imageUrl(width, height, 'fashion');
  };
  self.people = function (width, height) {
    return faker.image.imageUrl(width, height, 'people');
  };
  self.nature = function (width, height) {
    return faker.image.imageUrl(width, height, 'nature');
  };
  self.sports = function (width, height) {
    return faker.image.imageUrl(width, height, 'sports');
  };
  self.technics = function (width, height) {
    return faker.image.imageUrl(width, height, 'technics');
  };
  self.transport = function (width, height) {
    return faker.image.imageUrl(width, height, 'transport');
  }  
}

module["exports"] = Image;
},{}],11:[function(require,module,exports){
/*

   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

   you can include the faker library into your existing node.js application by requiring the entire /faker directory

    var faker = require(./faker);
    var randomName = faker.name.findName();

   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

    var faker = require(./customAppPath/faker);
    var randomName = faker.name.findName();


  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

*/

function Faker (opts) {
  
  var self = this;

  opts = opts || {};

  // assign options
  var locales = self.locales || opts.locales || {};
  var locale = self.locale || opts.locale || "en";
  var localeFallback = self.localeFallback || opts.localeFallback || "en";
  
  self.locales = locales;
  self.locale = locale;
  self.localeFallback = localeFallback;
  
  
  self.definitions = {};
  
  var Fake = require('./fake');
  self.fake = new Fake(self).fake;
  
  var Random = require('./random');
  self.random = new Random(self);
  // self.random = require('./random');  

  var Helpers = require('./helpers');
  self.helpers = new Helpers(self);

  var Name = require('./name');
  self.name = new Name(self);
  // self.name = require('./name');

  var Address = require('./address');
  self.address = new Address(self);

  var Company = require('./company');
  self.company = new Company(self);

  var Finance = require('./finance');
  self.finance = new Finance(self);

  var Image = require('./image');
  self.image = new Image(self);

  var Lorem = require('./lorem');
  self.lorem = new Lorem(self);

  var Hacker = require('./hacker');
  self.hacker = new Hacker(self);

  var Internet = require('./internet');
  self.internet = new Internet(self);

  var Phone = require('./phone_number');
  self.phone = new Phone(self);

  var _Date = require('./date');
  self.date = new _Date(self);

  var Commerce = require('./commerce');
  self.commerce = new Commerce(self);

  // TODO: fix self.commerce = require('./commerce');
  
  var _definitions = {
    "name": ["first_name", "last_name", "prefix", "suffix", "title", "male_first_name", "female_first_name", "male_middle_name", "female_middle_name", "male_last_name", "female_last_name"],
    "address": ["city_prefix", "city_suffix", "street_suffix", "county", "country", "country_code", "state", "state_abbr", "street_prefix", "postcode"],
    "company": ["adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb", "suffix"],
    "lorem": ["words"],
    "hacker": ["abbreviation", "adjective", "noun", "verb", "ingverb"],
    "phone_number": ["formats"],
    "finance": ["account_type", "transaction_type", "currency"],
    "internet": ["avatar_uri", "domain_suffix", "free_email", "password"],
    "commerce": ["color", "department", "product_name", "price", "categories"],
    "title": "",
    "separator": ""
  };

  // Create a Getter for all definitions.foo.bar propetries
  Object.keys(_definitions).forEach(function(d){
    if (typeof self.definitions[d] === "undefined") {
      self.definitions[d] = {};
    }

    if (typeof _definitions[d] === "string") {
        self.definitions[d] = _definitions[d];
      return;
    }

    _definitions[d].forEach(function(p){
      Object.defineProperty(self.definitions[d], p, {
        get: function () {
          if (typeof self.locales[self.locale][d] === "undefined" || typeof self.locales[self.locale][d][p] === "undefined") {
            // certain localization sets contain less data then others.
            // in the case of a missing defintion, use the default localeFallback to substitute the missing set data
            // throw new Error('unknown property ' + d + p)
            return self.locales[localeFallback][d][p];
          } else {
            // return localized data
            return self.locales[self.locale][d][p];
          }
        }
      });
    });
  });
  
  
};

module['exports'] = Faker;
},{"./address":2,"./commerce":3,"./company":4,"./date":5,"./fake":6,"./finance":7,"./hacker":8,"./helpers":9,"./image":10,"./internet":12,"./lorem":855,"./name":856,"./phone_number":857,"./random":858}],12:[function(require,module,exports){
var password_generator = require('../vendor/password-generator.js'),
    random_ua = require('../vendor/user-agent');

var Internet = function (faker) {
  var self = this;
  self.avatar = function () {
      return faker.random.arrayElement(faker.definitions.internet.avatar_uri);
  };

  self.email = function (firstName, lastName, provider) {
      provider = provider || faker.random.arrayElement(faker.definitions.internet.free_email);
      return  faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + "@" + provider;
  };

  self.userName = function (firstName, lastName) {
      var result;
      firstName = firstName || faker.name.firstName();
      lastName = lastName || faker.name.lastName();
      switch (faker.random.number(2)) {
      case 0:
          result = firstName + faker.random.number(99);
          break;
      case 1:
          result = firstName + faker.random.arrayElement([".", "_"]) + lastName;
          break;
      case 2:
          result = firstName + faker.random.arrayElement([".", "_"]) + lastName + faker.random.number(99);
          break;
      }
      result = result.toString().replace(/'/g, "");
      result = result.replace(/ /g, "");
      return result;
  };

  self.protocol = function () {
      var protocols = ['http','https'];
      return faker.random.arrayElement(protocols);
  };

  self.url = function () {
      return faker.internet.protocol() + '://' + faker.internet.domainName();
  };

  self.domainName = function () {
      return faker.internet.domainWord() + "." + faker.internet.domainSuffix();
  };

  self.domainSuffix = function () {
      return faker.random.arrayElement(faker.definitions.internet.domain_suffix);
  };

  self.domainWord = function () {
      return faker.name.firstName().replace(/([\\~#&*{}/:<>?|\"])/ig, '').toLowerCase();
  };

  self.ip = function () {
      var randNum = function () {
          return (faker.random.number(255)).toFixed(0);
      };

      var result = [];
      for (var i = 0; i < 4; i++) {
          result[i] = randNum();
      }

      return result.join(".");
  };

  self.userAgent = function () {
    return random_ua.generate();
  };

  self.color = function (baseRed255, baseGreen255, baseBlue255) {
      baseRed255 = baseRed255 || 0;
      baseGreen255 = baseGreen255 || 0;
      baseBlue255 = baseBlue255 || 0;
      // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
      var red = Math.floor((faker.random.number(256) + baseRed255) / 2);
      var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);
      var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);
      var redStr = red.toString(16);
      var greenStr = green.toString(16);
      var blueStr = blue.toString(16);
      return '#' +
        (redStr.length === 1 ? '0' : '') + redStr +
        (greenStr.length === 1 ? '0' : '') + greenStr +
        (blueStr.length === 1 ? '0': '') + blueStr;

  };

  self.mac = function(){
      var i, mac = "";
      for (i=0; i < 12; i++) {
          mac+= parseInt(Math.random()*16).toString(16);
          if (i%2==1 && i != 11) {
              mac+=":";
          }
      }
      return mac;
  };

  self.password = function (len, memorable, pattern, prefix) {
    len = len || 15;
    if (typeof memorable === "undefined") {
      memorable = false;
    }
    return password_generator(len, memorable, pattern, prefix);
  }
  
};


module["exports"] = Internet;

},{"../vendor/password-generator.js":860,"../vendor/user-agent":861}],13:[function(require,module,exports){
exports['de'] = require('./locales/de');
exports['de_AT'] = require('./locales/de_AT');
exports['de_CH'] = require('./locales/de_CH');
exports['en'] = require('./locales/en');
exports['en_AU'] = require('./locales/en_AU');
exports['en_BORK'] = require('./locales/en_BORK');
exports['en_CA'] = require('./locales/en_CA');
exports['en_GB'] = require('./locales/en_GB');
exports['en_IE'] = require('./locales/en_IE');
exports['en_IND'] = require('./locales/en_IND');
exports['en_US'] = require('./locales/en_US');
exports['en_au_ocker'] = require('./locales/en_au_ocker');
exports['es'] = require('./locales/es');
exports['fa'] = require('./locales/fa');
exports['fr'] = require('./locales/fr');
exports['fr_CA'] = require('./locales/fr_CA');
exports['ge'] = require('./locales/ge');
exports['it'] = require('./locales/it');
exports['ja'] = require('./locales/ja');
exports['ko'] = require('./locales/ko');
exports['nb_NO'] = require('./locales/nb_NO');
exports['nep'] = require('./locales/nep');
exports['nl'] = require('./locales/nl');
exports['pl'] = require('./locales/pl');
exports['pt_BR'] = require('./locales/pt_BR');
exports['ru'] = require('./locales/ru');
exports['sk'] = require('./locales/sk');
exports['sv'] = require('./locales/sv');
exports['tr'] = require('./locales/tr');
exports['uk'] = require('./locales/uk');
exports['vi'] = require('./locales/vi');
exports['zh_CN'] = require('./locales/zh_CN');
exports['zh_TW'] = require('./locales/zh_TW');

},{"./locales/de":34,"./locales/de_AT":67,"./locales/de_CH":86,"./locales/en":153,"./locales/en_AU":182,"./locales/en_BORK":190,"./locales/en_CA":198,"./locales/en_GB":210,"./locales/en_IE":220,"./locales/en_IND":232,"./locales/en_US":244,"./locales/en_au_ocker":264,"./locales/es":296,"./locales/fa":309,"./locales/fr":335,"./locales/fr_CA":355,"./locales/ge":381,"./locales/it":416,"./locales/ja":438,"./locales/ko":459,"./locales/nb_NO":489,"./locales/nep":509,"./locales/nl":533,"./locales/pl":573,"./locales/pt_BR":602,"./locales/ru":636,"./locales/sk":676,"./locales/sv":720,"./locales/tr":746,"./locales/uk":779,"./locales/vi":806,"./locales/zh_CN":829,"./locales/zh_TW":848}],14:[function(require,module,exports){
module["exports"] = [
  "###",
  "##",
  "#",
  "##a",
  "##b",
  "##c"
];

},{}],15:[function(require,module,exports){
module["exports"] = [
  "#{city_prefix} #{Name.first_name}#{city_suffix}",
  "#{city_prefix} #{Name.first_name}",
  "#{Name.first_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}"
];

},{}],16:[function(require,module,exports){
module["exports"] = [
  "Nord",
  "Ost",
  "West",
  "Süd",
  "Neu",
  "Alt",
  "Bad"
];

},{}],17:[function(require,module,exports){
module["exports"] = [
  "stadt",
  "dorf",
  "land",
  "scheid",
  "burg"
];

},{}],18:[function(require,module,exports){
module["exports"] = [
  "Ägypten",
  "Äquatorialguinea",
  "Äthiopien",
  "Österreich",
  "Afghanistan",
  "Albanien",
  "Algerien",
  "Amerikanisch-Samoa",
  "Amerikanische Jungferninseln",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antarktis",
  "Antigua und Barbuda",
  "Argentinien",
  "Armenien",
  "Aruba",
  "Aserbaidschan",
  "Australien",
  "Bahamas",
  "Bahrain",
  "Bangladesch",
  "Barbados",
  "Belarus",
  "Belgien",
  "Belize",
  "Benin",
  "die Bermudas",
  "Bhutan",
  "Bolivien",
  "Bosnien und Herzegowina",
  "Botsuana",
  "Bouvetinsel",
  "Brasilien",
  "Britische Jungferninseln",
  "Britisches Territorium im Indischen Ozean",
  "Brunei Darussalam",
  "Bulgarien",
  "Burkina Faso",
  "Burundi",
  "Chile",
  "China",
  "Cookinseln",
  "Costa Rica",
  "Dänemark",
  "Demokratische Republik Kongo",
  "Demokratische Volksrepublik Korea",
  "Deutschland",
  "Dominica",
  "Dominikanische Republik",
  "Dschibuti",
  "Ecuador",
  "El Salvador",
  "Eritrea",
  "Estland",
  "Färöer",
  "Falklandinseln",
  "Fidschi",
  "Finnland",
  "Frankreich",
  "Französisch-Guayana",
  "Französisch-Polynesien",
  "Französische Gebiete im südlichen Indischen Ozean",
  "Gabun",
  "Gambia",
  "Georgien",
  "Ghana",
  "Gibraltar",
  "Grönland",
  "Grenada",
  "Griechenland",
  "Guadeloupe",
  "Guam",
  "Guatemala",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Heard und McDonaldinseln",
  "Honduras",
  "Hongkong",
  "Indien",
  "Indonesien",
  "Irak",
  "Iran",
  "Irland",
  "Island",
  "Israel",
  "Italien",
  "Jamaika",
  "Japan",
  "Jemen",
  "Jordanien",
  "Jugoslawien",
  "Kaimaninseln",
  "Kambodscha",
  "Kamerun",
  "Kanada",
  "Kap Verde",
  "Kasachstan",
  "Katar",
  "Kenia",
  "Kirgisistan",
  "Kiribati",
  "Kleinere amerikanische Überseeinseln",
  "Kokosinseln",
  "Kolumbien",
  "Komoren",
  "Kongo",
  "Kroatien",
  "Kuba",
  "Kuwait",
  "Laos",
  "Lesotho",
  "Lettland",
  "Libanon",
  "Liberia",
  "Libyen",
  "Liechtenstein",
  "Litauen",
  "Luxemburg",
  "Macau",
  "Madagaskar",
  "Malawi",
  "Malaysia",
  "Malediven",
  "Mali",
  "Malta",
  "ehemalige jugoslawische Republik Mazedonien",
  "Marokko",
  "Marshallinseln",
  "Martinique",
  "Mauretanien",
  "Mauritius",
  "Mayotte",
  "Mexiko",
  "Mikronesien",
  "Monaco",
  "Mongolei",
  "Montserrat",
  "Mosambik",
  "Myanmar",
  "Nördliche Marianen",
  "Namibia",
  "Nauru",
  "Nepal",
  "Neukaledonien",
  "Neuseeland",
  "Nicaragua",
  "Niederländische Antillen",
  "Niederlande",
  "Niger",
  "Nigeria",
  "Niue",
  "Norfolkinsel",
  "Norwegen",
  "Oman",
  "Osttimor",
  "Pakistan",
  "Palau",
  "Panama",
  "Papua-Neuguinea",
  "Paraguay",
  "Peru",
  "Philippinen",
  "Pitcairninseln",
  "Polen",
  "Portugal",
  "Puerto Rico",
  "Réunion",
  "Republik Korea",
  "Republik Moldau",
  "Ruanda",
  "Rumänien",
  "Russische Föderation",
  "São Tomé und Príncipe",
  "Südafrika",
  "Südgeorgien und Südliche Sandwichinseln",
  "Salomonen",
  "Sambia",
  "Samoa",
  "San Marino",
  "Saudi-Arabien",
  "Schweden",
  "Schweiz",
  "Senegal",
  "Seychellen",
  "Sierra Leone",
  "Simbabwe",
  "Singapur",
  "Slowakei",
  "Slowenien",
  "Somalien",
  "Spanien",
  "Sri Lanka",
  "St. Helena",
  "St. Kitts und Nevis",
  "St. Lucia",
  "St. Pierre und Miquelon",
  "St. Vincent und die Grenadinen",
  "Sudan",
  "Surinam",
  "Svalbard und Jan Mayen",
  "Swasiland",
  "Syrien",
  "Türkei",
  "Tadschikistan",
  "Taiwan",
  "Tansania",
  "Thailand",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad und Tobago",
  "Tschad",
  "Tschechische Republik",
  "Tunesien",
  "Turkmenistan",
  "Turks- und Caicosinseln",
  "Tuvalu",
  "Uganda",
  "Ukraine",
  "Ungarn",
  "Uruguay",
  "Usbekistan",
  "Vanuatu",
  "Vatikanstadt",
  "Venezuela",
  "Vereinigte Arabische Emirate",
  "Vereinigte Staaten",
  "Vereinigtes Königreich",
  "Vietnam",
  "Wallis und Futuna",
  "Weihnachtsinsel",
  "Westsahara",
  "Zentralafrikanische Republik",
  "Zypern"
];

},{}],19:[function(require,module,exports){
module["exports"] = [
  "Deutschland"
];

},{}],20:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.street_root = require("./street_root");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":14,"./city":15,"./city_prefix":16,"./city_suffix":17,"./country":18,"./default_country":19,"./postcode":21,"./secondary_address":22,"./state":23,"./state_abbr":24,"./street_address":25,"./street_name":26,"./street_root":27}],21:[function(require,module,exports){
module["exports"] = [
  "#####",
  "#####"
];

},{}],22:[function(require,module,exports){
module["exports"] = [
  "Apt. ###",
  "Zimmer ###",
  "# OG"
];

},{}],23:[function(require,module,exports){
module["exports"] = [
  "Baden-Württemberg",
  "Bayern",
  "Berlin",
  "Brandenburg",
  "Bremen",
  "Hamburg",
  "Hessen",
  "Mecklenburg-Vorpommern",
  "Niedersachsen",
  "Nordrhein-Westfalen",
  "Rheinland-Pfalz",
  "Saarland",
  "Sachsen",
  "Sachsen-Anhalt",
  "Schleswig-Holstein",
  "Thüringen"
];

},{}],24:[function(require,module,exports){
module["exports"] = [
  "BW",
  "BY",
  "BE",
  "BB",
  "HB",
  "HH",
  "HE",
  "MV",
  "NI",
  "NW",
  "RP",
  "SL",
  "SN",
  "ST",
  "SH",
  "TH"
];

},{}],25:[function(require,module,exports){
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],26:[function(require,module,exports){
module["exports"] = [
  "#{street_root}"
];

},{}],27:[function(require,module,exports){
module["exports"] = [
  "Ackerweg",
  "Adalbert-Stifter-Str.",
  "Adalbertstr.",
  "Adolf-Baeyer-Str.",
  "Adolf-Kaschny-Str.",
  "Adolf-Reichwein-Str.",
  "Adolfsstr.",
  "Ahornweg",
  "Ahrstr.",
  "Akazienweg",
  "Albert-Einstein-Str.",
  "Albert-Schweitzer-Str.",
  "Albertus-Magnus-Str.",
  "Albert-Zarthe-Weg",
  "Albin-Edelmann-Str.",
  "Albrecht-Haushofer-Str.",
  "Aldegundisstr.",
  "Alexanderstr.",
  "Alfred-Delp-Str.",
  "Alfred-Kubin-Str.",
  "Alfred-Stock-Str.",
  "Alkenrather Str.",
  "Allensteiner Str.",
  "Alsenstr.",
  "Alt Steinbücheler Weg",
  "Alte Garten",
  "Alte Heide",
  "Alte Landstr.",
  "Alte Ziegelei",
  "Altenberger Str.",
  "Altenhof",
  "Alter Grenzweg",
  "Altstadtstr.",
  "Am Alten Gaswerk",
  "Am Alten Schafstall",
  "Am Arenzberg",
  "Am Benthal",
  "Am Birkenberg",
  "Am Blauen Berg",
  "Am Borsberg",
  "Am Brungen",
  "Am Büchelter Hof",
  "Am Buttermarkt",
  "Am Ehrenfriedhof",
  "Am Eselsdamm",
  "Am Falkenberg",
  "Am Frankenberg",
  "Am Gesundheitspark",
  "Am Gierlichshof",
  "Am Graben",
  "Am Hagelkreuz",
  "Am Hang",
  "Am Heidkamp",
  "Am Hemmelrather Hof",
  "Am Hofacker",
  "Am Hohen Ufer",
  "Am Höllers Eck",
  "Am Hühnerberg",
  "Am Jägerhof",
  "Am Junkernkamp",
  "Am Kemperstiegel",
  "Am Kettnersbusch",
  "Am Kiesberg",
  "Am Klösterchen",
  "Am Knechtsgraben",
  "Am Köllerweg",
  "Am Köttersbach",
  "Am Kreispark",
  "Am Kronefeld",
  "Am Küchenhof",
  "Am Kühnsbusch",
  "Am Lindenfeld",
  "Am Märchen",
  "Am Mittelberg",
  "Am Mönchshof",
  "Am Mühlenbach",
  "Am Neuenhof",
  "Am Nonnenbruch",
  "Am Plattenbusch",
  "Am Quettinger Feld",
  "Am Rosenhügel",
  "Am Sandberg",
  "Am Scherfenbrand",
  "Am Schokker",
  "Am Silbersee",
  "Am Sonnenhang",
  "Am Sportplatz",
  "Am Stadtpark",
  "Am Steinberg",
  "Am Telegraf",
  "Am Thelenhof",
  "Am Vogelkreuz",
  "Am Vogelsang",
  "Am Vogelsfeldchen",
  "Am Wambacher Hof",
  "Am Wasserturm",
  "Am Weidenbusch",
  "Am Weiher",
  "Am Weingarten",
  "Am Werth",
  "Amselweg",
  "An den Irlen",
  "An den Rheinauen",
  "An der Bergerweide",
  "An der Dingbank",
  "An der Evangelischen Kirche",
  "An der Evgl. Kirche",
  "An der Feldgasse",
  "An der Fettehenne",
  "An der Kante",
  "An der Laach",
  "An der Lehmkuhle",
  "An der Lichtenburg",
  "An der Luisenburg",
  "An der Robertsburg",
  "An der Schmitten",
  "An der Schusterinsel",
  "An der Steinrütsch",
  "An St. Andreas",
  "An St. Remigius",
  "Andreasstr.",
  "Ankerweg",
  "Annette-Kolb-Str.",
  "Apenrader Str.",
  "Arnold-Ohletz-Str.",
  "Atzlenbacher Str.",
  "Auerweg",
  "Auestr.",
  "Auf dem Acker",
  "Auf dem Blahnenhof",
  "Auf dem Bohnbüchel",
  "Auf dem Bruch",
  "Auf dem End",
  "Auf dem Forst",
  "Auf dem Herberg",
  "Auf dem Lehn",
  "Auf dem Stein",
  "Auf dem Weierberg",
  "Auf dem Weiherhahn",
  "Auf den Reien",
  "Auf der Donnen",
  "Auf der Grieße",
  "Auf der Ohmer",
  "Auf der Weide",
  "Auf'm Berg",
  "Auf'm Kamp",
  "Augustastr.",
  "August-Kekulé-Str.",
  "A.-W.-v.-Hofmann-Str.",
  "Bahnallee",
  "Bahnhofstr.",
  "Baltrumstr.",
  "Bamberger Str.",
  "Baumberger Str.",
  "Bebelstr.",
  "Beckers Kämpchen",
  "Beerenstr.",
  "Beethovenstr.",
  "Behringstr.",
  "Bendenweg",
  "Bensberger Str.",
  "Benzstr.",
  "Bergische Landstr.",
  "Bergstr.",
  "Berliner Platz",
  "Berliner Str.",
  "Bernhard-Letterhaus-Str.",
  "Bernhard-Lichtenberg-Str.",
  "Bernhard-Ridder-Str.",
  "Bernsteinstr.",
  "Bertha-Middelhauve-Str.",
  "Bertha-von-Suttner-Str.",
  "Bertolt-Brecht-Str.",
  "Berzeliusstr.",
  "Bielertstr.",
  "Biesenbach",
  "Billrothstr.",
  "Birkenbergstr.",
  "Birkengartenstr.",
  "Birkenweg",
  "Bismarckstr.",
  "Bitterfelder Str.",
  "Blankenburg",
  "Blaukehlchenweg",
  "Blütenstr.",
  "Boberstr.",
  "Böcklerstr.",
  "Bodelschwinghstr.",
  "Bodestr.",
  "Bogenstr.",
  "Bohnenkampsweg",
  "Bohofsweg",
  "Bonifatiusstr.",
  "Bonner Str.",
  "Borkumstr.",
  "Bornheimer Str.",
  "Borsigstr.",
  "Borussiastr.",
  "Bracknellstr.",
  "Brahmsweg",
  "Brandenburger Str.",
  "Breidenbachstr.",
  "Breslauer Str.",
  "Bruchhauser Str.",
  "Brückenstr.",
  "Brucknerstr.",
  "Brüder-Bonhoeffer-Str.",
  "Buchenweg",
  "Bürgerbuschweg",
  "Burgloch",
  "Burgplatz",
  "Burgstr.",
  "Burgweg",
  "Bürriger Weg",
  "Burscheider Str.",
  "Buschkämpchen",
  "Butterheider Str.",
  "Carl-Duisberg-Platz",
  "Carl-Duisberg-Str.",
  "Carl-Leverkus-Str.",
  "Carl-Maria-von-Weber-Platz",
  "Carl-Maria-von-Weber-Str.",
  "Carlo-Mierendorff-Str.",
  "Carl-Rumpff-Str.",
  "Carl-von-Ossietzky-Str.",
  "Charlottenburger Str.",
  "Christian-Heß-Str.",
  "Claasbruch",
  "Clemens-Winkler-Str.",
  "Concordiastr.",
  "Cranachstr.",
  "Dahlemer Str.",
  "Daimlerstr.",
  "Damaschkestr.",
  "Danziger Str.",
  "Debengasse",
  "Dechant-Fein-Str.",
  "Dechant-Krey-Str.",
  "Deichtorstr.",
  "Dhünnberg",
  "Dhünnstr.",
  "Dianastr.",
  "Diedenhofener Str.",
  "Diepental",
  "Diepenthaler Str.",
  "Dieselstr.",
  "Dillinger Str.",
  "Distelkamp",
  "Dohrgasse",
  "Domblick",
  "Dönhoffstr.",
  "Dornierstr.",
  "Drachenfelsstr.",
  "Dr.-August-Blank-Str.",
  "Dresdener Str.",
  "Driescher Hecke",
  "Drosselweg",
  "Dudweilerstr.",
  "Dünenweg",
  "Dünfelder Str.",
  "Dünnwalder Grenzweg",
  "Düppeler Str.",
  "Dürerstr.",
  "Dürscheider Weg",
  "Düsseldorfer Str.",
  "Edelrather Weg",
  "Edmund-Husserl-Str.",
  "Eduard-Spranger-Str.",
  "Ehrlichstr.",
  "Eichenkamp",
  "Eichenweg",
  "Eidechsenweg",
  "Eifelstr.",
  "Eifgenstr.",
  "Eintrachtstr.",
  "Elbestr.",
  "Elisabeth-Langgässer-Str.",
  "Elisabethstr.",
  "Elisabeth-von-Thadden-Str.",
  "Elisenstr.",
  "Elsa-Brändström-Str.",
  "Elsbachstr.",
  "Else-Lasker-Schüler-Str.",
  "Elsterstr.",
  "Emil-Fischer-Str.",
  "Emil-Nolde-Str.",
  "Engelbertstr.",
  "Engstenberger Weg",
  "Entenpfuhl",
  "Erbelegasse",
  "Erftstr.",
  "Erfurter Str.",
  "Erich-Heckel-Str.",
  "Erich-Klausener-Str.",
  "Erich-Ollenhauer-Str.",
  "Erlenweg",
  "Ernst-Bloch-Str.",
  "Ernst-Ludwig-Kirchner-Str.",
  "Erzbergerstr.",
  "Eschenallee",
  "Eschenweg",
  "Esmarchstr.",
  "Espenweg",
  "Euckenstr.",
  "Eulengasse",
  "Eulenkamp",
  "Ewald-Flamme-Str.",
  "Ewald-Röll-Str.",
  "Fährstr.",
  "Farnweg",
  "Fasanenweg",
  "Faßbacher Hof",
  "Felderstr.",
  "Feldkampstr.",
  "Feldsiefer Weg",
  "Feldsiefer Wiesen",
  "Feldstr.",
  "Feldtorstr.",
  "Felix-von-Roll-Str.",
  "Ferdinand-Lassalle-Str.",
  "Fester Weg",
  "Feuerbachstr.",
  "Feuerdornweg",
  "Fichtenweg",
  "Fichtestr.",
  "Finkelsteinstr.",
  "Finkenweg",
  "Fixheider Str.",
  "Flabbenhäuschen",
  "Flensburger Str.",
  "Fliederweg",
  "Florastr.",
  "Florianweg",
  "Flotowstr.",
  "Flurstr.",
  "Föhrenweg",
  "Fontanestr.",
  "Forellental",
  "Fortunastr.",
  "Franz-Esser-Str.",
  "Franz-Hitze-Str.",
  "Franz-Kail-Str.",
  "Franz-Marc-Str.",
  "Freiburger Str.",
  "Freiheitstr.",
  "Freiherr-vom-Stein-Str.",
  "Freudenthal",
  "Freudenthaler Weg",
  "Fridtjof-Nansen-Str.",
  "Friedenberger Str.",
  "Friedensstr.",
  "Friedhofstr.",
  "Friedlandstr.",
  "Friedlieb-Ferdinand-Runge-Str.",
  "Friedrich-Bayer-Str.",
  "Friedrich-Bergius-Platz",
  "Friedrich-Ebert-Platz",
  "Friedrich-Ebert-Str.",
  "Friedrich-Engels-Str.",
  "Friedrich-List-Str.",
  "Friedrich-Naumann-Str.",
  "Friedrich-Sertürner-Str.",
  "Friedrichstr.",
  "Friedrich-Weskott-Str.",
  "Friesenweg",
  "Frischenberg",
  "Fritz-Erler-Str.",
  "Fritz-Henseler-Str.",
  "Fröbelstr.",
  "Fürstenbergplatz",
  "Fürstenbergstr.",
  "Gabriele-Münter-Str.",
  "Gartenstr.",
  "Gebhardstr.",
  "Geibelstr.",
  "Gellertstr.",
  "Georg-von-Vollmar-Str.",
  "Gerhard-Domagk-Str.",
  "Gerhart-Hauptmann-Str.",
  "Gerichtsstr.",
  "Geschwister-Scholl-Str.",
  "Gezelinallee",
  "Gierener Weg",
  "Ginsterweg",
  "Gisbert-Cremer-Str.",
  "Glücksburger Str.",
  "Gluckstr.",
  "Gneisenaustr.",
  "Goetheplatz",
  "Goethestr.",
  "Golo-Mann-Str.",
  "Görlitzer Str.",
  "Görresstr.",
  "Graebestr.",
  "Graf-Galen-Platz",
  "Gregor-Mendel-Str.",
  "Greifswalder Str.",
  "Grillenweg",
  "Gronenborner Weg",
  "Große Kirchstr.",
  "Grunder Wiesen",
  "Grundermühle",
  "Grundermühlenhof",
  "Grundermühlenweg",
  "Grüner Weg",
  "Grunewaldstr.",
  "Grünstr.",
  "Günther-Weisenborn-Str.",
  "Gustav-Freytag-Str.",
  "Gustav-Heinemann-Str.",
  "Gustav-Radbruch-Str.",
  "Gut Reuschenberg",
  "Gutenbergstr.",
  "Haberstr.",
  "Habichtgasse",
  "Hafenstr.",
  "Hagenauer Str.",
  "Hahnenblecher",
  "Halenseestr.",
  "Halfenleimbach",
  "Hallesche Str.",
  "Halligstr.",
  "Hamberger Str.",
  "Hammerweg",
  "Händelstr.",
  "Hannah-Höch-Str.",
  "Hans-Arp-Str.",
  "Hans-Gerhard-Str.",
  "Hans-Sachs-Str.",
  "Hans-Schlehahn-Str.",
  "Hans-von-Dohnanyi-Str.",
  "Hardenbergstr.",
  "Haselweg",
  "Hauptstr.",
  "Haus-Vorster-Str.",
  "Hauweg",
  "Havelstr.",
  "Havensteinstr.",
  "Haydnstr.",
  "Hebbelstr.",
  "Heckenweg",
  "Heerweg",
  "Hegelstr.",
  "Heidberg",
  "Heidehöhe",
  "Heidestr.",
  "Heimstättenweg",
  "Heinrich-Böll-Str.",
  "Heinrich-Brüning-Str.",
  "Heinrich-Claes-Str.",
  "Heinrich-Heine-Str.",
  "Heinrich-Hörlein-Str.",
  "Heinrich-Lübke-Str.",
  "Heinrich-Lützenkirchen-Weg",
  "Heinrichstr.",
  "Heinrich-Strerath-Str.",
  "Heinrich-von-Kleist-Str.",
  "Heinrich-von-Stephan-Str.",
  "Heisterbachstr.",
  "Helenenstr.",
  "Helmestr.",
  "Hemmelrather Weg",
  "Henry-T.-v.-Böttinger-Str.",
  "Herderstr.",
  "Heribertstr.",
  "Hermann-Ehlers-Str.",
  "Hermann-Hesse-Str.",
  "Hermann-König-Str.",
  "Hermann-Löns-Str.",
  "Hermann-Milde-Str.",
  "Hermann-Nörrenberg-Str.",
  "Hermann-von-Helmholtz-Str.",
  "Hermann-Waibel-Str.",
  "Herzogstr.",
  "Heymannstr.",
  "Hindenburgstr.",
  "Hirzenberg",
  "Hitdorfer Kirchweg",
  "Hitdorfer Str.",
  "Höfer Mühle",
  "Höfer Weg",
  "Hohe Str.",
  "Höhenstr.",
  "Höltgestal",
  "Holunderweg",
  "Holzer Weg",
  "Holzer Wiesen",
  "Hornpottweg",
  "Hubertusweg",
  "Hufelandstr.",
  "Hufer Weg",
  "Humboldtstr.",
  "Hummelsheim",
  "Hummelweg",
  "Humperdinckstr.",
  "Hüscheider Gärten",
  "Hüscheider Str.",
  "Hütte",
  "Ilmstr.",
  "Im Bergischen Heim",
  "Im Bruch",
  "Im Buchenhain",
  "Im Bühl",
  "Im Burgfeld",
  "Im Dorf",
  "Im Eisholz",
  "Im Friedenstal",
  "Im Frohental",
  "Im Grunde",
  "Im Hederichsfeld",
  "Im Jücherfeld",
  "Im Kalkfeld",
  "Im Kirberg",
  "Im Kirchfeld",
  "Im Kreuzbruch",
  "Im Mühlenfeld",
  "Im Nesselrader Kamp",
  "Im Oberdorf",
  "Im Oberfeld",
  "Im Rosengarten",
  "Im Rottland",
  "Im Scheffengarten",
  "Im Staderfeld",
  "Im Steinfeld",
  "Im Weidenblech",
  "Im Winkel",
  "Im Ziegelfeld",
  "Imbach",
  "Imbacher Weg",
  "Immenweg",
  "In den Blechenhöfen",
  "In den Dehlen",
  "In der Birkenau",
  "In der Dasladen",
  "In der Felderhütten",
  "In der Hartmannswiese",
  "In der Höhle",
  "In der Schaafsdellen",
  "In der Wasserkuhl",
  "In der Wüste",
  "In Holzhausen",
  "Insterstr.",
  "Jacob-Fröhlen-Str.",
  "Jägerstr.",
  "Jahnstr.",
  "Jakob-Eulenberg-Weg",
  "Jakobistr.",
  "Jakob-Kaiser-Str.",
  "Jenaer Str.",
  "Johannes-Baptist-Str.",
  "Johannes-Dott-Str.",
  "Johannes-Popitz-Str.",
  "Johannes-Wislicenus-Str.",
  "Johannisburger Str.",
  "Johann-Janssen-Str.",
  "Johann-Wirtz-Weg",
  "Josefstr.",
  "Jüch",
  "Julius-Doms-Str.",
  "Julius-Leber-Str.",
  "Kaiserplatz",
  "Kaiserstr.",
  "Kaiser-Wilhelm-Allee",
  "Kalkstr.",
  "Kämpchenstr.",
  "Kämpenwiese",
  "Kämper Weg",
  "Kamptalweg",
  "Kanalstr.",
  "Kandinskystr.",
  "Kantstr.",
  "Kapellenstr.",
  "Karl-Arnold-Str.",
  "Karl-Bosch-Str.",
  "Karl-Bückart-Str.",
  "Karl-Carstens-Ring",
  "Karl-Friedrich-Goerdeler-Str.",
  "Karl-Jaspers-Str.",
  "Karl-König-Str.",
  "Karl-Krekeler-Str.",
  "Karl-Marx-Str.",
  "Karlstr.",
  "Karl-Ulitzka-Str.",
  "Karl-Wichmann-Str.",
  "Karl-Wingchen-Str.",
  "Käsenbrod",
  "Käthe-Kollwitz-Str.",
  "Katzbachstr.",
  "Kerschensteinerstr.",
  "Kiefernweg",
  "Kieler Str.",
  "Kieselstr.",
  "Kiesweg",
  "Kinderhausen",
  "Kleiberweg",
  "Kleine Kirchstr.",
  "Kleingansweg",
  "Kleinheider Weg",
  "Klief",
  "Kneippstr.",
  "Knochenbergsweg",
  "Kochergarten",
  "Kocherstr.",
  "Kockelsberg",
  "Kolberger Str.",
  "Kolmarer Str.",
  "Kölner Gasse",
  "Kölner Str.",
  "Kolpingstr.",
  "Königsberger Platz",
  "Konrad-Adenauer-Platz",
  "Köpenicker Str.",
  "Kopernikusstr.",
  "Körnerstr.",
  "Köschenberg",
  "Köttershof",
  "Kreuzbroicher Str.",
  "Kreuzkamp",
  "Krummer Weg",
  "Kruppstr.",
  "Kuhlmannweg",
  "Kump",
  "Kumper Weg",
  "Kunstfeldstr.",
  "Küppersteger Str.",
  "Kursiefen",
  "Kursiefer Weg",
  "Kurtekottenweg",
  "Kurt-Schumacher-Ring",
  "Kyllstr.",
  "Langenfelder Str.",
  "Längsleimbach",
  "Lärchenweg",
  "Legienstr.",
  "Lehner Mühle",
  "Leichlinger Str.",
  "Leimbacher Hof",
  "Leinestr.",
  "Leineweberstr.",
  "Leipziger Str.",
  "Lerchengasse",
  "Lessingstr.",
  "Libellenweg",
  "Lichstr.",
  "Liebigstr.",
  "Lindenstr.",
  "Lingenfeld",
  "Linienstr.",
  "Lippe",
  "Löchergraben",
  "Löfflerstr.",
  "Loheweg",
  "Lohrbergstr.",
  "Lohrstr.",
  "Löhstr.",
  "Lortzingstr.",
  "Lötzener Str.",
  "Löwenburgstr.",
  "Lucasstr.",
  "Ludwig-Erhard-Platz",
  "Ludwig-Girtler-Str.",
  "Ludwig-Knorr-Str.",
  "Luisenstr.",
  "Lupinenweg",
  "Lurchenweg",
  "Lützenkirchener Str.",
  "Lycker Str.",
  "Maashofstr.",
  "Manforter Str.",
  "Marc-Chagall-Str.",
  "Maria-Dresen-Str.",
  "Maria-Terwiel-Str.",
  "Marie-Curie-Str.",
  "Marienburger Str.",
  "Mariendorfer Str.",
  "Marienwerderstr.",
  "Marie-Schlei-Str.",
  "Marktplatz",
  "Markusweg",
  "Martin-Buber-Str.",
  "Martin-Heidegger-Str.",
  "Martin-Luther-Str.",
  "Masurenstr.",
  "Mathildenweg",
  "Maurinusstr.",
  "Mauspfad",
  "Max-Beckmann-Str.",
  "Max-Delbrück-Str.",
  "Max-Ernst-Str.",
  "Max-Holthausen-Platz",
  "Max-Horkheimer-Str.",
  "Max-Liebermann-Str.",
  "Max-Pechstein-Str.",
  "Max-Planck-Str.",
  "Max-Scheler-Str.",
  "Max-Schönenberg-Str.",
  "Maybachstr.",
  "Meckhofer Feld",
  "Meisenweg",
  "Memelstr.",
  "Menchendahler Str.",
  "Mendelssohnstr.",
  "Merziger Str.",
  "Mettlacher Str.",
  "Metzer Str.",
  "Michaelsweg",
  "Miselohestr.",
  "Mittelstr.",
  "Mohlenstr.",
  "Moltkestr.",
  "Monheimer Str.",
  "Montanusstr.",
  "Montessoriweg",
  "Moosweg",
  "Morsbroicher Str.",
  "Moselstr.",
  "Moskauer Str.",
  "Mozartstr.",
  "Mühlenweg",
  "Muhrgasse",
  "Muldestr.",
  "Mülhausener Str.",
  "Mülheimer Str.",
  "Münsters Gäßchen",
  "Münzstr.",
  "Müritzstr.",
  "Myliusstr.",
  "Nachtigallenweg",
  "Nauener Str.",
  "Neißestr.",
  "Nelly-Sachs-Str.",
  "Netzestr.",
  "Neuendriesch",
  "Neuenhausgasse",
  "Neuenkamp",
  "Neujudenhof",
  "Neukronenberger Str.",
  "Neustadtstr.",
  "Nicolai-Hartmann-Str.",
  "Niederblecher",
  "Niederfeldstr.",
  "Nietzschestr.",
  "Nikolaus-Groß-Str.",
  "Nobelstr.",
  "Norderneystr.",
  "Nordstr.",
  "Ober dem Hof",
  "Obere Lindenstr.",
  "Obere Str.",
  "Oberölbach",
  "Odenthaler Str.",
  "Oderstr.",
  "Okerstr.",
  "Olof-Palme-Str.",
  "Ophovener Str.",
  "Opladener Platz",
  "Opladener Str.",
  "Ortelsburger Str.",
  "Oskar-Moll-Str.",
  "Oskar-Schlemmer-Str.",
  "Oststr.",
  "Oswald-Spengler-Str.",
  "Otto-Dix-Str.",
  "Otto-Grimm-Str.",
  "Otto-Hahn-Str.",
  "Otto-Müller-Str.",
  "Otto-Stange-Str.",
  "Ottostr.",
  "Otto-Varnhagen-Str.",
  "Otto-Wels-Str.",
  "Ottweilerstr.",
  "Oulustr.",
  "Overfeldweg",
  "Pappelweg",
  "Paracelsusstr.",
  "Parkstr.",
  "Pastor-Louis-Str.",
  "Pastor-Scheibler-Str.",
  "Pastorskamp",
  "Paul-Klee-Str.",
  "Paul-Löbe-Str.",
  "Paulstr.",
  "Peenestr.",
  "Pescher Busch",
  "Peschstr.",
  "Pestalozzistr.",
  "Peter-Grieß-Str.",
  "Peter-Joseph-Lenné-Str.",
  "Peter-Neuenheuser-Str.",
  "Petersbergstr.",
  "Peterstr.",
  "Pfarrer-Jekel-Str.",
  "Pfarrer-Klein-Str.",
  "Pfarrer-Röhr-Str.",
  "Pfeilshofstr.",
  "Philipp-Ott-Str.",
  "Piet-Mondrian-Str.",
  "Platanenweg",
  "Pommernstr.",
  "Porschestr.",
  "Poststr.",
  "Potsdamer Str.",
  "Pregelstr.",
  "Prießnitzstr.",
  "Pützdelle",
  "Quarzstr.",
  "Quettinger Str.",
  "Rat-Deycks-Str.",
  "Rathenaustr.",
  "Ratherkämp",
  "Ratiborer Str.",
  "Raushofstr.",
  "Regensburger Str.",
  "Reinickendorfer Str.",
  "Renkgasse",
  "Rennbaumplatz",
  "Rennbaumstr.",
  "Reuschenberger Str.",
  "Reusrather Str.",
  "Reuterstr.",
  "Rheinallee",
  "Rheindorfer Str.",
  "Rheinstr.",
  "Rhein-Wupper-Platz",
  "Richard-Wagner-Str.",
  "Rilkestr.",
  "Ringstr.",
  "Robert-Blum-Str.",
  "Robert-Koch-Str.",
  "Robert-Medenwald-Str.",
  "Rolandstr.",
  "Romberg",
  "Röntgenstr.",
  "Roonstr.",
  "Ropenstall",
  "Ropenstaller Weg",
  "Rosenthal",
  "Rostocker Str.",
  "Rotdornweg",
  "Röttgerweg",
  "Rückertstr.",
  "Rudolf-Breitscheid-Str.",
  "Rudolf-Mann-Platz",
  "Rudolf-Stracke-Str.",
  "Ruhlachplatz",
  "Ruhlachstr.",
  "Rüttersweg",
  "Saalestr.",
  "Saarbrücker Str.",
  "Saarlauterner Str.",
  "Saarstr.",
  "Salamanderweg",
  "Samlandstr.",
  "Sanddornstr.",
  "Sandstr.",
  "Sauerbruchstr.",
  "Schäfershütte",
  "Scharnhorststr.",
  "Scheffershof",
  "Scheidemannstr.",
  "Schellingstr.",
  "Schenkendorfstr.",
  "Schießbergstr.",
  "Schillerstr.",
  "Schlangenhecke",
  "Schlebuscher Heide",
  "Schlebuscher Str.",
  "Schlebuschrath",
  "Schlehdornstr.",
  "Schleiermacherstr.",
  "Schloßstr.",
  "Schmalenbruch",
  "Schnepfenflucht",
  "Schöffenweg",
  "Schöllerstr.",
  "Schöne Aussicht",
  "Schöneberger Str.",
  "Schopenhauerstr.",
  "Schubertplatz",
  "Schubertstr.",
  "Schulberg",
  "Schulstr.",
  "Schumannstr.",
  "Schwalbenweg",
  "Schwarzastr.",
  "Sebastianusweg",
  "Semmelweisstr.",
  "Siebelplatz",
  "Siemensstr.",
  "Solinger Str.",
  "Sonderburger Str.",
  "Spandauer Str.",
  "Speestr.",
  "Sperberweg",
  "Sperlingsweg",
  "Spitzwegstr.",
  "Sporrenberger Mühle",
  "Spreestr.",
  "St. Ingberter Str.",
  "Starenweg",
  "Stauffenbergstr.",
  "Stefan-Zweig-Str.",
  "Stegerwaldstr.",
  "Steglitzer Str.",
  "Steinbücheler Feld",
  "Steinbücheler Str.",
  "Steinstr.",
  "Steinweg",
  "Stephan-Lochner-Str.",
  "Stephanusstr.",
  "Stettiner Str.",
  "Stixchesstr.",
  "Stöckenstr.",
  "Stralsunder Str.",
  "Straßburger Str.",
  "Stresemannplatz",
  "Strombergstr.",
  "Stromstr.",
  "Stüttekofener Str.",
  "Sudestr.",
  "Sürderstr.",
  "Syltstr.",
  "Talstr.",
  "Tannenbergstr.",
  "Tannenweg",
  "Taubenweg",
  "Teitscheider Weg",
  "Telegrafenstr.",
  "Teltower Str.",
  "Tempelhofer Str.",
  "Theodor-Adorno-Str.",
  "Theodor-Fliedner-Str.",
  "Theodor-Gierath-Str.",
  "Theodor-Haubach-Str.",
  "Theodor-Heuss-Ring",
  "Theodor-Storm-Str.",
  "Theodorstr.",
  "Thomas-Dehler-Str.",
  "Thomas-Morus-Str.",
  "Thomas-von-Aquin-Str.",
  "Tönges Feld",
  "Torstr.",
  "Treptower Str.",
  "Treuburger Str.",
  "Uhlandstr.",
  "Ulmenweg",
  "Ulmer Str.",
  "Ulrichstr.",
  "Ulrich-von-Hassell-Str.",
  "Umlag",
  "Unstrutstr.",
  "Unter dem Schildchen",
  "Unterölbach",
  "Unterstr.",
  "Uppersberg",
  "Van\\'t-Hoff-Str.",
  "Veit-Stoß-Str.",
  "Vereinsstr.",
  "Viktor-Meyer-Str.",
  "Vincent-van-Gogh-Str.",
  "Virchowstr.",
  "Voigtslach",
  "Volhardstr.",
  "Völklinger Str.",
  "Von-Brentano-Str.",
  "Von-Diergardt-Str.",
  "Von-Eichendorff-Str.",
  "Von-Ketteler-Str.",
  "Von-Knoeringen-Str.",
  "Von-Pettenkofer-Str.",
  "Von-Siebold-Str.",
  "Wacholderweg",
  "Waldstr.",
  "Walter-Flex-Str.",
  "Walter-Hempel-Str.",
  "Walter-Hochapfel-Str.",
  "Walter-Nernst-Str.",
  "Wannseestr.",
  "Warnowstr.",
  "Warthestr.",
  "Weddigenstr.",
  "Weichselstr.",
  "Weidenstr.",
  "Weidfeldstr.",
  "Weiherfeld",
  "Weiherstr.",
  "Weinhäuser Str.",
  "Weißdornweg",
  "Weißenseestr.",
  "Weizkamp",
  "Werftstr.",
  "Werkstättenstr.",
  "Werner-Heisenberg-Str.",
  "Werrastr.",
  "Weyerweg",
  "Widdauener Str.",
  "Wiebertshof",
  "Wiehbachtal",
  "Wiembachallee",
  "Wiesdorfer Platz",
  "Wiesenstr.",
  "Wilhelm-Busch-Str.",
  "Wilhelm-Hastrich-Str.",
  "Wilhelm-Leuschner-Str.",
  "Wilhelm-Liebknecht-Str.",
  "Wilhelmsgasse",
  "Wilhelmstr.",
  "Willi-Baumeister-Str.",
  "Willy-Brandt-Ring",
  "Winand-Rossi-Str.",
  "Windthorststr.",
  "Winkelweg",
  "Winterberg",
  "Wittenbergstr.",
  "Wolf-Vostell-Str.",
  "Wolkenburgstr.",
  "Wupperstr.",
  "Wuppertalstr.",
  "Wüstenhof",
  "Yitzhak-Rabin-Str.",
  "Zauberkuhle",
  "Zedernweg",
  "Zehlendorfer Str.",
  "Zehntenweg",
  "Zeisigweg",
  "Zeppelinstr.",
  "Zschopaustr.",
  "Zum Claashäuschen",
  "Zündhütchenweg",
  "Zur Alten Brauerei",
  "Zur alten Fabrik"
];

},{}],28:[function(require,module,exports){
module["exports"] = [
  "+49-1##-#######",
  "+49-1###-########"
];

},{}],29:[function(require,module,exports){
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":28}],30:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.legal_form = require("./legal_form");
company.name = require("./name");

},{"./legal_form":31,"./name":32,"./suffix":33}],31:[function(require,module,exports){
module["exports"] = [
  "GmbH",
  "AG",
  "Gruppe",
  "KG",
  "GmbH & Co. KG",
  "UG",
  "OHG"
];

},{}],32:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
];

},{}],33:[function(require,module,exports){
module.exports=require(31)
},{"/Users/a/dev/faker.js/lib/locales/de/company/legal_form.js":31}],34:[function(require,module,exports){
var de = {};
module['exports'] = de;
de.title = "German";
de.address = require("./address");
de.company = require("./company");
de.internet = require("./internet");
de.lorem = require("./lorem");
de.name = require("./name");
de.phone_number = require("./phone_number");
de.cell_phone = require("./cell_phone");
},{"./address":20,"./cell_phone":29,"./company":30,"./internet":37,"./lorem":38,"./name":41,"./phone_number":47}],35:[function(require,module,exports){
module["exports"] = [
  "com",
  "info",
  "name",
  "net",
  "org",
  "de",
  "ch"
];

},{}],36:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],37:[function(require,module,exports){
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":35,"./free_email":36}],38:[function(require,module,exports){
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");

},{"./words":39}],39:[function(require,module,exports){
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],40:[function(require,module,exports){
module["exports"] = [
  "Aaron",
  "Abdul",
  "Abdullah",
  "Adam",
  "Adrian",
  "Adriano",
  "Ahmad",
  "Ahmed",
  "Ahmet",
  "Alan",
  "Albert",
  "Alessandro",
  "Alessio",
  "Alex",
  "Alexander",
  "Alfred",
  "Ali",
  "Amar",
  "Amir",
  "Amon",
  "Andre",
  "Andreas",
  "Andrew",
  "Angelo",
  "Ansgar",
  "Anthony",
  "Anton",
  "Antonio",
  "Arda",
  "Arian",
  "Armin",
  "Arne",
  "Arno",
  "Arthur",
  "Artur",
  "Arved",
  "Arvid",
  "Ayman",
  "Baran",
  "Baris",
  "Bastian",
  "Batuhan",
  "Bela",
  "Ben",
  "Benedikt",
  "Benjamin",
  "Bennet",
  "Bennett",
  "Benno",
  "Bent",
  "Berat",
  "Berkay",
  "Bernd",
  "Bilal",
  "Bjarne",
  "Björn",
  "Bo",
  "Boris",
  "Brandon",
  "Brian",
  "Bruno",
  "Bryan",
  "Burak",
  "Calvin",
  "Can",
  "Carl",
  "Carlo",
  "Carlos",
  "Caspar",
  "Cedric",
  "Cedrik",
  "Cem",
  "Charlie",
  "Chris",
  "Christian",
  "Christiano",
  "Christoph",
  "Christopher",
  "Claas",
  "Clemens",
  "Colin",
  "Collin",
  "Conner",
  "Connor",
  "Constantin",
  "Corvin",
  "Curt",
  "Damian",
  "Damien",
  "Daniel",
  "Danilo",
  "Danny",
  "Darian",
  "Dario",
  "Darius",
  "Darren",
  "David",
  "Davide",
  "Davin",
  "Dean",
  "Deniz",
  "Dennis",
  "Denny",
  "Devin",
  "Diego",
  "Dion",
  "Domenic",
  "Domenik",
  "Dominic",
  "Dominik",
  "Dorian",
  "Dustin",
  "Dylan",
  "Ecrin",
  "Eddi",
  "Eddy",
  "Edgar",
  "Edwin",
  "Efe",
  "Ege",
  "Elia",
  "Eliah",
  "Elias",
  "Elijah",
  "Emanuel",
  "Emil",
  "Emilian",
  "Emilio",
  "Emir",
  "Emirhan",
  "Emre",
  "Enes",
  "Enno",
  "Enrico",
  "Eren",
  "Eric",
  "Erik",
  "Etienne",
  "Fabian",
  "Fabien",
  "Fabio",
  "Fabrice",
  "Falk",
  "Felix",
  "Ferdinand",
  "Fiete",
  "Filip",
  "Finlay",
  "Finley",
  "Finn",
  "Finnley",
  "Florian",
  "Francesco",
  "Franz",
  "Frederic",
  "Frederick",
  "Frederik",
  "Friedrich",
  "Fritz",
  "Furkan",
  "Fynn",
  "Gabriel",
  "Georg",
  "Gerrit",
  "Gian",
  "Gianluca",
  "Gino",
  "Giuliano",
  "Giuseppe",
  "Gregor",
  "Gustav",
  "Hagen",
  "Hamza",
  "Hannes",
  "Hanno",
  "Hans",
  "Hasan",
  "Hassan",
  "Hauke",
  "Hendrik",
  "Hennes",
  "Henning",
  "Henri",
  "Henrick",
  "Henrik",
  "Henry",
  "Hugo",
  "Hussein",
  "Ian",
  "Ibrahim",
  "Ilias",
  "Ilja",
  "Ilyas",
  "Immanuel",
  "Ismael",
  "Ismail",
  "Ivan",
  "Iven",
  "Jack",
  "Jacob",
  "Jaden",
  "Jakob",
  "Jamal",
  "James",
  "Jamie",
  "Jan",
  "Janek",
  "Janis",
  "Janne",
  "Jannek",
  "Jannes",
  "Jannik",
  "Jannis",
  "Jano",
  "Janosch",
  "Jared",
  "Jari",
  "Jarne",
  "Jarno",
  "Jaron",
  "Jason",
  "Jasper",
  "Jay",
  "Jayden",
  "Jayson",
  "Jean",
  "Jens",
  "Jeremias",
  "Jeremie",
  "Jeremy",
  "Jermaine",
  "Jerome",
  "Jesper",
  "Jesse",
  "Jim",
  "Jimmy",
  "Joe",
  "Joel",
  "Joey",
  "Johann",
  "Johannes",
  "John",
  "Johnny",
  "Jon",
  "Jona",
  "Jonah",
  "Jonas",
  "Jonathan",
  "Jonte",
  "Joost",
  "Jordan",
  "Joris",
  "Joscha",
  "Joschua",
  "Josef",
  "Joseph",
  "Josh",
  "Joshua",
  "Josua",
  "Juan",
  "Julian",
  "Julien",
  "Julius",
  "Juri",
  "Justin",
  "Justus",
  "Kaan",
  "Kai",
  "Kalle",
  "Karim",
  "Karl",
  "Karlo",
  "Kay",
  "Keanu",
  "Kenan",
  "Kenny",
  "Keno",
  "Kerem",
  "Kerim",
  "Kevin",
  "Kian",
  "Kilian",
  "Kim",
  "Kimi",
  "Kjell",
  "Klaas",
  "Klemens",
  "Konrad",
  "Konstantin",
  "Koray",
  "Korbinian",
  "Kurt",
  "Lars",
  "Lasse",
  "Laurence",
  "Laurens",
  "Laurenz",
  "Laurin",
  "Lean",
  "Leander",
  "Leandro",
  "Leif",
  "Len",
  "Lenn",
  "Lennard",
  "Lennart",
  "Lennert",
  "Lennie",
  "Lennox",
  "Lenny",
  "Leo",
  "Leon",
  "Leonard",
  "Leonardo",
  "Leonhard",
  "Leonidas",
  "Leopold",
  "Leroy",
  "Levent",
  "Levi",
  "Levin",
  "Lewin",
  "Lewis",
  "Liam",
  "Lian",
  "Lias",
  "Lino",
  "Linus",
  "Lio",
  "Lion",
  "Lionel",
  "Logan",
  "Lorenz",
  "Lorenzo",
  "Loris",
  "Louis",
  "Luan",
  "Luc",
  "Luca",
  "Lucas",
  "Lucian",
  "Lucien",
  "Ludwig",
  "Luis",
  "Luiz",
  "Luk",
  "Luka",
  "Lukas",
  "Luke",
  "Lutz",
  "Maddox",
  "Mads",
  "Magnus",
  "Maik",
  "Maksim",
  "Malik",
  "Malte",
  "Manuel",
  "Marc",
  "Marcel",
  "Marco",
  "Marcus",
  "Marek",
  "Marian",
  "Mario",
  "Marius",
  "Mark",
  "Marko",
  "Markus",
  "Marlo",
  "Marlon",
  "Marten",
  "Martin",
  "Marvin",
  "Marwin",
  "Mateo",
  "Mathis",
  "Matis",
  "Mats",
  "Matteo",
  "Mattes",
  "Matthias",
  "Matthis",
  "Matti",
  "Mattis",
  "Maurice",
  "Max",
  "Maxim",
  "Maximilian",
  "Mehmet",
  "Meik",
  "Melvin",
  "Merlin",
  "Mert",
  "Michael",
  "Michel",
  "Mick",
  "Miguel",
  "Mika",
  "Mikail",
  "Mike",
  "Milan",
  "Milo",
  "Mio",
  "Mirac",
  "Mirco",
  "Mirko",
  "Mohamed",
  "Mohammad",
  "Mohammed",
  "Moritz",
  "Morten",
  "Muhammed",
  "Murat",
  "Mustafa",
  "Nathan",
  "Nathanael",
  "Nelson",
  "Neo",
  "Nevio",
  "Nick",
  "Niclas",
  "Nico",
  "Nicolai",
  "Nicolas",
  "Niels",
  "Nikita",
  "Niklas",
  "Niko",
  "Nikolai",
  "Nikolas",
  "Nils",
  "Nino",
  "Noah",
  "Noel",
  "Norman",
  "Odin",
  "Oke",
  "Ole",
  "Oliver",
  "Omar",
  "Onur",
  "Oscar",
  "Oskar",
  "Pascal",
  "Patrice",
  "Patrick",
  "Paul",
  "Peer",
  "Pepe",
  "Peter",
  "Phil",
  "Philip",
  "Philipp",
  "Pierre",
  "Piet",
  "Pit",
  "Pius",
  "Quentin",
  "Quirin",
  "Rafael",
  "Raik",
  "Ramon",
  "Raphael",
  "Rasmus",
  "Raul",
  "Rayan",
  "René",
  "Ricardo",
  "Riccardo",
  "Richard",
  "Rick",
  "Rico",
  "Robert",
  "Robin",
  "Rocco",
  "Roman",
  "Romeo",
  "Ron",
  "Ruben",
  "Ryan",
  "Said",
  "Salih",
  "Sam",
  "Sami",
  "Sammy",
  "Samuel",
  "Sandro",
  "Santino",
  "Sascha",
  "Sean",
  "Sebastian",
  "Selim",
  "Semih",
  "Shawn",
  "Silas",
  "Simeon",
  "Simon",
  "Sinan",
  "Sky",
  "Stefan",
  "Steffen",
  "Stephan",
  "Steve",
  "Steven",
  "Sven",
  "Sönke",
  "Sören",
  "Taha",
  "Tamino",
  "Tammo",
  "Tarik",
  "Tayler",
  "Taylor",
  "Teo",
  "Theo",
  "Theodor",
  "Thies",
  "Thilo",
  "Thomas",
  "Thorben",
  "Thore",
  "Thorge",
  "Tiago",
  "Til",
  "Till",
  "Tillmann",
  "Tim",
  "Timm",
  "Timo",
  "Timon",
  "Timothy",
  "Tino",
  "Titus",
  "Tizian",
  "Tjark",
  "Tobias",
  "Tom",
  "Tommy",
  "Toni",
  "Tony",
  "Torben",
  "Tore",
  "Tristan",
  "Tyler",
  "Tyron",
  "Umut",
  "Valentin",
  "Valentino",
  "Veit",
  "Victor",
  "Viktor",
  "Vin",
  "Vincent",
  "Vito",
  "Vitus",
  "Wilhelm",
  "Willi",
  "William",
  "Willy",
  "Xaver",
  "Yannic",
  "Yannick",
  "Yannik",
  "Yannis",
  "Yasin",
  "Youssef",
  "Yunus",
  "Yusuf",
  "Yven",
  "Yves",
  "Ömer",
  "Aaliyah",
  "Abby",
  "Abigail",
  "Ada",
  "Adelina",
  "Adriana",
  "Aileen",
  "Aimee",
  "Alana",
  "Alea",
  "Alena",
  "Alessa",
  "Alessia",
  "Alexa",
  "Alexandra",
  "Alexia",
  "Alexis",
  "Aleyna",
  "Alia",
  "Alica",
  "Alice",
  "Alicia",
  "Alina",
  "Alisa",
  "Alisha",
  "Alissa",
  "Aliya",
  "Aliyah",
  "Allegra",
  "Alma",
  "Alyssa",
  "Amalia",
  "Amanda",
  "Amelia",
  "Amelie",
  "Amina",
  "Amira",
  "Amy",
  "Ana",
  "Anabel",
  "Anastasia",
  "Andrea",
  "Angela",
  "Angelina",
  "Angelique",
  "Anja",
  "Ann",
  "Anna",
  "Annabel",
  "Annabell",
  "Annabelle",
  "Annalena",
  "Anne",
  "Anneke",
  "Annelie",
  "Annemarie",
  "Anni",
  "Annie",
  "Annika",
  "Anny",
  "Anouk",
  "Antonia",
  "Arda",
  "Ariana",
  "Ariane",
  "Arwen",
  "Ashley",
  "Asya",
  "Aurelia",
  "Aurora",
  "Ava",
  "Ayleen",
  "Aylin",
  "Ayse",
  "Azra",
  "Betty",
  "Bianca",
  "Bianka",
  "Caitlin",
  "Cara",
  "Carina",
  "Carla",
  "Carlotta",
  "Carmen",
  "Carolin",
  "Carolina",
  "Caroline",
  "Cassandra",
  "Catharina",
  "Catrin",
  "Cecile",
  "Cecilia",
  "Celia",
  "Celina",
  "Celine",
  "Ceyda",
  "Ceylin",
  "Chantal",
  "Charleen",
  "Charlotta",
  "Charlotte",
  "Chayenne",
  "Cheyenne",
  "Chiara",
  "Christin",
  "Christina",
  "Cindy",
  "Claire",
  "Clara",
  "Clarissa",
  "Colleen",
  "Collien",
  "Cora",
  "Corinna",
  "Cosima",
  "Dana",
  "Daniela",
  "Daria",
  "Darleen",
  "Defne",
  "Delia",
  "Denise",
  "Diana",
  "Dilara",
  "Dina",
  "Dorothea",
  "Ecrin",
  "Eda",
  "Eileen",
  "Ela",
  "Elaine",
  "Elanur",
  "Elea",
  "Elena",
  "Eleni",
  "Eleonora",
  "Eliana",
  "Elif",
  "Elina",
  "Elisa",
  "Elisabeth",
  "Ella",
  "Ellen",
  "Elli",
  "Elly",
  "Elsa",
  "Emelie",
  "Emely",
  "Emilia",
  "Emilie",
  "Emily",
  "Emma",
  "Emmely",
  "Emmi",
  "Emmy",
  "Enie",
  "Enna",
  "Enya",
  "Esma",
  "Estelle",
  "Esther",
  "Eva",
  "Evelin",
  "Evelina",
  "Eveline",
  "Evelyn",
  "Fabienne",
  "Fatima",
  "Fatma",
  "Felicia",
  "Felicitas",
  "Felina",
  "Femke",
  "Fenja",
  "Fine",
  "Finia",
  "Finja",
  "Finnja",
  "Fiona",
  "Flora",
  "Florentine",
  "Francesca",
  "Franka",
  "Franziska",
  "Frederike",
  "Freya",
  "Frida",
  "Frieda",
  "Friederike",
  "Giada",
  "Gina",
  "Giulia",
  "Giuliana",
  "Greta",
  "Hailey",
  "Hana",
  "Hanna",
  "Hannah",
  "Heidi",
  "Helen",
  "Helena",
  "Helene",
  "Helin",
  "Henriette",
  "Henrike",
  "Hermine",
  "Ida",
  "Ilayda",
  "Imke",
  "Ina",
  "Ines",
  "Inga",
  "Inka",
  "Irem",
  "Isa",
  "Isabel",
  "Isabell",
  "Isabella",
  "Isabelle",
  "Ivonne",
  "Jacqueline",
  "Jamie",
  "Jamila",
  "Jana",
  "Jane",
  "Janin",
  "Janina",
  "Janine",
  "Janna",
  "Janne",
  "Jara",
  "Jasmin",
  "Jasmina",
  "Jasmine",
  "Jella",
  "Jenna",
  "Jennifer",
  "Jenny",
  "Jessica",
  "Jessy",
  "Jette",
  "Jil",
  "Jill",
  "Joana",
  "Joanna",
  "Joelina",
  "Joeline",
  "Joelle",
  "Johanna",
  "Joleen",
  "Jolie",
  "Jolien",
  "Jolin",
  "Jolina",
  "Joline",
  "Jona",
  "Jonah",
  "Jonna",
  "Josefin",
  "Josefine",
  "Josephin",
  "Josephine",
  "Josie",
  "Josy",
  "Joy",
  "Joyce",
  "Judith",
  "Judy",
  "Jule",
  "Julia",
  "Juliana",
  "Juliane",
  "Julie",
  "Julienne",
  "Julika",
  "Julina",
  "Juna",
  "Justine",
  "Kaja",
  "Karina",
  "Karla",
  "Karlotta",
  "Karolina",
  "Karoline",
  "Kassandra",
  "Katarina",
  "Katharina",
  "Kathrin",
  "Katja",
  "Katrin",
  "Kaya",
  "Kayra",
  "Kiana",
  "Kiara",
  "Kim",
  "Kimberley",
  "Kimberly",
  "Kira",
  "Klara",
  "Korinna",
  "Kristin",
  "Kyra",
  "Laila",
  "Lana",
  "Lara",
  "Larissa",
  "Laura",
  "Laureen",
  "Lavinia",
  "Lea",
  "Leah",
  "Leana",
  "Leandra",
  "Leann",
  "Lee",
  "Leila",
  "Lena",
  "Lene",
  "Leni",
  "Lenia",
  "Lenja",
  "Lenya",
  "Leona",
  "Leoni",
  "Leonie",
  "Leonora",
  "Leticia",
  "Letizia",
  "Levke",
  "Leyla",
  "Lia",
  "Liah",
  "Liana",
  "Lili",
  "Lilia",
  "Lilian",
  "Liliana",
  "Lilith",
  "Lilli",
  "Lillian",
  "Lilly",
  "Lily",
  "Lina",
  "Linda",
  "Lindsay",
  "Line",
  "Linn",
  "Linnea",
  "Lisa",
  "Lisann",
  "Lisanne",
  "Liv",
  "Livia",
  "Liz",
  "Lola",
  "Loreen",
  "Lorena",
  "Lotta",
  "Lotte",
  "Louisa",
  "Louise",
  "Luana",
  "Luca",
  "Lucia",
  "Lucie",
  "Lucienne",
  "Lucy",
  "Luisa",
  "Luise",
  "Luka",
  "Luna",
  "Luzie",
  "Lya",
  "Lydia",
  "Lyn",
  "Lynn",
  "Madeleine",
  "Madita",
  "Madleen",
  "Madlen",
  "Magdalena",
  "Maike",
  "Mailin",
  "Maira",
  "Maja",
  "Malena",
  "Malia",
  "Malin",
  "Malina",
  "Mandy",
  "Mara",
  "Marah",
  "Mareike",
  "Maren",
  "Maria",
  "Mariam",
  "Marie",
  "Marieke",
  "Mariella",
  "Marika",
  "Marina",
  "Marisa",
  "Marissa",
  "Marit",
  "Marla",
  "Marleen",
  "Marlen",
  "Marlena",
  "Marlene",
  "Marta",
  "Martha",
  "Mary",
  "Maryam",
  "Mathilda",
  "Mathilde",
  "Matilda",
  "Maxi",
  "Maxima",
  "Maxine",
  "Maya",
  "Mayra",
  "Medina",
  "Medine",
  "Meike",
  "Melanie",
  "Melek",
  "Melike",
  "Melina",
  "Melinda",
  "Melis",
  "Melisa",
  "Melissa",
  "Merle",
  "Merve",
  "Meryem",
  "Mette",
  "Mia",
  "Michaela",
  "Michelle",
  "Mieke",
  "Mila",
  "Milana",
  "Milena",
  "Milla",
  "Mina",
  "Mira",
  "Miray",
  "Miriam",
  "Mirja",
  "Mona",
  "Monique",
  "Nadine",
  "Nadja",
  "Naemi",
  "Nancy",
  "Naomi",
  "Natalia",
  "Natalie",
  "Nathalie",
  "Neele",
  "Nela",
  "Nele",
  "Nelli",
  "Nelly",
  "Nia",
  "Nicole",
  "Nika",
  "Nike",
  "Nikita",
  "Nila",
  "Nina",
  "Nisa",
  "Noemi",
  "Nora",
  "Olivia",
  "Patricia",
  "Patrizia",
  "Paula",
  "Paulina",
  "Pauline",
  "Penelope",
  "Philine",
  "Phoebe",
  "Pia",
  "Rahel",
  "Rania",
  "Rebecca",
  "Rebekka",
  "Riana",
  "Rieke",
  "Rike",
  "Romina",
  "Romy",
  "Ronja",
  "Rosa",
  "Rosalie",
  "Ruby",
  "Sabrina",
  "Sahra",
  "Sally",
  "Salome",
  "Samantha",
  "Samia",
  "Samira",
  "Sandra",
  "Sandy",
  "Sanja",
  "Saphira",
  "Sara",
  "Sarah",
  "Saskia",
  "Selin",
  "Selina",
  "Selma",
  "Sena",
  "Sidney",
  "Sienna",
  "Silja",
  "Sina",
  "Sinja",
  "Smilla",
  "Sofia",
  "Sofie",
  "Sonja",
  "Sophia",
  "Sophie",
  "Soraya",
  "Stefanie",
  "Stella",
  "Stephanie",
  "Stina",
  "Sude",
  "Summer",
  "Susanne",
  "Svea",
  "Svenja",
  "Sydney",
  "Tabea",
  "Talea",
  "Talia",
  "Tamara",
  "Tamia",
  "Tamina",
  "Tanja",
  "Tara",
  "Tarja",
  "Teresa",
  "Tessa",
  "Thalea",
  "Thalia",
  "Thea",
  "Theresa",
  "Tia",
  "Tina",
  "Tomke",
  "Tuana",
  "Valentina",
  "Valeria",
  "Valerie",
  "Vanessa",
  "Vera",
  "Veronika",
  "Victoria",
  "Viktoria",
  "Viola",
  "Vivian",
  "Vivien",
  "Vivienne",
  "Wibke",
  "Wiebke",
  "Xenia",
  "Yara",
  "Yaren",
  "Yasmin",
  "Ylvi",
  "Ylvie",
  "Yvonne",
  "Zara",
  "Zehra",
  "Zeynep",
  "Zoe",
  "Zoey",
  "Zoé"
];

},{}],41:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.nobility_title_prefix = require("./nobility_title_prefix");
name.name = require("./name");

},{"./first_name":40,"./last_name":42,"./name":43,"./nobility_title_prefix":44,"./prefix":45}],42:[function(require,module,exports){
module["exports"] = [
  "Abel",
  "Abicht",
  "Abraham",
  "Abramovic",
  "Abt",
  "Achilles",
  "Achkinadze",
  "Ackermann",
  "Adam",
  "Adams",
  "Ade",
  "Agostini",
  "Ahlke",
  "Ahrenberg",
  "Ahrens",
  "Aigner",
  "Albert",
  "Albrecht",
  "Alexa",
  "Alexander",
  "Alizadeh",
  "Allgeyer",
  "Amann",
  "Amberg",
  "Anding",
  "Anggreny",
  "Apitz",
  "Arendt",
  "Arens",
  "Arndt",
  "Aryee",
  "Aschenbroich",
  "Assmus",
  "Astafei",
  "Auer",
  "Axmann",
  "Baarck",
  "Bachmann",
  "Badane",
  "Bader",
  "Baganz",
  "Bahl",
  "Bak",
  "Balcer",
  "Balck",
  "Balkow",
  "Balnuweit",
  "Balzer",
  "Banse",
  "Barr",
  "Bartels",
  "Barth",
  "Barylla",
  "Baseda",
  "Battke",
  "Bauer",
  "Bauermeister",
  "Baumann",
  "Baumeister",
  "Bauschinger",
  "Bauschke",
  "Bayer",
  "Beavogui",
  "Beck",
  "Beckel",
  "Becker",
  "Beckmann",
  "Bedewitz",
  "Beele",
  "Beer",
  "Beggerow",
  "Beh",
  "Behr",
  "Behrenbruch",
  "Belz",
  "Bender",
  "Benecke",
  "Benner",
  "Benninger",
  "Benzing",
  "Berends",
  "Berger",
  "Berner",
  "Berning",
  "Bertenbreiter",
  "Best",
  "Bethke",
  "Betz",
  "Beushausen",
  "Beutelspacher",
  "Beyer",
  "Biba",
  "Bichler",
  "Bickel",
  "Biedermann",
  "Bieler",
  "Bielert",
  "Bienasch",
  "Bienias",
  "Biesenbach",
  "Bigdeli",
  "Birkemeyer",
  "Bittner",
  "Blank",
  "Blaschek",
  "Blassneck",
  "Bloch",
  "Blochwitz",
  "Blockhaus",
  "Blum",
  "Blume",
  "Bock",
  "Bode",
  "Bogdashin",
  "Bogenrieder",
  "Bohge",
  "Bolm",
  "Borgschulze",
  "Bork",
  "Bormann",
  "Bornscheuer",
  "Borrmann",
  "Borsch",
  "Boruschewski",
  "Bos",
  "Bosler",
  "Bourrouag",
  "Bouschen",
  "Boxhammer",
  "Boyde",
  "Bozsik",
  "Brand",
  "Brandenburg",
  "Brandis",
  "Brandt",
  "Brauer",
  "Braun",
  "Brehmer",
  "Breitenstein",
  "Bremer",
  "Bremser",
  "Brenner",
  "Brettschneider",
  "Breu",
  "Breuer",
  "Briesenick",
  "Bringmann",
  "Brinkmann",
  "Brix",
  "Broening",
  "Brosch",
  "Bruckmann",
  "Bruder",
  "Bruhns",
  "Brunner",
  "Bruns",
  "Bräutigam",
  "Brömme",
  "Brüggmann",
  "Buchholz",
  "Buchrucker",
  "Buder",
  "Bultmann",
  "Bunjes",
  "Burger",
  "Burghagen",
  "Burkhard",
  "Burkhardt",
  "Burmeister",
  "Busch",
  "Buschbaum",
  "Busemann",
  "Buss",
  "Busse",
  "Bussmann",
  "Byrd",
  "Bäcker",
  "Böhm",
  "Bönisch",
  "Börgeling",
  "Börner",
  "Böttner",
  "Büchele",
  "Bühler",
  "Büker",
  "Büngener",
  "Bürger",
  "Bürklein",
  "Büscher",
  "Büttner",
  "Camara",
  "Carlowitz",
  "Carlsohn",
  "Caspari",
  "Caspers",
  "Chapron",
  "Christ",
  "Cierpinski",
  "Clarius",
  "Cleem",
  "Cleve",
  "Co",
  "Conrad",
  "Cordes",
  "Cornelsen",
  "Cors",
  "Cotthardt",
  "Crews",
  "Cronjäger",
  "Crosskofp",
  "Da",
  "Dahm",
  "Dahmen",
  "Daimer",
  "Damaske",
  "Danneberg",
  "Danner",
  "Daub",
  "Daubner",
  "Daudrich",
  "Dauer",
  "Daum",
  "Dauth",
  "Dautzenberg",
  "De",
  "Decker",
  "Deckert",
  "Deerberg",
  "Dehmel",
  "Deja",
  "Delonge",
  "Demut",
  "Dengler",
  "Denner",
  "Denzinger",
  "Derr",
  "Dertmann",
  "Dethloff",
  "Deuschle",
  "Dieckmann",
  "Diedrich",
  "Diekmann",
  "Dienel",
  "Dies",
  "Dietrich",
  "Dietz",
  "Dietzsch",
  "Diezel",
  "Dilla",
  "Dingelstedt",
  "Dippl",
  "Dittmann",
  "Dittmar",
  "Dittmer",
  "Dix",
  "Dobbrunz",
  "Dobler",
  "Dohring",
  "Dolch",
  "Dold",
  "Dombrowski",
  "Donie",
  "Doskoczynski",
  "Dragu",
  "Drechsler",
  "Drees",
  "Dreher",
  "Dreier",
  "Dreissigacker",
  "Dressler",
  "Drews",
  "Duma",
  "Dutkiewicz",
  "Dyett",
  "Dylus",
  "Dächert",
  "Döbel",
  "Döring",
  "Dörner",
  "Dörre",
  "Dück",
  "Eberhard",
  "Eberhardt",
  "Ecker",
  "Eckhardt",
  "Edorh",
  "Effler",
  "Eggenmueller",
  "Ehm",
  "Ehmann",
  "Ehrig",
  "Eich",
  "Eichmann",
  "Eifert",
  "Einert",
  "Eisenlauer",
  "Ekpo",
  "Elbe",
  "Eleyth",
  "Elss",
  "Emert",
  "Emmelmann",
  "Ender",
  "Engel",
  "Engelen",
  "Engelmann",
  "Eplinius",
  "Erdmann",
  "Erhardt",
  "Erlei",
  "Erm",
  "Ernst",
  "Ertl",
  "Erwes",
  "Esenwein",
  "Esser",
  "Evers",
  "Everts",
  "Ewald",
  "Fahner",
  "Faller",
  "Falter",
  "Farber",
  "Fassbender",
  "Faulhaber",
  "Fehrig",
  "Feld",
  "Felke",
  "Feller",
  "Fenner",
  "Fenske",
  "Feuerbach",
  "Fietz",
  "Figl",
  "Figura",
  "Filipowski",
  "Filsinger",
  "Fincke",
  "Fink",
  "Finke",
  "Fischer",
  "Fitschen",
  "Fleischer",
  "Fleischmann",
  "Floder",
  "Florczak",
  "Flore",
  "Flottmann",
  "Forkel",
  "Forst",
  "Frahmeke",
  "Frank",
  "Franke",
  "Franta",
  "Frantz",
  "Franz",
  "Franzis",
  "Franzmann",
  "Frauen",
  "Frauendorf",
  "Freigang",
  "Freimann",
  "Freimuth",
  "Freisen",
  "Frenzel",
  "Frey",
  "Fricke",
  "Fried",
  "Friedek",
  "Friedenberg",
  "Friedmann",
  "Friedrich",
  "Friess",
  "Frisch",
  "Frohn",
  "Frosch",
  "Fuchs",
  "Fuhlbrügge",
  "Fusenig",
  "Fust",
  "Förster",
  "Gaba",
  "Gabius",
  "Gabler",
  "Gadschiew",
  "Gakstädter",
  "Galander",
  "Gamlin",
  "Gamper",
  "Gangnus",
  "Ganzmann",
  "Garatva",
  "Gast",
  "Gastel",
  "Gatzka",
  "Gauder",
  "Gebhardt",
  "Geese",
  "Gehre",
  "Gehrig",
  "Gehring",
  "Gehrke",
  "Geiger",
  "Geisler",
  "Geissler",
  "Gelling",
  "Gens",
  "Gerbennow",
  "Gerdel",
  "Gerhardt",
  "Gerschler",
  "Gerson",
  "Gesell",
  "Geyer",
  "Ghirmai",
  "Ghosh",
  "Giehl",
  "Gierisch",
  "Giesa",
  "Giesche",
  "Gilde",
  "Glatting",
  "Goebel",
  "Goedicke",
  "Goldbeck",
  "Goldfuss",
  "Goldkamp",
  "Goldkühle",
  "Goller",
  "Golling",
  "Gollnow",
  "Golomski",
  "Gombert",
  "Gotthardt",
  "Gottschalk",
  "Gotz",
  "Goy",
  "Gradzki",
  "Graf",
  "Grams",
  "Grasse",
  "Gratzky",
  "Grau",
  "Greb",
  "Green",
  "Greger",
  "Greithanner",
  "Greschner",
  "Griem",
  "Griese",
  "Grimm",
  "Gromisch",
  "Gross",
  "Grosser",
  "Grossheim",
  "Grosskopf",
  "Grothaus",
  "Grothkopp",
  "Grotke",
  "Grube",
  "Gruber",
  "Grundmann",
  "Gruning",
  "Gruszecki",
  "Gröss",
  "Grötzinger",
  "Grün",
  "Grüner",
  "Gummelt",
  "Gunkel",
  "Gunther",
  "Gutjahr",
  "Gutowicz",
  "Gutschank",
  "Göbel",
  "Göckeritz",
  "Göhler",
  "Görlich",
  "Görmer",
  "Götz",
  "Götzelmann",
  "Güldemeister",
  "Günther",
  "Günz",
  "Gürbig",
  "Haack",
  "Haaf",
  "Habel",
  "Hache",
  "Hackbusch",
  "Hackelbusch",
  "Hadfield",
  "Hadwich",
  "Haferkamp",
  "Hahn",
  "Hajek",
  "Hallmann",
  "Hamann",
  "Hanenberger",
  "Hannecker",
  "Hanniske",
  "Hansen",
  "Hardy",
  "Hargasser",
  "Harms",
  "Harnapp",
  "Harter",
  "Harting",
  "Hartlieb",
  "Hartmann",
  "Hartwig",
  "Hartz",
  "Haschke",
  "Hasler",
  "Hasse",
  "Hassfeld",
  "Haug",
  "Hauke",
  "Haupt",
  "Haverney",
  "Heberstreit",
  "Hechler",
  "Hecht",
  "Heck",
  "Hedermann",
  "Hehl",
  "Heidelmann",
  "Heidler",
  "Heinemann",
  "Heinig",
  "Heinke",
  "Heinrich",
  "Heinze",
  "Heiser",
  "Heist",
  "Hellmann",
  "Helm",
  "Helmke",
  "Helpling",
  "Hengmith",
  "Henkel",
  "Hennes",
  "Henry",
  "Hense",
  "Hensel",
  "Hentel",
  "Hentschel",
  "Hentschke",
  "Hepperle",
  "Herberger",
  "Herbrand",
  "Hering",
  "Hermann",
  "Hermecke",
  "Herms",
  "Herold",
  "Herrmann",
  "Herschmann",
  "Hertel",
  "Herweg",
  "Herwig",
  "Herzenberg",
  "Hess",
  "Hesse",
  "Hessek",
  "Hessler",
  "Hetzler",
  "Heuck",
  "Heydemüller",
  "Hiebl",
  "Hildebrand",
  "Hildenbrand",
  "Hilgendorf",
  "Hillard",
  "Hiller",
  "Hingsen",
  "Hingst",
  "Hinrichs",
  "Hirsch",
  "Hirschberg",
  "Hirt",
  "Hodea",
  "Hoffman",
  "Hoffmann",
  "Hofmann",
  "Hohenberger",
  "Hohl",
  "Hohn",
  "Hohnheiser",
  "Hold",
  "Holdt",
  "Holinski",
  "Holl",
  "Holtfreter",
  "Holz",
  "Holzdeppe",
  "Holzner",
  "Hommel",
  "Honz",
  "Hooss",
  "Hoppe",
  "Horak",
  "Horn",
  "Horna",
  "Hornung",
  "Hort",
  "Howard",
  "Huber",
  "Huckestein",
  "Hudak",
  "Huebel",
  "Hugo",
  "Huhn",
  "Hujo",
  "Huke",
  "Huls",
  "Humbert",
  "Huneke",
  "Huth",
  "Häber",
  "Häfner",
  "Höcke",
  "Höft",
  "Höhne",
  "Hönig",
  "Hördt",
  "Hübenbecker",
  "Hübl",
  "Hübner",
  "Hügel",
  "Hüttcher",
  "Hütter",
  "Ibe",
  "Ihly",
  "Illing",
  "Isak",
  "Isekenmeier",
  "Itt",
  "Jacob",
  "Jacobs",
  "Jagusch",
  "Jahn",
  "Jahnke",
  "Jakobs",
  "Jakubczyk",
  "Jambor",
  "Jamrozy",
  "Jander",
  "Janich",
  "Janke",
  "Jansen",
  "Jarets",
  "Jaros",
  "Jasinski",
  "Jasper",
  "Jegorov",
  "Jellinghaus",
  "Jeorga",
  "Jerschabek",
  "Jess",
  "John",
  "Jonas",
  "Jossa",
  "Jucken",
  "Jung",
  "Jungbluth",
  "Jungton",
  "Just",
  "Jürgens",
  "Kaczmarek",
  "Kaesmacher",
  "Kahl",
  "Kahlert",
  "Kahles",
  "Kahlmeyer",
  "Kaiser",
  "Kalinowski",
  "Kallabis",
  "Kallensee",
  "Kampf",
  "Kampschulte",
  "Kappe",
  "Kappler",
  "Karhoff",
  "Karrass",
  "Karst",
  "Karsten",
  "Karus",
  "Kass",
  "Kasten",
  "Kastner",
  "Katzinski",
  "Kaufmann",
  "Kaul",
  "Kausemann",
  "Kawohl",
  "Kazmarek",
  "Kedzierski",
  "Keil",
  "Keiner",
  "Keller",
  "Kelm",
  "Kempe",
  "Kemper",
  "Kempter",
  "Kerl",
  "Kern",
  "Kesselring",
  "Kesselschläger",
  "Kette",
  "Kettenis",
  "Keutel",
  "Kick",
  "Kiessling",
  "Kinadeter",
  "Kinzel",
  "Kinzy",
  "Kirch",
  "Kirst",
  "Kisabaka",
  "Klaas",
  "Klabuhn",
  "Klapper",
  "Klauder",
  "Klaus",
  "Kleeberg",
  "Kleiber",
  "Klein",
  "Kleinert",
  "Kleininger",
  "Kleinmann",
  "Kleinsteuber",
  "Kleiss",
  "Klemme",
  "Klimczak",
  "Klinger",
  "Klink",
  "Klopsch",
  "Klose",
  "Kloss",
  "Kluge",
  "Kluwe",
  "Knabe",
  "Kneifel",
  "Knetsch",
  "Knies",
  "Knippel",
  "Knobel",
  "Knoblich",
  "Knoll",
  "Knorr",
  "Knorscheidt",
  "Knut",
  "Kobs",
  "Koch",
  "Kochan",
  "Kock",
  "Koczulla",
  "Koderisch",
  "Koehl",
  "Koehler",
  "Koenig",
  "Koester",
  "Kofferschlager",
  "Koha",
  "Kohle",
  "Kohlmann",
  "Kohnle",
  "Kohrt",
  "Koj",
  "Kolb",
  "Koleiski",
  "Kolokas",
  "Komoll",
  "Konieczny",
  "Konig",
  "Konow",
  "Konya",
  "Koob",
  "Kopf",
  "Kosenkow",
  "Koster",
  "Koszewski",
  "Koubaa",
  "Kovacs",
  "Kowalick",
  "Kowalinski",
  "Kozakiewicz",
  "Krabbe",
  "Kraft",
  "Kral",
  "Kramer",
  "Krauel",
  "Kraus",
  "Krause",
  "Krauspe",
  "Kreb",
  "Krebs",
  "Kreissig",
  "Kresse",
  "Kreutz",
  "Krieger",
  "Krippner",
  "Krodinger",
  "Krohn",
  "Krol",
  "Kron",
  "Krueger",
  "Krug",
  "Kruger",
  "Krull",
  "Kruschinski",
  "Krämer",
  "Kröckert",
  "Kröger",
  "Krüger",
  "Kubera",
  "Kufahl",
  "Kuhlee",
  "Kuhnen",
  "Kulimann",
  "Kulma",
  "Kumbernuss",
  "Kummle",
  "Kunz",
  "Kupfer",
  "Kupprion",
  "Kuprion",
  "Kurnicki",
  "Kurrat",
  "Kurschilgen",
  "Kuschewitz",
  "Kuschmann",
  "Kuske",
  "Kustermann",
  "Kutscherauer",
  "Kutzner",
  "Kwadwo",
  "Kähler",
  "Käther",
  "Köhler",
  "Köhrbrück",
  "Köhre",
  "Kölotzei",
  "König",
  "Köpernick",
  "Köseoglu",
  "Kúhn",
  "Kúhnert",
  "Kühn",
  "Kühnel",
  "Kühnemund",
  "Kühnert",
  "Kühnke",
  "Küsters",
  "Küter",
  "Laack",
  "Lack",
  "Ladewig",
  "Lakomy",
  "Lammert",
  "Lamos",
  "Landmann",
  "Lang",
  "Lange",
  "Langfeld",
  "Langhirt",
  "Lanig",
  "Lauckner",
  "Lauinger",
  "Laurén",
  "Lausecker",
  "Laux",
  "Laws",
  "Lax",
  "Leberer",
  "Lehmann",
  "Lehner",
  "Leibold",
  "Leide",
  "Leimbach",
  "Leipold",
  "Leist",
  "Leiter",
  "Leiteritz",
  "Leitheim",
  "Leiwesmeier",
  "Lenfers",
  "Lenk",
  "Lenz",
  "Lenzen",
  "Leo",
  "Lepthin",
  "Lesch",
  "Leschnik",
  "Letzelter",
  "Lewin",
  "Lewke",
  "Leyckes",
  "Lg",
  "Lichtenfeld",
  "Lichtenhagen",
  "Lichtl",
  "Liebach",
  "Liebe",
  "Liebich",
  "Liebold",
  "Lieder",
  "Lienshöft",
  "Linden",
  "Lindenberg",
  "Lindenmayer",
  "Lindner",
  "Linke",
  "Linnenbaum",
  "Lippe",
  "Lipske",
  "Lipus",
  "Lischka",
  "Lobinger",
  "Logsch",
  "Lohmann",
  "Lohre",
  "Lohse",
  "Lokar",
  "Loogen",
  "Lorenz",
  "Losch",
  "Loska",
  "Lott",
  "Loy",
  "Lubina",
  "Ludolf",
  "Lufft",
  "Lukoschek",
  "Lutje",
  "Lutz",
  "Löser",
  "Löwa",
  "Lübke",
  "Maak",
  "Maczey",
  "Madetzky",
  "Madubuko",
  "Mai",
  "Maier",
  "Maisch",
  "Malek",
  "Malkus",
  "Mallmann",
  "Malucha",
  "Manns",
  "Manz",
  "Marahrens",
  "Marchewski",
  "Margis",
  "Markowski",
  "Marl",
  "Marner",
  "Marquart",
  "Marschek",
  "Martel",
  "Marten",
  "Martin",
  "Marx",
  "Marxen",
  "Mathes",
  "Mathies",
  "Mathiszik",
  "Matschke",
  "Mattern",
  "Matthes",
  "Matula",
  "Mau",
  "Maurer",
  "Mauroff",
  "May",
  "Maybach",
  "Mayer",
  "Mebold",
  "Mehl",
  "Mehlhorn",
  "Mehlorn",
  "Meier",
  "Meisch",
  "Meissner",
  "Meloni",
  "Melzer",
  "Menga",
  "Menne",
  "Mensah",
  "Mensing",
  "Merkel",
  "Merseburg",
  "Mertens",
  "Mesloh",
  "Metzger",
  "Metzner",
  "Mewes",
  "Meyer",
  "Michallek",
  "Michel",
  "Mielke",
  "Mikitenko",
  "Milde",
  "Minah",
  "Mintzlaff",
  "Mockenhaupt",
  "Moede",
  "Moedl",
  "Moeller",
  "Moguenara",
  "Mohr",
  "Mohrhard",
  "Molitor",
  "Moll",
  "Moller",
  "Molzan",
  "Montag",
  "Moormann",
  "Mordhorst",
  "Morgenstern",
  "Morhelfer",
  "Moritz",
  "Moser",
  "Motchebon",
  "Motzenbbäcker",
  "Mrugalla",
  "Muckenthaler",
  "Mues",
  "Muller",
  "Mulrain",
  "Mächtig",
  "Mäder",
  "Möcks",
  "Mögenburg",
  "Möhsner",
  "Möldner",
  "Möllenbeck",
  "Möller",
  "Möllinger",
  "Mörsch",
  "Mühleis",
  "Müller",
  "Münch",
  "Nabein",
  "Nabow",
  "Nagel",
  "Nannen",
  "Nastvogel",
  "Nau",
  "Naubert",
  "Naumann",
  "Ne",
  "Neimke",
  "Nerius",
  "Neubauer",
  "Neubert",
  "Neuendorf",
  "Neumair",
  "Neumann",
  "Neupert",
  "Neurohr",
  "Neuschwander",
  "Newton",
  "Ney",
  "Nicolay",
  "Niedermeier",
  "Nieklauson",
  "Niklaus",
  "Nitzsche",
  "Noack",
  "Nodler",
  "Nolte",
  "Normann",
  "Norris",
  "Northoff",
  "Nowak",
  "Nussbeck",
  "Nwachukwu",
  "Nytra",
  "Nöh",
  "Oberem",
  "Obergföll",
  "Obermaier",
  "Ochs",
  "Oeser",
  "Olbrich",
  "Onnen",
  "Ophey",
  "Oppong",
  "Orth",
  "Orthmann",
  "Oschkenat",
  "Osei",
  "Osenberg",
  "Ostendarp",
  "Ostwald",
  "Otte",
  "Otto",
  "Paesler",
  "Pajonk",
  "Pallentin",
  "Panzig",
  "Paschke",
  "Patzwahl",
  "Paukner",
  "Peselman",
  "Peter",
  "Peters",
  "Petzold",
  "Pfeiffer",
  "Pfennig",
  "Pfersich",
  "Pfingsten",
  "Pflieger",
  "Pflügner",
  "Philipp",
  "Pichlmaier",
  "Piesker",
  "Pietsch",
  "Pingpank",
  "Pinnock",
  "Pippig",
  "Pitschugin",
  "Plank",
  "Plass",
  "Platzer",
  "Plauk",
  "Plautz",
  "Pletsch",
  "Plotzitzka",
  "Poehn",
  "Poeschl",
  "Pogorzelski",
  "Pohl",
  "Pohland",
  "Pohle",
  "Polifka",
  "Polizzi",
  "Pollmächer",
  "Pomp",
  "Ponitzsch",
  "Porsche",
  "Porth",
  "Poschmann",
  "Poser",
  "Pottel",
  "Prah",
  "Prange",
  "Prediger",
  "Pressler",
  "Preuk",
  "Preuss",
  "Prey",
  "Priemer",
  "Proske",
  "Pusch",
  "Pöche",
  "Pöge",
  "Raabe",
  "Rabenstein",
  "Rach",
  "Radtke",
  "Rahn",
  "Ranftl",
  "Rangen",
  "Ranz",
  "Rapp",
  "Rath",
  "Rau",
  "Raubuch",
  "Raukuc",
  "Rautenkranz",
  "Rehwagen",
  "Reiber",
  "Reichardt",
  "Reichel",
  "Reichling",
  "Reif",
  "Reifenrath",
  "Reimann",
  "Reinberg",
  "Reinelt",
  "Reinhardt",
  "Reinke",
  "Reitze",
  "Renk",
  "Rentz",
  "Renz",
  "Reppin",
  "Restle",
  "Restorff",
  "Retzke",
  "Reuber",
  "Reumann",
  "Reus",
  "Reuss",
  "Reusse",
  "Rheder",
  "Rhoden",
  "Richards",
  "Richter",
  "Riedel",
  "Riediger",
  "Rieger",
  "Riekmann",
  "Riepl",
  "Riermeier",
  "Riester",
  "Riethmüller",
  "Rietmüller",
  "Rietscher",
  "Ringel",
  "Ringer",
  "Rink",
  "Ripken",
  "Ritosek",
  "Ritschel",
  "Ritter",
  "Rittweg",
  "Ritz",
  "Roba",
  "Rockmeier",
  "Rodehau",
  "Rodowski",
  "Roecker",
  "Roggatz",
  "Rohländer",
  "Rohrer",
  "Rokossa",
  "Roleder",
  "Roloff",
  "Roos",
  "Rosbach",
  "Roschinsky",
  "Rose",
  "Rosenauer",
  "Rosenbauer",
  "Rosenthal",
  "Rosksch",
  "Rossberg",
  "Rossler",
  "Roth",
  "Rother",
  "Ruch",
  "Ruckdeschel",
  "Rumpf",
  "Rupprecht",
  "Ruth",
  "Ryjikh",
  "Ryzih",
  "Rädler",
  "Räntsch",
  "Rödiger",
  "Röse",
  "Röttger",
  "Rücker",
  "Rüdiger",
  "Rüter",
  "Sachse",
  "Sack",
  "Saflanis",
  "Sagafe",
  "Sagonas",
  "Sahner",
  "Saile",
  "Sailer",
  "Salow",
  "Salzer",
  "Salzmann",
  "Sammert",
  "Sander",
  "Sarvari",
  "Sattelmaier",
  "Sauer",
  "Sauerland",
  "Saumweber",
  "Savoia",
  "Scc",
  "Schacht",
  "Schaefer",
  "Schaffarzik",
  "Schahbasian",
  "Scharf",
  "Schedler",
  "Scheer",
  "Schelk",
  "Schellenbeck",
  "Schembera",
  "Schenk",
  "Scherbarth",
  "Scherer",
  "Schersing",
  "Scherz",
  "Scheurer",
  "Scheuring",
  "Scheytt",
  "Schielke",
  "Schieskow",
  "Schildhauer",
  "Schilling",
  "Schima",
  "Schimmer",
  "Schindzielorz",
  "Schirmer",
  "Schirrmeister",
  "Schlachter",
  "Schlangen",
  "Schlawitz",
  "Schlechtweg",
  "Schley",
  "Schlicht",
  "Schlitzer",
  "Schmalzle",
  "Schmid",
  "Schmidt",
  "Schmidtchen",
  "Schmitt",
  "Schmitz",
  "Schmuhl",
  "Schneider",
  "Schnelting",
  "Schnieder",
  "Schniedermeier",
  "Schnürer",
  "Schoberg",
  "Scholz",
  "Schonberg",
  "Schondelmaier",
  "Schorr",
  "Schott",
  "Schottmann",
  "Schouren",
  "Schrader",
  "Schramm",
  "Schreck",
  "Schreiber",
  "Schreiner",
  "Schreiter",
  "Schroder",
  "Schröder",
  "Schuermann",
  "Schuff",
  "Schuhaj",
  "Schuldt",
  "Schult",
  "Schulte",
  "Schultz",
  "Schultze",
  "Schulz",
  "Schulze",
  "Schumacher",
  "Schumann",
  "Schupp",
  "Schuri",
  "Schuster",
  "Schwab",
  "Schwalm",
  "Schwanbeck",
  "Schwandke",
  "Schwanitz",
  "Schwarthoff",
  "Schwartz",
  "Schwarz",
  "Schwarzer",
  "Schwarzkopf",
  "Schwarzmeier",
  "Schwatlo",
  "Schweisfurth",
  "Schwennen",
  "Schwerdtner",
  "Schwidde",
  "Schwirkschlies",
  "Schwuchow",
  "Schäfer",
  "Schäffel",
  "Schäffer",
  "Schäning",
  "Schöckel",
  "Schönball",
  "Schönbeck",
  "Schönberg",
  "Schönebeck",
  "Schönenberger",
  "Schönfeld",
  "Schönherr",
  "Schönlebe",
  "Schötz",
  "Schüler",
  "Schüppel",
  "Schütz",
  "Schütze",
  "Seeger",
  "Seelig",
  "Sehls",
  "Seibold",
  "Seidel",
  "Seiders",
  "Seigel",
  "Seiler",
  "Seitz",
  "Semisch",
  "Senkel",
  "Sewald",
  "Siebel",
  "Siebert",
  "Siegling",
  "Sielemann",
  "Siemon",
  "Siener",
  "Sievers",
  "Siewert",
  "Sihler",
  "Sillah",
  "Simon",
  "Sinnhuber",
  "Sischka",
  "Skibicki",
  "Sladek",
  "Slotta",
  "Smieja",
  "Soboll",
  "Sokolowski",
  "Soller",
  "Sollner",
  "Sommer",
  "Somssich",
  "Sonn",
  "Sonnabend",
  "Spahn",
  "Spank",
  "Spelmeyer",
  "Spiegelburg",
  "Spielvogel",
  "Spinner",
  "Spitzmüller",
  "Splinter",
  "Sporrer",
  "Sprenger",
  "Spöttel",
  "Stahl",
  "Stang",
  "Stanger",
  "Stauss",
  "Steding",
  "Steffen",
  "Steffny",
  "Steidl",
  "Steigauf",
  "Stein",
  "Steinecke",
  "Steinert",
  "Steinkamp",
  "Steinmetz",
  "Stelkens",
  "Stengel",
  "Stengl",
  "Stenzel",
  "Stepanov",
  "Stephan",
  "Stern",
  "Steuk",
  "Stief",
  "Stifel",
  "Stoll",
  "Stolle",
  "Stolz",
  "Storl",
  "Storp",
  "Stoutjesdijk",
  "Stratmann",
  "Straub",
  "Strausa",
  "Streck",
  "Streese",
  "Strege",
  "Streit",
  "Streller",
  "Strieder",
  "Striezel",
  "Strogies",
  "Strohschank",
  "Strunz",
  "Strutz",
  "Stube",
  "Stöckert",
  "Stöppler",
  "Stöwer",
  "Stürmer",
  "Suffa",
  "Sujew",
  "Sussmann",
  "Suthe",
  "Sutschet",
  "Swillims",
  "Szendrei",
  "Sören",
  "Sürth",
  "Tafelmeier",
  "Tang",
  "Tasche",
  "Taufratshofer",
  "Tegethof",
  "Teichmann",
  "Tepper",
  "Terheiden",
  "Terlecki",
  "Teufel",
  "Theele",
  "Thieke",
  "Thimm",
  "Thiomas",
  "Thomas",
  "Thriene",
  "Thränhardt",
  "Thust",
  "Thyssen",
  "Thöne",
  "Tidow",
  "Tiedtke",
  "Tietze",
  "Tilgner",
  "Tillack",
  "Timmermann",
  "Tischler",
  "Tischmann",
  "Tittman",
  "Tivontschik",
  "Tonat",
  "Tonn",
  "Trampeli",
  "Trauth",
  "Trautmann",
  "Travan",
  "Treff",
  "Tremmel",
  "Tress",
  "Tsamonikian",
  "Tschiers",
  "Tschirch",
  "Tuch",
  "Tucholke",
  "Tudow",
  "Tuschmo",
  "Tächl",
  "Többen",
  "Töpfer",
  "Uhlemann",
  "Uhlig",
  "Uhrig",
  "Uibel",
  "Uliczka",
  "Ullmann",
  "Ullrich",
  "Umbach",
  "Umlauft",
  "Umminger",
  "Unger",
  "Unterpaintner",
  "Urban",
  "Urbaniak",
  "Urbansky",
  "Urhig",
  "Vahlensieck",
  "Van",
  "Vangermain",
  "Vater",
  "Venghaus",
  "Verniest",
  "Verzi",
  "Vey",
  "Viellehner",
  "Vieweg",
  "Voelkel",
  "Vogel",
  "Vogelgsang",
  "Vogt",
  "Voigt",
  "Vokuhl",
  "Volk",
  "Volker",
  "Volkmann",
  "Von",
  "Vona",
  "Vontein",
  "Wachenbrunner",
  "Wachtel",
  "Wagner",
  "Waibel",
  "Wakan",
  "Waldmann",
  "Wallner",
  "Wallstab",
  "Walter",
  "Walther",
  "Walton",
  "Walz",
  "Wanner",
  "Wartenberg",
  "Waschbüsch",
  "Wassilew",
  "Wassiluk",
  "Weber",
  "Wehrsen",
  "Weidlich",
  "Weidner",
  "Weigel",
  "Weight",
  "Weiler",
  "Weimer",
  "Weis",
  "Weiss",
  "Weller",
  "Welsch",
  "Welz",
  "Welzel",
  "Weniger",
  "Wenk",
  "Werle",
  "Werner",
  "Werrmann",
  "Wessel",
  "Wessinghage",
  "Weyel",
  "Wezel",
  "Wichmann",
  "Wickert",
  "Wiebe",
  "Wiechmann",
  "Wiegelmann",
  "Wierig",
  "Wiese",
  "Wieser",
  "Wilhelm",
  "Wilky",
  "Will",
  "Willwacher",
  "Wilts",
  "Wimmer",
  "Winkelmann",
  "Winkler",
  "Winter",
  "Wischek",
  "Wischer",
  "Wissing",
  "Wittich",
  "Wittl",
  "Wolf",
  "Wolfarth",
  "Wolff",
  "Wollenberg",
  "Wollmann",
  "Woytkowska",
  "Wujak",
  "Wurm",
  "Wyludda",
  "Wölpert",
  "Wöschler",
  "Wühn",
  "Wünsche",
  "Zach",
  "Zaczkiewicz",
  "Zahn",
  "Zaituc",
  "Zandt",
  "Zanner",
  "Zapletal",
  "Zauber",
  "Zeidler",
  "Zekl",
  "Zender",
  "Zeuch",
  "Zeyen",
  "Zeyhle",
  "Ziegler",
  "Zimanyi",
  "Zimmer",
  "Zimmermann",
  "Zinser",
  "Zintl",
  "Zipp",
  "Zipse",
  "Zschunke",
  "Zuber",
  "Zwiener",
  "Zümsande",
  "Östringer",
  "Überacker"
];

},{}],43:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{nobility_title_prefix} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],44:[function(require,module,exports){
module["exports"] = [
  "zu",
  "von",
  "vom",
  "von der"
];

},{}],45:[function(require,module,exports){
module["exports"] = [
  "Hr.",
  "Fr.",
  "Dr.",
  "Prof. Dr."
];

},{}],46:[function(require,module,exports){
module["exports"] = [
  "(0###) #########",
  "(0####) #######",
  "+49-###-#######",
  "+49-####-########"
];

},{}],47:[function(require,module,exports){
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":46}],48:[function(require,module,exports){
module.exports=require(14)
},{"/Users/a/dev/faker.js/lib/locales/de/address/building_number.js":14}],49:[function(require,module,exports){
module["exports"] = [
  "#{city_name}"
];

},{}],50:[function(require,module,exports){
module["exports"] = [
  "Aigen im Mühlkreis",
  "Allerheiligen bei Wildon",
  "Altenfelden",
  "Arriach",
  "Axams",
  "Baumgartenberg",
  "Bergern im Dunkelsteinerwald",
  "Berndorf bei Salzburg",
  "Bregenz",
  "Breitenbach am Inn",
  "Deutsch-Wagram",
  "Dienten am Hochkönig",
  "Dietach",
  "Dornbirn",
  "Dürnkrut",
  "Eben im Pongau",
  "Ebenthal in Kärnten",
  "Eichgraben",
  "Eisenstadt",
  "Ellmau",
  "Feistritz am Wechsel",
  "Finkenberg",
  "Fiss",
  "Frantschach-St. Gertraud",
  "Fritzens",
  "Gams bei Hieflau",
  "Geiersberg",
  "Graz",
  "Großhöflein",
  "Gößnitz",
  "Hartl",
  "Hausleiten",
  "Herzogenburg",
  "Hinterhornbach",
  "Hochwolkersdorf",
  "Ilz",
  "Ilztal",
  "Innerbraz",
  "Innsbruck",
  "Itter",
  "Jagerberg",
  "Jeging",
  "Johnsbach",
  "Johnsdorf-Brunn",
  "Jungholz",
  "Kirchdorf am Inn",
  "Klagenfurt",
  "Kottes-Purk",
  "Krumau am Kamp",
  "Krumbach",
  "Lavamünd",
  "Lech",
  "Linz",
  "Ludesch",
  "Lödersdorf",
  "Marbach an der Donau",
  "Mattsee",
  "Mautern an der Donau",
  "Mauterndorf",
  "Mitterbach am Erlaufsee",
  "Neudorf bei Passail",
  "Neudorf bei Staatz",
  "Neukirchen an der Enknach",
  "Neustift an der Lafnitz",
  "Niederleis",
  "Oberndorf in Tirol",
  "Oberstorcha",
  "Oberwaltersdorf",
  "Oed-Oehling",
  "Ort im Innkreis",
  "Pilgersdorf",
  "Pitschgau",
  "Pollham",
  "Preitenegg",
  "Purbach am Neusiedler See",
  "Rabenwald",
  "Raiding",
  "Rastenfeld",
  "Ratten",
  "Rettenegg",
  "Salzburg",
  "Sankt Johann im Saggautal",
  "St. Peter am Kammersberg",
  "St. Pölten",
  "St. Veit an der Glan",
  "Taxenbach",
  "Tragwein",
  "Trebesing",
  "Trieben",
  "Turnau",
  "Ungerdorf",
  "Unterauersbach",
  "Unterstinkenbrunn",
  "Untertilliach",
  "Uttendorf",
  "Vals",
  "Velden am Wörther See",
  "Viehhofen",
  "Villach",
  "Vitis",
  "Waidhofen an der Thaya",
  "Waldkirchen am Wesen",
  "Weißkirchen an der Traun",
  "Wien",
  "Wimpassing im Schwarzatale",
  "Ybbs an der Donau",
  "Ybbsitz",
  "Yspertal",
  "Zeillern",
  "Zell am Pettenfirst",
  "Zell an der Pram",
  "Zerlach",
  "Zwölfaxing",
  "Öblarn",
  "Übelbach",
  "Überackern",
  "Übersaxen",
  "Übersbach"
];

},{}],51:[function(require,module,exports){
module.exports=require(18)
},{"/Users/a/dev/faker.js/lib/locales/de/address/country.js":18}],52:[function(require,module,exports){
module["exports"] = [
  "Österreich"
];

},{}],53:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.country = require("./country");
address.street_root = require("./street_root");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":48,"./city":49,"./city_name":50,"./country":51,"./default_country":52,"./postcode":54,"./secondary_address":55,"./state":56,"./state_abbr":57,"./street_address":58,"./street_name":59,"./street_root":60}],54:[function(require,module,exports){
module["exports"] = [
  "####"
];

},{}],55:[function(require,module,exports){
module.exports=require(22)
},{"/Users/a/dev/faker.js/lib/locales/de/address/secondary_address.js":22}],56:[function(require,module,exports){
module["exports"] = [
  "Burgenland",
  "Kärnten",
  "Niederösterreich",
  "Oberösterreich",
  "Salzburg",
  "Steiermark",
  "Tirol",
  "Vorarlberg",
  "Wien"
];

},{}],57:[function(require,module,exports){
module["exports"] = [
  "Bgld.",
  "Ktn.",
  "NÖ",
  "OÖ",
  "Sbg.",
  "Stmk.",
  "T",
  "Vbg.",
  "W"
];

},{}],58:[function(require,module,exports){
module.exports=require(25)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_address.js":25}],59:[function(require,module,exports){
module.exports=require(26)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_name.js":26}],60:[function(require,module,exports){
module["exports"] = [
  "Ahorn",
  "Ahorngasse (St. Andrä)",
  "Alleestraße (Poysbrunn)",
  "Alpenlandstraße",
  "Alte Poststraße",
  "Alte Ufergasse",
  "Am Kronawett (Hagenbrunn)",
  "Am Mühlwasser",
  "Am Rebenhang",
  "Am Sternweg",
  "Anton Wildgans-Straße",
  "Auer-von-Welsbach-Weg",
  "Auf der Stift",
  "Aufeldgasse",
  "Bahngasse",
  "Bahnhofstraße",
  "Bahnstraße (Gerhaus)",
  "Basteigasse",
  "Berggasse",
  "Bergstraße",
  "Birkenweg",
  "Blasiussteig",
  "Blattur",
  "Bruderhofgasse",
  "Brunnelligasse",
  "Bühelweg",
  "Darnautgasse",
  "Donaugasse",
  "Dorfplatz (Haselbach)",
  "Dr.-Oberreiter-Straße",
  "Dr.Karl Holoubek-Str.",
  "Drautal Bundesstraße",
  "Dürnrohrer Straße",
  "Ebenthalerstraße",
  "Eckgrabenweg",
  "Erlenstraße",
  "Erlenweg",
  "Eschenweg",
  "Etrichgasse",
  "Fassergasse",
  "Feichteggerwiese",
  "Feld-Weg",
  "Feldgasse",
  "Feldstapfe",
  "Fischpointweg",
  "Flachbergstraße",
  "Flurweg",
  "Franz Schubert-Gasse",
  "Franz-Schneeweiß-Weg",
  "Franz-von-Assisi-Straße",
  "Fritz-Pregl-Straße",
  "Fuchsgrubenweg",
  "Födlerweg",
  "Föhrenweg",
  "Fünfhaus (Paasdorf)",
  "Gabelsbergerstraße",
  "Gartenstraße",
  "Geigen",
  "Geigergasse",
  "Gemeindeaugasse",
  "Gemeindeplatz",
  "Georg-Aichinger-Straße",
  "Glanfeldbachweg",
  "Graben (Burgauberg)",
  "Grub",
  "Gröretgasse",
  "Grünbach",
  "Gösting",
  "Hainschwang",
  "Hans-Mauracher-Straße",
  "Hart",
  "Teichstraße",
  "Hauptplatz",
  "Hauptstraße",
  "Heideweg",
  "Heinrich Landauer Gasse",
  "Helenengasse",
  "Hermann von Gilmweg",
  "Hermann-Löns-Gasse",
  "Herminengasse",
  "Hernstorferstraße",
  "Hirsdorf",
  "Hochfeistritz",
  "Hochhaus Neue Donau",
  "Hof",
  "Hussovits Gasse",
  "Höggen",
  "Hütten",
  "Janzgasse",
  "Jochriemgutstraße",
  "Johann-Strauß-Gasse",
  "Julius-Raab-Straße",
  "Kahlenberger Straße",
  "Karl Kraft-Straße",
  "Kegelprielstraße",
  "Keltenberg-Eponaweg",
  "Kennedybrücke",
  "Kerpelystraße",
  "Kindergartenstraße",
  "Kinderheimgasse",
  "Kirchenplatz",
  "Kirchweg",
  "Klagenfurter Straße",
  "Klamm",
  "Kleinbaumgarten",
  "Klingergasse",
  "Koloniestraße",
  "Konrad-Duden-Gasse",
  "Krankenhausstraße",
  "Kubinstraße",
  "Köhldorfergasse",
  "Lackenweg",
  "Lange Mekotte",
  "Leifling",
  "Leopold Frank-Straße (Pellendorf)",
  "Lerchengasse (Pirka)",
  "Lichtensternsiedlung V",
  "Lindenhofstraße",
  "Lindenweg",
  "Luegstraße",
  "Maierhof",
  "Malerweg",
  "Mitterweg",
  "Mittlere Hauptstraße",
  "Moosbachgasse",
  "Morettigasse",
  "Musikpavillon Riezlern",
  "Mühlboden",
  "Mühle",
  "Mühlenweg",
  "Neustiftgasse",
  "Niederegg",
  "Niedergams",
  "Nordwestbahnbrücke",
  "Oberbödenalm",
  "Obere Berggasse",
  "Oedt",
  "Am Färberberg",
  "Ottogasse",
  "Paul Peters-Gasse",
  "Perspektivstraße",
  "Poppichl",
  "Privatweg",
  "Prixgasse",
  "Pyhra",
  "Radetzkystraße",
  "Raiden",
  "Reichensteinstraße",
  "Reitbauernstraße",
  "Reiterweg",
  "Reitschulgasse",
  "Ringweg",
  "Rupertistraße",
  "Römerstraße",
  "Römerweg",
  "Sackgasse",
  "Schaunbergerstraße",
  "Schloßweg",
  "Schulgasse (Langeck)",
  "Schönholdsiedlung",
  "Seeblick",
  "Seestraße",
  "Semriacherstraße",
  "Simling",
  "Sipbachzeller Straße",
  "Sonnenweg",
  "Spargelfeldgasse",
  "Spiesmayrweg",
  "Sportplatzstraße",
  "St.Ulrich",
  "Steilmannstraße",
  "Steingrüneredt",
  "Strassfeld",
  "Straßerau",
  "Stöpflweg",
  "Stüra",
  "Taferngasse",
  "Tennweg",
  "Thomas Koschat-Gasse",
  "Tiroler Straße",
  "Torrogasse",
  "Uferstraße (Schwarzau am Steinfeld)",
  "Unterdörfl",
  "Unterer Sonnrainweg",
  "Verwaltersiedlung",
  "Waldhang",
  "Wasen",
  "Weidenstraße",
  "Weiherweg",
  "Wettsteingasse",
  "Wiener Straße",
  "Windisch",
  "Zebragasse",
  "Zellerstraße",
  "Ziehrerstraße",
  "Zulechnerweg",
  "Zwergjoch",
  "Ötzbruck"
];

},{}],61:[function(require,module,exports){
module["exports"] = [
  "+43-6##-#######",
  "06##-########",
  "+436#########",
  "06##########"
];

},{}],62:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":61,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],63:[function(require,module,exports){
module.exports=require(30)
},{"./legal_form":64,"./name":65,"./suffix":66,"/Users/a/dev/faker.js/lib/locales/de/company/index.js":30}],64:[function(require,module,exports){
module.exports=require(31)
},{"/Users/a/dev/faker.js/lib/locales/de/company/legal_form.js":31}],65:[function(require,module,exports){
module.exports=require(32)
},{"/Users/a/dev/faker.js/lib/locales/de/company/name.js":32}],66:[function(require,module,exports){
module.exports=require(31)
},{"/Users/a/dev/faker.js/lib/locales/de/company/legal_form.js":31}],67:[function(require,module,exports){
var de_AT = {};
module['exports'] = de_AT;
de_AT.title = "German (Austria)";
de_AT.address = require("./address");
de_AT.company = require("./company");
de_AT.internet = require("./internet");
de_AT.name = require("./name");
de_AT.phone_number = require("./phone_number");
de_AT.cell_phone = require("./cell_phone");

},{"./address":53,"./cell_phone":62,"./company":63,"./internet":70,"./name":72,"./phone_number":78}],68:[function(require,module,exports){
module["exports"] = [
  "com",
  "info",
  "name",
  "net",
  "org",
  "de",
  "ch",
  "at"
];

},{}],69:[function(require,module,exports){
module.exports=require(36)
},{"/Users/a/dev/faker.js/lib/locales/de/internet/free_email.js":36}],70:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":68,"./free_email":69,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],71:[function(require,module,exports){
module.exports=require(40)
},{"/Users/a/dev/faker.js/lib/locales/de/name/first_name.js":40}],72:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./first_name":71,"./last_name":73,"./name":74,"./nobility_title_prefix":75,"./prefix":76,"/Users/a/dev/faker.js/lib/locales/de/name/index.js":41}],73:[function(require,module,exports){
module.exports=require(42)
},{"/Users/a/dev/faker.js/lib/locales/de/name/last_name.js":42}],74:[function(require,module,exports){
module.exports=require(43)
},{"/Users/a/dev/faker.js/lib/locales/de/name/name.js":43}],75:[function(require,module,exports){
module.exports=require(44)
},{"/Users/a/dev/faker.js/lib/locales/de/name/nobility_title_prefix.js":44}],76:[function(require,module,exports){
module["exports"] = [
  "Dr.",
  "Prof. Dr."
];

},{}],77:[function(require,module,exports){
module["exports"] = [
  "01 #######",
  "01#######",
  "+43-1-#######",
  "+431#######",
  "0#### ####",
  "0#########",
  "+43-####-####",
  "+43 ########"
];

},{}],78:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":77,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],79:[function(require,module,exports){
module["exports"] = [
  "CH",
  "CH",
  "CH",
  "DE",
  "AT",
  "US",
  "LI",
  "US",
  "HK",
  "VN"
];

},{}],80:[function(require,module,exports){
module["exports"] = [
  "Schweiz"
];

},{}],81:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.country_code = require("./country_code");
address.postcode = require("./postcode");
address.default_country = require("./default_country");

},{"./country_code":79,"./default_country":80,"./postcode":82}],82:[function(require,module,exports){
module["exports"] = [
  "1###",
  "2###",
  "3###",
  "4###",
  "5###",
  "6###",
  "7###",
  "8###",
  "9###"
];

},{}],83:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.name = require("./name");

},{"./name":84,"./suffix":85}],84:[function(require,module,exports){
module.exports=require(32)
},{"/Users/a/dev/faker.js/lib/locales/de/company/name.js":32}],85:[function(require,module,exports){
module["exports"] = [
  "AG",
  "GmbH",
  "und Söhne",
  "und Partner",
  "& Co.",
  "Gruppe",
  "LLC",
  "Inc."
];

},{}],86:[function(require,module,exports){
var de_CH = {};
module['exports'] = de_CH;
de_CH.title = "German (Switzerland)";
de_CH.address = require("./address");
de_CH.company = require("./company");
de_CH.internet = require("./internet");
de_CH.phone_number = require("./phone_number");

},{"./address":81,"./company":83,"./internet":88,"./phone_number":90}],87:[function(require,module,exports){
module["exports"] = [
  "com",
  "net",
  "biz",
  "ch",
  "de",
  "li",
  "at",
  "ch",
  "ch"
];

},{}],88:[function(require,module,exports){
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":87}],89:[function(require,module,exports){
module["exports"] = [
  "0800 ### ###",
  "0800 ## ## ##",
  "0## ### ## ##",
  "0## ### ## ##",
  "+41 ## ### ## ##",
  "0900 ### ###",
  "076 ### ## ##",
  "+4178 ### ## ##",
  "0041 79 ### ## ##"
];

},{}],90:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":89,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],91:[function(require,module,exports){
module["exports"] = [
  "#####",
  "####",
  "###"
];

},{}],92:[function(require,module,exports){
module.exports=require(15)
},{"/Users/a/dev/faker.js/lib/locales/de/address/city.js":15}],93:[function(require,module,exports){
module["exports"] = [
  "North",
  "East",
  "West",
  "South",
  "New",
  "Lake",
  "Port"
];

},{}],94:[function(require,module,exports){
module["exports"] = [
  "town",
  "ton",
  "land",
  "ville",
  "berg",
  "burgh",
  "borough",
  "bury",
  "view",
  "port",
  "mouth",
  "stad",
  "furt",
  "chester",
  "mouth",
  "fort",
  "haven",
  "side",
  "shire"
];

},{}],95:[function(require,module,exports){
module["exports"] = [
  "Afghanistan",
  "Albania",
  "Algeria",
  "American Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antarctica (the territory South of 60 deg S)",
  "Antigua and Barbuda",
  "Argentina",
  "Armenia",
  "Aruba",
  "Australia",
  "Austria",
  "Azerbaijan",
  "Bahamas",
  "Bahrain",
  "Bangladesh",
  "Barbados",
  "Belarus",
  "Belgium",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolivia",
  "Bosnia and Herzegovina",
  "Botswana",
  "Bouvet Island (Bouvetoya)",
  "Brazil",
  "British Indian Ocean Territory (Chagos Archipelago)",
  "Brunei Darussalam",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Cambodia",
  "Cameroon",
  "Canada",
  "Cape Verde",
  "Cayman Islands",
  "Central African Republic",
  "Chad",
  "Chile",
  "China",
  "Christmas Island",
  "Cocos (Keeling) Islands",
  "Colombia",
  "Comoros",
  "Congo",
  "Congo",
  "Cook Islands",
  "Costa Rica",
  "Cote d'Ivoire",
  "Croatia",
  "Cuba",
  "Cyprus",
  "Czech Republic",
  "Denmark",
  "Djibouti",
  "Dominica",
  "Dominican Republic",
  "Ecuador",
  "Egypt",
  "El Salvador",
  "Equatorial Guinea",
  "Eritrea",
  "Estonia",
  "Ethiopia",
  "Faroe Islands",
  "Falkland Islands (Malvinas)",
  "Fiji",
  "Finland",
  "France",
  "French Guiana",
  "French Polynesia",
  "French Southern Territories",
  "Gabon",
  "Gambia",
  "Georgia",
  "Germany",
  "Ghana",
  "Gibraltar",
  "Greece",
  "Greenland",
  "Grenada",
  "Guadeloupe",
  "Guam",
  "Guatemala",
  "Guernsey",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Heard Island and McDonald Islands",
  "Holy See (Vatican City State)",
  "Honduras",
  "Hong Kong",
  "Hungary",
  "Iceland",
  "India",
  "Indonesia",
  "Iran",
  "Iraq",
  "Ireland",
  "Isle of Man",
  "Israel",
  "Italy",
  "Jamaica",
  "Japan",
  "Jersey",
  "Jordan",
  "Kazakhstan",
  "Kenya",
  "Kiribati",
  "Democratic People's Republic of Korea",
  "Republic of Korea",
  "Kuwait",
  "Kyrgyz Republic",
  "Lao People's Democratic Republic",
  "Latvia",
  "Lebanon",
  "Lesotho",
  "Liberia",
  "Libyan Arab Jamahiriya",
  "Liechtenstein",
  "Lithuania",
  "Luxembourg",
  "Macao",
  "Macedonia",
  "Madagascar",
  "Malawi",
  "Malaysia",
  "Maldives",
  "Mali",
  "Malta",
  "Marshall Islands",
  "Martinique",
  "Mauritania",
  "Mauritius",
  "Mayotte",
  "Mexico",
  "Micronesia",
  "Moldova",
  "Monaco",
  "Mongolia",
  "Montenegro",
  "Montserrat",
  "Morocco",
  "Mozambique",
  "Myanmar",
  "Namibia",
  "Nauru",
  "Nepal",
  "Netherlands Antilles",
  "Netherlands",
  "New Caledonia",
  "New Zealand",
  "Nicaragua",
  "Niger",
  "Nigeria",
  "Niue",
  "Norfolk Island",
  "Northern Mariana Islands",
  "Norway",
  "Oman",
  "Pakistan",
  "Palau",
  "Palestinian Territory",
  "Panama",
  "Papua New Guinea",
  "Paraguay",
  "Peru",
  "Philippines",
  "Pitcairn Islands",
  "Poland",
  "Portugal",
  "Puerto Rico",
  "Qatar",
  "Reunion",
  "Romania",
  "Russian Federation",
  "Rwanda",
  "Saint Barthelemy",
  "Saint Helena",
  "Saint Kitts and Nevis",
  "Saint Lucia",
  "Saint Martin",
  "Saint Pierre and Miquelon",
  "Saint Vincent and the Grenadines",
  "Samoa",
  "San Marino",
  "Sao Tome and Principe",
  "Saudi Arabia",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leone",
  "Singapore",
  "Slovakia (Slovak Republic)",
  "Slovenia",
  "Solomon Islands",
  "Somalia",
  "South Africa",
  "South Georgia and the South Sandwich Islands",
  "Spain",
  "Sri Lanka",
  "Sudan",
  "Suriname",
  "Svalbard & Jan Mayen Islands",
  "Swaziland",
  "Sweden",
  "Switzerland",
  "Syrian Arab Republic",
  "Taiwan",
  "Tajikistan",
  "Tanzania",
  "Thailand",
  "Timor-Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad and Tobago",
  "Tunisia",
  "Turkey",
  "Turkmenistan",
  "Turks and Caicos Islands",
  "Tuvalu",
  "Uganda",
  "Ukraine",
  "United Arab Emirates",
  "United Kingdom",
  "United States of America",
  "United States Minor Outlying Islands",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Virgin Islands, British",
  "Virgin Islands, U.S.",
  "Wallis and Futuna",
  "Western Sahara",
  "Yemen",
  "Zambia",
  "Zimbabwe"
];

},{}],96:[function(require,module,exports){
module["exports"] = [
  "AD",
  "AE",
  "AF",
  "AG",
  "AI",
  "AL",
  "AM",
  "AO",
  "AQ",
  "AR",
  "AS",
  "AT",
  "AU",
  "AW",
  "AX",
  "AZ",
  "BA",
  "BB",
  "BD",
  "BE",
  "BF",
  "BG",
  "BH",
  "BI",
  "BJ",
  "BL",
  "BM",
  "BN",
  "BO",
  "BQ",
  "BQ",
  "BR",
  "BS",
  "BT",
  "BV",
  "BW",
  "BY",
  "BZ",
  "CA",
  "CC",
  "CD",
  "CF",
  "CG",
  "CH",
  "CI",
  "CK",
  "CL",
  "CM",
  "CN",
  "CO",
  "CR",
  "CU",
  "CV",
  "CW",
  "CX",
  "CY",
  "CZ",
  "DE",
  "DJ",
  "DK",
  "DM",
  "DO",
  "DZ",
  "EC",
  "EE",
  "EG",
  "EH",
  "ER",
  "ES",
  "ET",
  "FI",
  "FJ",
  "FK",
  "FM",
  "FO",
  "FR",
  "GA",
  "GB",
  "GD",
  "GE",
  "GF",
  "GG",
  "GH",
  "GI",
  "GL",
  "GM",
  "GN",
  "GP",
  "GQ",
  "GR",
  "GS",
  "GT",
  "GU",
  "GW",
  "GY",
  "HK",
  "HM",
  "HN",
  "HR",
  "HT",
  "HU",
  "ID",
  "IE",
  "IL",
  "IM",
  "IN",
  "IO",
  "IQ",
  "IR",
  "IS",
  "IT",
  "JE",
  "JM",
  "JO",
  "JP",
  "KE",
  "KG",
  "KH",
  "KI",
  "KM",
  "KN",
  "KP",
  "KR",
  "KW",
  "KY",
  "KZ",
  "LA",
  "LB",
  "LC",
  "LI",
  "LK",
  "LR",
  "LS",
  "LT",
  "LU",
  "LV",
  "LY",
  "MA",
  "MC",
  "MD",
  "ME",
  "MF",
  "MG",
  "MH",
  "MK",
  "ML",
  "MM",
  "MN",
  "MO",
  "MP",
  "MQ",
  "MR",
  "MS",
  "MT",
  "MU",
  "MV",
  "MW",
  "MX",
  "MY",
  "MZ",
  "NA",
  "NC",
  "NE",
  "NF",
  "NG",
  "NI",
  "NL",
  "NO",
  "NP",
  "NR",
  "NU",
  "NZ",
  "OM",
  "PA",
  "PE",
  "PF",
  "PG",
  "PH",
  "PK",
  "PL",
  "PM",
  "PN",
  "PR",
  "PS",
  "PT",
  "PW",
  "PY",
  "QA",
  "RE",
  "RO",
  "RS",
  "RU",
  "RW",
  "SA",
  "SB",
  "SC",
  "SD",
  "SE",
  "SG",
  "SH",
  "SI",
  "SJ",
  "SK",
  "SL",
  "SM",
  "SN",
  "SO",
  "SR",
  "SS",
  "ST",
  "SV",
  "SX",
  "SY",
  "SZ",
  "TC",
  "TD",
  "TF",
  "TG",
  "TH",
  "TJ",
  "TK",
  "TL",
  "TM",
  "TN",
  "TO",
  "TR",
  "TT",
  "TV",
  "TW",
  "TZ",
  "UA",
  "UG",
  "UM",
  "US",
  "UY",
  "UZ",
  "VA",
  "VC",
  "VE",
  "VG",
  "VI",
  "VN",
  "VU",
  "WF",
  "WS",
  "YE",
  "YT",
  "ZA",
  "ZM",
  "ZW"
];

},{}],97:[function(require,module,exports){
module["exports"] = [
  "Avon",
  "Bedfordshire",
  "Berkshire",
  "Borders",
  "Buckinghamshire",
  "Cambridgeshire"
];

},{}],98:[function(require,module,exports){
module["exports"] = [
  "United States of America"
];

},{}],99:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.county = require("./county");
address.country = require("./country");
address.country_code = require("./country_code");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.postcode_by_state = require("./postcode_by_state");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":91,"./city":92,"./city_prefix":93,"./city_suffix":94,"./country":95,"./country_code":96,"./county":97,"./default_country":98,"./postcode":100,"./postcode_by_state":101,"./secondary_address":102,"./state":103,"./state_abbr":104,"./street_address":105,"./street_name":106,"./street_suffix":107,"./time_zone":108}],100:[function(require,module,exports){
module["exports"] = [
  "#####",
  "#####-####"
];

},{}],101:[function(require,module,exports){
module.exports=require(100)
},{"/Users/a/dev/faker.js/lib/locales/en/address/postcode.js":100}],102:[function(require,module,exports){
module["exports"] = [
  "Apt. ###",
  "Suite ###"
];

},{}],103:[function(require,module,exports){
module["exports"] = [
  "Alabama",
  "Alaska",
  "Arizona",
  "Arkansas",
  "California",
  "Colorado",
  "Connecticut",
  "Delaware",
  "Florida",
  "Georgia",
  "Hawaii",
  "Idaho",
  "Illinois",
  "Indiana",
  "Iowa",
  "Kansas",
  "Kentucky",
  "Louisiana",
  "Maine",
  "Maryland",
  "Massachusetts",
  "Michigan",
  "Minnesota",
  "Mississippi",
  "Missouri",
  "Montana",
  "Nebraska",
  "Nevada",
  "New Hampshire",
  "New Jersey",
  "New Mexico",
  "New York",
  "North Carolina",
  "North Dakota",
  "Ohio",
  "Oklahoma",
  "Oregon",
  "Pennsylvania",
  "Rhode Island",
  "South Carolina",
  "South Dakota",
  "Tennessee",
  "Texas",
  "Utah",
  "Vermont",
  "Virginia",
  "Washington",
  "West Virginia",
  "Wisconsin",
  "Wyoming"
];

},{}],104:[function(require,module,exports){
module["exports"] = [
  "AL",
  "AK",
  "AZ",
  "AR",
  "CA",
  "CO",
  "CT",
  "DE",
  "FL",
  "GA",
  "HI",
  "ID",
  "IL",
  "IN",
  "IA",
  "KS",
  "KY",
  "LA",
  "ME",
  "MD",
  "MA",
  "MI",
  "MN",
  "MS",
  "MO",
  "MT",
  "NE",
  "NV",
  "NH",
  "NJ",
  "NM",
  "NY",
  "NC",
  "ND",
  "OH",
  "OK",
  "OR",
  "PA",
  "RI",
  "SC",
  "SD",
  "TN",
  "TX",
  "UT",
  "VT",
  "VA",
  "WA",
  "WV",
  "WI",
  "WY"
];

},{}],105:[function(require,module,exports){
module["exports"] = [
  "#{building_number} #{street_name}"
];

},{}],106:[function(require,module,exports){
module["exports"] = [
  "#{Name.first_name} #{street_suffix}",
  "#{Name.last_name} #{street_suffix}"
];

},{}],107:[function(require,module,exports){
module["exports"] = [
  "Alley",
  "Avenue",
  "Branch",
  "Bridge",
  "Brook",
  "Brooks",
  "Burg",
  "Burgs",
  "Bypass",
  "Camp",
  "Canyon",
  "Cape",
  "Causeway",
  "Center",
  "Centers",
  "Circle",
  "Circles",
  "Cliff",
  "Cliffs",
  "Club",
  "Common",
  "Corner",
  "Corners",
  "Course",
  "Court",
  "Courts",
  "Cove",
  "Coves",
  "Creek",
  "Crescent",
  "Crest",
  "Crossing",
  "Crossroad",
  "Curve",
  "Dale",
  "Dam",
  "Divide",
  "Drive",
  "Drive",
  "Drives",
  "Estate",
  "Estates",
  "Expressway",
  "Extension",
  "Extensions",
  "Fall",
  "Falls",
  "Ferry",
  "Field",
  "Fields",
  "Flat",
  "Flats",
  "Ford",
  "Fords",
  "Forest",
  "Forge",
  "Forges",
  "Fork",
  "Forks",
  "Fort",
  "Freeway",
  "Garden",
  "Gardens",
  "Gateway",
  "Glen",
  "Glens",
  "Green",
  "Greens",
  "Grove",
  "Groves",
  "Harbor",
  "Harbors",
  "Haven",
  "Heights",
  "Highway",
  "Hill",
  "Hills",
  "Hollow",
  "Inlet",
  "Inlet",
  "Island",
  "Island",
  "Islands",
  "Islands",
  "Isle",
  "Isle",
  "Junction",
  "Junctions",
  "Key",
  "Keys",
  "Knoll",
  "Knolls",
  "Lake",
  "Lakes",
  "Land",
  "Landing",
  "Lane",
  "Light",
  "Lights",
  "Loaf",
  "Lock",
  "Locks",
  "Locks",
  "Lodge",
  "Lodge",
  "Loop",
  "Mall",
  "Manor",
  "Manors",
  "Meadow",
  "Meadows",
  "Mews",
  "Mill",
  "Mills",
  "Mission",
  "Mission",
  "Motorway",
  "Mount",
  "Mountain",
  "Mountain",
  "Mountains",
  "Mountains",
  "Neck",
  "Orchard",
  "Oval",
  "Overpass",
  "Park",
  "Parks",
  "Parkway",
  "Parkways",
  "Pass",
  "Passage",
  "Path",
  "Pike",
  "Pine",
  "Pines",
  "Place",
  "Plain",
  "Plains",
  "Plains",
  "Plaza",
  "Plaza",
  "Point",
  "Points",
  "Port",
  "Port",
  "Ports",
  "Ports",
  "Prairie",
  "Prairie",
  "Radial",
  "Ramp",
  "Ranch",
  "Rapid",
  "Rapids",
  "Rest",
  "Ridge",
  "Ridges",
  "River",
  "Road",
  "Road",
  "Roads",
  "Roads",
  "Route",
  "Row",
  "Rue",
  "Run",
  "Shoal",
  "Shoals",
  "Shore",
  "Shores",
  "Skyway",
  "Spring",
  "Springs",
  "Springs",
  "Spur",
  "Spurs",
  "Square",
  "Square",
  "Squares",
  "Squares",
  "Station",
  "Station",
  "Stravenue",
  "Stravenue",
  "Stream",
  "Stream",
  "Street",
  "Street",
  "Streets",
  "Summit",
  "Summit",
  "Terrace",
  "Throughway",
  "Trace",
  "Track",
  "Trafficway",
  "Trail",
  "Trail",
  "Tunnel",
  "Tunnel",
  "Turnpike",
  "Turnpike",
  "Underpass",
  "Union",
  "Unions",
  "Valley",
  "Valleys",
  "Via",
  "Viaduct",
  "View",
  "Views",
  "Village",
  "Village",
  "Villages",
  "Ville",
  "Vista",
  "Vista",
  "Walk",
  "Walks",
  "Wall",
  "Way",
  "Ways",
  "Well",
  "Wells"
];

},{}],108:[function(require,module,exports){
module["exports"] = [
  "Pacific/Midway",
  "Pacific/Pago_Pago",
  "Pacific/Honolulu",
  "America/Juneau",
  "America/Los_Angeles",
  "America/Tijuana",
  "America/Denver",
  "America/Phoenix",
  "America/Chihuahua",
  "America/Mazatlan",
  "America/Chicago",
  "America/Regina",
  "America/Mexico_City",
  "America/Mexico_City",
  "America/Monterrey",
  "America/Guatemala",
  "America/New_York",
  "America/Indiana/Indianapolis",
  "America/Bogota",
  "America/Lima",
  "America/Lima",
  "America/Halifax",
  "America/Caracas",
  "America/La_Paz",
  "America/Santiago",
  "America/St_Johns",
  "America/Sao_Paulo",
  "America/Argentina/Buenos_Aires",
  "America/Guyana",
  "America/Godthab",
  "Atlantic/South_Georgia",
  "Atlantic/Azores",
  "Atlantic/Cape_Verde",
  "Europe/Dublin",
  "Europe/London",
  "Europe/Lisbon",
  "Europe/London",
  "Africa/Casablanca",
  "Africa/Monrovia",
  "Etc/UTC",
  "Europe/Belgrade",
  "Europe/Bratislava",
  "Europe/Budapest",
  "Europe/Ljubljana",
  "Europe/Prague",
  "Europe/Sarajevo",
  "Europe/Skopje",
  "Europe/Warsaw",
  "Europe/Zagreb",
  "Europe/Brussels",
  "Europe/Copenhagen",
  "Europe/Madrid",
  "Europe/Paris",
  "Europe/Amsterdam",
  "Europe/Berlin",
  "Europe/Berlin",
  "Europe/Rome",
  "Europe/Stockholm",
  "Europe/Vienna",
  "Africa/Algiers",
  "Europe/Bucharest",
  "Africa/Cairo",
  "Europe/Helsinki",
  "Europe/Kiev",
  "Europe/Riga",
  "Europe/Sofia",
  "Europe/Tallinn",
  "Europe/Vilnius",
  "Europe/Athens",
  "Europe/Istanbul",
  "Europe/Minsk",
  "Asia/Jerusalem",
  "Africa/Harare",
  "Africa/Johannesburg",
  "Europe/Moscow",
  "Europe/Moscow",
  "Europe/Moscow",
  "Asia/Kuwait",
  "Asia/Riyadh",
  "Africa/Nairobi",
  "Asia/Baghdad",
  "Asia/Tehran",
  "Asia/Muscat",
  "Asia/Muscat",
  "Asia/Baku",
  "Asia/Tbilisi",
  "Asia/Yerevan",
  "Asia/Kabul",
  "Asia/Yekaterinburg",
  "Asia/Karachi",
  "Asia/Karachi",
  "Asia/Tashkent",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kathmandu",
  "Asia/Dhaka",
  "Asia/Dhaka",
  "Asia/Colombo",
  "Asia/Almaty",
  "Asia/Novosibirsk",
  "Asia/Rangoon",
  "Asia/Bangkok",
  "Asia/Bangkok",
  "Asia/Jakarta",
  "Asia/Krasnoyarsk",
  "Asia/Shanghai",
  "Asia/Chongqing",
  "Asia/Hong_Kong",
  "Asia/Urumqi",
  "Asia/Kuala_Lumpur",
  "Asia/Singapore",
  "Asia/Taipei",
  "Australia/Perth",
  "Asia/Irkutsk",
  "Asia/Ulaanbaatar",
  "Asia/Seoul",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Yakutsk",
  "Australia/Darwin",
  "Australia/Adelaide",
  "Australia/Melbourne",
  "Australia/Melbourne",
  "Australia/Sydney",
  "Australia/Brisbane",
  "Australia/Hobart",
  "Asia/Vladivostok",
  "Pacific/Guam",
  "Pacific/Port_Moresby",
  "Asia/Magadan",
  "Asia/Magadan",
  "Pacific/Noumea",
  "Pacific/Fiji",
  "Asia/Kamchatka",
  "Pacific/Majuro",
  "Pacific/Auckland",
  "Pacific/Auckland",
  "Pacific/Tongatapu",
  "Pacific/Fakaofo",
  "Pacific/Apia"
];

},{}],109:[function(require,module,exports){
module["exports"] = [
  "#{Name.name}",
  "#{Company.name}"
];

},{}],110:[function(require,module,exports){
var app = {};
module['exports'] = app;
app.name = require("./name");
app.version = require("./version");
app.author = require("./author");

},{"./author":109,"./name":111,"./version":112}],111:[function(require,module,exports){
module["exports"] = [
  "Redhold",
  "Treeflex",
  "Trippledex",
  "Kanlam",
  "Bigtax",
  "Daltfresh",
  "Toughjoyfax",
  "Mat Lam Tam",
  "Otcom",
  "Tres-Zap",
  "Y-Solowarm",
  "Tresom",
  "Voltsillam",
  "Biodex",
  "Greenlam",
  "Viva",
  "Matsoft",
  "Temp",
  "Zoolab",
  "Subin",
  "Rank",
  "Job",
  "Stringtough",
  "Tin",
  "It",
  "Home Ing",
  "Zamit",
  "Sonsing",
  "Konklab",
  "Alpha",
  "Latlux",
  "Voyatouch",
  "Alphazap",
  "Holdlamis",
  "Zaam-Dox",
  "Sub-Ex",
  "Quo Lux",
  "Bamity",
  "Ventosanzap",
  "Lotstring",
  "Hatity",
  "Tempsoft",
  "Overhold",
  "Fixflex",
  "Konklux",
  "Zontrax",
  "Tampflex",
  "Span",
  "Namfix",
  "Transcof",
  "Stim",
  "Fix San",
  "Sonair",
  "Stronghold",
  "Fintone",
  "Y-find",
  "Opela",
  "Lotlux",
  "Ronstring",
  "Zathin",
  "Duobam",
  "Keylex"
];

},{}],112:[function(require,module,exports){
module["exports"] = [
  "0.#.#",
  "0.##",
  "#.##",
  "#.#",
  "#.#.#"
];

},{}],113:[function(require,module,exports){
module["exports"] = [
  "2011-10-12",
  "2012-11-12",
  "2015-11-11",
  "2013-9-12"
];

},{}],114:[function(require,module,exports){
module["exports"] = [
  "1234-2121-1221-1211",
  "1212-1221-1121-1234",
  "1211-1221-1234-2201",
  "1228-1221-1221-1431"
];

},{}],115:[function(require,module,exports){
module["exports"] = [
  "visa",
  "mastercard",
  "americanexpress",
  "discover"
];

},{}],116:[function(require,module,exports){
var business = {};
module['exports'] = business;
business.credit_card_numbers = require("./credit_card_numbers");
business.credit_card_expiry_dates = require("./credit_card_expiry_dates");
business.credit_card_types = require("./credit_card_types");

},{"./credit_card_expiry_dates":113,"./credit_card_numbers":114,"./credit_card_types":115}],117:[function(require,module,exports){
module["exports"] = [
  "###-###-####",
  "(###) ###-####",
  "1-###-###-####",
  "###.###.####"
];

},{}],118:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":117,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],119:[function(require,module,exports){
module["exports"] = [
  "red",
  "green",
  "blue",
  "yellow",
  "purple",
  "mint green",
  "teal",
  "white",
  "black",
  "orange",
  "pink",
  "grey",
  "maroon",
  "violet",
  "turquoise",
  "tan",
  "sky blue",
  "salmon",
  "plum",
  "orchid",
  "olive",
  "magenta",
  "lime",
  "ivory",
  "indigo",
  "gold",
  "fuchsia",
  "cyan",
  "azure",
  "lavender",
  "silver"
];

},{}],120:[function(require,module,exports){
module["exports"] = [
  "Books",
  "Movies",
  "Music",
  "Games",
  "Electronics",
  "Computers",
  "Home",
  "Garden",
  "Tools",
  "Grocery",
  "Health",
  "Beauty",
  "Toys",
  "Kids",
  "Baby",
  "Clothing",
  "Shoes",
  "Jewelery",
  "Sports",
  "Outdoors",
  "Automotive",
  "Industrial"
];

},{}],121:[function(require,module,exports){
var commerce = {};
module['exports'] = commerce;
commerce.color = require("./color");
commerce.department = require("./department");
commerce.product_name = require("./product_name");

},{"./color":119,"./department":120,"./product_name":122}],122:[function(require,module,exports){
module["exports"] = {
  "adjective": [
    "Small",
    "Ergonomic",
    "Rustic",
    "Intelligent",
    "Gorgeous",
    "Incredible",
    "Fantastic",
    "Practical",
    "Sleek",
    "Awesome",
    "Generic",
    "Handcrafted",
    "Handmade",
    "Licensed",
    "Refined",
    "Unbranded",
    "Tasty"
  ],
  "material": [
    "Steel",
    "Wooden",
    "Concrete",
    "Plastic",
    "Cotton",
    "Granite",
    "Rubber",
    "Metal",
    "Soft",
    "Fresh",
    "Frozen"
  ],
  "product": [
    "Chair",
    "Car",
    "Computer",
    "Keyboard",
    "Mouse",
    "Bike",
    "Ball",
    "Gloves",
    "Pants",
    "Shirt",
    "Table",
    "Shoes",
    "Hat",
    "Towels",
    "Soap",
    "Tuna",
    "Chicken",
    "Fish",
    "Cheese",
    "Bacon",
    "Pizza",
    "Salad",
    "Sausages",
    "Chips"
  ]
};

},{}],123:[function(require,module,exports){
module["exports"] = [
  "Adaptive",
  "Advanced",
  "Ameliorated",
  "Assimilated",
  "Automated",
  "Balanced",
  "Business-focused",
  "Centralized",
  "Cloned",
  "Compatible",
  "Configurable",
  "Cross-group",
  "Cross-platform",
  "Customer-focused",
  "Customizable",
  "Decentralized",
  "De-engineered",
  "Devolved",
  "Digitized",
  "Distributed",
  "Diverse",
  "Down-sized",
  "Enhanced",
  "Enterprise-wide",
  "Ergonomic",
  "Exclusive",
  "Expanded",
  "Extended",
  "Face to face",
  "Focused",
  "Front-line",
  "Fully-configurable",
  "Function-based",
  "Fundamental",
  "Future-proofed",
  "Grass-roots",
  "Horizontal",
  "Implemented",
  "Innovative",
  "Integrated",
  "Intuitive",
  "Inverse",
  "Managed",
  "Mandatory",
  "Monitored",
  "Multi-channelled",
  "Multi-lateral",
  "Multi-layered",
  "Multi-tiered",
  "Networked",
  "Object-based",
  "Open-architected",
  "Open-source",
  "Operative",
  "Optimized",
  "Optional",
  "Organic",
  "Organized",
  "Persevering",
  "Persistent",
  "Phased",
  "Polarised",
  "Pre-emptive",
  "Proactive",
  "Profit-focused",
  "Profound",
  "Programmable",
  "Progressive",
  "Public-key",
  "Quality-focused",
  "Reactive",
  "Realigned",
  "Re-contextualized",
  "Re-engineered",
  "Reduced",
  "Reverse-engineered",
  "Right-sized",
  "Robust",
  "Seamless",
  "Secured",
  "Self-enabling",
  "Sharable",
  "Stand-alone",
  "Streamlined",
  "Switchable",
  "Synchronised",
  "Synergistic",
  "Synergized",
  "Team-oriented",
  "Total",
  "Triple-buffered",
  "Universal",
  "Up-sized",
  "Upgradable",
  "User-centric",
  "User-friendly",
  "Versatile",
  "Virtual",
  "Visionary",
  "Vision-oriented"
];

},{}],124:[function(require,module,exports){
module["exports"] = [
  "clicks-and-mortar",
  "value-added",
  "vertical",
  "proactive",
  "robust",
  "revolutionary",
  "scalable",
  "leading-edge",
  "innovative",
  "intuitive",
  "strategic",
  "e-business",
  "mission-critical",
  "sticky",
  "one-to-one",
  "24/7",
  "end-to-end",
  "global",
  "B2B",
  "B2C",
  "granular",
  "frictionless",
  "virtual",
  "viral",
  "dynamic",
  "24/365",
  "best-of-breed",
  "killer",
  "magnetic",
  "bleeding-edge",
  "web-enabled",
  "interactive",
  "dot-com",
  "sexy",
  "back-end",
  "real-time",
  "efficient",
  "front-end",
  "distributed",
  "seamless",
  "extensible",
  "turn-key",
  "world-class",
  "open-source",
  "cross-platform",
  "cross-media",
  "synergistic",
  "bricks-and-clicks",
  "out-of-the-box",
  "enterprise",
  "integrated",
  "impactful",
  "wireless",
  "transparent",
  "next-generation",
  "cutting-edge",
  "user-centric",
  "visionary",
  "customized",
  "ubiquitous",
  "plug-and-play",
  "collaborative",
  "compelling",
  "holistic",
  "rich"
];

},{}],125:[function(require,module,exports){
module["exports"] = [
  "synergies",
  "web-readiness",
  "paradigms",
  "markets",
  "partnerships",
  "infrastructures",
  "platforms",
  "initiatives",
  "channels",
  "eyeballs",
  "communities",
  "ROI",
  "solutions",
  "e-tailers",
  "e-services",
  "action-items",
  "portals",
  "niches",
  "technologies",
  "content",
  "vortals",
  "supply-chains",
  "convergence",
  "relationships",
  "architectures",
  "interfaces",
  "e-markets",
  "e-commerce",
  "systems",
  "bandwidth",
  "infomediaries",
  "models",
  "mindshare",
  "deliverables",
  "users",
  "schemas",
  "networks",
  "applications",
  "metrics",
  "e-business",
  "functionalities",
  "experiences",
  "web services",
  "methodologies"
];

},{}],126:[function(require,module,exports){
module["exports"] = [
  "implement",
  "utilize",
  "integrate",
  "streamline",
  "optimize",
  "evolve",
  "transform",
  "embrace",
  "enable",
  "orchestrate",
  "leverage",
  "reinvent",
  "aggregate",
  "architect",
  "enhance",
  "incentivize",
  "morph",
  "empower",
  "envisioneer",
  "monetize",
  "harness",
  "facilitate",
  "seize",
  "disintermediate",
  "synergize",
  "strategize",
  "deploy",
  "brand",
  "grow",
  "target",
  "syndicate",
  "synthesize",
  "deliver",
  "mesh",
  "incubate",
  "engage",
  "maximize",
  "benchmark",
  "expedite",
  "reintermediate",
  "whiteboard",
  "visualize",
  "repurpose",
  "innovate",
  "scale",
  "unleash",
  "drive",
  "extend",
  "engineer",
  "revolutionize",
  "generate",
  "exploit",
  "transition",
  "e-enable",
  "iterate",
  "cultivate",
  "matrix",
  "productize",
  "redefine",
  "recontextualize"
];

},{}],127:[function(require,module,exports){
module["exports"] = [
  "24 hour",
  "24/7",
  "3rd generation",
  "4th generation",
  "5th generation",
  "6th generation",
  "actuating",
  "analyzing",
  "asymmetric",
  "asynchronous",
  "attitude-oriented",
  "background",
  "bandwidth-monitored",
  "bi-directional",
  "bifurcated",
  "bottom-line",
  "clear-thinking",
  "client-driven",
  "client-server",
  "coherent",
  "cohesive",
  "composite",
  "context-sensitive",
  "contextually-based",
  "content-based",
  "dedicated",
  "demand-driven",
  "didactic",
  "directional",
  "discrete",
  "disintermediate",
  "dynamic",
  "eco-centric",
  "empowering",
  "encompassing",
  "even-keeled",
  "executive",
  "explicit",
  "exuding",
  "fault-tolerant",
  "foreground",
  "fresh-thinking",
  "full-range",
  "global",
  "grid-enabled",
  "heuristic",
  "high-level",
  "holistic",
  "homogeneous",
  "human-resource",
  "hybrid",
  "impactful",
  "incremental",
  "intangible",
  "interactive",
  "intermediate",
  "leading edge",
  "local",
  "logistical",
  "maximized",
  "methodical",
  "mission-critical",
  "mobile",
  "modular",
  "motivating",
  "multimedia",
  "multi-state",
  "multi-tasking",
  "national",
  "needs-based",
  "neutral",
  "next generation",
  "non-volatile",
  "object-oriented",
  "optimal",
  "optimizing",
  "radical",
  "real-time",
  "reciprocal",
  "regional",
  "responsive",
  "scalable",
  "secondary",
  "solution-oriented",
  "stable",
  "static",
  "systematic",
  "systemic",
  "system-worthy",
  "tangible",
  "tertiary",
  "transitional",
  "uniform",
  "upward-trending",
  "user-facing",
  "value-added",
  "web-enabled",
  "well-modulated",
  "zero administration",
  "zero defect",
  "zero tolerance"
];

},{}],128:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjective = require("./adjective");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_adjective = require("./bs_adjective");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./adjective":123,"./bs_adjective":124,"./bs_noun":125,"./bs_verb":126,"./descriptor":127,"./name":129,"./noun":130,"./suffix":131}],129:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
];

},{}],130:[function(require,module,exports){
module["exports"] = [
  "ability",
  "access",
  "adapter",
  "algorithm",
  "alliance",
  "analyzer",
  "application",
  "approach",
  "architecture",
  "archive",
  "artificial intelligence",
  "array",
  "attitude",
  "benchmark",
  "budgetary management",
  "capability",
  "capacity",
  "challenge",
  "circuit",
  "collaboration",
  "complexity",
  "concept",
  "conglomeration",
  "contingency",
  "core",
  "customer loyalty",
  "database",
  "data-warehouse",
  "definition",
  "emulation",
  "encoding",
  "encryption",
  "extranet",
  "firmware",
  "flexibility",
  "focus group",
  "forecast",
  "frame",
  "framework",
  "function",
  "functionalities",
  "Graphic Interface",
  "groupware",
  "Graphical User Interface",
  "hardware",
  "help-desk",
  "hierarchy",
  "hub",
  "implementation",
  "info-mediaries",
  "infrastructure",
  "initiative",
  "installation",
  "instruction set",
  "interface",
  "internet solution",
  "intranet",
  "knowledge user",
  "knowledge base",
  "local area network",
  "leverage",
  "matrices",
  "matrix",
  "methodology",
  "middleware",
  "migration",
  "model",
  "moderator",
  "monitoring",
  "moratorium",
  "neural-net",
  "open architecture",
  "open system",
  "orchestration",
  "paradigm",
  "parallelism",
  "policy",
  "portal",
  "pricing structure",
  "process improvement",
  "product",
  "productivity",
  "project",
  "projection",
  "protocol",
  "secured line",
  "service-desk",
  "software",
  "solution",
  "standardization",
  "strategy",
  "structure",
  "success",
  "superstructure",
  "support",
  "synergy",
  "system engine",
  "task-force",
  "throughput",
  "time-frame",
  "toolset",
  "utilisation",
  "website",
  "workforce"
];

},{}],131:[function(require,module,exports){
module["exports"] = [
  "Inc",
  "and Sons",
  "LLC",
  "Group"
];

},{}],132:[function(require,module,exports){
module["exports"] = [
  "/34##-######-####L/",
  "/37##-######-####L/"
];

},{}],133:[function(require,module,exports){
module["exports"] = [
  "/30[0-5]#-######-###L/",
  "/368#-######-###L/"
];

},{}],134:[function(require,module,exports){
module["exports"] = [
  "/6011-####-####-###L/",
  "/65##-####-####-###L/",
  "/64[4-9]#-####-####-###L/",
  "/6011-62##-####-####-###L/",
  "/65##-62##-####-####-###L/",
  "/64[4-9]#-62##-####-####-###L/"
];

},{}],135:[function(require,module,exports){
var credit_card = {};
module['exports'] = credit_card;
credit_card.visa = require("./visa");
credit_card.mastercard = require("./mastercard");
credit_card.discover = require("./discover");
credit_card.american_express = require("./american_express");
credit_card.diners_club = require("./diners_club");
credit_card.jcb = require("./jcb");
credit_card.switch = require("./switch");
credit_card.solo = require("./solo");
credit_card.maestro = require("./maestro");
credit_card.laser = require("./laser");

},{"./american_express":132,"./diners_club":133,"./discover":134,"./jcb":136,"./laser":137,"./maestro":138,"./mastercard":139,"./solo":140,"./switch":141,"./visa":142}],136:[function(require,module,exports){
module["exports"] = [
  "/3528-####-####-###L/",
  "/3529-####-####-###L/",
  "/35[3-8]#-####-####-###L/"
];

},{}],137:[function(require,module,exports){
module["exports"] = [
  "/6304###########L/",
  "/6706###########L/",
  "/6771###########L/",
  "/6709###########L/",
  "/6304#########{5,6}L/",
  "/6706#########{5,6}L/",
  "/6771#########{5,6}L/",
  "/6709#########{5,6}L/"
];

},{}],138:[function(require,module,exports){
module["exports"] = [
  "/50#{9,16}L/",
  "/5[6-8]#{9,16}L/",
  "/56##{9,16}L/"
];

},{}],139:[function(require,module,exports){
module["exports"] = [
  "/5[1-5]##-####-####-###L/",
  "/6771-89##-####-###L/"
];

},{}],140:[function(require,module,exports){
module["exports"] = [
  "/6767-####-####-###L/",
  "/6767-####-####-####-#L/",
  "/6767-####-####-####-##L/"
];

},{}],141:[function(require,module,exports){
module["exports"] = [
  "/6759-####-####-###L/",
  "/6759-####-####-####-#L/",
  "/6759-####-####-####-##L/"
];

},{}],142:[function(require,module,exports){
module["exports"] = [
  "/4###########L/",
  "/4###-####-####-###L/"
];

},{}],143:[function(require,module,exports){
module["exports"] = [
  "Checking",
  "Savings",
  "Money Market",
  "Investment",
  "Home Loan",
  "Credit Card",
  "Auto Loan",
  "Personal Loan"
];

},{}],144:[function(require,module,exports){
module["exports"] = {
  "UAE Dirham": {
    "code": "AED",
    "symbol": ""
  },
  "Afghani": {
    "code": "AFN",
    "symbol": "؋"
  },
  "Lek": {
    "code": "ALL",
    "symbol": "Lek"
  },
  "Armenian Dram": {
    "code": "AMD",
    "symbol": ""
  },
  "Netherlands Antillian Guilder": {
    "code": "ANG",
    "symbol": "ƒ"
  },
  "Kwanza": {
    "code": "AOA",
    "symbol": ""
  },
  "Argentine Peso": {
    "code": "ARS",
    "symbol": "$"
  },
  "Australian Dollar": {
    "code": "AUD",
    "symbol": "$"
  },
  "Aruban Guilder": {
    "code": "AWG",
    "symbol": "ƒ"
  },
  "Azerbaijanian Manat": {
    "code": "AZN",
    "symbol": "ман"
  },
  "Convertible Marks": {
    "code": "BAM",
    "symbol": "KM"
  },
  "Barbados Dollar": {
    "code": "BBD",
    "symbol": "$"
  },
  "Taka": {
    "code": "BDT",
    "symbol": ""
  },
  "Bulgarian Lev": {
    "code": "BGN",
    "symbol": "лв"
  },
  "Bahraini Dinar": {
    "code": "BHD",
    "symbol": ""
  },
  "Burundi Franc": {
    "code": "BIF",
    "symbol": ""
  },
  "Bermudian Dollar (customarily known as Bermuda Dollar)": {
    "code": "BMD",
    "symbol": "$"
  },
  "Brunei Dollar": {
    "code": "BND",
    "symbol": "$"
  },
  "Boliviano Mvdol": {
    "code": "BOB BOV",
    "symbol": "$b"
  },
  "Brazilian Real": {
    "code": "BRL",
    "symbol": "R$"
  },
  "Bahamian Dollar": {
    "code": "BSD",
    "symbol": "$"
  },
  "Pula": {
    "code": "BWP",
    "symbol": "P"
  },
  "Belarussian Ruble": {
    "code": "BYR",
    "symbol": "p."
  },
  "Belize Dollar": {
    "code": "BZD",
    "symbol": "BZ$"
  },
  "Canadian Dollar": {
    "code": "CAD",
    "symbol": "$"
  },
  "Congolese Franc": {
    "code": "CDF",
    "symbol": ""
  },
  "Swiss Franc": {
    "code": "CHF",
    "symbol": "CHF"
  },
  "Chilean Peso Unidades de fomento": {
    "code": "CLP CLF",
    "symbol": "$"
  },
  "Yuan Renminbi": {
    "code": "CNY",
    "symbol": "¥"
  },
  "Colombian Peso Unidad de Valor Real": {
    "code": "COP COU",
    "symbol": "$"
  },
  "Costa Rican Colon": {
    "code": "CRC",
    "symbol": "₡"
  },
  "Cuban Peso Peso Convertible": {
    "code": "CUP CUC",
    "symbol": "₱"
  },
  "Cape Verde Escudo": {
    "code": "CVE",
    "symbol": ""
  },
  "Czech Koruna": {
    "code": "CZK",
    "symbol": "Kč"
  },
  "Djibouti Franc": {
    "code": "DJF",
    "symbol": ""
  },
  "Danish Krone": {
    "code": "DKK",
    "symbol": "kr"
  },
  "Dominican Peso": {
    "code": "DOP",
    "symbol": "RD$"
  },
  "Algerian Dinar": {
    "code": "DZD",
    "symbol": ""
  },
  "Kroon": {
    "code": "EEK",
    "symbol": ""
  },
  "Egyptian Pound": {
    "code": "EGP",
    "symbol": "£"
  },
  "Nakfa": {
    "code": "ERN",
    "symbol": ""
  },
  "Ethiopian Birr": {
    "code": "ETB",
    "symbol": ""
  },
  "Euro": {
    "code": "EUR",
    "symbol": "€"
  },
  "Fiji Dollar": {
    "code": "FJD",
    "symbol": "$"
  },
  "Falkland Islands Pound": {
    "code": "FKP",
    "symbol": "£"
  },
  "Pound Sterling": {
    "code": "GBP",
    "symbol": "£"
  },
  "Lari": {
    "code": "GEL",
    "symbol": ""
  },
  "Cedi": {
    "code": "GHS",
    "symbol": ""
  },
  "Gibraltar Pound": {
    "code": "GIP",
    "symbol": "£"
  },
  "Dalasi": {
    "code": "GMD",
    "symbol": ""
  },
  "Guinea Franc": {
    "code": "GNF",
    "symbol": ""
  },
  "Quetzal": {
    "code": "GTQ",
    "symbol": "Q"
  },
  "Guyana Dollar": {
    "code": "GYD",
    "symbol": "$"
  },
  "Hong Kong Dollar": {
    "code": "HKD",
    "symbol": "$"
  },
  "Lempira": {
    "code": "HNL",
    "symbol": "L"
  },
  "Croatian Kuna": {
    "code": "HRK",
    "symbol": "kn"
  },
  "Gourde US Dollar": {
    "code": "HTG USD",
    "symbol": ""
  },
  "Forint": {
    "code": "HUF",
    "symbol": "Ft"
  },
  "Rupiah": {
    "code": "IDR",
    "symbol": "Rp"
  },
  "New Israeli Sheqel": {
    "code": "ILS",
    "symbol": "₪"
  },
  "Indian Rupee": {
    "code": "INR",
    "symbol": ""
  },
  "Indian Rupee Ngultrum": {
    "code": "INR BTN",
    "symbol": ""
  },
  "Iraqi Dinar": {
    "code": "IQD",
    "symbol": ""
  },
  "Iranian Rial": {
    "code": "IRR",
    "symbol": "﷼"
  },
  "Iceland Krona": {
    "code": "ISK",
    "symbol": "kr"
  },
  "Jamaican Dollar": {
    "code": "JMD",
    "symbol": "J$"
  },
  "Jordanian Dinar": {
    "code": "JOD",
    "symbol": ""
  },
  "Yen": {
    "code": "JPY",
    "symbol": "¥"
  },
  "Kenyan Shilling": {
    "code": "KES",
    "symbol": ""
  },
  "Som": {
    "code": "KGS",
    "symbol": "лв"
  },
  "Riel": {
    "code": "KHR",
    "symbol": "៛"
  },
  "Comoro Franc": {
    "code": "KMF",
    "symbol": ""
  },
  "North Korean Won": {
    "code": "KPW",
    "symbol": "₩"
  },
  "Won": {
    "code": "KRW",
    "symbol": "₩"
  },
  "Kuwaiti Dinar": {
    "code": "KWD",
    "symbol": ""
  },
  "Cayman Islands Dollar": {
    "code": "KYD",
    "symbol": "$"
  },
  "Tenge": {
    "code": "KZT",
    "symbol": "лв"
  },
  "Kip": {
    "code": "LAK",
    "symbol": "₭"
  },
  "Lebanese Pound": {
    "code": "LBP",
    "symbol": "£"
  },
  "Sri Lanka Rupee": {
    "code": "LKR",
    "symbol": "₨"
  },
  "Liberian Dollar": {
    "code": "LRD",
    "symbol": "$"
  },
  "Lithuanian Litas": {
    "code": "LTL",
    "symbol": "Lt"
  },
  "Latvian Lats": {
    "code": "LVL",
    "symbol": "Ls"
  },
  "Libyan Dinar": {
    "code": "LYD",
    "symbol": ""
  },
  "Moroccan Dirham": {
    "code": "MAD",
    "symbol": ""
  },
  "Moldovan Leu": {
    "code": "MDL",
    "symbol": ""
  },
  "Malagasy Ariary": {
    "code": "MGA",
    "symbol": ""
  },
  "Denar": {
    "code": "MKD",
    "symbol": "ден"
  },
  "Kyat": {
    "code": "MMK",
    "symbol": ""
  },
  "Tugrik": {
    "code": "MNT",
    "symbol": "₮"
  },
  "Pataca": {
    "code": "MOP",
    "symbol": ""
  },
  "Ouguiya": {
    "code": "MRO",
    "symbol": ""
  },
  "Mauritius Rupee": {
    "code": "MUR",
    "symbol": "₨"
  },
  "Rufiyaa": {
    "code": "MVR",
    "symbol": ""
  },
  "Kwacha": {
    "code": "MWK",
    "symbol": ""
  },
  "Mexican Peso Mexican Unidad de Inversion (UDI)": {
    "code": "MXN MXV",
    "symbol": "$"
  },
  "Malaysian Ringgit": {
    "code": "MYR",
    "symbol": "RM"
  },
  "Metical": {
    "code": "MZN",
    "symbol": "MT"
  },
  "Naira": {
    "code": "NGN",
    "symbol": "₦"
  },
  "Cordoba Oro": {
    "code": "NIO",
    "symbol": "C$"
  },
  "Norwegian Krone": {
    "code": "NOK",
    "symbol": "kr"
  },
  "Nepalese Rupee": {
    "code": "NPR",
    "symbol": "₨"
  },
  "New Zealand Dollar": {
    "code": "NZD",
    "symbol": "$"
  },
  "Rial Omani": {
    "code": "OMR",
    "symbol": "﷼"
  },
  "Balboa US Dollar": {
    "code": "PAB USD",
    "symbol": "B/."
  },
  "Nuevo Sol": {
    "code": "PEN",
    "symbol": "S/."
  },
  "Kina": {
    "code": "PGK",
    "symbol": ""
  },
  "Philippine Peso": {
    "code": "PHP",
    "symbol": "Php"
  },
  "Pakistan Rupee": {
    "code": "PKR",
    "symbol": "₨"
  },
  "Zloty": {
    "code": "PLN",
    "symbol": "zł"
  },
  "Guarani": {
    "code": "PYG",
    "symbol": "Gs"
  },
  "Qatari Rial": {
    "code": "QAR",
    "symbol": "﷼"
  },
  "New Leu": {
    "code": "RON",
    "symbol": "lei"
  },
  "Serbian Dinar": {
    "code": "RSD",
    "symbol": "Дин."
  },
  "Russian Ruble": {
    "code": "RUB",
    "symbol": "руб"
  },
  "Rwanda Franc": {
    "code": "RWF",
    "symbol": ""
  },
  "Saudi Riyal": {
    "code": "SAR",
    "symbol": "﷼"
  },
  "Solomon Islands Dollar": {
    "code": "SBD",
    "symbol": "$"
  },
  "Seychelles Rupee": {
    "code": "SCR",
    "symbol": "₨"
  },
  "Sudanese Pound": {
    "code": "SDG",
    "symbol": ""
  },
  "Swedish Krona": {
    "code": "SEK",
    "symbol": "kr"
  },
  "Singapore Dollar": {
    "code": "SGD",
    "symbol": "$"
  },
  "Saint Helena Pound": {
    "code": "SHP",
    "symbol": "£"
  },
  "Leone": {
    "code": "SLL",
    "symbol": ""
  },
  "Somali Shilling": {
    "code": "SOS",
    "symbol": "S"
  },
  "Surinam Dollar": {
    "code": "SRD",
    "symbol": "$"
  },
  "Dobra": {
    "code": "STD",
    "symbol": ""
  },
  "El Salvador Colon US Dollar": {
    "code": "SVC USD",
    "symbol": "$"
  },
  "Syrian Pound": {
    "code": "SYP",
    "symbol": "£"
  },
  "Lilangeni": {
    "code": "SZL",
    "symbol": ""
  },
  "Baht": {
    "code": "THB",
    "symbol": "฿"
  },
  "Somoni": {
    "code": "TJS",
    "symbol": ""
  },
  "Manat": {
    "code": "TMT",
    "symbol": ""
  },
  "Tunisian Dinar": {
    "code": "TND",
    "symbol": ""
  },
  "Pa'anga": {
    "code": "TOP",
    "symbol": ""
  },
  "Turkish Lira": {
    "code": "TRY",
    "symbol": "TL"
  },
  "Trinidad and Tobago Dollar": {
    "code": "TTD",
    "symbol": "TT$"
  },
  "New Taiwan Dollar": {
    "code": "TWD",
    "symbol": "NT$"
  },
  "Tanzanian Shilling": {
    "code": "TZS",
    "symbol": ""
  },
  "Hryvnia": {
    "code": "UAH",
    "symbol": "₴"
  },
  "Uganda Shilling": {
    "code": "UGX",
    "symbol": ""
  },
  "US Dollar": {
    "code": "USD",
    "symbol": "$"
  },
  "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
    "code": "UYU UYI",
    "symbol": "$U"
  },
  "Uzbekistan Sum": {
    "code": "UZS",
    "symbol": "лв"
  },
  "Bolivar Fuerte": {
    "code": "VEF",
    "symbol": "Bs"
  },
  "Dong": {
    "code": "VND",
    "symbol": "₫"
  },
  "Vatu": {
    "code": "VUV",
    "symbol": ""
  },
  "Tala": {
    "code": "WST",
    "symbol": ""
  },
  "CFA Franc BEAC": {
    "code": "XAF",
    "symbol": ""
  },
  "Silver": {
    "code": "XAG",
    "symbol": ""
  },
  "Gold": {
    "code": "XAU",
    "symbol": ""
  },
  "Bond Markets Units European Composite Unit (EURCO)": {
    "code": "XBA",
    "symbol": ""
  },
  "European Monetary Unit (E.M.U.-6)": {
    "code": "XBB",
    "symbol": ""
  },
  "European Unit of Account 9(E.U.A.-9)": {
    "code": "XBC",
    "symbol": ""
  },
  "European Unit of Account 17(E.U.A.-17)": {
    "code": "XBD",
    "symbol": ""
  },
  "East Caribbean Dollar": {
    "code": "XCD",
    "symbol": "$"
  },
  "SDR": {
    "code": "XDR",
    "symbol": ""
  },
  "UIC-Franc": {
    "code": "XFU",
    "symbol": ""
  },
  "CFA Franc BCEAO": {
    "code": "XOF",
    "symbol": ""
  },
  "Palladium": {
    "code": "XPD",
    "symbol": ""
  },
  "CFP Franc": {
    "code": "XPF",
    "symbol": ""
  },
  "Platinum": {
    "code": "XPT",
    "symbol": ""
  },
  "Codes specifically reserved for testing purposes": {
    "code": "XTS",
    "symbol": ""
  },
  "Yemeni Rial": {
    "code": "YER",
    "symbol": "﷼"
  },
  "Rand": {
    "code": "ZAR",
    "symbol": "R"
  },
  "Rand Loti": {
    "code": "ZAR LSL",
    "symbol": ""
  },
  "Rand Namibia Dollar": {
    "code": "ZAR NAD",
    "symbol": ""
  },
  "Zambian Kwacha": {
    "code": "ZMK",
    "symbol": ""
  },
  "Zimbabwe Dollar": {
    "code": "ZWL",
    "symbol": ""
  }
};

},{}],145:[function(require,module,exports){
var finance = {};
module['exports'] = finance;
finance.account_type = require("./account_type");
finance.transaction_type = require("./transaction_type");
finance.currency = require("./currency");

},{"./account_type":143,"./currency":144,"./transaction_type":146}],146:[function(require,module,exports){
module["exports"] = [
  "deposit",
  "withdrawal",
  "payment",
  "invoice"
];

},{}],147:[function(require,module,exports){
module["exports"] = [
  "TCP",
  "HTTP",
  "SDD",
  "RAM",
  "GB",
  "CSS",
  "SSL",
  "AGP",
  "SQL",
  "FTP",
  "PCI",
  "AI",
  "ADP",
  "RSS",
  "XML",
  "EXE",
  "COM",
  "HDD",
  "THX",
  "SMTP",
  "SMS",
  "USB",
  "PNG",
  "SAS",
  "IB",
  "SCSI",
  "JSON",
  "XSS",
  "JBOD"
];

},{}],148:[function(require,module,exports){
module["exports"] = [
  "auxiliary",
  "primary",
  "back-end",
  "digital",
  "open-source",
  "virtual",
  "cross-platform",
  "redundant",
  "online",
  "haptic",
  "multi-byte",
  "bluetooth",
  "wireless",
  "1080p",
  "neural",
  "optical",
  "solid state",
  "mobile"
];

},{}],149:[function(require,module,exports){
var hacker = {};
module['exports'] = hacker;
hacker.abbreviation = require("./abbreviation");
hacker.adjective = require("./adjective");
hacker.noun = require("./noun");
hacker.verb = require("./verb");
hacker.ingverb = require("./ingverb");

},{"./abbreviation":147,"./adjective":148,"./ingverb":150,"./noun":151,"./verb":152}],150:[function(require,module,exports){
module["exports"] = [
  "backing up",
  "bypassing",
  "hacking",
  "overriding",
  "compressing",
  "copying",
  "navigating",
  "indexing",
  "connecting",
  "generating",
  "quantifying",
  "calculating",
  "synthesizing",
  "transmitting",
  "programming",
  "parsing"
];

},{}],151:[function(require,module,exports){
module["exports"] = [
  "driver",
  "protocol",
  "bandwidth",
  "panel",
  "microchip",
  "program",
  "port",
  "card",
  "array",
  "interface",
  "system",
  "sensor",
  "firewall",
  "hard drive",
  "pixel",
  "alarm",
  "feed",
  "monitor",
  "application",
  "transmitter",
  "bus",
  "circuit",
  "capacitor",
  "matrix"
];

},{}],152:[function(require,module,exports){
module["exports"] = [
  "back up",
  "bypass",
  "hack",
  "override",
  "compress",
  "copy",
  "navigate",
  "index",
  "connect",
  "generate",
  "quantify",
  "calculate",
  "synthesize",
  "input",
  "transmit",
  "program",
  "reboot",
  "parse"
];

},{}],153:[function(require,module,exports){
var en = {};
module['exports'] = en;
en.title = "English";
en.separator = " & ";
en.address = require("./address");
en.credit_card = require("./credit_card");
en.company = require("./company");
en.internet = require("./internet");
en.lorem = require("./lorem");
en.name = require("./name");
en.phone_number = require("./phone_number");
en.cell_phone = require("./cell_phone");
en.business = require("./business");
en.commerce = require("./commerce");
en.team = require("./team");
en.hacker = require("./hacker");
en.app = require("./app");
en.finance = require("./finance");

},{"./address":99,"./app":110,"./business":116,"./cell_phone":118,"./commerce":121,"./company":128,"./credit_card":135,"./finance":145,"./hacker":149,"./internet":157,"./lorem":158,"./name":162,"./phone_number":169,"./team":171}],154:[function(require,module,exports){
module["exports"] = [
  "https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mahdif/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sprayaga/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Skyhartman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/moscoz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kurafire/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/91bilal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/malykhinv/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joelhelin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kushsolitary/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyweb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/snowshade/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/areus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/holdenweb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/heyimjuani/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/envex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/collegeman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/peejfancher/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andyisonline/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ultragex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/flame_kaizar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetsulek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jayrobinson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victorerixon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alagoon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mizko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshaustin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/langate/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anaami/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/timmillwood/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nachtmeister/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abdullindenis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_victa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/commadelimited/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aaroni/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eduardostuart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nandini_m/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tgerken/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chanpory/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/g3d/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/horaciobella/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/teeragit/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ssiskind/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/HenryHoffman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/curiousoffice/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nickfratter/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyhaggard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pmeissner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thinmatt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/IsaryAmairani/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andychipster/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/boxmodel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/renbyrd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thiagovernetti/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/garand/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dhooyenga/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/randomlies/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/falvarad/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/souuf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/orkuncaylar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yigitpinarbasi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nbirckel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sdidonato/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baluli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmadajmi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vovkasolovev/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/samgrover/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/derienzo777/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jonathansimmons/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nelsonjoyce/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/S0ufi4n3/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xtopherpaul/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oaktreemedia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nateschulte/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/findingjenny/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/namankreative/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/antonyzotov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/we_social/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leehambley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/solid_color/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abelcabans/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mbilderbach/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kkusaa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jordyvdboom/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosgavina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pechkinator/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vc27/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rdbannon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/croakx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kerihenare/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/catadeleon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gcmorley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/duivvv/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/saschadroste/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victorDubugras/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wintopia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mattbilotti/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/taylorling/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/megdraws/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/meln1ks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mahmoudmetwally/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/derekebradley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/happypeter1983/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/travis_arnold/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/artem_kostenko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adobi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/daykiine/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alek_djuric/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scips/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/miguelmendes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrhee/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alsobrooks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mcflydesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/santi_urso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/allfordesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stayuber/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bertboerland/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marosholly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adamnac/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cynthiasavard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/muringa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hiemil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jackiesaik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zacsnider/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iduuck/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/antjanus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aroon_sharma/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dshster/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thehacker/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelbrooksjr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryanmclaughlin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/clubb3rry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/taybenlor/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xripunov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/myastro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adityasutomo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/digitalmaverick/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hjartstrorn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/itolmach/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vaughanmoffitt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abdots/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/isnifer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sergeysafonov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scrapdnb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chrismj83/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vitorleal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sokaniwaal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zaki3d/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/illyzoren/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mocabyte/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/osmanince/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/djsherman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidhemphill/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/waghner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/necodymiconer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/praveen_vijaya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fabbrucci/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cliffseal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/travishines/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kuldarkalvik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Elt_n/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/phillapier/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/okseanjay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kudretkeskin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anjhero/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scott_riley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/noufalibrahim/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/borges_marcos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/devinhalladay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stefooo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mikebeecham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tonymillion/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshuaraichur/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/petrangr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dmitriychuta/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/charliegann/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arashmanteghi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ainsleywagon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlyson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dutchnadia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/teddyzetterlund/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/samuelkraft/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aoimedia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/toddrew/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/codepoet_ru/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/artvavs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jomarmen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kolmarlopez/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/creartinc/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/homka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gaborenton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robinclediere/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maximsorokin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/plasticine/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/j2deme/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/peachananr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kapaluccio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/de_ascanio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rikas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dawidwu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/angelcreative/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rpatey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/popey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rehatkathuria/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/the_purplebunny/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/1markiz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ajaxy_ru/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brenmurrell/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dudestein/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oskarlevinson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victorstuber/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nehfy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vicivadeline/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leandrovaranda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scottgallant/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victor_haydin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sawrb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryhanhassan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/amayvs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/a_brixen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karolkrakowiak_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/geran7/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cggaurav/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chris_witko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lososina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mattlat/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonburke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/constantx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/teylorfeliz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/craigelimeliah/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rachelreveley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/reabo101/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rahmeen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rickyyean/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/j04ntoh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/spbroma/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sebashton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/francis_vega/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oktayelipek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kikillo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fabbianz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/larrygerard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BroumiYoussef/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/0therplanet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mbilalsiddique1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ionuss/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/grrr_nl/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/liminha/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rawdiggie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryandownie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pixage/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arpitnj/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/switmer777/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/josevnclch/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kanickairaj/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/puzik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tbakdesigns/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/besbujupi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/supjoey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lowie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/linkibol/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/balintorosz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/imcoding/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/agustincruiz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gusoto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thomasschrijer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/superoutman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kalmerrautam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielizalo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gojeanyn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_vojto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/laurengray/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jydesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mymyboy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nellleo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marciotoledo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ninjad3m0/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/to_soham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hasslunsford/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/muridrahhal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/levisan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/grahamkennery/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lepetitogre/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/antongenkin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nessoila/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/amandabuzard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/safrankov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cocolero/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dss49/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/matt3224/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bluesix/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/quailandquasar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/AlbertoCococi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lepinski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sementiy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mhudobivnik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thibaut_re/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/olgary/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shojberg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mtolokonnikov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bereto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/naupintos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wegotvices/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/macxim/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rodnylobos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madcampos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madebyvadim/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bartoszdawydzik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/supervova/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/markretzloff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vonachoo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/darylws/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stevedesigner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mylesb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/herbigt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/depaulawagner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/geshan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gizmeedevil1991/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_scottburgess/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lisovsky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidsasda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/artd_sign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/YoungCutlass/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mgonto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victorquinn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/osmond/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oksanafrewer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamkeithmason/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nitinhayaran/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lmjabreu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mandalareopens/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thinkleft/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ponchomendivil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/juamperro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brunodesign1206/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/caseycavanagh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/luxe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dotgridline/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/spedwig/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mattsapii/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/helderleal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisstumph/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jayphen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nsamoylov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisvanderkooi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/justme_timothyg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/otozk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/prinzadi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gu5taf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cyril_gaillard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/d_kobelyatsky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/daniloc/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nwdsha/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/romanbulah/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/skkirilov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dvdwinden/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dannol/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thekevinjones/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/timgthomas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/buddhasource/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/uxpiper/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thatonetommy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/diansigitp/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adrienths/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/klimmka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gkaam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/derekcramer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jennyyo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nerrsoft/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xalionmalik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/edhenderson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/keyuri85/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/roxanejammet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kimcool/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/edkf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/matkins/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alessandroribe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jacksonlatka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lebronjennan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kostaspt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/moynihan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danpliego/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/saulihirvi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wesleytrankin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fjaguero/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bowbrick/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mashaaaaal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yassiryahya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dparrelli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fotomagin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aka_james/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/denisepires/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iqbalperkasa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/martinansty/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jarsen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrob/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielrosser/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/malgordon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlfairclough/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelabehsera/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pierrestoffe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/enjoythetau/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/loganjlambert/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rpeezy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyginnivan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michalhron/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/msveet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lingeswaran/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kolsvein/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/peter576/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/reideiredale/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joeymurdah/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/raphaelnikson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mvdheuvel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maxlinderman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jimmuirhead/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/begreative/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/frankiefreesbie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robturlinckx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Talbi_ConSept/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/longlivemyword/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vanchesz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maiklam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hermanobrother/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rez___a/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gregsqueeb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/greenbes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_ragzor/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anthonysukow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fluidbrush/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dactrtr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jehnglynn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bergmartin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hugocornejo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_kkga/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dzantievm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sawalazar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sovesove/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jonsgotwood/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/byryan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vytautas_a/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mizhgan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cicerobr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nilshelmersson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/d33pthought/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davecraige/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nckjrvs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alexandermayes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jcubic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/craigrcoles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rob_thomas10/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cofla/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maikelk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rtgibbons/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/russell_baylis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mhesslow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/codysanfilippo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/webtanya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madebybrenton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/perfectflow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jjsiii/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/saarabpreet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kumarrajan12123/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamsteffen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/themikenagle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ceekaytweet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/larrybolt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/conspirator/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dallasbpeters/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/n3dmax/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/terpimost/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kirillz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/byrnecore/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/j_drake_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/calebjoyce/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/russoedu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hoangloi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tobysaxon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gofrasdesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dimaposnyy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tjisousa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/billyroshan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oskamaya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/motionthinks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/knilob/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ashocka18/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marrimo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bartjo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/omnizya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ernestsemerda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andreas_pr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/edgarchris99/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thomasgeisen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gseguin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joannefournier/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/demersdesigns/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adammarsbar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nasirwd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/n_tassone/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/javorszky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yecidsm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicollerich/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/canapud/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicoleglynn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/judzhin_miles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/designervzm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kianoshp/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/evandrix/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alterchuca/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dhrubo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ma_tiax/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ssbb_me/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dorphern/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mauriolg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bruno_mart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mactopus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/the_winslet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joemdesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Shriiiiimp/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jacobbennett/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nfedoroff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamglimy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/allagringaus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aiiaiiaii/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/olaolusoga/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/buryaknick/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicklacke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/a1chapone/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/steynviljoen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/strikewan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryankirkman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewabogado/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/doooon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jagan123/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ariffsetiawan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elenadissi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mwarkentin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thierrymeier_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/r_garcia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dmackerman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/borantula/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/konus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/spacewood_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryuchi311/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/evanshajed/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tristanlegros/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shoaib253/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aislinnkelly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/okcoker/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/timpetricola/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sunshinedgirl/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chadami/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aleclarsoniv/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nomidesigns/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/petebernardo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/millinet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/imsoper/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/imammuht/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/benjamin_knight/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nepdud/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joki4/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lanceguyatt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bboy1895/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/amywebbb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rweve/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/haruintesettden/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ricburton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nelshd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/batsirai/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/primozcigler/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jffgrdnr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/8d3k/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/geneseleznev/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/al_li/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/souperphly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mslarkina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/2fockus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cdavis565/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xiel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/turkutuuli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/uxward/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lebinoclard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gauravjassal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidmerrique/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mdsisto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewofficer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kojourin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dnirmal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kevka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mr_shiznit/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aluisio_azevedo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cloudstudio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danvierich/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alexivanichkin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fran_mchamy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/perretmagali/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/betraydan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cadikkara/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/matbeedotcom/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyworboys/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bpartridge/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelkoper/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/silv3rgvn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alevizio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lawlbwoy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vitor376/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/desastrozo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thimo_cz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jasonmarkjones/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lhausermann/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xravil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/guischmitt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vigobronx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/panghal0/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/miguelkooreman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/surgeonist/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/christianoliff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/caspergrl/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamkarna/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ipavelek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/y2graphic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sterlingrules/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elbuscainfo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bennyjien/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stushona/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/estebanuribe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/embrcecreations/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danillos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elliotlewis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/charlesrpratt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vladyn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/emmeffess/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosblanco_eu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leonfedotov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rangafangs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chris_frees/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tgormtx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bryan_topham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jpscribbles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mighty55/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carbontwelve/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/isaacfifth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamjdeleon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/snowwrite/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/barputro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/drewbyreese/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bistrianiosip/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/magoo04/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pehamondello/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yayteejay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/a_harris88/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/algunsanabria/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zforrester/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ovall/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosjgsousa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/geobikas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ah_lice/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/looneydoodle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nerdgr8/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ddggccaa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zackeeler/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/normanbox/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/el_fuertisimo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ismail_biltagi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/juangomezw/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jnmnrd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/patrickcoombe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryanjohnson_me/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/markolschesky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeffgolenski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kvasnic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lindseyzilla/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gauchomatt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/afusinatto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kevinoh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/okansurreel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adamawesomeface/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/emileboudeling/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arishi_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/juanmamartinez/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wikiziner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danthms/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mkginfo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/terrorpixel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/curiousonaut/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/prheemo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcolenso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/foczzi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/martip07/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thaodang17/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johncafazza/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robinlayfield/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/franciscoamk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abdulhyeuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marklamb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/edobene/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andresenfredrik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mikaeljorhult/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisslowik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/meelford/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elliotnolten/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yehudab/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vijaykarthik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bfrohs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/josep_martins/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/attacks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sur4dye/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tumski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/instalox/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mangosango/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/paulfarino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kazaky999/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kiwiupover/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tom_even/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ratbus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/woodsman001/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshmedeski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thewillbeard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/psaikali/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joe_black/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aleinadsays/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marcusgorillius/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hota_v/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jghyllebert/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shinze/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/janpalounek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiespoken/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/her_ruu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dansowter/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/felipeapiress/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/magugzbrand2d/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/posterjob/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nathalie_fs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bobbytwoshoes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dreizle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremymouton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elisabethkjaer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/notbadart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mohanrohith/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jlsolerdeltoro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/itskawsar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/slowspock/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zvchkelly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wiljanslofstra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/craighenneberry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/trubeatto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/juaumlol/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/samscouto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BenouarradeM/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gipsy_raf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/netonet_il/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arkokoley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/itsajimithing/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/smalonso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victordeanda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/richardgarretts/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gregrwilkinson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anatolinicolae/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lu4sh1i/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stefanotirloni/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ostirbu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/darcystonge/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/naitanamoreno/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marcomano_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidcazalis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/falconerie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gregkilian/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bcrad/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bolzanmarco/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/low_res/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vlajki/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/petar_prog/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jonkspr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/akmalfikri/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mfacchinello/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/atanism/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/harry_sistalam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/murrayswift/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bobwassermann/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gavr1l0/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madshensel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mr_subtle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/deviljho_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/salimianoff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joetruesdell/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/twittypork/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/airskylar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dnezkumar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dgajjar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/salvafc/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/louis_currie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/deeenright/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cybind/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eyronn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vickyshits/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sweetdelisa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cboller1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andresdjasso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/melvindidit/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andysolomon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thaisselenator_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lvovenok/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/giuliusa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/belyaev_rs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/overcloacked/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kamal_chaneman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/incubo82/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hellofeverrrr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mhaligowski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sunlandictwin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bu7921/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andytlaw/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/finchjke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/manigm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/umurgdk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scottfeltham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ganserene/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mutu_krish/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jodytaggart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ntfblog/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tanveerrao/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hfalucas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alxleroydeval/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kucingbelang4/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/colgruv/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stalewine/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baumannzone/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/angelcolberg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sachingawas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jjshaw14/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ramanathan_pdy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johndezember/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nilshoenson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonmorreale/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nutzumi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonflatsoda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sergeyalmone/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/klefue/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kirangopal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baumann_alex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jay_wilburn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shesgared/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/apriendeau/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johnriordan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wake_gs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aleksitappura/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/emsgulam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xilantra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/imomenui/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sircalebgrove/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/newbrushes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hsinyo23/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/m4rio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/katiemdaly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/s4f1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ecommerceil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marlinjayakody/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/swooshycueb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sangdth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/coderdiaz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bluefx_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vivekprvr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sasha_shestakov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eugeneeweb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dgclegg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/n1ght_coder/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dixchen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/blakehawksworth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/trueblood_33/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hai_ninh_nguyen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marclgonzales/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yesmeck/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stephcoue/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/doronmalki/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ruehldesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anasnakawa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kijanmaharjan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wearesavas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stefvdham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tweetubhai/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alecarpentier/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fiterik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/antonyryndya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/d00maz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/missaaamy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/manekenthe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/reetajayendra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyshimko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrgraham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stefanozoffoli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/overra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mrebay007/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shvelo96/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pyronite/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thedjpetersen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rtyukmaev/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_williamguerra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/albertaugustin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vikashpathak18/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kevinjohndayy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vj_demien/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/colirpixoil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/goddardlewis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/laasli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jqiuss/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/heycamtaylor/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nastya_mane/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mastermindesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nyancecom/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sandywoodruff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bighanddesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sbtransparent/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aviddayentonbay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/richwild/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kaysix_dizzy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/seyedhossein1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/privetwagner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/emmandenn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dev_essentials/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jmfsocial/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_yardenoon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mateaodviteza/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/weavermedia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mufaddal_mw/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hafeeskhan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ashernatali/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sulaqo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eddiechen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/josecarlospsh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vm_f/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/enricocicconi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danmartin70/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gmourier/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/donjain/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mrxloka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_pedropinho/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eitarafa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ralph_lam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/panchajanyag/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/woodydotmx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jerrybai1907/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marshallchen_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chaabane_wail/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/akashsharma39/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/falling_soul/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sainraja/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mugukamil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johannesneu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/markwienands/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karthipanraj/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/balakayuriy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alan_zhang_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/layerssss/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kaspernordkvist/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mirfanqureshi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hanna_smi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/VMilescu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aeon56/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/m_kalibry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sreejithexp/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dicesales/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dhoot_amit/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/smenov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lonesomelemon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vladimirdevic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joelcipriano/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/haligaliharun/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/buleswapnil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/serefka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ifarafonow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vikasvinfotech/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/urrutimeoli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/areandacom/128.jpg"
];

},{}],155:[function(require,module,exports){
module["exports"] = [
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],156:[function(require,module,exports){
module.exports=require(36)
},{"/Users/a/dev/faker.js/lib/locales/de/internet/free_email.js":36}],157:[function(require,module,exports){
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");
internet.avatar_uri = require("./avatar_uri");

},{"./avatar_uri":154,"./domain_suffix":155,"./free_email":156}],158:[function(require,module,exports){
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./supplemental":159,"./words":160}],159:[function(require,module,exports){
module["exports"] = [
  "abbas",
  "abduco",
  "abeo",
  "abscido",
  "absconditus",
  "absens",
  "absorbeo",
  "absque",
  "abstergo",
  "absum",
  "abundans",
  "abutor",
  "accedo",
  "accendo",
  "acceptus",
  "accipio",
  "accommodo",
  "accusator",
  "acer",
  "acerbitas",
  "acervus",
  "acidus",
  "acies",
  "acquiro",
  "acsi",
  "adamo",
  "adaugeo",
  "addo",
  "adduco",
  "ademptio",
  "adeo",
  "adeptio",
  "adfectus",
  "adfero",
  "adficio",
  "adflicto",
  "adhaero",
  "adhuc",
  "adicio",
  "adimpleo",
  "adinventitias",
  "adipiscor",
  "adiuvo",
  "administratio",
  "admiratio",
  "admitto",
  "admoneo",
  "admoveo",
  "adnuo",
  "adopto",
  "adsidue",
  "adstringo",
  "adsuesco",
  "adsum",
  "adulatio",
  "adulescens",
  "adultus",
  "aduro",
  "advenio",
  "adversus",
  "advoco",
  "aedificium",
  "aeger",
  "aegre",
  "aegrotatio",
  "aegrus",
  "aeneus",
  "aequitas",
  "aequus",
  "aer",
  "aestas",
  "aestivus",
  "aestus",
  "aetas",
  "aeternus",
  "ager",
  "aggero",
  "aggredior",
  "agnitio",
  "agnosco",
  "ago",
  "ait",
  "aiunt",
  "alienus",
  "alii",
  "alioqui",
  "aliqua",
  "alius",
  "allatus",
  "alo",
  "alter",
  "altus",
  "alveus",
  "amaritudo",
  "ambitus",
  "ambulo",
  "amicitia",
  "amiculum",
  "amissio",
  "amita",
  "amitto",
  "amo",
  "amor",
  "amoveo",
  "amplexus",
  "amplitudo",
  "amplus",
  "ancilla",
  "angelus",
  "angulus",
  "angustus",
  "animadverto",
  "animi",
  "animus",
  "annus",
  "anser",
  "ante",
  "antea",
  "antepono",
  "antiquus",
  "aperio",
  "aperte",
  "apostolus",
  "apparatus",
  "appello",
  "appono",
  "appositus",
  "approbo",
  "apto",
  "aptus",
  "apud",
  "aqua",
  "ara",
  "aranea",
  "arbitro",
  "arbor",
  "arbustum",
  "arca",
  "arceo",
  "arcesso",
  "arcus",
  "argentum",
  "argumentum",
  "arguo",
  "arma",
  "armarium",
  "armo",
  "aro",
  "ars",
  "articulus",
  "artificiose",
  "arto",
  "arx",
  "ascisco",
  "ascit",
  "asper",
  "aspicio",
  "asporto",
  "assentator",
  "astrum",
  "atavus",
  "ater",
  "atqui",
  "atrocitas",
  "atrox",
  "attero",
  "attollo",
  "attonbitus",
  "auctor",
  "auctus",
  "audacia",
  "audax",
  "audentia",
  "audeo",
  "audio",
  "auditor",
  "aufero",
  "aureus",
  "auris",
  "aurum",
  "aut",
  "autem",
  "autus",
  "auxilium",
  "avaritia",
  "avarus",
  "aveho",
  "averto",
  "avoco",
  "baiulus",
  "balbus",
  "barba",
  "bardus",
  "basium",
  "beatus",
  "bellicus",
  "bellum",
  "bene",
  "beneficium",
  "benevolentia",
  "benigne",
  "bestia",
  "bibo",
  "bis",
  "blandior",
  "bonus",
  "bos",
  "brevis",
  "cado",
  "caecus",
  "caelestis",
  "caelum",
  "calamitas",
  "calcar",
  "calco",
  "calculus",
  "callide",
  "campana",
  "candidus",
  "canis",
  "canonicus",
  "canto",
  "capillus",
  "capio",
  "capitulus",
  "capto",
  "caput",
  "carbo",
  "carcer",
  "careo",
  "caries",
  "cariosus",
  "caritas",
  "carmen",
  "carpo",
  "carus",
  "casso",
  "caste",
  "casus",
  "catena",
  "caterva",
  "cattus",
  "cauda",
  "causa",
  "caute",
  "caveo",
  "cavus",
  "cedo",
  "celebrer",
  "celer",
  "celo",
  "cena",
  "cenaculum",
  "ceno",
  "censura",
  "centum",
  "cerno",
  "cernuus",
  "certe",
  "certo",
  "certus",
  "cervus",
  "cetera",
  "charisma",
  "chirographum",
  "cibo",
  "cibus",
  "cicuta",
  "cilicium",
  "cimentarius",
  "ciminatio",
  "cinis",
  "circumvenio",
  "cito",
  "civis",
  "civitas",
  "clam",
  "clamo",
  "claro",
  "clarus",
  "claudeo",
  "claustrum",
  "clementia",
  "clibanus",
  "coadunatio",
  "coaegresco",
  "coepi",
  "coerceo",
  "cogito",
  "cognatus",
  "cognomen",
  "cogo",
  "cohaero",
  "cohibeo",
  "cohors",
  "colligo",
  "colloco",
  "collum",
  "colo",
  "color",
  "coma",
  "combibo",
  "comburo",
  "comedo",
  "comes",
  "cometes",
  "comis",
  "comitatus",
  "commemoro",
  "comminor",
  "commodo",
  "communis",
  "comparo",
  "compello",
  "complectus",
  "compono",
  "comprehendo",
  "comptus",
  "conatus",
  "concedo",
  "concido",
  "conculco",
  "condico",
  "conduco",
  "confero",
  "confido",
  "conforto",
  "confugo",
  "congregatio",
  "conicio",
  "coniecto",
  "conitor",
  "coniuratio",
  "conor",
  "conqueror",
  "conscendo",
  "conservo",
  "considero",
  "conspergo",
  "constans",
  "consuasor",
  "contabesco",
  "contego",
  "contigo",
  "contra",
  "conturbo",
  "conventus",
  "convoco",
  "copia",
  "copiose",
  "cornu",
  "corona",
  "corpus",
  "correptius",
  "corrigo",
  "corroboro",
  "corrumpo",
  "coruscus",
  "cotidie",
  "crapula",
  "cras",
  "crastinus",
  "creator",
  "creber",
  "crebro",
  "credo",
  "creo",
  "creptio",
  "crepusculum",
  "cresco",
  "creta",
  "cribro",
  "crinis",
  "cruciamentum",
  "crudelis",
  "cruentus",
  "crur",
  "crustulum",
  "crux",
  "cubicularis",
  "cubitum",
  "cubo",
  "cui",
  "cuius",
  "culpa",
  "culpo",
  "cultellus",
  "cultura",
  "cum",
  "cunabula",
  "cunae",
  "cunctatio",
  "cupiditas",
  "cupio",
  "cuppedia",
  "cupressus",
  "cur",
  "cura",
  "curatio",
  "curia",
  "curiositas",
  "curis",
  "curo",
  "curriculum",
  "currus",
  "cursim",
  "curso",
  "cursus",
  "curto",
  "curtus",
  "curvo",
  "curvus",
  "custodia",
  "damnatio",
  "damno",
  "dapifer",
  "debeo",
  "debilito",
  "decens",
  "decerno",
  "decet",
  "decimus",
  "decipio",
  "decor",
  "decretum",
  "decumbo",
  "dedecor",
  "dedico",
  "deduco",
  "defaeco",
  "defendo",
  "defero",
  "defessus",
  "defetiscor",
  "deficio",
  "defigo",
  "defleo",
  "defluo",
  "defungo",
  "degenero",
  "degero",
  "degusto",
  "deinde",
  "delectatio",
  "delego",
  "deleo",
  "delibero",
  "delicate",
  "delinquo",
  "deludo",
  "demens",
  "demergo",
  "demitto",
  "demo",
  "demonstro",
  "demoror",
  "demulceo",
  "demum",
  "denego",
  "denique",
  "dens",
  "denuncio",
  "denuo",
  "deorsum",
  "depereo",
  "depono",
  "depopulo",
  "deporto",
  "depraedor",
  "deprecator",
  "deprimo",
  "depromo",
  "depulso",
  "deputo",
  "derelinquo",
  "derideo",
  "deripio",
  "desidero",
  "desino",
  "desipio",
  "desolo",
  "desparatus",
  "despecto",
  "despirmatio",
  "infit",
  "inflammatio",
  "paens",
  "patior",
  "patria",
  "patrocinor",
  "patruus",
  "pauci",
  "paulatim",
  "pauper",
  "pax",
  "peccatus",
  "pecco",
  "pecto",
  "pectus",
  "pecunia",
  "pecus",
  "peior",
  "pel",
  "ocer",
  "socius",
  "sodalitas",
  "sol",
  "soleo",
  "solio",
  "solitudo",
  "solium",
  "sollers",
  "sollicito",
  "solum",
  "solus",
  "solutio",
  "solvo",
  "somniculosus",
  "somnus",
  "sonitus",
  "sono",
  "sophismata",
  "sopor",
  "sordeo",
  "sortitus",
  "spargo",
  "speciosus",
  "spectaculum",
  "speculum",
  "sperno",
  "spero",
  "spes",
  "spiculum",
  "spiritus",
  "spoliatio",
  "sponte",
  "stabilis",
  "statim",
  "statua",
  "stella",
  "stillicidium",
  "stipes",
  "stips",
  "sto",
  "strenuus",
  "strues",
  "studio",
  "stultus",
  "suadeo",
  "suasoria",
  "sub",
  "subito",
  "subiungo",
  "sublime",
  "subnecto",
  "subseco",
  "substantia",
  "subvenio",
  "succedo",
  "succurro",
  "sufficio",
  "suffoco",
  "suffragium",
  "suggero",
  "sui",
  "sulum",
  "sum",
  "summa",
  "summisse",
  "summopere",
  "sumo",
  "sumptus",
  "supellex",
  "super",
  "suppellex",
  "supplanto",
  "suppono",
  "supra",
  "surculus",
  "surgo",
  "sursum",
  "suscipio",
  "suspendo",
  "sustineo",
  "suus",
  "synagoga",
  "tabella",
  "tabernus",
  "tabesco",
  "tabgo",
  "tabula",
  "taceo",
  "tactus",
  "taedium",
  "talio",
  "talis",
  "talus",
  "tam",
  "tamdiu",
  "tamen",
  "tametsi",
  "tamisium",
  "tamquam",
  "tandem",
  "tantillus",
  "tantum",
  "tardus",
  "tego",
  "temeritas",
  "temperantia",
  "templum",
  "temptatio",
  "tempus",
  "tenax",
  "tendo",
  "teneo",
  "tener",
  "tenuis",
  "tenus",
  "tepesco",
  "tepidus",
  "ter",
  "terebro",
  "teres",
  "terga",
  "tergeo",
  "tergiversatio",
  "tergo",
  "tergum",
  "termes",
  "terminatio",
  "tero",
  "terra",
  "terreo",
  "territo",
  "terror",
  "tersus",
  "tertius",
  "testimonium",
  "texo",
  "textilis",
  "textor",
  "textus",
  "thalassinus",
  "theatrum",
  "theca",
  "thema",
  "theologus",
  "thermae",
  "thesaurus",
  "thesis",
  "thorax",
  "thymbra",
  "thymum",
  "tibi",
  "timidus",
  "timor",
  "titulus",
  "tolero",
  "tollo",
  "tondeo",
  "tonsor",
  "torqueo",
  "torrens",
  "tot",
  "totidem",
  "toties",
  "totus",
  "tracto",
  "trado",
  "traho",
  "trans",
  "tredecim",
  "tremo",
  "trepide",
  "tres",
  "tribuo",
  "tricesimus",
  "triduana",
  "triginta",
  "tripudio",
  "tristis",
  "triumphus",
  "trucido",
  "truculenter",
  "tubineus",
  "tui",
  "tum",
  "tumultus",
  "tunc",
  "turba",
  "turbo",
  "turpe",
  "turpis",
  "tutamen",
  "tutis",
  "tyrannus",
  "uberrime",
  "ubi",
  "ulciscor",
  "ullus",
  "ulterius",
  "ultio",
  "ultra",
  "umbra",
  "umerus",
  "umquam",
  "una",
  "unde",
  "undique",
  "universe",
  "unus",
  "urbanus",
  "urbs",
  "uredo",
  "usitas",
  "usque",
  "ustilo",
  "ustulo",
  "usus",
  "uter",
  "uterque",
  "utilis",
  "utique",
  "utor",
  "utpote",
  "utrimque",
  "utroque",
  "utrum",
  "uxor",
  "vaco",
  "vacuus",
  "vado",
  "vae",
  "valde",
  "valens",
  "valeo",
  "valetudo",
  "validus",
  "vallum",
  "vapulus",
  "varietas",
  "varius",
  "vehemens",
  "vel",
  "velociter",
  "velum",
  "velut",
  "venia",
  "venio",
  "ventito",
  "ventosus",
  "ventus",
  "venustas",
  "ver",
  "verbera",
  "verbum",
  "vere",
  "verecundia",
  "vereor",
  "vergo",
  "veritas",
  "vero",
  "versus",
  "verto",
  "verumtamen",
  "verus",
  "vesco",
  "vesica",
  "vesper",
  "vespillo",
  "vester",
  "vestigium",
  "vestrum",
  "vetus",
  "via",
  "vicinus",
  "vicissitudo",
  "victoria",
  "victus",
  "videlicet",
  "video",
  "viduata",
  "viduo",
  "vigilo",
  "vigor",
  "vilicus",
  "vilis",
  "vilitas",
  "villa",
  "vinco",
  "vinculum",
  "vindico",
  "vinitor",
  "vinum",
  "vir",
  "virga",
  "virgo",
  "viridis",
  "viriliter",
  "virtus",
  "vis",
  "viscus",
  "vita",
  "vitiosus",
  "vitium",
  "vito",
  "vivo",
  "vix",
  "vobis",
  "vociferor",
  "voco",
  "volaticus",
  "volo",
  "volubilis",
  "voluntarius",
  "volup",
  "volutabrum",
  "volva",
  "vomer",
  "vomica",
  "vomito",
  "vorago",
  "vorax",
  "voro",
  "vos",
  "votum",
  "voveo",
  "vox",
  "vulariter",
  "vulgaris",
  "vulgivagus",
  "vulgo",
  "vulgus",
  "vulnero",
  "vulnus",
  "vulpes",
  "vulticulus",
  "vultuosus",
  "xiphias"
];

},{}],160:[function(require,module,exports){
module.exports=require(39)
},{"/Users/a/dev/faker.js/lib/locales/de/lorem/words.js":39}],161:[function(require,module,exports){
module["exports"] = [
  "Aaliyah",
  "Aaron",
  "Abagail",
  "Abbey",
  "Abbie",
  "Abbigail",
  "Abby",
  "Abdiel",
  "Abdul",
  "Abdullah",
  "Abe",
  "Abel",
  "Abelardo",
  "Abigail",
  "Abigale",
  "Abigayle",
  "Abner",
  "Abraham",
  "Ada",
  "Adah",
  "Adalberto",
  "Adaline",
  "Adam",
  "Adan",
  "Addie",
  "Addison",
  "Adela",
  "Adelbert",
  "Adele",
  "Adelia",
  "Adeline",
  "Adell",
  "Adella",
  "Adelle",
  "Aditya",
  "Adolf",
  "Adolfo",
  "Adolph",
  "Adolphus",
  "Adonis",
  "Adrain",
  "Adrian",
  "Adriana",
  "Adrianna",
  "Adriel",
  "Adrien",
  "Adrienne",
  "Afton",
  "Aglae",
  "Agnes",
  "Agustin",
  "Agustina",
  "Ahmad",
  "Ahmed",
  "Aida",
  "Aidan",
  "Aiden",
  "Aileen",
  "Aimee",
  "Aisha",
  "Aiyana",
  "Akeem",
  "Al",
  "Alaina",
  "Alan",
  "Alana",
  "Alanis",
  "Alanna",
  "Alayna",
  "Alba",
  "Albert",
  "Alberta",
  "Albertha",
  "Alberto",
  "Albin",
  "Albina",
  "Alda",
  "Alden",
  "Alec",
  "Aleen",
  "Alejandra",
  "Alejandrin",
  "Alek",
  "Alena",
  "Alene",
  "Alessandra",
  "Alessandro",
  "Alessia",
  "Aletha",
  "Alex",
  "Alexa",
  "Alexander",
  "Alexandra",
  "Alexandre",
  "Alexandrea",
  "Alexandria",
  "Alexandrine",
  "Alexandro",
  "Alexane",
  "Alexanne",
  "Alexie",
  "Alexis",
  "Alexys",
  "Alexzander",
  "Alf",
  "Alfonso",
  "Alfonzo",
  "Alford",
  "Alfred",
  "Alfreda",
  "Alfredo",
  "Ali",
  "Alia",
  "Alice",
  "Alicia",
  "Alisa",
  "Alisha",
  "Alison",
  "Alivia",
  "Aliya",
  "Aliyah",
  "Aliza",
  "Alize",
  "Allan",
  "Allen",
  "Allene",
  "Allie",
  "Allison",
  "Ally",
  "Alphonso",
  "Alta",
  "Althea",
  "Alva",
  "Alvah",
  "Alvena",
  "Alvera",
  "Alverta",
  "Alvina",
  "Alvis",
  "Alyce",
  "Alycia",
  "Alysa",
  "Alysha",
  "Alyson",
  "Alysson",
  "Amalia",
  "Amanda",
  "Amani",
  "Amara",
  "Amari",
  "Amaya",
  "Amber",
  "Ambrose",
  "Amelia",
  "Amelie",
  "Amely",
  "America",
  "Americo",
  "Amie",
  "Amina",
  "Amir",
  "Amira",
  "Amiya",
  "Amos",
  "Amparo",
  "Amy",
  "Amya",
  "Ana",
  "Anabel",
  "Anabelle",
  "Anahi",
  "Anais",
  "Anastacio",
  "Anastasia",
  "Anderson",
  "Andre",
  "Andreane",
  "Andreanne",
  "Andres",
  "Andrew",
  "Andy",
  "Angel",
  "Angela",
  "Angelica",
  "Angelina",
  "Angeline",
  "Angelita",
  "Angelo",
  "Angie",
  "Angus",
  "Anibal",
  "Anika",
  "Anissa",
  "Anita",
  "Aniya",
  "Aniyah",
  "Anjali",
  "Anna",
  "Annabel",
  "Annabell",
  "Annabelle",
  "Annalise",
  "Annamae",
  "Annamarie",
  "Anne",
  "Annetta",
  "Annette",
  "Annie",
  "Ansel",
  "Ansley",
  "Anthony",
  "Antoinette",
  "Antone",
  "Antonetta",
  "Antonette",
  "Antonia",
  "Antonietta",
  "Antonina",
  "Antonio",
  "Antwan",
  "Antwon",
  "Anya",
  "April",
  "Ara",
  "Araceli",
  "Aracely",
  "Arch",
  "Archibald",
  "Ardella",
  "Arden",
  "Ardith",
  "Arely",
  "Ari",
  "Ariane",
  "Arianna",
  "Aric",
  "Ariel",
  "Arielle",
  "Arjun",
  "Arlene",
  "Arlie",
  "Arlo",
  "Armand",
  "Armando",
  "Armani",
  "Arnaldo",
  "Arne",
  "Arno",
  "Arnold",
  "Arnoldo",
  "Arnulfo",
  "Aron",
  "Art",
  "Arthur",
  "Arturo",
  "Arvel",
  "Arvid",
  "Arvilla",
  "Aryanna",
  "Asa",
  "Asha",
  "Ashlee",
  "Ashleigh",
  "Ashley",
  "Ashly",
  "Ashlynn",
  "Ashton",
  "Ashtyn",
  "Asia",
  "Assunta",
  "Astrid",
  "Athena",
  "Aubree",
  "Aubrey",
  "Audie",
  "Audra",
  "Audreanne",
  "Audrey",
  "August",
  "Augusta",
  "Augustine",
  "Augustus",
  "Aurelia",
  "Aurelie",
  "Aurelio",
  "Aurore",
  "Austen",
  "Austin",
  "Austyn",
  "Autumn",
  "Ava",
  "Avery",
  "Avis",
  "Axel",
  "Ayana",
  "Ayden",
  "Ayla",
  "Aylin",
  "Baby",
  "Bailee",
  "Bailey",
  "Barbara",
  "Barney",
  "Baron",
  "Barrett",
  "Barry",
  "Bart",
  "Bartholome",
  "Barton",
  "Baylee",
  "Beatrice",
  "Beau",
  "Beaulah",
  "Bell",
  "Bella",
  "Belle",
  "Ben",
  "Benedict",
  "Benjamin",
  "Bennett",
  "Bennie",
  "Benny",
  "Benton",
  "Berenice",
  "Bernadette",
  "Bernadine",
  "Bernard",
  "Bernardo",
  "Berneice",
  "Bernhard",
  "Bernice",
  "Bernie",
  "Berniece",
  "Bernita",
  "Berry",
  "Bert",
  "Berta",
  "Bertha",
  "Bertram",
  "Bertrand",
  "Beryl",
  "Bessie",
  "Beth",
  "Bethany",
  "Bethel",
  "Betsy",
  "Bette",
  "Bettie",
  "Betty",
  "Bettye",
  "Beulah",
  "Beverly",
  "Bianka",
  "Bill",
  "Billie",
  "Billy",
  "Birdie",
  "Blair",
  "Blaise",
  "Blake",
  "Blanca",
  "Blanche",
  "Blaze",
  "Bo",
  "Bobbie",
  "Bobby",
  "Bonita",
  "Bonnie",
  "Boris",
  "Boyd",
  "Brad",
  "Braden",
  "Bradford",
  "Bradley",
  "Bradly",
  "Brady",
  "Braeden",
  "Brain",
  "Brandi",
  "Brando",
  "Brandon",
  "Brandt",
  "Brandy",
  "Brandyn",
  "Brannon",
  "Branson",
  "Brant",
  "Braulio",
  "Braxton",
  "Brayan",
  "Breana",
  "Breanna",
  "Breanne",
  "Brenda",
  "Brendan",
  "Brenden",
  "Brendon",
  "Brenna",
  "Brennan",
  "Brennon",
  "Brent",
  "Bret",
  "Brett",
  "Bria",
  "Brian",
  "Briana",
  "Brianne",
  "Brice",
  "Bridget",
  "Bridgette",
  "Bridie",
  "Brielle",
  "Brigitte",
  "Brionna",
  "Brisa",
  "Britney",
  "Brittany",
  "Brock",
  "Broderick",
  "Brody",
  "Brook",
  "Brooke",
  "Brooklyn",
  "Brooks",
  "Brown",
  "Bruce",
  "Bryana",
  "Bryce",
  "Brycen",
  "Bryon",
  "Buck",
  "Bud",
  "Buddy",
  "Buford",
  "Bulah",
  "Burdette",
  "Burley",
  "Burnice",
  "Buster",
  "Cade",
  "Caden",
  "Caesar",
  "Caitlyn",
  "Cale",
  "Caleb",
  "Caleigh",
  "Cali",
  "Calista",
  "Callie",
  "Camden",
  "Cameron",
  "Camila",
  "Camilla",
  "Camille",
  "Camren",
  "Camron",
  "Camryn",
  "Camylle",
  "Candace",
  "Candelario",
  "Candice",
  "Candida",
  "Candido",
  "Cara",
  "Carey",
  "Carissa",
  "Carlee",
  "Carleton",
  "Carley",
  "Carli",
  "Carlie",
  "Carlo",
  "Carlos",
  "Carlotta",
  "Carmel",
  "Carmela",
  "Carmella",
  "Carmelo",
  "Carmen",
  "Carmine",
  "Carol",
  "Carolanne",
  "Carole",
  "Carolina",
  "Caroline",
  "Carolyn",
  "Carolyne",
  "Carrie",
  "Carroll",
  "Carson",
  "Carter",
  "Cary",
  "Casandra",
  "Casey",
  "Casimer",
  "Casimir",
  "Casper",
  "Cassandra",
  "Cassandre",
  "Cassidy",
  "Cassie",
  "Catalina",
  "Caterina",
  "Catharine",
  "Catherine",
  "Cathrine",
  "Cathryn",
  "Cathy",
  "Cayla",
  "Ceasar",
  "Cecelia",
  "Cecil",
  "Cecile",
  "Cecilia",
  "Cedrick",
  "Celestine",
  "Celestino",
  "Celia",
  "Celine",
  "Cesar",
  "Chad",
  "Chadd",
  "Chadrick",
  "Chaim",
  "Chance",
  "Chandler",
  "Chanel",
  "Chanelle",
  "Charity",
  "Charlene",
  "Charles",
  "Charley",
  "Charlie",
  "Charlotte",
  "Chase",
  "Chasity",
  "Chauncey",
  "Chaya",
  "Chaz",
  "Chelsea",
  "Chelsey",
  "Chelsie",
  "Chesley",
  "Chester",
  "Chet",
  "Cheyanne",
  "Cheyenne",
  "Chloe",
  "Chris",
  "Christ",
  "Christa",
  "Christelle",
  "Christian",
  "Christiana",
  "Christina",
  "Christine",
  "Christop",
  "Christophe",
  "Christopher",
  "Christy",
  "Chyna",
  "Ciara",
  "Cicero",
  "Cielo",
  "Cierra",
  "Cindy",
  "Citlalli",
  "Clair",
  "Claire",
  "Clara",
  "Clarabelle",
  "Clare",
  "Clarissa",
  "Clark",
  "Claud",
  "Claude",
  "Claudia",
  "Claudie",
  "Claudine",
  "Clay",
  "Clemens",
  "Clement",
  "Clementina",
  "Clementine",
  "Clemmie",
  "Cleo",
  "Cleora",
  "Cleta",
  "Cletus",
  "Cleve",
  "Cleveland",
  "Clifford",
  "Clifton",
  "Clint",
  "Clinton",
  "Clotilde",
  "Clovis",
  "Cloyd",
  "Clyde",
  "Coby",
  "Cody",
  "Colby",
  "Cole",
  "Coleman",
  "Colin",
  "Colleen",
  "Collin",
  "Colt",
  "Colten",
  "Colton",
  "Columbus",
  "Concepcion",
  "Conner",
  "Connie",
  "Connor",
  "Conor",
  "Conrad",
  "Constance",
  "Constantin",
  "Consuelo",
  "Cooper",
  "Cora",
  "Coralie",
  "Corbin",
  "Cordelia",
  "Cordell",
  "Cordia",
  "Cordie",
  "Corene",
  "Corine",
  "Cornelius",
  "Cornell",
  "Corrine",
  "Cortez",
  "Cortney",
  "Cory",
  "Coty",
  "Courtney",
  "Coy",
  "Craig",
  "Crawford",
  "Creola",
  "Cristal",
  "Cristian",
  "Cristina",
  "Cristobal",
  "Cristopher",
  "Cruz",
  "Crystal",
  "Crystel",
  "Cullen",
  "Curt",
  "Curtis",
  "Cydney",
  "Cynthia",
  "Cyril",
  "Cyrus",
  "Dagmar",
  "Dahlia",
  "Daija",
  "Daisha",
  "Daisy",
  "Dakota",
  "Dale",
  "Dallas",
  "Dallin",
  "Dalton",
  "Damaris",
  "Dameon",
  "Damian",
  "Damien",
  "Damion",
  "Damon",
  "Dan",
  "Dana",
  "Dandre",
  "Dane",
  "D'angelo",
  "Dangelo",
  "Danial",
  "Daniela",
  "Daniella",
  "Danielle",
  "Danika",
  "Dannie",
  "Danny",
  "Dante",
  "Danyka",
  "Daphne",
  "Daphnee",
  "Daphney",
  "Darby",
  "Daren",
  "Darian",
  "Dariana",
  "Darien",
  "Dario",
  "Darion",
  "Darius",
  "Darlene",
  "Daron",
  "Darrel",
  "Darrell",
  "Darren",
  "Darrick",
  "Darrin",
  "Darrion",
  "Darron",
  "Darryl",
  "Darwin",
  "Daryl",
  "Dashawn",
  "Dasia",
  "Dave",
  "David",
  "Davin",
  "Davion",
  "Davon",
  "Davonte",
  "Dawn",
  "Dawson",
  "Dax",
  "Dayana",
  "Dayna",
  "Dayne",
  "Dayton",
  "Dean",
  "Deangelo",
  "Deanna",
  "Deborah",
  "Declan",
  "Dedric",
  "Dedrick",
  "Dee",
  "Deion",
  "Deja",
  "Dejah",
  "Dejon",
  "Dejuan",
  "Delaney",
  "Delbert",
  "Delfina",
  "Delia",
  "Delilah",
  "Dell",
  "Della",
  "Delmer",
  "Delores",
  "Delpha",
  "Delphia",
  "Delphine",
  "Delta",
  "Demarco",
  "Demarcus",
  "Demario",
  "Demetris",
  "Demetrius",
  "Demond",
  "Dena",
  "Denis",
  "Dennis",
  "Deon",
  "Deondre",
  "Deontae",
  "Deonte",
  "Dereck",
  "Derek",
  "Derick",
  "Deron",
  "Derrick",
  "Deshaun",
  "Deshawn",
  "Desiree",
  "Desmond",
  "Dessie",
  "Destany",
  "Destin",
  "Destinee",
  "Destiney",
  "Destini",
  "Destiny",
  "Devan",
  "Devante",
  "Deven",
  "Devin",
  "Devon",
  "Devonte",
  "Devyn",
  "Dewayne",
  "Dewitt",
  "Dexter",
  "Diamond",
  "Diana",
  "Dianna",
  "Diego",
  "Dillan",
  "Dillon",
  "Dimitri",
  "Dina",
  "Dino",
  "Dion",
  "Dixie",
  "Dock",
  "Dolly",
  "Dolores",
  "Domenic",
  "Domenica",
  "Domenick",
  "Domenico",
  "Domingo",
  "Dominic",
  "Dominique",
  "Don",
  "Donald",
  "Donato",
  "Donavon",
  "Donna",
  "Donnell",
  "Donnie",
  "Donny",
  "Dora",
  "Dorcas",
  "Dorian",
  "Doris",
  "Dorothea",
  "Dorothy",
  "Dorris",
  "Dortha",
  "Dorthy",
  "Doug",
  "Douglas",
  "Dovie",
  "Doyle",
  "Drake",
  "Drew",
  "Duane",
  "Dudley",
  "Dulce",
  "Duncan",
  "Durward",
  "Dustin",
  "Dusty",
  "Dwight",
  "Dylan",
  "Earl",
  "Earlene",
  "Earline",
  "Earnest",
  "Earnestine",
  "Easter",
  "Easton",
  "Ebba",
  "Ebony",
  "Ed",
  "Eda",
  "Edd",
  "Eddie",
  "Eden",
  "Edgar",
  "Edgardo",
  "Edison",
  "Edmond",
  "Edmund",
  "Edna",
  "Eduardo",
  "Edward",
  "Edwardo",
  "Edwin",
  "Edwina",
  "Edyth",
  "Edythe",
  "Effie",
  "Efrain",
  "Efren",
  "Eileen",
  "Einar",
  "Eino",
  "Eladio",
  "Elaina",
  "Elbert",
  "Elda",
  "Eldon",
  "Eldora",
  "Eldred",
  "Eldridge",
  "Eleanora",
  "Eleanore",
  "Eleazar",
  "Electa",
  "Elena",
  "Elenor",
  "Elenora",
  "Eleonore",
  "Elfrieda",
  "Eli",
  "Elian",
  "Eliane",
  "Elias",
  "Eliezer",
  "Elijah",
  "Elinor",
  "Elinore",
  "Elisa",
  "Elisabeth",
  "Elise",
  "Eliseo",
  "Elisha",
  "Elissa",
  "Eliza",
  "Elizabeth",
  "Ella",
  "Ellen",
  "Ellie",
  "Elliot",
  "Elliott",
  "Ellis",
  "Ellsworth",
  "Elmer",
  "Elmira",
  "Elmo",
  "Elmore",
  "Elna",
  "Elnora",
  "Elody",
  "Eloisa",
  "Eloise",
  "Elouise",
  "Eloy",
  "Elroy",
  "Elsa",
  "Else",
  "Elsie",
  "Elta",
  "Elton",
  "Elva",
  "Elvera",
  "Elvie",
  "Elvis",
  "Elwin",
  "Elwyn",
  "Elyse",
  "Elyssa",
  "Elza",
  "Emanuel",
  "Emelia",
  "Emelie",
  "Emely",
  "Emerald",
  "Emerson",
  "Emery",
  "Emie",
  "Emil",
  "Emile",
  "Emilia",
  "Emiliano",
  "Emilie",
  "Emilio",
  "Emily",
  "Emma",
  "Emmalee",
  "Emmanuel",
  "Emmanuelle",
  "Emmet",
  "Emmett",
  "Emmie",
  "Emmitt",
  "Emmy",
  "Emory",
  "Ena",
  "Enid",
  "Enoch",
  "Enola",
  "Enos",
  "Enrico",
  "Enrique",
  "Ephraim",
  "Era",
  "Eriberto",
  "Eric",
  "Erica",
  "Erich",
  "Erick",
  "Ericka",
  "Erik",
  "Erika",
  "Erin",
  "Erling",
  "Erna",
  "Ernest",
  "Ernestina",
  "Ernestine",
  "Ernesto",
  "Ernie",
  "Ervin",
  "Erwin",
  "Eryn",
  "Esmeralda",
  "Esperanza",
  "Esta",
  "Esteban",
  "Estefania",
  "Estel",
  "Estell",
  "Estella",
  "Estelle",
  "Estevan",
  "Esther",
  "Estrella",
  "Etha",
  "Ethan",
  "Ethel",
  "Ethelyn",
  "Ethyl",
  "Ettie",
  "Eudora",
  "Eugene",
  "Eugenia",
  "Eula",
  "Eulah",
  "Eulalia",
  "Euna",
  "Eunice",
  "Eusebio",
  "Eva",
  "Evalyn",
  "Evan",
  "Evangeline",
  "Evans",
  "Eve",
  "Eveline",
  "Evelyn",
  "Everardo",
  "Everett",
  "Everette",
  "Evert",
  "Evie",
  "Ewald",
  "Ewell",
  "Ezekiel",
  "Ezequiel",
  "Ezra",
  "Fabian",
  "Fabiola",
  "Fae",
  "Fannie",
  "Fanny",
  "Fatima",
  "Faustino",
  "Fausto",
  "Favian",
  "Fay",
  "Faye",
  "Federico",
  "Felicia",
  "Felicita",
  "Felicity",
  "Felipa",
  "Felipe",
  "Felix",
  "Felton",
  "Fermin",
  "Fern",
  "Fernando",
  "Ferne",
  "Fidel",
  "Filiberto",
  "Filomena",
  "Finn",
  "Fiona",
  "Flavie",
  "Flavio",
  "Fleta",
  "Fletcher",
  "Flo",
  "Florence",
  "Florencio",
  "Florian",
  "Florida",
  "Florine",
  "Flossie",
  "Floy",
  "Floyd",
  "Ford",
  "Forest",
  "Forrest",
  "Foster",
  "Frances",
  "Francesca",
  "Francesco",
  "Francis",
  "Francisca",
  "Francisco",
  "Franco",
  "Frank",
  "Frankie",
  "Franz",
  "Fred",
  "Freda",
  "Freddie",
  "Freddy",
  "Frederic",
  "Frederick",
  "Frederik",
  "Frederique",
  "Fredrick",
  "Fredy",
  "Freeda",
  "Freeman",
  "Freida",
  "Frida",
  "Frieda",
  "Friedrich",
  "Fritz",
  "Furman",
  "Gabe",
  "Gabriel",
  "Gabriella",
  "Gabrielle",
  "Gaetano",
  "Gage",
  "Gail",
  "Gardner",
  "Garett",
  "Garfield",
  "Garland",
  "Garnet",
  "Garnett",
  "Garret",
  "Garrett",
  "Garrick",
  "Garrison",
  "Garry",
  "Garth",
  "Gaston",
  "Gavin",
  "Gay",
  "Gayle",
  "Gaylord",
  "Gene",
  "General",
  "Genesis",
  "Genevieve",
  "Gennaro",
  "Genoveva",
  "Geo",
  "Geoffrey",
  "George",
  "Georgette",
  "Georgiana",
  "Georgianna",
  "Geovanni",
  "Geovanny",
  "Geovany",
  "Gerald",
  "Geraldine",
  "Gerard",
  "Gerardo",
  "Gerda",
  "Gerhard",
  "Germaine",
  "German",
  "Gerry",
  "Gerson",
  "Gertrude",
  "Gia",
  "Gianni",
  "Gideon",
  "Gilbert",
  "Gilberto",
  "Gilda",
  "Giles",
  "Gillian",
  "Gina",
  "Gino",
  "Giovani",
  "Giovanna",
  "Giovanni",
  "Giovanny",
  "Gisselle",
  "Giuseppe",
  "Gladyce",
  "Gladys",
  "Glen",
  "Glenda",
  "Glenna",
  "Glennie",
  "Gloria",
  "Godfrey",
  "Golda",
  "Golden",
  "Gonzalo",
  "Gordon",
  "Grace",
  "Gracie",
  "Graciela",
  "Grady",
  "Graham",
  "Grant",
  "Granville",
  "Grayce",
  "Grayson",
  "Green",
  "Greg",
  "Gregg",
  "Gregoria",
  "Gregorio",
  "Gregory",
  "Greta",
  "Gretchen",
  "Greyson",
  "Griffin",
  "Grover",
  "Guadalupe",
  "Gudrun",
  "Guido",
  "Guillermo",
  "Guiseppe",
  "Gunnar",
  "Gunner",
  "Gus",
  "Gussie",
  "Gust",
  "Gustave",
  "Guy",
  "Gwen",
  "Gwendolyn",
  "Hadley",
  "Hailee",
  "Hailey",
  "Hailie",
  "Hal",
  "Haleigh",
  "Haley",
  "Halie",
  "Halle",
  "Hallie",
  "Hank",
  "Hanna",
  "Hannah",
  "Hans",
  "Hardy",
  "Harley",
  "Harmon",
  "Harmony",
  "Harold",
  "Harrison",
  "Harry",
  "Harvey",
  "Haskell",
  "Hassan",
  "Hassie",
  "Hattie",
  "Haven",
  "Hayden",
  "Haylee",
  "Hayley",
  "Haylie",
  "Hazel",
  "Hazle",
  "Heath",
  "Heather",
  "Heaven",
  "Heber",
  "Hector",
  "Heidi",
  "Helen",
  "Helena",
  "Helene",
  "Helga",
  "Hellen",
  "Helmer",
  "Heloise",
  "Henderson",
  "Henri",
  "Henriette",
  "Henry",
  "Herbert",
  "Herman",
  "Hermann",
  "Hermina",
  "Herminia",
  "Herminio",
  "Hershel",
  "Herta",
  "Hertha",
  "Hester",
  "Hettie",
  "Hilario",
  "Hilbert",
  "Hilda",
  "Hildegard",
  "Hillard",
  "Hillary",
  "Hilma",
  "Hilton",
  "Hipolito",
  "Hiram",
  "Hobart",
  "Holden",
  "Hollie",
  "Hollis",
  "Holly",
  "Hope",
  "Horace",
  "Horacio",
  "Hortense",
  "Hosea",
  "Houston",
  "Howard",
  "Howell",
  "Hoyt",
  "Hubert",
  "Hudson",
  "Hugh",
  "Hulda",
  "Humberto",
  "Hunter",
  "Hyman",
  "Ian",
  "Ibrahim",
  "Icie",
  "Ida",
  "Idell",
  "Idella",
  "Ignacio",
  "Ignatius",
  "Ike",
  "Ila",
  "Ilene",
  "Iliana",
  "Ima",
  "Imani",
  "Imelda",
  "Immanuel",
  "Imogene",
  "Ines",
  "Irma",
  "Irving",
  "Irwin",
  "Isaac",
  "Isabel",
  "Isabell",
  "Isabella",
  "Isabelle",
  "Isac",
  "Isadore",
  "Isai",
  "Isaiah",
  "Isaias",
  "Isidro",
  "Ismael",
  "Isobel",
  "Isom",
  "Israel",
  "Issac",
  "Itzel",
  "Iva",
  "Ivah",
  "Ivory",
  "Ivy",
  "Izabella",
  "Izaiah",
  "Jabari",
  "Jace",
  "Jacey",
  "Jacinthe",
  "Jacinto",
  "Jack",
  "Jackeline",
  "Jackie",
  "Jacklyn",
  "Jackson",
  "Jacky",
  "Jaclyn",
  "Jacquelyn",
  "Jacques",
  "Jacynthe",
  "Jada",
  "Jade",
  "Jaden",
  "Jadon",
  "Jadyn",
  "Jaeden",
  "Jaida",
  "Jaiden",
  "Jailyn",
  "Jaime",
  "Jairo",
  "Jakayla",
  "Jake",
  "Jakob",
  "Jaleel",
  "Jalen",
  "Jalon",
  "Jalyn",
  "Jamaal",
  "Jamal",
  "Jamar",
  "Jamarcus",
  "Jamel",
  "Jameson",
  "Jamey",
  "Jamie",
  "Jamil",
  "Jamir",
  "Jamison",
  "Jammie",
  "Jan",
  "Jana",
  "Janae",
  "Jane",
  "Janelle",
  "Janessa",
  "Janet",
  "Janice",
  "Janick",
  "Janie",
  "Janis",
  "Janiya",
  "Jannie",
  "Jany",
  "Jaquan",
  "Jaquelin",
  "Jaqueline",
  "Jared",
  "Jaren",
  "Jarod",
  "Jaron",
  "Jarred",
  "Jarrell",
  "Jarret",
  "Jarrett",
  "Jarrod",
  "Jarvis",
  "Jasen",
  "Jasmin",
  "Jason",
  "Jasper",
  "Jaunita",
  "Javier",
  "Javon",
  "Javonte",
  "Jay",
  "Jayce",
  "Jaycee",
  "Jayda",
  "Jayde",
  "Jayden",
  "Jaydon",
  "Jaylan",
  "Jaylen",
  "Jaylin",
  "Jaylon",
  "Jayme",
  "Jayne",
  "Jayson",
  "Jazlyn",
  "Jazmin",
  "Jazmyn",
  "Jazmyne",
  "Jean",
  "Jeanette",
  "Jeanie",
  "Jeanne",
  "Jed",
  "Jedediah",
  "Jedidiah",
  "Jeff",
  "Jefferey",
  "Jeffery",
  "Jeffrey",
  "Jeffry",
  "Jena",
  "Jenifer",
  "Jennie",
  "Jennifer",
  "Jennings",
  "Jennyfer",
  "Jensen",
  "Jerad",
  "Jerald",
  "Jeramie",
  "Jeramy",
  "Jerel",
  "Jeremie",
  "Jeremy",
  "Jermain",
  "Jermaine",
  "Jermey",
  "Jerod",
  "Jerome",
  "Jeromy",
  "Jerrell",
  "Jerrod",
  "Jerrold",
  "Jerry",
  "Jess",
  "Jesse",
  "Jessica",
  "Jessie",
  "Jessika",
  "Jessy",
  "Jessyca",
  "Jesus",
  "Jett",
  "Jettie",
  "Jevon",
  "Jewel",
  "Jewell",
  "Jillian",
  "Jimmie",
  "Jimmy",
  "Jo",
  "Joan",
  "Joana",
  "Joanie",
  "Joanne",
  "Joannie",
  "Joanny",
  "Joany",
  "Joaquin",
  "Jocelyn",
  "Jodie",
  "Jody",
  "Joe",
  "Joel",
  "Joelle",
  "Joesph",
  "Joey",
  "Johan",
  "Johann",
  "Johanna",
  "Johathan",
  "John",
  "Johnathan",
  "Johnathon",
  "Johnnie",
  "Johnny",
  "Johnpaul",
  "Johnson",
  "Jolie",
  "Jon",
  "Jonas",
  "Jonatan",
  "Jonathan",
  "Jonathon",
  "Jordan",
  "Jordane",
  "Jordi",
  "Jordon",
  "Jordy",
  "Jordyn",
  "Jorge",
  "Jose",
  "Josefa",
  "Josefina",
  "Joseph",
  "Josephine",
  "Josh",
  "Joshua",
  "Joshuah",
  "Josiah",
  "Josiane",
  "Josianne",
  "Josie",
  "Josue",
  "Jovan",
  "Jovani",
  "Jovanny",
  "Jovany",
  "Joy",
  "Joyce",
  "Juana",
  "Juanita",
  "Judah",
  "Judd",
  "Jude",
  "Judge",
  "Judson",
  "Judy",
  "Jules",
  "Julia",
  "Julian",
  "Juliana",
  "Julianne",
  "Julie",
  "Julien",
  "Juliet",
  "Julio",
  "Julius",
  "June",
  "Junior",
  "Junius",
  "Justen",
  "Justice",
  "Justina",
  "Justine",
  "Juston",
  "Justus",
  "Justyn",
  "Juvenal",
  "Juwan",
  "Kacey",
  "Kaci",
  "Kacie",
  "Kade",
  "Kaden",
  "Kadin",
  "Kaela",
  "Kaelyn",
  "Kaia",
  "Kailee",
  "Kailey",
  "Kailyn",
  "Kaitlin",
  "Kaitlyn",
  "Kale",
  "Kaleb",
  "Kaleigh",
  "Kaley",
  "Kali",
  "Kallie",
  "Kameron",
  "Kamille",
  "Kamren",
  "Kamron",
  "Kamryn",
  "Kane",
  "Kara",
  "Kareem",
  "Karelle",
  "Karen",
  "Kari",
  "Kariane",
  "Karianne",
  "Karina",
  "Karine",
  "Karl",
  "Karlee",
  "Karley",
  "Karli",
  "Karlie",
  "Karolann",
  "Karson",
  "Kasandra",
  "Kasey",
  "Kassandra",
  "Katarina",
  "Katelin",
  "Katelyn",
  "Katelynn",
  "Katharina",
  "Katherine",
  "Katheryn",
  "Kathleen",
  "Kathlyn",
  "Kathryn",
  "Kathryne",
  "Katlyn",
  "Katlynn",
  "Katrina",
  "Katrine",
  "Kattie",
  "Kavon",
  "Kay",
  "Kaya",
  "Kaycee",
  "Kayden",
  "Kayla",
  "Kaylah",
  "Kaylee",
  "Kayleigh",
  "Kayley",
  "Kayli",
  "Kaylie",
  "Kaylin",
  "Keagan",
  "Keanu",
  "Keara",
  "Keaton",
  "Keegan",
  "Keeley",
  "Keely",
  "Keenan",
  "Keira",
  "Keith",
  "Kellen",
  "Kelley",
  "Kelli",
  "Kellie",
  "Kelly",
  "Kelsi",
  "Kelsie",
  "Kelton",
  "Kelvin",
  "Ken",
  "Kendall",
  "Kendra",
  "Kendrick",
  "Kenna",
  "Kennedi",
  "Kennedy",
  "Kenneth",
  "Kennith",
  "Kenny",
  "Kenton",
  "Kenya",
  "Kenyatta",
  "Kenyon",
  "Keon",
  "Keshaun",
  "Keshawn",
  "Keven",
  "Kevin",
  "Kevon",
  "Keyon",
  "Keyshawn",
  "Khalid",
  "Khalil",
  "Kian",
  "Kiana",
  "Kianna",
  "Kiara",
  "Kiarra",
  "Kiel",
  "Kiera",
  "Kieran",
  "Kiley",
  "Kim",
  "Kimberly",
  "King",
  "Kip",
  "Kira",
  "Kirk",
  "Kirsten",
  "Kirstin",
  "Kitty",
  "Kobe",
  "Koby",
  "Kody",
  "Kolby",
  "Kole",
  "Korbin",
  "Korey",
  "Kory",
  "Kraig",
  "Kris",
  "Krista",
  "Kristian",
  "Kristin",
  "Kristina",
  "Kristofer",
  "Kristoffer",
  "Kristopher",
  "Kristy",
  "Krystal",
  "Krystel",
  "Krystina",
  "Kurt",
  "Kurtis",
  "Kyla",
  "Kyle",
  "Kylee",
  "Kyleigh",
  "Kyler",
  "Kylie",
  "Kyra",
  "Lacey",
  "Lacy",
  "Ladarius",
  "Lafayette",
  "Laila",
  "Laisha",
  "Lamar",
  "Lambert",
  "Lamont",
  "Lance",
  "Landen",
  "Lane",
  "Laney",
  "Larissa",
  "Laron",
  "Larry",
  "Larue",
  "Laura",
  "Laurel",
  "Lauren",
  "Laurence",
  "Lauretta",
  "Lauriane",
  "Laurianne",
  "Laurie",
  "Laurine",
  "Laury",
  "Lauryn",
  "Lavada",
  "Lavern",
  "Laverna",
  "Laverne",
  "Lavina",
  "Lavinia",
  "Lavon",
  "Lavonne",
  "Lawrence",
  "Lawson",
  "Layla",
  "Layne",
  "Lazaro",
  "Lea",
  "Leann",
  "Leanna",
  "Leanne",
  "Leatha",
  "Leda",
  "Lee",
  "Leif",
  "Leila",
  "Leilani",
  "Lela",
  "Lelah",
  "Leland",
  "Lelia",
  "Lempi",
  "Lemuel",
  "Lenna",
  "Lennie",
  "Lenny",
  "Lenora",
  "Lenore",
  "Leo",
  "Leola",
  "Leon",
  "Leonard",
  "Leonardo",
  "Leone",
  "Leonel",
  "Leonie",
  "Leonor",
  "Leonora",
  "Leopold",
  "Leopoldo",
  "Leora",
  "Lera",
  "Lesley",
  "Leslie",
  "Lesly",
  "Lessie",
  "Lester",
  "Leta",
  "Letha",
  "Letitia",
  "Levi",
  "Lew",
  "Lewis",
  "Lexi",
  "Lexie",
  "Lexus",
  "Lia",
  "Liam",
  "Liana",
  "Libbie",
  "Libby",
  "Lila",
  "Lilian",
  "Liliana",
  "Liliane",
  "Lilla",
  "Lillian",
  "Lilliana",
  "Lillie",
  "Lilly",
  "Lily",
  "Lilyan",
  "Lina",
  "Lincoln",
  "Linda",
  "Lindsay",
  "Lindsey",
  "Linnea",
  "Linnie",
  "Linwood",
  "Lionel",
  "Lisa",
  "Lisandro",
  "Lisette",
  "Litzy",
  "Liza",
  "Lizeth",
  "Lizzie",
  "Llewellyn",
  "Lloyd",
  "Logan",
  "Lois",
  "Lola",
  "Lolita",
  "Loma",
  "Lon",
  "London",
  "Lonie",
  "Lonnie",
  "Lonny",
  "Lonzo",
  "Lora",
  "Loraine",
  "Loren",
  "Lorena",
  "Lorenz",
  "Lorenza",
  "Lorenzo",
  "Lori",
  "Lorine",
  "Lorna",
  "Lottie",
  "Lou",
  "Louie",
  "Louisa",
  "Lourdes",
  "Louvenia",
  "Lowell",
  "Loy",
  "Loyal",
  "Loyce",
  "Lucas",
  "Luciano",
  "Lucie",
  "Lucienne",
  "Lucile",
  "Lucinda",
  "Lucio",
  "Lucious",
  "Lucius",
  "Lucy",
  "Ludie",
  "Ludwig",
  "Lue",
  "Luella",
  "Luigi",
  "Luis",
  "Luisa",
  "Lukas",
  "Lula",
  "Lulu",
  "Luna",
  "Lupe",
  "Lura",
  "Lurline",
  "Luther",
  "Luz",
  "Lyda",
  "Lydia",
  "Lyla",
  "Lynn",
  "Lyric",
  "Lysanne",
  "Mabel",
  "Mabelle",
  "Mable",
  "Mac",
  "Macey",
  "Maci",
  "Macie",
  "Mack",
  "Mackenzie",
  "Macy",
  "Madaline",
  "Madalyn",
  "Maddison",
  "Madeline",
  "Madelyn",
  "Madelynn",
  "Madge",
  "Madie",
  "Madilyn",
  "Madisen",
  "Madison",
  "Madisyn",
  "Madonna",
  "Madyson",
  "Mae",
  "Maegan",
  "Maeve",
  "Mafalda",
  "Magali",
  "Magdalen",
  "Magdalena",
  "Maggie",
  "Magnolia",
  "Magnus",
  "Maia",
  "Maida",
  "Maiya",
  "Major",
  "Makayla",
  "Makenna",
  "Makenzie",
  "Malachi",
  "Malcolm",
  "Malika",
  "Malinda",
  "Mallie",
  "Mallory",
  "Malvina",
  "Mandy",
  "Manley",
  "Manuel",
  "Manuela",
  "Mara",
  "Marc",
  "Marcel",
  "Marcelina",
  "Marcelino",
  "Marcella",
  "Marcelle",
  "Marcellus",
  "Marcelo",
  "Marcia",
  "Marco",
  "Marcos",
  "Marcus",
  "Margaret",
  "Margarete",
  "Margarett",
  "Margaretta",
  "Margarette",
  "Margarita",
  "Marge",
  "Margie",
  "Margot",
  "Margret",
  "Marguerite",
  "Maria",
  "Mariah",
  "Mariam",
  "Marian",
  "Mariana",
  "Mariane",
  "Marianna",
  "Marianne",
  "Mariano",
  "Maribel",
  "Marie",
  "Mariela",
  "Marielle",
  "Marietta",
  "Marilie",
  "Marilou",
  "Marilyne",
  "Marina",
  "Mario",
  "Marion",
  "Marisa",
  "Marisol",
  "Maritza",
  "Marjolaine",
  "Marjorie",
  "Marjory",
  "Mark",
  "Markus",
  "Marlee",
  "Marlen",
  "Marlene",
  "Marley",
  "Marlin",
  "Marlon",
  "Marques",
  "Marquis",
  "Marquise",
  "Marshall",
  "Marta",
  "Martin",
  "Martina",
  "Martine",
  "Marty",
  "Marvin",
  "Mary",
  "Maryam",
  "Maryjane",
  "Maryse",
  "Mason",
  "Mateo",
  "Mathew",
  "Mathias",
  "Mathilde",
  "Matilda",
  "Matilde",
  "Matt",
  "Matteo",
  "Mattie",
  "Maud",
  "Maude",
  "Maudie",
  "Maureen",
  "Maurice",
  "Mauricio",
  "Maurine",
  "Maverick",
  "Mavis",
  "Max",
  "Maxie",
  "Maxime",
  "Maximilian",
  "Maximillia",
  "Maximillian",
  "Maximo",
  "Maximus",
  "Maxine",
  "Maxwell",
  "May",
  "Maya",
  "Maybell",
  "Maybelle",
  "Maye",
  "Maymie",
  "Maynard",
  "Mayra",
  "Mazie",
  "Mckayla",
  "Mckenna",
  "Mckenzie",
  "Meagan",
  "Meaghan",
  "Meda",
  "Megane",
  "Meggie",
  "Meghan",
  "Mekhi",
  "Melany",
  "Melba",
  "Melisa",
  "Melissa",
  "Mellie",
  "Melody",
  "Melvin",
  "Melvina",
  "Melyna",
  "Melyssa",
  "Mercedes",
  "Meredith",
  "Merl",
  "Merle",
  "Merlin",
  "Merritt",
  "Mertie",
  "Mervin",
  "Meta",
  "Mia",
  "Micaela",
  "Micah",
  "Michael",
  "Michaela",
  "Michale",
  "Micheal",
  "Michel",
  "Michele",
  "Michelle",
  "Miguel",
  "Mikayla",
  "Mike",
  "Mikel",
  "Milan",
  "Miles",
  "Milford",
  "Miller",
  "Millie",
  "Milo",
  "Milton",
  "Mina",
  "Minerva",
  "Minnie",
  "Miracle",
  "Mireille",
  "Mireya",
  "Misael",
  "Missouri",
  "Misty",
  "Mitchel",
  "Mitchell",
  "Mittie",
  "Modesta",
  "Modesto",
  "Mohamed",
  "Mohammad",
  "Mohammed",
  "Moises",
  "Mollie",
  "Molly",
  "Mona",
  "Monica",
  "Monique",
  "Monroe",
  "Monserrat",
  "Monserrate",
  "Montana",
  "Monte",
  "Monty",
  "Morgan",
  "Moriah",
  "Morris",
  "Mortimer",
  "Morton",
  "Mose",
  "Moses",
  "Moshe",
  "Mossie",
  "Mozell",
  "Mozelle",
  "Muhammad",
  "Muriel",
  "Murl",
  "Murphy",
  "Murray",
  "Mustafa",
  "Mya",
  "Myah",
  "Mylene",
  "Myles",
  "Myra",
  "Myriam",
  "Myrl",
  "Myrna",
  "Myron",
  "Myrtice",
  "Myrtie",
  "Myrtis",
  "Myrtle",
  "Nadia",
  "Nakia",
  "Name",
  "Nannie",
  "Naomi",
  "Naomie",
  "Napoleon",
  "Narciso",
  "Nash",
  "Nasir",
  "Nat",
  "Natalia",
  "Natalie",
  "Natasha",
  "Nathan",
  "Nathanael",
  "Nathanial",
  "Nathaniel",
  "Nathen",
  "Nayeli",
  "Neal",
  "Ned",
  "Nedra",
  "Neha",
  "Neil",
  "Nelda",
  "Nella",
  "Nelle",
  "Nellie",
  "Nels",
  "Nelson",
  "Neoma",
  "Nestor",
  "Nettie",
  "Neva",
  "Newell",
  "Newton",
  "Nia",
  "Nicholas",
  "Nicholaus",
  "Nichole",
  "Nick",
  "Nicklaus",
  "Nickolas",
  "Nico",
  "Nicola",
  "Nicolas",
  "Nicole",
  "Nicolette",
  "Nigel",
  "Nikita",
  "Nikki",
  "Nikko",
  "Niko",
  "Nikolas",
  "Nils",
  "Nina",
  "Noah",
  "Noble",
  "Noe",
  "Noel",
  "Noelia",
  "Noemi",
  "Noemie",
  "Noemy",
  "Nola",
  "Nolan",
  "Nona",
  "Nora",
  "Norbert",
  "Norberto",
  "Norene",
  "Norma",
  "Norris",
  "Norval",
  "Norwood",
  "Nova",
  "Novella",
  "Nya",
  "Nyah",
  "Nyasia",
  "Obie",
  "Oceane",
  "Ocie",
  "Octavia",
  "Oda",
  "Odell",
  "Odessa",
  "Odie",
  "Ofelia",
  "Okey",
  "Ola",
  "Olaf",
  "Ole",
  "Olen",
  "Oleta",
  "Olga",
  "Olin",
  "Oliver",
  "Ollie",
  "Oma",
  "Omari",
  "Omer",
  "Ona",
  "Onie",
  "Opal",
  "Ophelia",
  "Ora",
  "Oral",
  "Oran",
  "Oren",
  "Orie",
  "Orin",
  "Orion",
  "Orland",
  "Orlando",
  "Orlo",
  "Orpha",
  "Orrin",
  "Orval",
  "Orville",
  "Osbaldo",
  "Osborne",
  "Oscar",
  "Osvaldo",
  "Oswald",
  "Oswaldo",
  "Otha",
  "Otho",
  "Otilia",
  "Otis",
  "Ottilie",
  "Ottis",
  "Otto",
  "Ova",
  "Owen",
  "Ozella",
  "Pablo",
  "Paige",
  "Palma",
  "Pamela",
  "Pansy",
  "Paolo",
  "Paris",
  "Parker",
  "Pascale",
  "Pasquale",
  "Pat",
  "Patience",
  "Patricia",
  "Patrick",
  "Patsy",
  "Pattie",
  "Paul",
  "Paula",
  "Pauline",
  "Paxton",
  "Payton",
  "Pearl",
  "Pearlie",
  "Pearline",
  "Pedro",
  "Peggie",
  "Penelope",
  "Percival",
  "Percy",
  "Perry",
  "Pete",
  "Peter",
  "Petra",
  "Peyton",
  "Philip",
  "Phoebe",
  "Phyllis",
  "Pierce",
  "Pierre",
  "Pietro",
  "Pink",
  "Pinkie",
  "Piper",
  "Polly",
  "Porter",
  "Precious",
  "Presley",
  "Preston",
  "Price",
  "Prince",
  "Princess",
  "Priscilla",
  "Providenci",
  "Prudence",
  "Queen",
  "Queenie",
  "Quentin",
  "Quincy",
  "Quinn",
  "Quinten",
  "Quinton",
  "Rachael",
  "Rachel",
  "Rachelle",
  "Rae",
  "Raegan",
  "Rafael",
  "Rafaela",
  "Raheem",
  "Rahsaan",
  "Rahul",
  "Raina",
  "Raleigh",
  "Ralph",
  "Ramiro",
  "Ramon",
  "Ramona",
  "Randal",
  "Randall",
  "Randi",
  "Randy",
  "Ransom",
  "Raoul",
  "Raphael",
  "Raphaelle",
  "Raquel",
  "Rashad",
  "Rashawn",
  "Rasheed",
  "Raul",
  "Raven",
  "Ray",
  "Raymond",
  "Raymundo",
  "Reagan",
  "Reanna",
  "Reba",
  "Rebeca",
  "Rebecca",
  "Rebeka",
  "Rebekah",
  "Reece",
  "Reed",
  "Reese",
  "Regan",
  "Reggie",
  "Reginald",
  "Reid",
  "Reilly",
  "Reina",
  "Reinhold",
  "Remington",
  "Rene",
  "Renee",
  "Ressie",
  "Reta",
  "Retha",
  "Retta",
  "Reuben",
  "Reva",
  "Rex",
  "Rey",
  "Reyes",
  "Reymundo",
  "Reyna",
  "Reynold",
  "Rhea",
  "Rhett",
  "Rhianna",
  "Rhiannon",
  "Rhoda",
  "Ricardo",
  "Richard",
  "Richie",
  "Richmond",
  "Rick",
  "Rickey",
  "Rickie",
  "Ricky",
  "Rico",
  "Rigoberto",
  "Riley",
  "Rita",
  "River",
  "Robb",
  "Robbie",
  "Robert",
  "Roberta",
  "Roberto",
  "Robin",
  "Robyn",
  "Rocio",
  "Rocky",
  "Rod",
  "Roderick",
  "Rodger",
  "Rodolfo",
  "Rodrick",
  "Rodrigo",
  "Roel",
  "Rogelio",
  "Roger",
  "Rogers",
  "Rolando",
  "Rollin",
  "Roma",
  "Romaine",
  "Roman",
  "Ron",
  "Ronaldo",
  "Ronny",
  "Roosevelt",
  "Rory",
  "Rosa",
  "Rosalee",
  "Rosalia",
  "Rosalind",
  "Rosalinda",
  "Rosalyn",
  "Rosamond",
  "Rosanna",
  "Rosario",
  "Roscoe",
  "Rose",
  "Rosella",
  "Roselyn",
  "Rosemarie",
  "Rosemary",
  "Rosendo",
  "Rosetta",
  "Rosie",
  "Rosina",
  "Roslyn",
  "Ross",
  "Rossie",
  "Rowan",
  "Rowena",
  "Rowland",
  "Roxane",
  "Roxanne",
  "Roy",
  "Royal",
  "Royce",
  "Rozella",
  "Ruben",
  "Rubie",
  "Ruby",
  "Rubye",
  "Rudolph",
  "Rudy",
  "Rupert",
  "Russ",
  "Russel",
  "Russell",
  "Rusty",
  "Ruth",
  "Ruthe",
  "Ruthie",
  "Ryan",
  "Ryann",
  "Ryder",
  "Rylan",
  "Rylee",
  "Ryleigh",
  "Ryley",
  "Sabina",
  "Sabrina",
  "Sabryna",
  "Sadie",
  "Sadye",
  "Sage",
  "Saige",
  "Sallie",
  "Sally",
  "Salma",
  "Salvador",
  "Salvatore",
  "Sam",
  "Samanta",
  "Samantha",
  "Samara",
  "Samir",
  "Sammie",
  "Sammy",
  "Samson",
  "Sandra",
  "Sandrine",
  "Sandy",
  "Sanford",
  "Santa",
  "Santiago",
  "Santina",
  "Santino",
  "Santos",
  "Sarah",
  "Sarai",
  "Sarina",
  "Sasha",
  "Saul",
  "Savanah",
  "Savanna",
  "Savannah",
  "Savion",
  "Scarlett",
  "Schuyler",
  "Scot",
  "Scottie",
  "Scotty",
  "Seamus",
  "Sean",
  "Sebastian",
  "Sedrick",
  "Selena",
  "Selina",
  "Selmer",
  "Serena",
  "Serenity",
  "Seth",
  "Shad",
  "Shaina",
  "Shakira",
  "Shana",
  "Shane",
  "Shanel",
  "Shanelle",
  "Shania",
  "Shanie",
  "Shaniya",
  "Shanna",
  "Shannon",
  "Shanny",
  "Shanon",
  "Shany",
  "Sharon",
  "Shaun",
  "Shawn",
  "Shawna",
  "Shaylee",
  "Shayna",
  "Shayne",
  "Shea",
  "Sheila",
  "Sheldon",
  "Shemar",
  "Sheridan",
  "Sherman",
  "Sherwood",
  "Shirley",
  "Shyann",
  "Shyanne",
  "Sibyl",
  "Sid",
  "Sidney",
  "Sienna",
  "Sierra",
  "Sigmund",
  "Sigrid",
  "Sigurd",
  "Silas",
  "Sim",
  "Simeon",
  "Simone",
  "Sincere",
  "Sister",
  "Skye",
  "Skyla",
  "Skylar",
  "Sofia",
  "Soledad",
  "Solon",
  "Sonia",
  "Sonny",
  "Sonya",
  "Sophia",
  "Sophie",
  "Spencer",
  "Stacey",
  "Stacy",
  "Stan",
  "Stanford",
  "Stanley",
  "Stanton",
  "Stefan",
  "Stefanie",
  "Stella",
  "Stephan",
  "Stephania",
  "Stephanie",
  "Stephany",
  "Stephen",
  "Stephon",
  "Sterling",
  "Steve",
  "Stevie",
  "Stewart",
  "Stone",
  "Stuart",
  "Summer",
  "Sunny",
  "Susan",
  "Susana",
  "Susanna",
  "Susie",
  "Suzanne",
  "Sven",
  "Syble",
  "Sydnee",
  "Sydney",
  "Sydni",
  "Sydnie",
  "Sylvan",
  "Sylvester",
  "Sylvia",
  "Tabitha",
  "Tad",
  "Talia",
  "Talon",
  "Tamara",
  "Tamia",
  "Tania",
  "Tanner",
  "Tanya",
  "Tara",
  "Taryn",
  "Tate",
  "Tatum",
  "Tatyana",
  "Taurean",
  "Tavares",
  "Taya",
  "Taylor",
  "Teagan",
  "Ted",
  "Telly",
  "Terence",
  "Teresa",
  "Terrance",
  "Terrell",
  "Terrence",
  "Terrill",
  "Terry",
  "Tess",
  "Tessie",
  "Tevin",
  "Thad",
  "Thaddeus",
  "Thalia",
  "Thea",
  "Thelma",
  "Theo",
  "Theodora",
  "Theodore",
  "Theresa",
  "Therese",
  "Theresia",
  "Theron",
  "Thomas",
  "Thora",
  "Thurman",
  "Tia",
  "Tiana",
  "Tianna",
  "Tiara",
  "Tierra",
  "Tiffany",
  "Tillman",
  "Timmothy",
  "Timmy",
  "Timothy",
  "Tina",
  "Tito",
  "Titus",
  "Tobin",
  "Toby",
  "Tod",
  "Tom",
  "Tomas",
  "Tomasa",
  "Tommie",
  "Toney",
  "Toni",
  "Tony",
  "Torey",
  "Torrance",
  "Torrey",
  "Toy",
  "Trace",
  "Tracey",
  "Tracy",
  "Travis",
  "Travon",
  "Tre",
  "Tremaine",
  "Tremayne",
  "Trent",
  "Trenton",
  "Tressa",
  "Tressie",
  "Treva",
  "Trever",
  "Trevion",
  "Trevor",
  "Trey",
  "Trinity",
  "Trisha",
  "Tristian",
  "Tristin",
  "Triston",
  "Troy",
  "Trudie",
  "Trycia",
  "Trystan",
  "Turner",
  "Twila",
  "Tyler",
  "Tyra",
  "Tyree",
  "Tyreek",
  "Tyrel",
  "Tyrell",
  "Tyrese",
  "Tyrique",
  "Tyshawn",
  "Tyson",
  "Ubaldo",
  "Ulices",
  "Ulises",
  "Una",
  "Unique",
  "Urban",
  "Uriah",
  "Uriel",
  "Ursula",
  "Vada",
  "Valentin",
  "Valentina",
  "Valentine",
  "Valerie",
  "Vallie",
  "Van",
  "Vance",
  "Vanessa",
  "Vaughn",
  "Veda",
  "Velda",
  "Vella",
  "Velma",
  "Velva",
  "Vena",
  "Verda",
  "Verdie",
  "Vergie",
  "Verla",
  "Verlie",
  "Vern",
  "Verna",
  "Verner",
  "Vernice",
  "Vernie",
  "Vernon",
  "Verona",
  "Veronica",
  "Vesta",
  "Vicenta",
  "Vicente",
  "Vickie",
  "Vicky",
  "Victor",
  "Victoria",
  "Vida",
  "Vidal",
  "Vilma",
  "Vince",
  "Vincent",
  "Vincenza",
  "Vincenzo",
  "Vinnie",
  "Viola",
  "Violet",
  "Violette",
  "Virgie",
  "Virgil",
  "Virginia",
  "Virginie",
  "Vita",
  "Vito",
  "Viva",
  "Vivian",
  "Viviane",
  "Vivianne",
  "Vivien",
  "Vivienne",
  "Vladimir",
  "Wade",
  "Waino",
  "Waldo",
  "Walker",
  "Wallace",
  "Walter",
  "Walton",
  "Wanda",
  "Ward",
  "Warren",
  "Watson",
  "Wava",
  "Waylon",
  "Wayne",
  "Webster",
  "Weldon",
  "Wellington",
  "Wendell",
  "Wendy",
  "Werner",
  "Westley",
  "Weston",
  "Whitney",
  "Wilber",
  "Wilbert",
  "Wilburn",
  "Wiley",
  "Wilford",
  "Wilfred",
  "Wilfredo",
  "Wilfrid",
  "Wilhelm",
  "Wilhelmine",
  "Will",
  "Willa",
  "Willard",
  "William",
  "Willie",
  "Willis",
  "Willow",
  "Willy",
  "Wilma",
  "Wilmer",
  "Wilson",
  "Wilton",
  "Winfield",
  "Winifred",
  "Winnifred",
  "Winona",
  "Winston",
  "Woodrow",
  "Wyatt",
  "Wyman",
  "Xander",
  "Xavier",
  "Xzavier",
  "Yadira",
  "Yasmeen",
  "Yasmin",
  "Yasmine",
  "Yazmin",
  "Yesenia",
  "Yessenia",
  "Yolanda",
  "Yoshiko",
  "Yvette",
  "Yvonne",
  "Zachariah",
  "Zachary",
  "Zachery",
  "Zack",
  "Zackary",
  "Zackery",
  "Zakary",
  "Zander",
  "Zane",
  "Zaria",
  "Zechariah",
  "Zelda",
  "Zella",
  "Zelma",
  "Zena",
  "Zetta",
  "Zion",
  "Zita",
  "Zoe",
  "Zoey",
  "Zoie",
  "Zoila",
  "Zola",
  "Zora",
  "Zula"
];

},{}],162:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":161,"./last_name":163,"./name":164,"./prefix":165,"./suffix":166,"./title":167}],163:[function(require,module,exports){
module["exports"] = [
  "Abbott",
  "Abernathy",
  "Abshire",
  "Adams",
  "Altenwerth",
  "Anderson",
  "Ankunding",
  "Armstrong",
  "Auer",
  "Aufderhar",
  "Bahringer",
  "Bailey",
  "Balistreri",
  "Barrows",
  "Bartell",
  "Bartoletti",
  "Barton",
  "Bashirian",
  "Batz",
  "Bauch",
  "Baumbach",
  "Bayer",
  "Beahan",
  "Beatty",
  "Bechtelar",
  "Becker",
  "Bednar",
  "Beer",
  "Beier",
  "Berge",
  "Bergnaum",
  "Bergstrom",
  "Bernhard",
  "Bernier",
  "Bins",
  "Blanda",
  "Blick",
  "Block",
  "Bode",
  "Boehm",
  "Bogan",
  "Bogisich",
  "Borer",
  "Bosco",
  "Botsford",
  "Boyer",
  "Boyle",
  "Bradtke",
  "Brakus",
  "Braun",
  "Breitenberg",
  "Brekke",
  "Brown",
  "Bruen",
  "Buckridge",
  "Carroll",
  "Carter",
  "Cartwright",
  "Casper",
  "Cassin",
  "Champlin",
  "Christiansen",
  "Cole",
  "Collier",
  "Collins",
  "Conn",
  "Connelly",
  "Conroy",
  "Considine",
  "Corkery",
  "Cormier",
  "Corwin",
  "Cremin",
  "Crist",
  "Crona",
  "Cronin",
  "Crooks",
  "Cruickshank",
  "Cummerata",
  "Cummings",
  "Dach",
  "D'Amore",
  "Daniel",
  "Dare",
  "Daugherty",
  "Davis",
  "Deckow",
  "Denesik",
  "Dibbert",
  "Dickens",
  "Dicki",
  "Dickinson",
  "Dietrich",
  "Donnelly",
  "Dooley",
  "Douglas",
  "Doyle",
  "DuBuque",
  "Durgan",
  "Ebert",
  "Effertz",
  "Eichmann",
  "Emard",
  "Emmerich",
  "Erdman",
  "Ernser",
  "Fadel",
  "Fahey",
  "Farrell",
  "Fay",
  "Feeney",
  "Feest",
  "Feil",
  "Ferry",
  "Fisher",
  "Flatley",
  "Frami",
  "Franecki",
  "Friesen",
  "Fritsch",
  "Funk",
  "Gaylord",
  "Gerhold",
  "Gerlach",
  "Gibson",
  "Gislason",
  "Gleason",
  "Gleichner",
  "Glover",
  "Goldner",
  "Goodwin",
  "Gorczany",
  "Gottlieb",
  "Goyette",
  "Grady",
  "Graham",
  "Grant",
  "Green",
  "Greenfelder",
  "Greenholt",
  "Grimes",
  "Gulgowski",
  "Gusikowski",
  "Gutkowski",
  "Gutmann",
  "Haag",
  "Hackett",
  "Hagenes",
  "Hahn",
  "Haley",
  "Halvorson",
  "Hamill",
  "Hammes",
  "Hand",
  "Hane",
  "Hansen",
  "Harber",
  "Harris",
  "Hartmann",
  "Harvey",
  "Hauck",
  "Hayes",
  "Heaney",
  "Heathcote",
  "Hegmann",
  "Heidenreich",
  "Heller",
  "Herman",
  "Hermann",
  "Hermiston",
  "Herzog",
  "Hessel",
  "Hettinger",
  "Hickle",
  "Hilll",
  "Hills",
  "Hilpert",
  "Hintz",
  "Hirthe",
  "Hodkiewicz",
  "Hoeger",
  "Homenick",
  "Hoppe",
  "Howe",
  "Howell",
  "Hudson",
  "Huel",
  "Huels",
  "Hyatt",
  "Jacobi",
  "Jacobs",
  "Jacobson",
  "Jakubowski",
  "Jaskolski",
  "Jast",
  "Jenkins",
  "Jerde",
  "Johns",
  "Johnson",
  "Johnston",
  "Jones",
  "Kassulke",
  "Kautzer",
  "Keebler",
  "Keeling",
  "Kemmer",
  "Kerluke",
  "Kertzmann",
  "Kessler",
  "Kiehn",
  "Kihn",
  "Kilback",
  "King",
  "Kirlin",
  "Klein",
  "Kling",
  "Klocko",
  "Koch",
  "Koelpin",
  "Koepp",
  "Kohler",
  "Konopelski",
  "Koss",
  "Kovacek",
  "Kozey",
  "Krajcik",
  "Kreiger",
  "Kris",
  "Kshlerin",
  "Kub",
  "Kuhic",
  "Kuhlman",
  "Kuhn",
  "Kulas",
  "Kunde",
  "Kunze",
  "Kuphal",
  "Kutch",
  "Kuvalis",
  "Labadie",
  "Lakin",
  "Lang",
  "Langosh",
  "Langworth",
  "Larkin",
  "Larson",
  "Leannon",
  "Lebsack",
  "Ledner",
  "Leffler",
  "Legros",
  "Lehner",
  "Lemke",
  "Lesch",
  "Leuschke",
  "Lind",
  "Lindgren",
  "Littel",
  "Little",
  "Lockman",
  "Lowe",
  "Lubowitz",
  "Lueilwitz",
  "Luettgen",
  "Lynch",
  "Macejkovic",
  "MacGyver",
  "Maggio",
  "Mann",
  "Mante",
  "Marks",
  "Marquardt",
  "Marvin",
  "Mayer",
  "Mayert",
  "McClure",
  "McCullough",
  "McDermott",
  "McGlynn",
  "McKenzie",
  "McLaughlin",
  "Medhurst",
  "Mertz",
  "Metz",
  "Miller",
  "Mills",
  "Mitchell",
  "Moen",
  "Mohr",
  "Monahan",
  "Moore",
  "Morar",
  "Morissette",
  "Mosciski",
  "Mraz",
  "Mueller",
  "Muller",
  "Murazik",
  "Murphy",
  "Murray",
  "Nader",
  "Nicolas",
  "Nienow",
  "Nikolaus",
  "Nitzsche",
  "Nolan",
  "Oberbrunner",
  "O'Connell",
  "O'Conner",
  "O'Hara",
  "O'Keefe",
  "O'Kon",
  "Okuneva",
  "Olson",
  "Ondricka",
  "O'Reilly",
  "Orn",
  "Ortiz",
  "Osinski",
  "Pacocha",
  "Padberg",
  "Pagac",
  "Parisian",
  "Parker",
  "Paucek",
  "Pfannerstill",
  "Pfeffer",
  "Pollich",
  "Pouros",
  "Powlowski",
  "Predovic",
  "Price",
  "Prohaska",
  "Prosacco",
  "Purdy",
  "Quigley",
  "Quitzon",
  "Rath",
  "Ratke",
  "Rau",
  "Raynor",
  "Reichel",
  "Reichert",
  "Reilly",
  "Reinger",
  "Rempel",
  "Renner",
  "Reynolds",
  "Rice",
  "Rippin",
  "Ritchie",
  "Robel",
  "Roberts",
  "Rodriguez",
  "Rogahn",
  "Rohan",
  "Rolfson",
  "Romaguera",
  "Roob",
  "Rosenbaum",
  "Rowe",
  "Ruecker",
  "Runolfsdottir",
  "Runolfsson",
  "Runte",
  "Russel",
  "Rutherford",
  "Ryan",
  "Sanford",
  "Satterfield",
  "Sauer",
  "Sawayn",
  "Schaden",
  "Schaefer",
  "Schamberger",
  "Schiller",
  "Schimmel",
  "Schinner",
  "Schmeler",
  "Schmidt",
  "Schmitt",
  "Schneider",
  "Schoen",
  "Schowalter",
  "Schroeder",
  "Schulist",
  "Schultz",
  "Schumm",
  "Schuppe",
  "Schuster",
  "Senger",
  "Shanahan",
  "Shields",
  "Simonis",
  "Sipes",
  "Skiles",
  "Smith",
  "Smitham",
  "Spencer",
  "Spinka",
  "Sporer",
  "Stamm",
  "Stanton",
  "Stark",
  "Stehr",
  "Steuber",
  "Stiedemann",
  "Stokes",
  "Stoltenberg",
  "Stracke",
  "Streich",
  "Stroman",
  "Strosin",
  "Swaniawski",
  "Swift",
  "Terry",
  "Thiel",
  "Thompson",
  "Tillman",
  "Torp",
  "Torphy",
  "Towne",
  "Toy",
  "Trantow",
  "Tremblay",
  "Treutel",
  "Tromp",
  "Turcotte",
  "Turner",
  "Ullrich",
  "Upton",
  "Vandervort",
  "Veum",
  "Volkman",
  "Von",
  "VonRueden",
  "Waelchi",
  "Walker",
  "Walsh",
  "Walter",
  "Ward",
  "Waters",
  "Watsica",
  "Weber",
  "Wehner",
  "Weimann",
  "Weissnat",
  "Welch",
  "West",
  "White",
  "Wiegand",
  "Wilderman",
  "Wilkinson",
  "Will",
  "Williamson",
  "Willms",
  "Windler",
  "Wintheiser",
  "Wisoky",
  "Wisozk",
  "Witting",
  "Wiza",
  "Wolf",
  "Wolff",
  "Wuckert",
  "Wunsch",
  "Wyman",
  "Yost",
  "Yundt",
  "Zboncak",
  "Zemlak",
  "Ziemann",
  "Zieme",
  "Zulauf"
];

},{}],164:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name} #{suffix}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],165:[function(require,module,exports){
module["exports"] = [
  "Mr.",
  "Mrs.",
  "Ms.",
  "Miss",
  "Dr."
];

},{}],166:[function(require,module,exports){
module["exports"] = [
  "Jr.",
  "Sr.",
  "I",
  "II",
  "III",
  "IV",
  "V",
  "MD",
  "DDS",
  "PhD",
  "DVM"
];

},{}],167:[function(require,module,exports){
module["exports"] = {
  "descriptor": [
    "Lead",
    "Senior",
    "Direct",
    "Corporate",
    "Dynamic",
    "Future",
    "Product",
    "National",
    "Regional",
    "District",
    "Central",
    "Global",
    "Customer",
    "Investor",
    "Dynamic",
    "International",
    "Legacy",
    "Forward",
    "Internal",
    "Human",
    "Chief",
    "Principal"
  ],
  "level": [
    "Solutions",
    "Program",
    "Brand",
    "Security",
    "Research",
    "Marketing",
    "Directives",
    "Implementation",
    "Integration",
    "Functionality",
    "Response",
    "Paradigm",
    "Tactics",
    "Identity",
    "Markets",
    "Group",
    "Division",
    "Applications",
    "Optimization",
    "Operations",
    "Infrastructure",
    "Intranet",
    "Communications",
    "Web",
    "Branding",
    "Quality",
    "Assurance",
    "Mobility",
    "Accounts",
    "Data",
    "Creative",
    "Configuration",
    "Accountability",
    "Interactions",
    "Factors",
    "Usability",
    "Metrics"
  ],
  "job": [
    "Supervisor",
    "Associate",
    "Executive",
    "Liason",
    "Officer",
    "Manager",
    "Engineer",
    "Specialist",
    "Director",
    "Coordinator",
    "Administrator",
    "Architect",
    "Analyst",
    "Designer",
    "Planner",
    "Orchestrator",
    "Technician",
    "Developer",
    "Producer",
    "Consultant",
    "Assistant",
    "Facilitator",
    "Agent",
    "Representative",
    "Strategist"
  ]
};

},{}],168:[function(require,module,exports){
module["exports"] = [
  "###-###-####",
  "(###) ###-####",
  "1-###-###-####",
  "###.###.####",
  "###-###-####",
  "(###) ###-####",
  "1-###-###-####",
  "###.###.####",
  "###-###-#### x###",
  "(###) ###-#### x###",
  "1-###-###-#### x###",
  "###.###.#### x###",
  "###-###-#### x####",
  "(###) ###-#### x####",
  "1-###-###-#### x####",
  "###.###.#### x####",
  "###-###-#### x#####",
  "(###) ###-#### x#####",
  "1-###-###-#### x#####",
  "###.###.#### x#####"
];

},{}],169:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":168,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],170:[function(require,module,exports){
module["exports"] = [
  "ants",
  "bats",
  "bears",
  "bees",
  "birds",
  "buffalo",
  "cats",
  "chickens",
  "cattle",
  "dogs",
  "dolphins",
  "ducks",
  "elephants",
  "fishes",
  "foxes",
  "frogs",
  "geese",
  "goats",
  "horses",
  "kangaroos",
  "lions",
  "monkeys",
  "owls",
  "oxen",
  "penguins",
  "people",
  "pigs",
  "rabbits",
  "sheep",
  "tigers",
  "whales",
  "wolves",
  "zebras",
  "banshees",
  "crows",
  "black cats",
  "chimeras",
  "ghosts",
  "conspirators",
  "dragons",
  "dwarves",
  "elves",
  "enchanters",
  "exorcists",
  "sons",
  "foes",
  "giants",
  "gnomes",
  "goblins",
  "gooses",
  "griffins",
  "lycanthropes",
  "nemesis",
  "ogres",
  "oracles",
  "prophets",
  "sorcerors",
  "spiders",
  "spirits",
  "vampires",
  "warlocks",
  "vixens",
  "werewolves",
  "witches",
  "worshipers",
  "zombies",
  "druids"
];

},{}],171:[function(require,module,exports){
var team = {};
module['exports'] = team;
team.creature = require("./creature");
team.name = require("./name");

},{"./creature":170,"./name":172}],172:[function(require,module,exports){
module["exports"] = [
  "#{Address.state} #{creature}"
];

},{}],173:[function(require,module,exports){
module["exports"] = [
  "####",
  "###",
  "##"
];

},{}],174:[function(require,module,exports){
module["exports"] = [
  "Australia"
];

},{}],175:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.state_abbr = require("./state_abbr");
address.state = require("./state");
address.postcode = require("./postcode");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.default_country = require("./default_country");

},{"./building_number":173,"./default_country":174,"./postcode":176,"./state":177,"./state_abbr":178,"./street_suffix":179}],176:[function(require,module,exports){
module["exports"] = [
  "0###",
  "2###",
  "3###",
  "4###",
  "5###",
  "6###",
  "7###"
];

},{}],177:[function(require,module,exports){
module["exports"] = [
  "New South Wales",
  "Queensland",
  "Northern Territory",
  "South Australia",
  "Western Australia",
  "Tasmania",
  "Australian Capital Territory",
  "Victoria"
];

},{}],178:[function(require,module,exports){
module["exports"] = [
  "NSW",
  "QLD",
  "NT",
  "SA",
  "WA",
  "TAS",
  "ACT",
  "VIC"
];

},{}],179:[function(require,module,exports){
module["exports"] = [
  "Avenue",
  "Boulevard",
  "Circle",
  "Circuit",
  "Court",
  "Crescent",
  "Crest",
  "Drive",
  "Estate Dr",
  "Grove",
  "Hill",
  "Island",
  "Junction",
  "Knoll",
  "Lane",
  "Loop",
  "Mall",
  "Manor",
  "Meadow",
  "Mews",
  "Parade",
  "Parkway",
  "Pass",
  "Place",
  "Plaza",
  "Ridge",
  "Road",
  "Run",
  "Square",
  "Station St",
  "Street",
  "Summit",
  "Terrace",
  "Track",
  "Trail",
  "View Rd",
  "Way"
];

},{}],180:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");

},{"./suffix":181}],181:[function(require,module,exports){
module["exports"] = [
  "Pty Ltd",
  "and Sons",
  "Corp",
  "Group",
  "Brothers",
  "Partners"
];

},{}],182:[function(require,module,exports){
var en_AU = {};
module['exports'] = en_AU;
en_AU.title = "Australia (English)";
en_AU.name = require("./name");
en_AU.company = require("./company");
en_AU.internet = require("./internet");
en_AU.address = require("./address");
en_AU.phone_number = require("./phone_number");

},{"./address":175,"./company":180,"./internet":184,"./name":186,"./phone_number":189}],183:[function(require,module,exports){
module["exports"] = [
  "com.au",
  "com",
  "net.au",
  "net",
  "org.au",
  "org"
];

},{}],184:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":183,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],185:[function(require,module,exports){
module["exports"] = [
  "William",
  "Jack",
  "Oliver",
  "Joshua",
  "Thomas",
  "Lachlan",
  "Cooper",
  "Noah",
  "Ethan",
  "Lucas",
  "James",
  "Samuel",
  "Jacob",
  "Liam",
  "Alexander",
  "Benjamin",
  "Max",
  "Isaac",
  "Daniel",
  "Riley",
  "Ryan",
  "Charlie",
  "Tyler",
  "Jake",
  "Matthew",
  "Xavier",
  "Harry",
  "Jayden",
  "Nicholas",
  "Harrison",
  "Levi",
  "Luke",
  "Adam",
  "Henry",
  "Aiden",
  "Dylan",
  "Oscar",
  "Michael",
  "Jackson",
  "Logan",
  "Joseph",
  "Blake",
  "Nathan",
  "Connor",
  "Elijah",
  "Nate",
  "Archie",
  "Bailey",
  "Marcus",
  "Cameron",
  "Jordan",
  "Zachary",
  "Caleb",
  "Hunter",
  "Ashton",
  "Toby",
  "Aidan",
  "Hayden",
  "Mason",
  "Hamish",
  "Edward",
  "Angus",
  "Eli",
  "Sebastian",
  "Christian",
  "Patrick",
  "Andrew",
  "Anthony",
  "Luca",
  "Kai",
  "Beau",
  "Alex",
  "George",
  "Callum",
  "Finn",
  "Zac",
  "Mitchell",
  "Jett",
  "Jesse",
  "Gabriel",
  "Leo",
  "Declan",
  "Charles",
  "Jasper",
  "Jonathan",
  "Aaron",
  "Hugo",
  "David",
  "Christopher",
  "Chase",
  "Owen",
  "Justin",
  "Ali",
  "Darcy",
  "Lincoln",
  "Cody",
  "Phoenix",
  "Sam",
  "John",
  "Joel",
  "Isabella",
  "Ruby",
  "Chloe",
  "Olivia",
  "Charlotte",
  "Mia",
  "Lily",
  "Emily",
  "Ella",
  "Sienna",
  "Sophie",
  "Amelia",
  "Grace",
  "Ava",
  "Zoe",
  "Emma",
  "Sophia",
  "Matilda",
  "Hannah",
  "Jessica",
  "Lucy",
  "Georgia",
  "Sarah",
  "Abigail",
  "Zara",
  "Eva",
  "Scarlett",
  "Jasmine",
  "Chelsea",
  "Lilly",
  "Ivy",
  "Isla",
  "Evie",
  "Isabelle",
  "Maddison",
  "Layla",
  "Summer",
  "Annabelle",
  "Alexis",
  "Elizabeth",
  "Bella",
  "Holly",
  "Lara",
  "Madison",
  "Alyssa",
  "Maya",
  "Tahlia",
  "Claire",
  "Hayley",
  "Imogen",
  "Jade",
  "Ellie",
  "Sofia",
  "Addison",
  "Molly",
  "Phoebe",
  "Alice",
  "Savannah",
  "Gabriella",
  "Kayla",
  "Mikayla",
  "Abbey",
  "Eliza",
  "Willow",
  "Alexandra",
  "Poppy",
  "Samantha",
  "Stella",
  "Amy",
  "Amelie",
  "Anna",
  "Piper",
  "Gemma",
  "Isabel",
  "Victoria",
  "Stephanie",
  "Caitlin",
  "Heidi",
  "Paige",
  "Rose",
  "Amber",
  "Audrey",
  "Claudia",
  "Taylor",
  "Madeline",
  "Angelina",
  "Natalie",
  "Charli",
  "Lauren",
  "Ashley",
  "Violet",
  "Mackenzie",
  "Abby",
  "Skye",
  "Lillian",
  "Alana",
  "Lola",
  "Leah",
  "Eve",
  "Kiara"
];

},{}],186:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");

},{"./first_name":185,"./last_name":187}],187:[function(require,module,exports){
module["exports"] = [
  "Smith",
  "Jones",
  "Williams",
  "Brown",
  "Wilson",
  "Taylor",
  "Johnson",
  "White",
  "Martin",
  "Anderson",
  "Thompson",
  "Nguyen",
  "Thomas",
  "Walker",
  "Harris",
  "Lee",
  "Ryan",
  "Robinson",
  "Kelly",
  "King",
  "Davis",
  "Wright",
  "Evans",
  "Roberts",
  "Green",
  "Hall",
  "Wood",
  "Jackson",
  "Clarke",
  "Patel",
  "Khan",
  "Lewis",
  "James",
  "Phillips",
  "Mason",
  "Mitchell",
  "Rose",
  "Davies",
  "Rodriguez",
  "Cox",
  "Alexander",
  "Garden",
  "Campbell",
  "Johnston",
  "Moore",
  "Smyth",
  "O'neill",
  "Doherty",
  "Stewart",
  "Quinn",
  "Murphy",
  "Graham",
  "Mclaughlin",
  "Hamilton",
  "Murray",
  "Hughes",
  "Robertson",
  "Thomson",
  "Scott",
  "Macdonald",
  "Reid",
  "Clark",
  "Ross",
  "Young",
  "Watson",
  "Paterson",
  "Morrison",
  "Morgan",
  "Griffiths",
  "Edwards",
  "Rees",
  "Jenkins",
  "Owen",
  "Price",
  "Moss",
  "Richards",
  "Abbott",
  "Adams",
  "Armstrong",
  "Bahringer",
  "Bailey",
  "Barrows",
  "Bartell",
  "Bartoletti",
  "Barton",
  "Bauch",
  "Baumbach",
  "Bayer",
  "Beahan",
  "Beatty",
  "Becker",
  "Beier",
  "Berge",
  "Bergstrom",
  "Bode",
  "Bogan",
  "Borer",
  "Bosco",
  "Botsford",
  "Boyer",
  "Boyle",
  "Braun",
  "Bruen",
  "Carroll",
  "Carter",
  "Cartwright",
  "Casper",
  "Cassin",
  "Champlin",
  "Christiansen",
  "Cole",
  "Collier",
  "Collins",
  "Connelly",
  "Conroy",
  "Corkery",
  "Cormier",
  "Corwin",
  "Cronin",
  "Crooks",
  "Cruickshank",
  "Cummings",
  "D'amore",
  "Daniel",
  "Dare",
  "Daugherty",
  "Dickens",
  "Dickinson",
  "Dietrich",
  "Donnelly",
  "Dooley",
  "Douglas",
  "Doyle",
  "Durgan",
  "Ebert",
  "Emard",
  "Emmerich",
  "Erdman",
  "Ernser",
  "Fadel",
  "Fahey",
  "Farrell",
  "Fay",
  "Feeney",
  "Feil",
  "Ferry",
  "Fisher",
  "Flatley",
  "Gibson",
  "Gleason",
  "Glover",
  "Goldner",
  "Goodwin",
  "Grady",
  "Grant",
  "Greenfelder",
  "Greenholt",
  "Grimes",
  "Gutmann",
  "Hackett",
  "Hahn",
  "Haley",
  "Hammes",
  "Hand",
  "Hane",
  "Hansen",
  "Harber",
  "Hartmann",
  "Harvey",
  "Hayes",
  "Heaney",
  "Heathcote",
  "Heller",
  "Hermann",
  "Hermiston",
  "Hessel",
  "Hettinger",
  "Hickle",
  "Hill",
  "Hills",
  "Hoppe",
  "Howe",
  "Howell",
  "Hudson",
  "Huel",
  "Hyatt",
  "Jacobi",
  "Jacobs",
  "Jacobson",
  "Jerde",
  "Johns",
  "Keeling",
  "Kemmer",
  "Kessler",
  "Kiehn",
  "Kirlin",
  "Klein",
  "Koch",
  "Koelpin",
  "Kohler",
  "Koss",
  "Kovacek",
  "Kreiger",
  "Kris",
  "Kuhlman",
  "Kuhn",
  "Kulas",
  "Kunde",
  "Kutch",
  "Lakin",
  "Lang",
  "Langworth",
  "Larkin",
  "Larson",
  "Leannon",
  "Leffler",
  "Little",
  "Lockman",
  "Lowe",
  "Lynch",
  "Mann",
  "Marks",
  "Marvin",
  "Mayer",
  "Mccullough",
  "Mcdermott",
  "Mckenzie",
  "Miller",
  "Mills",
  "Monahan",
  "Morissette",
  "Mueller",
  "Muller",
  "Nader",
  "Nicolas",
  "Nolan",
  "O'connell",
  "O'conner",
  "O'hara",
  "O'keefe",
  "Olson",
  "O'reilly",
  "Parisian",
  "Parker",
  "Quigley",
  "Reilly",
  "Reynolds",
  "Rice",
  "Ritchie",
  "Rohan",
  "Rolfson",
  "Rowe",
  "Russel",
  "Rutherford",
  "Sanford",
  "Sauer",
  "Schmidt",
  "Schmitt",
  "Schneider",
  "Schroeder",
  "Schultz",
  "Shields",
  "Smitham",
  "Spencer",
  "Stanton",
  "Stark",
  "Stokes",
  "Swift",
  "Tillman",
  "Towne",
  "Tremblay",
  "Tromp",
  "Turcotte",
  "Turner",
  "Walsh",
  "Walter",
  "Ward",
  "Waters",
  "Weber",
  "Welch",
  "West",
  "Wilderman",
  "Wilkinson",
  "Williamson",
  "Windler",
  "Wolf"
];

},{}],188:[function(require,module,exports){
module["exports"] = [
  "0# #### ####",
  "+61 # #### ####",
  "04## ### ###",
  "+61 4## ### ###"
];

},{}],189:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":188,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],190:[function(require,module,exports){
var en_BORK = {};
module['exports'] = en_BORK;
en_BORK.title = "Bork (English)";
en_BORK.lorem = require("./lorem");

},{"./lorem":191}],191:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"./words":192,"/Users/a/dev/faker.js/lib/locales/de/lorem/index.js":38}],192:[function(require,module,exports){
module["exports"] = [
  "Boot",
  "I",
  "Nu",
  "Nur",
  "Tu",
  "Um",
  "a",
  "becoose-a",
  "boot",
  "bork",
  "burn",
  "chuuses",
  "cumplete-a",
  "cun",
  "cunseqooences",
  "curcoomstunces",
  "dee",
  "deeslikes",
  "denuoonceeng",
  "desures",
  "du",
  "eccuoont",
  "ectooel",
  "edfuntege-a",
  "efueeds",
  "egeeen",
  "ell",
  "ere-a",
  "feend",
  "foolt",
  "frum",
  "geefe-a",
  "gesh",
  "greet",
  "heem",
  "heppeeness",
  "hes",
  "hoo",
  "hoomun",
  "idea",
  "ifer",
  "in",
  "incuoonter",
  "injuy",
  "itselff",
  "ixcept",
  "ixemple-a",
  "ixerceese-a",
  "ixpleeen",
  "ixplurer",
  "ixpuoond",
  "ixtremely",
  "knoo",
  "lebureeuoos",
  "lufes",
  "meestekee",
  "mester-booeelder",
  "moost",
  "mun",
  "nu",
  "nut",
  "oobteeen",
  "oocceseeunelly",
  "ooccoor",
  "ooff",
  "oone-a",
  "oor",
  "peeen",
  "peeenffool",
  "physeecel",
  "pleesoore-a",
  "poorsooe-a",
  "poorsooes",
  "preeesing",
  "prucoore-a",
  "prudooces",
  "reeght",
  "reshunelly",
  "resooltunt",
  "sume-a",
  "teecheengs",
  "teke-a",
  "thees",
  "thet",
  "thuse-a",
  "treefiel",
  "troot",
  "tu",
  "tueel",
  "und",
  "undertekes",
  "unnuyeeng",
  "uny",
  "unyune-a",
  "us",
  "veell",
  "veet",
  "ves",
  "vheech",
  "vhu",
  "yuoo",
  "zee",
  "zeere-a"
];

},{}],193:[function(require,module,exports){
module["exports"] = [
  "Canada"
];

},{}],194:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.default_country = require("./default_country");
address.postcode = require('./postcode.js');

},{"./default_country":193,"./postcode.js":195,"./state":196,"./state_abbr":197}],195:[function(require,module,exports){
module["exports"] = [
  "?#? #?#"
];

},{}],196:[function(require,module,exports){
module["exports"] = [
  "Alberta",
  "British Columbia",
  "Manitoba",
  "New Brunswick",
  "Newfoundland and Labrador",
  "Nova Scotia",
  "Northwest Territories",
  "Nunavut",
  "Ontario",
  "Prince Edward Island",
  "Quebec",
  "Saskatchewan",
  "Yukon"
];

},{}],197:[function(require,module,exports){
module["exports"] = [
  "AB",
  "BC",
  "MB",
  "NB",
  "NL",
  "NS",
  "NU",
  "NT",
  "ON",
  "PE",
  "QC",
  "SK",
  "YT"
];

},{}],198:[function(require,module,exports){
var en_CA = {};
module['exports'] = en_CA;
en_CA.title = "Canada (English)";
en_CA.address = require("./address");
en_CA.internet = require("./internet");
en_CA.phone_number = require("./phone_number");

},{"./address":194,"./internet":201,"./phone_number":203}],199:[function(require,module,exports){
module["exports"] = [
  "ca",
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],200:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "yahoo.ca",
  "hotmail.com"
];

},{}],201:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":199,"./free_email":200,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],202:[function(require,module,exports){
module["exports"] = [
  "###-###-####",
  "(###)###-####",
  "###.###.####",
  "1-###-###-####",
  "###-###-#### x###",
  "(###)###-#### x###",
  "1-###-###-#### x###",
  "###.###.#### x###",
  "###-###-#### x####",
  "(###)###-#### x####",
  "1-###-###-#### x####",
  "###.###.#### x####",
  "###-###-#### x#####",
  "(###)###-#### x#####",
  "1-###-###-#### x#####",
  "###.###.#### x#####"
];

},{}],203:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":202,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],204:[function(require,module,exports){
module["exports"] = [
  "Avon",
  "Bedfordshire",
  "Berkshire",
  "Borders",
  "Buckinghamshire",
  "Cambridgeshire",
  "Central",
  "Cheshire",
  "Cleveland",
  "Clwyd",
  "Cornwall",
  "County Antrim",
  "County Armagh",
  "County Down",
  "County Fermanagh",
  "County Londonderry",
  "County Tyrone",
  "Cumbria",
  "Derbyshire",
  "Devon",
  "Dorset",
  "Dumfries and Galloway",
  "Durham",
  "Dyfed",
  "East Sussex",
  "Essex",
  "Fife",
  "Gloucestershire",
  "Grampian",
  "Greater Manchester",
  "Gwent",
  "Gwynedd County",
  "Hampshire",
  "Herefordshire",
  "Hertfordshire",
  "Highlands and Islands",
  "Humberside",
  "Isle of Wight",
  "Kent",
  "Lancashire",
  "Leicestershire",
  "Lincolnshire",
  "Lothian",
  "Merseyside",
  "Mid Glamorgan",
  "Norfolk",
  "North Yorkshire",
  "Northamptonshire",
  "Northumberland",
  "Nottinghamshire",
  "Oxfordshire",
  "Powys",
  "Rutland",
  "Shropshire",
  "Somerset",
  "South Glamorgan",
  "South Yorkshire",
  "Staffordshire",
  "Strathclyde",
  "Suffolk",
  "Surrey",
  "Tayside",
  "Tyne and Wear",
  "Warwickshire",
  "West Glamorgan",
  "West Midlands",
  "West Sussex",
  "West Yorkshire",
  "Wiltshire",
  "Worcestershire"
];

},{}],205:[function(require,module,exports){
module["exports"] = [
  "England",
  "Scotland",
  "Wales",
  "Northern Ireland"
];

},{}],206:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.county = require("./county");
address.uk_country = require("./uk_country");
address.default_country = require("./default_country");

},{"./county":204,"./default_country":205,"./uk_country":207}],207:[function(require,module,exports){
module.exports=require(205)
},{"/Users/a/dev/faker.js/lib/locales/en_GB/address/default_country.js":205}],208:[function(require,module,exports){
module["exports"] = [
  "074## ######",
  "075## ######",
  "076## ######",
  "077## ######",
  "078## ######",
  "079## ######"
];

},{}],209:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":208,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],210:[function(require,module,exports){
var en_GB = {};
module['exports'] = en_GB;
en_GB.title = "Great Britain (English)";
en_GB.address = require("./address");
en_GB.internet = require("./internet");
en_GB.phone_number = require("./phone_number");
en_GB.cell_phone = require("./cell_phone");

},{"./address":206,"./cell_phone":209,"./internet":212,"./phone_number":214}],211:[function(require,module,exports){
module["exports"] = [
  "co.uk",
  "com",
  "biz",
  "info",
  "name"
];

},{}],212:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":211,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],213:[function(require,module,exports){
module["exports"] = [
  "01#### #####",
  "01### ######",
  "01#1 ### ####",
  "011# ### ####",
  "02# #### ####",
  "03## ### ####",
  "055 #### ####",
  "056 #### ####",
  "0800 ### ####",
  "08## ### ####",
  "09## ### ####",
  "016977 ####",
  "01### #####",
  "0500 ######",
  "0800 ######"
];

},{}],214:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":213,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],215:[function(require,module,exports){
module["exports"] = [
  "Carlow",
  "Cavan",
  "Clare",
  "Cork",
  "Donegal",
  "Dublin",
  "Galway",
  "Kerry",
  "Kildare",
  "Kilkenny",
  "Laois",
  "Leitrim",
  "Limerick",
  "Longford",
  "Louth",
  "Mayo",
  "Meath",
  "Monaghan",
  "Offaly",
  "Roscommon",
  "Sligo",
  "Tipperary",
  "Waterford",
  "Westmeath",
  "Wexford",
  "Wicklow"
];

},{}],216:[function(require,module,exports){
module["exports"] = [
  "Ireland"
];

},{}],217:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.county = require("./county");
address.default_country = require("./default_country");

},{"./county":215,"./default_country":216}],218:[function(require,module,exports){
module["exports"] = [
  "082 ### ####",
  "083 ### ####",
  "085 ### ####",
  "086 ### ####",
  "087 ### ####",
  "089 ### ####"
];

},{}],219:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":218,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],220:[function(require,module,exports){
var en_IE = {};
module['exports'] = en_IE;
en_IE.title = "Ireland (English)";
en_IE.address = require("./address");
en_IE.internet = require("./internet");
en_IE.phone_number = require("./phone_number");
en_IE.cell_phone = require("./cell_phone");

},{"./address":217,"./cell_phone":219,"./internet":222,"./phone_number":224}],221:[function(require,module,exports){
module["exports"] = [
  "ie",
  "com",
  "net",
  "info",
  "eu"
];

},{}],222:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":221,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],223:[function(require,module,exports){
module["exports"] = [
  "01 #######",
  "021 #######",
  "022 #######",
  "023 #######",
  "024 #######",
  "025 #######",
  "026 #######",
  "027 #######",
  "028 #######",
  "029 #######",
  "0402 #######",
  "0404 #######",
  "041 #######",
  "042 #######",
  "043 #######",
  "044 #######",
  "045 #######",
  "046 #######",
  "047 #######",
  "049 #######",
  "0504 #######",
  "0505 #######",
  "051 #######",
  "052 #######",
  "053 #######",
  "056 #######",
  "057 #######",
  "058 #######",
  "059 #######",
  "061 #######",
  "062 #######",
  "063 #######",
  "064 #######",
  "065 #######",
  "066 #######",
  "067 #######",
  "068 #######",
  "069 #######",
  "071 #######",
  "074 #######",
  "090 #######",
  "091 #######",
  "093 #######",
  "094 #######",
  "095 #######",
  "096 #######",
  "097 #######",
  "098 #######",
  "099 #######"
];

},{}],224:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":223,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],225:[function(require,module,exports){
module["exports"] = [
  "India",
  "Indian Republic",
  "Bharat",
  "Hindustan"
];

},{}],226:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.default_country = require("./default_country");

},{"./default_country":225,"./postcode":227,"./state":228,"./state_abbr":229}],227:[function(require,module,exports){
module.exports=require(195)
},{"/Users/a/dev/faker.js/lib/locales/en_CA/address/postcode.js":195}],228:[function(require,module,exports){
module["exports"] = [
  "Andra Pradesh",
  "Arunachal Pradesh",
  "Assam",
  "Bihar",
  "Chhattisgarh",
  "Goa",
  "Gujarat",
  "Haryana",
  "Himachal Pradesh",
  "Jammu and Kashmir",
  "Jharkhand",
  "Karnataka",
  "Kerala",
  "Madya Pradesh",
  "Maharashtra",
  "Manipur",
  "Meghalaya",
  "Mizoram",
  "Nagaland",
  "Orissa",
  "Punjab",
  "Rajasthan",
  "Sikkim",
  "Tamil Nadu",
  "Tripura",
  "Uttaranchal",
  "Uttar Pradesh",
  "West Bengal",
  "Andaman and Nicobar Islands",
  "Chandigarh",
  "Dadar and Nagar Haveli",
  "Daman and Diu",
  "Delhi",
  "Lakshadweep",
  "Pondicherry"
];

},{}],229:[function(require,module,exports){
module["exports"] = [
  "AP",
  "AR",
  "AS",
  "BR",
  "CG",
  "DL",
  "GA",
  "GJ",
  "HR",
  "HP",
  "JK",
  "JS",
  "KA",
  "KL",
  "MP",
  "MH",
  "MN",
  "ML",
  "MZ",
  "NL",
  "OR",
  "PB",
  "RJ",
  "SK",
  "TN",
  "TR",
  "UK",
  "UP",
  "WB",
  "AN",
  "CH",
  "DN",
  "DD",
  "LD",
  "PY"
];

},{}],230:[function(require,module,exports){
arguments[4][180][0].apply(exports,arguments)
},{"./suffix":231,"/Users/a/dev/faker.js/lib/locales/en_AU/company/index.js":180}],231:[function(require,module,exports){
module["exports"] = [
  "Pvt Ltd",
  "Limited",
  "Ltd",
  "and Sons",
  "Corp",
  "Group",
  "Brothers"
];

},{}],232:[function(require,module,exports){
var en_IND = {};
module['exports'] = en_IND;
en_IND.title = "India (English)";
en_IND.name = require("./name");
en_IND.address = require("./address");
en_IND.internet = require("./internet");
en_IND.company = require("./company");
en_IND.phone_number = require("./phone_number");

},{"./address":226,"./company":230,"./internet":235,"./name":237,"./phone_number":240}],233:[function(require,module,exports){
module["exports"] = [
  "in",
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org",
  "co.in"
];

},{}],234:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "yahoo.co.in",
  "hotmail.com"
];

},{}],235:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":233,"./free_email":234,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],236:[function(require,module,exports){
module["exports"] = [
  "Aadrika",
  "Aanandinii",
  "Aaratrika",
  "Aarya",
  "Arya",
  "Aashritha",
  "Aatmaja",
  "Atmaja",
  "Abhaya",
  "Adwitiya",
  "Agrata",
  "Ahilya",
  "Ahalya",
  "Aishani",
  "Akshainie",
  "Akshata",
  "Akshita",
  "Akula",
  "Ambar",
  "Amodini",
  "Amrita",
  "Amritambu",
  "Anala",
  "Anamika",
  "Ananda",
  "Anandamayi",
  "Ananta",
  "Anila",
  "Anjali",
  "Anjushri",
  "Anjushree",
  "Annapurna",
  "Anshula",
  "Anuja",
  "Anusuya",
  "Anasuya",
  "Anasooya",
  "Anwesha",
  "Apsara",
  "Aruna",
  "Asha",
  "Aasa",
  "Aasha",
  "Aslesha",
  "Atreyi",
  "Atreyee",
  "Avani",
  "Abani",
  "Avantika",
  "Ayushmati",
  "Baidehi",
  "Vaidehi",
  "Bala",
  "Baala",
  "Balamani",
  "Basanti",
  "Vasanti",
  "Bela",
  "Bhadra",
  "Bhagirathi",
  "Bhagwanti",
  "Bhagwati",
  "Bhamini",
  "Bhanumati",
  "Bhaanumati",
  "Bhargavi",
  "Bhavani",
  "Bhilangana",
  "Bilwa",
  "Bilva",
  "Buddhana",
  "Chakrika",
  "Chanda",
  "Chandi",
  "Chandni",
  "Chandini",
  "Chandani",
  "Chandra",
  "Chandira",
  "Chandrabhaga",
  "Chandrakala",
  "Chandrakin",
  "Chandramani",
  "Chandrani",
  "Chandraprabha",
  "Chandraswaroopa",
  "Chandravati",
  "Chapala",
  "Charumati",
  "Charvi",
  "Chatura",
  "Chitrali",
  "Chitramala",
  "Chitrangada",
  "Daksha",
  "Dakshayani",
  "Damayanti",
  "Darshwana",
  "Deepali",
  "Dipali",
  "Deeptimoyee",
  "Deeptimayee",
  "Devangana",
  "Devani",
  "Devasree",
  "Devi",
  "Daevi",
  "Devika",
  "Daevika",
  "Dhaanyalakshmi",
  "Dhanalakshmi",
  "Dhana",
  "Dhanadeepa",
  "Dhara",
  "Dharani",
  "Dharitri",
  "Dhatri",
  "Diksha",
  "Deeksha",
  "Divya",
  "Draupadi",
  "Dulari",
  "Durga",
  "Durgeshwari",
  "Ekaparnika",
  "Elakshi",
  "Enakshi",
  "Esha",
  "Eshana",
  "Eshita",
  "Gautami",
  "Gayatri",
  "Geeta",
  "Geetanjali",
  "Gitanjali",
  "Gemine",
  "Gemini",
  "Girja",
  "Girija",
  "Gita",
  "Hamsini",
  "Harinakshi",
  "Harita",
  "Heema",
  "Himadri",
  "Himani",
  "Hiranya",
  "Indira",
  "Jaimini",
  "Jaya",
  "Jyoti",
  "Jyotsana",
  "Kali",
  "Kalinda",
  "Kalpana",
  "Kalyani",
  "Kama",
  "Kamala",
  "Kamla",
  "Kanchan",
  "Kanishka",
  "Kanti",
  "Kashyapi",
  "Kumari",
  "Kumuda",
  "Lakshmi",
  "Laxmi",
  "Lalita",
  "Lavanya",
  "Leela",
  "Lila",
  "Leela",
  "Madhuri",
  "Malti",
  "Malati",
  "Mandakini",
  "Mandaakin",
  "Mangala",
  "Mangalya",
  "Mani",
  "Manisha",
  "Manjusha",
  "Meena",
  "Mina",
  "Meenakshi",
  "Minakshi",
  "Menka",
  "Menaka",
  "Mohana",
  "Mohini",
  "Nalini",
  "Nikita",
  "Ojaswini",
  "Omana",
  "Oormila",
  "Urmila",
  "Opalina",
  "Opaline",
  "Padma",
  "Parvati",
  "Poornima",
  "Purnima",
  "Pramila",
  "Prasanna",
  "Preity",
  "Prema",
  "Priya",
  "Priyala",
  "Pushti",
  "Radha",
  "Rageswari",
  "Rageshwari",
  "Rajinder",
  "Ramaa",
  "Rati",
  "Rita",
  "Rohana",
  "Rukhmani",
  "Rukmin",
  "Rupinder",
  "Sanya",
  "Sarada",
  "Sharda",
  "Sarala",
  "Sarla",
  "Saraswati",
  "Sarisha",
  "Saroja",
  "Shakti",
  "Shakuntala",
  "Shanti",
  "Sharmila",
  "Shashi",
  "Shashikala",
  "Sheela",
  "Shivakari",
  "Shobhana",
  "Shresth",
  "Shresthi",
  "Shreya",
  "Shreyashi",
  "Shridevi",
  "Shrishti",
  "Shubha",
  "Shubhaprada",
  "Siddhi",
  "Sitara",
  "Sloka",
  "Smita",
  "Smriti",
  "Soma",
  "Subhashini",
  "Subhasini",
  "Sucheta",
  "Sudeva",
  "Sujata",
  "Sukanya",
  "Suma",
  "Suma",
  "Sumitra",
  "Sunita",
  "Suryakantam",
  "Sushma",
  "Swara",
  "Swarnalata",
  "Sweta",
  "Shwet",
  "Tanirika",
  "Tanushree",
  "Tanushri",
  "Tanushri",
  "Tanya",
  "Tara",
  "Trisha",
  "Uma",
  "Usha",
  "Vaijayanti",
  "Vaijayanthi",
  "Baijayanti",
  "Vaishvi",
  "Vaishnavi",
  "Vaishno",
  "Varalakshmi",
  "Vasudha",
  "Vasundhara",
  "Veda",
  "Vedanshi",
  "Vidya",
  "Vimala",
  "Vrinda",
  "Vrund",
  "Aadi",
  "Aadidev",
  "Aadinath",
  "Aaditya",
  "Aagam",
  "Aagney",
  "Aamod",
  "Aanandaswarup",
  "Anand Swarup",
  "Aanjaneya",
  "Anjaneya",
  "Aaryan",
  "Aryan",
  "Aatmaj",
  "Aatreya",
  "Aayushmaan",
  "Aayushman",
  "Abhaidev",
  "Abhaya",
  "Abhirath",
  "Abhisyanta",
  "Acaryatanaya",
  "Achalesvara",
  "Acharyanandana",
  "Acharyasuta",
  "Achintya",
  "Achyut",
  "Adheesh",
  "Adhiraj",
  "Adhrit",
  "Adikavi",
  "Adinath",
  "Aditeya",
  "Aditya",
  "Adityanandan",
  "Adityanandana",
  "Adripathi",
  "Advaya",
  "Agasti",
  "Agastya",
  "Agneya",
  "Aagneya",
  "Agnimitra",
  "Agniprava",
  "Agnivesh",
  "Agrata",
  "Ajit",
  "Ajeet",
  "Akroor",
  "Akshaj",
  "Akshat",
  "Akshayakeerti",
  "Alok",
  "Aalok",
  "Amaranaath",
  "Amarnath",
  "Amaresh",
  "Ambar",
  "Ameyatma",
  "Amish",
  "Amogh",
  "Amrit",
  "Anaadi",
  "Anagh",
  "Anal",
  "Anand",
  "Aanand",
  "Anang",
  "Anil",
  "Anilaabh",
  "Anilabh",
  "Anish",
  "Ankal",
  "Anunay",
  "Anurag",
  "Anuraag",
  "Archan",
  "Arindam",
  "Arjun",
  "Arnesh",
  "Arun",
  "Ashlesh",
  "Ashok",
  "Atmanand",
  "Atmananda",
  "Avadhesh",
  "Baalaaditya",
  "Baladitya",
  "Baalagopaal",
  "Balgopal",
  "Balagopal",
  "Bahula",
  "Bakula",
  "Bala",
  "Balaaditya",
  "Balachandra",
  "Balagovind",
  "Bandhu",
  "Bandhul",
  "Bankim",
  "Bankimchandra",
  "Bhadrak",
  "Bhadraksh",
  "Bhadran",
  "Bhagavaan",
  "Bhagvan",
  "Bharadwaj",
  "Bhardwaj",
  "Bharat",
  "Bhargava",
  "Bhasvan",
  "Bhaasvan",
  "Bhaswar",
  "Bhaaswar",
  "Bhaumik",
  "Bhaves",
  "Bheeshma",
  "Bhisham",
  "Bhishma",
  "Bhima",
  "Bhoj",
  "Bhramar",
  "Bhudev",
  "Bhudeva",
  "Bhupati",
  "Bhoopati",
  "Bhoopat",
  "Bhupen",
  "Bhushan",
  "Bhooshan",
  "Bhushit",
  "Bhooshit",
  "Bhuvanesh",
  "Bhuvaneshwar",
  "Bilva",
  "Bodhan",
  "Brahma",
  "Brahmabrata",
  "Brahmanandam",
  "Brahmaanand",
  "Brahmdev",
  "Brajendra",
  "Brajesh",
  "Brijesh",
  "Birjesh",
  "Budhil",
  "Chakor",
  "Chakradhar",
  "Chakravartee",
  "Chakravarti",
  "Chanakya",
  "Chaanakya",
  "Chandak",
  "Chandan",
  "Chandra",
  "Chandraayan",
  "Chandrabhan",
  "Chandradev",
  "Chandraketu",
  "Chandramauli",
  "Chandramohan",
  "Chandran",
  "Chandranath",
  "Chapal",
  "Charak",
  "Charuchandra",
  "Chaaruchandra",
  "Charuvrat",
  "Chatur",
  "Chaturaanan",
  "Chaturbhuj",
  "Chetan",
  "Chaten",
  "Chaitan",
  "Chetanaanand",
  "Chidaakaash",
  "Chidaatma",
  "Chidambar",
  "Chidambaram",
  "Chidananda",
  "Chinmayanand",
  "Chinmayananda",
  "Chiranjeev",
  "Chiranjeeve",
  "Chitraksh",
  "Daiwik",
  "Daksha",
  "Damodara",
  "Dandak",
  "Dandapaani",
  "Darshan",
  "Datta",
  "Dayaamay",
  "Dayamayee",
  "Dayaananda",
  "Dayaanidhi",
  "Kin",
  "Deenabandhu",
  "Deepan",
  "Deepankar",
  "Dipankar",
  "Deependra",
  "Dipendra",
  "Deepesh",
  "Dipesh",
  "Deeptanshu",
  "Deeptendu",
  "Diptendu",
  "Deeptiman",
  "Deeptimoy",
  "Deeptimay",
  "Dev",
  "Deb",
  "Devadatt",
  "Devagya",
  "Devajyoti",
  "Devak",
  "Devdan",
  "Deven",
  "Devesh",
  "Deveshwar",
  "Devi",
  "Devvrat",
  "Dhananjay",
  "Dhanapati",
  "Dhanpati",
  "Dhanesh",
  "Dhanu",
  "Dhanvin",
  "Dharmaketu",
  "Dhruv",
  "Dhyanesh",
  "Dhyaneshwar",
  "Digambar",
  "Digambara",
  "Dinakar",
  "Dinkar",
  "Dinesh",
  "Divaakar",
  "Divakar",
  "Deevakar",
  "Divjot",
  "Dron",
  "Drona",
  "Dwaipayan",
  "Dwaipayana",
  "Eekalabya",
  "Ekalavya",
  "Ekaksh",
  "Ekaaksh",
  "Ekaling",
  "Ekdant",
  "Ekadant",
  "Gajaadhar",
  "Gajadhar",
  "Gajbaahu",
  "Gajabahu",
  "Ganak",
  "Ganaka",
  "Ganapati",
  "Gandharv",
  "Gandharva",
  "Ganesh",
  "Gangesh",
  "Garud",
  "Garuda",
  "Gati",
  "Gatik",
  "Gaurang",
  "Gauraang",
  "Gauranga",
  "Gouranga",
  "Gautam",
  "Gautama",
  "Goutam",
  "Ghanaanand",
  "Ghanshyam",
  "Ghanashyam",
  "Giri",
  "Girik",
  "Girika",
  "Girindra",
  "Giriraaj",
  "Giriraj",
  "Girish",
  "Gopal",
  "Gopaal",
  "Gopi",
  "Gopee",
  "Gorakhnath",
  "Gorakhanatha",
  "Goswamee",
  "Goswami",
  "Gotum",
  "Gautam",
  "Govinda",
  "Gobinda",
  "Gudakesha",
  "Gudakesa",
  "Gurdev",
  "Guru",
  "Hari",
  "Harinarayan",
  "Harit",
  "Himadri",
  "Hiranmay",
  "Hiranmaya",
  "Hiranya",
  "Inder",
  "Indra",
  "Indra",
  "Jagadish",
  "Jagadisha",
  "Jagathi",
  "Jagdeep",
  "Jagdish",
  "Jagmeet",
  "Jahnu",
  "Jai",
  "Javas",
  "Jay",
  "Jitendra",
  "Jitender",
  "Jyotis",
  "Kailash",
  "Kama",
  "Kamalesh",
  "Kamlesh",
  "Kanak",
  "Kanaka",
  "Kannan",
  "Kannen",
  "Karan",
  "Karthik",
  "Kartik",
  "Karunanidhi",
  "Kashyap",
  "Kiran",
  "Kirti",
  "Keerti",
  "Krishna",
  "Krishnadas",
  "Krishnadasa",
  "Kumar",
  "Lai",
  "Lakshman",
  "Laxman",
  "Lakshmidhar",
  "Lakshminath",
  "Lal",
  "Laal",
  "Mahendra",
  "Mohinder",
  "Mahesh",
  "Maheswar",
  "Mani",
  "Manik",
  "Manikya",
  "Manoj",
  "Marut",
  "Mayoor",
  "Meghnad",
  "Meghnath",
  "Mohan",
  "Mukesh",
  "Mukul",
  "Nagabhushanam",
  "Nanda",
  "Narayan",
  "Narendra",
  "Narinder",
  "Naveen",
  "Navin",
  "Nawal",
  "Naval",
  "Nimit",
  "Niranjan",
  "Nirbhay",
  "Niro",
  "Param",
  "Paramartha",
  "Pran",
  "Pranay",
  "Prasad",
  "Prathamesh",
  "Prayag",
  "Prem",
  "Puneet",
  "Purushottam",
  "Rahul",
  "Raj",
  "Rajan",
  "Rajendra",
  "Rajinder",
  "Rajiv",
  "Rakesh",
  "Ramesh",
  "Rameshwar",
  "Ranjit",
  "Ranjeet",
  "Ravi",
  "Ritesh",
  "Rohan",
  "Rohit",
  "Rudra",
  "Sachin",
  "Sameer",
  "Samir",
  "Sanjay",
  "Sanka",
  "Sarvin",
  "Satish",
  "Satyen",
  "Shankar",
  "Shantanu",
  "Shashi",
  "Sher",
  "Shiv",
  "Siddarth",
  "Siddhran",
  "Som",
  "Somu",
  "Somnath",
  "Subhash",
  "Subodh",
  "Suman",
  "Suresh",
  "Surya",
  "Suryakant",
  "Suryakanta",
  "Sushil",
  "Susheel",
  "Swami",
  "Swapnil",
  "Tapan",
  "Tara",
  "Tarun",
  "Tej",
  "Tejas",
  "Trilochan",
  "Trilochana",
  "Trilok",
  "Trilokesh",
  "Triloki",
  "Triloki Nath",
  "Trilokanath",
  "Tushar",
  "Udai",
  "Udit",
  "Ujjawal",
  "Ujjwal",
  "Umang",
  "Upendra",
  "Uttam",
  "Vasudev",
  "Vasudeva",
  "Vedang",
  "Vedanga",
  "Vidhya",
  "Vidur",
  "Vidhur",
  "Vijay",
  "Vimal",
  "Vinay",
  "Vishnu",
  "Bishnu",
  "Vishwamitra",
  "Vyas",
  "Yogendra",
  "Yoginder",
  "Yogesh"
];

},{}],237:[function(require,module,exports){
arguments[4][186][0].apply(exports,arguments)
},{"./first_name":236,"./last_name":238,"/Users/a/dev/faker.js/lib/locales/en_AU/name/index.js":186}],238:[function(require,module,exports){
module["exports"] = [
  "Abbott",
  "Achari",
  "Acharya",
  "Adiga",
  "Agarwal",
  "Ahluwalia",
  "Ahuja",
  "Arora",
  "Asan",
  "Bandopadhyay",
  "Banerjee",
  "Bharadwaj",
  "Bhat",
  "Butt",
  "Bhattacharya",
  "Bhattathiri",
  "Chaturvedi",
  "Chattopadhyay",
  "Chopra",
  "Desai",
  "Deshpande",
  "Devar",
  "Dhawan",
  "Dubashi",
  "Dutta",
  "Dwivedi",
  "Embranthiri",
  "Ganaka",
  "Gandhi",
  "Gill",
  "Gowda",
  "Guha",
  "Guneta",
  "Gupta",
  "Iyer",
  "Iyengar",
  "Jain",
  "Jha",
  "Johar",
  "Joshi",
  "Kakkar",
  "Kaniyar",
  "Kapoor",
  "Kaul",
  "Kaur",
  "Khan",
  "Khanna",
  "Khatri",
  "Kocchar",
  "Mahajan",
  "Malik",
  "Marar",
  "Menon",
  "Mehra",
  "Mehrotra",
  "Mishra",
  "Mukhopadhyay",
  "Nayar",
  "Naik",
  "Nair",
  "Nambeesan",
  "Namboothiri",
  "Nehru",
  "Pandey",
  "Panicker",
  "Patel",
  "Patil",
  "Pilla",
  "Pillai",
  "Pothuvaal",
  "Prajapat",
  "Rana",
  "Reddy",
  "Saini",
  "Sethi",
  "Shah",
  "Sharma",
  "Shukla",
  "Singh",
  "Sinha",
  "Somayaji",
  "Tagore",
  "Talwar",
  "Tandon",
  "Trivedi",
  "Varrier",
  "Varma",
  "Varman",
  "Verma"
];

},{}],239:[function(require,module,exports){
module["exports"] = [
  "+91###-###-####",
  "+91##########",
  "+91-###-#######"
];

},{}],240:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":239,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],241:[function(require,module,exports){
module["exports"] = [
  "United States",
  "United States of America",
  "USA"
];

},{}],242:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.default_country = require("./default_country");
address.postcode_by_state = require("./postcode_by_state");

},{"./default_country":241,"./postcode_by_state":243}],243:[function(require,module,exports){
module["exports"] = {
  "AL": "350##",
  "AK": "995##",
  "AS": "967##",
  "AZ": "850##",
  "AR": "717##",
  "CA": "900##",
  "CO": "800##",
  "CT": "061##",
  "DC": "204##",
  "DE": "198##",
  "FL": "322##",
  "GA": "301##",
  "HI": "967##",
  "ID": "832##",
  "IL": "600##",
  "IN": "463##",
  "IA": "510##",
  "KS": "666##",
  "KY": "404##",
  "LA": "701##",
  "ME": "042##",
  "MD": "210##",
  "MA": "026##",
  "MI": "480##",
  "MN": "555##",
  "MS": "387##",
  "MO": "650##",
  "MT": "590##",
  "NE": "688##",
  "NV": "898##",
  "NH": "036##",
  "NJ": "076##",
  "NM": "880##",
  "NY": "122##",
  "NC": "288##",
  "ND": "586##",
  "OH": "444##",
  "OK": "730##",
  "OR": "979##",
  "PA": "186##",
  "RI": "029##",
  "SC": "299##",
  "SD": "577##",
  "TN": "383##",
  "TX": "798##",
  "UT": "847##",
  "VT": "050##",
  "VA": "222##",
  "WA": "990##",
  "WV": "247##",
  "WI": "549##",
  "WY": "831##"
};

},{}],244:[function(require,module,exports){
var en_US = {};
module['exports'] = en_US;
en_US.title = "United States (English)";
en_US.internet = require("./internet");
en_US.address = require("./address");
en_US.phone_number = require("./phone_number");

},{"./address":242,"./internet":246,"./phone_number":249}],245:[function(require,module,exports){
module["exports"] = [
  "com",
  "us",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],246:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":245,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],247:[function(require,module,exports){
module["exports"] = [
  "201",
  "202",
  "203",
  "205",
  "206",
  "207",
  "208",
  "209",
  "210",
  "212",
  "213",
  "214",
  "215",
  "216",
  "217",
  "218",
  "219",
  "224",
  "225",
  "227",
  "228",
  "229",
  "231",
  "234",
  "239",
  "240",
  "248",
  "251",
  "252",
  "253",
  "254",
  "256",
  "260",
  "262",
  "267",
  "269",
  "270",
  "276",
  "281",
  "283",
  "301",
  "302",
  "303",
  "304",
  "305",
  "307",
  "308",
  "309",
  "310",
  "312",
  "313",
  "314",
  "315",
  "316",
  "317",
  "318",
  "319",
  "320",
  "321",
  "323",
  "330",
  "331",
  "334",
  "336",
  "337",
  "339",
  "347",
  "351",
  "352",
  "360",
  "361",
  "386",
  "401",
  "402",
  "404",
  "405",
  "406",
  "407",
  "408",
  "409",
  "410",
  "412",
  "413",
  "414",
  "415",
  "417",
  "419",
  "423",
  "424",
  "425",
  "434",
  "435",
  "440",
  "443",
  "445",
  "464",
  "469",
  "470",
  "475",
  "478",
  "479",
  "480",
  "484",
  "501",
  "502",
  "503",
  "504",
  "505",
  "507",
  "508",
  "509",
  "510",
  "512",
  "513",
  "515",
  "516",
  "517",
  "518",
  "520",
  "530",
  "540",
  "541",
  "551",
  "557",
  "559",
  "561",
  "562",
  "563",
  "564",
  "567",
  "570",
  "571",
  "573",
  "574",
  "580",
  "585",
  "586",
  "601",
  "602",
  "603",
  "605",
  "606",
  "607",
  "608",
  "609",
  "610",
  "612",
  "614",
  "615",
  "616",
  "617",
  "618",
  "619",
  "620",
  "623",
  "626",
  "630",
  "631",
  "636",
  "641",
  "646",
  "650",
  "651",
  "660",
  "661",
  "662",
  "667",
  "678",
  "682",
  "701",
  "702",
  "703",
  "704",
  "706",
  "707",
  "708",
  "712",
  "713",
  "714",
  "715",
  "716",
  "717",
  "718",
  "719",
  "720",
  "724",
  "727",
  "731",
  "732",
  "734",
  "737",
  "740",
  "754",
  "757",
  "760",
  "763",
  "765",
  "770",
  "772",
  "773",
  "774",
  "775",
  "781",
  "785",
  "786",
  "801",
  "802",
  "803",
  "804",
  "805",
  "806",
  "808",
  "810",
  "812",
  "813",
  "814",
  "815",
  "816",
  "817",
  "818",
  "828",
  "830",
  "831",
  "832",
  "835",
  "843",
  "845",
  "847",
  "848",
  "850",
  "856",
  "857",
  "858",
  "859",
  "860",
  "862",
  "863",
  "864",
  "865",
  "870",
  "872",
  "878",
  "901",
  "903",
  "904",
  "906",
  "907",
  "908",
  "909",
  "910",
  "912",
  "913",
  "914",
  "915",
  "916",
  "917",
  "918",
  "919",
  "920",
  "925",
  "928",
  "931",
  "936",
  "937",
  "940",
  "941",
  "947",
  "949",
  "952",
  "954",
  "956",
  "959",
  "970",
  "971",
  "972",
  "973",
  "975",
  "978",
  "979",
  "980",
  "984",
  "985",
  "989"
];

},{}],248:[function(require,module,exports){
module.exports=require(247)
},{"/Users/a/dev/faker.js/lib/locales/en_US/phone_number/area_code.js":247}],249:[function(require,module,exports){
var phone_number = {};
module['exports'] = phone_number;
phone_number.area_code = require("./area_code");
phone_number.exchange_code = require("./exchange_code");

},{"./area_code":247,"./exchange_code":248}],250:[function(require,module,exports){
module.exports=require(173)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/address/building_number.js":173}],251:[function(require,module,exports){
module["exports"] = [
  "#{city_prefix}"
];

},{}],252:[function(require,module,exports){
module["exports"] = [
  "Bondi",
  "Burleigh Heads",
  "Carlton",
  "Fitzroy",
  "Fremantle",
  "Glenelg",
  "Manly",
  "Noosa",
  "Stones Corner",
  "St Kilda",
  "Surry Hills",
  "Yarra Valley"
];

},{}],253:[function(require,module,exports){
module.exports=require(174)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/address/default_country.js":174}],254:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.street_root = require("./street_root");
address.street_name = require("./street_name");
address.city_prefix = require("./city_prefix");
address.city = require("./city");
address.state_abbr = require("./state_abbr");
address.region = require("./region");
address.state = require("./state");
address.postcode = require("./postcode");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.default_country = require("./default_country");

},{"./building_number":250,"./city":251,"./city_prefix":252,"./default_country":253,"./postcode":255,"./region":256,"./state":257,"./state_abbr":258,"./street_name":259,"./street_root":260,"./street_suffix":261}],255:[function(require,module,exports){
module.exports=require(176)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/address/postcode.js":176}],256:[function(require,module,exports){
module["exports"] = [
  "South East Queensland",
  "Wide Bay Burnett",
  "Margaret River",
  "Port Pirie",
  "Gippsland",
  "Elizabeth",
  "Barossa"
];

},{}],257:[function(require,module,exports){
module.exports=require(177)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/address/state.js":177}],258:[function(require,module,exports){
module.exports=require(178)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/address/state_abbr.js":178}],259:[function(require,module,exports){
module.exports=require(26)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_name.js":26}],260:[function(require,module,exports){
module["exports"] = [
  "Ramsay Street",
  "Bonnie Doon",
  "Cavill Avenue",
  "Queen Street"
];

},{}],261:[function(require,module,exports){
module.exports=require(179)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/address/street_suffix.js":179}],262:[function(require,module,exports){
module.exports=require(180)
},{"./suffix":263,"/Users/a/dev/faker.js/lib/locales/en_AU/company/index.js":180}],263:[function(require,module,exports){
module.exports=require(181)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/company/suffix.js":181}],264:[function(require,module,exports){
var en_au_ocker = {};
module['exports'] = en_au_ocker;
en_au_ocker.title = "Australia Ocker (English)";
en_au_ocker.name = require("./name");
en_au_ocker.company = require("./company");
en_au_ocker.internet = require("./internet");
en_au_ocker.address = require("./address");
en_au_ocker.phone_number = require("./phone_number");

},{"./address":254,"./company":262,"./internet":266,"./name":268,"./phone_number":272}],265:[function(require,module,exports){
module.exports=require(183)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/internet/domain_suffix.js":183}],266:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":265,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],267:[function(require,module,exports){
module["exports"] = [
  "Charlotte",
  "Ava",
  "Chloe",
  "Emily",
  "Olivia",
  "Zoe",
  "Lily",
  "Sophie",
  "Amelia",
  "Sofia",
  "Ella",
  "Isabella",
  "Ruby",
  "Sienna",
  "Mia+3",
  "Grace",
  "Emma",
  "Ivy",
  "Layla",
  "Abigail",
  "Isla",
  "Hannah",
  "Zara",
  "Lucy",
  "Evie",
  "Annabelle",
  "Madison",
  "Alice",
  "Georgia",
  "Maya",
  "Madeline",
  "Audrey",
  "Scarlett",
  "Isabelle",
  "Chelsea",
  "Mila",
  "Holly",
  "Indiana",
  "Poppy",
  "Harper",
  "Sarah",
  "Alyssa",
  "Jasmine",
  "Imogen",
  "Hayley",
  "Pheobe",
  "Eva",
  "Evelyn",
  "Mackenzie",
  "Ayla",
  "Oliver",
  "Jack",
  "Jackson",
  "William",
  "Ethan",
  "Charlie",
  "Lucas",
  "Cooper",
  "Lachlan",
  "Noah",
  "Liam",
  "Alexander",
  "Max",
  "Isaac",
  "Thomas",
  "Xavier",
  "Oscar",
  "Benjamin",
  "Aiden",
  "Mason",
  "Samuel",
  "James",
  "Levi",
  "Riley",
  "Harrison",
  "Ryan",
  "Henry",
  "Jacob",
  "Joshua",
  "Leo",
  "Zach",
  "Harry",
  "Hunter",
  "Flynn",
  "Archie",
  "Tyler",
  "Elijah",
  "Hayden",
  "Jayden",
  "Blake",
  "Archer",
  "Ashton",
  "Sebastian",
  "Zachery",
  "Lincoln",
  "Mitchell",
  "Luca",
  "Nathan",
  "Kai",
  "Connor",
  "Tom",
  "Nigel",
  "Matt",
  "Sean"
];

},{}],268:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.ocker_first_name = require("./ocker_first_name");

},{"./first_name":267,"./last_name":269,"./ocker_first_name":270}],269:[function(require,module,exports){
module["exports"] = [
  "Smith",
  "Jones",
  "Williams",
  "Brown",
  "Wilson",
  "Taylor",
  "Morton",
  "White",
  "Martin",
  "Anderson",
  "Thompson",
  "Nguyen",
  "Thomas",
  "Walker",
  "Harris",
  "Lee",
  "Ryan",
  "Robinson",
  "Kelly",
  "King",
  "Rausch",
  "Ridge",
  "Connolly",
  "LeQuesne"
];

},{}],270:[function(require,module,exports){
module["exports"] = [
  "Bazza",
  "Bluey",
  "Davo",
  "Johno",
  "Shano",
  "Shazza"
];

},{}],271:[function(require,module,exports){
module.exports=require(188)
},{"/Users/a/dev/faker.js/lib/locales/en_AU/phone_number/formats.js":188}],272:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":271,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],273:[function(require,module,exports){
module["exports"] = [
  " s/n.",
  ", #",
  ", ##",
  " #",
  " ##"
];

},{}],274:[function(require,module,exports){
module.exports=require(251)
},{"/Users/a/dev/faker.js/lib/locales/en_au_ocker/address/city.js":251}],275:[function(require,module,exports){
module["exports"] = [
  "Parla",
  "Telde",
  "Baracaldo",
  "San Fernando",
  "Torrevieja",
  "Lugo",
  "Santiago de Compostela",
  "Gerona",
  "Cáceres",
  "Lorca",
  "Coslada",
  "Talavera de la Reina",
  "El Puerto de Santa María",
  "Cornellá de Llobregat",
  "Avilés",
  "Palencia",
  "Gecho",
  "Orihuela",
  "Pontevedra",
  "Pozuelo de Alarcón",
  "Toledo",
  "El Ejido",
  "Guadalajara",
  "Gandía",
  "Ceuta",
  "Ferrol",
  "Chiclana de la Frontera",
  "Manresa",
  "Roquetas de Mar",
  "Ciudad Real",
  "Rubí",
  "Benidorm",
  "San Sebastían de los Reyes",
  "Ponferrada",
  "Zamora",
  "Alcalá de Guadaira",
  "Fuengirola",
  "Mijas",
  "Sanlúcar de Barrameda",
  "La Línea de la Concepción",
  "Majadahonda",
  "Sagunto",
  "El Prat de LLobregat",
  "Viladecans",
  "Linares",
  "Alcoy",
  "Irún",
  "Estepona",
  "Torremolinos",
  "Rivas-Vaciamadrid",
  "Molina de Segura",
  "Paterna",
  "Granollers",
  "Santa Lucía de Tirajana",
  "Motril",
  "Cerdañola del Vallés",
  "Arrecife",
  "Segovia",
  "Torrelavega",
  "Elda",
  "Mérida",
  "Ávila",
  "Valdemoro",
  "Cuenta",
  "Collado Villalba",
  "Benalmádena",
  "Mollet del Vallés",
  "Puertollano",
  "Madrid",
  "Barcelona",
  "Valencia",
  "Sevilla",
  "Zaragoza",
  "Málaga",
  "Murcia",
  "Palma de Mallorca",
  "Las Palmas de Gran Canaria",
  "Bilbao",
  "Córdoba",
  "Alicante",
  "Valladolid",
  "Vigo",
  "Gijón",
  "Hospitalet de LLobregat",
  "La Coruña",
  "Granada",
  "Vitoria",
  "Elche",
  "Santa Cruz de Tenerife",
  "Oviedo",
  "Badalona",
  "Cartagena",
  "Móstoles",
  "Jerez de la Frontera",
  "Tarrasa",
  "Sabadell",
  "Alcalá de Henares",
  "Pamplona",
  "Fuenlabrada",
  "Almería",
  "San Sebastián",
  "Leganés",
  "Santander",
  "Burgos",
  "Castellón de la Plana",
  "Alcorcón",
  "Albacete",
  "Getafe",
  "Salamanca",
  "Huelva",
  "Logroño",
  "Badajoz",
  "San Cristróbal de la Laguna",
  "León",
  "Tarragona",
  "Cádiz",
  "Lérida",
  "Marbella",
  "Mataró",
  "Dos Hermanas",
  "Santa Coloma de Gramanet",
  "Jaén",
  "Algeciras",
  "Torrejón de Ardoz",
  "Orense",
  "Alcobendas",
  "Reus",
  "Calahorra",
  "Inca"
];

},{}],276:[function(require,module,exports){
module["exports"] = [
  "Afganistán",
  "Albania",
  "Argelia",
  "Andorra",
  "Angola",
  "Argentina",
  "Armenia",
  "Aruba",
  "Australia",
  "Austria",
  "Azerbayán",
  "Bahamas",
  "Barein",
  "Bangladesh",
  "Barbados",
  "Bielorusia",
  "Bélgica",
  "Belice",
  "Bermuda",
  "Bután",
  "Bolivia",
  "Bosnia Herzegovina",
  "Botswana",
  "Brasil",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Camboya",
  "Camerún",
  "Canada",
  "Cabo Verde",
  "Islas Caimán",
  "Chad",
  "Chile",
  "China",
  "Isla de Navidad",
  "Colombia",
  "Comodos",
  "Congo",
  "Costa Rica",
  "Costa de Marfil",
  "Croacia",
  "Cuba",
  "Chipre",
  "República Checa",
  "Dinamarca",
  "Dominica",
  "República Dominicana",
  "Ecuador",
  "Egipto",
  "El Salvador",
  "Guinea Ecuatorial",
  "Eritrea",
  "Estonia",
  "Etiopía",
  "Islas Faro",
  "Fiji",
  "Finlandia",
  "Francia",
  "Gabón",
  "Gambia",
  "Georgia",
  "Alemania",
  "Ghana",
  "Grecia",
  "Groenlandia",
  "Granada",
  "Guadalupe",
  "Guam",
  "Guatemala",
  "Guinea",
  "Guinea-Bisau",
  "Guayana",
  "Haiti",
  "Honduras",
  "Hong Kong",
  "Hungria",
  "Islandia",
  "India",
  "Indonesia",
  "Iran",
  "Irak",
  "Irlanda",
  "Italia",
  "Jamaica",
  "Japón",
  "Jordania",
  "Kazajistan",
  "Kenia",
  "Kiribati",
  "Corea",
  "Kuwait",
  "Letonia",
  "Líbano",
  "Liberia",
  "Liechtenstein",
  "Lituania",
  "Luxemburgo",
  "Macao",
  "Macedonia",
  "Madagascar",
  "Malawi",
  "Malasia",
  "Maldivas",
  "Mali",
  "Malta",
  "Martinica",
  "Mauritania",
  "Méjico",
  "Micronesia",
  "Moldavia",
  "Mónaco",
  "Mongolia",
  "Montenegro",
  "Montserrat",
  "Marruecos",
  "Mozambique",
  "Namibia",
  "Nauru",
  "Nepal",
  "Holanda",
  "Nueva Zelanda",
  "Nicaragua",
  "Niger",
  "Nigeria",
  "Noruega",
  "Omán",
  "Pakistan",
  "Panamá",
  "Papúa Nueva Guinea",
  "Paraguay",
  "Perú",
  "Filipinas",
  "Poland",
  "Portugal",
  "Puerto Rico",
  "Rusia",
  "Ruanda",
  "Samoa",
  "San Marino",
  "Santo Tomé y Principe",
  "Arabia Saudí",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leona",
  "Singapur",
  "Eslovaquia",
  "Eslovenia",
  "Somalia",
  "España",
  "Sri Lanka",
  "Sudán",
  "Suriname",
  "Suecia",
  "Suiza",
  "Siria",
  "Taiwan",
  "Tajikistan",
  "Tanzania",
  "Tailandia",
  "Timor-Leste",
  "Togo",
  "Tonga",
  "Trinidad y Tobago",
  "Tunez",
  "Turquia",
  "Uganda",
  "Ucrania",
  "Emiratos Árabes Unidos",
  "Reino Unido",
  "Estados Unidos de América",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Yemen",
  "Zambia",
  "Zimbabwe"
];

},{}],277:[function(require,module,exports){
module["exports"] = [
  "España"
];

},{}],278:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.province = require("./province");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":273,"./city":274,"./city_prefix":275,"./country":276,"./default_country":277,"./postcode":279,"./province":280,"./secondary_address":281,"./state":282,"./state_abbr":283,"./street_address":284,"./street_name":285,"./street_suffix":286,"./time_zone":287}],279:[function(require,module,exports){
module["exports"] = [
  "#####"
];

},{}],280:[function(require,module,exports){
module["exports"] = [
  "Álava",
  "Albacete",
  "Alicante",
  "Almería",
  "Asturias",
  "Ávila",
  "Badajoz",
  "Barcelona",
  "Burgos",
  "Cantabria",
  "Castellón",
  "Ciudad Real",
  "Cuenca",
  "Cáceres",
  "Cádiz",
  "Córdoba",
  "Gerona",
  "Granada",
  "Guadalajara",
  "Guipúzcoa",
  "Huelva",
  "Huesca",
  "Islas Baleares",
  "Jaén",
  "La Coruña",
  "La Rioja",
  "Las Palmas",
  "León",
  "Lugo",
  "lérida",
  "Madrid",
  "Murcia",
  "Málaga",
  "Navarra",
  "Orense",
  "Palencia",
  "Pontevedra",
  "Salamanca",
  "Santa Cruz de Tenerife",
  "Segovia",
  "Sevilla",
  "Soria",
  "Tarragona",
  "Teruel",
  "Toledo",
  "Valencia",
  "Valladolid",
  "Vizcaya",
  "Zamora",
  "Zaragoza"
];

},{}],281:[function(require,module,exports){
module["exports"] = [
  "Esc. ###",
  "Puerta ###"
];

},{}],282:[function(require,module,exports){
module["exports"] = [
  "Andalucía",
  "Aragón",
  "Principado de Asturias",
  "Baleares",
  "Canarias",
  "Cantabria",
  "Castilla-La Mancha",
  "Castilla y León",
  "Cataluña",
  "Comunidad Valenciana",
  "Extremadura",
  "Galicia",
  "La Rioja",
  "Comunidad de Madrid",
  "Navarra",
  "País Vasco",
  "Región de Murcia"
];

},{}],283:[function(require,module,exports){
module["exports"] = [
  "And",
  "Ara",
  "Ast",
  "Bal",
  "Can",
  "Cbr",
  "Man",
  "Leo",
  "Cat",
  "Com",
  "Ext",
  "Gal",
  "Rio",
  "Mad",
  "Nav",
  "Vas",
  "Mur"
];

},{}],284:[function(require,module,exports){
module["exports"] = [
  "#{street_name}#{building_number}",
  "#{street_name}#{building_number} #{secondary_address}"
];

},{}],285:[function(require,module,exports){
module["exports"] = [
  "#{street_suffix} #{Name.first_name}",
  "#{street_suffix} #{Name.first_name} #{Name.last_name}"
];

},{}],286:[function(require,module,exports){
module["exports"] = [
  "Aldea",
  "Apartamento",
  "Arrabal",
  "Arroyo",
  "Avenida",
  "Bajada",
  "Barranco",
  "Barrio",
  "Bloque",
  "Calle",
  "Calleja",
  "Camino",
  "Carretera",
  "Caserio",
  "Colegio",
  "Colonia",
  "Conjunto",
  "Cuesta",
  "Chalet",
  "Edificio",
  "Entrada",
  "Escalinata",
  "Explanada",
  "Extramuros",
  "Extrarradio",
  "Ferrocarril",
  "Glorieta",
  "Gran Subida",
  "Grupo",
  "Huerta",
  "Jardines",
  "Lado",
  "Lugar",
  "Manzana",
  "Masía",
  "Mercado",
  "Monte",
  "Muelle",
  "Municipio",
  "Parcela",
  "Parque",
  "Partida",
  "Pasaje",
  "Paseo",
  "Plaza",
  "Poblado",
  "Polígono",
  "Prolongación",
  "Puente",
  "Puerta",
  "Quinta",
  "Ramal",
  "Rambla",
  "Rampa",
  "Riera",
  "Rincón",
  "Ronda",
  "Rua",
  "Salida",
  "Sector",
  "Sección",
  "Senda",
  "Solar",
  "Subida",
  "Terrenos",
  "Torrente",
  "Travesía",
  "Urbanización",
  "Vía",
  "Vía Pública"
];

},{}],287:[function(require,module,exports){
module["exports"] = [
  "Pacífico/Midway",
  "Pacífico/Pago_Pago",
  "Pacífico/Honolulu",
  "America/Juneau",
  "America/Los_Angeles",
  "America/Tijuana",
  "America/Denver",
  "America/Phoenix",
  "America/Chihuahua",
  "America/Mazatlan",
  "America/Chicago",
  "America/Regina",
  "America/Mexico_City",
  "America/Mexico_City",
  "America/Monterrey",
  "America/Guatemala",
  "America/New_York",
  "America/Indiana/Indianapolis",
  "America/Bogota",
  "America/Lima",
  "America/Lima",
  "America/Halifax",
  "America/Caracas",
  "America/La_Paz",
  "America/Santiago",
  "America/St_Johns",
  "America/Sao_Paulo",
  "America/Argentina/Buenos_Aires",
  "America/Guyana",
  "America/Godthab",
  "Atlantic/South_Georgia",
  "Atlantic/Azores",
  "Atlantic/Cape_Verde",
  "Europa/Dublin",
  "Europa/London",
  "Europa/Lisbon",
  "Europa/London",
  "Africa/Casablanca",
  "Africa/Monrovia",
  "Etc/UTC",
  "Europa/Belgrade",
  "Europa/Bratislava",
  "Europa/Budapest",
  "Europa/Ljubljana",
  "Europa/Prague",
  "Europa/Sarajevo",
  "Europa/Skopje",
  "Europa/Warsaw",
  "Europa/Zagreb",
  "Europa/Brussels",
  "Europa/Copenhagen",
  "Europa/Madrid",
  "Europa/Paris",
  "Europa/Amsterdam",
  "Europa/Berlin",
  "Europa/Berlin",
  "Europa/Rome",
  "Europa/Stockholm",
  "Europa/Vienna",
  "Africa/Algiers",
  "Europa/Bucharest",
  "Africa/Cairo",
  "Europa/Helsinki",
  "Europa/Kiev",
  "Europa/Riga",
  "Europa/Sofia",
  "Europa/Tallinn",
  "Europa/Vilnius",
  "Europa/Athens",
  "Europa/Istanbul",
  "Europa/Minsk",
  "Asia/Jerusalen",
  "Africa/Harare",
  "Africa/Johannesburg",
  "Europa/Moscú",
  "Europa/Moscú",
  "Europa/Moscú",
  "Asia/Kuwait",
  "Asia/Riyadh",
  "Africa/Nairobi",
  "Asia/Baghdad",
  "Asia/Tehran",
  "Asia/Muscat",
  "Asia/Muscat",
  "Asia/Baku",
  "Asia/Tbilisi",
  "Asia/Yerevan",
  "Asia/Kabul",
  "Asia/Yekaterinburg",
  "Asia/Karachi",
  "Asia/Karachi",
  "Asia/Tashkent",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kathmandu",
  "Asia/Dhaka",
  "Asia/Dhaka",
  "Asia/Colombo",
  "Asia/Almaty",
  "Asia/Novosibirsk",
  "Asia/Rangoon",
  "Asia/Bangkok",
  "Asia/Bangkok",
  "Asia/Jakarta",
  "Asia/Krasnoyarsk",
  "Asia/Shanghai",
  "Asia/Chongqing",
  "Asia/Hong_Kong",
  "Asia/Urumqi",
  "Asia/Kuala_Lumpur",
  "Asia/Singapore",
  "Asia/Taipei",
  "Australia/Perth",
  "Asia/Irkutsk",
  "Asia/Ulaanbaatar",
  "Asia/Seoul",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Yakutsk",
  "Australia/Darwin",
  "Australia/Adelaide",
  "Australia/Melbourne",
  "Australia/Melbourne",
  "Australia/Sydney",
  "Australia/Brisbane",
  "Australia/Hobart",
  "Asia/Vladivostok",
  "Pacífico/Guam",
  "Pacífico/Port_Moresby",
  "Asia/Magadan",
  "Asia/Magadan",
  "Pacífico/Noumea",
  "Pacífico/Fiji",
  "Asia/Kamchatka",
  "Pacífico/Majuro",
  "Pacífico/Auckland",
  "Pacífico/Auckland",
  "Pacífico/Tongatapu",
  "Pacífico/Fakaofo",
  "Pacífico/Apia"
];

},{}],288:[function(require,module,exports){
module["exports"] = [
  "6##-###-###",
  "6##.###.###",
  "6## ### ###",
  "6########"
];

},{}],289:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":288,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],290:[function(require,module,exports){
module["exports"] = [
  "Adaptativo",
  "Avanzado",
  "Asimilado",
  "Automatizado",
  "Equilibrado",
  "Centrado en el negocio",
  "Centralizado",
  "Clonado",
  "Compatible",
  "Configurable",
  "Multi grupo",
  "Multi plataforma",
  "Centrado en el usuario",
  "Configurable",
  "Descentralizado",
  "Digitalizado",
  "Distribuido",
  "Diverso",
  "Reducido",
  "Mejorado",
  "Para toda la empresa",
  "Ergonomico",
  "Exclusivo",
  "Expandido",
  "Extendido",
  "Cara a cara",
  "Enfocado",
  "Totalmente configurable",
  "Fundamental",
  "Orígenes",
  "Horizontal",
  "Implementado",
  "Innovador",
  "Integrado",
  "Intuitivo",
  "Inverso",
  "Gestionado",
  "Obligatorio",
  "Monitorizado",
  "Multi canal",
  "Multi lateral",
  "Multi capa",
  "En red",
  "Orientado a objetos",
  "Open-source",
  "Operativo",
  "Optimizado",
  "Opcional",
  "Organico",
  "Organizado",
  "Perseverando",
  "Persistente",
  "en fases",
  "Polarizado",
  "Pre-emptivo",
  "Proactivo",
  "Enfocado a benficios",
  "Profundo",
  "Programable",
  "Progresivo",
  "Public-key",
  "Enfocado en la calidad",
  "Reactivo",
  "Realineado",
  "Re-contextualizado",
  "Re-implementado",
  "Reducido",
  "Ingenieria inversa",
  "Robusto",
  "Fácil",
  "Seguro",
  "Auto proporciona",
  "Compartible",
  "Intercambiable",
  "Sincronizado",
  "Orientado a equipos",
  "Total",
  "Universal",
  "Mejorado",
  "Actualizable",
  "Centrado en el usuario",
  "Amigable",
  "Versatil",
  "Virtual",
  "Visionario"
];

},{}],291:[function(require,module,exports){
module["exports"] = [
  "24 horas",
  "24/7",
  "3rd generación",
  "4th generación",
  "5th generación",
  "6th generación",
  "analizada",
  "asimétrica",
  "asíncrona",
  "monitorizada por red",
  "bidireccional",
  "bifurcada",
  "generada por el cliente",
  "cliente servidor",
  "coherente",
  "cohesiva",
  "compuesto",
  "sensible al contexto",
  "basado en el contexto",
  "basado en contenido",
  "dedicada",
  "generado por la demanda",
  "didactica",
  "direccional",
  "discreta",
  "dinámica",
  "potenciada",
  "acompasada",
  "ejecutiva",
  "explícita",
  "tolerante a fallos",
  "innovadora",
  "amplio ábanico",
  "global",
  "heurística",
  "alto nivel",
  "holística",
  "homogénea",
  "hibrida",
  "incremental",
  "intangible",
  "interactiva",
  "intermedia",
  "local",
  "logística",
  "maximizada",
  "metódica",
  "misión crítica",
  "móbil",
  "modular",
  "motivadora",
  "multimedia",
  "multiestado",
  "multitarea",
  "nacional",
  "basado en necesidades",
  "neutral",
  "nueva generación",
  "no-volátil",
  "orientado a objetos",
  "óptima",
  "optimizada",
  "radical",
  "tiempo real",
  "recíproca",
  "regional",
  "escalable",
  "secundaria",
  "orientada a soluciones",
  "estable",
  "estatica",
  "sistemática",
  "sistémica",
  "tangible",
  "terciaria",
  "transicional",
  "uniforme",
  "valor añadido",
  "vía web",
  "defectos cero",
  "tolerancia cero"
];

},{}],292:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.noun = require("./noun");
company.descriptor = require("./descriptor");
company.adjective = require("./adjective");
company.name = require("./name");

},{"./adjective":290,"./descriptor":291,"./name":293,"./noun":294,"./suffix":295}],293:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name} y #{Name.last_name}",
  "#{Name.last_name} #{Name.last_name} #{suffix}",
  "#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados"
];

},{}],294:[function(require,module,exports){
module["exports"] = [
  "habilidad",
  "acceso",
  "adaptador",
  "algoritmo",
  "alianza",
  "analista",
  "aplicación",
  "enfoque",
  "arquitectura",
  "archivo",
  "inteligencia artificial",
  "array",
  "actitud",
  "medición",
  "gestión presupuestaria",
  "capacidad",
  "desafío",
  "circuito",
  "colaboración",
  "complejidad",
  "concepto",
  "conglomeración",
  "contingencia",
  "núcleo",
  "fidelidad",
  "base de datos",
  "data-warehouse",
  "definición",
  "emulación",
  "codificar",
  "encriptar",
  "extranet",
  "firmware",
  "flexibilidad",
  "focus group",
  "previsión",
  "base de trabajo",
  "función",
  "funcionalidad",
  "Interfaz Gráfica",
  "groupware",
  "Interfaz gráfico de usuario",
  "hardware",
  "Soporte",
  "jerarquía",
  "conjunto",
  "implementación",
  "infraestructura",
  "iniciativa",
  "instalación",
  "conjunto de instrucciones",
  "interfaz",
  "intranet",
  "base del conocimiento",
  "red de area local",
  "aprovechar",
  "matrices",
  "metodologías",
  "middleware",
  "migración",
  "modelo",
  "moderador",
  "monitorizar",
  "arquitectura abierta",
  "sistema abierto",
  "orquestar",
  "paradigma",
  "paralelismo",
  "política",
  "portal",
  "estructura de precios",
  "proceso de mejora",
  "producto",
  "productividad",
  "proyecto",
  "proyección",
  "protocolo",
  "línea segura",
  "software",
  "solución",
  "estandardización",
  "estrategia",
  "estructura",
  "éxito",
  "superestructura",
  "soporte",
  "sinergia",
  "mediante",
  "marco de tiempo",
  "caja de herramientas",
  "utilización",
  "website",
  "fuerza de trabajo"
];

},{}],295:[function(require,module,exports){
module["exports"] = [
  "S.L.",
  "e Hijos",
  "S.A.",
  "Hermanos"
];

},{}],296:[function(require,module,exports){
var es = {};
module['exports'] = es;
es.title = "Spanish";
es.address = require("./address");
es.company = require("./company");
es.internet = require("./internet");
es.name = require("./name");
es.phone_number = require("./phone_number");
es.cell_phone = require("./cell_phone");

},{"./address":278,"./cell_phone":289,"./company":292,"./internet":299,"./name":301,"./phone_number":308}],297:[function(require,module,exports){
module["exports"] = [
  "com",
  "es",
  "info",
  "com.es",
  "org"
];

},{}],298:[function(require,module,exports){
module.exports=require(36)
},{"/Users/a/dev/faker.js/lib/locales/de/internet/free_email.js":36}],299:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":297,"./free_email":298,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],300:[function(require,module,exports){
module["exports"] = [
  "Adán",
  "Agustín",
  "Alberto",
  "Alejandro",
  "Alfonso",
  "Alfredo",
  "Andrés",
  "Antonio",
  "Armando",
  "Arturo",
  "Benito",
  "Benjamín",
  "Bernardo",
  "Carlos",
  "César",
  "Claudio",
  "Clemente",
  "Cristian",
  "Cristobal",
  "Daniel",
  "David",
  "Diego",
  "Eduardo",
  "Emilio",
  "Enrique",
  "Ernesto",
  "Esteban",
  "Federico",
  "Felipe",
  "Fernando",
  "Francisco",
  "Gabriel",
  "Gerardo",
  "Germán",
  "Gilberto",
  "Gonzalo",
  "Gregorio",
  "Guillermo",
  "Gustavo",
  "Hernán",
  "Homero",
  "Horacio",
  "Hugo",
  "Ignacio",
  "Jacobo",
  "Jaime",
  "Javier",
  "Jerónimo",
  "Jesús",
  "Joaquín",
  "Jorge",
  "Jorge Luis",
  "José",
  "José Eduardo",
  "José Emilio",
  "José Luis",
  "José María",
  "Juan",
  "Juan Carlos",
  "Julio",
  "Julio César",
  "Lorenzo",
  "Lucas",
  "Luis",
  "Luis Miguel",
  "Manuel",
  "Marco Antonio",
  "Marcos",
  "Mariano",
  "Mario",
  "Martín",
  "Mateo",
  "Miguel",
  "Miguel Ángel",
  "Nicolás",
  "Octavio",
  "Óscar",
  "Pablo",
  "Patricio",
  "Pedro",
  "Rafael",
  "Ramiro",
  "Ramón",
  "Raúl",
  "Ricardo",
  "Roberto",
  "Rodrigo",
  "Rubén",
  "Salvador",
  "Samuel",
  "Sancho",
  "Santiago",
  "Sergio",
  "Teodoro",
  "Timoteo",
  "Tomás",
  "Vicente",
  "Víctor",
  "Adela",
  "Adriana",
  "Alejandra",
  "Alicia",
  "Amalia",
  "Ana",
  "Ana Luisa",
  "Ana María",
  "Andrea",
  "Anita",
  "Ángela",
  "Antonia",
  "Ariadna",
  "Barbara",
  "Beatriz",
  "Berta",
  "Blanca",
  "Caridad",
  "Carla",
  "Carlota",
  "Carmen",
  "Carolina",
  "Catalina",
  "Cecilia",
  "Clara",
  "Claudia",
  "Concepción",
  "Conchita",
  "Cristina",
  "Daniela",
  "Débora",
  "Diana",
  "Dolores",
  "Lola",
  "Dorotea",
  "Elena",
  "Elisa",
  "Eloisa",
  "Elsa",
  "Elvira",
  "Emilia",
  "Esperanza",
  "Estela",
  "Ester",
  "Eva",
  "Florencia",
  "Francisca",
  "Gabriela",
  "Gloria",
  "Graciela",
  "Guadalupe",
  "Guillermina",
  "Inés",
  "Irene",
  "Isabel",
  "Isabela",
  "Josefina",
  "Juana",
  "Julia",
  "Laura",
  "Leonor",
  "Leticia",
  "Lilia",
  "Lorena",
  "Lourdes",
  "Lucia",
  "Luisa",
  "Luz",
  "Magdalena",
  "Manuela",
  "Marcela",
  "Margarita",
  "María",
  "María del Carmen",
  "María Cristina",
  "María Elena",
  "María Eugenia",
  "María José",
  "María Luisa",
  "María Soledad",
  "María Teresa",
  "Mariana",
  "Maricarmen",
  "Marilu",
  "Marisol",
  "Marta",
  "Mayte",
  "Mercedes",
  "Micaela",
  "Mónica",
  "Natalia",
  "Norma",
  "Olivia",
  "Patricia",
  "Pilar",
  "Ramona",
  "Raquel",
  "Rebeca",
  "Reina",
  "Rocio",
  "Rosa",
  "Rosalia",
  "Rosario",
  "Sara",
  "Silvia",
  "Sofia",
  "Soledad",
  "Sonia",
  "Susana",
  "Teresa",
  "Verónica",
  "Victoria",
  "Virginia",
  "Yolanda"
];

},{}],301:[function(require,module,exports){
arguments[4][162][0].apply(exports,arguments)
},{"./first_name":300,"./last_name":302,"./name":303,"./prefix":304,"./suffix":305,"./title":306,"/Users/a/dev/faker.js/lib/locales/en/name/index.js":162}],302:[function(require,module,exports){
module["exports"] = [
  "Abeyta",
  "Abrego",
  "Abreu",
  "Acevedo",
  "Acosta",
  "Acuña",
  "Adame",
  "Adorno",
  "Agosto",
  "Aguayo",
  "Águilar",
  "Aguilera",
  "Aguirre",
  "Alanis",
  "Alaniz",
  "Alarcón",
  "Alba",
  "Alcala",
  "Alcántar",
  "Alcaraz",
  "Alejandro",
  "Alemán",
  "Alfaro",
  "Alicea",
  "Almanza",
  "Almaraz",
  "Almonte",
  "Alonso",
  "Alonzo",
  "Altamirano",
  "Alva",
  "Alvarado",
  "Alvarez",
  "Amador",
  "Amaya",
  "Anaya",
  "Anguiano",
  "Angulo",
  "Aparicio",
  "Apodaca",
  "Aponte",
  "Aragón",
  "Araña",
  "Aranda",
  "Arce",
  "Archuleta",
  "Arellano",
  "Arenas",
  "Arevalo",
  "Arguello",
  "Arias",
  "Armas",
  "Armendáriz",
  "Armenta",
  "Armijo",
  "Arredondo",
  "Arreola",
  "Arriaga",
  "Arroyo",
  "Arteaga",
  "Atencio",
  "Ávalos",
  "Ávila",
  "Avilés",
  "Ayala",
  "Baca",
  "Badillo",
  "Báez",
  "Baeza",
  "Bahena",
  "Balderas",
  "Ballesteros",
  "Banda",
  "Bañuelos",
  "Barajas",
  "Barela",
  "Barragán",
  "Barraza",
  "Barrera",
  "Barreto",
  "Barrientos",
  "Barrios",
  "Batista",
  "Becerra",
  "Beltrán",
  "Benavides",
  "Benavídez",
  "Benítez",
  "Bermúdez",
  "Bernal",
  "Berríos",
  "Bétancourt",
  "Blanco",
  "Bonilla",
  "Borrego",
  "Botello",
  "Bravo",
  "Briones",
  "Briseño",
  "Brito",
  "Bueno",
  "Burgos",
  "Bustamante",
  "Bustos",
  "Caballero",
  "Cabán",
  "Cabrera",
  "Cadena",
  "Caldera",
  "Calderón",
  "Calvillo",
  "Camacho",
  "Camarillo",
  "Campos",
  "Canales",
  "Candelaria",
  "Cano",
  "Cantú",
  "Caraballo",
  "Carbajal",
  "Cardenas",
  "Cardona",
  "Carmona",
  "Carranza",
  "Carrasco",
  "Carrasquillo",
  "Carreón",
  "Carrera",
  "Carrero",
  "Carrillo",
  "Carrion",
  "Carvajal",
  "Casanova",
  "Casares",
  "Casárez",
  "Casas",
  "Casillas",
  "Castañeda",
  "Castellanos",
  "Castillo",
  "Castro",
  "Cavazos",
  "Cazares",
  "Ceballos",
  "Cedillo",
  "Ceja",
  "Centeno",
  "Cepeda",
  "Cerda",
  "Cervantes",
  "Cervántez",
  "Chacón",
  "Chapa",
  "Chavarría",
  "Chávez",
  "Cintrón",
  "Cisneros",
  "Collado",
  "Collazo",
  "Colón",
  "Colunga",
  "Concepción",
  "Contreras",
  "Cordero",
  "Córdova",
  "Cornejo",
  "Corona",
  "Coronado",
  "Corral",
  "Corrales",
  "Correa",
  "Cortés",
  "Cortez",
  "Cotto",
  "Covarrubias",
  "Crespo",
  "Cruz",
  "Cuellar",
  "Curiel",
  "Dávila",
  "de Anda",
  "de Jesús",
  "Delacrúz",
  "Delafuente",
  "Delagarza",
  "Delao",
  "Delapaz",
  "Delarosa",
  "Delatorre",
  "Deleón",
  "Delgadillo",
  "Delgado",
  "Delrío",
  "Delvalle",
  "Díaz",
  "Domínguez",
  "Domínquez",
  "Duarte",
  "Dueñas",
  "Duran",
  "Echevarría",
  "Elizondo",
  "Enríquez",
  "Escalante",
  "Escamilla",
  "Escobar",
  "Escobedo",
  "Esparza",
  "Espinal",
  "Espino",
  "Espinosa",
  "Espinoza",
  "Esquibel",
  "Esquivel",
  "Estévez",
  "Estrada",
  "Fajardo",
  "Farías",
  "Feliciano",
  "Fernández",
  "Ferrer",
  "Fierro",
  "Figueroa",
  "Flores",
  "Flórez",
  "Fonseca",
  "Franco",
  "Frías",
  "Fuentes",
  "Gaitán",
  "Galarza",
  "Galindo",
  "Gallardo",
  "Gallegos",
  "Galván",
  "Gálvez",
  "Gamboa",
  "Gamez",
  "Gaona",
  "Garay",
  "García",
  "Garibay",
  "Garica",
  "Garrido",
  "Garza",
  "Gastélum",
  "Gaytán",
  "Gil",
  "Girón",
  "Godínez",
  "Godoy",
  "Gómez",
  "Gonzales",
  "González",
  "Gollum",
  "Gracia",
  "Granado",
  "Granados",
  "Griego",
  "Grijalva",
  "Guajardo",
  "Guardado",
  "Guerra",
  "Guerrero",
  "Guevara",
  "Guillen",
  "Gurule",
  "Gutiérrez",
  "Guzmán",
  "Haro",
  "Henríquez",
  "Heredia",
  "Hernádez",
  "Hernandes",
  "Hernández",
  "Herrera",
  "Hidalgo",
  "Hinojosa",
  "Holguín",
  "Huerta",
  "Hurtado",
  "Ibarra",
  "Iglesias",
  "Irizarry",
  "Jaime",
  "Jaimes",
  "Jáquez",
  "Jaramillo",
  "Jasso",
  "Jiménez",
  "Jimínez",
  "Juárez",
  "Jurado",
  "Laboy",
  "Lara",
  "Laureano",
  "Leal",
  "Lebrón",
  "Ledesma",
  "Leiva",
  "Lemus",
  "León",
  "Lerma",
  "Leyva",
  "Limón",
  "Linares",
  "Lira",
  "Llamas",
  "Loera",
  "Lomeli",
  "Longoria",
  "López",
  "Lovato",
  "Loya",
  "Lozada",
  "Lozano",
  "Lucero",
  "Lucio",
  "Luevano",
  "Lugo",
  "Luna",
  "Macías",
  "Madera",
  "Madrid",
  "Madrigal",
  "Maestas",
  "Magaña",
  "Malave",
  "Maldonado",
  "Manzanares",
  "Mares",
  "Marín",
  "Márquez",
  "Marrero",
  "Marroquín",
  "Martínez",
  "Mascareñas",
  "Mata",
  "Mateo",
  "Matías",
  "Matos",
  "Maya",
  "Mayorga",
  "Medina",
  "Medrano",
  "Mejía",
  "Meléndez",
  "Melgar",
  "Mena",
  "Menchaca",
  "Méndez",
  "Mendoza",
  "Menéndez",
  "Meraz",
  "Mercado",
  "Merino",
  "Mesa",
  "Meza",
  "Miramontes",
  "Miranda",
  "Mireles",
  "Mojica",
  "Molina",
  "Mondragón",
  "Monroy",
  "Montalvo",
  "Montañez",
  "Montaño",
  "Montemayor",
  "Montenegro",
  "Montero",
  "Montes",
  "Montez",
  "Montoya",
  "Mora",
  "Morales",
  "Moreno",
  "Mota",
  "Moya",
  "Munguía",
  "Muñiz",
  "Muñoz",
  "Murillo",
  "Muro",
  "Nájera",
  "Naranjo",
  "Narváez",
  "Nava",
  "Navarrete",
  "Navarro",
  "Nazario",
  "Negrete",
  "Negrón",
  "Nevárez",
  "Nieto",
  "Nieves",
  "Niño",
  "Noriega",
  "Núñez",
  "Ocampo",
  "Ocasio",
  "Ochoa",
  "Ojeda",
  "Olivares",
  "Olivárez",
  "Olivas",
  "Olivera",
  "Olivo",
  "Olmos",
  "Olvera",
  "Ontiveros",
  "Oquendo",
  "Ordóñez",
  "Orellana",
  "Ornelas",
  "Orosco",
  "Orozco",
  "Orta",
  "Ortega",
  "Ortiz",
  "Osorio",
  "Otero",
  "Ozuna",
  "Pabón",
  "Pacheco",
  "Padilla",
  "Padrón",
  "Páez",
  "Pagan",
  "Palacios",
  "Palomino",
  "Palomo",
  "Pantoja",
  "Paredes",
  "Parra",
  "Partida",
  "Patiño",
  "Paz",
  "Pedraza",
  "Pedroza",
  "Pelayo",
  "Peña",
  "Perales",
  "Peralta",
  "Perea",
  "Peres",
  "Pérez",
  "Pichardo",
  "Piña",
  "Pineda",
  "Pizarro",
  "Polanco",
  "Ponce",
  "Porras",
  "Portillo",
  "Posada",
  "Prado",
  "Preciado",
  "Prieto",
  "Puente",
  "Puga",
  "Pulido",
  "Quesada",
  "Quezada",
  "Quiñones",
  "Quiñónez",
  "Quintana",
  "Quintanilla",
  "Quintero",
  "Quiroz",
  "Rael",
  "Ramírez",
  "Ramón",
  "Ramos",
  "Rangel",
  "Rascón",
  "Raya",
  "Razo",
  "Regalado",
  "Rendón",
  "Rentería",
  "Reséndez",
  "Reyes",
  "Reyna",
  "Reynoso",
  "Rico",
  "Rincón",
  "Riojas",
  "Ríos",
  "Rivas",
  "Rivera",
  "Rivero",
  "Robledo",
  "Robles",
  "Rocha",
  "Rodarte",
  "Rodrígez",
  "Rodríguez",
  "Rodríquez",
  "Rojas",
  "Rojo",
  "Roldán",
  "Rolón",
  "Romero",
  "Romo",
  "Roque",
  "Rosado",
  "Rosales",
  "Rosario",
  "Rosas",
  "Roybal",
  "Rubio",
  "Ruelas",
  "Ruiz",
  "Saavedra",
  "Sáenz",
  "Saiz",
  "Salas",
  "Salazar",
  "Salcedo",
  "Salcido",
  "Saldaña",
  "Saldivar",
  "Salgado",
  "Salinas",
  "Samaniego",
  "Sanabria",
  "Sanches",
  "Sánchez",
  "Sandoval",
  "Santacruz",
  "Santana",
  "Santiago",
  "Santillán",
  "Sarabia",
  "Sauceda",
  "Saucedo",
  "Sedillo",
  "Segovia",
  "Segura",
  "Sepúlveda",
  "Serna",
  "Serrano",
  "Serrato",
  "Sevilla",
  "Sierra",
  "Sisneros",
  "Solano",
  "Solís",
  "Soliz",
  "Solorio",
  "Solorzano",
  "Soria",
  "Sosa",
  "Sotelo",
  "Soto",
  "Suárez",
  "Tafoya",
  "Tamayo",
  "Tamez",
  "Tapia",
  "Tejada",
  "Tejeda",
  "Téllez",
  "Tello",
  "Terán",
  "Terrazas",
  "Tijerina",
  "Tirado",
  "Toledo",
  "Toro",
  "Torres",
  "Tórrez",
  "Tovar",
  "Trejo",
  "Treviño",
  "Trujillo",
  "Ulibarri",
  "Ulloa",
  "Urbina",
  "Ureña",
  "Urías",
  "Uribe",
  "Urrutia",
  "Vaca",
  "Valadez",
  "Valdés",
  "Valdez",
  "Valdivia",
  "Valencia",
  "Valentín",
  "Valenzuela",
  "Valladares",
  "Valle",
  "Vallejo",
  "Valles",
  "Valverde",
  "Vanegas",
  "Varela",
  "Vargas",
  "Vásquez",
  "Vázquez",
  "Vega",
  "Vela",
  "Velasco",
  "Velásquez",
  "Velázquez",
  "Vélez",
  "Véliz",
  "Venegas",
  "Vera",
  "Verdugo",
  "Verduzco",
  "Vergara",
  "Viera",
  "Vigil",
  "Villa",
  "Villagómez",
  "Villalobos",
  "Villalpando",
  "Villanueva",
  "Villareal",
  "Villarreal",
  "Villaseñor",
  "Villegas",
  "Yáñez",
  "Ybarra",
  "Zambrano",
  "Zamora",
  "Zamudio",
  "Zapata",
  "Zaragoza",
  "Zarate",
  "Zavala",
  "Zayas",
  "Zelaya",
  "Zepeda",
  "Zúñiga"
];

},{}],303:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}"
];

},{}],304:[function(require,module,exports){
module["exports"] = [
  "Sr.",
  "Sra.",
  "Sta."
];

},{}],305:[function(require,module,exports){
module.exports=require(166)
},{"/Users/a/dev/faker.js/lib/locales/en/name/suffix.js":166}],306:[function(require,module,exports){
module["exports"] = {
  "descriptor": [
    "Jefe",
    "Senior",
    "Directo",
    "Corporativo",
    "Dinánmico",
    "Futuro",
    "Producto",
    "Nacional",
    "Regional",
    "Distrito",
    "Central",
    "Global",
    "Cliente",
    "Inversor",
    "International",
    "Heredado",
    "Adelante",
    "Interno",
    "Humano",
    "Gerente",
    "Director"
  ],
  "level": [
    "Soluciones",
    "Programa",
    "Marca",
    "Seguridada",
    "Investigación",
    "Marketing",
    "Normas",
    "Implementación",
    "Integración",
    "Funcionalidad",
    "Respuesta",
    "Paradigma",
    "Tácticas",
    "Identidad",
    "Mercados",
    "Grupo",
    "División",
    "Aplicaciones",
    "Optimización",
    "Operaciones",
    "Infraestructura",
    "Intranet",
    "Comunicaciones",
    "Web",
    "Calidad",
    "Seguro",
    "Mobilidad",
    "Cuentas",
    "Datos",
    "Creativo",
    "Configuración",
    "Contabilidad",
    "Interacciones",
    "Factores",
    "Usabilidad",
    "Métricas"
  ],
  "job": [
    "Supervisor",
    "Asociado",
    "Ejecutivo",
    "Relacciones",
    "Oficial",
    "Gerente",
    "Ingeniero",
    "Especialista",
    "Director",
    "Coordinador",
    "Administrador",
    "Arquitecto",
    "Analista",
    "Diseñador",
    "Planificador",
    "Técnico",
    "Funcionario",
    "Desarrollador",
    "Productor",
    "Consultor",
    "Asistente",
    "Facilitador",
    "Agente",
    "Representante",
    "Estratega"
  ]
};

},{}],307:[function(require,module,exports){
module["exports"] = [
  "9##-###-###",
  "9##.###.###",
  "9## ### ###",
  "9########"
];

},{}],308:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":307,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],309:[function(require,module,exports){
var fa = {};
module['exports'] = fa;
fa.title = "Farsi";
fa.name = require("./name");

},{"./name":311}],310:[function(require,module,exports){
module["exports"] = [
  "آبان دخت",
  "آبتین",
  "آتوسا",
  "آفر",
  "آفره دخت",
  "آذرنوش‌",
  "آذین",
  "آراه",
  "آرزو",
  "آرش",
  "آرتین",
  "آرتام",
  "آرتمن",
  "آرشام",
  "آرمان",
  "آرمین",
  "آرمیتا",
  "آریا فر",
  "آریا",
  "آریا مهر",
  "آرین",
  "آزاده",
  "آزرم",
  "آزرمدخت",
  "آزیتا",
  "آناهیتا",
  "آونگ",
  "آهو",
  "آیدا",
  "اتسز",
  "اختر",
  "ارد",
  "ارد شیر",
  "اردوان",
  "ارژن",
  "ارژنگ",
  "ارسلان",
  "ارغوان",
  "ارمغان",
  "ارنواز",
  "اروانه",
  "استر",
  "اسفندیار",
  "اشکان",
  "اشکبوس",
  "افسانه",
  "افسون",
  "افشین",
  "امید",
  "انوش (‌ آنوشا )",
  "انوشروان",
  "اورنگ",
  "اوژن",
  "اوستا",
  "اهورا",
  "ایاز",
  "ایران",
  "ایراندخت",
  "ایرج",
  "ایزدیار",
  "بابک",
  "باپوک",
  "باربد",
  "بارمان",
  "بامداد",
  "بامشاد",
  "بانو",
  "بختیار",
  "برانوش",
  "بردیا",
  "برزو",
  "برزویه",
  "برزین",
  "برمک",
  "بزرگمهر",
  "بنفشه",
  "بوژان",
  "بویان",
  "بهار",
  "بهارک",
  "بهاره",
  "بهتاش",
  "بهداد",
  "بهرام",
  "بهدیس",
  "بهرخ",
  "بهرنگ",
  "بهروز",
  "بهزاد",
  "بهشاد",
  "بهمن",
  "بهناز",
  "بهنام",
  "بهنود",
  "بهنوش",
  "بیتا",
  "بیژن",
  "پارسا",
  "پاکان",
  "پاکتن",
  "پاکدخت",
  "پانته آ",
  "پدرام",
  "پرتو",
  "پرشنگ",
  "پرتو",
  "پرستو",
  "پرویز",
  "پردیس",
  "پرهام",
  "پژمان",
  "پژوا",
  "پرنیا",
  "پشنگ",
  "پروانه",
  "پروین",
  "پری",
  "پریچهر",
  "پریدخت",
  "پریسا",
  "پرناز",
  "پریوش",
  "پریا",
  "پوپک",
  "پوران",
  "پوراندخت",
  "پوریا",
  "پولاد",
  "پویا",
  "پونه",
  "پیام",
  "پیروز",
  "پیمان",
  "تابان",
  "تاباندخت",
  "تاجی",
  "تارا",
  "تاویار",
  "ترانه",
  "تناز",
  "توران",
  "توراندخت",
  "تورج",
  "تورتک",
  "توفان",
  "توژال",
  "تیر داد",
  "تینا",
  "تینو",
  "جابان",
  "جامین",
  "جاوید",
  "جریره",
  "جمشید",
  "جوان",
  "جویا",
  "جهان",
  "جهانبخت",
  "جهانبخش",
  "جهاندار",
  "جهانگیر",
  "جهان بانو",
  "جهاندخت",
  "جهان ناز",
  "جیران",
  "چابک",
  "چالاک",
  "چاوش",
  "چترا",
  "چوبین",
  "چهرزاد",
  "خاوردخت",
  "خداداد",
  "خدایار",
  "خرم",
  "خرمدخت",
  "خسرو",
  "خشایار",
  "خورشید",
  "دادمهر",
  "دارا",
  "داراب",
  "داریا",
  "داریوش",
  "دانوش",
  "داور‌",
  "دایان",
  "دریا",
  "دل آرا",
  "دل آویز",
  "دلارام",
  "دل انگیز",
  "دلبر",
  "دلبند",
  "دلربا",
  "دلشاد",
  "دلکش",
  "دلناز",
  "دلنواز",
  "دورشاسب",
  "دنیا",
  "دیااکو",
  "دیانوش",
  "دیبا",
  "دیبا دخت",
  "رابو",
  "رابین",
  "رادبانو",
  "رادمان",
  "رازبان",
  "راژانه",
  "راسا",
  "رامتین",
  "رامش",
  "رامشگر",
  "رامونا",
  "رامیار",
  "رامیلا",
  "رامین",
  "راویار",
  "رژینا",
  "رخپاک",
  "رخسار",
  "رخشانه",
  "رخشنده",
  "رزمیار",
  "رستم",
  "رکسانا",
  "روبینا",
  "رودابه",
  "روزبه",
  "روشنک",
  "روناک",
  "رهام",
  "رهی",
  "ریبار",
  "راسپینا",
  "زادبخت",
  "زاد به",
  "زاد چهر",
  "زاد فر",
  "زال",
  "زادماسب",
  "زاوا",
  "زردشت",
  "زرنگار",
  "زری",
  "زرین",
  "زرینه",
  "زمانه",
  "زونا",
  "زیبا",
  "زیبار",
  "زیما",
  "زینو",
  "ژاله",
  "ژالان",
  "ژیار",
  "ژینا",
  "ژیوار",
  "سارا",
  "سارک",
  "سارنگ",
  "ساره",
  "ساسان",
  "ساغر",
  "سام",
  "سامان",
  "سانا",
  "ساناز",
  "سانیار",
  "ساویز",
  "ساهی",
  "ساینا",
  "سایه",
  "سپنتا",
  "سپند",
  "سپهر",
  "سپهرداد",
  "سپیدار",
  "سپید بانو",
  "سپیده",
  "ستاره",
  "ستی",
  "سرافراز",
  "سرور",
  "سروش",
  "سرور",
  "سوبا",
  "سوبار",
  "سنبله",
  "سودابه",
  "سوری",
  "سورن",
  "سورنا",
  "سوزان",
  "سوزه",
  "سوسن",
  "سومار",
  "سولان",
  "سولماز",
  "سوگند",
  "سهراب",
  "سهره",
  "سهند",
  "سیامک",
  "سیاوش",
  "سیبوبه ‌",
  "سیما",
  "سیمدخت",
  "سینا",
  "سیمین",
  "سیمین دخت",
  "شاپرک",
  "شادی",
  "شادمهر",
  "شاران",
  "شاهپور",
  "شاهدخت",
  "شاهرخ",
  "شاهین",
  "شاهیندخت",
  "شایسته",
  "شباهنگ",
  "شب بو",
  "شبدیز",
  "شبنم",
  "شراره",
  "شرمین",
  "شروین",
  "شکوفه",
  "شکفته",
  "شمشاد",
  "شمین",
  "شوان",
  "شمیلا",
  "شورانگیز",
  "شوری",
  "شهاب",
  "شهبار",
  "شهباز",
  "شهبال",
  "شهپر",
  "شهداد",
  "شهرآرا",
  "شهرام",
  "شهربانو",
  "شهرزاد",
  "شهرناز",
  "شهرنوش",
  "شهره",
  "شهریار",
  "شهرزاد",
  "شهلا",
  "شهنواز",
  "شهین",
  "شیبا",
  "شیدا",
  "شیده",
  "شیردل",
  "شیرزاد",
  "شیرنگ",
  "شیرو",
  "شیرین دخت",
  "شیما",
  "شینا",
  "شیرین",
  "شیوا",
  "طوس",
  "طوطی",
  "طهماسب",
  "طهمورث",
  "غوغا",
  "غنچه",
  "فتانه",
  "فدا",
  "فراز",
  "فرامرز",
  "فرانک",
  "فراهان",
  "فربد",
  "فربغ",
  "فرجاد",
  "فرخ",
  "فرخ پی",
  "فرخ داد",
  "فرخ رو",
  "فرخ زاد",
  "فرخ لقا",
  "فرخ مهر",
  "فرداد",
  "فردیس",
  "فرین",
  "فرزاد",
  "فرزام",
  "فرزان",
  "فرزانه",
  "فرزین",
  "فرشاد",
  "فرشته",
  "فرشید",
  "فرمان",
  "فرناز",
  "فرنگیس",
  "فرنود",
  "فرنوش",
  "فرنیا",
  "فروتن",
  "فرود",
  "فروز",
  "فروزان",
  "فروزش",
  "فروزنده",
  "فروغ",
  "فرهاد",
  "فرهنگ",
  "فرهود",
  "فربار",
  "فریبا",
  "فرید",
  "فریدخت",
  "فریدون",
  "فریمان",
  "فریناز",
  "فرینوش",
  "فریوش",
  "فیروز",
  "فیروزه",
  "قابوس",
  "قباد",
  "قدسی",
  "کابان",
  "کابوک",
  "کارا",
  "کارو",
  "کاراکو",
  "کامبخت",
  "کامبخش",
  "کامبیز",
  "کامجو",
  "کامدین",
  "کامران",
  "کامراوا",
  "کامک",
  "کامنوش",
  "کامیار",
  "کانیار",
  "کاووس",
  "کاوه",
  "کتایون",
  "کرشمه",
  "کسری",
  "کلاله",
  "کمبوجیه",
  "کوشا",
  "کهبد",
  "کهرام",
  "کهزاد",
  "کیارش",
  "کیان",
  "کیانا",
  "کیانچهر",
  "کیاندخت",
  "کیانوش",
  "کیاوش",
  "کیخسرو",
  "کیقباد",
  "کیکاووس",
  "کیوان",
  "کیوان دخت",
  "کیومرث",
  "کیهان",
  "کیاندخت",
  "کیهانه",
  "گرد آفرید",
  "گردان",
  "گرشا",
  "گرشاسب",
  "گرشین",
  "گرگین",
  "گزل",
  "گشتاسب",
  "گشسب",
  "گشسب بانو",
  "گل",
  "گل آذین",
  "گل آرا‌",
  "گلاره",
  "گل افروز",
  "گلاله",
  "گل اندام",
  "گلاویز",
  "گلباد",
  "گلبار",
  "گلبام",
  "گلبان",
  "گلبانو",
  "گلبرگ",
  "گلبو",
  "گلبهار",
  "گلبیز",
  "گلپاره",
  "گلپر",
  "گلپری",
  "گلپوش",
  "گل پونه",
  "گلچین",
  "گلدخت",
  "گلدیس",
  "گلربا",
  "گلرخ",
  "گلرنگ",
  "گلرو",
  "گلشن",
  "گلریز",
  "گلزاد",
  "گلزار",
  "گلسا",
  "گلشید",
  "گلنار",
  "گلناز",
  "گلنسا",
  "گلنواز",
  "گلنوش",
  "گلی",
  "گودرز",
  "گوماتو",
  "گهر چهر",
  "گوهر ناز",
  "گیتی",
  "گیسو",
  "گیلدا",
  "گیو",
  "لادن",
  "لاله",
  "لاله رخ",
  "لاله دخت",
  "لبخند",
  "لقاء",
  "لومانا",
  "لهراسب",
  "مارال",
  "ماری",
  "مازیار",
  "ماکان",
  "مامک",
  "مانا",
  "ماندانا",
  "مانوش",
  "مانی",
  "مانیا",
  "ماهان",
  "ماهاندخت",
  "ماه برزین",
  "ماه جهان",
  "ماهچهر",
  "ماهدخت",
  "ماهور",
  "ماهرخ",
  "ماهزاد",
  "مردآویز",
  "مرداس",
  "مرزبان",
  "مرمر",
  "مزدک",
  "مژده",
  "مژگان",
  "مستان",
  "مستانه",
  "مشکاندخت",
  "مشکناز",
  "مشکین دخت",
  "منیژه",
  "منوچهر",
  "مهبانو",
  "مهبد",
  "مه داد",
  "مهتاب",
  "مهدیس",
  "مه جبین",
  "مه دخت",
  "مهر آذر",
  "مهر آرا",
  "مهر آسا",
  "مهر آفاق",
  "مهر افرین",
  "مهرآب",
  "مهرداد",
  "مهر افزون",
  "مهرام",
  "مهران",
  "مهراندخت",
  "مهراندیش",
  "مهرانفر",
  "مهرانگیز",
  "مهرداد",
  "مهر دخت",
  "مهرزاده ‌",
  "مهرناز",
  "مهرنوش",
  "مهرنکار",
  "مهرنیا",
  "مهروز",
  "مهری",
  "مهریار",
  "مهسا",
  "مهستی",
  "مه سیما",
  "مهشاد",
  "مهشید",
  "مهنام",
  "مهناز",
  "مهنوش",
  "مهوش",
  "مهیار",
  "مهین",
  "مهین دخت",
  "میترا",
  "میخک",
  "مینا",
  "مینا دخت",
  "مینو",
  "مینودخت",
  "مینو فر",
  "نادر",
  "ناز آفرین",
  "نازبانو",
  "نازپرور",
  "نازچهر",
  "نازفر",
  "نازلی",
  "نازی",
  "نازیدخت",
  "نامور",
  "ناهید",
  "ندا",
  "نرسی",
  "نرگس",
  "نرمک",
  "نرمین",
  "نریمان",
  "نسترن",
  "نسرین",
  "نسرین دخت",
  "نسرین نوش",
  "نکیسا",
  "نگار",
  "نگاره",
  "نگارین",
  "نگین",
  "نوا",
  "نوش",
  "نوش آذر",
  "نوش آور",
  "نوشا",
  "نوش آفرین",
  "نوشدخت",
  "نوشروان",
  "نوشفر",
  "نوشناز",
  "نوشین",
  "نوید",
  "نوین",
  "نوین دخت",
  "نیش ا",
  "نیک بین",
  "نیک پی",
  "نیک چهر",
  "نیک خواه",
  "نیکداد",
  "نیکدخت",
  "نیکدل",
  "نیکزاد",
  "نیلوفر",
  "نیما",
  "وامق",
  "ورجاوند",
  "وریا",
  "وشمگیر",
  "وهرز",
  "وهسودان",
  "ویدا",
  "ویس",
  "ویشتاسب",
  "ویگن",
  "هژیر",
  "هخامنش",
  "هربد( هیربد )",
  "هرمز",
  "همایون",
  "هما",
  "همادخت",
  "همدم",
  "همراز",
  "همراه",
  "هنگامه",
  "هوتن",
  "هور",
  "هورتاش",
  "هورچهر",
  "هورداد",
  "هوردخت",
  "هورزاد",
  "هورمند",
  "هوروش",
  "هوشنگ",
  "هوشیار",
  "هومان",
  "هومن",
  "هونام",
  "هویدا",
  "هیتاسب",
  "هیرمند",
  "هیما",
  "هیوا",
  "یادگار",
  "یاسمن ( یاسمین )",
  "یاشار",
  "یاور",
  "یزدان",
  "یگانه",
  "یوشیتا"
];

},{}],311:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");

},{"./first_name":310,"./last_name":312,"./prefix":313}],312:[function(require,module,exports){
module["exports"] = [
  "عارف",
  "عاشوری",
  "عالی",
  "عبادی",
  "عبدالکریمی",
  "عبدالملکی",
  "عراقی",
  "عزیزی",
  "عصار",
  "عقیلی",
  "علم",
  "علم‌الهدی",
  "علی عسگری",
  "علی‌آبادی",
  "علیا",
  "علی‌پور",
  "علی‌زمانی",
  "عنایت",
  "غضنفری",
  "غنی",
  "فارسی",
  "فاطمی",
  "فانی",
  "فتاحی",
  "فرامرزی",
  "فرج",
  "فرشیدورد",
  "فرمانفرمائیان",
  "فروتن",
  "فرهنگ",
  "فریاد",
  "فنایی",
  "فنی‌زاده",
  "فولادوند",
  "فهمیده",
  "قاضی",
  "قانعی",
  "قانونی",
  "قمیشی",
  "قنبری",
  "قهرمان",
  "قهرمانی",
  "قهرمانیان",
  "قهستانی",
  "کاشی",
  "کاکاوند",
  "کامکار",
  "کاملی",
  "کاویانی",
  "کدیور",
  "کردبچه",
  "کرمانی",
  "کریمی",
  "کلباسی",
  "کمالی",
  "کوشکی",
  "کهنمویی",
  "کیان",
  "کیانی (نام خانوادگی)",
  "کیمیایی",
  "گل محمدی",
  "گلپایگانی",
  "گنجی",
  "لاجوردی",
  "لاچینی",
  "لاهوتی",
  "لنکرانی",
  "لوکس",
  "مجاهد",
  "مجتبایی",
  "مجتبوی",
  "مجتهد شبستری",
  "مجتهدی",
  "مجرد",
  "محجوب",
  "محجوبی",
  "محدثی",
  "محمدرضایی",
  "محمدی",
  "مددی",
  "مرادخانی",
  "مرتضوی",
  "مستوفی",
  "مشا",
  "مصاحب",
  "مصباح",
  "مصباح‌زاده",
  "مطهری",
  "مظفر",
  "معارف",
  "معروف",
  "معین",
  "مفتاح",
  "مفتح",
  "مقدم",
  "ملایری",
  "ملک",
  "ملکیان",
  "منوچهری",
  "موحد",
  "موسوی",
  "موسویان",
  "مهاجرانی",
  "مهدی‌پور",
  "میرباقری",
  "میردامادی",
  "میرزاده",
  "میرسپاسی",
  "میزبانی",
  "ناظری",
  "نامور",
  "نجفی",
  "ندوشن",
  "نراقی",
  "نعمت‌زاده",
  "نقدی",
  "نقیب‌زاده",
  "نواب",
  "نوبخت",
  "نوبختی",
  "نهاوندی",
  "نیشابوری",
  "نیلوفری",
  "واثقی",
  "واعظ",
  "واعظ‌زاده",
  "واعظی",
  "وکیلی",
  "هاشمی",
  "هاشمی رفسنجانی",
  "هاشمیان",
  "هامون",
  "هدایت",
  "هراتی",
  "هروی",
  "همایون",
  "همت",
  "همدانی",
  "هوشیار",
  "هومن",
  "یاحقی",
  "یادگار",
  "یثربی",
  "یلدا"
];

},{}],313:[function(require,module,exports){
module["exports"] = [
  "آقای",
  "خانم",
  "دکتر"
];

},{}],314:[function(require,module,exports){
module["exports"] = [
  "####",
  "###",
  "##",
  "#"
];

},{}],315:[function(require,module,exports){
module.exports=require(49)
},{"/Users/a/dev/faker.js/lib/locales/de_AT/address/city.js":49}],316:[function(require,module,exports){
module["exports"] = [
  "Paris",
  "Marseille",
  "Lyon",
  "Toulouse",
  "Nice",
  "Nantes",
  "Strasbourg",
  "Montpellier",
  "Bordeaux",
  "Lille13",
  "Rennes",
  "Reims",
  "Le Havre",
  "Saint-Étienne",
  "Toulon",
  "Grenoble",
  "Dijon",
  "Angers",
  "Saint-Denis",
  "Villeurbanne",
  "Le Mans",
  "Aix-en-Provence",
  "Brest",
  "Nîmes",
  "Limoges",
  "Clermont-Ferrand",
  "Tours",
  "Amiens",
  "Metz",
  "Perpignan",
  "Besançon",
  "Orléans",
  "Boulogne-Billancourt",
  "Mulhouse",
  "Rouen",
  "Caen",
  "Nancy",
  "Saint-Denis",
  "Saint-Paul",
  "Montreuil",
  "Argenteuil",
  "Roubaix",
  "Dunkerque14",
  "Tourcoing",
  "Nanterre",
  "Avignon",
  "Créteil",
  "Poitiers",
  "Fort-de-France",
  "Courbevoie",
  "Versailles",
  "Vitry-sur-Seine",
  "Colombes",
  "Pau",
  "Aulnay-sous-Bois",
  "Asnières-sur-Seine",
  "Rueil-Malmaison",
  "Saint-Pierre",
  "Antibes",
  "Saint-Maur-des-Fossés",
  "Champigny-sur-Marne",
  "La Rochelle",
  "Aubervilliers",
  "Calais",
  "Cannes",
  "Le Tampon",
  "Béziers",
  "Colmar",
  "Bourges",
  "Drancy",
  "Mérignac",
  "Saint-Nazaire",
  "Valence",
  "Ajaccio",
  "Issy-les-Moulineaux",
  "Villeneuve-d'Ascq",
  "Levallois-Perret",
  "Noisy-le-Grand",
  "Quimper",
  "La Seyne-sur-Mer",
  "Antony",
  "Troyes",
  "Neuilly-sur-Seine",
  "Sarcelles",
  "Les Abymes",
  "Vénissieux",
  "Clichy",
  "Lorient",
  "Pessac",
  "Ivry-sur-Seine",
  "Cergy",
  "Cayenne",
  "Niort",
  "Chambéry",
  "Montauban",
  "Saint-Quentin",
  "Villejuif",
  "Hyères",
  "Beauvais",
  "Cholet"
];

},{}],317:[function(require,module,exports){
module["exports"] = [
  "France"
];

},{}],318:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.building_number = require("./building_number");
address.street_prefix = require("./street_prefix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_suffix = require("./street_suffix");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":314,"./city":315,"./city_name":316,"./default_country":317,"./postcode":319,"./secondary_address":320,"./state":321,"./street_address":322,"./street_name":323,"./street_prefix":324,"./street_suffix":325}],319:[function(require,module,exports){
module.exports=require(279)
},{"/Users/a/dev/faker.js/lib/locales/es/address/postcode.js":279}],320:[function(require,module,exports){
module["exports"] = [
  "Apt. ###",
  "# étage"
];

},{}],321:[function(require,module,exports){
module["exports"] = [
  "Alsace",
  "Aquitaine",
  "Auvergne",
  "Basse-Normandie",
  "Bourgogne",
  "Bretagne",
  "Centre",
  "Champagne-Ardenne",
  "Corse",
  "Franche-Comté",
  "Haute-Normandie",
  "Île-de-France",
  "Languedoc-Roussillon",
  "Limousin",
  "Lorraine",
  "Midi-Pyrénées",
  "Nord-Pas-de-Calais",
  "Pays de la Loire",
  "Picardie",
  "Poitou-Charentes",
  "Provence-Alpes-Côte d'Azur",
  "Rhône-Alpes"
];

},{}],322:[function(require,module,exports){
module.exports=require(105)
},{"/Users/a/dev/faker.js/lib/locales/en/address/street_address.js":105}],323:[function(require,module,exports){
module["exports"] = [
  "#{street_prefix} #{street_suffix}"
];

},{}],324:[function(require,module,exports){
module["exports"] = [
  "Allée, Voie",
  "Rue",
  "Avenue",
  "Boulevard",
  "Quai",
  "Passage",
  "Impasse",
  "Place"
];

},{}],325:[function(require,module,exports){
module["exports"] = [
  "de l'Abbaye",
  "Adolphe Mille",
  "d'Alésia",
  "d'Argenteuil",
  "d'Assas",
  "du Bac",
  "de Paris",
  "La Boétie",
  "Bonaparte",
  "de la Bûcherie",
  "de Caumartin",
  "Charlemagne",
  "du Chat-qui-Pêche",
  "de la Chaussée-d'Antin",
  "du Dahomey",
  "Dauphine",
  "Delesseux",
  "du Faubourg Saint-Honoré",
  "du Faubourg-Saint-Denis",
  "de la Ferronnerie",
  "des Francs-Bourgeois",
  "des Grands Augustins",
  "de la Harpe",
  "du Havre",
  "de la Huchette",
  "Joubert",
  "Laffitte",
  "Lepic",
  "des Lombards",
  "Marcadet",
  "Molière",
  "Monsieur-le-Prince",
  "de Montmorency",
  "Montorgueil",
  "Mouffetard",
  "de Nesle",
  "Oberkampf",
  "de l'Odéon",
  "d'Orsel",
  "de la Paix",
  "des Panoramas",
  "Pastourelle",
  "Pierre Charron",
  "de la Pompe",
  "de Presbourg",
  "de Provence",
  "de Richelieu",
  "de Rivoli",
  "des Rosiers",
  "Royale",
  "d'Abbeville",
  "Saint-Honoré",
  "Saint-Bernard",
  "Saint-Denis",
  "Saint-Dominique",
  "Saint-Jacques",
  "Saint-Séverin",
  "des Saussaies",
  "de Seine",
  "de Solférino",
  "Du Sommerard",
  "de Tilsitt",
  "Vaneau",
  "de Vaugirard",
  "de la Victoire",
  "Zadkine"
];

},{}],326:[function(require,module,exports){
module.exports=require(123)
},{"/Users/a/dev/faker.js/lib/locales/en/company/adjective.js":123}],327:[function(require,module,exports){
module.exports=require(124)
},{"/Users/a/dev/faker.js/lib/locales/en/company/bs_adjective.js":124}],328:[function(require,module,exports){
module.exports=require(125)
},{"/Users/a/dev/faker.js/lib/locales/en/company/bs_noun.js":125}],329:[function(require,module,exports){
module.exports=require(126)
},{"/Users/a/dev/faker.js/lib/locales/en/company/bs_verb.js":126}],330:[function(require,module,exports){
module.exports=require(127)
},{"/Users/a/dev/faker.js/lib/locales/en/company/descriptor.js":127}],331:[function(require,module,exports){
arguments[4][128][0].apply(exports,arguments)
},{"./adjective":326,"./bs_adjective":327,"./bs_noun":328,"./bs_verb":329,"./descriptor":330,"./name":332,"./noun":333,"./suffix":334,"/Users/a/dev/faker.js/lib/locales/en/company/index.js":128}],332:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name} et #{Name.last_name}"
];

},{}],333:[function(require,module,exports){
module.exports=require(130)
},{"/Users/a/dev/faker.js/lib/locales/en/company/noun.js":130}],334:[function(require,module,exports){
module["exports"] = [
  "SARL",
  "SA",
  "EURL",
  "SAS",
  "SEM",
  "SCOP",
  "GIE",
  "EI"
];

},{}],335:[function(require,module,exports){
var fr = {};
module['exports'] = fr;
fr.title = "French";
fr.address = require("./address");
fr.company = require("./company");
fr.internet = require("./internet");
fr.lorem = require("./lorem");
fr.name = require("./name");
fr.phone_number = require("./phone_number");

},{"./address":318,"./company":331,"./internet":338,"./lorem":339,"./name":343,"./phone_number":349}],336:[function(require,module,exports){
module["exports"] = [
  "com",
  "fr",
  "eu",
  "info",
  "name",
  "net",
  "org"
];

},{}],337:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "yahoo.fr",
  "hotmail.fr"
];

},{}],338:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":336,"./free_email":337,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],339:[function(require,module,exports){
module.exports=require(158)
},{"./supplemental":340,"./words":341,"/Users/a/dev/faker.js/lib/locales/en/lorem/index.js":158}],340:[function(require,module,exports){
module.exports=require(159)
},{"/Users/a/dev/faker.js/lib/locales/en/lorem/supplemental.js":159}],341:[function(require,module,exports){
module.exports=require(39)
},{"/Users/a/dev/faker.js/lib/locales/de/lorem/words.js":39}],342:[function(require,module,exports){
module["exports"] = [
  "Enzo",
  "Lucas",
  "Mathis",
  "Nathan",
  "Thomas",
  "Hugo",
  "Théo",
  "Tom",
  "Louis",
  "Raphaël",
  "Clément",
  "Léo",
  "Mathéo",
  "Maxime",
  "Alexandre",
  "Antoine",
  "Yanis",
  "Paul",
  "Baptiste",
  "Alexis",
  "Gabriel",
  "Arthur",
  "Jules",
  "Ethan",
  "Noah",
  "Quentin",
  "Axel",
  "Evan",
  "Mattéo",
  "Romain",
  "Valentin",
  "Maxence",
  "Noa",
  "Adam",
  "Nicolas",
  "Julien",
  "Mael",
  "Pierre",
  "Rayan",
  "Victor",
  "Mohamed",
  "Adrien",
  "Kylian",
  "Sacha",
  "Benjamin",
  "Léa",
  "Clara",
  "Manon",
  "Chloé",
  "Camille",
  "Ines",
  "Sarah",
  "Jade",
  "Lola",
  "Anaïs",
  "Lucie",
  "Océane",
  "Lilou",
  "Marie",
  "Eva",
  "Romane",
  "Lisa",
  "Zoe",
  "Julie",
  "Mathilde",
  "Louise",
  "Juliette",
  "Clémence",
  "Célia",
  "Laura",
  "Lena",
  "Maëlys",
  "Charlotte",
  "Ambre",
  "Maeva",
  "Pauline",
  "Lina",
  "Jeanne",
  "Lou",
  "Noémie",
  "Justine",
  "Louna",
  "Elisa",
  "Alice",
  "Emilie",
  "Carla",
  "Maëlle",
  "Alicia",
  "Mélissa"
];

},{}],343:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":342,"./last_name":344,"./name":345,"./prefix":346,"./title":347}],344:[function(require,module,exports){
module["exports"] = [
  "Martin",
  "Bernard",
  "Dubois",
  "Thomas",
  "Robert",
  "Richard",
  "Petit",
  "Durand",
  "Leroy",
  "Moreau",
  "Simon",
  "Laurent",
  "Lefebvre",
  "Michel",
  "Garcia",
  "David",
  "Bertrand",
  "Roux",
  "Vincent",
  "Fournier",
  "Morel",
  "Girard",
  "Andre",
  "Lefevre",
  "Mercier",
  "Dupont",
  "Lambert",
  "Bonnet",
  "Francois",
  "Martinez",
  "Legrand",
  "Garnier",
  "Faure",
  "Rousseau",
  "Blanc",
  "Guerin",
  "Muller",
  "Henry",
  "Roussel",
  "Nicolas",
  "Perrin",
  "Morin",
  "Mathieu",
  "Clement",
  "Gauthier",
  "Dumont",
  "Lopez",
  "Fontaine",
  "Chevalier",
  "Robin",
  "Masson",
  "Sanchez",
  "Gerard",
  "Nguyen",
  "Boyer",
  "Denis",
  "Lemaire",
  "Duval",
  "Joly",
  "Gautier",
  "Roger",
  "Roche",
  "Roy",
  "Noel",
  "Meyer",
  "Lucas",
  "Meunier",
  "Jean",
  "Perez",
  "Marchand",
  "Dufour",
  "Blanchard",
  "Marie",
  "Barbier",
  "Brun",
  "Dumas",
  "Brunet",
  "Schmitt",
  "Leroux",
  "Colin",
  "Fernandez",
  "Pierre",
  "Renard",
  "Arnaud",
  "Rolland",
  "Caron",
  "Aubert",
  "Giraud",
  "Leclerc",
  "Vidal",
  "Bourgeois",
  "Renaud",
  "Lemoine",
  "Picard",
  "Gaillard",
  "Philippe",
  "Leclercq",
  "Lacroix",
  "Fabre",
  "Dupuis",
  "Olivier",
  "Rodriguez",
  "Da silva",
  "Hubert",
  "Louis",
  "Charles",
  "Guillot",
  "Riviere",
  "Le gall",
  "Guillaume",
  "Adam",
  "Rey",
  "Moulin",
  "Gonzalez",
  "Berger",
  "Lecomte",
  "Menard",
  "Fleury",
  "Deschamps",
  "Carpentier",
  "Julien",
  "Benoit",
  "Paris",
  "Maillard",
  "Marchal",
  "Aubry",
  "Vasseur",
  "Le roux",
  "Renault",
  "Jacquet",
  "Collet",
  "Prevost",
  "Poirier",
  "Charpentier",
  "Royer",
  "Huet",
  "Baron",
  "Dupuy",
  "Pons",
  "Paul",
  "Laine",
  "Carre",
  "Breton",
  "Remy",
  "Schneider",
  "Perrot",
  "Guyot",
  "Barre",
  "Marty",
  "Cousin"
];

},{}],345:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{last_name} #{first_name}"
];

},{}],346:[function(require,module,exports){
module["exports"] = [
  "M",
  "Mme",
  "Mlle",
  "Dr",
  "Prof"
];

},{}],347:[function(require,module,exports){
module["exports"] = {
  "job": [
    "Superviseur",
    "Executif",
    "Manager",
    "Ingenieur",
    "Specialiste",
    "Directeur",
    "Coordinateur",
    "Administrateur",
    "Architecte",
    "Analyste",
    "Designer",
    "Technicien",
    "Developpeur",
    "Producteur",
    "Consultant",
    "Assistant",
    "Agent",
    "Stagiaire"
  ]
};

},{}],348:[function(require,module,exports){
module["exports"] = [
  "01########",
  "02########",
  "03########",
  "04########",
  "05########",
  "06########",
  "07########",
  "+33 1########",
  "+33 2########",
  "+33 3########",
  "+33 4########",
  "+33 5########",
  "+33 6########",
  "+33 7########"
];

},{}],349:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":348,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],350:[function(require,module,exports){
module.exports=require(193)
},{"/Users/a/dev/faker.js/lib/locales/en_CA/address/default_country.js":193}],351:[function(require,module,exports){
arguments[4][226][0].apply(exports,arguments)
},{"./default_country":350,"./postcode":352,"./state":353,"./state_abbr":354,"/Users/a/dev/faker.js/lib/locales/en_IND/address/index.js":226}],352:[function(require,module,exports){
module.exports=require(195)
},{"/Users/a/dev/faker.js/lib/locales/en_CA/address/postcode.js":195}],353:[function(require,module,exports){
module["exports"] = [
  "Alberta",
  "Colombie-Britannique",
  "Manitoba",
  "Nouveau-Brunswick",
  "Terre-Neuve-et-Labrador",
  "Nouvelle-Écosse",
  "Territoires du Nord-Ouest",
  "Nunavut",
  "Ontario",
  "Île-du-Prince-Édouard",
  "Québec",
  "Saskatchewan",
  "Yukon"
];

},{}],354:[function(require,module,exports){
module["exports"] = [
  "AB",
  "BC",
  "MB",
  "NB",
  "NL",
  "NS",
  "NU",
  "NT",
  "ON",
  "PE",
  "QC",
  "SK",
  "YK"
];

},{}],355:[function(require,module,exports){
var fr_CA = {};
module['exports'] = fr_CA;
fr_CA.title = "Canada (French)";
fr_CA.address = require("./address");
fr_CA.internet = require("./internet");
fr_CA.phone_number = require("./phone_number");

},{"./address":351,"./internet":358,"./phone_number":360}],356:[function(require,module,exports){
module["exports"] = [
  "qc.ca",
  "ca",
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],357:[function(require,module,exports){
module.exports=require(200)
},{"/Users/a/dev/faker.js/lib/locales/en_CA/internet/free_email.js":200}],358:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":356,"./free_email":357,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],359:[function(require,module,exports){
module["exports"] = [
  "### ###-####",
  "1 ### ###-####",
  "### ###-####, poste ###"
];

},{}],360:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":359,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],361:[function(require,module,exports){
module["exports"] = [
  "###",
  "##",
  "#"
];

},{}],362:[function(require,module,exports){
module["exports"] = [
  "#{city_prefix} #{Name.first_name}#{city_suffix}",
  "#{city_prefix} #{Name.first_name}",
  "#{Name.first_name}#{city_suffix}",
  "#{Name.first_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}"
];

},{}],363:[function(require,module,exports){
module["exports"] = [
  "აბასთუმანი",
  "აბაშა",
  "ადიგენი",
  "ამბროლაური",
  "ანაკლია",
  "ასპინძა",
  "ახალგორი",
  "ახალქალაქი",
  "ახალციხე",
  "ახმეტა",
  "ბათუმი",
  "ბაკურიანი",
  "ბაღდათი",
  "ბახმარო",
  "ბოლნისი",
  "ბორჯომი",
  "გარდაბანი",
  "გონიო",
  "გორი",
  "გრიგოლეთი",
  "გუდაური",
  "გურჯაანი",
  "დედოფლისწყარო",
  "დმანისი",
  "დუშეთი",
  "ვანი",
  "ზესტაფონი",
  "ზუგდიდი",
  "თბილისი",
  "თეთრიწყარო",
  "თელავი",
  "თერჯოლა",
  "თიანეთი",
  "კასპი",
  "კვარიათი",
  "კიკეთი",
  "კოჯორი",
  "ლაგოდეხი",
  "ლანჩხუთი",
  "ლენტეხი",
  "მარნეული",
  "მარტვილი",
  "მესტია",
  "მცხეთა",
  "მწვანე კონცხი",
  "ნინოწმინდა",
  "ოზურგეთი",
  "ონი",
  "რუსთავი",
  "საგარეჯო",
  "საგურამო",
  "საირმე",
  "სამტრედია",
  "სარფი",
  "საჩხერე",
  "სენაკი",
  "სიღნაღი",
  "სტეფანწმინდა",
  "სურამი",
  "ტაბახმელა",
  "ტყიბული",
  "ურეკი",
  "ფოთი",
  "ქარელი",
  "ქედა",
  "ქობულეთი",
  "ქუთაისი",
  "ყვარელი",
  "შუახევი",
  "ჩაქვი",
  "ჩოხატაური",
  "ცაგერი",
  "ცხოროჭყუ",
  "წავკისი",
  "წალენჯიხა",
  "წალკა",
  "წაღვერი",
  "წეროვანი",
  "წნორი",
  "წყალტუბო",
  "წყნეთი",
  "ჭიათურა",
  "ხარაგაული",
  "ხაშური",
  "ხელვაჩაური",
  "ხობი",
  "ხონი",
  "ხულო"
];

},{}],364:[function(require,module,exports){
module["exports"] = [
  "ახალი",
  "ძველი",
  "ზემო",
  "ქვემო"
];

},{}],365:[function(require,module,exports){
module["exports"] = [
  "სოფელი",
  "ძირი",
  "სკარი",
  "დაბა"
];

},{}],366:[function(require,module,exports){
module["exports"] = [
  "ავსტრალია",
  "ავსტრია",
  "ავღანეთი",
  "აზავადი",
  "აზერბაიჯანი",
  "აზიაში",
  "აზიის",
  "ალბანეთი",
  "ალჟირი",
  "ამაღლება და ტრისტანი-და-კუნია",
  "ამერიკის ვირჯინიის კუნძულები",
  "ამერიკის სამოა",
  "ამერიკის შეერთებული შტატები",
  "ამერიკის",
  "ანგილია",
  "ანგოლა",
  "ანდორა",
  "ანტიგუა და ბარბუდა",
  "არაბეთის საემიროები",
  "არაბთა გაერთიანებული საამიროები",
  "არაბული ქვეყნების ლიგის",
  "არგენტინა",
  "არუბა",
  "არცნობილი ქვეყნების სია",
  "აფრიკაში",
  "აფრიკაშია",
  "აღდგომის კუნძული",
  "აღმ. ტიმორი",
  "აღმოსავლეთი აფრიკა",
  "აღმოსავლეთი ტიმორი",
  "აშშ",
  "აშშ-ის ვირჯინის კუნძულები",
  "ახალი ზელანდია",
  "ახალი კალედონია",
  "ბანგლადეში",
  "ბარბადოსი",
  "ბაჰამის კუნძულები",
  "ბაჰრეინი",
  "ბელარუსი",
  "ბელგია",
  "ბელიზი",
  "ბენინი",
  "ბერმუდა",
  "ბერმუდის კუნძულები",
  "ბოლივია",
  "ბოსნია და ჰერცეგოვინა",
  "ბოტსვანა",
  "ბრაზილია",
  "ბრიტანეთის ვირჯინიის კუნძულები",
  "ბრიტანეთის ვირჯინის კუნძულები",
  "ბრიტანეთის ინდოეთის ოკეანის ტერიტორია",
  "ბრუნეი",
  "ბულგარეთი",
  "ბურკინა ფასო",
  "ბურკინა-ფასო",
  "ბურუნდი",
  "ბჰუტანი",
  "გაბონი",
  "გაერთიანებული სამეფო",
  "გაეროს",
  "გაიანა",
  "გამბია",
  "განა",
  "გერმანია",
  "გვადელუპა",
  "გვატემალა",
  "გვინეა",
  "გვინეა-ბისაუ",
  "გიბრალტარი",
  "გრენადა",
  "გრენლანდია",
  "გუამი",
  "დამოკიდებული ტერ.",
  "დამოკიდებული ტერიტორია",
  "დამოკიდებული",
  "დანია",
  "დასავლეთი აფრიკა",
  "დასავლეთი საჰარა",
  "დიდი ბრიტანეთი",
  "დომინიკა",
  "დომინიკელთა რესპუბლიკა",
  "ეგვიპტე",
  "ევროკავშირის",
  "ევროპასთან",
  "ევროპაშია",
  "ევროპის ქვეყნები",
  "ეთიოპია",
  "ეკვადორი",
  "ეკვატორული გვინეა",
  "ეპარსეს კუნძული",
  "ერაყი",
  "ერიტრეა",
  "ესპანეთი",
  "ესპანეთის სუვერენული ტერიტორიები",
  "ესტონეთი",
  "ეშმორის და კარტიეს კუნძულები",
  "ვანუატუ",
  "ვატიკანი",
  "ვენესუელა",
  "ვიეტნამი",
  "ზამბია",
  "ზიმბაბვე",
  "თურქეთი",
  "თურქმენეთი",
  "იამაიკა",
  "იან მაიენი",
  "იაპონია",
  "იემენი",
  "ინდოეთი",
  "ინდონეზია",
  "იორდანია",
  "ირანი",
  "ირლანდია",
  "ისლანდია",
  "ისრაელი",
  "იტალია",
  "კაბო-ვერდე",
  "კაიმანის კუნძულები",
  "კამბოჯა",
  "კამერუნი",
  "კანადა",
  "კანარის კუნძულები",
  "კარიბის ზღვის",
  "კატარი",
  "კენია",
  "კვიპროსი",
  "კინგმენის რიფი",
  "კირიბატი",
  "კლიპერტონი",
  "კოლუმბია",
  "კომორი",
  "კომორის კუნძულები",
  "კონგოს დემოკრატიული რესპუბლიკა",
  "კონგოს რესპუბლიკა",
  "კორეის რესპუბლიკა",
  "კოსტა-რიკა",
  "კოტ-დ’ივუარი",
  "კუბა",
  "კუკის კუნძულები",
  "ლაოსი",
  "ლატვია",
  "ლესოთო",
  "ლიბანი",
  "ლიბერია",
  "ლიბია",
  "ლიტვა",
  "ლიხტენშტაინი",
  "ლუქსემბურგი",
  "მადაგასკარი",
  "მადეირა",
  "მავრიკი",
  "მავრიტანია",
  "მაიოტა",
  "მაკაო",
  "მაკედონია",
  "მალავი",
  "მალაიზია",
  "მალდივი",
  "მალდივის კუნძულები",
  "მალი",
  "მალტა",
  "მაროკო",
  "მარტინიკა",
  "მარშალის კუნძულები",
  "მარჯნის ზღვის კუნძულები",
  "მელილია",
  "მექსიკა",
  "მიანმარი",
  "მიკრონეზია",
  "მიკრონეზიის ფედერაციული შტატები",
  "მიმდებარე კუნძულები",
  "მოზამბიკი",
  "მოლდოვა",
  "მონაკო",
  "მონსერატი",
  "მონღოლეთი",
  "ნამიბია",
  "ნაურუ",
  "ნაწილობრივ აფრიკაში",
  "ნეპალი",
  "ნიგერი",
  "ნიგერია",
  "ნიდერლანდი",
  "ნიდერლანდის ანტილები",
  "ნიკარაგუა",
  "ნიუე",
  "ნორვეგია",
  "ნორფოლკის კუნძული",
  "ოკეანეთის",
  "ოკეანიას",
  "ომანი",
  "პაკისტანი",
  "პალაუ",
  "პალესტინა",
  "პალმირა (ატოლი)",
  "პანამა",
  "პანტელერია",
  "პაპუა-ახალი გვინეა",
  "პარაგვაი",
  "პერუ",
  "პიტკერნის კუნძულები",
  "პოლონეთი",
  "პორტუგალია",
  "პრინც-ედუარდის კუნძული",
  "პუერტო-რიკო",
  "რეუნიონი",
  "როტუმა",
  "რუანდა",
  "რუმინეთი",
  "რუსეთი",
  "საბერძნეთი",
  "სადავო ტერიტორიები",
  "სალვადორი",
  "სამოა",
  "სამხ. კორეა",
  "სამხრეთ ამერიკაშია",
  "სამხრეთ ამერიკის",
  "სამხრეთ აფრიკის რესპუბლიკა",
  "სამხრეთი აფრიკა",
  "სამხრეთი გეორგია და სამხრეთ სენდვიჩის კუნძულები",
  "სამხრეთი სუდანი",
  "სან-მარინო",
  "სან-ტომე და პრინსიპი",
  "საუდის არაბეთი",
  "საფრანგეთი",
  "საფრანგეთის გვიანა",
  "საფრანგეთის პოლინეზია",
  "საქართველო",
  "საჰარის არაბთა დემოკრატიული რესპუბლიკა",
  "სეიშელის კუნძულები",
  "სენ-ბართელმი",
  "სენ-მარტენი",
  "სენ-პიერი და მიკელონი",
  "სენეგალი",
  "სენტ-ვინსენტი და გრენადინები",
  "სენტ-კიტსი და ნევისი",
  "სენტ-ლუსია",
  "სერბეთი",
  "სეუტა",
  "სვაზილენდი",
  "სვალბარდი",
  "სიერა-ლეონე",
  "სინგაპური",
  "სირია",
  "სლოვაკეთი",
  "სლოვენია",
  "სოკოტრა",
  "სოლომონის კუნძულები",
  "სომალი",
  "სომალილენდი",
  "სომხეთი",
  "სუდანი",
  "სუვერენული სახელმწიფოები",
  "სურინამი",
  "ტაივანი",
  "ტაილანდი",
  "ტანზანია",
  "ტაჯიკეთი",
  "ტერიტორიები",
  "ტერქსისა და კაიკოსის კუნძულები",
  "ტოგო",
  "ტოკელაუ",
  "ტონგა",
  "ტრანსკონტინენტური ქვეყანა",
  "ტრინიდადი და ტობაგო",
  "ტუვალუ",
  "ტუნისი",
  "უგანდა",
  "უზბეკეთი",
  "უკრაინა",
  "უნგრეთი",
  "უოლისი და ფუტუნა",
  "ურუგვაი",
  "ფარერის კუნძულები",
  "ფილიპინები",
  "ფინეთი",
  "ფიჯი",
  "ფოლკლენდის კუნძულები",
  "ქვეყნები",
  "ქოქოსის კუნძულები",
  "ქუვეითი",
  "ღაზის სექტორი",
  "ყაზახეთი",
  "ყირგიზეთი",
  "შვედეთი",
  "შვეიცარია",
  "შობის კუნძული",
  "შრი-ლანკა",
  "ჩადი",
  "ჩერნოგორია",
  "ჩეჩნეთის რესპუბლიკა იჩქერია",
  "ჩეხეთი",
  "ჩილე",
  "ჩინეთი",
  "ჩრდ. კორეა",
  "ჩრდილოეთ ამერიკის",
  "ჩრდილოეთ მარიანას კუნძულები",
  "ჩრდილოეთი აფრიკა",
  "ჩრდილოეთი კორეა",
  "ჩრდილოეთი მარიანას კუნძულები",
  "ცენტრალური აფრიკა",
  "ცენტრალური აფრიკის რესპუბლიკა",
  "წევრები",
  "წმინდა ელენე",
  "წმინდა ელენეს კუნძული",
  "ხორვატია",
  "ჯერსი",
  "ჯიბუტი",
  "ჰავაი",
  "ჰაიტი",
  "ჰერდი და მაკდონალდის კუნძულები",
  "ჰონდურასი",
  "ჰონკონგი"
];

},{}],367:[function(require,module,exports){
module["exports"] = [
  "საქართველო"
];

},{}],368:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.city = require("./city");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.city_name = require("./city_name");
address.street_title = require("./street_title");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":361,"./city":362,"./city_name":363,"./city_prefix":364,"./city_suffix":365,"./country":366,"./default_country":367,"./postcode":369,"./secondary_address":370,"./street_address":371,"./street_name":372,"./street_suffix":373,"./street_title":374}],369:[function(require,module,exports){
module["exports"] = [
  "01##"
];

},{}],370:[function(require,module,exports){
module["exports"] = [
  "კორპ. ##",
  "შენობა ###"
];

},{}],371:[function(require,module,exports){
module.exports=require(25)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_address.js":25}],372:[function(require,module,exports){
module["exports"] = [
  "#{street_title} #{street_suffix}"
];

},{}],373:[function(require,module,exports){
module["exports"] = [
  "გამზ.",
  "გამზირი",
  "ქ.",
  "ქუჩა",
  "ჩიხი",
  "ხეივანი"
];

},{}],374:[function(require,module,exports){
module["exports"] = [
  "აბაშიძის",
  "აბესაძის",
  "აბულაძის",
  "აგლაძის",
  "ადლერის",
  "ავიაქიმიის",
  "ავლაბრის",
  "ათარბეგოვის",
  "ათონელის",
  "ალავერდოვის",
  "ალექსიძის",
  "ალილუევის",
  "ალმასიანის",
  "ამაღლების",
  "ამირეჯიბის",
  "ანაგის",
  "ანდრონიკაშვილის",
  "ანთელავას",
  "ანჯაფარიძის",
  "არაგვის",
  "არდონის",
  "არეშიძის",
  "ასათიანის",
  "ასკურავას",
  "ასლანიდის",
  "ატენის",
  "აფხაზი",
  "აღმაშენებლის",
  "ახალშენის",
  "ახვლედიანის",
  "ბააზოვის",
  "ბაბისხევის",
  "ბაბუშკინის",
  "ბაგრატიონის",
  "ბალანჩივაძეების",
  "ბალანჩივაძის",
  "ბალანჩინის",
  "ბალმაშევის",
  "ბარამიძის",
  "ბარნოვის",
  "ბაშალეიშვილის",
  "ბევრეთის",
  "ბელინსკის",
  "ბელოსტოკის",
  "ბენაშვილის",
  "ბეჟანიშვილის",
  "ბერიძის",
  "ბოლქვაძის",
  "ბოცვაძის",
  "ბოჭორიშვილის",
  "ბოჭორიძის",
  "ბუაჩიძის",
  "ბუდაპეშტის",
  "ბურკიაშვილის",
  "ბურძგლას",
  "გაბესკირიას",
  "გაგარინის",
  "გაზაფხულის",
  "გამრეკელის",
  "გამსახურდიას",
  "გარეჯელის",
  "გეგეჭკორის",
  "გედაურის",
  "გელოვანი",
  "გელოვანის",
  "გერცენის",
  "გლდანის",
  "გოგებაშვილის",
  "გოგიბერიძის",
  "გოგოლის",
  "გონაშვილის",
  "გორგასლის",
  "გრანელის",
  "გრიზოდუბოვას",
  "გრინევიცკის",
  "გრომოვას",
  "გრუზინსკის",
  "გუდიაშვილის",
  "გულრიფშის",
  "გულუას",
  "გურამიშვილის",
  "გურგენიძის",
  "დადიანის",
  "დავითაშვილის",
  "დამაკავშირებელი",
  "დარიალის",
  "დედოფლისწყაროს",
  "დეპუტატის",
  "დიდგორის",
  "დიდი",
  "დიდუბის",
  "დიუმას",
  "დიღმის",
  "დიღომში",
  "დოლიძის",
  "დუნდუას",
  "დურმიშიძის",
  "ელიავას",
  "ენგელსის",
  "ენგურის",
  "ეპისკოპოსის",
  "ერისთავი",
  "ერისთავის",
  "ვაზისუბნის",
  "ვაკელის",
  "ვართაგავას",
  "ვატუტინის",
  "ვაჩნაძის",
  "ვაცეკის",
  "ვეკუას",
  "ვეშაპურის",
  "ვირსალაძის",
  "ვოლოდარსკის",
  "ვორონინის",
  "ზაარბრიუკენის",
  "ზაზიაშვილის",
  "ზაზიშვილის",
  "ზაკომოლდინის",
  "ზანდუკელის",
  "ზაქარაიას",
  "ზაქარიაძის",
  "ზახაროვის",
  "ზაჰესის",
  "ზნაურის",
  "ზურაბაშვილის",
  "ზღვის",
  "თაბუკაშვილის",
  "თავაძის",
  "თავისუფლების",
  "თამარაშვილის",
  "თაქთაქიშვილის",
  "თბილელის",
  "თელიას",
  "თორაძის",
  "თოფურიძის",
  "იალბუზის",
  "იამანიძის",
  "იაშვილის",
  "იბერიის",
  "იერუსალიმის",
  "ივანიძის",
  "ივერიელის",
  "იზაშვილის",
  "ილურიძის",
  "იმედაშვილის",
  "იმედაძის",
  "იმედის",
  "ინანიშვილის",
  "ინგოროყვას",
  "ინდუსტრიალიზაციის",
  "ინჟინრის",
  "ინწკირველის",
  "ირბახის",
  "ირემაშვილის",
  "ისაკაძის",
  "ისპასჰანლის",
  "იტალიის",
  "იუნკერთა",
  "კათალიკოსის",
  "კაიროს",
  "კაკაბაძის",
  "კაკაბეთის",
  "კაკლიანის",
  "კალანდაძის",
  "კალიაევის",
  "კალინინის",
  "კამალოვის",
  "კამოს",
  "კაშენის",
  "კახოვკის",
  "კედიას",
  "კელაპტრიშვილის",
  "კერესელიძის",
  "კეცხოველის",
  "კიბალჩიჩის",
  "კიკნაძის",
  "კიროვის",
  "კობარეთის",
  "კოლექტივიზაციის",
  "კოლმეურნეობის",
  "კოლხეთის",
  "კომკავშირის",
  "კომუნისტური",
  "კონსტიტუციის",
  "კოოპერაციის",
  "კოსტავას",
  "კოტეტიშვილის",
  "კოჩეტკოვის",
  "კოჯრის",
  "კრონშტადტის",
  "კროპოტკინის",
  "კრუპსკაიას",
  "კუიბიშევის",
  "კურნატოვსკის",
  "კურტანოვსკის",
  "კუტუზოვის",
  "ლაღიძის",
  "ლელაშვილის",
  "ლენინაშენის",
  "ლენინგრადის",
  "ლენინის",
  "ლენის",
  "ლეონიძის",
  "ლვოვის",
  "ლორთქიფანიძის",
  "ლოტკინის",
  "ლუბლიანის",
  "ლუბოვსკის",
  "ლუნაჩარსკის",
  "ლუქსემბურგის",
  "მაგნიტოგორსკის",
  "მაზნიაშვილის",
  "მაისურაძის",
  "მამარდაშვილის",
  "მამაცაშვილის",
  "მანაგაძის",
  "მანჯგალაძის",
  "მარის",
  "მარუაშვილის",
  "მარქსის",
  "მარჯანის",
  "მატროსოვის",
  "მაჭავარიანი",
  "მახალდიანის",
  "მახარაძის",
  "მებაღიშვილის",
  "მეგობრობის",
  "მელაანის",
  "მერკვილაძის",
  "მესხიას",
  "მესხის",
  "მეტეხის",
  "მეტრეველი",
  "მეჩნიკოვის",
  "მთავარანგელოზის",
  "მიასნიკოვის",
  "მილორავას",
  "მიმინოშვილის",
  "მიროტაძის",
  "მიქატაძის",
  "მიქელაძის",
  "მონტინის",
  "მორეტის",
  "მოსკოვის",
  "მრევლიშვილის",
  "მუშკორის",
  "მუჯირიშვილის",
  "მშვიდობის",
  "მცხეთის",
  "ნადირაძის",
  "ნაკაშიძის",
  "ნარიმანოვის",
  "ნასიძის",
  "ნაფარეულის",
  "ნეკრასოვის",
  "ნიაღვრის",
  "ნინიძის",
  "ნიშნიანიძის",
  "ობოლაძის",
  "ონიანის",
  "ოჟიოს",
  "ორახელაშვილის",
  "ორბელიანის",
  "ორჯონიკიძის",
  "ოქტომბრის",
  "ოცდაექვსი",
  "პავლოვის",
  "პარალელურის",
  "პარიზის",
  "პეკინის",
  "პეროვსკაიას",
  "პეტეფის",
  "პიონერის",
  "პირველი",
  "პისარევის",
  "პლეხანოვის",
  "პრავდის",
  "პროლეტარიატის",
  "ჟელიაბოვის",
  "ჟვანიას",
  "ჟორდანიას",
  "ჟღენტი",
  "ჟღენტის",
  "რადიანის",
  "რამიშვილი",
  "რასკოვას",
  "რენინგერის",
  "რინგის",
  "რიჟინაშვილის",
  "რობაქიძის",
  "რობესპიერის",
  "რუსის",
  "რუხაძის",
  "რჩეულიშვილის",
  "სააკაძის",
  "საბადურის",
  "საბაშვილის",
  "საბურთალოს",
  "საბჭოს",
  "საგურამოს",
  "სამრეკლოს",
  "სამღერეთის",
  "სანაკოევის",
  "სარაჯიშვილის",
  "საჯაიას",
  "სევასტოპოლის",
  "სერგი",
  "სვანიძის",
  "სვერდლოვის",
  "სტახანოვის",
  "სულთნიშნის",
  "სურგულაძის",
  "სხირტლაძის",
  "ტაბიძის",
  "ტატიშვილის",
  "ტელმანის",
  "ტერევერკოს",
  "ტეტელაშვილის",
  "ტოვსტონოგოვის",
  "ტოროშელიძის",
  "ტრაქტორის",
  "ტრიკოტაჟის",
  "ტურბინის",
  "უბილავას",
  "უბინაშვილის",
  "უზნაძის",
  "უკლებას",
  "ულიანოვის",
  "ურიდიას",
  "ფაბრიციუსის",
  "ფაღავას",
  "ფერისცვალების",
  "ფიგნერის",
  "ფიზკულტურის",
  "ფიოლეტოვის",
  "ფიფიების",
  "ფოცხიშვილის",
  "ქართველიშვილის",
  "ქართლელიშვილის",
  "ქინქლაძის",
  "ქიქოძის",
  "ქსოვრელის",
  "ქუთათელაძის",
  "ქუთათელის",
  "ქურდიანის",
  "ღოღობერიძის",
  "ღუდუშაურის",
  "ყავლაშვილის",
  "ყაზბეგის",
  "ყარყარაშვილის",
  "ყიფიანის",
  "ყუშიტაშვილის",
  "შანიძის",
  "შარტავას",
  "შატილოვის",
  "შაუმიანის",
  "შენგელაიას",
  "შერვაშიძის",
  "შეროზიას",
  "შირშოვის",
  "შმიდტის",
  "შრომის",
  "შუშინის",
  "შჩორსის",
  "ჩალაუბნის",
  "ჩანტლაძის",
  "ჩაპაევის",
  "ჩაჩავას",
  "ჩელუსკინელების",
  "ჩერნიახოვსკის",
  "ჩერქეზიშვილი",
  "ჩერქეზიშვილის",
  "ჩვიდმეტი",
  "ჩიტაიას",
  "ჩიტაძის",
  "ჩიქვანაიას",
  "ჩიქობავას",
  "ჩიხლაძის",
  "ჩოდრიშვილის",
  "ჩოლოყაშვილის",
  "ჩუღურეთის",
  "ცაბაძის",
  "ცაგარელის",
  "ცეტკინის",
  "ცინცაძის",
  "ცისკარიშვილის",
  "ცურტაველის",
  "ცქიტიშვილის",
  "ცხაკაიას",
  "ძმობის",
  "ძნელაძის",
  "წერეთლის",
  "წითელი",
  "წითელწყაროს",
  "წინამძღვრიშვილის",
  "წულაძის",
  "წულუკიძის",
  "ჭაბუკიანის",
  "ჭავჭავაძის",
  "ჭანტურიას",
  "ჭოველიძის",
  "ჭონქაძის",
  "ჭყონდიდელის",
  "ხანძთელის",
  "ხვამლის",
  "ხვინგიას",
  "ხვიჩიას",
  "ხიმშიაშვილის",
  "ხმელნიცკის",
  "ხორნაბუჯის",
  "ხრამჰესის",
  "ხუციშვილის",
  "ჯავახიშვილის",
  "ჯაფარიძის",
  "ჯიბლაძის",
  "ჯორჯიაშვილის"
];

},{}],375:[function(require,module,exports){
module["exports"] = [
  "(+995 32) 2-##-##-##",
  "032-2-##-##-##",
  "032-2-######",
  "032-2-###-###",
  "032 2 ## ## ##",
  "032 2 ######",
  "2 ## ## ##",
  "2######",
  "2 ### ###"
];

},{}],376:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":375,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],377:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.prefix = require("./prefix");
company.suffix = require("./suffix");
company.name = require("./name");

},{"./name":378,"./prefix":379,"./suffix":380}],378:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{Name.first_name}",
  "#{prefix} #{Name.last_name}",
  "#{prefix} #{Name.last_name} #{suffix}",
  "#{prefix} #{Name.first_name} #{suffix}",
  "#{prefix} #{Name.last_name}-#{Name.last_name}"
];

},{}],379:[function(require,module,exports){
module["exports"] = [
  "შპს",
  "სს",
  "ააიპ",
  "სსიპ"
];

},{}],380:[function(require,module,exports){
module["exports"] = [
  "ჯგუფი",
  "და კომპანია",
  "სტუდია",
  "გრუპი"
];

},{}],381:[function(require,module,exports){
var ge = {};
module['exports'] = ge;
ge.title = "Georgian";
ge.separator = " და ";
ge.name = require("./name");
ge.address = require("./address");
ge.internet = require("./internet");
ge.company = require("./company");
ge.phone_number = require("./phone_number");
ge.cell_phone = require("./cell_phone");

},{"./address":368,"./cell_phone":376,"./company":377,"./internet":384,"./name":386,"./phone_number":392}],382:[function(require,module,exports){
module["exports"] = [
  "ge",
  "com",
  "net",
  "org",
  "com.ge",
  "org.ge"
];

},{}],383:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "posta.ge"
];

},{}],384:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":382,"./free_email":383,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],385:[function(require,module,exports){
module["exports"] = [
  "აგული",
  "აგუნა",
  "ადოლა",
  "ავთანდილ",
  "ავთო",
  "აკაკი",
  "აკო",
  "ალეკო",
  "ალექსანდრე",
  "ალექსი",
  "ალიო",
  "ამირან",
  "ანა",
  "ანანო",
  "ანზორ",
  "ანნა",
  "ანუკა",
  "ანუკი",
  "არჩილ",
  "ასკილა",
  "ასლანაზ",
  "აჩიკო",
  "ბადრი",
  "ბაია",
  "ბარბარე",
  "ბაქარ",
  "ბაჩა",
  "ბაჩანა",
  "ბაჭუა",
  "ბაჭუკი",
  "ბახვა",
  "ბელა",
  "ბერა",
  "ბერდია",
  "ბესიკ",
  "ბესიკ",
  "ბესო",
  "ბექა",
  "ბიძინა",
  "ბიჭიკო",
  "ბოჩია",
  "ბოცო",
  "ბროლა",
  "ბუბუ",
  "ბუდუ",
  "ბუხუტი",
  "გაგა",
  "გაგი",
  "გახა",
  "გეგა",
  "გეგი",
  "გედია",
  "გელა",
  "გენადი",
  "გვადი",
  "გვანცა",
  "გვანჯი",
  "გვიტია",
  "გვრიტა",
  "გია",
  "გიგა",
  "გიგი",
  "გიგილო",
  "გიგლა",
  "გიგოლი",
  "გივი",
  "გივიკო",
  "გიორგი",
  "გოგი",
  "გოგიტა",
  "გოგიჩა",
  "გოგოთურ",
  "გოგოლა",
  "გოდერძი",
  "გოლა",
  "გოჩა",
  "გრიგოლ",
  "გუგა",
  "გუგუ",
  "გუგულა",
  "გუგული",
  "გუგუნა",
  "გუკა",
  "გულარისა",
  "გულვარდი",
  "გულვარდისა",
  "გულთამზე",
  "გულია",
  "გულიკო",
  "გულისა",
  "გულნარა",
  "გურამ",
  "დავით",
  "დალი",
  "დარეჯან",
  "დიანა",
  "დიმიტრი",
  "დოდო",
  "დუტუ",
  "ეთერ",
  "ეთო",
  "ეკა",
  "ეკატერინე",
  "ელგუჯა",
  "ელენა",
  "ელენე",
  "ელზა",
  "ელიკო",
  "ელისო",
  "ემზარ",
  "ეშხა",
  "ვალენტინა",
  "ვალერი",
  "ვანო",
  "ვაჟა",
  "ვაჟა",
  "ვარდო",
  "ვარსკვლავისა",
  "ვასიკო",
  "ვასილ",
  "ვატო",
  "ვახო",
  "ვახტანგ",
  "ვენერა",
  "ვერა",
  "ვერიკო",
  "ზაზა",
  "ზაირა",
  "ზაურ",
  "ზეზვა",
  "ზვიად",
  "ზინა",
  "ზოია",
  "ზუკა",
  "ზურა",
  "ზურაბ",
  "ზურია",
  "ზურიკო",
  "თაზო",
  "თათა",
  "თათია",
  "თათული",
  "თაია",
  "თაკო",
  "თალიკო",
  "თამაზ",
  "თამარ",
  "თამარა",
  "თამთა",
  "თამთიკე",
  "თამი",
  "თამილა",
  "თამრიკო",
  "თამრო",
  "თამუნა",
  "თამჩო",
  "თანანა",
  "თანდილა",
  "თაყა",
  "თეა",
  "თებრონე",
  "თეიმურაზ",
  "თემურ",
  "თენგიზ",
  "თენგო",
  "თეონა",
  "თიკა",
  "თიკო",
  "თიკუნა",
  "თინა",
  "თინათინ",
  "თინიკო",
  "თმაგიშერა",
  "თორნიკე",
  "თუთა",
  "თუთია",
  "ია",
  "იათამზე",
  "იამზე",
  "ივანე",
  "ივერი",
  "ივქირიონ",
  "იზოლდა",
  "ილია",
  "ილიკო",
  "იმედა",
  "ინგა",
  "იოსებ",
  "ირაკლი",
  "ირინა",
  "ირინე",
  "ირინკა",
  "ირმა",
  "იური",
  "კაკო",
  "კალე",
  "კატო",
  "კახა",
  "კახაბერ",
  "კეკელა",
  "კესანე",
  "კესო",
  "კვირია",
  "კიტა",
  "კობა",
  "კოკა",
  "კონსტანტინე",
  "კოსტა",
  "კოტე",
  "კუკური",
  "ლადო",
  "ლალი",
  "ლამაზა",
  "ლამარა",
  "ლამზირა",
  "ლაშა",
  "ლევან",
  "ლეილა",
  "ლელა",
  "ლენა",
  "ლერწამისა",
  "ლექსო",
  "ლია",
  "ლიანა",
  "ლიზა",
  "ლიზიკო",
  "ლილე",
  "ლილი",
  "ლილიკო",
  "ლომია",
  "ლუიზა",
  "მაგული",
  "მადონა",
  "მათიკო",
  "მაია",
  "მაიკო",
  "მაისა",
  "მაკა",
  "მაკო",
  "მაკუნა",
  "მალხაზ",
  "მამამზე",
  "მამია",
  "მამისა",
  "მამისთვალი",
  "მამისიმედი",
  "მამუკა",
  "მამულა",
  "მანანა",
  "მანჩო",
  "მარადი",
  "მარი",
  "მარია",
  "მარიამი",
  "მარიკა",
  "მარინა",
  "მარინე",
  "მარიტა",
  "მაყვალა",
  "მაყვალა",
  "მაშიკო",
  "მაშო",
  "მაცაცო",
  "მგელია",
  "მგელიკა",
  "მედეა",
  "მეკაშო",
  "მელანო",
  "მერაბ",
  "მერი",
  "მეტია",
  "მზაღო",
  "მზევინარ",
  "მზეთამზე",
  "მზეთვალა",
  "მზეონა",
  "მზექალა",
  "მზეხა",
  "მზეხათუნი",
  "მზია",
  "მზირა",
  "მზისადარ",
  "მზისთანადარი",
  "მზიულა",
  "მთვარისა",
  "მინდია",
  "მიშა",
  "მიშიკო",
  "მიხეილ",
  "მნათობი",
  "მნათობისა",
  "მოგელი",
  "მონავარდისა",
  "მურმან",
  "მუხრან",
  "ნაზი",
  "ნაზიკო",
  "ნათელა",
  "ნათია",
  "ნაირა",
  "ნანა",
  "ნანი",
  "ნანიკო",
  "ნანუკა",
  "ნანული",
  "ნარგიზი",
  "ნასყიდა",
  "ნატალია",
  "ნატო",
  "ნელი",
  "ნენე",
  "ნესტან",
  "ნია",
  "ნიაკო",
  "ნიკა",
  "ნიკოლოზ",
  "ნინა",
  "ნინაკა",
  "ნინი",
  "ნინიკო",
  "ნინო",
  "ნინუკა",
  "ნინუცა",
  "ნოდარ",
  "ნოდო",
  "ნონა",
  "ნორა",
  "ნუგზარ",
  "ნუგო",
  "ნუკა",
  "ნუკი",
  "ნუკრი",
  "ნუნუ",
  "ნუნუ",
  "ნუნუკა",
  "ნუცა",
  "ნუცი",
  "ოთარ",
  "ოთია",
  "ოთო",
  "ომარ",
  "ორბელ",
  "ოტია",
  "ოქროპირ",
  "პაატა",
  "პაპუნა",
  "პატარკაცი",
  "პატარქალი",
  "პეპელა",
  "პირვარდისა",
  "პირიმზე",
  "ჟამიერა",
  "ჟამიტა",
  "ჟამუტა",
  "ჟუჟუნა",
  "რამაზ",
  "რევაზ",
  "რეზი",
  "რეზო",
  "როზა",
  "რომან",
  "რუსკა",
  "რუსუდან",
  "საბა",
  "სალი",
  "სალომე",
  "სანათა",
  "სანდრო",
  "სერგო",
  "სესია",
  "სეხნია",
  "სვეტლანა",
  "სიხარულა",
  "სოსო",
  "სოფიკო",
  "სოფიო",
  "სოფო",
  "სულა",
  "სულიკო",
  "ტარიელ",
  "ტასიკო",
  "ტასო",
  "ტატიანა",
  "ტატო",
  "ტეტია",
  "ტურია",
  "უმანკო",
  "უტა",
  "უჩა",
  "ფაქიზო",
  "ფაცია",
  "ფეფელა",
  "ფეფენა",
  "ფეფიკო",
  "ფეფო",
  "ფოსო",
  "ფოფო",
  "ქაბატო",
  "ქავთარი",
  "ქალია",
  "ქართლოს",
  "ქეთათო",
  "ქეთევან",
  "ქეთი",
  "ქეთინო",
  "ქეთო",
  "ქველი",
  "ქიტესა",
  "ქიშვარდი",
  "ქობული",
  "ქრისტესია",
  "ქტისტეფორე",
  "ქურციკა",
  "ღარიბა",
  "ღვთისავარი",
  "ღვთისია",
  "ღვთისო",
  "ღვინია",
  "ღუღუნა",
  "ყაითამზა",
  "ყაყიტა",
  "ყვარყვარე",
  "ყიასა",
  "შაბური",
  "შაკო",
  "შალვა",
  "შალიკო",
  "შანშე",
  "შარია",
  "შაქარა",
  "შაქრო",
  "შოთა",
  "შორენა",
  "შოშია",
  "შუქია",
  "ჩიორა",
  "ჩიტო",
  "ჩიტო",
  "ჩოყოლა",
  "ცაგო",
  "ცაგული",
  "ცანგალა",
  "ცარო",
  "ცაცა",
  "ცაცო",
  "ციალა",
  "ციკო",
  "ცინარა",
  "ცირა",
  "ცისანა",
  "ცისია",
  "ცისკარა",
  "ცისკარი",
  "ცისმარა",
  "ცისმარი",
  "ციური",
  "ციცი",
  "ციცია",
  "ციცინო",
  "ცოტნე",
  "ცოქალა",
  "ცუცა",
  "ცხვარი",
  "ძაბული",
  "ძამისა",
  "ძაღინა",
  "ძიძია",
  "წათე",
  "წყალობა",
  "ჭაბუკა",
  "ჭიაბერ",
  "ჭიკჭიკა",
  "ჭიჭია",
  "ჭიჭიკო",
  "ჭოლა",
  "ხათუნა",
  "ხარება",
  "ხატია",
  "ხახულა",
  "ხახუტა",
  "ხეჩუა",
  "ხვიჩა",
  "ხიზანა",
  "ხირხელა",
  "ხობელასი",
  "ხოხია",
  "ხოხიტა",
  "ხუტა",
  "ხუცია",
  "ჯაბა",
  "ჯავახი",
  "ჯარჯი",
  "ჯემალ",
  "ჯონდო",
  "ჯოტო",
  "ჯუბი",
  "ჯულიეტა",
  "ჯუმბერ",
  "ჰამლეტ"
];

},{}],386:[function(require,module,exports){
arguments[4][343][0].apply(exports,arguments)
},{"./first_name":385,"./last_name":387,"./name":388,"./prefix":389,"./title":390,"/Users/a/dev/faker.js/lib/locales/fr/name/index.js":343}],387:[function(require,module,exports){
module["exports"] = [
  "აბაზაძე",
  "აბაშიძე",
  "აბრამაშვილი",
  "აბუსერიძე",
  "აბშილავა",
  "ავაზნელი",
  "ავალიშვილი",
  "ამილახვარი",
  "ანთაძე",
  "ასლამაზიშვილი",
  "ასპანიძე",
  "აშკარელი",
  "ახალბედაშვილი",
  "ახალკაცი",
  "ახვლედიანი",
  "ბარათაშვილი",
  "ბარდაველიძე",
  "ბახტაძე",
  "ბედიანიძე",
  "ბერიძე",
  "ბერუაშვილი",
  "ბეჟანიშვილი",
  "ბოგველიშვილი",
  "ბოტკოველი",
  "გაბრიჩიძე",
  "გაგნიძე",
  "გამრეკელი",
  "გელაშვილი",
  "გზირიშვილი",
  "გიგაური",
  "გურამიშვილი",
  "გურგენიძე",
  "დადიანი",
  "დავითიშვილი",
  "დათუაშვილი",
  "დარბაისელი",
  "დეკანოიძე",
  "დვალი",
  "დოლაბერიძე",
  "ედიშერაშვილი",
  "ელიზბარაშვილი",
  "ელიოზაშვილი",
  "ერისთავი",
  "ვარამაშვილი",
  "ვარდიაშვილი",
  "ვაჩნაძე",
  "ვარდანიძე",
  "ველიაშვილი",
  "ველიჯანაშვილი",
  "ზარანდია",
  "ზარიძე",
  "ზედგინიძე",
  "ზუბიაშვილი",
  "თაბაგარი",
  "თავდგირიძე",
  "თათარაშვილი",
  "თამაზაშვილი",
  "თამარაშვილი",
  "თაქთაქიშვილი",
  "თაყაიშვილი",
  "თბილელი",
  "თუხარელი",
  "იაშვილი",
  "იგითხანიშვილი",
  "ინასარიძე",
  "იშხნელი",
  "კანდელაკი",
  "კაცია",
  "კერესელიძე",
  "კვირიკაშვილი",
  "კიკნაძე",
  "კლდიაშვილი",
  "კოვზაძე",
  "კოპაძე",
  "კოპტონაშვილი",
  "კოშკელაშვილი",
  "ლაბაძე",
  "ლეკიშვილი",
  "ლიქოკელი",
  "ლოლაძე",
  "ლურსმანაშვილი",
  "მაისურაძე",
  "მარტოლეკი",
  "მაღალაძე",
  "მახარაშვილი",
  "მგალობლიშვილი",
  "მეგრელიშვილი",
  "მელაშვილი",
  "მელიქიძე",
  "მერაბიშვილი",
  "მეფარიშვილი",
  "მუჯირი",
  "მჭედლიძე",
  "მხეიძე",
  "ნათაძე",
  "ნაჭყებია",
  "ნოზაძე",
  "ოდიშვილი",
  "ონოფრიშვილი",
  "პარეხელაშვილი",
  "პეტრიაშვილი",
  "სააკაძე",
  "სააკაშვილი",
  "საგინაშვილი",
  "სადუნიშვილი",
  "საძაგლიშვილი",
  "სებისკვერიძე",
  "სეთური",
  "სუთიაშვილი",
  "სულაშვილი",
  "ტაბაღუა",
  "ტყეშელაშვილი",
  "ულუმბელაშვილი",
  "უნდილაძე",
  "ქავთარაძე",
  "ქართველიშვილი",
  "ყაზბეგი",
  "ყაუხჩიშვილი",
  "შავლაშვილი",
  "შალიკაშვილი",
  "შონია",
  "ჩიბუხაშვილი",
  "ჩიხრაძე",
  "ჩიქოვანი",
  "ჩუბინიძე",
  "ჩოლოყაშვილი",
  "ჩოხელი",
  "ჩხვიმიანი",
  "ცალუღელაშვილი",
  "ცაძიკიძე",
  "ციციშვილი",
  "ციხელაშვილი",
  "ციხისთავი",
  "ცხოვრებაძე",
  "ცხომარია",
  "წამალაიძე",
  "წერეთელი",
  "წიკლაური",
  "წიფურია",
  "ჭაბუკაშვილი",
  "ჭავჭავაძე",
  "ჭანტურია",
  "ჭარელიძე",
  "ჭიორელი",
  "ჭუმბურიძე",
  "ხაბაზი",
  "ხარაძე",
  "ხარატიშვილი",
  "ხარატასშვილი",
  "ხარისჭირაშვილი",
  "ხარხელაური",
  "ხაშმელაშვილი",
  "ხეთაგური",
  "ხიზამბარელი",
  "ხიზანიშვილი",
  "ხიმშიაშვილი",
  "ხოსრუაშვილი",
  "ხოჯივანიშვილი",
  "ხუციშვილი",
  "ჯაბადარი",
  "ჯავახი",
  "ჯავახიშვილი",
  "ჯანელიძე",
  "ჯაფარიძე",
  "ჯაყელი",
  "ჯაჯანიძე",
  "ჯვარელია",
  "ჯინიუზაშვილი",
  "ჯუღაშვილი"
];

},{}],388:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],389:[function(require,module,exports){
module["exports"] = [
  "ბ-ნი",
  "ბატონი",
  "ქ-ნი",
  "ქალბატონი"
];

},{}],390:[function(require,module,exports){
module["exports"] = {
  "descriptor": [
    "გენერალური",
    "მთავარი",
    "სტაჟიორ",
    "უმცროსი",
    "ყოფილი",
    "წამყვანი"
  ],
  "level": [
    "აღრიცხვების",
    "ბრენდინგის",
    "ბრენიდს",
    "ბუღალტერიის",
    "განყოფილების",
    "გაყიდვების",
    "გუნდის",
    "დახმარების",
    "დიზაინის",
    "თავდაცვის",
    "ინფორმაციის",
    "კვლევების",
    "კომუნიკაციების",
    "მარკეტინგის",
    "ოპერაციათა",
    "ოპტიმიზაციების",
    "პიარ",
    "პროგრამის",
    "საქმეთა",
    "ტაქტიკური",
    "უსაფრთხოების",
    "ფინანსთა",
    "ქსელის",
    "ხარისხის",
    "ჯგუფის"
  ],
  "job": [
    "აგენტი",
    "ადვოკატი",
    "ადმინისტრატორი",
    "არქიტექტორი",
    "ასისტენტი",
    "აღმასრულებელი დირექტორი",
    "დეველოპერი",
    "დეკანი",
    "დიზაინერი",
    "დირექტორი",
    "ელექტრიკოსი",
    "ექსპერტი",
    "ინჟინერი",
    "იურისტი",
    "კონსტრუქტორი",
    "კონსულტანტი",
    "კოორდინატორი",
    "ლექტორი",
    "მასაჟისტი",
    "მემანქანე",
    "მენეჯერი",
    "მძღოლი",
    "მწვრთნელი",
    "ოპერატორი",
    "ოფიცერი",
    "პედაგოგი",
    "პოლიციელი",
    "პროგრამისტი",
    "პროდიუსერი",
    "პრორექტორი",
    "ჟურნალისტი",
    "რექტორი",
    "სპეციალისტი",
    "სტრატეგისტი",
    "ტექნიკოსი",
    "ფოტოგრაფი",
    "წარმომადგენელი"
  ]
};

},{}],391:[function(require,module,exports){
module["exports"] = [
  "5##-###-###",
  "5########",
  "5## ## ## ##",
  "5## ######",
  "5## ### ###",
  "995 5##-###-###",
  "995 5########",
  "995 5## ## ## ##",
  "995 5## ######",
  "995 5## ### ###",
  "+995 5##-###-###",
  "+995 5########",
  "+995 5## ## ## ##",
  "+995 5## ######",
  "+995 5## ### ###",
  "(+995) 5##-###-###",
  "(+995) 5########",
  "(+995) 5## ## ## ##",
  "(+995) 5## ######",
  "(+995) 5## ### ###"
];

},{}],392:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":391,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],393:[function(require,module,exports){
module.exports=require(361)
},{"/Users/a/dev/faker.js/lib/locales/ge/address/building_number.js":361}],394:[function(require,module,exports){
module["exports"] = [
  "#{city_prefix} #{Name.first_name} #{city_suffix}",
  "#{city_prefix} #{Name.first_name}",
  "#{Name.first_name} #{city_suffix}",
  "#{Name.last_name} #{city_suffix}"
];

},{}],395:[function(require,module,exports){
module["exports"] = [
  "San",
  "Borgo",
  "Sesto",
  "Quarto",
  "Settimo"
];

},{}],396:[function(require,module,exports){
module["exports"] = [
  "a mare",
  "lido",
  "ligure",
  "del friuli",
  "salentino",
  "calabro",
  "veneto",
  "nell'emilia",
  "umbro",
  "laziale",
  "terme",
  "sardo"
];

},{}],397:[function(require,module,exports){
module["exports"] = [
  "Afghanistan",
  "Albania",
  "Algeria",
  "American Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antartide (territori a sud del 60° parallelo)",
  "Antigua e Barbuda",
  "Argentina",
  "Armenia",
  "Aruba",
  "Australia",
  "Austria",
  "Azerbaijan",
  "Bahamas",
  "Bahrain",
  "Bangladesh",
  "Barbados",
  "Bielorussia",
  "Belgio",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolivia",
  "Bosnia e Herzegovina",
  "Botswana",
  "Bouvet Island (Bouvetoya)",
  "Brasile",
  "Territorio dell'arcipelago indiano",
  "Isole Vergini Britanniche",
  "Brunei Darussalam",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Cambogia",
  "Cameroon",
  "Canada",
  "Capo Verde",
  "Isole Cayman",
  "Repubblica Centrale Africana",
  "Chad",
  "Cile",
  "Cina",
  "Isola di Pasqua",
  "Isola di Cocos (Keeling)",
  "Colombia",
  "Comoros",
  "Congo",
  "Isole Cook",
  "Costa Rica",
  "Costa d'Avorio",
  "Croazia",
  "Cuba",
  "Cipro",
  "Repubblica Ceca",
  "Danimarca",
  "Gibuti",
  "Repubblica Dominicana",
  "Equador",
  "Egitto",
  "El Salvador",
  "Guinea Equatoriale",
  "Eritrea",
  "Estonia",
  "Etiopia",
  "Isole Faroe",
  "Isole Falkland (Malvinas)",
  "Fiji",
  "Finlandia",
  "Francia",
  "Guyana Francese",
  "Polinesia Francese",
  "Territori Francesi del sud",
  "Gabon",
  "Gambia",
  "Georgia",
  "Germania",
  "Ghana",
  "Gibilterra",
  "Grecia",
  "Groenlandia",
  "Grenada",
  "Guadalupa",
  "Guam",
  "Guatemala",
  "Guernsey",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Heard Island and McDonald Islands",
  "Città del Vaticano",
  "Honduras",
  "Hong Kong",
  "Ungheria",
  "Islanda",
  "India",
  "Indonesia",
  "Iran",
  "Iraq",
  "Irlanda",
  "Isola di Man",
  "Israele",
  "Italia",
  "Giamaica",
  "Giappone",
  "Jersey",
  "Giordania",
  "Kazakhstan",
  "Kenya",
  "Kiribati",
  "Korea",
  "Kuwait",
  "Republicca Kirgiza",
  "Repubblica del Laos",
  "Latvia",
  "Libano",
  "Lesotho",
  "Liberia",
  "Libyan Arab Jamahiriya",
  "Liechtenstein",
  "Lituania",
  "Lussemburgo",
  "Macao",
  "Macedonia",
  "Madagascar",
  "Malawi",
  "Malesia",
  "Maldive",
  "Mali",
  "Malta",
  "Isole Marshall",
  "Martinica",
  "Mauritania",
  "Mauritius",
  "Mayotte",
  "Messico",
  "Micronesia",
  "Moldova",
  "Principato di Monaco",
  "Mongolia",
  "Montenegro",
  "Montserrat",
  "Marocco",
  "Mozambico",
  "Myanmar",
  "Namibia",
  "Nauru",
  "Nepal",
  "Antille Olandesi",
  "Olanda",
  "Nuova Caledonia",
  "Nuova Zelanda",
  "Nicaragua",
  "Niger",
  "Nigeria",
  "Niue",
  "Isole Norfolk",
  "Northern Mariana Islands",
  "Norvegia",
  "Oman",
  "Pakistan",
  "Palau",
  "Palestina",
  "Panama",
  "Papua Nuova Guinea",
  "Paraguay",
  "Peru",
  "Filippine",
  "Pitcairn Islands",
  "Polonia",
  "Portogallo",
  "Porto Rico",
  "Qatar",
  "Reunion",
  "Romania",
  "Russia",
  "Rwanda",
  "San Bartolomeo",
  "Sant'Elena",
  "Saint Kitts and Nevis",
  "Saint Lucia",
  "Saint Martin",
  "Saint Pierre and Miquelon",
  "Saint Vincent and the Grenadines",
  "Samoa",
  "San Marino",
  "Sao Tome and Principe",
  "Arabia Saudita",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leone",
  "Singapore",
  "Slovenia",
  "Isole Solomon",
  "Somalia",
  "Sud Africa",
  "Georgia del sud e South Sandwich Islands",
  "Spagna",
  "Sri Lanka",
  "Sudan",
  "Suriname",
  "Svalbard & Jan Mayen Islands",
  "Swaziland",
  "Svezia",
  "Svizzera",
  "Siria",
  "Taiwan",
  "Tajikistan",
  "Tanzania",
  "Tailandia",
  "Timor-Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad e Tobago",
  "Tunisia",
  "Turchia",
  "Turkmenistan",
  "Isole di Turks and Caicos",
  "Tuvalu",
  "Uganda",
  "Ucraina",
  "Emirati Arabi Uniti",
  "Regno Unito",
  "Stati Uniti d'America",
  "United States Minor Outlying Islands",
  "Isole Vergini Statunitensi",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Wallis and Futuna",
  "Western Sahara",
  "Yemen",
  "Zambia",
  "Zimbabwe"
];

},{}],398:[function(require,module,exports){
module["exports"] = [
  "Italia"
];

},{}],399:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":393,"./city":394,"./city_prefix":395,"./city_suffix":396,"./country":397,"./default_country":398,"./postcode":400,"./secondary_address":401,"./state":402,"./state_abbr":403,"./street_address":404,"./street_name":405,"./street_suffix":406}],400:[function(require,module,exports){
module.exports=require(279)
},{"/Users/a/dev/faker.js/lib/locales/es/address/postcode.js":279}],401:[function(require,module,exports){
module["exports"] = [
  "Appartamento ##",
  "Piano #"
];

},{}],402:[function(require,module,exports){
module["exports"] = [
  "Agrigento",
  "Alessandria",
  "Ancona",
  "Aosta",
  "Arezzo",
  "Ascoli Piceno",
  "Asti",
  "Avellino",
  "Bari",
  "Barletta-Andria-Trani",
  "Belluno",
  "Benevento",
  "Bergamo",
  "Biella",
  "Bologna",
  "Bolzano",
  "Brescia",
  "Brindisi",
  "Cagliari",
  "Caltanissetta",
  "Campobasso",
  "Carbonia-Iglesias",
  "Caserta",
  "Catania",
  "Catanzaro",
  "Chieti",
  "Como",
  "Cosenza",
  "Cremona",
  "Crotone",
  "Cuneo",
  "Enna",
  "Fermo",
  "Ferrara",
  "Firenze",
  "Foggia",
  "Forlì-Cesena",
  "Frosinone",
  "Genova",
  "Gorizia",
  "Grosseto",
  "Imperia",
  "Isernia",
  "La Spezia",
  "L'Aquila",
  "Latina",
  "Lecce",
  "Lecco",
  "Livorno",
  "Lodi",
  "Lucca",
  "Macerata",
  "Mantova",
  "Massa-Carrara",
  "Matera",
  "Messina",
  "Milano",
  "Modena",
  "Monza e della Brianza",
  "Napoli",
  "Novara",
  "Nuoro",
  "Olbia-Tempio",
  "Oristano",
  "Padova",
  "Palermo",
  "Parma",
  "Pavia",
  "Perugia",
  "Pesaro e Urbino",
  "Pescara",
  "Piacenza",
  "Pisa",
  "Pistoia",
  "Pordenone",
  "Potenza",
  "Prato",
  "Ragusa",
  "Ravenna",
  "Reggio Calabria",
  "Reggio Emilia",
  "Rieti",
  "Rimini",
  "Roma",
  "Rovigo",
  "Salerno",
  "Medio Campidano",
  "Sassari",
  "Savona",
  "Siena",
  "Siracusa",
  "Sondrio",
  "Taranto",
  "Teramo",
  "Terni",
  "Torino",
  "Ogliastra",
  "Trapani",
  "Trento",
  "Treviso",
  "Trieste",
  "Udine",
  "Varese",
  "Venezia",
  "Verbano-Cusio-Ossola",
  "Vercelli",
  "Verona",
  "Vibo Valentia",
  "Vicenza",
  "Viterbo"
];

},{}],403:[function(require,module,exports){
module["exports"] = [
  "AG",
  "AL",
  "AN",
  "AO",
  "AR",
  "AP",
  "AT",
  "AV",
  "BA",
  "BT",
  "BL",
  "BN",
  "BG",
  "BI",
  "BO",
  "BZ",
  "BS",
  "BR",
  "CA",
  "CL",
  "CB",
  "CI",
  "CE",
  "CT",
  "CZ",
  "CH",
  "CO",
  "CS",
  "CR",
  "KR",
  "CN",
  "EN",
  "FM",
  "FE",
  "FI",
  "FG",
  "FC",
  "FR",
  "GE",
  "GO",
  "GR",
  "IM",
  "IS",
  "SP",
  "AQ",
  "LT",
  "LE",
  "LC",
  "LI",
  "LO",
  "LU",
  "MC",
  "MN",
  "MS",
  "MT",
  "ME",
  "MI",
  "MO",
  "MB",
  "NA",
  "NO",
  "NU",
  "OT",
  "OR",
  "PD",
  "PA",
  "PR",
  "PV",
  "PG",
  "PU",
  "PE",
  "PC",
  "PI",
  "PT",
  "PN",
  "PZ",
  "PO",
  "RG",
  "RA",
  "RC",
  "RE",
  "RI",
  "RN",
  "RM",
  "RO",
  "SA",
  "VS",
  "SS",
  "SV",
  "SI",
  "SR",
  "SO",
  "TA",
  "TE",
  "TR",
  "TO",
  "OG",
  "TP",
  "TN",
  "TV",
  "TS",
  "UD",
  "VA",
  "VE",
  "VB",
  "VC",
  "VR",
  "VV",
  "VI",
  "VT"
];

},{}],404:[function(require,module,exports){
module["exports"] = [
  "#{street_name} #{building_number}",
  "#{street_name} #{building_number}, #{secondary_address}"
];

},{}],405:[function(require,module,exports){
module["exports"] = [
  "#{street_suffix} #{Name.first_name}",
  "#{street_suffix} #{Name.last_name}"
];

},{}],406:[function(require,module,exports){
module["exports"] = [
  "Piazza",
  "Strada",
  "Via",
  "Borgo",
  "Contrada",
  "Rotonda",
  "Incrocio"
];

},{}],407:[function(require,module,exports){
module["exports"] = [
  "24 ore",
  "24/7",
  "terza generazione",
  "quarta generazione",
  "quinta generazione",
  "sesta generazione",
  "asimmetrica",
  "asincrona",
  "background",
  "bi-direzionale",
  "biforcata",
  "bottom-line",
  "coerente",
  "coesiva",
  "composita",
  "sensibile al contesto",
  "basta sul contesto",
  "basata sul contenuto",
  "dedicata",
  "didattica",
  "direzionale",
  "discreta",
  "dinamica",
  "eco-centrica",
  "esecutiva",
  "esplicita",
  "full-range",
  "globale",
  "euristica",
  "alto livello",
  "olistica",
  "omogenea",
  "ibrida",
  "impattante",
  "incrementale",
  "intangibile",
  "interattiva",
  "intermediaria",
  "locale",
  "logistica",
  "massimizzata",
  "metodica",
  "mission-critical",
  "mobile",
  "modulare",
  "motivazionale",
  "multimedia",
  "multi-tasking",
  "nazionale",
  "neutrale",
  "nextgeneration",
  "non-volatile",
  "object-oriented",
  "ottima",
  "ottimizzante",
  "radicale",
  "real-time",
  "reciproca",
  "regionale",
  "responsiva",
  "scalabile",
  "secondaria",
  "stabile",
  "statica",
  "sistematica",
  "sistemica",
  "tangibile",
  "terziaria",
  "uniforme",
  "valore aggiunto"
];

},{}],408:[function(require,module,exports){
module["exports"] = [
  "valore aggiunto",
  "verticalizzate",
  "proattive",
  "forti",
  "rivoluzionari",
  "scalabili",
  "innovativi",
  "intuitivi",
  "strategici",
  "e-business",
  "mission-critical",
  "24/7",
  "globali",
  "B2B",
  "B2C",
  "granulari",
  "virtuali",
  "virali",
  "dinamiche",
  "magnetiche",
  "web",
  "interattive",
  "sexy",
  "back-end",
  "real-time",
  "efficienti",
  "front-end",
  "distributivi",
  "estensibili",
  "mondiali",
  "open-source",
  "cross-platform",
  "sinergiche",
  "out-of-the-box",
  "enterprise",
  "integrate",
  "di impatto",
  "wireless",
  "trasparenti",
  "next-generation",
  "cutting-edge",
  "visionari",
  "plug-and-play",
  "collaborative",
  "olistiche",
  "ricche"
];

},{}],409:[function(require,module,exports){
module["exports"] = [
  "partnerships",
  "comunità",
  "ROI",
  "soluzioni",
  "e-services",
  "nicchie",
  "tecnologie",
  "contenuti",
  "supply-chains",
  "convergenze",
  "relazioni",
  "architetture",
  "interfacce",
  "mercati",
  "e-commerce",
  "sistemi",
  "modelli",
  "schemi",
  "reti",
  "applicazioni",
  "metriche",
  "e-business",
  "funzionalità",
  "esperienze",
  "webservices",
  "metodologie"
];

},{}],410:[function(require,module,exports){
module["exports"] = [
  "implementate",
  "utilizzo",
  "integrate",
  "ottimali",
  "evolutive",
  "abilitate",
  "reinventate",
  "aggregate",
  "migliorate",
  "incentivate",
  "monetizzate",
  "sinergizzate",
  "strategiche",
  "deploy",
  "marchi",
  "accrescitive",
  "target",
  "sintetizzate",
  "spedizioni",
  "massimizzate",
  "innovazione",
  "guida",
  "estensioni",
  "generate",
  "exploit",
  "transizionali",
  "matrici",
  "ricontestualizzate"
];

},{}],411:[function(require,module,exports){
module["exports"] = [
  "adattiva",
  "avanzata",
  "migliorata",
  "assimilata",
  "automatizzata",
  "bilanciata",
  "centralizzata",
  "compatibile",
  "configurabile",
  "cross-platform",
  "decentralizzata",
  "digitalizzata",
  "distribuita",
  "piccola",
  "ergonomica",
  "esclusiva",
  "espansa",
  "estesa",
  "configurabile",
  "fondamentale",
  "orizzontale",
  "implementata",
  "innovativa",
  "integrata",
  "intuitiva",
  "inversa",
  "gestita",
  "obbligatoria",
  "monitorata",
  "multi-canale",
  "multi-laterale",
  "open-source",
  "operativa",
  "ottimizzata",
  "organica",
  "persistente",
  "polarizzata",
  "proattiva",
  "programmabile",
  "progressiva",
  "reattiva",
  "riallineata",
  "ricontestualizzata",
  "ridotta",
  "robusta",
  "sicura",
  "condivisibile",
  "stand-alone",
  "switchabile",
  "sincronizzata",
  "sinergica",
  "totale",
  "universale",
  "user-friendly",
  "versatile",
  "virtuale",
  "visionaria"
];

},{}],412:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.noun = require("./noun");
company.descriptor = require("./descriptor");
company.adjective = require("./adjective");
company.bs_noun = require("./bs_noun");
company.bs_verb = require("./bs_verb");
company.bs_adjective = require("./bs_adjective");
company.name = require("./name");

},{"./adjective":407,"./bs_adjective":408,"./bs_noun":409,"./bs_verb":410,"./descriptor":411,"./name":413,"./noun":414,"./suffix":415}],413:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name} #{suffix}",
  "#{Name.last_name}, #{Name.last_name} e #{Name.last_name} #{suffix}"
];

},{}],414:[function(require,module,exports){
module["exports"] = [
  "Abilità",
  "Access",
  "Adattatore",
  "Algoritmo",
  "Alleanza",
  "Analizzatore",
  "Applicazione",
  "Approccio",
  "Architettura",
  "Archivio",
  "Intelligenza artificiale",
  "Array",
  "Attitudine",
  "Benchmark",
  "Capacità",
  "Sfida",
  "Circuito",
  "Collaborazione",
  "Complessità",
  "Concetto",
  "Conglomerato",
  "Contingenza",
  "Core",
  "Database",
  "Data-warehouse",
  "Definizione",
  "Emulazione",
  "Codifica",
  "Criptazione",
  "Firmware",
  "Flessibilità",
  "Previsione",
  "Frame",
  "framework",
  "Funzione",
  "Funzionalità",
  "Interfaccia grafica",
  "Hardware",
  "Help-desk",
  "Gerarchia",
  "Hub",
  "Implementazione",
  "Infrastruttura",
  "Iniziativa",
  "Installazione",
  "Set di istruzioni",
  "Interfaccia",
  "Soluzione internet",
  "Intranet",
  "Conoscenza base",
  "Matrici",
  "Matrice",
  "Metodologia",
  "Middleware",
  "Migrazione",
  "Modello",
  "Moderazione",
  "Monitoraggio",
  "Moratoria",
  "Rete",
  "Architettura aperta",
  "Sistema aperto",
  "Orchestrazione",
  "Paradigma",
  "Parallelismo",
  "Policy",
  "Portale",
  "Struttura di prezzo",
  "Prodotto",
  "Produttività",
  "Progetto",
  "Proiezione",
  "Protocollo",
  "Servizio clienti",
  "Software",
  "Soluzione",
  "Standardizzazione",
  "Strategia",
  "Struttura",
  "Successo",
  "Sovrastruttura",
  "Supporto",
  "Sinergia",
  "Task-force",
  "Finestra temporale",
  "Strumenti",
  "Utilizzazione",
  "Sito web",
  "Forza lavoro"
];

},{}],415:[function(require,module,exports){
module["exports"] = [
  "SPA",
  "e figli",
  "Group",
  "s.r.l."
];

},{}],416:[function(require,module,exports){
var it = {};
module['exports'] = it;
it.title = "Italian";
it.address = require("./address");
it.company = require("./company");
it.internet = require("./internet");
it.name = require("./name");
it.phone_number = require("./phone_number");

},{"./address":399,"./company":412,"./internet":419,"./name":421,"./phone_number":427}],417:[function(require,module,exports){
module["exports"] = [
  "com",
  "com",
  "com",
  "net",
  "org",
  "it",
  "it",
  "it"
];

},{}],418:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com",
  "email.it",
  "libero.it",
  "yahoo.it"
];

},{}],419:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":417,"./free_email":418,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],420:[function(require,module,exports){
module["exports"] = [
  "Aaron",
  "Akira",
  "Alberto",
  "Alessandro",
  "Alighieri",
  "Amedeo",
  "Amos",
  "Anselmo",
  "Antonino",
  "Arcibaldo",
  "Armando",
  "Artes",
  "Audenico",
  "Ausonio",
  "Bacchisio",
  "Battista",
  "Bernardo",
  "Boris",
  "Caio",
  "Carlo",
  "Cecco",
  "Cirino",
  "Cleros",
  "Costantino",
  "Damiano",
  "Danny",
  "Davide",
  "Demian",
  "Dimitri",
  "Domingo",
  "Dylan",
  "Edilio",
  "Egidio",
  "Elio",
  "Emanuel",
  "Enrico",
  "Ercole",
  "Ermes",
  "Ethan",
  "Eusebio",
  "Evangelista",
  "Fabiano",
  "Ferdinando",
  "Fiorentino",
  "Flavio",
  "Fulvio",
  "Gabriele",
  "Gastone",
  "Germano",
  "Giacinto",
  "Gianantonio",
  "Gianleonardo",
  "Gianmarco",
  "Gianriccardo",
  "Gioacchino",
  "Giordano",
  "Giuliano",
  "Graziano",
  "Guido",
  "Harry",
  "Iacopo",
  "Ilario",
  "Ione",
  "Italo",
  "Jack",
  "Jari",
  "Joey",
  "Joseph",
  "Kai",
  "Kociss",
  "Laerte",
  "Lauro",
  "Leonardo",
  "Liborio",
  "Lorenzo",
  "Ludovico",
  "Maggiore",
  "Manuele",
  "Mariano",
  "Marvin",
  "Matteo",
  "Mauro",
  "Michael",
  "Mirco",
  "Modesto",
  "Muzio",
  "Nabil",
  "Nathan",
  "Nick",
  "Noah",
  "Odino",
  "Olo",
  "Oreste",
  "Osea",
  "Pablo",
  "Patrizio",
  "Piererminio",
  "Pierfrancesco",
  "Piersilvio",
  "Priamo",
  "Quarto",
  "Quirino",
  "Radames",
  "Raniero",
  "Renato",
  "Rocco",
  "Romeo",
  "Rosalino",
  "Rudy",
  "Sabatino",
  "Samuel",
  "Santo",
  "Sebastian",
  "Serse",
  "Silvano",
  "Sirio",
  "Tancredi",
  "Terzo",
  "Timoteo",
  "Tolomeo",
  "Trevis",
  "Ubaldo",
  "Ulrico",
  "Valdo",
  "Neri",
  "Vinicio",
  "Walter",
  "Xavier",
  "Yago",
  "Zaccaria",
  "Abramo",
  "Adriano",
  "Alan",
  "Albino",
  "Alessio",
  "Alighiero",
  "Amerigo",
  "Anastasio",
  "Antimo",
  "Antonio",
  "Arduino",
  "Aroldo",
  "Arturo",
  "Augusto",
  "Avide",
  "Baldassarre",
  "Bettino",
  "Bortolo",
  "Caligola",
  "Carmelo",
  "Celeste",
  "Ciro",
  "Costanzo",
  "Dante",
  "Danthon",
  "Davis",
  "Demis",
  "Dindo",
  "Domiziano",
  "Edipo",
  "Egisto",
  "Eliziario",
  "Emidio",
  "Enzo",
  "Eriberto",
  "Erminio",
  "Ettore",
  "Eustachio",
  "Fabio",
  "Fernando",
  "Fiorenzo",
  "Folco",
  "Furio",
  "Gaetano",
  "Gavino",
  "Gerlando",
  "Giacobbe",
  "Giancarlo",
  "Gianmaria",
  "Giobbe",
  "Giorgio",
  "Giulio",
  "Gregorio",
  "Hector",
  "Ian",
  "Ippolito",
  "Ivano",
  "Jacopo",
  "Jarno",
  "Joannes",
  "Joshua",
  "Karim",
  "Kris",
  "Lamberto",
  "Lazzaro",
  "Leone",
  "Lino",
  "Loris",
  "Luigi",
  "Manfredi",
  "Marco",
  "Marino",
  "Marzio",
  "Mattia",
  "Max",
  "Michele",
  "Mirko",
  "Moreno",
  "Nadir",
  "Nazzareno",
  "Nestore",
  "Nico",
  "Noel",
  "Odone",
  "Omar",
  "Orfeo",
  "Osvaldo",
  "Pacifico",
  "Pericle",
  "Pietro",
  "Primo",
  "Quasimodo",
  "Radio",
  "Raoul",
  "Renzo",
  "Rodolfo",
  "Romolo",
  "Rosolino",
  "Rufo",
  "Sabino",
  "Sandro",
  "Sasha",
  "Secondo",
  "Sesto",
  "Silverio",
  "Siro",
  "Tazio",
  "Teseo",
  "Timothy",
  "Tommaso",
  "Tristano",
  "Umberto",
  "Ariel",
  "Artemide",
  "Assia",
  "Azue",
  "Benedetta",
  "Bibiana",
  "Brigitta",
  "Carmela",
  "Cassiopea",
  "Cesidia",
  "Cira",
  "Clea",
  "Cleopatra",
  "Clodovea",
  "Concetta",
  "Cosetta",
  "Cristyn",
  "Damiana",
  "Danuta",
  "Deborah",
  "Demi",
  "Diamante",
  "Diana",
  "Donatella",
  "Doriana",
  "Edvige",
  "Elda",
  "Elga",
  "Elsa",
  "Emilia",
  "Enrica",
  "Erminia",
  "Eufemia",
  "Evita",
  "Fatima",
  "Felicia",
  "Filomena",
  "Flaviana",
  "Fortunata",
  "Gelsomina",
  "Genziana",
  "Giacinta",
  "Gilda",
  "Giovanna",
  "Giulietta",
  "Grazia",
  "Guendalina",
  "Helga",
  "Ileana",
  "Ingrid",
  "Irene",
  "Isabel",
  "Isira",
  "Ivonne",
  "Jelena",
  "Jole",
  "Claudia",
  "Kayla",
  "Kristel",
  "Laura",
  "Lucia",
  "Lia",
  "Lidia",
  "Lisa",
  "Loredana",
  "Loretta",
  "Luce",
  "Lucrezia",
  "Luna",
  "Maika",
  "Marcella",
  "Maria",
  "Mariagiulia",
  "Marianita",
  "Mariapia",
  "Marieva",
  "Marina",
  "Maristella",
  "Maruska",
  "Matilde",
  "Mecren",
  "Mercedes",
  "Mietta",
  "Miriana",
  "Miriam",
  "Monia",
  "Morgana",
  "Naomi",
  "Nayade",
  "Nicoletta",
  "Ninfa",
  "Noemi",
  "Nunzia",
  "Olimpia",
  "Oretta",
  "Ortensia",
  "Penelope",
  "Piccarda",
  "Prisca",
  "Rebecca",
  "Rita",
  "Rosalba",
  "Rosaria",
  "Rosita",
  "Ruth",
  "Samira",
  "Sarita",
  "Selvaggia",
  "Shaira",
  "Sibilla",
  "Soriana",
  "Thea",
  "Tosca",
  "Ursula",
  "Vania",
  "Vera",
  "Vienna",
  "Violante",
  "Vitalba",
  "Zelida"
];

},{}],421:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./first_name":420,"./last_name":422,"./name":423,"./prefix":424,"./suffix":425}],422:[function(require,module,exports){
module["exports"] = [
  "Amato",
  "Barbieri",
  "Barone",
  "Basile",
  "Battaglia",
  "Bellini",
  "Benedetti",
  "Bernardi",
  "Bianc",
  "Bianchi",
  "Bruno",
  "Caputo",
  "Carbon",
  "Caruso",
  "Cattaneo",
  "Colombo",
  "Cont",
  "Conte",
  "Coppola",
  "Costa",
  "Costantin",
  "D'amico",
  "D'angelo",
  "Damico",
  "De Angelis",
  "De luca",
  "De rosa",
  "De Santis",
  "Donati",
  "Esposito",
  "Fabbri",
  "Farin",
  "Ferrara",
  "Ferrari",
  "Ferraro",
  "Ferretti",
  "Ferri",
  "Fior",
  "Fontana",
  "Galli",
  "Gallo",
  "Gatti",
  "Gentile",
  "Giordano",
  "Giuliani",
  "Grassi",
  "Grasso",
  "Greco",
  "Guerra",
  "Leone",
  "Lombardi",
  "Lombardo",
  "Longo",
  "Mancini",
  "Marchetti",
  "Marian",
  "Marini",
  "Marino",
  "Martinelli",
  "Martini",
  "Martino",
  "Mazza",
  "Messina",
  "Milani",
  "Montanari",
  "Monti",
  "Morelli",
  "Moretti",
  "Negri",
  "Neri",
  "Orlando",
  "Pagano",
  "Palmieri",
  "Palumbo",
  "Parisi",
  "Pellegrini",
  "Pellegrino",
  "Piras",
  "Ricci",
  "Rinaldi",
  "Riva",
  "Rizzi",
  "Rizzo",
  "Romano",
  "Ross",
  "Rossetti",
  "Ruggiero",
  "Russo",
  "Sala",
  "Sanna",
  "Santoro",
  "Sartori",
  "Serr",
  "Silvestri",
  "Sorrentino",
  "Testa",
  "Valentini",
  "Villa",
  "Vitale",
  "Vitali"
];

},{}],423:[function(require,module,exports){
module.exports=require(388)
},{"/Users/a/dev/faker.js/lib/locales/ge/name/name.js":388}],424:[function(require,module,exports){
module["exports"] = [
  "Sig.",
  "Dott.",
  "Dr.",
  "Ing."
];

},{}],425:[function(require,module,exports){
module["exports"] = [];

},{}],426:[function(require,module,exports){
module["exports"] = [
  "+## ### ## ## ####",
  "+## ## #######",
  "+## ## ########",
  "+## ### #######",
  "+## ### ########",
  "+## #### #######",
  "+## #### ########",
  "0## ### ####",
  "+39 0## ### ###",
  "3## ### ###",
  "+39 3## ### ###"
];

},{}],427:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":426,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],428:[function(require,module,exports){
module["exports"] = [
  "#{city_prefix}#{Name.first_name}#{city_suffix}",
  "#{Name.first_name}#{city_suffix}",
  "#{city_prefix}#{Name.last_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}"
];

},{}],429:[function(require,module,exports){
module["exports"] = [
  "北",
  "東",
  "西",
  "南",
  "新",
  "湖",
  "港"
];

},{}],430:[function(require,module,exports){
module["exports"] = [
  "市",
  "区",
  "町",
  "村"
];

},{}],431:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.city = require("./city");
address.street_name = require("./street_name");

},{"./city":428,"./city_prefix":429,"./city_suffix":430,"./postcode":432,"./state":433,"./state_abbr":434,"./street_name":435}],432:[function(require,module,exports){
module["exports"] = [
  "###-####"
];

},{}],433:[function(require,module,exports){
module["exports"] = [
  "北海道",
  "青森県",
  "岩手県",
  "宮城県",
  "秋田県",
  "山形県",
  "福島県",
  "茨城県",
  "栃木県",
  "群馬県",
  "埼玉県",
  "千葉県",
  "東京都",
  "神奈川県",
  "新潟県",
  "富山県",
  "石川県",
  "福井県",
  "山梨県",
  "長野県",
  "岐阜県",
  "静岡県",
  "愛知県",
  "三重県",
  "滋賀県",
  "京都府",
  "大阪府",
  "兵庫県",
  "奈良県",
  "和歌山県",
  "鳥取県",
  "島根県",
  "岡山県",
  "広島県",
  "山口県",
  "徳島県",
  "香川県",
  "愛媛県",
  "高知県",
  "福岡県",
  "佐賀県",
  "長崎県",
  "熊本県",
  "大分県",
  "宮崎県",
  "鹿児島県",
  "沖縄県"
];

},{}],434:[function(require,module,exports){
module["exports"] = [
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "10",
  "11",
  "12",
  "13",
  "14",
  "15",
  "16",
  "17",
  "18",
  "19",
  "20",
  "21",
  "22",
  "23",
  "24",
  "25",
  "26",
  "27",
  "28",
  "29",
  "30",
  "31",
  "32",
  "33",
  "34",
  "35",
  "36",
  "37",
  "38",
  "39",
  "40",
  "41",
  "42",
  "43",
  "44",
  "45",
  "46",
  "47"
];

},{}],435:[function(require,module,exports){
module["exports"] = [
  "#{Name.first_name}#{street_suffix}",
  "#{Name.last_name}#{street_suffix}"
];

},{}],436:[function(require,module,exports){
module["exports"] = [
  "090-####-####",
  "080-####-####",
  "070-####-####"
];

},{}],437:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":436,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],438:[function(require,module,exports){
var ja = {};
module['exports'] = ja;
ja.title = "Japanese";
ja.address = require("./address");
ja.phone_number = require("./phone_number");
ja.cell_phone = require("./cell_phone");
ja.name = require("./name");

},{"./address":431,"./cell_phone":437,"./name":440,"./phone_number":444}],439:[function(require,module,exports){
module["exports"] = [
  "大翔",
  "蓮",
  "颯太",
  "樹",
  "大和",
  "陽翔",
  "陸斗",
  "太一",
  "海翔",
  "蒼空",
  "翼",
  "陽菜",
  "結愛",
  "結衣",
  "杏",
  "莉子",
  "美羽",
  "結菜",
  "心愛",
  "愛菜",
  "美咲"
];

},{}],440:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.last_name = require("./last_name");
name.first_name = require("./first_name");
name.name = require("./name");

},{"./first_name":439,"./last_name":441,"./name":442}],441:[function(require,module,exports){
module["exports"] = [
  "佐藤",
  "鈴木",
  "高橋",
  "田中",
  "渡辺",
  "伊藤",
  "山本",
  "中村",
  "小林",
  "加藤",
  "吉田",
  "山田",
  "佐々木",
  "山口",
  "斎藤",
  "松本",
  "井上",
  "木村",
  "林",
  "清水"
];

},{}],442:[function(require,module,exports){
module["exports"] = [
  "#{last_name} #{first_name}"
];

},{}],443:[function(require,module,exports){
module["exports"] = [
  "0####-#-####",
  "0###-##-####",
  "0##-###-####",
  "0#-####-####"
];

},{}],444:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":443,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],445:[function(require,module,exports){
module["exports"] = [
  "#{city_name}#{city_suffix}"
];

},{}],446:[function(require,module,exports){
module["exports"] = [
  "강릉",
  "양양",
  "인제",
  "광주",
  "구리",
  "부천",
  "밀양",
  "통영",
  "창원",
  "거창",
  "고성",
  "양산",
  "김천",
  "구미",
  "영주",
  "광산",
  "남",
  "북",
  "고창",
  "군산",
  "남원",
  "동작",
  "마포",
  "송파",
  "용산",
  "부평",
  "강화",
  "수성"
];

},{}],447:[function(require,module,exports){
module["exports"] = [
  "구",
  "시",
  "군"
];

},{}],448:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city_suffix = require("./city_suffix");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_root = require("./street_root");
address.street_suffix = require("./street_suffix");
address.street_name = require("./street_name");

},{"./city":445,"./city_name":446,"./city_suffix":447,"./postcode":449,"./state":450,"./state_abbr":451,"./street_name":452,"./street_root":453,"./street_suffix":454}],449:[function(require,module,exports){
module["exports"] = [
  "###-###"
];

},{}],450:[function(require,module,exports){
module["exports"] = [
  "강원",
  "경기",
  "경남",
  "경북",
  "광주",
  "대구",
  "대전",
  "부산",
  "서울",
  "울산",
  "인천",
  "전남",
  "전북",
  "제주",
  "충남",
  "충북",
  "세종"
];

},{}],451:[function(require,module,exports){
module.exports=require(450)
},{"/Users/a/dev/faker.js/lib/locales/ko/address/state.js":450}],452:[function(require,module,exports){
module["exports"] = [
  "#{street_root}#{street_suffix}"
];

},{}],453:[function(require,module,exports){
module["exports"] = [
  "상계",
  "화곡",
  "신정",
  "목",
  "잠실",
  "면목",
  "주안",
  "안양",
  "중",
  "정왕",
  "구로",
  "신월",
  "연산",
  "부평",
  "창",
  "만수",
  "중계",
  "검단",
  "시흥",
  "상도",
  "방배",
  "장유",
  "상",
  "광명",
  "신길",
  "행신",
  "대명",
  "동탄"
];

},{}],454:[function(require,module,exports){
module["exports"] = [
  "읍",
  "면",
  "동"
];

},{}],455:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.prefix = require("./prefix");
company.name = require("./name");

},{"./name":456,"./prefix":457,"./suffix":458}],456:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{Name.first_name}",
  "#{Name.first_name} #{suffix}"
];

},{}],457:[function(require,module,exports){
module["exports"] = [
  "주식회사",
  "한국"
];

},{}],458:[function(require,module,exports){
module["exports"] = [
  "연구소",
  "게임즈",
  "그룹",
  "전자",
  "물산",
  "코리아"
];

},{}],459:[function(require,module,exports){
var ko = {};
module['exports'] = ko;
ko.title = "Korean";
ko.address = require("./address");
ko.phone_number = require("./phone_number");
ko.company = require("./company");
ko.internet = require("./internet");
ko.lorem = require("./lorem");
ko.name = require("./name");

},{"./address":448,"./company":455,"./internet":462,"./lorem":463,"./name":466,"./phone_number":470}],460:[function(require,module,exports){
module["exports"] = [
  "co.kr",
  "com",
  "biz",
  "info",
  "ne.kr",
  "net",
  "or.kr",
  "org"
];

},{}],461:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "yahoo.co.kr",
  "hanmail.net",
  "naver.com"
];

},{}],462:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":460,"./free_email":461,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],463:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"./words":464,"/Users/a/dev/faker.js/lib/locales/de/lorem/index.js":38}],464:[function(require,module,exports){
module["exports"] = [
  "국가는",
  "법률이",
  "정하는",
  "바에",
  "의하여",
  "재외국민을",
  "보호할",
  "의무를",
  "진다.",
  "모든",
  "국민은",
  "신체의",
  "자유를",
  "가진다.",
  "국가는",
  "전통문화의",
  "계승·발전과",
  "민족문화의",
  "창달에",
  "노력하여야",
  "한다.",
  "통신·방송의",
  "시설기준과",
  "신문의",
  "기능을",
  "보장하기",
  "위하여",
  "필요한",
  "사항은",
  "법률로",
  "정한다.",
  "헌법에",
  "의하여",
  "체결·공포된",
  "조약과",
  "일반적으로",
  "승인된",
  "국제법규는",
  "국내법과",
  "같은",
  "효력을",
  "가진다.",
  "다만,",
  "현행범인인",
  "경우와",
  "장기",
  "3년",
  "이상의",
  "형에",
  "해당하는",
  "죄를",
  "범하고",
  "도피",
  "또는",
  "증거인멸의",
  "염려가",
  "있을",
  "때에는",
  "사후에",
  "영장을",
  "청구할",
  "수",
  "있다.",
  "저작자·발명가·과학기술자와",
  "예술가의",
  "권리는",
  "법률로써",
  "보호한다.",
  "형사피고인은",
  "유죄의",
  "판결이",
  "확정될",
  "때까지는",
  "무죄로",
  "추정된다.",
  "모든",
  "국민은",
  "행위시의",
  "법률에",
  "의하여",
  "범죄를",
  "구성하지",
  "아니하는",
  "행위로",
  "소추되지",
  "아니하며,",
  "동일한",
  "범죄에",
  "대하여",
  "거듭",
  "처벌받지",
  "아니한다.",
  "국가는",
  "평생교육을",
  "진흥하여야",
  "한다.",
  "모든",
  "국민은",
  "사생활의",
  "비밀과",
  "자유를",
  "침해받지",
  "아니한다.",
  "의무교육은",
  "무상으로",
  "한다.",
  "저작자·발명가·과학기술자와",
  "예술가의",
  "권리는",
  "법률로써",
  "보호한다.",
  "국가는",
  "모성의",
  "보호를",
  "위하여",
  "노력하여야",
  "한다.",
  "헌법에",
  "의하여",
  "체결·공포된",
  "조약과",
  "일반적으로",
  "승인된",
  "국제법규는",
  "국내법과",
  "같은",
  "효력을",
  "가진다."
];

},{}],465:[function(require,module,exports){
module["exports"] = [
  "서연",
  "민서",
  "서현",
  "지우",
  "서윤",
  "지민",
  "수빈",
  "하은",
  "예은",
  "윤서",
  "민준",
  "지후",
  "지훈",
  "준서",
  "현우",
  "예준",
  "건우",
  "현준",
  "민재",
  "우진",
  "은주"
];

},{}],466:[function(require,module,exports){
arguments[4][440][0].apply(exports,arguments)
},{"./first_name":465,"./last_name":467,"./name":468,"/Users/a/dev/faker.js/lib/locales/ja/name/index.js":440}],467:[function(require,module,exports){
module["exports"] = [
  "김",
  "이",
  "박",
  "최",
  "정",
  "강",
  "조",
  "윤",
  "장",
  "임",
  "오",
  "한",
  "신",
  "서",
  "권",
  "황",
  "안",
  "송",
  "류",
  "홍"
];

},{}],468:[function(require,module,exports){
module.exports=require(442)
},{"/Users/a/dev/faker.js/lib/locales/ja/name/name.js":442}],469:[function(require,module,exports){
module["exports"] = [
  "0#-#####-####",
  "0##-###-####",
  "0##-####-####"
];

},{}],470:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":469,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],471:[function(require,module,exports){
module["exports"] = [
  "#",
  "##"
];

},{}],472:[function(require,module,exports){
module["exports"] = [
  "#{city_root}#{city_suffix}"
];

},{}],473:[function(require,module,exports){
module["exports"] = [
  "Fet",
  "Gjes",
  "Høy",
  "Inn",
  "Fager",
  "Lille",
  "Lo",
  "Mal",
  "Nord",
  "Nær",
  "Sand",
  "Sme",
  "Stav",
  "Stor",
  "Tand",
  "Ut",
  "Vest"
];

},{}],474:[function(require,module,exports){
module["exports"] = [
  "berg",
  "borg",
  "by",
  "bø",
  "dal",
  "eid",
  "fjell",
  "fjord",
  "foss",
  "grunn",
  "hamn",
  "havn",
  "helle",
  "mark",
  "nes",
  "odden",
  "sand",
  "sjøen",
  "stad",
  "strand",
  "strøm",
  "sund",
  "vik",
  "vær",
  "våg",
  "ø",
  "øy",
  "ås"
];

},{}],475:[function(require,module,exports){
module["exports"] = [
  "sgate",
  "svei",
  "s Gate",
  "s Vei",
  "gata",
  "veien"
];

},{}],476:[function(require,module,exports){
module["exports"] = [
  "Norge"
];

},{}],477:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_root = require("./city_root");
address.city_suffix = require("./city_suffix");
address.street_prefix = require("./street_prefix");
address.street_root = require("./street_root");
address.street_suffix = require("./street_suffix");
address.common_street_suffix = require("./common_street_suffix");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":471,"./city":472,"./city_root":473,"./city_suffix":474,"./common_street_suffix":475,"./default_country":476,"./postcode":478,"./secondary_address":479,"./state":480,"./street_address":481,"./street_name":482,"./street_prefix":483,"./street_root":484,"./street_suffix":485}],478:[function(require,module,exports){
module["exports"] = [
  "####",
  "####",
  "####",
  "0###"
];

},{}],479:[function(require,module,exports){
module["exports"] = [
  "Leil. ###",
  "Oppgang A",
  "Oppgang B"
];

},{}],480:[function(require,module,exports){
module["exports"] = [
  ""
];

},{}],481:[function(require,module,exports){
module.exports=require(25)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_address.js":25}],482:[function(require,module,exports){
module["exports"] = [
  "#{street_root}#{street_suffix}",
  "#{street_prefix} #{street_root}#{street_suffix}",
  "#{Name.first_name}#{common_street_suffix}",
  "#{Name.last_name}#{common_street_suffix}"
];

},{}],483:[function(require,module,exports){
module["exports"] = [
  "Øvre",
  "Nedre",
  "Søndre",
  "Gamle",
  "Østre",
  "Vestre"
];

},{}],484:[function(require,module,exports){
module["exports"] = [
  "Eike",
  "Bjørke",
  "Gran",
  "Vass",
  "Furu",
  "Litj",
  "Lille",
  "Høy",
  "Fosse",
  "Elve",
  "Ku",
  "Konvall",
  "Soldugg",
  "Hestemyr",
  "Granitt",
  "Hegge",
  "Rogne",
  "Fiol",
  "Sol",
  "Ting",
  "Malm",
  "Klokker",
  "Preste",
  "Dam",
  "Geiterygg",
  "Bekke",
  "Berg",
  "Kirke",
  "Kors",
  "Bru",
  "Blåveis",
  "Torg",
  "Sjø"
];

},{}],485:[function(require,module,exports){
module["exports"] = [
  "alléen",
  "bakken",
  "berget",
  "bråten",
  "eggen",
  "engen",
  "ekra",
  "faret",
  "flata",
  "gata",
  "gjerdet",
  "grenda",
  "gropa",
  "hagen",
  "haugen",
  "havna",
  "holtet",
  "høgda",
  "jordet",
  "kollen",
  "kroken",
  "lia",
  "lunden",
  "lyngen",
  "løkka",
  "marka",
  "moen",
  "myra",
  "plassen",
  "ringen",
  "roa",
  "røa",
  "skogen",
  "skrenten",
  "spranget",
  "stien",
  "stranda",
  "stubben",
  "stykket",
  "svingen",
  "tjernet",
  "toppen",
  "tunet",
  "vollen",
  "vika",
  "åsen"
];

},{}],486:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"./name":487,"./suffix":488,"/Users/a/dev/faker.js/lib/locales/de_CH/company/index.js":83}],487:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} og #{Name.last_name}"
];

},{}],488:[function(require,module,exports){
module["exports"] = [
  "Gruppen",
  "AS",
  "ASA",
  "BA",
  "RFH",
  "og Sønner"
];

},{}],489:[function(require,module,exports){
var nb_NO = {};
module['exports'] = nb_NO;
nb_NO.title = "Norwegian";
nb_NO.address = require("./address");
nb_NO.company = require("./company");
nb_NO.internet = require("./internet");
nb_NO.name = require("./name");
nb_NO.phone_number = require("./phone_number");

},{"./address":477,"./company":486,"./internet":491,"./name":494,"./phone_number":501}],490:[function(require,module,exports){
module["exports"] = [
  "no",
  "com",
  "net",
  "org"
];

},{}],491:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":490,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],492:[function(require,module,exports){
module["exports"] = [
  "Emma",
  "Sara",
  "Thea",
  "Ida",
  "Julie",
  "Nora",
  "Emilie",
  "Ingrid",
  "Hanna",
  "Maria",
  "Sofie",
  "Anna",
  "Malin",
  "Amalie",
  "Vilde",
  "Frida",
  "Andrea",
  "Tuva",
  "Victoria",
  "Mia",
  "Karoline",
  "Mathilde",
  "Martine",
  "Linnea",
  "Marte",
  "Hedda",
  "Marie",
  "Helene",
  "Silje",
  "Leah",
  "Maja",
  "Elise",
  "Oda",
  "Kristine",
  "Aurora",
  "Kaja",
  "Camilla",
  "Mari",
  "Maren",
  "Mina",
  "Selma",
  "Jenny",
  "Celine",
  "Eline",
  "Sunniva",
  "Natalie",
  "Tiril",
  "Synne",
  "Sandra",
  "Madeleine"
];

},{}],493:[function(require,module,exports){
module["exports"] = [
  "Emma",
  "Sara",
  "Thea",
  "Ida",
  "Julie",
  "Nora",
  "Emilie",
  "Ingrid",
  "Hanna",
  "Maria",
  "Sofie",
  "Anna",
  "Malin",
  "Amalie",
  "Vilde",
  "Frida",
  "Andrea",
  "Tuva",
  "Victoria",
  "Mia",
  "Karoline",
  "Mathilde",
  "Martine",
  "Linnea",
  "Marte",
  "Hedda",
  "Marie",
  "Helene",
  "Silje",
  "Leah",
  "Maja",
  "Elise",
  "Oda",
  "Kristine",
  "Aurora",
  "Kaja",
  "Camilla",
  "Mari",
  "Maren",
  "Mina",
  "Selma",
  "Jenny",
  "Celine",
  "Eline",
  "Sunniva",
  "Natalie",
  "Tiril",
  "Synne",
  "Sandra",
  "Madeleine",
  "Markus",
  "Mathias",
  "Kristian",
  "Jonas",
  "Andreas",
  "Alexander",
  "Martin",
  "Sander",
  "Daniel",
  "Magnus",
  "Henrik",
  "Tobias",
  "Kristoffer",
  "Emil",
  "Adrian",
  "Sebastian",
  "Marius",
  "Elias",
  "Fredrik",
  "Thomas",
  "Sondre",
  "Benjamin",
  "Jakob",
  "Oliver",
  "Lucas",
  "Oskar",
  "Nikolai",
  "Filip",
  "Mats",
  "William",
  "Erik",
  "Simen",
  "Ole",
  "Eirik",
  "Isak",
  "Kasper",
  "Noah",
  "Lars",
  "Joakim",
  "Johannes",
  "Håkon",
  "Sindre",
  "Jørgen",
  "Herman",
  "Anders",
  "Jonathan",
  "Even",
  "Theodor",
  "Mikkel",
  "Aksel"
];

},{}],494:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.feminine_name = require("./feminine_name");
name.masculine_name = require("./masculine_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./feminine_name":492,"./first_name":493,"./last_name":495,"./masculine_name":496,"./name":497,"./prefix":498,"./suffix":499}],495:[function(require,module,exports){
module["exports"] = [
  "Johansen",
  "Hansen",
  "Andersen",
  "Kristiansen",
  "Larsen",
  "Olsen",
  "Solberg",
  "Andresen",
  "Pedersen",
  "Nilsen",
  "Berg",
  "Halvorsen",
  "Karlsen",
  "Svendsen",
  "Jensen",
  "Haugen",
  "Martinsen",
  "Eriksen",
  "Sørensen",
  "Johnsen",
  "Myhrer",
  "Johannessen",
  "Nielsen",
  "Hagen",
  "Pettersen",
  "Bakke",
  "Skuterud",
  "Løken",
  "Gundersen",
  "Strand",
  "Jørgensen",
  "Kvarme",
  "Røed",
  "Sæther",
  "Stensrud",
  "Moe",
  "Kristoffersen",
  "Jakobsen",
  "Holm",
  "Aas",
  "Lie",
  "Moen",
  "Andreassen",
  "Vedvik",
  "Nguyen",
  "Jacobsen",
  "Torgersen",
  "Ruud",
  "Krogh",
  "Christiansen",
  "Bjerke",
  "Aalerud",
  "Borge",
  "Sørlie",
  "Berge",
  "Østli",
  "Ødegård",
  "Torp",
  "Henriksen",
  "Haukelidsæter",
  "Fjeld",
  "Danielsen",
  "Aasen",
  "Fredriksen",
  "Dahl",
  "Berntsen",
  "Arnesen",
  "Wold",
  "Thoresen",
  "Solheim",
  "Skoglund",
  "Bakken",
  "Amundsen",
  "Solli",
  "Smogeli",
  "Kristensen",
  "Glosli",
  "Fossum",
  "Evensen",
  "Eide",
  "Carlsen",
  "Østby",
  "Vegge",
  "Tangen",
  "Smedsrud",
  "Olstad",
  "Lunde",
  "Kleven",
  "Huseby",
  "Bjørnstad",
  "Ryan",
  "Rasmussen",
  "Nygård",
  "Nordskaug",
  "Nordby",
  "Mathisen",
  "Hopland",
  "Gran",
  "Finstad",
  "Edvardsen"
];

},{}],496:[function(require,module,exports){
module["exports"] = [
  "Markus",
  "Mathias",
  "Kristian",
  "Jonas",
  "Andreas",
  "Alexander",
  "Martin",
  "Sander",
  "Daniel",
  "Magnus",
  "Henrik",
  "Tobias",
  "Kristoffer",
  "Emil",
  "Adrian",
  "Sebastian",
  "Marius",
  "Elias",
  "Fredrik",
  "Thomas",
  "Sondre",
  "Benjamin",
  "Jakob",
  "Oliver",
  "Lucas",
  "Oskar",
  "Nikolai",
  "Filip",
  "Mats",
  "William",
  "Erik",
  "Simen",
  "Ole",
  "Eirik",
  "Isak",
  "Kasper",
  "Noah",
  "Lars",
  "Joakim",
  "Johannes",
  "Håkon",
  "Sindre",
  "Jørgen",
  "Herman",
  "Anders",
  "Jonathan",
  "Even",
  "Theodor",
  "Mikkel",
  "Aksel"
];

},{}],497:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name} #{suffix}",
  "#{feminine_name} #{feminine_name} #{last_name}",
  "#{masculine_name} #{masculine_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],498:[function(require,module,exports){
module["exports"] = [
  "Dr.",
  "Prof."
];

},{}],499:[function(require,module,exports){
module["exports"] = [
  "Jr.",
  "Sr.",
  "I",
  "II",
  "III",
  "IV",
  "V"
];

},{}],500:[function(require,module,exports){
module["exports"] = [
  "########",
  "## ## ## ##",
  "### ## ###",
  "+47 ## ## ## ##"
];

},{}],501:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":500,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],502:[function(require,module,exports){
module["exports"] = [
  "Bhaktapur",
  "Biratnagar",
  "Birendranagar",
  "Birgunj",
  "Butwal",
  "Damak",
  "Dharan",
  "Gaur",
  "Gorkha",
  "Hetauda",
  "Itahari",
  "Janakpur",
  "Kathmandu",
  "Lahan",
  "Nepalgunj",
  "Pokhara"
];

},{}],503:[function(require,module,exports){
module["exports"] = [
  "Nepal"
];

},{}],504:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.city = require("./city");
address.default_country = require("./default_country");

},{"./city":502,"./default_country":503,"./postcode":505,"./state":506}],505:[function(require,module,exports){
module["exports"] = [
  0
];

},{}],506:[function(require,module,exports){
module["exports"] = [
  "Baglung",
  "Banke",
  "Bara",
  "Bardiya",
  "Bhaktapur",
  "Bhojupu",
  "Chitwan",
  "Dailekh",
  "Dang",
  "Dhading",
  "Dhankuta",
  "Dhanusa",
  "Dolakha",
  "Dolpha",
  "Gorkha",
  "Gulmi",
  "Humla",
  "Ilam",
  "Jajarkot",
  "Jhapa",
  "Jumla",
  "Kabhrepalanchok",
  "Kalikot",
  "Kapilvastu",
  "Kaski",
  "Kathmandu",
  "Lalitpur",
  "Lamjung",
  "Manang",
  "Mohottari",
  "Morang",
  "Mugu",
  "Mustang",
  "Myagdi",
  "Nawalparasi",
  "Nuwakot",
  "Palpa",
  "Parbat",
  "Parsa",
  "Ramechhap",
  "Rauswa",
  "Rautahat",
  "Rolpa",
  "Rupandehi",
  "Sankhuwasabha",
  "Sarlahi",
  "Sindhuli",
  "Sindhupalchok",
  "Sunsari",
  "Surket",
  "Syangja",
  "Tanahu",
  "Terhathum"
];

},{}],507:[function(require,module,exports){
arguments[4][180][0].apply(exports,arguments)
},{"./suffix":508,"/Users/a/dev/faker.js/lib/locales/en_AU/company/index.js":180}],508:[function(require,module,exports){
module["exports"] = [
  "Pvt Ltd",
  "Group",
  "Ltd",
  "Limited"
];

},{}],509:[function(require,module,exports){
var nep = {};
module['exports'] = nep;
nep.title = "Nepalese";
nep.name = require("./name");
nep.address = require("./address");
nep.internet = require("./internet");
nep.company = require("./company");
nep.phone_number = require("./phone_number");

},{"./address":504,"./company":507,"./internet":512,"./name":514,"./phone_number":517}],510:[function(require,module,exports){
module["exports"] = [
  "np",
  "com",
  "info",
  "net",
  "org"
];

},{}],511:[function(require,module,exports){
module["exports"] = [
  "worldlink.com.np",
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],512:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":510,"./free_email":511,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],513:[function(require,module,exports){
module["exports"] = [
  "Aarav",
  "Ajita",
  "Amit",
  "Amita",
  "Amrit",
  "Arijit",
  "Ashmi",
  "Asmita",
  "Bibek",
  "Bijay",
  "Bikash",
  "Bina",
  "Bishal",
  "Bishnu",
  "Buddha",
  "Deepika",
  "Dipendra",
  "Gagan",
  "Ganesh",
  "Khem",
  "Krishna",
  "Laxmi",
  "Manisha",
  "Nabin",
  "Nikita",
  "Niraj",
  "Nischal",
  "Padam",
  "Pooja",
  "Prabin",
  "Prakash",
  "Prashant",
  "Prem",
  "Purna",
  "Rajendra",
  "Rajina",
  "Raju",
  "Rakesh",
  "Ranjan",
  "Ratna",
  "Sagar",
  "Sandeep",
  "Sanjay",
  "Santosh",
  "Sarita",
  "Shilpa",
  "Shirisha",
  "Shristi",
  "Siddhartha",
  "Subash",
  "Sumeet",
  "Sunita",
  "Suraj",
  "Susan",
  "Sushant"
];

},{}],514:[function(require,module,exports){
arguments[4][186][0].apply(exports,arguments)
},{"./first_name":513,"./last_name":515,"/Users/a/dev/faker.js/lib/locales/en_AU/name/index.js":186}],515:[function(require,module,exports){
module["exports"] = [
  "Adhikari",
  "Aryal",
  "Baral",
  "Basnet",
  "Bastola",
  "Basynat",
  "Bhandari",
  "Bhattarai",
  "Chettri",
  "Devkota",
  "Dhakal",
  "Dongol",
  "Ghale",
  "Gurung",
  "Gyawali",
  "Hamal",
  "Jung",
  "KC",
  "Kafle",
  "Karki",
  "Khadka",
  "Koirala",
  "Lama",
  "Limbu",
  "Magar",
  "Maharjan",
  "Niroula",
  "Pandey",
  "Pradhan",
  "Rana",
  "Raut",
  "Sai",
  "Shai",
  "Shakya",
  "Sherpa",
  "Shrestha",
  "Subedi",
  "Tamang",
  "Thapa"
];

},{}],516:[function(require,module,exports){
module["exports"] = [
  "##-#######",
  "+977-#-#######",
  "+977########"
];

},{}],517:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":516,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],518:[function(require,module,exports){
module["exports"] = [
  "#",
  "##",
  "###",
  "###a",
  "###b",
  "###c",
  "### I",
  "### II",
  "### III"
];

},{}],519:[function(require,module,exports){
module["exports"] = [
  "#{Name.first_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}",
  "#{city_prefix} #{Name.first_name}#{city_suffix}",
  "#{city_prefix} #{Name.last_name}#{city_suffix}"
];

},{}],520:[function(require,module,exports){
module["exports"] = [
  "Noord",
  "Oost",
  "West",
  "Zuid",
  "Nieuw",
  "Oud"
];

},{}],521:[function(require,module,exports){
module["exports"] = [
  "dam",
  "berg",
  " aan de Rijn",
  " aan de IJssel",
  "swaerd",
  "endrecht",
  "recht",
  "ambacht",
  "enmaes",
  "wijk",
  "sland",
  "stroom",
  "sluus",
  "dijk",
  "dorp",
  "burg",
  "veld",
  "sluis",
  "koop",
  "lek",
  "hout",
  "geest",
  "kerk",
  "woude",
  "hoven",
  "hoten",
  "ingen",
  "plas",
  "meer"
];

},{}],522:[function(require,module,exports){
module["exports"] = [
  "Afghanistan",
  "Akrotiri",
  "Albanië",
  "Algerije",
  "Amerikaanse Maagdeneilanden",
  "Amerikaans-Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antarctica",
  "Antigua en Barbuda",
  "Arctic Ocean",
  "Argentinië",
  "Armenië",
  "Aruba",
  "Ashmore and Cartier Islands",
  "Atlantic Ocean",
  "Australië",
  "Azerbeidzjan",
  "Bahama's",
  "Bahrein",
  "Bangladesh",
  "Barbados",
  "Belarus",
  "België",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolivië",
  "Bosnië-Herzegovina",
  "Botswana",
  "Bouvet Island",
  "Brazilië",
  "British Indian Ocean Territory",
  "Britse Maagdeneilanden",
  "Brunei",
  "Bulgarije",
  "Burkina Faso",
  "Burundi",
  "Cambodja",
  "Canada",
  "Caymaneilanden",
  "Centraal-Afrikaanse Republiek",
  "Chili",
  "China",
  "Christmas Island",
  "Clipperton Island",
  "Cocos (Keeling) Islands",
  "Colombia",
  "Comoren (Unie)",
  "Congo (Democratische Republiek)",
  "Congo (Volksrepubliek)",
  "Cook",
  "Coral Sea Islands",
  "Costa Rica",
  "Cuba",
  "Cyprus",
  "Denemarken",
  "Dhekelia",
  "Djibouti",
  "Dominica",
  "Dominicaanse Republiek",
  "Duitsland",
  "Ecuador",
  "Egypte",
  "El Salvador",
  "Equatoriaal-Guinea",
  "Eritrea",
  "Estland",
  "Ethiopië",
  "European Union",
  "Falkland",
  "Faroe Islands",
  "Fiji",
  "Filipijnen",
  "Finland",
  "Frankrijk",
  "Frans-Polynesië",
  "French Southern and Antarctic Lands",
  "Gabon",
  "Gambia",
  "Gaza Strip",
  "Georgië",
  "Ghana",
  "Gibraltar",
  "Grenada",
  "Griekenland",
  "Groenland",
  "Guam",
  "Guatemala",
  "Guernsey",
  "Guinea",
  "Guinee-Bissau",
  "Guyana",
  "Haïti",
  "Heard Island and McDonald Islands",
  "Heilige Stoel",
  "Honduras",
  "Hongarije",
  "Hongkong",
  "Ierland",
  "IJsland",
  "India",
  "Indian Ocean",
  "Indonesië",
  "Irak",
  "Iran",
  "Isle of Man",
  "Israël",
  "Italië",
  "Ivoorkust",
  "Jamaica",
  "Jan Mayen",
  "Japan",
  "Jemen",
  "Jersey",
  "Jordanië",
  "Kaapverdië",
  "Kameroen",
  "Kazachstan",
  "Kenia",
  "Kirgizstan",
  "Kiribati",
  "Koeweit",
  "Kroatië",
  "Laos",
  "Lesotho",
  "Letland",
  "Libanon",
  "Liberia",
  "Libië",
  "Liechtenstein",
  "Litouwen",
  "Luxemburg",
  "Macao",
  "Macedonië",
  "Madagaskar",
  "Malawi",
  "Maldiven",
  "Maleisië",
  "Mali",
  "Malta",
  "Marokko",
  "Marshall Islands",
  "Mauritanië",
  "Mauritius",
  "Mayotte",
  "Mexico",
  "Micronesia, Federated States of",
  "Moldavië",
  "Monaco",
  "Mongolië",
  "Montenegro",
  "Montserrat",
  "Mozambique",
  "Myanmar",
  "Namibië",
  "Nauru",
  "Navassa Island",
  "Nederland",
  "Nederlandse Antillen",
  "Nepal",
  "Ngwane",
  "Nicaragua",
  "Nieuw-Caledonië",
  "Nieuw-Zeeland",
  "Niger",
  "Nigeria",
  "Niue",
  "Noordelijke Marianen",
  "Noord-Korea",
  "Noorwegen",
  "Norfolk Island",
  "Oekraïne",
  "Oezbekistan",
  "Oman",
  "Oostenrijk",
  "Pacific Ocean",
  "Pakistan",
  "Palau",
  "Panama",
  "Papoea-Nieuw-Guinea",
  "Paracel Islands",
  "Paraguay",
  "Peru",
  "Pitcairn",
  "Polen",
  "Portugal",
  "Puerto Rico",
  "Qatar",
  "Roemenië",
  "Rusland",
  "Rwanda",
  "Saint Helena",
  "Saint Lucia",
  "Saint Vincent en de Grenadines",
  "Saint-Pierre en Miquelon",
  "Salomon",
  "Samoa",
  "San Marino",
  "São Tomé en Principe",
  "Saudi-Arabië",
  "Senegal",
  "Servië",
  "Seychellen",
  "Sierra Leone",
  "Singapore",
  "Sint-Kitts en Nevis",
  "Slovenië",
  "Slowakije",
  "Soedan",
  "Somalië",
  "South Georgia and the South Sandwich Islands",
  "Southern Ocean",
  "Spanje",
  "Spratly Islands",
  "Sri Lanka",
  "Suriname",
  "Svalbard",
  "Syrië",
  "Tadzjikistan",
  "Taiwan",
  "Tanzania",
  "Thailand",
  "Timor Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad en Tobago",
  "Tsjaad",
  "Tsjechië",
  "Tunesië",
  "Turkije",
  "Turkmenistan",
  "Turks-en Caicoseilanden",
  "Tuvalu",
  "Uganda",
  "Uruguay",
  "Vanuatu",
  "Venezuela",
  "Verenigd Koninkrijk",
  "Verenigde Arabische Emiraten",
  "Verenigde Staten van Amerika",
  "Vietnam",
  "Wake Island",
  "Wallis en Futuna",
  "Wereld",
  "West Bank",
  "Westelijke Sahara",
  "Zambia",
  "Zimbabwe",
  "Zuid-Afrika",
  "Zuid-Korea",
  "Zweden",
  "Zwitserland"
];

},{}],523:[function(require,module,exports){
module["exports"] = [
  "Nederland"
];

},{}],524:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.city = require("./city");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.default_country = require("./default_country");

},{"./building_number":518,"./city":519,"./city_prefix":520,"./city_suffix":521,"./country":522,"./default_country":523,"./postcode":525,"./secondary_address":526,"./state":527,"./street_address":528,"./street_name":529,"./street_suffix":530}],525:[function(require,module,exports){
module["exports"] = [
  "#### ??"
];

},{}],526:[function(require,module,exports){
module["exports"] = [
  "1 hoog",
  "2 hoog",
  "3 hoog"
];

},{}],527:[function(require,module,exports){
module["exports"] = [
  "Noord-Holland",
  "Zuid-Holland",
  "Utrecht",
  "Zeeland",
  "Overijssel",
  "Gelderland",
  "Drenthe",
  "Friesland",
  "Groningen",
  "Noord-Brabant",
  "Limburg",
  "Flevoland"
];

},{}],528:[function(require,module,exports){
module.exports=require(25)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_address.js":25}],529:[function(require,module,exports){
module.exports=require(435)
},{"/Users/a/dev/faker.js/lib/locales/ja/address/street_name.js":435}],530:[function(require,module,exports){
module["exports"] = [
  "straat",
  "laan",
  "weg",
  "plantsoen",
  "park"
];

},{}],531:[function(require,module,exports){
arguments[4][180][0].apply(exports,arguments)
},{"./suffix":532,"/Users/a/dev/faker.js/lib/locales/en_AU/company/index.js":180}],532:[function(require,module,exports){
module["exports"] = [
  "BV",
  "V.O.F.",
  "Group",
  "en Zonen"
];

},{}],533:[function(require,module,exports){
var nl = {};
module['exports'] = nl;
nl.title = "Dutch";
nl.address = require("./address");
nl.company = require("./company");
nl.internet = require("./internet");
nl.lorem = require("./lorem");
nl.name = require("./name");
nl.phone_number = require("./phone_number");

},{"./address":524,"./company":531,"./internet":536,"./lorem":537,"./name":541,"./phone_number":548}],534:[function(require,module,exports){
module["exports"] = [
  "nl",
  "com",
  "net",
  "org"
];

},{}],535:[function(require,module,exports){
module.exports=require(36)
},{"/Users/a/dev/faker.js/lib/locales/de/internet/free_email.js":36}],536:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":534,"./free_email":535,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],537:[function(require,module,exports){
module.exports=require(158)
},{"./supplemental":538,"./words":539,"/Users/a/dev/faker.js/lib/locales/en/lorem/index.js":158}],538:[function(require,module,exports){
module.exports=require(159)
},{"/Users/a/dev/faker.js/lib/locales/en/lorem/supplemental.js":159}],539:[function(require,module,exports){
module.exports=require(39)
},{"/Users/a/dev/faker.js/lib/locales/de/lorem/words.js":39}],540:[function(require,module,exports){
module["exports"] = [
  "Amber",
  "Anna",
  "Anne",
  "Anouk",
  "Bas",
  "Bram",
  "Britt",
  "Daan",
  "Emma",
  "Eva",
  "Femke",
  "Finn",
  "Fleur",
  "Iris",
  "Isa",
  "Jan",
  "Jasper",
  "Jayden",
  "Jesse",
  "Johannes",
  "Julia",
  "Julian",
  "Kevin",
  "Lars",
  "Lieke",
  "Lisa",
  "Lotte",
  "Lucas",
  "Luuk",
  "Maud",
  "Max",
  "Mike",
  "Milan",
  "Nick",
  "Niels",
  "Noa",
  "Rick",
  "Roos",
  "Ruben",
  "Sander",
  "Sanne",
  "Sem",
  "Sophie",
  "Stijn",
  "Sven",
  "Thijs",
  "Thijs",
  "Thomas",
  "Tim",
  "Tom"
];

},{}],541:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.tussenvoegsel = require("./tussenvoegsel");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./first_name":540,"./last_name":542,"./name":543,"./prefix":544,"./suffix":545,"./tussenvoegsel":546}],542:[function(require,module,exports){
module["exports"] = [
  "Bakker",
  "Beek",
  "Berg",
  "Boer",
  "Bos",
  "Bosch",
  "Brink",
  "Broek",
  "Brouwer",
  "Bruin",
  "Dam",
  "Dekker",
  "Dijk",
  "Dijkstra",
  "Graaf",
  "Groot",
  "Haan",
  "Hendriks",
  "Heuvel",
  "Hoek",
  "Jacobs",
  "Jansen",
  "Janssen",
  "Jong",
  "Klein",
  "Kok",
  "Koning",
  "Koster",
  "Leeuwen",
  "Linden",
  "Maas",
  "Meer",
  "Meijer",
  "Mulder",
  "Peters",
  "Ruiter",
  "Schouten",
  "Smit",
  "Smits",
  "Stichting",
  "Veen",
  "Ven",
  "Vermeulen",
  "Visser",
  "Vliet",
  "Vos",
  "Vries",
  "Wal",
  "Willems",
  "Wit"
];

},{}],543:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name} #{suffix}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{tussenvoegsel} #{last_name}",
  "#{first_name} #{tussenvoegsel} #{last_name}"
];

},{}],544:[function(require,module,exports){
module["exports"] = [
  "Dhr.",
  "Mevr. Dr.",
  "Bsc",
  "Msc",
  "Prof."
];

},{}],545:[function(require,module,exports){
module.exports=require(499)
},{"/Users/a/dev/faker.js/lib/locales/nb_NO/name/suffix.js":499}],546:[function(require,module,exports){
module["exports"] = [
  "van",
  "van de",
  "van den",
  "van 't",
  "van het",
  "de",
  "den"
];

},{}],547:[function(require,module,exports){
module["exports"] = [
  "(####) ######",
  "##########",
  "06########",
  "06 #### ####"
];

},{}],548:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":547,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],549:[function(require,module,exports){
module.exports=require(91)
},{"/Users/a/dev/faker.js/lib/locales/en/address/building_number.js":91}],550:[function(require,module,exports){
module.exports=require(49)
},{"/Users/a/dev/faker.js/lib/locales/de_AT/address/city.js":49}],551:[function(require,module,exports){
module["exports"] = [
  "Aleksandrów Kujawski",
  "Aleksandrów Łódzki",
  "Alwernia",
  "Andrychów",
  "Annopol",
  "Augustów",
  "Babimost",
  "Baborów",
  "Baranów Sandomierski",
  "Barcin",
  "Barczewo",
  "Bardo",
  "Barlinek",
  "Bartoszyce",
  "Barwice",
  "Bełchatów",
  "Bełżyce",
  "Będzin",
  "Biała",
  "Biała Piska",
  "Biała Podlaska",
  "Biała Rawska",
  "Białobrzegi",
  "Białogard",
  "Biały Bór",
  "Białystok",
  "Biecz",
  "Bielawa",
  "Bielsk Podlaski",
  "Bielsko-Biała",
  "Bieruń",
  "Bierutów",
  "Bieżuń",
  "Biłgoraj",
  "Biskupiec",
  "Bisztynek",
  "Blachownia",
  "Błaszki",
  "Błażowa",
  "Błonie",
  "Bobolice",
  "Bobowa",
  "Bochnia",
  "Bodzentyn",
  "Bogatynia",
  "Boguchwała",
  "Boguszów-Gorce",
  "Bojanowo",
  "Bolesławiec",
  "Bolków",
  "Borek Wielkopolski",
  "Borne Sulinowo",
  "Braniewo",
  "Brańsk",
  "Brodnica",
  "Brok",
  "Brusy",
  "Brwinów",
  "Brzeg",
  "Brzeg Dolny",
  "Brzesko",
  "Brzeszcze",
  "Brześć Kujawski",
  "Brzeziny",
  "Brzostek",
  "Brzozów",
  "Buk",
  "Bukowno",
  "Busko-Zdrój",
  "Bychawa",
  "Byczyna",
  "Bydgoszcz",
  "Bystrzyca Kłodzka",
  "Bytom",
  "Bytom Odrzański",
  "Bytów",
  "Cedynia",
  "Chełm",
  "Chełmek",
  "Chełmno",
  "Chełmża",
  "Chęciny",
  "Chmielnik",
  "Chocianów",
  "Chociwel",
  "Chodecz",
  "Chodzież",
  "Chojna",
  "Chojnice",
  "Chojnów",
  "Choroszcz",
  "Chorzele",
  "Chorzów",
  "Choszczno",
  "Chrzanów",
  "Ciechanowiec",
  "Ciechanów",
  "Ciechocinek",
  "Cieszanów",
  "Cieszyn",
  "Ciężkowice",
  "Cybinka",
  "Czaplinek",
  "Czarna Białostocka",
  "Czarna Woda",
  "Czarne",
  "Czarnków",
  "Czchów",
  "Czechowice-Dziedzice",
  "Czeladź",
  "Czempiń",
  "Czerniejewo",
  "Czersk",
  "Czerwieńsk",
  "Czerwionka-Leszczyny",
  "Częstochowa",
  "Człopa",
  "Człuchów",
  "Czyżew",
  "Ćmielów",
  "Daleszyce",
  "Darłowo",
  "Dąbie",
  "Dąbrowa Białostocka",
  "Dąbrowa Górnicza",
  "Dąbrowa Tarnowska",
  "Debrzno",
  "Dębica",
  "Dęblin",
  "Dębno",
  "Dobczyce",
  "Dobiegniew",
  "Dobra (powiat łobeski)",
  "Dobra (powiat turecki)",
  "Dobre Miasto",
  "Dobrodzień",
  "Dobrzany",
  "Dobrzyń nad Wisłą",
  "Dolsk",
  "Drawno",
  "Drawsko Pomorskie",
  "Drezdenko",
  "Drobin",
  "Drohiczyn",
  "Drzewica",
  "Dukla",
  "Duszniki-Zdrój",
  "Dynów",
  "Działdowo",
  "Działoszyce",
  "Działoszyn",
  "Dzierzgoń",
  "Dzierżoniów",
  "Dziwnów",
  "Elbląg",
  "Ełk",
  "Frampol",
  "Frombork",
  "Garwolin",
  "Gąbin",
  "Gdańsk",
  "Gdynia",
  "Giżycko",
  "Glinojeck",
  "Gliwice",
  "Głogów",
  "Głogów Małopolski",
  "Głogówek",
  "Głowno",
  "Głubczyce",
  "Głuchołazy",
  "Głuszyca",
  "Gniew",
  "Gniewkowo",
  "Gniezno",
  "Gogolin",
  "Golczewo",
  "Goleniów",
  "Golina",
  "Golub-Dobrzyń",
  "Gołańcz",
  "Gołdap",
  "Goniądz",
  "Gorlice",
  "Gorzów Śląski",
  "Gorzów Wielkopolski",
  "Gostynin",
  "Gostyń",
  "Gościno",
  "Gozdnica",
  "Góra",
  "Góra Kalwaria",
  "Górowo Iławeckie",
  "Górzno",
  "Grabów nad Prosną",
  "Grajewo",
  "Grodków",
  "Grodzisk Mazowiecki",
  "Grodzisk Wielkopolski",
  "Grójec",
  "Grudziądz",
  "Grybów",
  "Gryfice",
  "Gryfino",
  "Gryfów Śląski",
  "Gubin",
  "Hajnówka",
  "Halinów",
  "Hel",
  "Hrubieszów",
  "Iława",
  "Iłowa",
  "Iłża",
  "Imielin",
  "Inowrocław",
  "Ińsko",
  "Iwonicz-Zdrój",
  "Izbica Kujawska",
  "Jabłonowo Pomorskie",
  "Janikowo",
  "Janowiec Wielkopolski",
  "Janów Lubelski",
  "Jarocin",
  "Jarosław",
  "Jasień",
  "Jasło",
  "Jastarnia",
  "Jastrowie",
  "Jastrzębie-Zdrój",
  "Jawor",
  "Jaworzno",
  "Jaworzyna Śląska",
  "Jedlicze",
  "Jedlina-Zdrój",
  "Jedwabne",
  "Jelcz-Laskowice",
  "Jelenia Góra",
  "Jeziorany",
  "Jędrzejów",
  "Jordanów",
  "Józefów (powiat biłgorajski)",
  "Józefów (powiat otwocki)",
  "Jutrosin",
  "Kalety",
  "Kalisz",
  "Kalisz Pomorski",
  "Kalwaria Zebrzydowska",
  "Kałuszyn",
  "Kamienna Góra",
  "Kamień Krajeński",
  "Kamień Pomorski",
  "Kamieńsk",
  "Kańczuga",
  "Karczew",
  "Kargowa",
  "Karlino",
  "Karpacz",
  "Kartuzy",
  "Katowice",
  "Kazimierz Dolny",
  "Kazimierza Wielka",
  "Kąty Wrocławskie",
  "Kcynia",
  "Kędzierzyn-Koźle",
  "Kępice",
  "Kępno",
  "Kętrzyn",
  "Kęty",
  "Kielce",
  "Kietrz",
  "Kisielice",
  "Kleczew",
  "Kleszczele",
  "Kluczbork",
  "Kłecko",
  "Kłobuck",
  "Kłodawa",
  "Kłodzko",
  "Knurów",
  "Knyszyn",
  "Kobylin",
  "Kobyłka",
  "Kock",
  "Kolbuszowa",
  "Kolno",
  "Kolonowskie",
  "Koluszki",
  "Kołaczyce",
  "Koło",
  "Kołobrzeg",
  "Koniecpol",
  "Konin",
  "Konstancin-Jeziorna",
  "Konstantynów Łódzki",
  "Końskie",
  "Koprzywnica",
  "Korfantów",
  "Koronowo",
  "Korsze",
  "Kosów Lacki",
  "Kostrzyn",
  "Kostrzyn nad Odrą",
  "Koszalin",
  "Kościan",
  "Kościerzyna",
  "Kowal",
  "Kowalewo Pomorskie",
  "Kowary",
  "Koziegłowy",
  "Kozienice",
  "Koźmin Wielkopolski",
  "Kożuchów",
  "Kórnik",
  "Krajenka",
  "Kraków",
  "Krapkowice",
  "Krasnobród",
  "Krasnystaw",
  "Kraśnik",
  "Krobia",
  "Krosno",
  "Krosno Odrzańskie",
  "Krośniewice",
  "Krotoszyn",
  "Kruszwica",
  "Krynica Morska",
  "Krynica-Zdrój",
  "Krynki",
  "Krzanowice",
  "Krzepice",
  "Krzeszowice",
  "Krzywiń",
  "Krzyż Wielkopolski",
  "Książ Wielkopolski",
  "Kudowa-Zdrój",
  "Kunów",
  "Kutno",
  "Kuźnia Raciborska",
  "Kwidzyn",
  "Lądek-Zdrój",
  "Legionowo",
  "Legnica",
  "Lesko",
  "Leszno",
  "Leśna",
  "Leśnica",
  "Lewin Brzeski",
  "Leżajsk",
  "Lębork",
  "Lędziny",
  "Libiąż",
  "Lidzbark",
  "Lidzbark Warmiński",
  "Limanowa",
  "Lipiany",
  "Lipno",
  "Lipsk",
  "Lipsko",
  "Lubaczów",
  "Lubań",
  "Lubartów",
  "Lubawa",
  "Lubawka",
  "Lubień Kujawski",
  "Lubin",
  "Lublin",
  "Lubliniec",
  "Lubniewice",
  "Lubomierz",
  "Luboń",
  "Lubraniec",
  "Lubsko",
  "Lwówek",
  "Lwówek Śląski",
  "Łabiszyn",
  "Łańcut",
  "Łapy",
  "Łasin",
  "Łask",
  "Łaskarzew",
  "Łaszczów",
  "Łaziska Górne",
  "Łazy",
  "Łeba",
  "Łęczna",
  "Łęczyca",
  "Łęknica",
  "Łobez",
  "Łobżenica",
  "Łochów",
  "Łomianki",
  "Łomża",
  "Łosice",
  "Łowicz",
  "Łódź",
  "Łuków",
  "Maków Mazowiecki",
  "Maków Podhalański",
  "Malbork",
  "Małogoszcz",
  "Małomice",
  "Margonin",
  "Marki",
  "Maszewo",
  "Miasteczko Śląskie",
  "Miastko",
  "Michałowo",
  "Miechów",
  "Miejska Górka",
  "Mielec",
  "Mieroszów",
  "Mieszkowice",
  "Międzybórz",
  "Międzychód",
  "Międzylesie",
  "Międzyrzec Podlaski",
  "Międzyrzecz",
  "Międzyzdroje",
  "Mikołajki",
  "Mikołów",
  "Mikstat",
  "Milanówek",
  "Milicz",
  "Miłakowo",
  "Miłomłyn",
  "Miłosław",
  "Mińsk Mazowiecki",
  "Mirosławiec",
  "Mirsk",
  "Mława",
  "Młynary",
  "Mogielnica",
  "Mogilno",
  "Mońki",
  "Morąg",
  "Mordy",
  "Moryń",
  "Mosina",
  "Mrągowo",
  "Mrocza",
  "Mszana Dolna",
  "Mszczonów",
  "Murowana Goślina",
  "Muszyna",
  "Mysłowice",
  "Myszków",
  "Myszyniec",
  "Myślenice",
  "Myślibórz",
  "Nakło nad Notecią",
  "Nałęczów",
  "Namysłów",
  "Narol",
  "Nasielsk",
  "Nekla",
  "Nidzica",
  "Niemcza",
  "Niemodlin",
  "Niepołomice",
  "Nieszawa",
  "Nisko",
  "Nowa Dęba",
  "Nowa Ruda",
  "Nowa Sarzyna",
  "Nowa Sól",
  "Nowe",
  "Nowe Brzesko",
  "Nowe Miasteczko",
  "Nowe Miasto Lubawskie",
  "Nowe Miasto nad Pilicą",
  "Nowe Skalmierzyce",
  "Nowe Warpno",
  "Nowogard",
  "Nowogrodziec",
  "Nowogród",
  "Nowogród Bobrzański",
  "Nowy Dwór Gdański",
  "Nowy Dwór Mazowiecki",
  "Nowy Sącz",
  "Nowy Staw",
  "Nowy Targ",
  "Nowy Tomyśl",
  "Nowy Wiśnicz",
  "Nysa",
  "Oborniki",
  "Oborniki Śląskie",
  "Obrzycko",
  "Odolanów",
  "Ogrodzieniec",
  "Okonek",
  "Olecko",
  "Olesno",
  "Oleszyce",
  "Oleśnica",
  "Olkusz",
  "Olsztyn",
  "Olsztynek",
  "Olszyna",
  "Oława",
  "Opalenica",
  "Opatów",
  "Opoczno",
  "Opole",
  "Opole Lubelskie",
  "Orneta",
  "Orzesze",
  "Orzysz",
  "Osieczna",
  "Osiek",
  "Ostrołęka",
  "Ostroróg",
  "Ostrowiec Świętokrzyski",
  "Ostróda",
  "Ostrów Lubelski",
  "Ostrów Mazowiecka",
  "Ostrów Wielkopolski",
  "Ostrzeszów",
  "Ośno Lubuskie",
  "Oświęcim",
  "Otmuchów",
  "Otwock",
  "Ozimek",
  "Ozorków",
  "Ożarów",
  "Ożarów Mazowiecki",
  "Pabianice",
  "Paczków",
  "Pajęczno",
  "Pakość",
  "Parczew",
  "Pasłęk",
  "Pasym",
  "Pelplin",
  "Pełczyce",
  "Piaseczno",
  "Piaski",
  "Piastów",
  "Piechowice",
  "Piekary Śląskie",
  "Pieniężno",
  "Pieńsk",
  "Pieszyce",
  "Pilawa",
  "Pilica",
  "Pilzno",
  "Piła",
  "Piława Górna",
  "Pińczów",
  "Pionki",
  "Piotrków Kujawski",
  "Piotrków Trybunalski",
  "Pisz",
  "Piwniczna-Zdrój",
  "Pleszew",
  "Płock",
  "Płońsk",
  "Płoty",
  "Pniewy",
  "Pobiedziska",
  "Poddębice",
  "Podkowa Leśna",
  "Pogorzela",
  "Polanica-Zdrój",
  "Polanów",
  "Police",
  "Polkowice",
  "Połaniec",
  "Połczyn-Zdrój",
  "Poniatowa",
  "Poniec",
  "Poręba",
  "Poznań",
  "Prabuty",
  "Praszka",
  "Prochowice",
  "Proszowice",
  "Prószków",
  "Pruchnik",
  "Prudnik",
  "Prusice",
  "Pruszcz Gdański",
  "Pruszków",
  "Przasnysz",
  "Przecław",
  "Przedbórz",
  "Przedecz",
  "Przemków",
  "Przemyśl",
  "Przeworsk",
  "Przysucha",
  "Pszczyna",
  "Pszów",
  "Puck",
  "Puławy",
  "Pułtusk",
  "Puszczykowo",
  "Pyrzyce",
  "Pyskowice",
  "Pyzdry",
  "Rabka-Zdrój",
  "Raciąż",
  "Racibórz",
  "Radków",
  "Radlin",
  "Radłów",
  "Radom",
  "Radomsko",
  "Radomyśl Wielki",
  "Radymno",
  "Radziejów",
  "Radzionków",
  "Radzymin",
  "Radzyń Chełmiński",
  "Radzyń Podlaski",
  "Rajgród",
  "Rakoniewice",
  "Raszków",
  "Rawa Mazowiecka",
  "Rawicz",
  "Recz",
  "Reda",
  "Rejowiec Fabryczny",
  "Resko",
  "Reszel",
  "Rogoźno",
  "Ropczyce",
  "Różan",
  "Ruciane-Nida",
  "Ruda Śląska",
  "Rudnik nad Sanem",
  "Rumia",
  "Rybnik",
  "Rychwał",
  "Rydułtowy",
  "Rydzyna",
  "Ryglice",
  "Ryki",
  "Rymanów",
  "Ryn",
  "Rypin",
  "Rzepin",
  "Rzeszów",
  "Rzgów",
  "Sandomierz",
  "Sanok",
  "Sejny",
  "Serock",
  "Sędziszów",
  "Sędziszów Małopolski",
  "Sępopol",
  "Sępólno Krajeńskie",
  "Sianów",
  "Siechnice",
  "Siedlce",
  "Siemianowice Śląskie",
  "Siemiatycze",
  "Sieniawa",
  "Sieradz",
  "Sieraków",
  "Sierpc",
  "Siewierz",
  "Skalbmierz",
  "Skała",
  "Skarszewy",
  "Skaryszew",
  "Skarżysko-Kamienna",
  "Skawina",
  "Skępe",
  "Skierniewice",
  "Skoczów",
  "Skoki",
  "Skórcz",
  "Skwierzyna",
  "Sława",
  "Sławków",
  "Sławno",
  "Słomniki",
  "Słubice",
  "Słupca",
  "Słupsk",
  "Sobótka",
  "Sochaczew",
  "Sokołów Małopolski",
  "Sokołów Podlaski",
  "Sokółka",
  "Solec Kujawski",
  "Sompolno",
  "Sopot",
  "Sosnowiec",
  "Sośnicowice",
  "Stalowa Wola",
  "Starachowice",
  "Stargard Szczeciński",
  "Starogard Gdański",
  "Stary Sącz",
  "Staszów",
  "Stawiski",
  "Stawiszyn",
  "Stąporków",
  "Stęszew",
  "Stoczek Łukowski",
  "Stronie Śląskie",
  "Strumień",
  "Stryków",
  "Strzegom",
  "Strzelce Krajeńskie",
  "Strzelce Opolskie",
  "Strzelin",
  "Strzelno",
  "Strzyżów",
  "Sucha Beskidzka",
  "Suchań",
  "Suchedniów",
  "Suchowola",
  "Sulechów",
  "Sulejów",
  "Sulejówek",
  "Sulęcin",
  "Sulmierzyce",
  "Sułkowice",
  "Supraśl",
  "Suraż",
  "Susz",
  "Suwałki",
  "Swarzędz",
  "Syców",
  "Szadek",
  "Szamocin",
  "Szamotuły",
  "Szczawnica",
  "Szczawno-Zdrój",
  "Szczebrzeszyn",
  "Szczecin",
  "Szczecinek",
  "Szczekociny",
  "Szczucin",
  "Szczuczyn",
  "Szczyrk",
  "Szczytna",
  "Szczytno",
  "Szepietowo",
  "Szklarska Poręba",
  "Szlichtyngowa",
  "Szprotawa",
  "Sztum",
  "Szubin",
  "Szydłowiec",
  "Ścinawa",
  "Ślesin",
  "Śmigiel",
  "Śrem",
  "Środa Śląska",
  "Środa Wielkopolska",
  "Świątniki Górne",
  "Świdnica",
  "Świdnik",
  "Świdwin",
  "Świebodzice",
  "Świebodzin",
  "Świecie",
  "Świeradów-Zdrój",
  "Świerzawa",
  "Świętochłowice",
  "Świnoujście",
  "Tarczyn",
  "Tarnobrzeg",
  "Tarnogród",
  "Tarnowskie Góry",
  "Tarnów",
  "Tczew",
  "Terespol",
  "Tłuszcz",
  "Tolkmicko",
  "Tomaszów Lubelski",
  "Tomaszów Mazowiecki",
  "Toruń",
  "Torzym",
  "Toszek",
  "Trzcianka",
  "Trzciel",
  "Trzcińsko-Zdrój",
  "Trzebiatów",
  "Trzebinia",
  "Trzebnica",
  "Trzemeszno",
  "Tuchola",
  "Tuchów",
  "Tuczno",
  "Tuliszków",
  "Turek",
  "Tuszyn",
  "Twardogóra",
  "Tychowo",
  "Tychy",
  "Tyczyn",
  "Tykocin",
  "Tyszowce",
  "Ujazd",
  "Ujście",
  "Ulanów",
  "Uniejów",
  "Ustka",
  "Ustroń",
  "Ustrzyki Dolne",
  "Wadowice",
  "Wałbrzych",
  "Wałcz",
  "Warka",
  "Warszawa",
  "Warta",
  "Wasilków",
  "Wąbrzeźno",
  "Wąchock",
  "Wągrowiec",
  "Wąsosz",
  "Wejherowo",
  "Węgliniec",
  "Węgorzewo",
  "Węgorzyno",
  "Węgrów",
  "Wiązów",
  "Wieleń",
  "Wielichowo",
  "Wieliczka",
  "Wieluń",
  "Wieruszów",
  "Więcbork",
  "Wilamowice",
  "Wisła",
  "Witkowo",
  "Witnica",
  "Wleń",
  "Władysławowo",
  "Włocławek",
  "Włodawa",
  "Włoszczowa",
  "Wodzisław Śląski",
  "Wojcieszów",
  "Wojkowice",
  "Wojnicz",
  "Wolbórz",
  "Wolbrom",
  "Wolin",
  "Wolsztyn",
  "Wołczyn",
  "Wołomin",
  "Wołów",
  "Woźniki",
  "Wrocław",
  "Wronki",
  "Września",
  "Wschowa",
  "Wyrzysk",
  "Wysoka",
  "Wysokie Mazowieckie",
  "Wyszków",
  "Wyszogród",
  "Wyśmierzyce",
  "Zabłudów",
  "Zabrze",
  "Zagórów",
  "Zagórz",
  "Zakliczyn",
  "Zakopane",
  "Zakroczym",
  "Zalewo",
  "Zambrów",
  "Zamość",
  "Zator",
  "Zawadzkie",
  "Zawichost",
  "Zawidów",
  "Zawiercie",
  "Ząbki",
  "Ząbkowice Śląskie",
  "Zbąszynek",
  "Zbąszyń",
  "Zduny",
  "Zduńska Wola",
  "Zdzieszowice",
  "Zelów",
  "Zgierz",
  "Zgorzelec",
  "Zielona Góra",
  "Zielonka",
  "Ziębice",
  "Złocieniec",
  "Złoczew",
  "Złotoryja",
  "Złotów",
  "Złoty Stok",
  "Zwierzyniec",
  "Zwoleń",
  "Żabno",
  "Żagań",
  "Żarki",
  "Żarów",
  "Żary",
  "Żelechów",
  "Żerków",
  "Żmigród",
  "Żnin",
  "Żory",
  "Żukowo",
  "Żuromin",
  "Żychlin",
  "Żyrardów",
  "Żywiec"
];

},{}],552:[function(require,module,exports){
module["exports"] = [
  "Afganistan",
  "Albania",
  "Algieria",
  "Andora",
  "Angola",
  "Antigua i Barbuda",
  "Arabia Saudyjska",
  "Argentyna",
  "Armenia",
  "Australia",
  "Austria",
  "Azerbejdżan",
  "Bahamy",
  "Bahrajn",
  "Bangladesz",
  "Barbados",
  "Belgia",
  "Belize",
  "Benin",
  "Bhutan",
  "Białoruś",
  "Birma",
  "Boliwia",
  "Sucre",
  "Bośnia i Hercegowina",
  "Botswana",
  "Brazylia",
  "Brunei",
  "Bułgaria",
  "Burkina Faso",
  "Burundi",
  "Chile",
  "Chiny",
  "Chorwacja",
  "Cypr",
  "Czad",
  "Czarnogóra",
  "Czechy",
  "Dania",
  "Demokratyczna Republika Konga",
  "Dominika",
  "Dominikana",
  "Dżibuti",
  "Egipt",
  "Ekwador",
  "Erytrea",
  "Estonia",
  "Etiopia",
  "Fidżi",
  "Filipiny",
  "Finlandia",
  "Francja",
  "Gabon",
  "Gambia",
  "Ghana",
  "Grecja",
  "Grenada",
  "Gruzja",
  "Gujana",
  "Gwatemala",
  "Gwinea",
  "Gwinea Bissau",
  "Gwinea Równikowa",
  "Haiti",
  "Hiszpania",
  "Holandia",
  "Haga",
  "Honduras",
  "Indie",
  "Indonezja",
  "Irak",
  "Iran",
  "Irlandia",
  "Islandia",
  "Izrael",
  "Jamajka",
  "Japonia",
  "Jemen",
  "Jordania",
  "Kambodża",
  "Kamerun",
  "Kanada",
  "Katar",
  "Kazachstan",
  "Kenia",
  "Kirgistan",
  "Kiribati",
  "Kolumbia",
  "Komory",
  "Kongo",
  "Korea Południowa",
  "Korea Północna",
  "Kostaryka",
  "Kuba",
  "Kuwejt",
  "Laos",
  "Lesotho",
  "Liban",
  "Liberia",
  "Libia",
  "Liechtenstein",
  "Litwa",
  "Luksemburg",
  "Łotwa",
  "Macedonia",
  "Madagaskar",
  "Malawi",
  "Malediwy",
  "Malezja",
  "Mali",
  "Malta",
  "Maroko",
  "Mauretania",
  "Mauritius",
  "Meksyk",
  "Mikronezja",
  "Mołdawia",
  "Monako",
  "Mongolia",
  "Mozambik",
  "Namibia",
  "Nauru",
  "Nepal",
  "Niemcy",
  "Niger",
  "Nigeria",
  "Nikaragua",
  "Norwegia",
  "Nowa Zelandia",
  "Oman",
  "Pakistan",
  "Palau",
  "Panama",
  "Papua-Nowa Gwinea",
  "Paragwaj",
  "Peru",
  "Polska",
  "322 575",
  "Portugalia",
  "Republika Południowej Afryki",
  "Republika Środkowoafrykańska",
  "Republika Zielonego Przylądka",
  "Rosja",
  "Rumunia",
  "Rwanda",
  "Saint Kitts i Nevis",
  "Saint Lucia",
  "Saint Vincent i Grenadyny",
  "Salwador",
  "Samoa",
  "San Marino",
  "Senegal",
  "Serbia",
  "Seszele",
  "Sierra Leone",
  "Singapur",
  "Słowacja",
  "Słowenia",
  "Somalia",
  "Sri Lanka",
  "Stany Zjednoczone",
  "Suazi",
  "Sudan",
  "Sudan Południowy",
  "Surinam",
  "Syria",
  "Szwajcaria",
  "Szwecja",
  "Tadżykistan",
  "Tajlandia",
  "Tanzania",
  "Timor Wschodni",
  "Togo",
  "Tonga",
  "Trynidad i Tobago",
  "Tunezja",
  "Turcja",
  "Turkmenistan",
  "Tuvalu",
  "Funafuti",
  "Uganda",
  "Ukraina",
  "Urugwaj",
  2008,
  "Uzbekistan",
  "Vanuatu",
  "Watykan",
  "Wenezuela",
  "Węgry",
  "Wielka Brytania",
  "Wietnam",
  "Włochy",
  "Wybrzeże Kości Słoniowej",
  "Wyspy Marshalla",
  "Wyspy Salomona",
  "Wyspy Świętego Tomasza i Książęca",
  "Zambia",
  "Zimbabwe",
  "Zjednoczone Emiraty Arabskie"
];

},{}],553:[function(require,module,exports){
module["exports"] = [
  "Polska"
];

},{}],554:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.country = require("./country");
address.building_number = require("./building_number");
address.street_prefix = require("./street_prefix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":549,"./city":550,"./city_name":551,"./country":552,"./default_country":553,"./postcode":555,"./secondary_address":556,"./state":557,"./state_abbr":558,"./street_address":559,"./street_name":560,"./street_prefix":561}],555:[function(require,module,exports){
module["exports"] = [
  "##-###"
];

},{}],556:[function(require,module,exports){
module.exports=require(102)
},{"/Users/a/dev/faker.js/lib/locales/en/address/secondary_address.js":102}],557:[function(require,module,exports){
module["exports"] = [
  "Dolnośląskie",
  "Kujawsko-pomorskie",
  "Lubelskie",
  "Lubuskie",
  "Łódzkie",
  "Małopolskie",
  "Mazowieckie",
  "Opolskie",
  "Podkarpackie",
  "Podlaskie",
  "Pomorskie",
  "Śląskie",
  "Świętokrzyskie",
  "Warmińsko-mazurskie",
  "Wielkopolskie",
  "Zachodniopomorskie"
];

},{}],558:[function(require,module,exports){
module["exports"] = [
  "DŚ",
  "KP",
  "LB",
  "LS",
  "ŁD",
  "MP",
  "MZ",
  "OP",
  "PK",
  "PL",
  "PM",
  "ŚL",
  "ŚK",
  "WM",
  "WP",
  "ZP"
];

},{}],559:[function(require,module,exports){
module.exports=require(25)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_address.js":25}],560:[function(require,module,exports){
module["exports"] = [
  "#{street_prefix} #{Name.last_name}"
];

},{}],561:[function(require,module,exports){
module["exports"] = [
  "ul.",
  "al."
];

},{}],562:[function(require,module,exports){
module["exports"] = [
  "50-###-##-##",
  "51-###-##-##",
  "53-###-##-##",
  "57-###-##-##",
  "60-###-##-##",
  "66-###-##-##",
  "69-###-##-##",
  "72-###-##-##",
  "73-###-##-##",
  "78-###-##-##",
  "79-###-##-##",
  "88-###-##-##"
];

},{}],563:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":562,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],564:[function(require,module,exports){
module.exports=require(123)
},{"/Users/a/dev/faker.js/lib/locales/en/company/adjective.js":123}],565:[function(require,module,exports){
module.exports=require(124)
},{"/Users/a/dev/faker.js/lib/locales/en/company/bs_adjective.js":124}],566:[function(require,module,exports){
module.exports=require(125)
},{"/Users/a/dev/faker.js/lib/locales/en/company/bs_noun.js":125}],567:[function(require,module,exports){
module.exports=require(126)
},{"/Users/a/dev/faker.js/lib/locales/en/company/bs_verb.js":126}],568:[function(require,module,exports){
module.exports=require(127)
},{"/Users/a/dev/faker.js/lib/locales/en/company/descriptor.js":127}],569:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjetive = require("./adjetive");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_adjective = require("./bs_adjective");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./adjetive":564,"./bs_adjective":565,"./bs_noun":566,"./bs_verb":567,"./descriptor":568,"./name":570,"./noun":571,"./suffix":572}],570:[function(require,module,exports){
module.exports=require(129)
},{"/Users/a/dev/faker.js/lib/locales/en/company/name.js":129}],571:[function(require,module,exports){
module.exports=require(130)
},{"/Users/a/dev/faker.js/lib/locales/en/company/noun.js":130}],572:[function(require,module,exports){
module.exports=require(131)
},{"/Users/a/dev/faker.js/lib/locales/en/company/suffix.js":131}],573:[function(require,module,exports){
var pl = {};
module['exports'] = pl;
pl.title = "Polish";
pl.name = require("./name");
pl.address = require("./address");
pl.company = require("./company");
pl.internet = require("./internet");
pl.lorem = require("./lorem");
pl.phone_number = require("./phone_number");
pl.cell_phone = require("./cell_phone");

},{"./address":554,"./cell_phone":563,"./company":569,"./internet":576,"./lorem":577,"./name":581,"./phone_number":587}],574:[function(require,module,exports){
module["exports"] = [
  "com",
  "pl",
  "com.pl",
  "net",
  "org"
];

},{}],575:[function(require,module,exports){
module.exports=require(36)
},{"/Users/a/dev/faker.js/lib/locales/de/internet/free_email.js":36}],576:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":574,"./free_email":575,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],577:[function(require,module,exports){
module.exports=require(158)
},{"./supplemental":578,"./words":579,"/Users/a/dev/faker.js/lib/locales/en/lorem/index.js":158}],578:[function(require,module,exports){
module.exports=require(159)
},{"/Users/a/dev/faker.js/lib/locales/en/lorem/supplemental.js":159}],579:[function(require,module,exports){
module.exports=require(39)
},{"/Users/a/dev/faker.js/lib/locales/de/lorem/words.js":39}],580:[function(require,module,exports){
module["exports"] = [
  "Aaron",
  "Abraham",
  "Adam",
  "Adrian",
  "Atanazy",
  "Agaton",
  "Alan",
  "Albert",
  "Aleksander",
  "Aleksy",
  "Alfred",
  "Alwar",
  "Ambroży",
  "Anatol",
  "Andrzej",
  "Antoni",
  "Apollinary",
  "Apollo",
  "Arkady",
  "Arkadiusz",
  "Archibald",
  "Arystarch",
  "Arnold",
  "Arseniusz",
  "Artur",
  "August",
  "Baldwin",
  "Bazyli",
  "Benedykt",
  "Beniamin",
  "Bernard",
  "Bertrand",
  "Bertram",
  "Borys",
  "Brajan",
  "Bruno",
  "Cezary",
  "Cecyliusz",
  "Karol",
  "Krystian",
  "Krzysztof",
  "Klarencjusz",
  "Klaudiusz",
  "Klemens",
  "Konrad",
  "Konstanty",
  "Konstantyn",
  "Kornel",
  "Korneliusz",
  "Korneli",
  "Cyryl",
  "Cyrus",
  "Damian",
  "Daniel",
  "Dariusz",
  "Dawid",
  "Dionizy",
  "Demetriusz",
  "Dominik",
  "Donald",
  "Dorian",
  "Edgar",
  "Edmund",
  "Edward",
  "Edwin",
  "Efrem",
  "Efraim",
  "Eliasz",
  "Eleazar",
  "Emil",
  "Emanuel",
  "Erast",
  "Ernest",
  "Eugeniusz",
  "Eustracjusz",
  "Fabian",
  "Feliks",
  "Florian",
  "Franciszek",
  "Fryderyk",
  "Gabriel",
  "Gedeon",
  "Galfryd",
  "Jerzy",
  "Gerald",
  "Gerazym",
  "Gilbert",
  "Gonsalwy",
  "Grzegorz",
  "Gwido",
  "Harald",
  "Henryk",
  "Herbert",
  "Herman",
  "Hilary",
  "Horacy",
  "Hubert",
  "Hugo",
  "Ignacy",
  "Igor",
  "Hilarion",
  "Innocenty",
  "Hipolit",
  "Ireneusz",
  "Erwin",
  "Izaak",
  "Izajasz",
  "Izydor",
  "Jakub",
  "Jeremi",
  "Jeremiasz",
  "Hieronim",
  "Gerald",
  "Joachim",
  "Jan",
  "Janusz",
  "Jonatan",
  "Józef",
  "Jozue",
  "Julian",
  "Juliusz",
  "Justyn",
  "Kalistrat",
  "Kazimierz",
  "Wawrzyniec",
  "Laurenty",
  "Laurencjusz",
  "Łazarz",
  "Leon",
  "Leonard",
  "Leonid",
  "Leon",
  "Ludwik",
  "Łukasz",
  "Lucjan",
  "Magnus",
  "Makary",
  "Marceli",
  "Marek",
  "Marcin",
  "Mateusz",
  "Maurycy",
  "Maksym",
  "Maksymilian",
  "Michał",
  "Miron",
  "Modest",
  "Mojżesz",
  "Natan",
  "Natanael",
  "Nazariusz",
  "Nazary",
  "Nestor",
  "Mikołaj",
  "Nikodem",
  "Olaf",
  "Oleg",
  "Oliwier",
  "Onufry",
  "Orestes",
  "Oskar",
  "Ansgary",
  "Osmund",
  "Pankracy",
  "Pantaleon",
  "Patryk",
  "Patrycjusz",
  "Patrycy",
  "Paweł",
  "Piotr",
  "Filemon",
  "Filip",
  "Platon",
  "Polikarp",
  "Porfiry",
  "Porfiriusz",
  "Prokles",
  "Prokul",
  "Prokop",
  "Kwintyn",
  "Randolf",
  "Rafał",
  "Rajmund",
  "Reginald",
  "Rajnold",
  "Ryszard",
  "Robert",
  "Roderyk",
  "Roger",
  "Roland",
  "Roman",
  "Romeo",
  "Reginald",
  "Rudolf",
  "Samson",
  "Samuel",
  "Salwator",
  "Sebastian",
  "Serafin",
  "Sergiusz",
  "Seweryn",
  "Zygmunt",
  "Sylwester",
  "Szymon",
  "Salomon",
  "Spirydion",
  "Stanisław",
  "Szczepan",
  "Stefan",
  "Terencjusz",
  "Teodor",
  "Tomasz",
  "Tymoteusz",
  "Tobiasz",
  "Walenty",
  "Walentyn",
  "Walerian",
  "Walery",
  "Wiktor",
  "Wincenty",
  "Witalis",
  "Włodzimierz",
  "Władysław",
  "Błażej",
  "Walter",
  "Walgierz",
  "Wacław",
  "Wilfryd",
  "Wilhelm",
  "Ksawery",
  "Ksenofont",
  "Jerzy",
  "Zachariasz",
  "Zachary",
  "Ada",
  "Adelajda",
  "Agata",
  "Agnieszka",
  "Agrypina",
  "Aida",
  "Aleksandra",
  "Alicja",
  "Alina",
  "Amanda",
  "Anastazja",
  "Angela",
  "Andżelika",
  "Angelina",
  "Anna",
  "Hanna",
  "—",
  "Antonina",
  "Ariadna",
  "Aurora",
  "Barbara",
  "Beatrycze",
  "Berta",
  "Brygida",
  "Kamila",
  "Karolina",
  "Karolina",
  "Kornelia",
  "Katarzyna",
  "Cecylia",
  "Karolina",
  "Chloe",
  "Krystyna",
  "Klara",
  "Klaudia",
  "Klementyna",
  "Konstancja",
  "Koralia",
  "Daria",
  "Diana",
  "Dina",
  "Dorota",
  "Edyta",
  "Eleonora",
  "Eliza",
  "Elżbieta",
  "Izabela",
  "Elwira",
  "Emilia",
  "Estera",
  "Eudoksja",
  "Eudokia",
  "Eugenia",
  "Ewa",
  "Ewelina",
  "Ferdynanda",
  "Florencja",
  "Franciszka",
  "Gabriela",
  "Gertruda",
  "Gloria",
  "Gracja",
  "Jadwiga",
  "Helena",
  "Henryka",
  "Nadzieja",
  "Ida",
  "Ilona",
  "Helena",
  "Irena",
  "Irma",
  "Izabela",
  "Izolda",
  "Jakubina",
  "Joanna",
  "Janina",
  "Żaneta",
  "Joanna",
  "Ginewra",
  "Józefina",
  "Judyta",
  "Julia",
  "Julia",
  "Julita",
  "Justyna",
  "Kira",
  "Cyra",
  "Kleopatra",
  "Larysa",
  "Laura",
  "Laurencja",
  "Laurentyna",
  "Lea",
  "Leila",
  "Eleonora",
  "Liliana",
  "Lilianna",
  "Lilia",
  "Lilla",
  "Liza",
  "Eliza",
  "Laura",
  "Ludwika",
  "Luiza",
  "Łucja",
  "Lucja",
  "Lidia",
  "Amabela",
  "Magdalena",
  "Malwina",
  "Małgorzata",
  "Greta",
  "Marianna",
  "Maryna",
  "Marta",
  "Martyna",
  "Maria",
  "Matylda",
  "Maja",
  "Maja",
  "Melania",
  "Michalina",
  "Monika",
  "Nadzieja",
  "Noemi",
  "Natalia",
  "Nikola",
  "Nina",
  "Olga",
  "Olimpia",
  "Oliwia",
  "Ofelia",
  "Patrycja",
  "Paula",
  "Pelagia",
  "Penelopa",
  "Filipa",
  "Paulina",
  "Rachela",
  "Rebeka",
  "Regina",
  "Renata",
  "Rozalia",
  "Róża",
  "Roksana",
  "Rufina",
  "Ruta",
  "Sabina",
  "Sara",
  "Serafina",
  "Sybilla",
  "Sylwia",
  "Zofia",
  "Stella",
  "Stefania",
  "Zuzanna",
  "Tamara",
  "Tacjana",
  "Tekla",
  "Teodora",
  "Teresa",
  "Walentyna",
  "Waleria",
  "Wanesa",
  "Wiara",
  "Weronika",
  "Wiktoria",
  "Wirginia",
  "Bibiana",
  "Bibianna",
  "Wanda",
  "Wilhelmina",
  "Ksawera",
  "Ksenia",
  "Zoe"
];

},{}],581:[function(require,module,exports){
arguments[4][343][0].apply(exports,arguments)
},{"./first_name":580,"./last_name":582,"./name":583,"./prefix":584,"./title":585,"/Users/a/dev/faker.js/lib/locales/fr/name/index.js":343}],582:[function(require,module,exports){
module["exports"] = [
  "Adamczak",
  "Adamczyk",
  "Adamek",
  "Adamiak",
  "Adamiec",
  "Adamowicz",
  "Adamski",
  "Adamus",
  "Aleksandrowicz",
  "Andrzejczak",
  "Andrzejewski",
  "Antczak",
  "Augustyn",
  "Augustyniak",
  "Bagiński",
  "Balcerzak",
  "Banach",
  "Banasiak",
  "Banasik",
  "Banaś",
  "Baran",
  "Baranowski",
  "Barański",
  "Bartczak",
  "Bartkowiak",
  "Bartnik",
  "Bartosik",
  "Bednarczyk",
  "Bednarek",
  "Bednarski",
  "Bednarz",
  "Białas",
  "Białek",
  "Białkowski",
  "Bielak",
  "Bielawski",
  "Bielecki",
  "Bielski",
  "Bieniek",
  "Biernacki",
  "Biernat",
  "Bieńkowski",
  "Bilski",
  "Bober",
  "Bochenek",
  "Bogucki",
  "Bogusz",
  "Borek",
  "Borkowski",
  "Borowiec",
  "Borowski",
  "Bożek",
  "Broda",
  "Brzeziński",
  "Brzozowski",
  "Buczek",
  "Buczkowski",
  "Buczyński",
  "Budziński",
  "Budzyński",
  "Bujak",
  "Bukowski",
  "Burzyński",
  "Bąk",
  "Bąkowski",
  "Błaszczak",
  "Błaszczyk",
  "Cebula",
  "Chmiel",
  "Chmielewski",
  "Chmura",
  "Chojnacki",
  "Chojnowski",
  "Cholewa",
  "Chrzanowski",
  "Chudzik",
  "Cichocki",
  "Cichoń",
  "Cichy",
  "Ciesielski",
  "Cieśla",
  "Cieślak",
  "Cieślik",
  "Ciszewski",
  "Cybulski",
  "Cygan",
  "Czaja",
  "Czajka",
  "Czajkowski",
  "Czapla",
  "Czarnecki",
  "Czech",
  "Czechowski",
  "Czekaj",
  "Czerniak",
  "Czerwiński",
  "Czyż",
  "Czyżewski",
  "Dec",
  "Dobosz",
  "Dobrowolski",
  "Dobrzyński",
  "Domagała",
  "Domański",
  "Dominiak",
  "Drabik",
  "Drozd",
  "Drozdowski",
  "Drzewiecki",
  "Dróżdż",
  "Dubiel",
  "Duda",
  "Dudek",
  "Dudziak",
  "Dudzik",
  "Dudziński",
  "Duszyński",
  "Dziedzic",
  "Dziuba",
  "Dąbek",
  "Dąbkowski",
  "Dąbrowski",
  "Dębowski",
  "Dębski",
  "Długosz",
  "Falkowski",
  "Fijałkowski",
  "Filipek",
  "Filipiak",
  "Filipowicz",
  "Flak",
  "Flis",
  "Florczak",
  "Florek",
  "Frankowski",
  "Frąckowiak",
  "Frączek",
  "Frątczak",
  "Furman",
  "Gadomski",
  "Gajda",
  "Gajewski",
  "Gaweł",
  "Gawlik",
  "Gawron",
  "Gawroński",
  "Gałka",
  "Gałązka",
  "Gil",
  "Godlewski",
  "Golec",
  "Gołąb",
  "Gołębiewski",
  "Gołębiowski",
  "Grabowski",
  "Graczyk",
  "Grochowski",
  "Grudzień",
  "Gruszczyński",
  "Gruszka",
  "Grzegorczyk",
  "Grzelak",
  "Grzesiak",
  "Grzesik",
  "Grześkowiak",
  "Grzyb",
  "Grzybowski",
  "Grzywacz",
  "Gutowski",
  "Guzik",
  "Gwóźdź",
  "Góra",
  "Góral",
  "Górecki",
  "Górka",
  "Górniak",
  "Górny",
  "Górski",
  "Gąsior",
  "Gąsiorowski",
  "Głogowski",
  "Głowacki",
  "Głąb",
  "Hajduk",
  "Herman",
  "Iwański",
  "Izdebski",
  "Jabłoński",
  "Jackowski",
  "Jagielski",
  "Jagiełło",
  "Jagodziński",
  "Jakubiak",
  "Jakubowski",
  "Janas",
  "Janiak",
  "Janicki",
  "Janik",
  "Janiszewski",
  "Jankowiak",
  "Jankowski",
  "Janowski",
  "Janus",
  "Janusz",
  "Januszewski",
  "Jaros",
  "Jarosz",
  "Jarząbek",
  "Jasiński",
  "Jastrzębski",
  "Jaworski",
  "Jaśkiewicz",
  "Jezierski",
  "Jurek",
  "Jurkiewicz",
  "Jurkowski",
  "Juszczak",
  "Jóźwiak",
  "Jóźwik",
  "Jędrzejczak",
  "Jędrzejczyk",
  "Jędrzejewski",
  "Kacprzak",
  "Kaczmarczyk",
  "Kaczmarek",
  "Kaczmarski",
  "Kaczor",
  "Kaczorowski",
  "Kaczyński",
  "Kaleta",
  "Kalinowski",
  "Kalisz",
  "Kamiński",
  "Kania",
  "Kaniewski",
  "Kapusta",
  "Karaś",
  "Karczewski",
  "Karpiński",
  "Karwowski",
  "Kasperek",
  "Kasprzak",
  "Kasprzyk",
  "Kaszuba",
  "Kawa",
  "Kawecki",
  "Kałuża",
  "Kaźmierczak",
  "Kiełbasa",
  "Kisiel",
  "Kita",
  "Klimczak",
  "Klimek",
  "Kmiecik",
  "Kmieć",
  "Knapik",
  "Kobus",
  "Kogut",
  "Kolasa",
  "Komorowski",
  "Konieczna",
  "Konieczny",
  "Konopka",
  "Kopczyński",
  "Koper",
  "Kopeć",
  "Korzeniowski",
  "Kos",
  "Kosiński",
  "Kosowski",
  "Kostecki",
  "Kostrzewa",
  "Kot",
  "Kotowski",
  "Kowal",
  "Kowalczuk",
  "Kowalczyk",
  "Kowalewski",
  "Kowalik",
  "Kowalski",
  "Koza",
  "Kozak",
  "Kozieł",
  "Kozioł",
  "Kozłowski",
  "Kołakowski",
  "Kołodziej",
  "Kołodziejczyk",
  "Kołodziejski",
  "Krajewski",
  "Krakowiak",
  "Krawczyk",
  "Krawiec",
  "Kruk",
  "Krukowski",
  "Krupa",
  "Krupiński",
  "Kruszewski",
  "Krysiak",
  "Krzemiński",
  "Krzyżanowski",
  "Król",
  "Królikowski",
  "Książek",
  "Kubacki",
  "Kubiak",
  "Kubica",
  "Kubicki",
  "Kubik",
  "Kuc",
  "Kucharczyk",
  "Kucharski",
  "Kuchta",
  "Kuciński",
  "Kuczyński",
  "Kujawa",
  "Kujawski",
  "Kula",
  "Kulesza",
  "Kulig",
  "Kulik",
  "Kuliński",
  "Kurek",
  "Kurowski",
  "Kuś",
  "Kwaśniewski",
  "Kwiatkowski",
  "Kwiecień",
  "Kwieciński",
  "Kędzierski",
  "Kędziora",
  "Kępa",
  "Kłos",
  "Kłosowski",
  "Lach",
  "Laskowski",
  "Lasota",
  "Lech",
  "Lenart",
  "Lesiak",
  "Leszczyński",
  "Lewandowski",
  "Lewicki",
  "Leśniak",
  "Leśniewski",
  "Lipiński",
  "Lipka",
  "Lipski",
  "Lis",
  "Lisiecki",
  "Lisowski",
  "Maciejewski",
  "Maciąg",
  "Mackiewicz",
  "Madej",
  "Maj",
  "Majcher",
  "Majchrzak",
  "Majewski",
  "Majka",
  "Makowski",
  "Malec",
  "Malicki",
  "Malinowski",
  "Maliszewski",
  "Marchewka",
  "Marciniak",
  "Marcinkowski",
  "Marczak",
  "Marek",
  "Markiewicz",
  "Markowski",
  "Marszałek",
  "Marzec",
  "Masłowski",
  "Matusiak",
  "Matuszak",
  "Matuszewski",
  "Matysiak",
  "Mazur",
  "Mazurek",
  "Mazurkiewicz",
  "Maćkowiak",
  "Małecki",
  "Małek",
  "Maślanka",
  "Michalak",
  "Michalczyk",
  "Michalik",
  "Michalski",
  "Michałek",
  "Michałowski",
  "Mielczarek",
  "Mierzejewski",
  "Mika",
  "Mikołajczak",
  "Mikołajczyk",
  "Mikulski",
  "Milczarek",
  "Milewski",
  "Miller",
  "Misiak",
  "Misztal",
  "Miśkiewicz",
  "Modzelewski",
  "Molenda",
  "Morawski",
  "Motyka",
  "Mroczek",
  "Mroczkowski",
  "Mrozek",
  "Mróz",
  "Mucha",
  "Murawski",
  "Musiał",
  "Muszyński",
  "Młynarczyk",
  "Napierała",
  "Nawrocki",
  "Nawrot",
  "Niedziela",
  "Niedzielski",
  "Niedźwiecki",
  "Niemczyk",
  "Niemiec",
  "Niewiadomski",
  "Noga",
  "Nowacki",
  "Nowaczyk",
  "Nowak",
  "Nowakowski",
  "Nowicki",
  "Nowiński",
  "Olczak",
  "Olejniczak",
  "Olejnik",
  "Olszewski",
  "Orzechowski",
  "Orłowski",
  "Osiński",
  "Ossowski",
  "Ostrowski",
  "Owczarek",
  "Paczkowski",
  "Pająk",
  "Pakuła",
  "Paluch",
  "Panek",
  "Partyka",
  "Pasternak",
  "Paszkowski",
  "Pawelec",
  "Pawlak",
  "Pawlicki",
  "Pawlik",
  "Pawlikowski",
  "Pawłowski",
  "Pałka",
  "Piasecki",
  "Piechota",
  "Piekarski",
  "Pietras",
  "Pietruszka",
  "Pietrzak",
  "Pietrzyk",
  "Pilarski",
  "Pilch",
  "Piotrowicz",
  "Piotrowski",
  "Piwowarczyk",
  "Piórkowski",
  "Piątek",
  "Piątkowski",
  "Piłat",
  "Pluta",
  "Podgórski",
  "Polak",
  "Popławski",
  "Porębski",
  "Prokop",
  "Prus",
  "Przybylski",
  "Przybysz",
  "Przybył",
  "Przybyła",
  "Ptak",
  "Puchalski",
  "Pytel",
  "Płonka",
  "Raczyński",
  "Radecki",
  "Radomski",
  "Rak",
  "Rakowski",
  "Ratajczak",
  "Robak",
  "Rogala",
  "Rogalski",
  "Rogowski",
  "Rojek",
  "Romanowski",
  "Rosa",
  "Rosiak",
  "Rosiński",
  "Ruciński",
  "Rudnicki",
  "Rudziński",
  "Rudzki",
  "Rusin",
  "Rutkowski",
  "Rybak",
  "Rybarczyk",
  "Rybicki",
  "Rzepka",
  "Różański",
  "Różycki",
  "Sadowski",
  "Sawicki",
  "Serafin",
  "Siedlecki",
  "Sienkiewicz",
  "Sieradzki",
  "Sikora",
  "Sikorski",
  "Sitek",
  "Siwek",
  "Skalski",
  "Skiba",
  "Skibiński",
  "Skoczylas",
  "Skowron",
  "Skowronek",
  "Skowroński",
  "Skrzypczak",
  "Skrzypek",
  "Skóra",
  "Smoliński",
  "Sobczak",
  "Sobczyk",
  "Sobieraj",
  "Sobolewski",
  "Socha",
  "Sochacki",
  "Sokołowski",
  "Sokół",
  "Sosnowski",
  "Sowa",
  "Sowiński",
  "Sołtys",
  "Sołtysiak",
  "Sroka",
  "Stachowiak",
  "Stachowicz",
  "Stachura",
  "Stachurski",
  "Stanek",
  "Staniszewski",
  "Stanisławski",
  "Stankiewicz",
  "Stasiak",
  "Staszewski",
  "Stawicki",
  "Stec",
  "Stefaniak",
  "Stefański",
  "Stelmach",
  "Stolarczyk",
  "Stolarski",
  "Strzelczyk",
  "Strzelecki",
  "Stępień",
  "Stępniak",
  "Surma",
  "Suski",
  "Szafrański",
  "Szatkowski",
  "Szczepaniak",
  "Szczepanik",
  "Szczepański",
  "Szczerba",
  "Szcześniak",
  "Szczygieł",
  "Szczęsna",
  "Szczęsny",
  "Szeląg",
  "Szewczyk",
  "Szostak",
  "Szulc",
  "Szwarc",
  "Szwed",
  "Szydłowski",
  "Szymański",
  "Szymczak",
  "Szymczyk",
  "Szymkowiak",
  "Szyszka",
  "Sławiński",
  "Słowik",
  "Słowiński",
  "Tarnowski",
  "Tkaczyk",
  "Tokarski",
  "Tomala",
  "Tomaszewski",
  "Tomczak",
  "Tomczyk",
  "Tracz",
  "Trojanowski",
  "Trzciński",
  "Trzeciak",
  "Turek",
  "Twardowski",
  "Urban",
  "Urbanek",
  "Urbaniak",
  "Urbanowicz",
  "Urbańczyk",
  "Urbański",
  "Walczak",
  "Walkowiak",
  "Warchoł",
  "Wasiak",
  "Wasilewski",
  "Wawrzyniak",
  "Wesołowski",
  "Wieczorek",
  "Wierzbicki",
  "Wilczek",
  "Wilczyński",
  "Wilk",
  "Winiarski",
  "Witczak",
  "Witek",
  "Witkowski",
  "Wiącek",
  "Więcek",
  "Więckowski",
  "Wiśniewski",
  "Wnuk",
  "Wojciechowski",
  "Wojtas",
  "Wojtasik",
  "Wojtczak",
  "Wojtkowiak",
  "Wolak",
  "Woliński",
  "Wolny",
  "Wolski",
  "Woś",
  "Woźniak",
  "Wrona",
  "Wroński",
  "Wróbel",
  "Wróblewski",
  "Wypych",
  "Wysocki",
  "Wyszyński",
  "Wójcicki",
  "Wójcik",
  "Wójtowicz",
  "Wąsik",
  "Węgrzyn",
  "Włodarczyk",
  "Włodarski",
  "Zaborowski",
  "Zabłocki",
  "Zagórski",
  "Zając",
  "Zajączkowski",
  "Zakrzewski",
  "Zalewski",
  "Zaremba",
  "Zarzycki",
  "Zaręba",
  "Zawada",
  "Zawadzki",
  "Zdunek",
  "Zieliński",
  "Zielonka",
  "Ziółkowski",
  "Zięba",
  "Ziętek",
  "Zwoliński",
  "Zych",
  "Zygmunt",
  "Łapiński",
  "Łuczak",
  "Łukasiewicz",
  "Łukasik",
  "Łukaszewski",
  "Śliwa",
  "Śliwiński",
  "Ślusarczyk",
  "Świderski",
  "Świerczyński",
  "Świątek",
  "Żak",
  "Żebrowski",
  "Żmuda",
  "Żuk",
  "Żukowski",
  "Żurawski",
  "Żurek",
  "Żyła"
];

},{}],583:[function(require,module,exports){
module.exports=require(388)
},{"/Users/a/dev/faker.js/lib/locales/ge/name/name.js":388}],584:[function(require,module,exports){
module["exports"] = [
  "Pan",
  "Pani"
];

},{}],585:[function(require,module,exports){
module.exports=require(167)
},{"/Users/a/dev/faker.js/lib/locales/en/name/title.js":167}],586:[function(require,module,exports){
module["exports"] = [
  "12-###-##-##",
  "13-###-##-##",
  "14-###-##-##",
  "15-###-##-##",
  "16-###-##-##",
  "17-###-##-##",
  "18-###-##-##",
  "22-###-##-##",
  "23-###-##-##",
  "24-###-##-##",
  "25-###-##-##",
  "29-###-##-##",
  "32-###-##-##",
  "33-###-##-##",
  "34-###-##-##",
  "41-###-##-##",
  "42-###-##-##",
  "43-###-##-##",
  "44-###-##-##",
  "46-###-##-##",
  "48-###-##-##",
  "52-###-##-##",
  "54-###-##-##",
  "55-###-##-##",
  "56-###-##-##",
  "58-###-##-##",
  "59-###-##-##",
  "61-###-##-##",
  "62-###-##-##",
  "63-###-##-##",
  "65-###-##-##",
  "67-###-##-##",
  "68-###-##-##",
  "71-###-##-##",
  "74-###-##-##",
  "75-###-##-##",
  "76-###-##-##",
  "77-###-##-##",
  "81-###-##-##",
  "82-###-##-##",
  "83-###-##-##",
  "84-###-##-##",
  "85-###-##-##",
  "86-###-##-##",
  "87-###-##-##",
  "89-###-##-##",
  "91-###-##-##",
  "94-###-##-##",
  "95-###-##-##"
];

},{}],587:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":586,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],588:[function(require,module,exports){
module.exports=require(91)
},{"/Users/a/dev/faker.js/lib/locales/en/address/building_number.js":91}],589:[function(require,module,exports){
module["exports"] = [
  "Nova",
  "Velha",
  "Grande",
  "Vila",
  "Município de"
];

},{}],590:[function(require,module,exports){
module["exports"] = [
  "do Descoberto",
  "de Nossa Senhora",
  "do Norte",
  "do Sul"
];

},{}],591:[function(require,module,exports){
module["exports"] = [
  "Afeganistão",
  "Albânia",
  "Algéria",
  "Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antigua and Barbada",
  "Argentina",
  "Armênia",
  "Aruba",
  "Austrália",
  "Áustria",
  "Alzerbajão",
  "Bahamas",
  "Barém",
  "Bangladesh",
  "Barbado",
  "Belgrado",
  "Bélgica",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolívia",
  "Bôsnia",
  "Botuasuna",
  "Bouvetoia",
  "Brasil",
  "Arquipélago de Chagos",
  "Ilhas Virgens",
  "Brunei",
  "Bulgária",
  "Burkina Faso",
  "Burundi",
  "Cambójia",
  "Camarões",
  "Canadá",
  "Cabo Verde",
  "Ilhas Caiman",
  "República da África Central",
  "Chad",
  "Chile",
  "China",
  "Ilhas Natal",
  "Ilhas Cocos",
  "Colômbia",
  "Comoros",
  "Congo",
  "Ilhas Cook",
  "Costa Rica",
  "Costa do Marfim",
  "Croácia",
  "Cuba",
  "Cyprus",
  "República Tcheca",
  "Dinamarca",
  "Djibouti",
  "Dominica",
  "República Dominicana",
  "Equador",
  "Egito",
  "El Salvador",
  "Guiné Equatorial",
  "Eritrea",
  "Estônia",
  "Etiópia",
  "Ilhas Faroe",
  "Malvinas",
  "Fiji",
  "Finlândia",
  "França",
  "Guiné Francesa",
  "Polinésia Francesa",
  "Gabão",
  "Gâmbia",
  "Georgia",
  "Alemanha",
  "Gana",
  "Gibraltar",
  "Grécia",
  "Groelândia",
  "Granada",
  "Guadalupe",
  "Guano",
  "Guatemala",
  "Guernsey",
  "Guiné",
  "Guiné-Bissau",
  "Guiana",
  "Haiti",
  "Heard Island and McDonald Islands",
  "Vaticano",
  "Honduras",
  "Hong Kong",
  "Hungria",
  "Iceland",
  "Índia",
  "Indonésia",
  "Irã",
  "Iraque",
  "Irlanda",
  "Ilha de Man",
  "Israel",
  "Itália",
  "Jamaica",
  "Japão",
  "Jersey",
  "Jordânia",
  "Cazaquistão",
  "Quênia",
  "Kiribati",
  "Coreia do Norte",
  "Coreia do Sul",
  "Kuwait",
  "Kyrgyz Republic",
  "República Democrática de Lao People",
  "Latvia",
  "Líbano",
  "Lesotho",
  "Libéria",
  "Libyan Arab Jamahiriya",
  "Liechtenstein",
  "Lituânia",
  "Luxemburgo",
  "Macao",
  "Macedônia",
  "Madagascar",
  "Malawi",
  "Malásia",
  "Maldives",
  "Mali",
  "Malta",
  "Ilhas Marshall",
  "Martinica",
  "Mauritânia",
  "Mauritius",
  "Mayotte",
  "México",
  "Micronésia",
  "Moldova",
  "Mônaco",
  "Mongólia",
  "Montenegro",
  "Montserrat",
  "Marrocos",
  "Moçambique",
  "Myanmar",
  "Namibia",
  "Nauru",
  "Nepal",
  "Antilhas Holandesas",
  "Holanda",
  "Nova Caledonia",
  "Nova Zelândia",
  "Nicarágua",
  "Nigéria",
  "Niue",
  "Ilha Norfolk",
  "Northern Mariana Islands",
  "Noruega",
  "Oman",
  "Paquistão",
  "Palau",
  "Território da Palestina",
  "Panamá",
  "Nova Guiné Papua",
  "Paraguai",
  "Peru",
  "Filipinas",
  "Polônia",
  "Portugal",
  "Puerto Rico",
  "Qatar",
  "Romênia",
  "Rússia",
  "Ruanda",
  "São Bartolomeu",
  "Santa Helena",
  "Santa Lúcia",
  "Saint Martin",
  "Saint Pierre and Miquelon",
  "Saint Vincent and the Grenadines",
  "Samoa",
  "San Marino",
  "Sao Tomé e Príncipe",
  "Arábia Saudita",
  "Senegal",
  "Sérvia",
  "Seychelles",
  "Serra Leoa",
  "Singapura",
  "Eslováquia",
  "Eslovênia",
  "Ilhas Salomão",
  "Somália",
  "África do Sul",
  "South Georgia and the South Sandwich Islands",
  "Spanha",
  "Sri Lanka",
  "Sudão",
  "Suriname",
  "Svalbard & Jan Mayen Islands",
  "Swaziland",
  "Suécia",
  "Suíça",
  "Síria",
  "Taiwan",
  "Tajiquistão",
  "Tanzânia",
  "Tailândia",
  "Timor-Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidá e Tobago",
  "Tunísia",
  "Turquia",
  "Turcomenistão",
  "Turks and Caicos Islands",
  "Tuvalu",
  "Uganda",
  "Ucrânia",
  "Emirados Árabes Unidos",
  "Reino Unido",
  "Estados Unidos da América",
  "Estados Unidos das Ilhas Virgens",
  "Uruguai",
  "Uzbequistão",
  "Vanuatu",
  "Venezuela",
  "Vietnã",
  "Wallis and Futuna",
  "Sahara",
  "Yemen",
  "Zâmbia",
  "Zimbábue"
];

},{}],592:[function(require,module,exports){
module["exports"] = [
  "Brasil"
];

},{}],593:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.default_country = require("./default_country");

},{"./building_number":588,"./city_prefix":589,"./city_suffix":590,"./country":591,"./default_country":592,"./postcode":594,"./secondary_address":595,"./state":596,"./state_abbr":597,"./street_suffix":598}],594:[function(require,module,exports){
module["exports"] = [
  "#####",
  "#####-###"
];

},{}],595:[function(require,module,exports){
module["exports"] = [
  "Apto. ###",
  "Sobrado ##",
  "Casa #",
  "Lote ##",
  "Quadra ##"
];

},{}],596:[function(require,module,exports){
module["exports"] = [
  "Acre",
  "Alagoas",
  "Amapá",
  "Amazonas",
  "Bahia",
  "Ceará",
  "Distrito Federal",
  "Espírito Santo",
  "Goiás",
  "Maranhão",
  "Mato Grosso",
  "Mato Grosso do Sul",
  "Minas Gerais",
  "Pará",
  "Paraíba",
  "Paraná",
  "Pernambuco",
  "Piauí",
  "Rio de Janeiro",
  "Rio Grande do Norte",
  "Rio Grande do Sul",
  "Rondônia",
  "Roraima",
  "Santa Catarina",
  "São Paulo",
  "Sergipe",
  "Tocantins"
];

},{}],597:[function(require,module,exports){
module["exports"] = [
  "AC",
  "AL",
  "AP",
  "AM",
  "BA",
  "CE",
  "DF",
  "ES",
  "GO",
  "MA",
  "MT",
  "MS",
  "PA",
  "PB",
  "PR",
  "PE",
  "PI",
  "RJ",
  "RN",
  "RS",
  "RO",
  "RR",
  "SC",
  "SP"
];

},{}],598:[function(require,module,exports){
module["exports"] = [
  "Rua",
  "Avenida",
  "Travessa",
  "Ponte",
  "Alameda",
  "Marginal",
  "Viela",
  "Rodovia"
];

},{}],599:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"./name":600,"./suffix":601,"/Users/a/dev/faker.js/lib/locales/de_CH/company/index.js":83}],600:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} e #{Name.last_name}"
];

},{}],601:[function(require,module,exports){
module["exports"] = [
  "S.A.",
  "LTDA",
  "e Associados",
  "Comércio"
];

},{}],602:[function(require,module,exports){
var pt_BR = {};
module['exports'] = pt_BR;
pt_BR.title = "Portuguese (Brazil)";
pt_BR.address = require("./address");
pt_BR.company = require("./company");
pt_BR.internet = require("./internet");
pt_BR.lorem = require("./lorem");
pt_BR.name = require("./name");
pt_BR.phone_number = require("./phone_number");

},{"./address":593,"./company":599,"./internet":605,"./lorem":606,"./name":609,"./phone_number":614}],603:[function(require,module,exports){
module["exports"] = [
  "br",
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],604:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com",
  "live.com",
  "bol.com.br"
];

},{}],605:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":603,"./free_email":604,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],606:[function(require,module,exports){
module.exports=require(38)
},{"./words":607,"/Users/a/dev/faker.js/lib/locales/de/lorem/index.js":38}],607:[function(require,module,exports){
module.exports=require(39)
},{"/Users/a/dev/faker.js/lib/locales/de/lorem/words.js":39}],608:[function(require,module,exports){
module["exports"] = [
  "Alessandro",
  "Alessandra",
  "Alexandre",
  "Aline",
  "Antônio",
  "Breno",
  "Bruna",
  "Carlos",
  "Carla",
  "Célia",
  "Cecília",
  "César",
  "Danilo",
  "Dalila",
  "Deneval",
  "Eduardo",
  "Eduarda",
  "Esther",
  "Elísio",
  "Fábio",
  "Fabrício",
  "Fabrícia",
  "Félix",
  "Felícia",
  "Feliciano",
  "Frederico",
  "Fabiano",
  "Gustavo",
  "Guilherme",
  "Gúbio",
  "Heitor",
  "Hélio",
  "Hugo",
  "Isabel",
  "Isabela",
  "Ígor",
  "João",
  "Joana",
  "Júlio César",
  "Júlio",
  "Júlia",
  "Janaína",
  "Karla",
  "Kléber",
  "Lucas",
  "Lorena",
  "Lorraine",
  "Larissa",
  "Ladislau",
  "Marcos",
  "Meire",
  "Marcelo",
  "Marcela",
  "Margarida",
  "Mércia",
  "Márcia",
  "Marli",
  "Morgana",
  "Maria",
  "Norberto",
  "Natália",
  "Nataniel",
  "Núbia",
  "Ofélia",
  "Paulo",
  "Paula",
  "Pablo",
  "Pedro",
  "Raul",
  "Rafael",
  "Rafaela",
  "Ricardo",
  "Roberto",
  "Roberta",
  "Sílvia",
  "Sílvia",
  "Silas",
  "Suélen",
  "Sara",
  "Salvador",
  "Sirineu",
  "Talita",
  "Tertuliano",
  "Vicente",
  "Víctor",
  "Vitória",
  "Yango",
  "Yago",
  "Yuri",
  "Washington",
  "Warley"
];

},{}],609:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");

},{"./first_name":608,"./last_name":610,"./prefix":611,"./suffix":612}],610:[function(require,module,exports){
module["exports"] = [
  "Silva",
  "Souza",
  "Carvalho",
  "Santos",
  "Reis",
  "Xavier",
  "Franco",
  "Braga",
  "Macedo",
  "Batista",
  "Barros",
  "Moraes",
  "Costa",
  "Pereira",
  "Carvalho",
  "Melo",
  "Saraiva",
  "Nogueira",
  "Oliveira",
  "Martins",
  "Moreira",
  "Albuquerque"
];

},{}],611:[function(require,module,exports){
module["exports"] = [
  "Sr.",
  "Sra.",
  "Srta.",
  "Dr."
];

},{}],612:[function(require,module,exports){
module["exports"] = [
  "Jr.",
  "Neto",
  "Filho"
];

},{}],613:[function(require,module,exports){
module["exports"] = [
  "(##) ####-####",
  "+55 (##) ####-####",
  "(##) #####-####"
];

},{}],614:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":613,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],615:[function(require,module,exports){
module["exports"] = [
  "###"
];

},{}],616:[function(require,module,exports){
module["exports"] = [
  "#{Address.city_name}"
];

},{}],617:[function(require,module,exports){
module["exports"] = [
  "Москва",
  "Владимир",
  "Санкт-Петербург",
  "Новосибирск",
  "Екатеринбург",
  "Нижний Новгород",
  "Самара",
  "Казань",
  "Омск",
  "Челябинск",
  "Ростов-на-Дону",
  "Уфа",
  "Волгоград",
  "Пермь",
  "Красноярск",
  "Воронеж",
  "Саратов",
  "Краснодар",
  "Тольятти",
  "Ижевск",
  "Барнаул",
  "Ульяновск",
  "Тюмень",
  "Иркутск",
  "Владивосток",
  "Ярославль",
  "Хабаровск",
  "Махачкала",
  "Оренбург",
  "Новокузнецк",
  "Томск",
  "Кемерово",
  "Рязань",
  "Астрахань",
  "Пенза",
  "Липецк",
  "Тула",
  "Киров",
  "Чебоксары",
  "Курск",
  "Брянскm Магнитогорск",
  "Иваново",
  "Тверь",
  "Ставрополь",
  "Белгород",
  "Сочи"
];

},{}],618:[function(require,module,exports){
module["exports"] = [
  "Австралия",
  "Австрия",
  "Азербайджан",
  "Албания",
  "Алжир",
  "Американское Самоа (не признана)",
  "Ангилья",
  "Ангола",
  "Андорра",
  "Антарктика (не признана)",
  "Антигуа и Барбуда",
  "Антильские Острова (не признана)",
  "Аомынь (не признана)",
  "Аргентина",
  "Армения",
  "Афганистан",
  "Багамские Острова",
  "Бангладеш",
  "Барбадос",
  "Бахрейн",
  "Беларусь",
  "Белиз",
  "Бельгия",
  "Бенин",
  "Болгария",
  "Боливия",
  "Босния и Герцеговина",
  "Ботсвана",
  "Бразилия",
  "Бруней",
  "Буркина-Фасо",
  "Бурунди",
  "Бутан",
  "Вануату",
  "Ватикан",
  "Великобритания",
  "Венгрия",
  "Венесуэла",
  "Восточный Тимор",
  "Вьетнам",
  "Габон",
  "Гаити",
  "Гайана",
  "Гамбия",
  "Гана",
  "Гваделупа (не признана)",
  "Гватемала",
  "Гвиана (не признана)",
  "Гвинея",
  "Гвинея-Бисау",
  "Германия",
  "Гондурас",
  "Гренада",
  "Греция",
  "Грузия",
  "Дания",
  "Джибути",
  "Доминика",
  "Доминиканская Республика",
  "Египет",
  "Замбия",
  "Зимбабве",
  "Израиль",
  "Индия",
  "Индонезия",
  "Иордания",
  "Ирак",
  "Иран",
  "Ирландия",
  "Исландия",
  "Испания",
  "Италия",
  "Йемен",
  "Кабо-Верде",
  "Казахстан",
  "Камбоджа",
  "Камерун",
  "Канада",
  "Катар",
  "Кения",
  "Кипр",
  "Кирибати",
  "Китай",
  "Колумбия",
  "Коморские Острова",
  "Конго",
  "Демократическая Республика",
  "Корея (Северная)",
  "Корея (Южная)",
  "Косово",
  "Коста-Рика",
  "Кот-д'Ивуар",
  "Куба",
  "Кувейт",
  "Кука острова",
  "Кыргызстан",
  "Лаос",
  "Латвия",
  "Лесото",
  "Либерия",
  "Ливан",
  "Ливия",
  "Литва",
  "Лихтенштейн",
  "Люксембург",
  "Маврикий",
  "Мавритания",
  "Мадагаскар",
  "Македония",
  "Малави",
  "Малайзия",
  "Мали",
  "Мальдивы",
  "Мальта",
  "Маршалловы Острова",
  "Мексика",
  "Микронезия",
  "Мозамбик",
  "Молдова",
  "Монако",
  "Монголия",
  "Марокко",
  "Мьянма",
  "Намибия",
  "Науру",
  "Непал",
  "Нигер",
  "Нигерия",
  "Нидерланды",
  "Никарагуа",
  "Новая Зеландия",
  "Норвегия",
  "Объединенные Арабские Эмираты",
  "Оман",
  "Пакистан",
  "Палау",
  "Панама",
  "Папуа — Новая Гвинея",
  "Парагвай",
  "Перу",
  "Польша",
  "Португалия",
  "Республика Конго",
  "Россия",
  "Руанда",
  "Румыния",
  "Сальвадор",
  "Самоа",
  "Сан-Марино",
  "Сан-Томе и Принсипи",
  "Саудовская Аравия",
  "Свазиленд",
  "Сейшельские острова",
  "Сенегал",
  "Сент-Винсент и Гренадины",
  "Сент-Киттс и Невис",
  "Сент-Люсия",
  "Сербия",
  "Сингапур",
  "Сирия",
  "Словакия",
  "Словения",
  "Соединенные Штаты Америки",
  "Соломоновы Острова",
  "Сомали",
  "Судан",
  "Суринам",
  "Сьерра-Леоне",
  "Таджикистан",
  "Таиланд",
  "Тайвань (не признана)",
  "Тамил-Илам (не признана)",
  "Танзания",
  "Тёркс и Кайкос (не признана)",
  "Того",
  "Токелау (не признана)",
  "Тонга",
  "Тринидад и Тобаго",
  "Тувалу",
  "Тунис",
  "Турецкая Республика Северного Кипра (не признана)",
  "Туркменистан",
  "Турция",
  "Уганда",
  "Узбекистан",
  "Украина",
  "Уругвай",
  "Фарерские Острова (не признана)",
  "Фиджи",
  "Филиппины",
  "Финляндия",
  "Франция",
  "Французская Полинезия (не признана)",
  "Хорватия",
  "Центральноафриканская Республика",
  "Чад",
  "Черногория",
  "Чехия",
  "Чили",
  "Швейцария",
  "Швеция",
  "Шри-Ланка",
  "Эквадор",
  "Экваториальная Гвинея",
  "Эритрея",
  "Эстония",
  "Эфиопия",
  "Южно-Африканская Республика",
  "Ямайка",
  "Япония"
];

},{}],619:[function(require,module,exports){
module["exports"] = [
  "Россия"
];

},{}],620:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.street_title = require("./street_title");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":615,"./city":616,"./city_name":617,"./country":618,"./default_country":619,"./postcode":621,"./secondary_address":622,"./state":623,"./street_address":624,"./street_name":625,"./street_suffix":626,"./street_title":627}],621:[function(require,module,exports){
module["exports"] = [
  "######"
];

},{}],622:[function(require,module,exports){
module["exports"] = [
  "кв. ###"
];

},{}],623:[function(require,module,exports){
module["exports"] = [
  "Республика Адыгея",
  "Республика Башкортостан",
  "Республика Бурятия",
  "Республика Алтай Республика Дагестан",
  "Республика Ингушетия",
  "Кабардино-Балкарская Республика",
  "Республика Калмыкия",
  "Республика Карачаево-Черкессия",
  "Республика Карелия",
  "Республика Коми",
  "Республика Марий Эл",
  "Республика Мордовия",
  "Республика Саха (Якутия)",
  "Республика Северная Осетия-Алания",
  "Республика Татарстан",
  "Республика Тыва",
  "Удмуртская Республика",
  "Республика Хакасия",
  "Чувашская Республика",
  "Алтайский край",
  "Краснодарский край",
  "Красноярский край",
  "Приморский край",
  "Ставропольский край",
  "Хабаровский край",
  "Амурская область",
  "Архангельская область",
  "Астраханская область",
  "Белгородская область",
  "Брянская область",
  "Владимирская область",
  "Волгоградская область",
  "Вологодская область",
  "Воронежская область",
  "Ивановская область",
  "Иркутская область",
  "Калиниградская область",
  "Калужская область",
  "Камчатская область",
  "Кемеровская область",
  "Кировская область",
  "Костромская область",
  "Курганская область",
  "Курская область",
  "Ленинградская область",
  "Липецкая область",
  "Магаданская область",
  "Московская область",
  "Мурманская область",
  "Нижегородская область",
  "Новгородская область",
  "Новосибирская область",
  "Омская область",
  "Оренбургская область",
  "Орловская область",
  "Пензенская область",
  "Пермская область",
  "Псковская область",
  "Ростовская область",
  "Рязанская область",
  "Самарская область",
  "Саратовская область",
  "Сахалинская область",
  "Свердловская область",
  "Смоленская область",
  "Тамбовская область",
  "Тверская область",
  "Томская область",
  "Тульская область",
  "Тюменская область",
  "Ульяновская область",
  "Челябинская область",
  "Читинская область",
  "Ярославская область",
  "Еврейская автономная область",
  "Агинский Бурятский авт. округ",
  "Коми-Пермяцкий автономный округ",
  "Корякский автономный округ",
  "Ненецкий автономный округ",
  "Таймырский (Долгано-Ненецкий) автономный округ",
  "Усть-Ордынский Бурятский автономный округ",
  "Ханты-Мансийский автономный округ",
  "Чукотский автономный округ",
  "Эвенкийский автономный округ",
  "Ямало-Ненецкий автономный округ",
  "Чеченская Республика"
];

},{}],624:[function(require,module,exports){
module["exports"] = [
  "#{street_name}, #{building_number}"
];

},{}],625:[function(require,module,exports){
module["exports"] = [
  "#{street_suffix} #{Address.street_title}",
  "#{Address.street_title} #{street_suffix}"
];

},{}],626:[function(require,module,exports){
module["exports"] = [
  "ул.",
  "улица",
  "проспект",
  "пр.",
  "площадь",
  "пл."
];

},{}],627:[function(require,module,exports){
module["exports"] = [
  "Советская",
  "Молодежная",
  "Центральная",
  "Школьная",
  "Новая",
  "Садовая",
  "Лесная",
  "Набережная",
  "Ленина",
  "Мира",
  "Октябрьская",
  "Зеленая",
  "Комсомольская",
  "Заречная",
  "Первомайская",
  "Гагарина",
  "Полевая",
  "Луговая",
  "Пионерская",
  "Кирова",
  "Юбилейная",
  "Северная",
  "Пролетарская",
  "Степная",
  "Пушкина",
  "Калинина",
  "Южная",
  "Колхозная",
  "Рабочая",
  "Солнечная",
  "Железнодорожная",
  "Восточная",
  "Заводская",
  "Чапаева",
  "Нагорная",
  "Строителей",
  "Береговая",
  "Победы",
  "Горького",
  "Кооперативная",
  "Красноармейская",
  "Совхозная",
  "Речная",
  "Школьный",
  "Спортивная",
  "Озерная",
  "Строительная",
  "Парковая",
  "Чкалова",
  "Мичурина",
  "речень улиц",
  "Подгорная",
  "Дружбы",
  "Почтовая",
  "Партизанская",
  "Вокзальная",
  "Лермонтова",
  "Свободы",
  "Дорожная",
  "Дачная",
  "Маяковского",
  "Западная",
  "Фрунзе",
  "Дзержинского",
  "Московская",
  "Свердлова",
  "Некрасова",
  "Гоголя",
  "Красная",
  "Трудовая",
  "Шоссейная",
  "Чехова",
  "Коммунистическая",
  "Труда",
  "Комарова",
  "Матросова",
  "Островского",
  "Сосновая",
  "Клубная",
  "Куйбышева",
  "Крупской",
  "Березовая",
  "Карла Маркса",
  "8 Марта",
  "Больничная",
  "Садовый",
  "Интернациональная",
  "Суворова",
  "Цветочная",
  "Трактовая",
  "Ломоносова",
  "Горная",
  "Космонавтов",
  "Энергетиков",
  "Шевченко",
  "Весенняя",
  "Механизаторов",
  "Коммунальная",
  "Лесной",
  "40 лет Победы",
  "Майская"
];

},{}],628:[function(require,module,exports){
module["exports"] = [
  "красный",
  "зеленый",
  "синий",
  "желтый",
  "багровый",
  "мятный",
  "зеленовато-голубой",
  "белый",
  "черный",
  "оранжевый",
  "розовый",
  "серый",
  "красно-коричневый",
  "фиолетовый",
  "бирюзовый",
  "желто-коричневый",
  "небесно голубой",
  "оранжево-розовый",
  "темно-фиолетовый",
  "орхидный",
  "оливковый",
  "пурпурный",
  "лимонный",
  "кремовый",
  "сине-фиолетовый",
  "золотой",
  "красно-пурпурный",
  "голубой",
  "лазурный",
  "лиловый",
  "серебряный"
];

},{}],629:[function(require,module,exports){
module["exports"] = [
  "Книги",
  "Фильмы",
  "музыка",
  "игры",
  "Электроника",
  "компьютеры",
  "Дом",
  "садинструмент",
  "Бакалея",
  "здоровье",
  "красота",
  "Игрушки",
  "детское",
  "для малышей",
  "Одежда",
  "обувь",
  "украшения",
  "Спорт",
  "туризм",
  "Автомобильное",
  "промышленное"
];

},{}],630:[function(require,module,exports){
arguments[4][121][0].apply(exports,arguments)
},{"./color":628,"./department":629,"./product_name":631,"/Users/a/dev/faker.js/lib/locales/en/commerce/index.js":121}],631:[function(require,module,exports){
module["exports"] = {
  "adjective": [
    "Маленький",
    "Эргономичный",
    "Грубый",
    "Интеллектуальный",
    "Великолепный",
    "Невероятный",
    "Фантастический",
    "Практчиный",
    "Лоснящийся",
    "Потрясающий"
  ],
  "material": [
    "Стальной",
    "Деревянный",
    "Бетонный",
    "Пластиковый",
    "Хлопковый",
    "Гранитный",
    "Резиновый"
  ],
  "product": [
    "Стул",
    "Автомобиль",
    "Компьютер",
    "Берет",
    "Кулон",
    "Стол",
    "Свитер",
    "Ремень",
    "Ботинок"
  ]
};

},{}],632:[function(require,module,exports){
arguments[4][377][0].apply(exports,arguments)
},{"./name":633,"./prefix":634,"./suffix":635,"/Users/a/dev/faker.js/lib/locales/ge/company/index.js":377}],633:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{Name.female_first_name}",
  "#{prefix} #{Name.male_first_name}",
  "#{prefix} #{Name.male_last_name}",
  "#{prefix} #{suffix}#{suffix}",
  "#{prefix} #{suffix}#{suffix}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
];

},{}],634:[function(require,module,exports){
module["exports"] = [
  "ИП",
  "ООО",
  "ЗАО",
  "ОАО",
  "НКО",
  "ТСЖ",
  "ОП"
];

},{}],635:[function(require,module,exports){
module["exports"] = [
  "Снаб",
  "Торг",
  "Пром",
  "Трейд",
  "Сбыт"
];

},{}],636:[function(require,module,exports){
var ru = {};
module['exports'] = ru;
ru.title = "Russian";
ru.separator = " и ";
ru.address = require("./address");
ru.internet = require("./internet");
ru.name = require("./name");
ru.phone_number = require("./phone_number");
ru.commerce = require("./commerce");
ru.company = require("./company");

},{"./address":620,"./commerce":630,"./company":632,"./internet":639,"./name":643,"./phone_number":651}],637:[function(require,module,exports){
module["exports"] = [
  "com",
  "ru",
  "info",
  "рф",
  "net",
  "org"
];

},{}],638:[function(require,module,exports){
module["exports"] = [
  "yandex.ru",
  "ya.ru",
  "mail.ru",
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],639:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":637,"./free_email":638,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],640:[function(require,module,exports){
module["exports"] = [
  "Анна",
  "Алёна",
  "Алевтина",
  "Александра",
  "Алина",
  "Алла",
  "Анастасия",
  "Ангелина",
  "Анжела",
  "Анжелика",
  "Антонида",
  "Антонина",
  "Анфиса",
  "Арина",
  "Валентина",
  "Валерия",
  "Варвара",
  "Василиса",
  "Вера",
  "Вероника",
  "Виктория",
  "Галина",
  "Дарья",
  "Евгения",
  "Екатерина",
  "Елена",
  "Елизавета",
  "Жанна",
  "Зинаида",
  "Зоя",
  "Ирина",
  "Кира",
  "Клавдия",
  "Ксения",
  "Лариса",
  "Лидия",
  "Любовь",
  "Людмила",
  "Маргарита",
  "Марина",
  "Мария",
  "Надежда",
  "Наталья",
  "Нина",
  "Оксана",
  "Ольга",
  "Раиса",
  "Регина",
  "Римма",
  "Светлана",
  "София",
  "Таисия",
  "Тамара",
  "Татьяна",
  "Ульяна",
  "Юлия"
];

},{}],641:[function(require,module,exports){
module["exports"] = [
  "Смирнова",
  "Иванова",
  "Кузнецова",
  "Попова",
  "Соколова",
  "Лебедева",
  "Козлова",
  "Новикова",
  "Морозова",
  "Петрова",
  "Волкова",
  "Соловьева",
  "Васильева",
  "Зайцева",
  "Павлова",
  "Семенова",
  "Голубева",
  "Виноградова",
  "Богданова",
  "Воробьева",
  "Федорова",
  "Михайлова",
  "Беляева",
  "Тарасова",
  "Белова",
  "Комарова",
  "Орлова",
  "Киселева",
  "Макарова",
  "Андреева",
  "Ковалева",
  "Ильина",
  "Гусева",
  "Титова",
  "Кузьмина",
  "Кудрявцева",
  "Баранова",
  "Куликова",
  "Алексеева",
  "Степанова",
  "Яковлева",
  "Сорокина",
  "Сергеева",
  "Романова",
  "Захарова",
  "Борисова",
  "Королева",
  "Герасимова",
  "Пономарева",
  "Григорьева",
  "Лазарева",
  "Медведева",
  "Ершова",
  "Никитина",
  "Соболева",
  "Рябова",
  "Полякова",
  "Цветкова",
  "Данилова",
  "Жукова",
  "Фролова",
  "Журавлева",
  "Николаева",
  "Крылова",
  "Максимова",
  "Сидорова",
  "Осипова",
  "Белоусова",
  "Федотова",
  "Дорофеева",
  "Егорова",
  "Матвеева",
  "Боброва",
  "Дмитриева",
  "Калинина",
  "Анисимова",
  "Петухова",
  "Антонова",
  "Тимофеева",
  "Никифорова",
  "Веселова",
  "Филиппова",
  "Маркова",
  "Большакова",
  "Суханова",
  "Миронова",
  "Ширяева",
  "Александрова",
  "Коновалова",
  "Шестакова",
  "Казакова",
  "Ефимова",
  "Денисова",
  "Громова",
  "Фомина",
  "Давыдова",
  "Мельникова",
  "Щербакова",
  "Блинова",
  "Колесникова",
  "Карпова",
  "Афанасьева",
  "Власова",
  "Маслова",
  "Исакова",
  "Тихонова",
  "Аксенова",
  "Гаврилова",
  "Родионова",
  "Котова",
  "Горбунова",
  "Кудряшова",
  "Быкова",
  "Зуева",
  "Третьякова",
  "Савельева",
  "Панова",
  "Рыбакова",
  "Суворова",
  "Абрамова",
  "Воронова",
  "Мухина",
  "Архипова",
  "Трофимова",
  "Мартынова",
  "Емельянова",
  "Горшкова",
  "Чернова",
  "Овчинникова",
  "Селезнева",
  "Панфилова",
  "Копылова",
  "Михеева",
  "Галкина",
  "Назарова",
  "Лобанова",
  "Лукина",
  "Белякова",
  "Потапова",
  "Некрасова",
  "Хохлова",
  "Жданова",
  "Наумова",
  "Шилова",
  "Воронцова",
  "Ермакова",
  "Дроздова",
  "Игнатьева",
  "Савина",
  "Логинова",
  "Сафонова",
  "Капустина",
  "Кириллова",
  "Моисеева",
  "Елисеева",
  "Кошелева",
  "Костина",
  "Горбачева",
  "Орехова",
  "Ефремова",
  "Исаева",
  "Евдокимова",
  "Калашникова",
  "Кабанова",
  "Носкова",
  "Юдина",
  "Кулагина",
  "Лапина",
  "Прохорова",
  "Нестерова",
  "Харитонова",
  "Агафонова",
  "Муравьева",
  "Ларионова",
  "Федосеева",
  "Зимина",
  "Пахомова",
  "Шубина",
  "Игнатова",
  "Филатова",
  "Крюкова",
  "Рогова",
  "Кулакова",
  "Терентьева",
  "Молчанова",
  "Владимирова",
  "Артемьева",
  "Гурьева",
  "Зиновьева",
  "Гришина",
  "Кононова",
  "Дементьева",
  "Ситникова",
  "Симонова",
  "Мишина",
  "Фадеева",
  "Комиссарова",
  "Мамонтова",
  "Носова",
  "Гуляева",
  "Шарова",
  "Устинова",
  "Вишнякова",
  "Евсеева",
  "Лаврентьева",
  "Брагина",
  "Константинова",
  "Корнилова",
  "Авдеева",
  "Зыкова",
  "Бирюкова",
  "Шарапова",
  "Никонова",
  "Щукина",
  "Дьячкова",
  "Одинцова",
  "Сазонова",
  "Якушева",
  "Красильникова",
  "Гордеева",
  "Самойлова",
  "Князева",
  "Беспалова",
  "Уварова",
  "Шашкова",
  "Бобылева",
  "Доронина",
  "Белозерова",
  "Рожкова",
  "Самсонова",
  "Мясникова",
  "Лихачева",
  "Бурова",
  "Сысоева",
  "Фомичева",
  "Русакова",
  "Стрелкова",
  "Гущина",
  "Тетерина",
  "Колобова",
  "Субботина",
  "Фокина",
  "Блохина",
  "Селиверстова",
  "Пестова",
  "Кондратьева",
  "Силина",
  "Меркушева",
  "Лыткина",
  "Турова"
];

},{}],642:[function(require,module,exports){
module["exports"] = [
  "Александровна",
  "Алексеевна",
  "Альбертовна",
  "Анатольевна",
  "Андреевна",
  "Антоновна",
  "Аркадьевна",
  "Арсеньевна",
  "Артёмовна",
  "Борисовна",
  "Вадимовна",
  "Валентиновна",
  "Валерьевна",
  "Васильевна",
  "Викторовна",
  "Витальевна",
  "Владимировна",
  "Владиславовна",
  "Вячеславовна",
  "Геннадьевна",
  "Георгиевна",
  "Германовна",
  "Григорьевна",
  "Данииловна",
  "Денисовна",
  "Дмитриевна",
  "Евгеньевна",
  "Егоровна",
  "Ивановна",
  "Игнатьевна",
  "Игоревна",
  "Ильинична",
  "Константиновна",
  "Лаврентьевна",
  "Леонидовна",
  "Макаровна",
  "Максимовна",
  "Матвеевна",
  "Михайловна",
  "Никитична",
  "Николаевна",
  "Олеговна",
  "Романовна",
  "Семёновна",
  "Сергеевна",
  "Станиславовна",
  "Степановна",
  "Фёдоровна",
  "Эдуардовна",
  "Юрьевна",
  "Ярославовна"
];

},{}],643:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.male_first_name = require("./male_first_name");
name.male_middle_name = require("./male_middle_name");
name.male_last_name = require("./male_last_name");
name.female_first_name = require("./female_first_name");
name.female_middle_name = require("./female_middle_name");
name.female_last_name = require("./female_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./female_first_name":640,"./female_last_name":641,"./female_middle_name":642,"./male_first_name":644,"./male_last_name":645,"./male_middle_name":646,"./name":647,"./prefix":648,"./suffix":649}],644:[function(require,module,exports){
module["exports"] = [
  "Александр",
  "Алексей",
  "Альберт",
  "Анатолий",
  "Андрей",
  "Антон",
  "Аркадий",
  "Арсений",
  "Артём",
  "Борис",
  "Вадим",
  "Валентин",
  "Валерий",
  "Василий",
  "Виктор",
  "Виталий",
  "Владимир",
  "Владислав",
  "Вячеслав",
  "Геннадий",
  "Георгий",
  "Герман",
  "Григорий",
  "Даниил",
  "Денис",
  "Дмитрий",
  "Евгений",
  "Егор",
  "Иван",
  "Игнатий",
  "Игорь",
  "Илья",
  "Константин",
  "Лаврентий",
  "Леонид",
  "Лука",
  "Макар",
  "Максим",
  "Матвей",
  "Михаил",
  "Никита",
  "Николай",
  "Олег",
  "Роман",
  "Семён",
  "Сергей",
  "Станислав",
  "Степан",
  "Фёдор",
  "Эдуард",
  "Юрий",
  "Ярослав"
];

},{}],645:[function(require,module,exports){
module["exports"] = [
  "Смирнов",
  "Иванов",
  "Кузнецов",
  "Попов",
  "Соколов",
  "Лебедев",
  "Козлов",
  "Новиков",
  "Морозов",
  "Петров",
  "Волков",
  "Соловьев",
  "Васильев",
  "Зайцев",
  "Павлов",
  "Семенов",
  "Голубев",
  "Виноградов",
  "Богданов",
  "Воробьев",
  "Федоров",
  "Михайлов",
  "Беляев",
  "Тарасов",
  "Белов",
  "Комаров",
  "Орлов",
  "Киселев",
  "Макаров",
  "Андреев",
  "Ковалев",
  "Ильин",
  "Гусев",
  "Титов",
  "Кузьмин",
  "Кудрявцев",
  "Баранов",
  "Куликов",
  "Алексеев",
  "Степанов",
  "Яковлев",
  "Сорокин",
  "Сергеев",
  "Романов",
  "Захаров",
  "Борисов",
  "Королев",
  "Герасимов",
  "Пономарев",
  "Григорьев",
  "Лазарев",
  "Медведев",
  "Ершов",
  "Никитин",
  "Соболев",
  "Рябов",
  "Поляков",
  "Цветков",
  "Данилов",
  "Жуков",
  "Фролов",
  "Журавлев",
  "Николаев",
  "Крылов",
  "Максимов",
  "Сидоров",
  "Осипов",
  "Белоусов",
  "Федотов",
  "Дорофеев",
  "Егоров",
  "Матвеев",
  "Бобров",
  "Дмитриев",
  "Калинин",
  "Анисимов",
  "Петухов",
  "Антонов",
  "Тимофеев",
  "Никифоров",
  "Веселов",
  "Филиппов",
  "Марков",
  "Большаков",
  "Суханов",
  "Миронов",
  "Ширяев",
  "Александров",
  "Коновалов",
  "Шестаков",
  "Казаков",
  "Ефимов",
  "Денисов",
  "Громов",
  "Фомин",
  "Давыдов",
  "Мельников",
  "Щербаков",
  "Блинов",
  "Колесников",
  "Карпов",
  "Афанасьев",
  "Власов",
  "Маслов",
  "Исаков",
  "Тихонов",
  "Аксенов",
  "Гаврилов",
  "Родионов",
  "Котов",
  "Горбунов",
  "Кудряшов",
  "Быков",
  "Зуев",
  "Третьяков",
  "Савельев",
  "Панов",
  "Рыбаков",
  "Суворов",
  "Абрамов",
  "Воронов",
  "Мухин",
  "Архипов",
  "Трофимов",
  "Мартынов",
  "Емельянов",
  "Горшков",
  "Чернов",
  "Овчинников",
  "Селезнев",
  "Панфилов",
  "Копылов",
  "Михеев",
  "Галкин",
  "Назаров",
  "Лобанов",
  "Лукин",
  "Беляков",
  "Потапов",
  "Некрасов",
  "Хохлов",
  "Жданов",
  "Наумов",
  "Шилов",
  "Воронцов",
  "Ермаков",
  "Дроздов",
  "Игнатьев",
  "Савин",
  "Логинов",
  "Сафонов",
  "Капустин",
  "Кириллов",
  "Моисеев",
  "Елисеев",
  "Кошелев",
  "Костин",
  "Горбачев",
  "Орехов",
  "Ефремов",
  "Исаев",
  "Евдокимов",
  "Калашников",
  "Кабанов",
  "Носков",
  "Юдин",
  "Кулагин",
  "Лапин",
  "Прохоров",
  "Нестеров",
  "Харитонов",
  "Агафонов",
  "Муравьев",
  "Ларионов",
  "Федосеев",
  "Зимин",
  "Пахомов",
  "Шубин",
  "Игнатов",
  "Филатов",
  "Крюков",
  "Рогов",
  "Кулаков",
  "Терентьев",
  "Молчанов",
  "Владимиров",
  "Артемьев",
  "Гурьев",
  "Зиновьев",
  "Гришин",
  "Кононов",
  "Дементьев",
  "Ситников",
  "Симонов",
  "Мишин",
  "Фадеев",
  "Комиссаров",
  "Мамонтов",
  "Носов",
  "Гуляев",
  "Шаров",
  "Устинов",
  "Вишняков",
  "Евсеев",
  "Лаврентьев",
  "Брагин",
  "Константинов",
  "Корнилов",
  "Авдеев",
  "Зыков",
  "Бирюков",
  "Шарапов",
  "Никонов",
  "Щукин",
  "Дьячков",
  "Одинцов",
  "Сазонов",
  "Якушев",
  "Красильников",
  "Гордеев",
  "Самойлов",
  "Князев",
  "Беспалов",
  "Уваров",
  "Шашков",
  "Бобылев",
  "Доронин",
  "Белозеров",
  "Рожков",
  "Самсонов",
  "Мясников",
  "Лихачев",
  "Буров",
  "Сысоев",
  "Фомичев",
  "Русаков",
  "Стрелков",
  "Гущин",
  "Тетерин",
  "Колобов",
  "Субботин",
  "Фокин",
  "Блохин",
  "Селиверстов",
  "Пестов",
  "Кондратьев",
  "Силин",
  "Меркушев",
  "Лыткин",
  "Туров"
];

},{}],646:[function(require,module,exports){
module["exports"] = [
  "Александрович",
  "Алексеевич",
  "Альбертович",
  "Анатольевич",
  "Андреевич",
  "Антонович",
  "Аркадьевич",
  "Арсеньевич",
  "Артёмович",
  "Борисович",
  "Вадимович",
  "Валентинович",
  "Валерьевич",
  "Васильевич",
  "Викторович",
  "Витальевич",
  "Владимирович",
  "Владиславович",
  "Вячеславович",
  "Геннадьевич",
  "Георгиевич",
  "Германович",
  "Григорьевич",
  "Даниилович",
  "Денисович",
  "Дмитриевич",
  "Евгеньевич",
  "Егорович",
  "Иванович",
  "Игнатьевич",
  "Игоревич",
  "Ильич",
  "Константинович",
  "Лаврентьевич",
  "Леонидович",
  "Лукич",
  "Макарович",
  "Максимович",
  "Матвеевич",
  "Михайлович",
  "Никитич",
  "Николаевич",
  "Олегович",
  "Романович",
  "Семёнович",
  "Сергеевич",
  "Станиславович",
  "Степанович",
  "Фёдорович",
  "Эдуардович",
  "Юрьевич",
  "Ярославович"
];

},{}],647:[function(require,module,exports){
module["exports"] = [
  "#{male_first_name} #{male_last_name}",
  "#{male_last_name} #{male_first_name}",
  "#{male_first_name} #{male_middle_name} #{male_last_name}",
  "#{male_last_name} #{male_first_name} #{male_middle_name}",
  "#{female_first_name} #{female_last_name}",
  "#{female_last_name} #{female_first_name}",
  "#{female_first_name} #{female_middle_name} #{female_last_name}",
  "#{female_last_name} #{female_first_name} #{female_middle_name}"
];

},{}],648:[function(require,module,exports){
module.exports=require(425)
},{"/Users/a/dev/faker.js/lib/locales/it/name/suffix.js":425}],649:[function(require,module,exports){
module.exports=require(425)
},{"/Users/a/dev/faker.js/lib/locales/it/name/suffix.js":425}],650:[function(require,module,exports){
module["exports"] = [
  "(9##)###-##-##"
];

},{}],651:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":650,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],652:[function(require,module,exports){
module["exports"] = [
  "#",
  "##",
  "###"
];

},{}],653:[function(require,module,exports){
module.exports=require(49)
},{"/Users/a/dev/faker.js/lib/locales/de_AT/address/city.js":49}],654:[function(require,module,exports){
module["exports"] = [
  "Bánovce nad Bebravou",
  "Banská Bystrica",
  "Banská Štiavnica",
  "Bardejov",
  "Bratislava I",
  "Bratislava II",
  "Bratislava III",
  "Bratislava IV",
  "Bratislava V",
  "Brezno",
  "Bytča",
  "Čadca",
  "Detva",
  "Dolný Kubín",
  "Dunajská Streda",
  "Galanta",
  "Gelnica",
  "Hlohovec",
  "Humenné",
  "Ilava",
  "Kežmarok",
  "Komárno",
  "Košice I",
  "Košice II",
  "Košice III",
  "Košice IV",
  "Košice-okolie",
  "Krupina",
  "Kysucké Nové Mesto",
  "Levice",
  "Levoča",
  "Liptovský Mikuláš",
  "Lučenec",
  "Malacky",
  "Martin",
  "Medzilaborce",
  "Michalovce",
  "Myjava",
  "Námestovo",
  "Nitra",
  "Nové Mesto n.Váhom",
  "Nové Zámky",
  "Partizánske",
  "Pezinok",
  "Piešťany",
  "Poltár",
  "Poprad",
  "Považská Bystrica",
  "Prešov",
  "Prievidza",
  "Púchov",
  "Revúca",
  "Rimavská Sobota",
  "Rožňava",
  "Ružomberok",
  "Sabinov",
  "Šaľa",
  "Senec",
  "Senica",
  "Skalica",
  "Snina",
  "Sobrance",
  "Spišská Nová Ves",
  "Stará Ľubovňa",
  "Stropkov",
  "Svidník",
  "Topoľčany",
  "Trebišov",
  "Trenčín",
  "Trnava",
  "Turčianske Teplice",
  "Tvrdošín",
  "Veľký Krtíš",
  "Vranov nad Topľou",
  "Žarnovica",
  "Žiar nad Hronom",
  "Žilina",
  "Zlaté Moravce",
  "Zvolen"
];

},{}],655:[function(require,module,exports){
module.exports=require(93)
},{"/Users/a/dev/faker.js/lib/locales/en/address/city_prefix.js":93}],656:[function(require,module,exports){
module.exports=require(94)
},{"/Users/a/dev/faker.js/lib/locales/en/address/city_suffix.js":94}],657:[function(require,module,exports){
module["exports"] = [
  "Afganistan",
  "Afgánsky islamský štát",
  "Albánsko",
  "Albánska republika",
  "Alžírsko",
  "Alžírska demokratická ľudová republika",
  "Andorra",
  "Andorrské kniežatsvo",
  "Angola",
  "Angolská republika",
  "Antigua a Barbuda",
  "Antigua a Barbuda",
  "Argentína",
  "Argentínska republika",
  "Arménsko",
  "Arménska republika",
  "Austrália",
  "Austrálsky zväz",
  "Azerbajdžan",
  "Azerbajdžanská republika",
  "Bahamy",
  "Bahamské spoločenstvo",
  "Bahrajn",
  "Bahrajnské kráľovstvo",
  "Bangladéš",
  "Bangladéšska ľudová republika",
  "Barbados",
  "Barbados",
  "Belgicko",
  "Belgické kráľovstvo",
  "Belize",
  "Belize",
  "Benin",
  "Beninská republika",
  "Bhután",
  "Bhutánske kráľovstvo",
  "Bielorusko",
  "Bieloruská republika",
  "Bolívia",
  "Bolívijská republika",
  "Bosna a Hercegovina",
  "Republika Bosny a Hercegoviny",
  "Botswana",
  "Botswanská republika",
  "Brazília",
  "Brazílska federatívna republika",
  "Brunej",
  "Brunejský sultanát",
  "Bulharsko",
  "Bulharská republika",
  "Burkina Faso",
  "Burkina Faso",
  "Burundi",
  "Burundská republika",
  "Cyprus",
  "Cyperská republika",
  "Čad",
  "Republika Čad",
  "Česko",
  "Česká republika",
  "Čína",
  "Čínska ľudová republika",
  "Dánsko",
  "Dánsko kráľovstvo",
  "Dominika",
  "Spoločenstvo Dominika",
  "Dominikánska republika",
  "Dominikánska republika",
  "Džibutsko",
  "Džibutská republika",
  "Egypt",
  "Egyptská arabská republika",
  "Ekvádor",
  "Ekvádorská republika",
  "Eritrea",
  "Eritrejský štát",
  "Estónsko",
  "Estónska republika",
  "Etiópia",
  "Etiópska federatívna demokratická republika",
  "Fidži",
  "Republika ostrovy Fidži",
  "Filipíny",
  "Filipínska republika",
  "Fínsko",
  "Fínska republika",
  "Francúzsko",
  "Francúzska republika",
  "Gabon",
  "Gabonská republika",
  "Gambia",
  "Gambijská republika",
  "Ghana",
  "Ghanská republika",
  "Grécko",
  "Helénska republika",
  "Grenada",
  "Grenada",
  "Gruzínsko",
  "Gruzínsko",
  "Guatemala",
  "Guatemalská republika",
  "Guinea",
  "Guinejská republika",
  "Guinea-Bissau",
  "Republika Guinea-Bissau",
  "Guayana",
  "Guayanská republika",
  "Haiti",
  "Republika Haiti",
  "Holandsko",
  "Holandské kráľovstvo",
  "Honduras",
  "Honduraská republika",
  "Chile",
  "Čílska republika",
  "Chorvátsko",
  "Chorvátska republika",
  "India",
  "Indická republika",
  "Indonézia",
  "Indonézska republika",
  "Irak",
  "Iracká republika",
  "Irán",
  "Iránska islamská republika",
  "Island",
  "Islandská republika",
  "Izrael",
  "Štát Izrael",
  "Írsko",
  "Írska republika",
  "Jamajka",
  "Jamajka",
  "Japonsko",
  "Japonsko",
  "Jemen",
  "Jemenská republika",
  "Jordánsko",
  "Jordánske hášimovské kráľovstvo",
  "Južná Afrika",
  "Juhoafrická republika",
  "Kambodža",
  "Kambodžské kráľovstvo",
  "Kamerun",
  "Kamerunská republika",
  "Kanada",
  "Kanada",
  "Kapverdy",
  "Kapverdská republika",
  "Katar",
  "Štát Katar",
  "Kazachstan",
  "Kazašská republika",
  "Keňa",
  "Kenská republika",
  "Kirgizsko",
  "Kirgizská republika",
  "Kiribati",
  "Kiribatská republika",
  "Kolumbia",
  "Kolumbijská republika",
  "Komory",
  "Komorská únia",
  "Kongo",
  "Konžská demokratická republika",
  "Kongo (\"Brazzaville\")",
  "Konžská republika",
  "Kórea (\"Južná\")",
  "Kórejská republika",
  "Kórea (\"Severná\")",
  "Kórejská ľudovodemokratická republika",
  "Kostarika",
  "Kostarická republika",
  "Kuba",
  "Kubánska republika",
  "Kuvajt",
  "Kuvajtský štát",
  "Laos",
  "Laoská ľudovodemokratická republika",
  "Lesotho",
  "Lesothské kráľovstvo",
  "Libanon",
  "Libanonská republika",
  "Libéria",
  "Libérijská republika",
  "Líbya",
  "Líbyjská arabská ľudová socialistická džamáhírija",
  "Lichtenštajnsko",
  "Lichtenštajnské kniežatstvo",
  "Litva",
  "Litovská republika",
  "Lotyšsko",
  "Lotyšská republika",
  "Luxembursko",
  "Luxemburské veľkovojvodstvo",
  "Macedónsko",
  "Macedónska republika",
  "Madagaskar",
  "Madagaskarská republika",
  "Maďarsko",
  "Maďarská republika",
  "Malajzia",
  "Malajzia",
  "Malawi",
  "Malawijská republika",
  "Maldivy",
  "Maldivská republika",
  "Mali",
  "Malijská republika",
  "Malta",
  "Malta",
  "Maroko",
  "Marocké kráľovstvo",
  "Marshallove ostrovy",
  "Republika Marshallových ostrovy",
  "Mauritánia",
  "Mauritánska islamská republika",
  "Maurícius",
  "Maurícijská republika",
  "Mexiko",
  "Spojené štáty mexické",
  "Mikronézia",
  "Mikronézske federatívne štáty",
  "Mjanmarsko",
  "Mjanmarský zväz",
  "Moldavsko",
  "Moldavská republika",
  "Monako",
  "Monacké kniežatstvo",
  "Mongolsko",
  "Mongolsko",
  "Mozambik",
  "Mozambická republika",
  "Namíbia",
  "Namíbijská republika",
  "Nauru",
  "Naurská republika",
  "Nemecko",
  "Nemecká spolková republika",
  "Nepál",
  "Nepálske kráľovstvo",
  "Niger",
  "Nigerská republika",
  "Nigéria",
  "Nigérijská federatívna republika",
  "Nikaragua",
  "Nikaragujská republika",
  "Nový Zéland",
  "Nový Zéland",
  "Nórsko",
  "Nórske kráľovstvo",
  "Omán",
  "Ománsky sultanát",
  "Pakistan",
  "Pakistanská islamská republika",
  "Palau",
  "Palauská republika",
  "Panama",
  "Panamská republika",
  "Papua-Nová Guinea",
  "Nezávislý štát Papua-Nová Guinea",
  "Paraguaj",
  "Paraguajská republika",
  "Peru",
  "Peruánska republika",
  "Pobrežie Slonoviny",
  "Republika Pobrežie Slonoviny",
  "Poľsko",
  "Poľská republika",
  "Portugalsko",
  "Portugalská republika",
  "Rakúsko",
  "Rakúska republika",
  "Rovníková Guinea",
  "Republika Rovníková Guinea",
  "Rumunsko",
  "Rumunsko",
  "Rusko",
  "Ruská federácia",
  "Rwanda",
  "Rwandská republika",
  "Salvádor",
  "Salvádorská republika",
  "Samoa",
  "Nezávislý štát Samoa",
  "San Maríno",
  "Sanmarínska republika",
  "Saudská Arábia",
  "Kráľovstvo Saudskej Arábie",
  "Senegal",
  "Senegalská republika",
  "Seychely",
  "Seychelská republika",
  "Sierra Leone",
  "Republika Sierra Leone",
  "Singapur",
  "Singapurska republika",
  "Slovensko",
  "Slovenská republika",
  "Slovinsko",
  "Slovinská republika",
  "Somálsko",
  "Somálska demokratická republika",
  "Spojené arabské emiráty",
  "Spojené arabské emiráty",
  "Spojené štáty americké",
  "Spojené štáty americké",
  "Srbsko a Čierna Hora",
  "Srbsko a Čierna Hora",
  "Srí Lanka",
  "Demokratická socialistická republika Srí Lanka",
  "Stredoafrická republika",
  "Stredoafrická republika",
  "Sudán",
  "Sudánska republika",
  "Surinam",
  "Surinamská republika",
  "Svazijsko",
  "Svazijské kráľovstvo",
  "Svätá Lucia",
  "Svätá Lucia",
  "Svätý Krištof a Nevis",
  "Federácia Svätý Krištof a Nevis",
  "Sv. Tomáš a Princov Ostrov",
  "Demokratická republika Svätý Tomáš a Princov Ostrov",
  "Sv. Vincent a Grenadíny",
  "Svätý Vincent a Grenadíny",
  "Sýria",
  "Sýrska arabská republika",
  "Šalamúnove ostrovy",
  "Šalamúnove ostrovy",
  "Španielsko",
  "Španielske kráľovstvo",
  "Švajčiarsko",
  "Švajčiarska konfederácia",
  "Švédsko",
  "Švédske kráľovstvo",
  "Tadžikistan",
  "Tadžická republika",
  "Taliansko",
  "Talianska republika",
  "Tanzánia",
  "Tanzánijská zjednotená republika",
  "Thajsko",
  "Thajské kráľovstvo",
  "Togo",
  "Tožská republika",
  "Tonga",
  "Tonžské kráľovstvo",
  "Trinidad a Tobago",
  "Republika Trinidad a Tobago",
  "Tunisko",
  "Tuniská republika",
  "Turecko",
  "Turecká republika",
  "Turkménsko",
  "Turkménsko",
  "Tuvalu",
  "Tuvalu",
  "Uganda",
  "Ugandská republika",
  "Ukrajina",
  "Uruguaj",
  "Uruguajská východná republika",
  "Uzbekistan",
  "Vanuatu",
  "Vanuatská republika",
  "Vatikán",
  "Svätá Stolica",
  "Veľká Británia",
  "Spojené kráľovstvo Veľkej Británie a Severného Írska",
  "Venezuela",
  "Venezuelská bolívarovská republika",
  "Vietnam",
  "Vietnamská socialistická republika",
  "Východný Timor",
  "Demokratická republika Východný Timor",
  "Zambia",
  "Zambijská republika",
  "Zimbabwe",
  "Zimbabwianska republika"
];

},{}],658:[function(require,module,exports){
module["exports"] = [
  "Slovensko"
];

},{}],659:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city_name = require("./city_name");
address.city = require("./city");
address.street = require("./street");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":652,"./city":653,"./city_name":654,"./city_prefix":655,"./city_suffix":656,"./country":657,"./default_country":658,"./postcode":660,"./secondary_address":661,"./state":662,"./state_abbr":663,"./street":664,"./street_address":665,"./street_name":666,"./time_zone":667}],660:[function(require,module,exports){
module["exports"] = [
  "#####",
  "### ##",
  "## ###"
];

},{}],661:[function(require,module,exports){
module.exports=require(102)
},{"/Users/a/dev/faker.js/lib/locales/en/address/secondary_address.js":102}],662:[function(require,module,exports){
module.exports=require(425)
},{"/Users/a/dev/faker.js/lib/locales/it/name/suffix.js":425}],663:[function(require,module,exports){
module.exports=require(425)
},{"/Users/a/dev/faker.js/lib/locales/it/name/suffix.js":425}],664:[function(require,module,exports){
module["exports"] = [
  "Adámiho",
  "Ahoj",
  "Albína Brunovského",
  "Albrechtova",
  "Alejová",
  "Alešova",
  "Alibernetová",
  "Alžbetínska",
  "Alžbety Gwerkovej",
  "Ambroseho",
  "Ambrušova",
  "Americká",
  "Americké námestie",
  "Americké námestie",
  "Andreja Mráza",
  "Andreja Plávku",
  "Andrusovova",
  "Anenská",
  "Anenská",
  "Antolská",
  "Astronomická",
  "Astrová",
  "Azalková",
  "Azovská",
  "Babuškova",
  "Bachova",
  "Bajkalská",
  "Bajkalská",
  "Bajkalská",
  "Bajkalská",
  "Bajkalská",
  "Bajkalská",
  "Bajzova",
  "Bancíkovej",
  "Banícka",
  "Baníkova",
  "Banskobystrická",
  "Banšelova",
  "Bardejovská",
  "Bartókova",
  "Bartoňova",
  "Bartoškova",
  "Baštová",
  "Bazová",
  "Bažantia",
  "Beblavého",
  "Beckovská",
  "Bedľová",
  "Belániková",
  "Belehradská",
  "Belinského",
  "Belopotockého",
  "Beňadická",
  "Bencúrova",
  "Benediktiho",
  "Beniakova",
  "Bernolákova",
  "Beskydská",
  "Betliarska",
  "Bezručova",
  "Biela",
  "Bielkova",
  "Björnsonova",
  "Blagoevova",
  "Blatnická",
  "Blumentálska",
  "Blyskáčová",
  "Bočná",
  "Bohrova",
  "Bohúňova",
  "Bojnická",
  "Borodáčova",
  "Borská",
  "Bosákova",
  "Botanická",
  "Bottova",
  "Boženy Němcovej",
  "Bôrik",
  "Bradáčova",
  "Bradlianska",
  "Brančská",
  "Bratská",
  "Brestová",
  "Brezovská",
  "Briežky",
  "Brnianska",
  "Brodná",
  "Brodská",
  "Broskyňová",
  "Břeclavská",
  "Budatínska",
  "Budatínska",
  "Budatínska",
  "Búdkova  cesta",
  "Budovateľská",
  "Budyšínska",
  "Budyšínska",
  "Buková",
  "Bukureštská",
  "Bulharská",
  "Bulíkova",
  "Bystrého",
  "Bzovícka",
  "Cablkova",
  "Cesta na Červený most",
  "Cesta na Červený most",
  "Cesta na Senec",
  "Cikkerova",
  "Cintorínska",
  "Cintulova",
  "Cukrová",
  "Cyrilova",
  "Čajakova",
  "Čajkovského",
  "Čaklovská",
  "Čalovská",
  "Čapajevova",
  "Čapkova",
  "Čárskeho",
  "Čavojského",
  "Čečinová",
  "Čelakovského",
  "Čerešňová",
  "Černyševského",
  "Červeňova",
  "Česká",
  "Československých par",
  "Čipkárska",
  "Čmelíkova",
  "Čmeľovec",
  "Čulenova",
  "Daliborovo námestie",
  "Dankovského",
  "Dargovská",
  "Ďatelinová",
  "Daxnerovo námestie",
  "Devínska cesta",
  "Dlhé diely I.",
  "Dlhé diely II.",
  "Dlhé diely III.",
  "Dobrovičova",
  "Dobrovičova",
  "Dobrovského",
  "Dobšinského",
  "Dohnalova",
  "Dohnányho",
  "Doležalova",
  "Dolná",
  "Dolnozemská cesta",
  "Domkárska",
  "Domové role",
  "Donnerova",
  "Donovalova",
  "Dostojevského rad",
  "Dr. Vladimíra Clemen",
  "Drevená",
  "Drieňová",
  "Drieňová",
  "Drieňová",
  "Drotárska cesta",
  "Drotárska cesta",
  "Drotárska cesta",
  "Družicová",
  "Družstevná",
  "Dubnická",
  "Dubová",
  "Dúbravská cesta",
  "Dudova",
  "Dulovo námestie",
  "Dulovo námestie",
  "Dunajská",
  "Dvořákovo nábrežie",
  "Edisonova",
  "Einsteinova",
  "Elektrárenská",
  "Exnárova",
  "F. Kostku",
  "Fadruszova",
  "Fajnorovo nábrežie",
  "Fándlyho",
  "Farebná",
  "Farská",
  "Farského",
  "Fazuľová",
  "Fedinova",
  "Ferienčíkova",
  "Fialkové údolie",
  "Fibichova",
  "Filiálne nádražie",
  "Flöglova",
  "Floriánske námestie",
  "Fraňa Kráľa",
  "Francisciho",
  "Francúzskych partizá",
  "Františkánska",
  "Františkánske námest",
  "Furdekova",
  "Furdekova",
  "Gabčíkova",
  "Gagarinova",
  "Gagarinova",
  "Gagarinova",
  "Gajova",
  "Galaktická",
  "Galandova",
  "Gallova",
  "Galvaniho",
  "Gašparíkova",
  "Gaštanová",
  "Gavlovičova",
  "Gemerská",
  "Gercenova",
  "Gessayova",
  "Gettingová",
  "Godrova",
  "Gogoľova",
  "Goláňova",
  "Gondova",
  "Goralská",
  "Gorazdova",
  "Gorkého",
  "Gregorovej",
  "Grösslingova",
  "Gruzínska",
  "Gunduličova",
  "Gusevova",
  "Haanova",
  "Haburská",
  "Halašova",
  "Hálkova",
  "Hálova",
  "Hamuliakova",
  "Hanácka",
  "Handlovská",
  "Hany Meličkovej",
  "Harmanecká",
  "Hasičská",
  "Hattalova",
  "Havlíčkova",
  "Havrania",
  "Haydnova",
  "Herlianska",
  "Herlianska",
  "Heydukova",
  "Hlaváčikova",
  "Hlavatého",
  "Hlavné námestie",
  "Hlboká cesta",
  "Hlboká cesta",
  "Hlivová",
  "Hlučínska",
  "Hodálova",
  "Hodžovo námestie",
  "Holekova",
  "Holíčska",
  "Hollého",
  "Holubyho",
  "Hontianska",
  "Horárska",
  "Horné Židiny",
  "Horská",
  "Horská",
  "Hrad",
  "Hradné údolie",
  "Hrachová",
  "Hraničná",
  "Hrebendova",
  "Hríbová",
  "Hriňovská",
  "Hrobákova",
  "Hrobárska",
  "Hroboňova",
  "Hudecova",
  "Humenské námestie",
  "Hummelova",
  "Hurbanovo námestie",
  "Hurbanovo námestie",
  "Hviezdoslavovo námes",
  "Hýrošova",
  "Chalupkova",
  "Chemická",
  "Chlumeckého",
  "Chorvátska",
  "Chorvátska",
  "Iľjušinova",
  "Ilkovičova",
  "Inovecká",
  "Inovecká",
  "Iskerníková",
  "Ivana Horvátha",
  "Ivánska cesta",
  "J.C.Hronského",
  "Jabloňová",
  "Jadrová",
  "Jakabova",
  "Jakubovo námestie",
  "Jamnického",
  "Jána Stanislava",
  "Janáčkova",
  "Jančova",
  "Janíkove role",
  "Jankolova",
  "Jánošíkova",
  "Jánoškova",
  "Janotova",
  "Jánska",
  "Jantárová cesta",
  "Jarabinková",
  "Jarná",
  "Jaroslavova",
  "Jarošova",
  "Jaseňová",
  "Jasná",
  "Jasovská",
  "Jastrabia",
  "Jašíkova",
  "Javorinská",
  "Javorová",
  "Jazdecká",
  "Jedlíkova",
  "Jégého",
  "Jelačičova",
  "Jelenia",
  "Jesenná",
  "Jesenského",
  "Jiráskova",
  "Jiskrova",
  "Jozefská",
  "Junácka",
  "Jungmannova",
  "Jurigovo námestie",
  "Jurovského",
  "Jurská",
  "Justičná",
  "K lomu",
  "K Železnej studienke",
  "Kalinčiakova",
  "Kamenárska",
  "Kamenné námestie",
  "Kapicova",
  "Kapitulská",
  "Kapitulský dvor",
  "Kapucínska",
  "Kapušianska",
  "Karadžičova",
  "Karadžičova",
  "Karadžičova",
  "Karadžičova",
  "Karloveská",
  "Karloveské rameno",
  "Karpatská",
  "Kašmírska",
  "Kaštielska",
  "Kaukazská",
  "Kempelenova",
  "Kežmarské námestie",
  "Kladnianska",
  "Klariská",
  "Kláštorská",
  "Klatovská",
  "Klatovská",
  "Klemensova",
  "Klincová",
  "Klobučnícka",
  "Klokočova",
  "Kľukatá",
  "Kmeťovo námestie",
  "Koceľova",
  "Kočánkova",
  "Kohútova",
  "Kolárska",
  "Kolískova",
  "Kollárovo námestie",
  "Kollárovo námestie",
  "Kolmá",
  "Komárňanská",
  "Komárnická",
  "Komárnická",
  "Komenského námestie",
  "Kominárska",
  "Komonicová",
  "Konopná",
  "Konvalinková",
  "Konventná",
  "Kopanice",
  "Kopčianska",
  "Koperníkova",
  "Korabinského",
  "Koreničova",
  "Kostlivého",
  "Kostolná",
  "Košická",
  "Košická",
  "Košická",
  "Kováčska",
  "Kovorobotnícka",
  "Kozia",
  "Koziarka",
  "Kozmonautická",
  "Krajná",
  "Krakovská",
  "Kráľovské údolie",
  "Krasinského",
  "Kraskova",
  "Krásna",
  "Krásnohorská",
  "Krasovského",
  "Krátka",
  "Krčméryho",
  "Kremnická",
  "Kresánkova",
  "Krivá",
  "Križkova",
  "Krížna",
  "Krížna",
  "Krížna",
  "Krížna",
  "Krmanova",
  "Krompašská",
  "Krupinská",
  "Krupkova",
  "Kubániho",
  "Kubínska",
  "Kuklovská",
  "Kukučínova",
  "Kukuričná",
  "Kulíškova",
  "Kultúrna",
  "Kupeckého",
  "Kúpeľná",
  "Kutlíkova",
  "Kutuzovova",
  "Kuzmányho",
  "Kvačalova",
  "Kvetná",
  "Kýčerského",
  "Kyjevská",
  "Kysucká",
  "Laborecká",
  "Lackova",
  "Ladislava Sáru",
  "Ľadová",
  "Lachova",
  "Ľaliová",
  "Lamačská cesta",
  "Lamačská cesta",
  "Lamanského",
  "Landererova",
  "Langsfeldova",
  "Ľanová",
  "Laskomerského",
  "Laučekova",
  "Laurinská",
  "Lazaretská",
  "Lazaretská",
  "Legerského",
  "Legionárska",
  "Legionárska",
  "Lehockého",
  "Lehockého",
  "Lenardova",
  "Lermontovova",
  "Lesná",
  "Leškova",
  "Letecká",
  "Letisko M.R.Štefánik",
  "Letná",
  "Levárska",
  "Levická",
  "Levočská",
  "Lidická",
  "Lietavská",
  "Lichardova",
  "Lipová",
  "Lipovinová",
  "Liptovská",
  "Listová",
  "Líščie nivy",
  "Líščie údolie",
  "Litovská",
  "Lodná",
  "Lombardiniho",
  "Lomonosovova",
  "Lopenícka",
  "Lovinského",
  "Ľubietovská",
  "Ľubinská",
  "Ľubľanská",
  "Ľubochnianska",
  "Ľubovnianska",
  "Lúčna",
  "Ľudové námestie",
  "Ľudovíta Fullu",
  "Luhačovická",
  "Lužická",
  "Lužná",
  "Lýcejná",
  "Lykovcová",
  "M. Hella",
  "Magnetová",
  "Macharova",
  "Majakovského",
  "Majerníkova",
  "Májkova",
  "Májová",
  "Makovického",
  "Malá",
  "Malé pálenisko",
  "Malinová",
  "Malý Draždiak",
  "Malý trh",
  "Mamateyova",
  "Mamateyova",
  "Mánesovo námestie",
  "Mariánska",
  "Marie Curie-Sklodows",
  "Márie Medveďovej",
  "Markova",
  "Marótyho",
  "Martákovej",
  "Martinčekova",
  "Martinčekova",
  "Martinengova",
  "Martinská",
  "Mateja Bela",
  "Matejkova",
  "Matičná",
  "Matúšova",
  "Medená",
  "Medzierka",
  "Medzilaborecká",
  "Merlotová",
  "Mesačná",
  "Mestská",
  "Meteorová",
  "Metodova",
  "Mickiewiczova",
  "Mierová",
  "Michalská",
  "Mikovíniho",
  "Mikulášska",
  "Miletičova",
  "Miletičova",
  "Mišíkova",
  "Mišíkova",
  "Mišíkova",
  "Mliekárenská",
  "Mlynarovičova",
  "Mlynská dolina",
  "Mlynská dolina",
  "Mlynská dolina",
  "Mlynské luhy",
  "Mlynské nivy",
  "Mlynské nivy",
  "Mlynské nivy",
  "Mlynské nivy",
  "Mlynské nivy",
  "Mlyny",
  "Modranská",
  "Mojmírova",
  "Mokráň záhon",
  "Mokrohájska cesta",
  "Moldavská",
  "Molecova",
  "Moravská",
  "Moskovská",
  "Most SNP",
  "Mostová",
  "Mošovského",
  "Motýlia",
  "Moyzesova",
  "Mozartova",
  "Mraziarenská",
  "Mudroňova",
  "Mudroňova",
  "Mudroňova",
  "Muchovo námestie",
  "Murgašova",
  "Muškátová",
  "Muštová",
  "Múzejná",
  "Myjavská",
  "Mýtna",
  "Mýtna",
  "Na Baránku",
  "Na Brezinách",
  "Na Hrebienku",
  "Na Kalvárii",
  "Na Kampárke",
  "Na kopci",
  "Na križovatkách",
  "Na lánoch",
  "Na paši",
  "Na piesku",
  "Na Riviére",
  "Na Sitine",
  "Na Slavíne",
  "Na stráni",
  "Na Štyridsiatku",
  "Na úvrati",
  "Na vŕšku",
  "Na výslní",
  "Nábělkova",
  "Nábrežie arm. gen. L",
  "Nábrežná",
  "Nad Dunajom",
  "Nad lomom",
  "Nad lúčkami",
  "Nad lúčkami",
  "Nad ostrovom",
  "Nad Sihoťou",
  "Námestie 1. mája",
  "Námestie Alexandra D",
  "Námestie Biely kríž",
  "Námestie Hraničiarov",
  "Námestie Jána Pavla",
  "Námestie Ľudovíta Št",
  "Námestie Martina Ben",
  "Nám. M.R.Štefánika",
  "Námestie slobody",
  "Námestie slobody",
  "Námestie SNP",
  "Námestie SNP",
  "Námestie sv. Františ",
  "Narcisová",
  "Nedbalova",
  "Nekrasovova",
  "Neronetová",
  "Nerudova",
  "Nevädzová",
  "Nezábudková",
  "Niťová",
  "Nitrianska",
  "Nížinná",
  "Nobelova",
  "Nobelovo námestie",
  "Nová",
  "Nová Rožňavská",
  "Novackého",
  "Nové pálenisko",
  "Nové záhrady I",
  "Nové záhrady II",
  "Nové záhrady III",
  "Nové záhrady IV",
  "Nové záhrady V",
  "Nové záhrady VI",
  "Nové záhrady VII",
  "Novinárska",
  "Novobanská",
  "Novohradská",
  "Novosvetská",
  "Novosvetská",
  "Novosvetská",
  "Obežná",
  "Obchodná",
  "Očovská",
  "Odbojárov",
  "Odborárska",
  "Odborárske námestie",
  "Odborárske námestie",
  "Ohnicová",
  "Okánikova",
  "Okružná",
  "Olbrachtova",
  "Olejkárska",
  "Ondavská",
  "Ondrejovova",
  "Oravská",
  "Orechová cesta",
  "Orechový rad",
  "Oriešková",
  "Ormisova",
  "Osadná",
  "Ostravská",
  "Ostredková",
  "Osuského",
  "Osvetová",
  "Otonelská",
  "Ovručská",
  "Ovsištské námestie",
  "Pajštúnska",
  "Palackého",
  "Palárikova",
  "Palárikova",
  "Pálavská",
  "Palisády",
  "Palisády",
  "Palisády",
  "Palkovičova",
  "Panenská",
  "Pankúchova",
  "Panónska cesta",
  "Panská",
  "Papánkovo námestie",
  "Papraďová",
  "Páričkova",
  "Parková",
  "Partizánska",
  "Pasienky",
  "Paulínyho",
  "Pavlovičova",
  "Pavlovova",
  "Pavlovská",
  "Pažického",
  "Pažítková",
  "Pečnianska",
  "Pernecká",
  "Pestovateľská",
  "Peterská",
  "Petzvalova",
  "Pezinská",
  "Piesočná",
  "Piešťanská",
  "Pifflova",
  "Pilárikova",
  "Pionierska",
  "Pivoňková",
  "Planckova",
  "Planét",
  "Plátenícka",
  "Pluhová",
  "Plynárenská",
  "Plzenská",
  "Pobrežná",
  "Pod Bôrikom",
  "Pod Kalváriou",
  "Pod lesom",
  "Pod Rovnicami",
  "Pod vinicami",
  "Podhorského",
  "Podjavorinskej",
  "Podlučinského",
  "Podniková",
  "Podtatranského",
  "Pohronská",
  "Polárna",
  "Poloreckého",
  "Poľná",
  "Poľská",
  "Poludníková",
  "Porubského",
  "Poštová",
  "Považská",
  "Povraznícka",
  "Povraznícka",
  "Pražská",
  "Predstaničné námesti",
  "Prepoštská",
  "Prešernova",
  "Prešovská",
  "Prešovská",
  "Prešovská",
  "Pri Bielom kríži",
  "Pri dvore",
  "Pri Dynamitke",
  "Pri Habánskom mlyne",
  "Pri hradnej studni",
  "Pri seči",
  "Pri Starej Prachárni",
  "Pri Starom háji",
  "Pri Starom Mýte",
  "Pri strelnici",
  "Pri Suchom mlyne",
  "Pri zvonici",
  "Pribinova",
  "Pribinova",
  "Pribinova",
  "Pribišova",
  "Pribylinská",
  "Priečna",
  "Priekopy",
  "Priemyselná",
  "Priemyselná",
  "Prievozská",
  "Prievozská",
  "Prievozská",
  "Príkopova",
  "Primaciálne námestie",
  "Prístav",
  "Prístavná",
  "Prokofievova",
  "Prokopa Veľkého",
  "Prokopova",
  "Prúdová",
  "Prvosienková",
  "Púpavová",
  "Pustá",
  "Puškinova",
  "Račianska",
  "Račianska",
  "Račianske mýto",
  "Radarová",
  "Rádiová",
  "Radlinského",
  "Radničná",
  "Radničné námestie",
  "Radvanská",
  "Rajská",
  "Raketová",
  "Rákosová",
  "Rastislavova",
  "Rázusovo nábrežie",
  "Repná",
  "Rešetkova",
  "Revolučná",
  "Révová",
  "Revúcka",
  "Rezedová",
  "Riazanská",
  "Riazanská",
  "Ribayová",
  "Riečna",
  "Rigeleho",
  "Rízlingová",
  "Riznerova",
  "Robotnícka",
  "Romanova",
  "Röntgenova",
  "Rosná",
  "Rovná",
  "Rovniankova",
  "Rovníková",
  "Rozmarínová",
  "Rožňavská",
  "Rožňavská",
  "Rožňavská",
  "Rubinsteinova",
  "Rudnayovo námestie",
  "Rumančeková",
  "Rusovská cesta",
  "Ružičková",
  "Ružinovská",
  "Ružinovská",
  "Ružinovská",
  "Ružomberská",
  "Ružová dolina",
  "Ružová dolina",
  "Rybárska brána",
  "Rybné námestie",
  "Rýdziková",
  "Sabinovská",
  "Sabinovská",
  "Sad Janka Kráľa",
  "Sadová",
  "Sartorisova",
  "Sasinkova",
  "Seberíniho",
  "Sečovská",
  "Sedlárska",
  "Sedmokrásková",
  "Segnerova",
  "Sekulská",
  "Semianova",
  "Senická",
  "Senná",
  "Schillerova",
  "Schody pri starej vo",
  "Sibírska",
  "Sienkiewiczova",
  "Silvánska",
  "Sinokvetná",
  "Skalická cesta",
  "Skalná",
  "Sklenárova",
  "Sklenárska",
  "Sládkovičova",
  "Sladová",
  "Slávičie údolie",
  "Slavín",
  "Slepá",
  "Sliačska",
  "Sliezska",
  "Slivková",
  "Slnečná",
  "Slovanská",
  "Slovinská",
  "Slovnaftská",
  "Slowackého",
  "Smetanova",
  "Smikova",
  "Smolenická",
  "Smolnícka",
  "Smrečianska",
  "Soferove schody",
  "Socháňova",
  "Sokolská",
  "Solivarská",
  "Sološnická",
  "Somolického",
  "Somolického",
  "Sosnová",
  "Spišská",
  "Spojná",
  "Spoločenská",
  "Sputniková",
  "Sreznevského",
  "Srnčia",
  "Stachanovská",
  "Stálicová",
  "Staničná",
  "Stará Černicová",
  "Stará Ivánska cesta",
  "Stará Prievozská",
  "Stará Vajnorská",
  "Stará vinárska",
  "Staré Grunty",
  "Staré ihrisko",
  "Staré záhrady",
  "Starhradská",
  "Starohájska",
  "Staromestská",
  "Staroturský chodník",
  "Staviteľská",
  "Stodolova",
  "Stoklasová",
  "Strakova",
  "Strážnická",
  "Strážny dom",
  "Strečnianska",
  "Stredná",
  "Strelecká",
  "Strmá cesta",
  "Strojnícka",
  "Stropkovská",
  "Struková",
  "Studená",
  "Stuhová",
  "Súbežná",
  "Súhvezdná",
  "Suché mýto",
  "Suchohradská",
  "Súkennícka",
  "Súľovská",
  "Sumbalova",
  "Súmračná",
  "Súťažná",
  "Svätého Vincenta",
  "Svätoplukova",
  "Svätoplukova",
  "Svätovojtešská",
  "Svetlá",
  "Svíbová",
  "Svidnícka",
  "Svoradova",
  "Svrčia",
  "Syslia",
  "Šafárikovo námestie",
  "Šafárikovo námestie",
  "Šafránová",
  "Šagátova",
  "Šalviová",
  "Šancová",
  "Šancová",
  "Šancová",
  "Šancová",
  "Šándorova",
  "Šarišská",
  "Šášovská",
  "Šaštínska",
  "Ševčenkova",
  "Šintavská",
  "Šípková",
  "Škarniclova",
  "Školská",
  "Škovránčia",
  "Škultétyho",
  "Šoltésovej",
  "Špieszova",
  "Špitálska",
  "Športová",
  "Šrobárovo námestie",
  "Šťastná",
  "Štedrá",
  "Štefánikova",
  "Štefánikova",
  "Štefánikova",
  "Štefanovičova",
  "Štefunkova",
  "Štetinova",
  "Štiavnická",
  "Štúrova",
  "Štyndlova",
  "Šulekova",
  "Šulekova",
  "Šulekova",
  "Šumavská",
  "Šuňavcova",
  "Šustekova",
  "Švabinského",
  "Tabaková",
  "Tablicova",
  "Táborská",
  "Tajovského",
  "Tallerova",
  "Tehelná",
  "Technická",
  "Tekovská",
  "Telocvičná",
  "Tematínska",
  "Teplická",
  "Terchovská",
  "Teslova",
  "Tetmayerova",
  "Thurzova",
  "Tichá",
  "Tilgnerova",
  "Timravina",
  "Tobrucká",
  "Tokajícka",
  "Tolstého",
  "Tománkova",
  "Tomášikova",
  "Tomášikova",
  "Tomášikova",
  "Tomášikova",
  "Tomášikova",
  "Topoľčianska",
  "Topoľová",
  "Továrenská",
  "Trebišovská",
  "Trebišovská",
  "Trebišovská",
  "Trenčianska",
  "Treskoňova",
  "Trnavská cesta",
  "Trnavská cesta",
  "Trnavská cesta",
  "Trnavská cesta",
  "Trnavská cesta",
  "Trnavské mýto",
  "Tŕňová",
  "Trojdomy",
  "Tučkova",
  "Tupolevova",
  "Turbínova",
  "Turčianska",
  "Turnianska",
  "Tvarožkova",
  "Tylova",
  "Tyršovo nábrežie",
  "Údernícka",
  "Údolná",
  "Uhorková",
  "Ukrajinská",
  "Ulica 29. augusta",
  "Ulica 29. augusta",
  "Ulica 29. augusta",
  "Ulica 29. augusta",
  "Ulica Imricha Karvaš",
  "Ulica Jozefa Krónera",
  "Ulica Viktora Tegelh",
  "Úprkova",
  "Úradnícka",
  "Uránová",
  "Urbánkova",
  "Ursínyho",
  "Uršulínska",
  "Úzka",
  "V záhradách",
  "Vajanského nábrežie",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Valašská",
  "Valchárska",
  "Vansovej",
  "Vápenná",
  "Varínska",
  "Varšavská",
  "Varšavská",
  "Vavilovova",
  "Vavrínova",
  "Vazovova",
  "Včelárska",
  "Velehradská",
  "Veltlínska",
  "Ventúrska",
  "Veterná",
  "Veternicová",
  "Vetvová",
  "Viedenská cesta",
  "Viedenská cesta",
  "Vietnamská",
  "Vígľašská",
  "Vihorlatská",
  "Viktorínova",
  "Vilová",
  "Vincenta Hložníka",
  "Vínna",
  "Vlastenecké námestie",
  "Vlčkova",
  "Vlčkova",
  "Vlčkova",
  "Vodný vrch",
  "Votrubova",
  "Vrábeľská",
  "Vrakunská cesta",
  "Vranovská",
  "Vretenová",
  "Vrchná",
  "Vrútocká",
  "Vyhliadka",
  "Vyhnianska cesta",
  "Vysoká",
  "Vyšehradská",
  "Vyšná",
  "Wattova",
  "Wilsonova",
  "Wolkrova",
  "Za Kasárňou",
  "Za sokolovňou",
  "Za Stanicou",
  "Za tehelňou",
  "Záborského",
  "Zadunajská cesta",
  "Záhorácka",
  "Záhradnícka",
  "Záhradnícka",
  "Záhradnícka",
  "Záhradnícka",
  "Záhrebská",
  "Záhrebská",
  "Zálužická",
  "Zámocká",
  "Zámocké schody",
  "Zámočnícka",
  "Západná",
  "Západný rad",
  "Záporožská",
  "Zátišie",
  "Závodníkova",
  "Zelená",
  "Zelinárska",
  "Zimná",
  "Zlaté piesky",
  "Zlaté schody",
  "Znievska",
  "Zohorská",
  "Zochova",
  "Zrinského",
  "Zvolenská",
  "Žabí majer",
  "Žabotova",
  "Žehrianska",
  "Železná",
  "Železničiarska",
  "Žellova",
  "Žiarska",
  "Židovská",
  "Žilinská",
  "Žilinská",
  "Živnostenská",
  "Žižkova",
  "Župné námestie"
];

},{}],665:[function(require,module,exports){
module.exports=require(25)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_address.js":25}],666:[function(require,module,exports){
module["exports"] = [
  "#{street}"
];

},{}],667:[function(require,module,exports){
module.exports=require(108)
},{"/Users/a/dev/faker.js/lib/locales/en/address/time_zone.js":108}],668:[function(require,module,exports){
module.exports=require(123)
},{"/Users/a/dev/faker.js/lib/locales/en/company/adjective.js":123}],669:[function(require,module,exports){
module["exports"] = [
  "clicks-and-mortar",
  "value-added",
  "vertical",
  "proactive",
  "robust",
  "revolutionary",
  "scalable",
  "leading-edge",
  "innovative",
  "intuitive",
  "strategic",
  "e-business",
  "mission-critical",
  "sticky",
  "one-to-one",
  "24/7",
  "end-to-end",
  "global",
  "B2B",
  "B2C",
  "granular",
  "frictionless",
  "virtual",
  "viral",
  "dynamic",
  "24/365",
  "best-of-breed",
  "killer",
  "magnetic",
  "bleeding-edge",
  "web-enabled",
  "interactive",
  "dot-com",
  "sexy",
  "back-end",
  "real-time",
  "efficient",
  "front-end",
  "distributed",
  "seamless",
  "extensible",
  "turn-key",
  "world-class",
  "open-source",
  "cross-platform",
  "cross-media",
  "synergistic",
  "bricks-and-clicks",
  "out-of-the-box",
  "enterprise",
  "integrated",
  "impactful",
  "wireless",
  "transparent",
  "next-generation",
  "cutting-edge",
  "user-centric",
  "visionary",
  "customized",
  "ubiquitous",
  "plug-and-play",
  "collaborative",
  "compelling",
  "holistic",
  "rich",
  "synergies",
  "web-readiness",
  "paradigms",
  "markets",
  "partnerships",
  "infrastructures",
  "platforms",
  "initiatives",
  "channels",
  "eyeballs",
  "communities",
  "ROI",
  "solutions",
  "e-tailers",
  "e-services",
  "action-items",
  "portals",
  "niches",
  "technologies",
  "content",
  "vortals",
  "supply-chains",
  "convergence",
  "relationships",
  "architectures",
  "interfaces",
  "e-markets",
  "e-commerce",
  "systems",
  "bandwidth",
  "infomediaries",
  "models",
  "mindshare",
  "deliverables",
  "users",
  "schemas",
  "networks",
  "applications",
  "metrics",
  "e-business",
  "functionalities",
  "experiences",
  "web services",
  "methodologies"
];

},{}],670:[function(require,module,exports){
module.exports=require(126)
},{"/Users/a/dev/faker.js/lib/locales/en/company/bs_verb.js":126}],671:[function(require,module,exports){
module.exports=require(127)
},{"/Users/a/dev/faker.js/lib/locales/en/company/descriptor.js":127}],672:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjective = require("./adjective");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./adjective":668,"./bs_noun":669,"./bs_verb":670,"./descriptor":671,"./name":673,"./noun":674,"./suffix":675}],673:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name} #{suffix}",
  "#{Name.man_last_name} a #{Name.man_last_name} #{suffix}"
];

},{}],674:[function(require,module,exports){
module.exports=require(130)
},{"/Users/a/dev/faker.js/lib/locales/en/company/noun.js":130}],675:[function(require,module,exports){
module["exports"] = [
  "s.r.o.",
  "a.s.",
  "v.o.s."
];

},{}],676:[function(require,module,exports){
var sk = {};
module['exports'] = sk;
sk.title = "Slovakian";
sk.address = require("./address");
sk.company = require("./company");
sk.internet = require("./internet");
sk.lorem = require("./lorem");
sk.name = require("./name");
sk.phone_number = require("./phone_number");

},{"./address":659,"./company":672,"./internet":679,"./lorem":680,"./name":683,"./phone_number":693}],677:[function(require,module,exports){
module["exports"] = [
  "sk",
  "com",
  "net",
  "eu",
  "org"
];

},{}],678:[function(require,module,exports){
module["exports"] = [
  "gmail.com",
  "zoznam.sk",
  "azet.sk"
];

},{}],679:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":677,"./free_email":678,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],680:[function(require,module,exports){
module.exports=require(158)
},{"./supplemental":681,"./words":682,"/Users/a/dev/faker.js/lib/locales/en/lorem/index.js":158}],681:[function(require,module,exports){
module.exports=require(159)
},{"/Users/a/dev/faker.js/lib/locales/en/lorem/supplemental.js":159}],682:[function(require,module,exports){
module.exports=require(39)
},{"/Users/a/dev/faker.js/lib/locales/de/lorem/words.js":39}],683:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.man_first_name = require("./man_first_name");
name.woman_first_name = require("./woman_first_name");
name.man_last_name = require("./man_last_name");
name.woman_last_name = require("./woman_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./man_first_name":684,"./man_last_name":685,"./name":686,"./prefix":687,"./suffix":688,"./title":689,"./woman_first_name":690,"./woman_last_name":691}],684:[function(require,module,exports){
module["exports"] = [
  "Drahoslav",
  "Severín",
  "Alexej",
  "Ernest",
  "Rastislav",
  "Radovan",
  "Dobroslav",
  "Dalibor",
  "Vincent",
  "Miloš",
  "Timotej",
  "Gejza",
  "Bohuš",
  "Alfonz",
  "Gašpar",
  "Emil",
  "Erik",
  "Blažej",
  "Zdenko",
  "Dezider",
  "Arpád",
  "Valentín",
  "Pravoslav",
  "Jaromír",
  "Roman",
  "Matej",
  "Frederik",
  "Viktor",
  "Alexander",
  "Radomír",
  "Albín",
  "Bohumil",
  "Kazimír",
  "Fridrich",
  "Radoslav",
  "Tomáš",
  "Alan",
  "Branislav",
  "Bruno",
  "Gregor",
  "Vlastimil",
  "Boleslav",
  "Eduard",
  "Jozef",
  "Víťazoslav",
  "Blahoslav",
  "Beňadik",
  "Adrián",
  "Gabriel",
  "Marián",
  "Emanuel",
  "Miroslav",
  "Benjamín",
  "Hugo",
  "Richard",
  "Izidor",
  "Zoltán",
  "Albert",
  "Igor",
  "Július",
  "Aleš",
  "Fedor",
  "Rudolf",
  "Valér",
  "Marcel",
  "Ervín",
  "Slavomír",
  "Vojtech",
  "Juraj",
  "Marek",
  "Jaroslav",
  "Žigmund",
  "Florián",
  "Roland",
  "Pankrác",
  "Servác",
  "Bonifác",
  "Svetozár",
  "Bernard",
  "Júlia",
  "Urban",
  "Dušan",
  "Viliam",
  "Ferdinand",
  "Norbert",
  "Róbert",
  "Medard",
  "Zlatko",
  "Anton",
  "Vasil",
  "Vít",
  "Adolf",
  "Vratislav",
  "Alfréd",
  "Alojz",
  "Ján",
  "Tadeáš",
  "Ladislav",
  "Peter",
  "Pavol",
  "Miloslav",
  "Prokop",
  "Cyril",
  "Metod",
  "Patrik",
  "Oliver",
  "Ivan",
  "Kamil",
  "Henrich",
  "Drahomír",
  "Bohuslav",
  "Iľja",
  "Daniel",
  "Vladimír",
  "Jakub",
  "Krištof",
  "Ignác",
  "Gustáv",
  "Jerguš",
  "Dominik",
  "Oskar",
  "Vavrinec",
  "Ľubomír",
  "Mojmír",
  "Leonard",
  "Tichomír",
  "Filip",
  "Bartolomej",
  "Ľudovít",
  "Samuel",
  "Augustín",
  "Belo",
  "Oleg",
  "Bystrík",
  "Ctibor",
  "Ľudomil",
  "Konštantín",
  "Ľuboslav",
  "Matúš",
  "Móric",
  "Ľuboš",
  "Ľubor",
  "Vladislav",
  "Cyprián",
  "Václav",
  "Michal",
  "Jarolím",
  "Arnold",
  "Levoslav",
  "František",
  "Dionýz",
  "Maximilián",
  "Koloman",
  "Boris",
  "Lukáš",
  "Kristián",
  "Vendelín",
  "Sergej",
  "Aurel",
  "Demeter",
  "Denis",
  "Hubert",
  "Karol",
  "Imrich",
  "René",
  "Bohumír",
  "Teodor",
  "Tibor",
  "Maroš",
  "Martin",
  "Svätopluk",
  "Stanislav",
  "Leopold",
  "Eugen",
  "Félix",
  "Klement",
  "Kornel",
  "Milan",
  "Vratko",
  "Ondrej",
  "Andrej",
  "Edmund",
  "Oldrich",
  "Oto",
  "Mikuláš",
  "Ambróz",
  "Radúz",
  "Bohdan",
  "Adam",
  "Štefan",
  "Dávid",
  "Silvester"
];

},{}],685:[function(require,module,exports){
module["exports"] = [
  "Antal",
  "Babka",
  "Bahna",
  "Bahno",
  "Baláž",
  "Baran",
  "Baranka",
  "Bartovič",
  "Bartoš",
  "Bača",
  "Bernolák",
  "Beňo",
  "Bicek",
  "Bielik",
  "Blaho",
  "Bondra",
  "Bosák",
  "Boška",
  "Brezina",
  "Bukovský",
  "Chalupka",
  "Chudík",
  "Cibula",
  "Cibulka",
  "Cibuľa",
  "Cyprich",
  "Cíger",
  "Danko",
  "Daňko",
  "Daňo",
  "Debnár",
  "Dej",
  "Dekýš",
  "Doležal",
  "Dočolomanský",
  "Droppa",
  "Dubovský",
  "Dudek",
  "Dula",
  "Dulla",
  "Dusík",
  "Dvonč",
  "Dzurjanin",
  "Dávid",
  "Fabian",
  "Fabián",
  "Fajnor",
  "Farkašovský",
  "Fico",
  "Filc",
  "Filip",
  "Finka",
  "Ftorek",
  "Gašpar",
  "Gašparovič",
  "Gocník",
  "Gregor",
  "Greguš",
  "Grznár",
  "Hablák",
  "Habšuda",
  "Halda",
  "Haluška",
  "Halák",
  "Hanko",
  "Hanzal",
  "Haščák",
  "Heretik",
  "Hečko",
  "Hlaváček",
  "Hlinka",
  "Holub",
  "Holuby",
  "Hossa",
  "Hoza",
  "Hraško",
  "Hric",
  "Hrmo",
  "Hrušovský",
  "Huba",
  "Ihnačák",
  "Janeček",
  "Janoška",
  "Jantošovič",
  "Janík",
  "Janček",
  "Jedľovský",
  "Jendek",
  "Jonata",
  "Jurina",
  "Jurkovič",
  "Jurík",
  "Jánošík",
  "Kafenda",
  "Kaliský",
  "Karul",
  "Keníž",
  "Klapka",
  "Kmeť",
  "Kolesár",
  "Kollár",
  "Kolnik",
  "Kolník",
  "Kolár",
  "Korec",
  "Kostka",
  "Kostrec",
  "Kováč",
  "Kováčik",
  "Koza",
  "Kočiš",
  "Krajíček",
  "Krajči",
  "Krajčo",
  "Krajčovič",
  "Krajčír",
  "Králik",
  "Krúpa",
  "Kubík",
  "Kyseľ",
  "Kállay",
  "Labuda",
  "Lepšík",
  "Lipták",
  "Lisický",
  "Lubina",
  "Lukáč",
  "Lupták",
  "Líška",
  "Madej",
  "Majeský",
  "Malachovský",
  "Malíšek",
  "Mamojka",
  "Marcinko",
  "Marián",
  "Masaryk",
  "Maslo",
  "Matiaško",
  "Medveď",
  "Melcer",
  "Mečiar",
  "Michalík",
  "Mihalik",
  "Mihál",
  "Mihálik",
  "Mikloško",
  "Mikulík",
  "Mikuš",
  "Mikúš",
  "Milota",
  "Mináč",
  "Mišík",
  "Mojžiš",
  "Mokroš",
  "Mora",
  "Moravčík",
  "Mydlo",
  "Nemec",
  "Nitra",
  "Novák",
  "Obšut",
  "Ondruš",
  "Otčenáš",
  "Pauko",
  "Pavlikovský",
  "Pavúk",
  "Pašek",
  "Paška",
  "Paško",
  "Pelikán",
  "Petrovický",
  "Petruška",
  "Peško",
  "Plch",
  "Plekanec",
  "Podhradský",
  "Podkonický",
  "Poliak",
  "Pupák",
  "Rak",
  "Repiský",
  "Romančík",
  "Rus",
  "Ružička",
  "Rybníček",
  "Rybár",
  "Rybárik",
  "Samson",
  "Sedliak",
  "Senko",
  "Sklenka",
  "Skokan",
  "Skutecký",
  "Slašťan",
  "Sloboda",
  "Slobodník",
  "Slota",
  "Slovák",
  "Smrek",
  "Stodola",
  "Straka",
  "Strnisko",
  "Svrbík",
  "Sámel",
  "Sýkora",
  "Tatar",
  "Tatarka",
  "Tatár",
  "Tatárka",
  "Thomka",
  "Tomeček",
  "Tomka",
  "Tomko",
  "Truben",
  "Turčok",
  "Uram",
  "Urblík",
  "Vajcík",
  "Vajda",
  "Valach",
  "Valachovič",
  "Valent",
  "Valuška",
  "Vanek",
  "Vesel",
  "Vicen",
  "Višňovský",
  "Vlach",
  "Vojtek",
  "Vydarený",
  "Zajac",
  "Zima",
  "Zimka",
  "Záborský",
  "Zúbrik",
  "Čapkovič",
  "Čaplovič",
  "Čarnogurský",
  "Čierny",
  "Čobrda",
  "Ďaďo",
  "Ďurica",
  "Ďuriš",
  "Šidlo",
  "Šimonovič",
  "Škriniar",
  "Škultéty",
  "Šmajda",
  "Šoltés",
  "Šoltýs",
  "Štefan",
  "Štefanka",
  "Šulc",
  "Šurka",
  "Švehla",
  "Šťastný"
];

},{}],686:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{man_first_name} #{man_last_name}",
  "#{prefix} #{woman_first_name} #{woman_last_name}",
  "#{man_first_name} #{man_last_name} #{suffix}",
  "#{woman_first_name} #{woman_last_name} #{suffix}",
  "#{man_first_name} #{man_last_name}",
  "#{man_first_name} #{man_last_name}",
  "#{man_first_name} #{man_last_name}",
  "#{woman_first_name} #{woman_last_name}",
  "#{woman_first_name} #{woman_last_name}",
  "#{woman_first_name} #{woman_last_name}"
];

},{}],687:[function(require,module,exports){
module["exports"] = [
  "Ing.",
  "Mgr.",
  "JUDr.",
  "MUDr."
];

},{}],688:[function(require,module,exports){
module["exports"] = [
  "Phd."
];

},{}],689:[function(require,module,exports){
module.exports=require(167)
},{"/Users/a/dev/faker.js/lib/locales/en/name/title.js":167}],690:[function(require,module,exports){
module["exports"] = [
  "Alexandra",
  "Karina",
  "Daniela",
  "Andrea",
  "Antónia",
  "Bohuslava",
  "Dáša",
  "Malvína",
  "Kristína",
  "Nataša",
  "Bohdana",
  "Drahomíra",
  "Sára",
  "Zora",
  "Tamara",
  "Ema",
  "Tatiana",
  "Erika",
  "Veronika",
  "Agáta",
  "Dorota",
  "Vanda",
  "Zoja",
  "Gabriela",
  "Perla",
  "Ida",
  "Liana",
  "Miloslava",
  "Vlasta",
  "Lívia",
  "Eleonóra",
  "Etela",
  "Romana",
  "Zlatica",
  "Anežka",
  "Bohumila",
  "Františka",
  "Angela",
  "Matilda",
  "Svetlana",
  "Ľubica",
  "Alena",
  "Soňa",
  "Vieroslava",
  "Zita",
  "Miroslava",
  "Irena",
  "Milena",
  "Estera",
  "Justína",
  "Dana",
  "Danica",
  "Jela",
  "Jaroslava",
  "Jarmila",
  "Lea",
  "Anastázia",
  "Galina",
  "Lesana",
  "Hermína",
  "Monika",
  "Ingrida",
  "Viktória",
  "Blažena",
  "Žofia",
  "Sofia",
  "Gizela",
  "Viola",
  "Gertrúda",
  "Zina",
  "Júlia",
  "Juliana",
  "Želmíra",
  "Ela",
  "Vanesa",
  "Iveta",
  "Vilma",
  "Petronela",
  "Žaneta",
  "Xénia",
  "Karolína",
  "Lenka",
  "Laura",
  "Stanislava",
  "Margaréta",
  "Dobroslava",
  "Blanka",
  "Valéria",
  "Paulína",
  "Sidónia",
  "Adriána",
  "Beáta",
  "Petra",
  "Melánia",
  "Diana",
  "Berta",
  "Patrícia",
  "Lujza",
  "Amália",
  "Milota",
  "Nina",
  "Margita",
  "Kamila",
  "Dušana",
  "Magdaléna",
  "Oľga",
  "Anna",
  "Hana",
  "Božena",
  "Marta",
  "Libuša",
  "Božidara",
  "Dominika",
  "Hortenzia",
  "Jozefína",
  "Štefánia",
  "Ľubomíra",
  "Zuzana",
  "Darina",
  "Marcela",
  "Milica",
  "Elena",
  "Helena",
  "Lýdia",
  "Anabela",
  "Jana",
  "Silvia",
  "Nikola",
  "Ružena",
  "Nora",
  "Drahoslava",
  "Linda",
  "Melinda",
  "Rebeka",
  "Rozália",
  "Regína",
  "Alica",
  "Marianna",
  "Miriama",
  "Martina",
  "Mária",
  "Jolana",
  "Ľudomila",
  "Ľudmila",
  "Olympia",
  "Eugénia",
  "Ľuboslava",
  "Zdenka",
  "Edita",
  "Michaela",
  "Stela",
  "Viera",
  "Natália",
  "Eliška",
  "Brigita",
  "Valentína",
  "Terézia",
  "Vladimíra",
  "Hedviga",
  "Uršuľa",
  "Alojza",
  "Kvetoslava",
  "Sabína",
  "Dobromila",
  "Klára",
  "Simona",
  "Aurélia",
  "Denisa",
  "Renáta",
  "Irma",
  "Agnesa",
  "Klaudia",
  "Alžbeta",
  "Elvíra",
  "Cecília",
  "Emília",
  "Katarína",
  "Henrieta",
  "Bibiána",
  "Barbora",
  "Marína",
  "Izabela",
  "Hilda",
  "Otília",
  "Lucia",
  "Branislava",
  "Bronislava",
  "Ivica",
  "Albína",
  "Kornélia",
  "Sláva",
  "Slávka",
  "Judita",
  "Dagmara",
  "Adela",
  "Nadežda",
  "Eva",
  "Filoména",
  "Ivana",
  "Milada"
];

},{}],691:[function(require,module,exports){
module["exports"] = [
  "Antalová",
  "Babková",
  "Bahnová",
  "Balážová",
  "Baranová",
  "Baranková",
  "Bartovičová",
  "Bartošová",
  "Bačová",
  "Bernoláková",
  "Beňová",
  "Biceková",
  "Bieliková",
  "Blahová",
  "Bondrová",
  "Bosáková",
  "Bošková",
  "Brezinová",
  "Bukovská",
  "Chalupková",
  "Chudíková",
  "Cibulová",
  "Cibulková",
  "Cyprichová",
  "Cígerová",
  "Danková",
  "Daňková",
  "Daňová",
  "Debnárová",
  "Dejová",
  "Dekýšová",
  "Doležalová",
  "Dočolomanská",
  "Droppová",
  "Dubovská",
  "Dudeková",
  "Dulová",
  "Dullová",
  "Dusíková",
  "Dvončová",
  "Dzurjaninová",
  "Dávidová",
  "Fabianová",
  "Fabiánová",
  "Fajnorová",
  "Farkašovská",
  "Ficová",
  "Filcová",
  "Filipová",
  "Finková",
  "Ftoreková",
  "Gašparová",
  "Gašparovičová",
  "Gocníková",
  "Gregorová",
  "Gregušová",
  "Grznárová",
  "Habláková",
  "Habšudová",
  "Haldová",
  "Halušková",
  "Haláková",
  "Hanková",
  "Hanzalová",
  "Haščáková",
  "Heretiková",
  "Hečková",
  "Hlaváčeková",
  "Hlinková",
  "Holubová",
  "Holubyová",
  "Hossová",
  "Hozová",
  "Hrašková",
  "Hricová",
  "Hrmová",
  "Hrušovská",
  "Hubová",
  "Ihnačáková",
  "Janečeková",
  "Janošková",
  "Jantošovičová",
  "Janíková",
  "Jančeková",
  "Jedľovská",
  "Jendeková",
  "Jonatová",
  "Jurinová",
  "Jurkovičová",
  "Juríková",
  "Jánošíková",
  "Kafendová",
  "Kaliská",
  "Karulová",
  "Kenížová",
  "Klapková",
  "Kmeťová",
  "Kolesárová",
  "Kollárová",
  "Kolniková",
  "Kolníková",
  "Kolárová",
  "Korecová",
  "Kostkaová",
  "Kostrecová",
  "Kováčová",
  "Kováčiková",
  "Kozová",
  "Kočišová",
  "Krajíčeková",
  "Krajčová",
  "Krajčovičová",
  "Krajčírová",
  "Králiková",
  "Krúpová",
  "Kubíková",
  "Kyseľová",
  "Kállayová",
  "Labudová",
  "Lepšíková",
  "Liptáková",
  "Lisická",
  "Lubinová",
  "Lukáčová",
  "Luptáková",
  "Líšková",
  "Madejová",
  "Majeská",
  "Malachovská",
  "Malíšeková",
  "Mamojková",
  "Marcinková",
  "Mariánová",
  "Masaryková",
  "Maslová",
  "Matiašková",
  "Medveďová",
  "Melcerová",
  "Mečiarová",
  "Michalíková",
  "Mihaliková",
  "Mihálová",
  "Miháliková",
  "Miklošková",
  "Mikulíková",
  "Mikušová",
  "Mikúšová",
  "Milotová",
  "Mináčová",
  "Mišíková",
  "Mojžišová",
  "Mokrošová",
  "Morová",
  "Moravčíková",
  "Mydlová",
  "Nemcová",
  "Nováková",
  "Obšutová",
  "Ondrušová",
  "Otčenášová",
  "Pauková",
  "Pavlikovská",
  "Pavúková",
  "Pašeková",
  "Pašková",
  "Pelikánová",
  "Petrovická",
  "Petrušková",
  "Pešková",
  "Plchová",
  "Plekanecová",
  "Podhradská",
  "Podkonická",
  "Poliaková",
  "Pupáková",
  "Raková",
  "Repiská",
  "Romančíková",
  "Rusová",
  "Ružičková",
  "Rybníčeková",
  "Rybárová",
  "Rybáriková",
  "Samsonová",
  "Sedliaková",
  "Senková",
  "Sklenková",
  "Skokanová",
  "Skutecká",
  "Slašťanová",
  "Slobodová",
  "Slobodníková",
  "Slotová",
  "Slováková",
  "Smreková",
  "Stodolová",
  "Straková",
  "Strnisková",
  "Svrbíková",
  "Sámelová",
  "Sýkorová",
  "Tatarová",
  "Tatarková",
  "Tatárová",
  "Tatárkaová",
  "Thomková",
  "Tomečeková",
  "Tomková",
  "Trubenová",
  "Turčoková",
  "Uramová",
  "Urblíková",
  "Vajcíková",
  "Vajdová",
  "Valachová",
  "Valachovičová",
  "Valentová",
  "Valušková",
  "Vaneková",
  "Veselová",
  "Vicenová",
  "Višňovská",
  "Vlachová",
  "Vojteková",
  "Vydarená",
  "Zajacová",
  "Zimová",
  "Zimková",
  "Záborská",
  "Zúbriková",
  "Čapkovičová",
  "Čaplovičová",
  "Čarnogurská",
  "Čierná",
  "Čobrdová",
  "Ďaďová",
  "Ďuricová",
  "Ďurišová",
  "Šidlová",
  "Šimonovičová",
  "Škriniarová",
  "Škultétyová",
  "Šmajdová",
  "Šoltésová",
  "Šoltýsová",
  "Štefanová",
  "Štefanková",
  "Šulcová",
  "Šurková",
  "Švehlová",
  "Šťastná"
];

},{}],692:[function(require,module,exports){
module["exports"] = [
  "09## ### ###",
  "0## #### ####",
  "0# #### ####",
  "+421 ### ### ###"
];

},{}],693:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":692,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],694:[function(require,module,exports){
module.exports=require(361)
},{"/Users/a/dev/faker.js/lib/locales/ge/address/building_number.js":361}],695:[function(require,module,exports){
module["exports"] = [
  "#{city_prefix}#{city_suffix}"
];

},{}],696:[function(require,module,exports){
module["exports"] = [
  "Söder",
  "Norr",
  "Väst",
  "Öster",
  "Aling",
  "Ar",
  "Av",
  "Bo",
  "Br",
  "Bå",
  "Ek",
  "En",
  "Esk",
  "Fal",
  "Gäv",
  "Göte",
  "Ha",
  "Helsing",
  "Karl",
  "Krist",
  "Kram",
  "Kung",
  "Kö",
  "Lyck",
  "Ny"
];

},{}],697:[function(require,module,exports){
module["exports"] = [
  "stad",
  "land",
  "sås",
  "ås",
  "holm",
  "tuna",
  "sta",
  "berg",
  "löv",
  "borg",
  "mora",
  "hamn",
  "fors",
  "köping",
  "by",
  "hult",
  "torp",
  "fred",
  "vik"
];

},{}],698:[function(require,module,exports){
module["exports"] = [
  "s Väg",
  "s Gata"
];

},{}],699:[function(require,module,exports){
module["exports"] = [
  "Ryssland",
  "Kanada",
  "Kina",
  "USA",
  "Brasilien",
  "Australien",
  "Indien",
  "Argentina",
  "Kazakstan",
  "Algeriet",
  "DR Kongo",
  "Danmark",
  "Färöarna",
  "Grönland",
  "Saudiarabien",
  "Mexiko",
  "Indonesien",
  "Sudan",
  "Libyen",
  "Iran",
  "Mongoliet",
  "Peru",
  "Tchad",
  "Niger",
  "Angola",
  "Mali",
  "Sydafrika",
  "Colombia",
  "Etiopien",
  "Bolivia",
  "Mauretanien",
  "Egypten",
  "Tanzania",
  "Nigeria",
  "Venezuela",
  "Namibia",
  "Pakistan",
  "Moçambique",
  "Turkiet",
  "Chile",
  "Zambia",
  "Marocko",
  "Västsahara",
  "Burma",
  "Afghanistan",
  "Somalia",
  "Centralafrikanska republiken",
  "Sydsudan",
  "Ukraina",
  "Botswana",
  "Madagaskar",
  "Kenya",
  "Frankrike",
  "Franska Guyana",
  "Jemen",
  "Thailand",
  "Spanien",
  "Turkmenistan",
  "Kamerun",
  "Papua Nya Guinea",
  "Sverige",
  "Uzbekistan",
  "Irak",
  "Paraguay",
  "Zimbabwe",
  "Japan",
  "Tyskland",
  "Kongo",
  "Finland",
  "Malaysia",
  "Vietnam",
  "Norge",
  "Svalbard",
  "Jan Mayen",
  "Elfenbenskusten",
  "Polen",
  "Italien",
  "Filippinerna",
  "Ecuador",
  "Burkina Faso",
  "Nya Zeeland",
  "Gabon",
  "Guinea",
  "Storbritannien",
  "Ghana",
  "Rumänien",
  "Laos",
  "Uganda",
  "Guyana",
  "Oman",
  "Vitryssland",
  "Kirgizistan",
  "Senegal",
  "Syrien",
  "Kambodja",
  "Uruguay",
  "Tunisien",
  "Surinam",
  "Nepal",
  "Bangladesh",
  "Tadzjikistan",
  "Grekland",
  "Nicaragua",
  "Eritrea",
  "Nordkorea",
  "Malawi",
  "Benin",
  "Honduras",
  "Liberia",
  "Bulgarien",
  "Kuba",
  "Guatemala",
  "Island",
  "Sydkorea",
  "Ungern",
  "Portugal",
  "Jordanien",
  "Serbien",
  "Azerbajdzjan",
  "Österrike",
  "Förenade Arabemiraten",
  "Tjeckien",
  "Panama",
  "Sierra Leone",
  "Irland",
  "Georgien",
  "Sri Lanka",
  "Litauen",
  "Lettland",
  "Togo",
  "Kroatien",
  "Bosnien och Hercegovina",
  "Costa Rica",
  "Slovakien",
  "Dominikanska republiken",
  "Bhutan",
  "Estland",
  "Danmark",
  "Färöarna",
  "Grönland",
  "Nederländerna",
  "Schweiz",
  "Guinea-Bissau",
  "Taiwan",
  "Moldavien",
  "Belgien",
  "Lesotho",
  "Armenien",
  "Albanien",
  "Salomonöarna",
  "Ekvatorialguinea",
  "Burundi",
  "Haiti",
  "Rwanda",
  "Makedonien",
  "Djibouti",
  "Belize",
  "Israel",
  "El Salvador",
  "Slovenien",
  "Fiji",
  "Kuwait",
  "Swaziland",
  "Timor-Leste",
  "Montenegro",
  "Bahamas",
  "Vanuatu",
  "Qatar",
  "Gambia",
  "Jamaica",
  "Kosovo",
  "Libanon",
  "Cypern",
  "Brunei",
  "Trinidad och Tobago",
  "Kap Verde",
  "Samoa",
  "Luxemburg",
  "Komorerna",
  "Mauritius",
  "São Tomé och Príncipe",
  "Kiribati",
  "Dominica",
  "Tonga",
  "Mikronesiens federerade stater",
  "Singapore",
  "Bahrain",
  "Saint Lucia",
  "Andorra",
  "Palau",
  "Seychellerna",
  "Antigua och Barbuda",
  "Barbados",
  "Saint Vincent och Grenadinerna",
  "Grenada",
  "Malta",
  "Maldiverna",
  "Saint Kitts och Nevis",
  "Marshallöarna",
  "Liechtenstein",
  "San Marino",
  "Tuvalu",
  "Nauru",
  "Monaco",
  "Vatikanstaten"
];

},{}],700:[function(require,module,exports){
module["exports"] = [
  "Sverige"
];

},{}],701:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.common_street_suffix = require("./common_street_suffix");
address.street_prefix = require("./street_prefix");
address.street_root = require("./street_root");
address.street_suffix = require("./street_suffix");
address.state = require("./state");
address.city = require("./city");
address.street_name = require("./street_name");
address.postcode = require("./postcode");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":694,"./city":695,"./city_prefix":696,"./city_suffix":697,"./common_street_suffix":698,"./country":699,"./default_country":700,"./postcode":702,"./secondary_address":703,"./state":704,"./street_address":705,"./street_name":706,"./street_prefix":707,"./street_root":708,"./street_suffix":709}],702:[function(require,module,exports){
module.exports=require(279)
},{"/Users/a/dev/faker.js/lib/locales/es/address/postcode.js":279}],703:[function(require,module,exports){
module["exports"] = [
  "Lgh. ###",
  "Hus ###"
];

},{}],704:[function(require,module,exports){
module["exports"] = [
  "Blekinge",
  "Dalarna",
  "Gotland",
  "Gävleborg",
  "Göteborg",
  "Halland",
  "Jämtland",
  "Jönköping",
  "Kalmar",
  "Kronoberg",
  "Norrbotten",
  "Skaraborg",
  "Skåne",
  "Stockholm",
  "Södermanland",
  "Uppsala",
  "Värmland",
  "Västerbotten",
  "Västernorrland",
  "Västmanland",
  "Älvsborg",
  "Örebro",
  "Östergötland"
];

},{}],705:[function(require,module,exports){
module.exports=require(25)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_address.js":25}],706:[function(require,module,exports){
module.exports=require(482)
},{"/Users/a/dev/faker.js/lib/locales/nb_NO/address/street_name.js":482}],707:[function(require,module,exports){
module["exports"] = [
  "Västra",
  "Östra",
  "Norra",
  "Södra",
  "Övre",
  "Undre"
];

},{}],708:[function(require,module,exports){
module["exports"] = [
  "Björk",
  "Järnvägs",
  "Ring",
  "Skol",
  "Skogs",
  "Ny",
  "Gran",
  "Idrotts",
  "Stor",
  "Kyrk",
  "Industri",
  "Park",
  "Strand",
  "Skol",
  "Trädgård",
  "Ängs",
  "Kyrko",
  "Villa",
  "Ek",
  "Kvarn",
  "Stations",
  "Back",
  "Furu",
  "Gen",
  "Fabriks",
  "Åker",
  "Bäck",
  "Asp"
];

},{}],709:[function(require,module,exports){
module["exports"] = [
  "vägen",
  "gatan",
  "gränden",
  "gärdet",
  "allén"
];

},{}],710:[function(require,module,exports){
module["exports"] = [
  56,
  62,
  59
];

},{}],711:[function(require,module,exports){
module["exports"] = [
  "#{common_cell_prefix}-###-####"
];

},{}],712:[function(require,module,exports){
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.common_cell_prefix = require("./common_cell_prefix");
cell_phone.formats = require("./formats");

},{"./common_cell_prefix":710,"./formats":711}],713:[function(require,module,exports){
module["exports"] = [
  "vit",
  "silver",
  "grå",
  "svart",
  "röd",
  "grön",
  "blå",
  "gul",
  "lila",
  "indigo",
  "guld",
  "brun",
  "rosa",
  "purpur",
  "korall"
];

},{}],714:[function(require,module,exports){
module["exports"] = [
  "Böcker",
  "Filmer",
  "Musik",
  "Spel",
  "Elektronik",
  "Datorer",
  "Hem",
  "Trädgård",
  "Verktyg",
  "Livsmedel",
  "Hälsa",
  "Skönhet",
  "Leksaker",
  "Klädsel",
  "Skor",
  "Smycken",
  "Sport"
];

},{}],715:[function(require,module,exports){
arguments[4][121][0].apply(exports,arguments)
},{"./color":713,"./department":714,"./product_name":716,"/Users/a/dev/faker.js/lib/locales/en/commerce/index.js":121}],716:[function(require,module,exports){
module["exports"] = {
  "adjective": [
    "Liten",
    "Ergonomisk",
    "Robust",
    "Intelligent",
    "Söt",
    "Otrolig",
    "Fatastisk",
    "Praktisk",
    "Slimmad",
    "Grym"
  ],
  "material": [
    "Stål",
    "Metall",
    "Trä",
    "Betong",
    "Plast",
    "Bomul",
    "Grnit",
    "Gummi",
    "Latex"
  ],
  "product": [
    "Stol",
    "Bil",
    "Dator",
    "Handskar",
    "Pants",
    "Shirt",
    "Table",
    "Shoes",
    "Hat"
  ]
};

},{}],717:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"./name":718,"./suffix":719,"/Users/a/dev/faker.js/lib/locales/de_CH/company/index.js":83}],718:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} #{suffix}"
];

},{}],719:[function(require,module,exports){
module["exports"] = [
  "Gruppen",
  "AB",
  "HB",
  "Group",
  "Investment",
  "Kommanditbolag",
  "Aktiebolag"
];

},{}],720:[function(require,module,exports){
var sv = {};
module['exports'] = sv;
sv.title = "Swedish";
sv.address = require("./address");
sv.company = require("./company");
sv.internet = require("./internet");
sv.name = require("./name");
sv.phone_number = require("./phone_number");
sv.cell_phone = require("./cell_phone");
sv.commerce = require("./commerce");
sv.team = require("./team");

},{"./address":701,"./cell_phone":712,"./commerce":715,"./company":717,"./internet":722,"./name":725,"./phone_number":731,"./team":732}],721:[function(require,module,exports){
module["exports"] = [
  "se",
  "nu",
  "info",
  "com",
  "org"
];

},{}],722:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":721,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],723:[function(require,module,exports){
module["exports"] = [
  "Erik",
  "Lars",
  "Karl",
  "Anders",
  "Per",
  "Johan",
  "Nils",
  "Lennart",
  "Emil",
  "Hans"
];

},{}],724:[function(require,module,exports){
module["exports"] = [
  "Maria",
  "Anna",
  "Margareta",
  "Elisabeth",
  "Eva",
  "Birgitta",
  "Kristina",
  "Karin",
  "Elisabet",
  "Marie"
];

},{}],725:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name_women = require("./first_name_women");
name.first_name_men = require("./first_name_men");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name_men":723,"./first_name_women":724,"./last_name":726,"./name":727,"./prefix":728,"./title":729}],726:[function(require,module,exports){
module["exports"] = [
  "Johansson",
  "Andersson",
  "Karlsson",
  "Nilsson",
  "Eriksson",
  "Larsson",
  "Olsson",
  "Persson",
  "Svensson",
  "Gustafsson"
];

},{}],727:[function(require,module,exports){
module["exports"] = [
  "#{first_name_women} #{last_name}",
  "#{first_name_men} #{last_name}",
  "#{first_name_women} #{last_name}",
  "#{first_name_men} #{last_name}",
  "#{first_name_women} #{last_name}",
  "#{first_name_men} #{last_name}",
  "#{prefix} #{first_name_men} #{last_name}",
  "#{prefix} #{first_name_women} #{last_name}"
];

},{}],728:[function(require,module,exports){
module["exports"] = [
  "Dr.",
  "Prof.",
  "PhD."
];

},{}],729:[function(require,module,exports){
module.exports=require(167)
},{"/Users/a/dev/faker.js/lib/locales/en/name/title.js":167}],730:[function(require,module,exports){
module["exports"] = [
  "####-#####",
  "####-######"
];

},{}],731:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":730,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],732:[function(require,module,exports){
var team = {};
module['exports'] = team;
team.suffix = require("./suffix");
team.name = require("./name");

},{"./name":733,"./suffix":734}],733:[function(require,module,exports){
module["exports"] = [
  "#{Address.city} #{suffix}"
];

},{}],734:[function(require,module,exports){
module["exports"] = [
  "IF",
  "FF",
  "BK",
  "HK",
  "AIF",
  "SK",
  "FC",
  "SK",
  "BoIS",
  "FK",
  "BIS",
  "FIF",
  "IK"
];

},{}],735:[function(require,module,exports){
module.exports=require(14)
},{"/Users/a/dev/faker.js/lib/locales/de/address/building_number.js":14}],736:[function(require,module,exports){
module["exports"] = [
  "Adana",
  "Adıyaman",
  "Afyon",
  "Ağrı",
  "Amasya",
  "Ankara",
  "Antalya",
  "Artvin",
  "Aydın",
  "Balıkesir",
  "Bilecik",
  "Bingöl",
  "Bitlis",
  "Bolu",
  "Burdur",
  "Bursa",
  "Çanakkale",
  "Çankırı",
  "Çorum",
  "Denizli",
  "Diyarbakır",
  "Edirne",
  "Elazığ",
  "Erzincan",
  "Erzurum",
  "Eskişehir",
  "Gaziantep",
  "Giresun",
  "Gümüşhane",
  "Hakkari",
  "Hatay",
  "Isparta",
  "İçel (Mersin)",
  "İstanbul",
  "İzmir",
  "Kars",
  "Kastamonu",
  "Kayseri",
  "Kırklareli",
  "Kırşehir",
  "Kocaeli",
  "Konya",
  "Kütahya",
  "Malatya",
  "Manisa",
  "K.maraş",
  "Mardin",
  "Muğla",
  "Muş",
  "Nevşehir",
  "Niğde",
  "Ordu",
  "Rize",
  "Sakarya",
  "Samsun",
  "Siirt",
  "Sinop",
  "Sivas",
  "Tekirdağ",
  "Tokat",
  "Trabzon",
  "Tunceli",
  "Şanlıurfa",
  "Uşak",
  "Van",
  "Yozgat",
  "Zonguldak",
  "Aksaray",
  "Bayburt",
  "Karaman",
  "Kırıkkale",
  "Batman",
  "Şırnak",
  "Bartın",
  "Ardahan",
  "Iğdır",
  "Yalova",
  "Karabük",
  "Kilis",
  "Osmaniye",
  "Düzce"
];

},{}],737:[function(require,module,exports){
module["exports"] = [
  "Afganistan",
  "Almanya",
  "Amerika Birleşik Devletleri",
  "Amerikan Samoa",
  "Andorra",
  "Angola",
  "Anguilla, İngiltere",
  "Antigua ve Barbuda",
  "Arjantin",
  "Arnavutluk",
  "Aruba, Hollanda",
  "Avustralya",
  "Avusturya",
  "Azerbaycan",
  "Bahama Adaları",
  "Bahreyn",
  "Bangladeş",
  "Barbados",
  "Belçika",
  "Belize",
  "Benin",
  "Bermuda, İngiltere",
  "Beyaz Rusya",
  "Bhutan",
  "Birleşik Arap Emirlikleri",
  "Birmanya (Myanmar)",
  "Bolivya",
  "Bosna Hersek",
  "Botswana",
  "Brezilya",
  "Brunei",
  "Bulgaristan",
  "Burkina Faso",
  "Burundi",
  "Cape Verde",
  "Cayman Adaları, İngiltere",
  "Cebelitarık, İngiltere",
  "Cezayir",
  "Christmas Adası , Avusturalya",
  "Cibuti",
  "Çad",
  "Çek Cumhuriyeti",
  "Çin",
  "Danimarka",
  "Doğu Timor",
  "Dominik Cumhuriyeti",
  "Dominika",
  "Ekvator",
  "Ekvator Ginesi",
  "El Salvador",
  "Endonezya",
  "Eritre",
  "Ermenistan",
  "Estonya",
  "Etiyopya",
  "Fas",
  "Fiji",
  "Fildişi Sahili",
  "Filipinler",
  "Filistin",
  "Finlandiya",
  "Folkland Adaları, İngiltere",
  "Fransa",
  "Fransız Guyanası",
  "Fransız Güney Eyaletleri (Kerguelen Adaları)",
  "Fransız Polinezyası",
  "Gabon",
  "Galler",
  "Gambiya",
  "Gana",
  "Gine",
  "Gine-Bissau",
  "Grenada",
  "Grönland",
  "Guadalup, Fransa",
  "Guam, Amerika",
  "Guatemala",
  "Guyana",
  "Güney Afrika",
  "Güney Georgia ve Güney Sandviç Adaları, İngiltere",
  "Güney Kıbrıs Rum Yönetimi",
  "Güney Kore",
  "Gürcistan H",
  "Haiti",
  "Hırvatistan",
  "Hindistan",
  "Hollanda",
  "Hollanda Antilleri",
  "Honduras",
  "Irak",
  "İngiltere",
  "İran",
  "İrlanda",
  "İspanya",
  "İsrail",
  "İsveç",
  "İsviçre",
  "İtalya",
  "İzlanda",
  "Jamaika",
  "Japonya",
  "Johnston Atoll, Amerika",
  "K.K.T.C.",
  "Kamboçya",
  "Kamerun",
  "Kanada",
  "Kanarya Adaları",
  "Karadağ",
  "Katar",
  "Kazakistan",
  "Kenya",
  "Kırgızistan",
  "Kiribati",
  "Kolombiya",
  "Komorlar",
  "Kongo",
  "Kongo Demokratik Cumhuriyeti",
  "Kosova",
  "Kosta Rika",
  "Kuveyt",
  "Kuzey İrlanda",
  "Kuzey Kore",
  "Kuzey Maryana Adaları",
  "Küba",
  "Laos",
  "Lesotho",
  "Letonya",
  "Liberya",
  "Libya",
  "Liechtenstein",
  "Litvanya",
  "Lübnan",
  "Lüksemburg",
  "Macaristan",
  "Madagaskar",
  "Makau (Makao)",
  "Makedonya",
  "Malavi",
  "Maldiv Adaları",
  "Malezya",
  "Mali",
  "Malta",
  "Marşal Adaları",
  "Martinik, Fransa",
  "Mauritius",
  "Mayotte, Fransa",
  "Meksika",
  "Mısır",
  "Midway Adaları, Amerika",
  "Mikronezya",
  "Moğolistan",
  "Moldavya",
  "Monako",
  "Montserrat",
  "Moritanya",
  "Mozambik",
  "Namibia",
  "Nauru",
  "Nepal",
  "Nijer",
  "Nijerya",
  "Nikaragua",
  "Niue, Yeni Zelanda",
  "Norveç",
  "Orta Afrika Cumhuriyeti",
  "Özbekistan",
  "Pakistan",
  "Palau Adaları",
  "Palmyra Atoll, Amerika",
  "Panama",
  "Papua Yeni Gine",
  "Paraguay",
  "Peru",
  "Polonya",
  "Portekiz",
  "Porto Riko, Amerika",
  "Reunion, Fransa",
  "Romanya",
  "Ruanda",
  "Rusya Federasyonu",
  "Saint Helena, İngiltere",
  "Saint Martin, Fransa",
  "Saint Pierre ve Miquelon, Fransa",
  "Samoa",
  "San Marino",
  "Santa Kitts ve Nevis",
  "Santa Lucia",
  "Santa Vincent ve Grenadinler",
  "Sao Tome ve Principe",
  "Senegal",
  "Seyşeller",
  "Sırbistan",
  "Sierra Leone",
  "Singapur",
  "Slovakya",
  "Slovenya",
  "Solomon Adaları",
  "Somali",
  "Sri Lanka",
  "Sudan",
  "Surinam",
  "Suriye",
  "Suudi Arabistan",
  "Svalbard, Norveç",
  "Svaziland",
  "Şili",
  "Tacikistan",
  "Tanzanya",
  "Tayland",
  "Tayvan",
  "Togo",
  "Tonga",
  "Trinidad ve Tobago",
  "Tunus",
  "Turks ve Caicos Adaları, İngiltere",
  "Tuvalu",
  "Türkiye",
  "Türkmenistan",
  "Uganda",
  "Ukrayna",
  "Umman",
  "Uruguay",
  "Ürdün",
  "Vallis ve Futuna, Fransa",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Virgin Adaları, Amerika",
  "Virgin Adaları, İngiltere",
  "Wake Adaları, Amerika",
  "Yemen",
  "Yeni Kaledonya, Fransa",
  "Yeni Zelanda",
  "Yunanistan",
  "Zambiya",
  "Zimbabve"
];

},{}],738:[function(require,module,exports){
module["exports"] = [
  "Türkiye"
];

},{}],739:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city = require("./city");
address.street_root = require("./street_root");
address.country = require("./country");
address.postcode = require("./postcode");
address.default_country = require("./default_country");
address.building_number = require("./building_number");
address.street_name = require("./street_name");
address.street_address = require("./street_address");

},{"./building_number":735,"./city":736,"./country":737,"./default_country":738,"./postcode":740,"./street_address":741,"./street_name":742,"./street_root":743}],740:[function(require,module,exports){
module.exports=require(279)
},{"/Users/a/dev/faker.js/lib/locales/es/address/postcode.js":279}],741:[function(require,module,exports){
module.exports=require(25)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_address.js":25}],742:[function(require,module,exports){
module.exports=require(26)
},{"/Users/a/dev/faker.js/lib/locales/de/address/street_name.js":26}],743:[function(require,module,exports){
module["exports"] = [
  "Atatürk Bulvarı",
  "Alparslan Türkeş Bulvarı",
  "Ali Çetinkaya Caddesi",
  "Tevfik Fikret Caddesi",
  "Kocatepe Caddesi",
  "İsmet Paşa Caddesi",
  "30 Ağustos Caddesi",
  "İsmet Attila Caddesi",
  "Namık Kemal Caddesi",
  "Lütfi Karadirek Caddesi",
  "Sarıkaya Caddesi",
  "Yunus Emre Sokak",
  "Dar Sokak",
  "Fatih Sokak ",
  "Harman Yolu Sokak ",
  "Ergenekon Sokak  ",
  "Ülkü Sokak",
  "Sağlık Sokak",
  "Okul Sokak",
  "Harman Altı Sokak",
  "Kaldırım Sokak",
  "Mevlana Sokak",
  "Gül Sokak",
  "Sıran Söğüt Sokak",
  "Güven Yaka Sokak",
  "Saygılı Sokak",
  "Menekşe Sokak",
  "Dağınık Evler Sokak",
  "Sevgi Sokak",
  "Afyon Kaya Sokak",
  "Oğuzhan Sokak",
  "İbn-i Sina Sokak",
  "Okul Sokak",
  "Bahçe Sokak",
  "Köypınar Sokak",
  "Kekeçoğlu Sokak",
  "Barış Sokak",
  "Bayır Sokak",
  "Kerimoğlu Sokak",
  "Nalbant Sokak",
  "Bandak Sokak"
];

},{}],744:[function(require,module,exports){
module["exports"] = [
  "+90-53#-###-##-##",
  "+90-54#-###-##-##",
  "+90-55#-###-##-##",
  "+90-50#-###-##-##"
];

},{}],745:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":744,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],746:[function(require,module,exports){
var tr = {};
module['exports'] = tr;
tr.title = "Turkish";
tr.address = require("./address");
tr.internet = require("./internet");
tr.lorem = require("./lorem");
tr.phone_number = require("./phone_number");
tr.cell_phone = require("./cell_phone");
tr.name = require("./name");

},{"./address":739,"./cell_phone":745,"./internet":748,"./lorem":749,"./name":752,"./phone_number":758}],747:[function(require,module,exports){
module["exports"] = [
  "com.tr",
  "com",
  "biz",
  "info",
  "name",
  "gov.tr"
];

},{}],748:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":747,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],749:[function(require,module,exports){
module.exports=require(38)
},{"./words":750,"/Users/a/dev/faker.js/lib/locales/de/lorem/index.js":38}],750:[function(require,module,exports){
module.exports=require(39)
},{"/Users/a/dev/faker.js/lib/locales/de/lorem/words.js":39}],751:[function(require,module,exports){
module["exports"] = [
  "Aba",
  "Abak",
  "Abaka",
  "Abakan",
  "Abakay",
  "Abar",
  "Abay",
  "Abı",
  "Abılay",
  "Abluç",
  "Abşar",
  "Açığ",
  "Açık",
  "Açuk",
  "Adalan",
  "Adaldı",
  "Adalmış",
  "Adar",
  "Adaş",
  "Adberilgen",
  "Adıgüzel",
  "Adık",
  "Adıkutlu",
  "Adıkutlutaş",
  "Adlı",
  "Adlıbeğ",
  "Adraman",
  "Adsız",
  "Afşar",
  "Afşın",
  "Ağabay",
  "Ağakağan",
  "Ağalak",
  "Ağlamış",
  "Ak",
  "Akaş",
  "Akata",
  "Akbaş",
  "Akbay",
  "Akboğa",
  "Akbörü",
  "Akbudak",
  "Akbuğra",
  "Akbulak",
  "Akça",
  "Akçakoca",
  "Akçora",
  "Akdemir",
  "Akdoğan",
  "Akı",
  "Akıbudak",
  "Akım",
  "Akın",
  "Akınçı",
  "Akkun",
  "Akkunlu",
  "Akkurt",
  "Akkuş",
  "Akpıra",
  "Aksungur",
  "Aktan",
  "Al",
  "Ala",
  "Alaban",
  "Alabörü",
  "Aladağ",
  "Aladoğan",
  "Alakurt",
  "Alayunt",
  "Alayuntlu",
  "Aldemir",
  "Aldıgerey",
  "Aldoğan",
  "Algu",
  "Alımga",
  "Alka",
  "Alkabölük",
  "Alkaevli",
  "Alkan",
  "Alkaşı",
  "Alkış",
  "Alp",
  "Alpagut",
  "Alpamış",
  "Alparsbeğ",
  "Alparslan",
  "Alpata",
  "Alpay",
  "Alpaya",
  "Alpaykağan",
  "Alpbamsı",
  "Alpbilge",
  "Alpdirek",
  "Alpdoğan",
  "Alper",
  "Alperen",
  "Alpertunga",
  "Alpgerey",
  "Alpış",
  "Alpilig",
  "Alpkara",
  "Alpkutlu",
  "Alpkülük",
  "Alpşalçı",
  "Alptegin",
  "Alptuğrul",
  "Alptunga",
  "Alpturan",
  "Alptutuk",
  "Alpuluğ",
  "Alpurungu",
  "Alpurungututuk",
  "Alpyörük",
  "Altan",
  "Altankağan",
  "Altankan",
  "Altay",
  "Altın",
  "Altınkağan",
  "Altınkan",
  "Altınoba",
  "Altıntamgan",
  "Altıntamgantarkan",
  "Altıntarkan",
  "Altıntay",
  "Altmışkara",
  "Altuga",
  "Amaç",
  "Amrak",
  "Amul",
  "Ançuk",
  "Andarıman",
  "Anıl",
  "Ant",
  "Apa",
  "Apak",
  "Apatarkan",
  "Aprançur",
  "Araboğa",
  "Arademir",
  "Aral",
  "Arbay",
  "Arbuz",
  "Arçuk",
  "Ardıç",
  "Argıl",
  "Argu",
  "Argun",
  "Arı",
  "Arıboğa",
  "Arık",
  "Arıkağan",
  "Arıkdoruk",
  "Arınç",
  "Arkın",
  "Arkış",
  "Armağan",
  "Arnaç",
  "Arpat",
  "Arsal",
  "Arsıl",
  "Arslan",
  "Arslanargun",
  "Arslanbörü",
  "Arslansungur",
  "Arslantegin",
  "Arslanyabgu",
  "Arşun",
  "Artıınal",
  "Artuk",
  "Artukaç",
  "Artut",
  "Aruk",
  "Asartegin",
  "Asığ",
  "Asrı",
  "Asuğ",
  "Aşan",
  "Aşanboğa",
  "Aşantuğrul",
  "Aşantudun",
  "Aşıkbulmuş",
  "Aşkın",
  "Aştaloğul",
  "Aşuk",
  "Ataç",
  "Atakağan",
  "Atakan",
  "Atalan",
  "Ataldı",
  "Atalmış",
  "Ataman",
  "Atasagun",
  "Atasu",
  "Atberilgen",
  "Atıgay",
  "Atıkutlu",
  "Atıkutlutaş",
  "Atıla",
  "Atılgan",
  "Atım",
  "Atımer",
  "Atış",
  "Atlı",
  "Atlıbeğ",
  "Atlıkağan",
  "Atmaca",
  "Atsız",
  "Atunçu",
  "Avar",
  "Avluç",
  "Avşar",
  "Ay",
  "Ayaçı",
  "Ayas",
  "Ayaş",
  "Ayaz",
  "Aybalta",
  "Ayban",
  "Aybars",
  "Aybeğ",
  "Aydarkağan",
  "Aydemir",
  "Aydın",
  "Aydınalp",
  "Aydoğan",
  "Aydoğdu",
  "Aydoğmuş",
  "Aygırak",
  "Ayıtmış",
  "Ayız",
  "Ayızdağ",
  "Aykağan",
  "Aykan",
  "Aykurt",
  "Ayluç",
  "Ayluçtarkan",
  "Ayma",
  "Ayruk",
  "Aysılığ",
  "Aytak",
  "Ayyıldız",
  "Azak",
  "Azban",
  "Azgan",
  "Azganaz",
  "Azıl",
  "Babır",
  "Babur",
  "Baçara",
  "Baççayman",
  "Baçman",
  "Badabul",
  "Badruk",
  "Badur",
  "Bağa",
  "Bağaalp",
  "Bağaışbara",
  "Bağan",
  "Bağaşatulu",
  "Bağatarkan",
  "Bağatengrikağan",
  "Bağatur",
  "Bağaturçigşi",
  "Bağaturgerey",
  "Bağaturipi",
  "Bağatursepi",
  "Bağış",
  "Bağtaş",
  "Bakağul",
  "Bakır",
  "Bakırsokum",
  "Baksı",
  "Bakşı",
  "Balaban",
  "Balaka",
  "Balakatay",
  "Balamır",
  "Balçar",
  "Baldu",
  "Balkık",
  "Balta",
  "Baltacı",
  "Baltar",
  "Baltır",
  "Baltur",
  "Bamsı",
  "Bangu",
  "Barak",
  "Baraktöre",
  "Baran",
  "Barbeğ",
  "Barboğa",
  "Barbol",
  "Barbulsun",
  "Barça",
  "Barçadoğdu",
  "Barçadoğmuş",
  "Barçadurdu",
  "Barçadurmuş",
  "Barçan",
  "Barçatoyun",
  "Bardıbay",
  "Bargan",
  "Barımtay",
  "Barın",
  "Barkan",
  "Barkdoğdu",
  "Barkdoğmuş",
  "Barkdurdu",
  "Barkdurmuş",
  "Barkın",
  "Barlas",
  "Barlıbay",
  "Barmaklak",
  "Barmaklı",
  "Barman",
  "Bars",
  "Barsbeğ",
  "Barsboğa",
  "Barsgan",
  "Barskan",
  "Barsurungu",
  "Bartu",
  "Basademir",
  "Basan",
  "Basanyalavaç",
  "Basar",
  "Basat",
  "Baskın",
  "Basmıl",
  "Bastı",
  "Bastuğrul",
  "Basu",
  "Basut",
  "Başak",
  "Başbuğ",
  "Başçı",
  "Başgan",
  "Başkırt",
  "Başkurt",
  "Baştar",
  "Batrak",
  "Batu",
  "Batuk",
  "Batur",
  "Baturalp",
  "Bay",
  "Bayançar",
  "Bayankağan",
  "Bayat",
  "Bayazıt",
  "Baybars",
  "Baybayık",
  "Baybiçen",
  "Bayboğa",
  "Baybora",
  "Baybüre",
  "Baydar",
  "Baydemir",
  "Baydur",
  "Bayık",
  "Bayınçur",
  "Bayındır",
  "Baykal",
  "Baykara",
  "Baykoca",
  "Baykuzu",
  "Baymünke",
  "Bayna",
  "Baynal",
  "Baypüre",
  "Bayrı",
  "Bayraç",
  "Bayrak",
  "Bayram",
  "Bayrın",
  "Bayruk",
  "Baysungur",
  "Baytara",
  "Baytaş",
  "Bayunçur",
  "Bayur",
  "Bayurku",
  "Bayutmuş",
  "Bayuttu",
  "Bazır",
  "Beçeapa",
  "Beçkem",
  "Beğ",
  "Beğarslan",
  "Beğbars",
  "Beğbilgeçikşin",
  "Beğboğa",
  "Beğçur",
  "Beğdemir",
  "Beğdilli",
  "Beğdurmuş",
  "Beğkulu",
  "Beğtaş",
  "Beğtegin",
  "Beğtüzün",
  "Begi",
  "Begil",
  "Begine",
  "Begitutuk",
  "Beglen",
  "Begni",
  "Bek",
  "Bekazıl",
  "Bekbekeç",
  "Bekeç",
  "Bekeçarslan",
  "Bekeçarslantegin",
  "Bekeçtegin",
  "Beker",
  "Beklemiş",
  "Bektür",
  "Belçir",
  "Belek",
  "Belgi",
  "Belgüc",
  "Beltir",
  "Bengi",
  "Bengü",
  "Benlidemir",
  "Berdibeğ",
  "Berendey",
  "Bergü",
  "Berginsenge",
  "Berk",
  "Berke",
  "Berkiş",
  "Berkyaruk",
  "Bermek",
  "Besentegin",
  "Betemir",
  "Beyizçi",
  "Beyrek",
  "Beyrem",
  "Bıçkı",
  "Bıçkıcı",
  "Bıdın",
  "Bıtaybıkı",
  "Bıtrı",
  "Biçek",
  "Bilge",
  "Bilgebayunçur",
  "Bilgebeğ",
  "Bilgeçikşin",
  "Bilgeışbara",
  "Bilgeışbaratamgan",
  "Bilgekağan",
  "Bilgekan",
  "Bilgekutluk",
  "Bilgekülüçur",
  "Bilgetaçam",
  "Bilgetamgacı",
  "Bilgetardu",
  "Bilgetegin",
  "Bilgetonyukuk",
  "Bilgez",
  "Bilgiç",
  "Bilgin",
  "Bilig",
  "Biligköngülsengün",
  "Bilik",
  "Binbeği",
  "Bindir",
  "Boğa",
  "Boğaç",
  "Boğaçuk",
  "Boldaz",
  "Bolmuş",
  "Bolsun",
  "Bolun",
  "Boncuk",
  "Bongul",
  "Bongulboğa",
  "Bora",
  "Boran",
  "Borçul",
  "Borlukçu",
  "Bornak",
  "Boyan",
  "Boyankulu",
  "Boylabağa",
  "Boylabağatarkan",
  "Boylakutlutarkan",
  "Bozan",
  "Bozbörü",
  "Bozdoğan",
  "Bozkurt",
  "Bozkuş",
  "Bozok",
  "Bögde",
  "Böge",
  "Bögü",
  "Bökde",
  "Bökde",
  "Böke",
  "Bölen",
  "Bölükbaşı",
  "Bönek",
  "Bönge",
  "Börü",
  "Börübars",
  "Börüsengün",
  "Börteçine",
  "Buçan",
  "Buçur",
  "Budağ",
  "Budak",
  "Budunlu",
  "Buğday",
  "Buğra",
  "Buğrakarakağan",
  "Bukak",
  "Bukaktutuk",
  "Bulaçapan",
  "Bulak",
  "Bulan",
  "Buldur",
  "Bulgak",
  "Bulmaz",
  "Bulmuş",
  "Buluç",
  "Buluğ",
  "Buluk",
  "Buluş",
  "Bulut",
  "Bumın",
  "Bunsuz",
  "Burçak",
  "Burguçan",
  "Burkay",
  "Burslan",
  "Burulday",
  "Burulgu",
  "Burunduk",
  "Buşulgan",
  "Butak",
  "Butuk",
  "Buyan",
  "Buyançuk",
  "Buyandemir",
  "Buyankara",
  "Buyat",
  "Buyraç",
  "Buyruç",
  "Buyruk",
  "Buzaç",
  "Buzaçtutuk",
  "Büdüs",
  "Büdüstudun",
  "Bügü",
  "Bügdüz",
  "Bügdüzemen",
  "Büge",
  "Büğübilge",
  "Bükdüz",
  "Büke",
  "Bükebuyraç",
  "Bükebuyruç",
  "Bükey",
  "Büktegin",
  "Büküşboğa",
  "Bümen",
  "Bünül",
  "Büre",
  "Bürgüt",
  "Bürkek",
  "Bürküt",
  "Bürlük",
  "Cebe",
  "Ceyhun",
  "Cılasun",
  "Çaba",
  "Çabdar",
  "Çablı",
  "Çabuş",
  "Çağan",
  "Çağatay",
  "Çağlar",
  "Çağlayan",
  "Çağrı",
  "Çağrıbeğ",
  "Çağrıtegin",
  "Çağru",
  "Çalapkulu",
  "Çankız",
  "Çemen",
  "Çemgen",
  "Çeykün",
  "Çıngır",
  "Çiçek",
  "Çiçem",
  "Çiğdem",
  "Çilenti",
  "Çimen",
  "Çobulmak",
  "Çocukbörü",
  "Çokramayul",
  "Çolman",
  "Çolpan",
  "Çölü",
  "Damla",
  "Deniz",
  "Dilek",
  "Diri",
  "Dizik",
  "Duru",
  "Dururbunsuz",
  "Duygu",
  "Ebin",
  "Ebkızı",
  "Ebren",
  "Edil",
  "Ediz",
  "Egemen",
  "Eğrim",
  "Ekeç",
  "Ekim",
  "Ekin",
  "Elkin",
  "Elti",
  "Engin",
  "Erdem",
  "Erdeni",
  "Erdeniözük",
  "Erdenikatun",
  "Erentüz",
  "Ergene",
  "Ergenekatun",
  "Erinç",
  "Erke",
  "Ermen",
  "Erten",
  "Ertenözük",
  "Esen",
  "Esenbike",
  "Eser",
  "Esin",
  "Etil",
  "Evin",
  "Eyiz",
  "Gelin",
  "Gelincik",
  "Gökbörü",
  "Gökçe",
  "Gökçegöl",
  "Gökçen",
  "Gökçiçek",
  "Gökşin",
  "Gönül",
  "Görün",
  "Gözde",
  "Gülegen",
  "Gülemen",
  "Güler",
  "Gülümser",
  "Gümüş",
  "Gün",
  "Günay",
  "Günçiçek",
  "Gündoğdu",
  "Gündoğmuş",
  "Güneş",
  "Günyaruk",
  "Gürbüz",
  "Güvercin",
  "Güzey",
  "Işığ",
  "Işık",
  "Işıl",
  "Işılay",
  "Ila",
  "Ilaçın",
  "Ilgın",
  "Inanç",
  "Irmak",
  "Isığ",
  "Isık",
  "Iyık",
  "Iyıktağ",
  "İdil",
  "İkeme",
  "İkiçitoyun",
  "İlbilge",
  "İldike",
  "İlgegü",
  "İmrem",
  "İnci",
  "İnç",
  "İrinç",
  "İrinçköl",
  "İrtiş",
  "İtil",
  "Kancı",
  "Kançı",
  "Kapgar",
  "Karaca",
  "Karaça",
  "Karak",
  "Kargılaç",
  "Karlıgaç",
  "Katun",
  "Katunkız",
  "Kayacık",
  "Kayaçık",
  "Kayça",
  "Kaynak",
  "Kazanç",
  "Kazkatun",
  "Kekik",
  "Keklik",
  "Kepez",
  "Kesme",
  "Keyken",
  "Kezlik",
  "Kımız",
  "Kımızın",
  "Kımızalma",
  "Kımızalmıla",
  "Kırçiçek",
  "Kırgavul",
  "Kırlangıç",
  "Kıvanç",
  "Kıvılcım",
  "Kızdurmuş",
  "Kızılalma"
];

},{}],752:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.name = require("./name");

},{"./first_name":751,"./last_name":753,"./name":754,"./prefix":755}],753:[function(require,module,exports){
module["exports"] = [
  "Abacı",
  "Abadan",
  "Aclan",
  "Adal",
  "Adan",
  "Adıvar",
  "Akal",
  "Akan",
  "Akar ",
  "Akay",
  "Akaydın",
  "Akbulut",
  "Akgül",
  "Akışık",
  "Akman",
  "Akyürek",
  "Akyüz",
  "Akşit",
  "Alnıaçık",
  "Alpuğan",
  "Alyanak",
  "Arıcan",
  "Arslanoğlu",
  "Atakol",
  "Atan",
  "Avan",
  "Ayaydın",
  "Aybar",
  "Aydan",
  "Aykaç",
  "Ayverdi",
  "Ağaoğlu",
  "Aşıkoğlu",
  "Babacan",
  "Babaoğlu",
  "Bademci",
  "Bakırcıoğlu",
  "Balaban",
  "Balcı",
  "Barbarosoğlu",
  "Baturalp",
  "Baykam",
  "Başoğlu",
  "Berberoğlu",
  "Beşerler",
  "Beşok",
  "Biçer",
  "Bolatlı",
  "Dalkıran",
  "Dağdaş",
  "Dağlaroğlu",
  "Demirbaş",
  "Demirel",
  "Denkel",
  "Dizdar ",
  "Doğan ",
  "Durak ",
  "Durmaz",
  "Duygulu",
  "Düşenkalkar",
  "Egeli",
  "Ekici",
  "Ekşioğlu",
  "Eliçin",
  "Elmastaşoğlu",
  "Elçiboğa",
  "Erbay",
  "Erberk",
  "Erbulak",
  "Erdoğan",
  "Erez",
  "Erginsoy",
  "Erkekli",
  "Eronat",
  "Ertepınar",
  "Ertürk",
  "Erçetin",
  "Evliyaoğlu",
  "Gönültaş",
  "Gümüşpala",
  "Günday",
  "Gürmen",
  "Hakyemez",
  "Hamzaoğlu",
  "Ilıcalı",
  "Kahveci",
  "Kaplangı",
  "Karabulut",
  "Karaböcek",
  "Karadaş",
  "Karaduman",
  "Karaer",
  "Kasapoğlu",
  "Kavaklıoğlu",
  "Kaya ",
  "Keseroğlu",
  "Keçeci",
  "Kılıççı",
  "Kıraç ",
  "Kocabıyık",
  "Korol",
  "Koyuncu",
  "Koç",
  "Koçoğlu",
  "Koçyiğit",
  "Kuday",
  "Kulaksızoğlu",
  "Kumcuoğlu",
  "Kunt",
  "Kunter",
  "Kurutluoğlu",
  "Kutlay",
  "Kuzucu",
  "Körmükçü",
  "Köybaşı",
  "Köylüoğlu",
  "Küçükler",
  "Limoncuoğlu",
  "Mayhoş",
  "Menemencioğlu",
  "Mertoğlu",
  "Nalbantoğlu",
  "Nebioğlu",
  "Numanoğlu",
  "Okumuş",
  "Okur",
  "Oraloğlu",
  "Orbay",
  "Ozansoy",
  "Paksüt",
  "Pekkan",
  "Pektemek",
  "Polat",
  "Poyrazoğlu",
  "Poçan",
  "Sadıklar",
  "Samancı",
  "Sandalcı",
  "Sarıoğlu",
  "Saygıner",
  "Sepetçi",
  "Sezek",
  "Sinanoğlu",
  "Solmaz",
  "Sözeri",
  "Süleymanoğlu",
  "Tahincioğlu",
  "Tanrıkulu",
  "Tazegül",
  "Taşlı",
  "Taşçı",
  "Tekand",
  "Tekelioğlu",
  "Tokatlıoğlu",
  "Tokgöz",
  "Topaloğlu",
  "Topçuoğlu",
  "Toraman",
  "Tunaboylu",
  "Tunçeri",
  "Tuğlu",
  "Tuğluk",
  "Türkdoğan",
  "Türkyılmaz",
  "Tütüncü",
  "Tüzün",
  "Uca",
  "Uluhan",
  "Velioğlu",
  "Yalçın",
  "Yazıcı",
  "Yetkiner",
  "Yeşilkaya",
  "Yıldırım ",
  "Yıldızoğlu",
  "Yılmazer",
  "Yorulmaz",
  "Çamdalı",
  "Çapanoğlu",
  "Çatalbaş",
  "Çağıran",
  "Çetin",
  "Çetiner",
  "Çevik",
  "Çörekçi",
  "Önür",
  "Örge",
  "Öymen",
  "Özberk",
  "Özbey",
  "Özbir",
  "Özdenak",
  "Özdoğan",
  "Özgörkey",
  "Özkara",
  "Özkök ",
  "Öztonga",
  "Öztuna"
];

},{}],754:[function(require,module,exports){
module.exports=require(388)
},{"/Users/a/dev/faker.js/lib/locales/ge/name/name.js":388}],755:[function(require,module,exports){
module["exports"] = [
  "Bay",
  "Bayan",
  "Dr.",
  "Prof. Dr."
];

},{}],756:[function(require,module,exports){
module["exports"] = [
  "392",
  "510",
  "512",
  "522",
  "562",
  "564",
  "592",
  "594",
  "800",
  "811",
  "822",
  "850",
  "888",
  "898",
  "900",
  "322",
  "416",
  "272",
  "472",
  "382",
  "358",
  "312",
  "242",
  "478",
  "466",
  "256",
  "266",
  "378",
  "488",
  "458",
  "228",
  "426",
  "434",
  "374",
  "248",
  "224",
  "286",
  "376",
  "364",
  "258",
  "412",
  "380",
  "284",
  "424",
  "446",
  "442",
  "222",
  "342",
  "454",
  "456",
  "438",
  "326",
  "476",
  "246",
  "216",
  "212",
  "232",
  "344",
  "370",
  "338",
  "474",
  "366",
  "352",
  "318",
  "288",
  "386",
  "348",
  "262",
  "332",
  "274",
  "422",
  "236",
  "482",
  "324",
  "252",
  "436",
  "384",
  "388",
  "452",
  "328",
  "464",
  "264",
  "362",
  "484",
  "368",
  "346",
  "414",
  "486",
  "282",
  "356",
  "462",
  "428",
  "276",
  "432",
  "226",
  "354",
  "372"
];

},{}],757:[function(require,module,exports){
module["exports"] = [
  "+90-###-###-##-##",
  "+90-###-###-#-###"
];

},{}],758:[function(require,module,exports){
var phone_number = {};
module['exports'] = phone_number;
phone_number.area_code = require("./area_code");
phone_number.formats = require("./formats");

},{"./area_code":756,"./formats":757}],759:[function(require,module,exports){
module.exports=require(652)
},{"/Users/a/dev/faker.js/lib/locales/sk/address/building_number.js":652}],760:[function(require,module,exports){
module["exports"] = [
  "#{city_name}",
  "#{city_prefix} #{Name.male_first_name}"
];

},{}],761:[function(require,module,exports){
module["exports"] = [
  "Алчевськ",
  "Артемівськ",
  "Бердичів",
  "Бердянськ",
  "Біла Церква",
  "Бровари",
  "Вінниця",
  "Горлівка",
  "Дніпродзержинськ",
  "Дніпропетровськ",
  "Донецьк",
  "Євпаторія",
  "Єнакієве",
  "Житомир",
  "Запоріжжя",
  "Івано-Франківськ",
  "Ізмаїл",
  "Кам’янець-Подільський",
  "Керч",
  "Київ",
  "Кіровоград",
  "Конотоп",
  "Краматорськ",
  "Красний Луч",
  "Кременчук",
  "Кривий Ріг",
  "Лисичанськ",
  "Луганськ",
  "Луцьк",
  "Львів",
  "Макіївка",
  "Маріуполь",
  "Мелітополь",
  "Миколаїв",
  "Мукачеве",
  "Нікополь",
  "Одеса",
  "Олександрія",
  "Павлоград",
  "Полтава",
  "Рівне",
  "Севастополь",
  "Сєвєродонецьк",
  "Сімферополь",
  "Слов’янськ",
  "Суми",
  "Тернопіль",
  "Ужгород",
  "Умань",
  "Харків",
  "Херсон",
  "Хмельницький",
  "Черкаси",
  "Чернівці",
  "Чернігів",
  "Шостка",
  "Ялта"
];

},{}],762:[function(require,module,exports){
module["exports"] = [
  "Південний",
  "Північний",
  "Східний",
  "Західний"
];

},{}],763:[function(require,module,exports){
module["exports"] = [
  "град"
];

},{}],764:[function(require,module,exports){
module["exports"] = [
  "Австралія",
  "Австрія",
  "Азербайджан",
  "Албанія",
  "Алжир",
  "Ангола",
  "Андорра",
  "Антигуа і Барбуда",
  "Аргентина",
  "Афганістан",
  "Багамські Острови",
  "Бангладеш",
  "Барбадос",
  "Бахрейн",
  "Беліз",
  "Бельгія",
  "Бенін",
  "Білорусь",
  "Болгарія",
  "Болівія",
  "Боснія і Герцеговина",
  "Ботсвана",
  "Бразилія",
  "Бруней",
  "Буркіна-Фасо",
  "Бурунді",
  "Бутан",
  "В’єтнам",
  "Вануату",
  "Ватикан",
  "Велика Британія",
  "Венесуела",
  "Вірменія",
  "Габон",
  "Гаїті",
  "Гайана",
  "Гамбія",
  "Гана",
  "Гватемала",
  "Гвінея",
  "Гвінея-Бісау",
  "Гондурас",
  "Гренада",
  "Греція",
  "Грузія",
  "Данія",
  "Демократична Республіка Конго",
  "Джибуті",
  "Домініка",
  "Домініканська Республіка",
  "Еквадор",
  "Екваторіальна Гвінея",
  "Еритрея",
  "Естонія",
  "Ефіопія",
  "Єгипет",
  "Ємен",
  "Замбія",
  "Зімбабве",
  "Ізраїль",
  "Індія",
  "Індонезія",
  "Ірак",
  "Іран",
  "Ірландія",
  "Ісландія",
  "Іспанія",
  "Італія",
  "Йорданія",
  "Кабо-Верде",
  "Казахстан",
  "Камбоджа",
  "Камерун",
  "Канада",
  "Катар",
  "Кенія",
  "Киргизстан",
  "Китай",
  "Кіпр",
  "Кірибаті",
  "Колумбія",
  "Коморські Острови",
  "Конго",
  "Коста-Рика",
  "Кот-д’Івуар",
  "Куба",
  "Кувейт",
  "Лаос",
  "Латвія",
  "Лесото",
  "Литва",
  "Ліберія",
  "Ліван",
  "Лівія",
  "Ліхтенштейн",
  "Люксембург",
  "Маврикій",
  "Мавританія",
  "Мадаґаскар",
  "Македонія",
  "Малаві",
  "Малайзія",
  "Малі",
  "Мальдіви",
  "Мальта",
  "Марокко",
  "Маршаллові Острови",
  "Мексика",
  "Мозамбік",
  "Молдова",
  "Монако",
  "Монголія",
  "Намібія",
  "Науру",
  "Непал",
  "Нігер",
  "Нігерія",
  "Нідерланди",
  "Нікарагуа",
  "Німеччина",
  "Нова Зеландія",
  "Норвегія",
  "Об’єднані Арабські Емірати",
  "Оман",
  "Пакистан",
  "Палау",
  "Панама",
  "Папуа-Нова Гвінея",
  "Парагвай",
  "Перу",
  "Південна Корея",
  "Південний Судан",
  "Південно-Африканська Республіка",
  "Північна Корея",
  "Польща",
  "Португалія",
  "Російська Федерація",
  "Руанда",
  "Румунія",
  "Сальвадор",
  "Самоа",
  "Сан-Марино",
  "Сан-Томе і Принсіпі",
  "Саудівська Аравія",
  "Свазіленд",
  "Сейшельські Острови",
  "Сенеґал",
  "Сент-Вінсент і Гренадини",
  "Сент-Кітс і Невіс",
  "Сент-Люсія",
  "Сербія",
  "Сирія",
  "Сінгапур",
  "Словаччина",
  "Словенія",
  "Соломонові Острови",
  "Сомалі",
  "Судан",
  "Суринам",
  "Східний Тимор",
  "США",
  "Сьєрра-Леоне",
  "Таджикистан",
  "Таїланд",
  "Танзанія",
  "Того",
  "Тонга",
  "Тринідад і Тобаго",
  "Тувалу",
  "Туніс",
  "Туреччина",
  "Туркменістан",
  "Уганда",
  "Угорщина",
  "Узбекистан",
  "Україна",
  "Уругвай",
  "Федеративні Штати Мікронезії",
  "Фіджі",
  "Філіппіни",
  "Фінляндія",
  "Франція",
  "Хорватія",
  "Центральноафриканська Республіка",
  "Чад",
  "Чехія",
  "Чилі",
  "Чорногорія",
  "Швейцарія",
  "Швеція",
  "Шрі-Ланка",
  "Ямайка",
  "Японія"
];

},{}],765:[function(require,module,exports){
module["exports"] = [
  "Україна"
];

},{}],766:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.country = require("./country");
address.building_number = require("./building_number");
address.street_prefix = require("./street_prefix");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.street_title = require("./street_title");
address.city_name = require("./city_name");
address.city = require("./city");
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":759,"./city":760,"./city_name":761,"./city_prefix":762,"./city_suffix":763,"./country":764,"./default_country":765,"./postcode":767,"./secondary_address":768,"./state":769,"./street_address":770,"./street_name":771,"./street_prefix":772,"./street_suffix":773,"./street_title":774}],767:[function(require,module,exports){
module.exports=require(279)
},{"/Users/a/dev/faker.js/lib/locales/es/address/postcode.js":279}],768:[function(require,module,exports){
module.exports=require(622)
},{"/Users/a/dev/faker.js/lib/locales/ru/address/secondary_address.js":622}],769:[function(require,module,exports){
module["exports"] = [
  "АР Крим",
  "Вінницька область",
  "Волинська область",
  "Дніпропетровська область",
  "Донецька область",
  "Житомирська область",
  "Закарпатська область",
  "Запорізька область",
  "Івано-Франківська область",
  "Київська область",
  "Кіровоградська область",
  "Луганська область",
  "Львівська область",
  "Миколаївська область",
  "Одеська область",
  "Полтавська область",
  "Рівненська область",
  "Сумська область",
  "Тернопільська область",
  "Харківська область",
  "Херсонська область",
  "Хмельницька область",
  "Черкаська область",
  "Чернівецька область",
  "Чернігівська область",
  "Київ",
  "Севастополь"
];

},{}],770:[function(require,module,exports){
module.exports=require(624)
},{"/Users/a/dev/faker.js/lib/locales/ru/address/street_address.js":624}],771:[function(require,module,exports){
module["exports"] = [
  "#{street_prefix} #{Address.street_title}",
  "#{Address.street_title} #{street_suffix}"
];

},{}],772:[function(require,module,exports){
module["exports"] = [
  "вул.",
  "вулиця",
  "пр.",
  "проспект",
  "пл.",
  "площа",
  "пров.",
  "провулок"
];

},{}],773:[function(require,module,exports){
module["exports"] = [
  "майдан"
];

},{}],774:[function(require,module,exports){
module["exports"] = [
  "Зелена",
  "Молодіжна",
  "Городоцька",
  "Стрийська",
  "Вузька",
  "Нижанківського",
  "Староміська",
  "Ліста",
  "Вічева",
  "Брюховичів",
  "Винників",
  "Рудного",
  "Коліївщини"
];

},{}],775:[function(require,module,exports){
arguments[4][377][0].apply(exports,arguments)
},{"./name":776,"./prefix":777,"./suffix":778,"/Users/a/dev/faker.js/lib/locales/ge/company/index.js":377}],776:[function(require,module,exports){
module.exports=require(633)
},{"/Users/a/dev/faker.js/lib/locales/ru/company/name.js":633}],777:[function(require,module,exports){
module["exports"] = [
  "ТОВ",
  "ПАТ",
  "ПрАТ",
  "ТДВ",
  "КТ",
  "ПТ",
  "ДП",
  "ФОП"
];

},{}],778:[function(require,module,exports){
module["exports"] = [
  "Постач",
  "Торг",
  "Пром",
  "Трейд",
  "Збут"
];

},{}],779:[function(require,module,exports){
var uk = {};
module['exports'] = uk;
uk.title = "Ukrainian";
uk.address = require("./address");
uk.company = require("./company");
uk.internet = require("./internet");
uk.name = require("./name");
uk.phone_number = require("./phone_number");

},{"./address":766,"./company":775,"./internet":782,"./name":786,"./phone_number":795}],780:[function(require,module,exports){
module["exports"] = [
  "cherkassy.ua",
  "cherkasy.ua",
  "ck.ua",
  "cn.ua",
  "com.ua",
  "crimea.ua",
  "cv.ua",
  "dn.ua",
  "dnepropetrovsk.ua",
  "dnipropetrovsk.ua",
  "donetsk.ua",
  "dp.ua",
  "if.ua",
  "in.ua",
  "ivano-frankivsk.ua",
  "kh.ua",
  "kharkiv.ua",
  "kharkov.ua",
  "kherson.ua",
  "khmelnitskiy.ua",
  "kiev.ua",
  "kirovograd.ua",
  "km.ua",
  "kr.ua",
  "ks.ua",
  "lg.ua",
  "lt.ua",
  "lugansk.ua",
  "lutsk.ua",
  "lutsk.net",
  "lviv.ua",
  "mk.ua",
  "net.ua",
  "nikolaev.ua",
  "od.ua",
  "odessa.ua",
  "org.ua",
  "pl.ua",
  "pl.ua",
  "poltava.ua",
  "rovno.ua",
  "rv.ua",
  "sebastopol.ua",
  "sm.ua",
  "sumy.ua",
  "te.ua",
  "ternopil.ua",
  "ua",
  "uz.ua",
  "uzhgorod.ua",
  "vinnica.ua",
  "vn.ua",
  "volyn.net",
  "volyn.ua",
  "yalta.ua",
  "zaporizhzhe.ua",
  "zhitomir.ua",
  "zp.ua",
  "zt.ua",
  "укр"
];

},{}],781:[function(require,module,exports){
module["exports"] = [
  "ukr.net",
  "ex.ua",
  "e-mail.ua",
  "i.ua",
  "meta.ua",
  "yandex.ua",
  "gmail.com"
];

},{}],782:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./domain_suffix":780,"./free_email":781,"/Users/a/dev/faker.js/lib/locales/de/internet/index.js":37}],783:[function(require,module,exports){
module["exports"] = [
  "Аврелія",
  "Аврора",
  "Агапія",
  "Агата",
  "Агафія",
  "Агнеса",
  "Агнія",
  "Агрипина",
  "Ада",
  "Аделаїда",
  "Аделіна",
  "Адріана",
  "Азалія",
  "Алевтина",
  "Аліна",
  "Алла",
  "Альбіна",
  "Альвіна",
  "Анастасія",
  "Анастасія",
  "Анатолія",
  "Ангеліна",
  "Анжела",
  "Анна",
  "Антонида",
  "Антоніна",
  "Антонія",
  "Анфіса",
  "Аполлінарія",
  "Аполлонія",
  "Аркадія",
  "Артемія",
  "Афанасія",
  "Білослава",
  "Біляна",
  "Благовіста",
  "Богдана",
  "Богуслава",
  "Божена",
  "Болеслава",
  "Борислава",
  "Броніслава",
  "В’ячеслава",
  "Валентина",
  "Валерія",
  "Варвара",
  "Василина",
  "Вікторія",
  "Вілена",
  "Віленіна",
  "Віліна",
  "Віола",
  "Віолетта",
  "Віра",
  "Віргінія",
  "Віта",
  "Віталіна",
  "Влада",
  "Владислава",
  "Власта",
  "Всеслава",
  "Галина",
  "Ганна",
  "Гелена",
  "Далеслава",
  "Дана",
  "Дарина",
  "Дарислава",
  "Діана",
  "Діяна",
  "Добринка",
  "Добромила",
  "Добромира",
  "Добромисла",
  "Доброслава",
  "Долеслава",
  "Доляна",
  "Жанна",
  "Жозефіна",
  "Забава",
  "Звенислава",
  "Зінаїда",
  "Злата",
  "Зореслава",
  "Зорина",
  "Зоряна",
  "Зоя",
  "Іванна",
  "Ілона",
  "Інна",
  "Іннеса",
  "Ірина",
  "Ірма",
  "Калина",
  "Каріна",
  "Катерина",
  "Квітка",
  "Квітослава",
  "Клавдія",
  "Крентта",
  "Ксенія",
  "Купава",
  "Лада",
  "Лариса",
  "Леся",
  "Ликера",
  "Лідія",
  "Лілія",
  "Любава",
  "Любислава",
  "Любов",
  "Любомила",
  "Любомира",
  "Люборада",
  "Любослава",
  "Людмила",
  "Людомила",
  "Майя",
  "Мальва",
  "Мар’яна",
  "Марина",
  "Марічка",
  "Марія",
  "Марта",
  "Меланія",
  "Мечислава",
  "Милодара",
  "Милослава",
  "Мирослава",
  "Мілана",
  "Мокрина",
  "Мотря",
  "Мстислава",
  "Надія",
  "Наталія",
  "Неля",
  "Немира",
  "Ніна",
  "Огняна",
  "Оксана",
  "Олександра",
  "Олена",
  "Олеся",
  "Ольга",
  "Ореста",
  "Орина",
  "Орислава",
  "Орися",
  "Оріяна",
  "Павліна",
  "Палажка",
  "Пелагея",
  "Пелагія",
  "Поліна",
  "Поляна",
  "Потішана",
  "Радміла",
  "Радослава",
  "Раїна",
  "Раїса",
  "Роксолана",
  "Ромена",
  "Ростислава",
  "Руслана",
  "Світлана",
  "Святослава",
  "Слава",
  "Сміяна",
  "Сніжана",
  "Соломія",
  "Соня",
  "Софія",
  "Станислава",
  "Сюзана",
  "Таїсія",
  "Тамара",
  "Тетяна",
  "Устина",
  "Фаїна",
  "Февронія",
  "Федора",
  "Феодосія",
  "Харитина",
  "Христина",
  "Христя",
  "Юліанна",
  "Юлія",
  "Юстина",
  "Юхима",
  "Юхимія",
  "Яна",
  "Ярина",
  "Ярослава"
];

},{}],784:[function(require,module,exports){
module["exports"] = [
  "Андрухович",
  "Бабух",
  "Балабан",
  "Балабуха",
  "Балакун",
  "Балицька",
  "Бамбула",
  "Бандера",
  "Барановська",
  "Бачей",
  "Башук",
  "Бердник",
  "Білич",
  "Бондаренко",
  "Борецька",
  "Боровська",
  "Борочко",
  "Боярчук",
  "Брицька",
  "Бурмило",
  "Бутько",
  "Василишина",
  "Васильківська",
  "Вергун",
  "Вередун",
  "Верещук",
  "Витребенько",
  "Вітряк",
  "Волощук",
  "Гайдук",
  "Гайова",
  "Гайчук",
  "Галаєнко",
  "Галатей",
  "Галаціон",
  "Гаман",
  "Гамула",
  "Ганич",
  "Гарай",
  "Гарун",
  "Гладківська",
  "Гладух",
  "Глинська",
  "Гнатишина",
  "Гойко",
  "Головець",
  "Горбач",
  "Гордійчук",
  "Горова",
  "Городоцька",
  "Гречко",
  "Григоришина",
  "Гриневецька",
  "Гриневська",
  "Гришко",
  "Громико",
  "Данилишина",
  "Данилко",
  "Демків",
  "Демчишина",
  "Дзюб’як",
  "Дзюба",
  "Дідух",
  "Дмитришина",
  "Дмитрук",
  "Довгалевська",
  "Дурдинець",
  "Євенко",
  "Євпак",
  "Ємець",
  "Єрмак",
  "Забіла",
  "Зварич",
  "Зінкевич",
  "Зленко",
  "Іванишина",
  "Калач",
  "Кандиба",
  "Карпух",
  "Кивач",
  "Коваленко",
  "Ковальська",
  "Коломієць",
  "Коман",
  "Компанієць",
  "Кононець",
  "Кордун",
  "Корецька",
  "Корнїйчук",
  "Коров’як",
  "Коцюбинська",
  "Кулинич",
  "Кульчицька",
  "Лагойда",
  "Лазірко",
  "Ланова",
  "Латан",
  "Латанська",
  "Лахман",
  "Левадовська",
  "Ликович",
  "Линдик",
  "Ліхно",
  "Лобачевська",
  "Ломова",
  "Лугова",
  "Луцька",
  "Луцьків",
  "Лученко",
  "Лучко",
  "Люта",
  "Лящук",
  "Магера",
  "Мазайло",
  "Мазило",
  "Мазун",
  "Майборода",
  "Майстренко",
  "Маковецька",
  "Малкович",
  "Мамій",
  "Маринич",
  "Марієвська",
  "Марків",
  "Махно",
  "Миклашевська",
  "Миклухо",
  "Милославська",
  "Михайлюк",
  "Міняйло",
  "Могилевська",
  "Москаль",
  "Москалюк",
  "Мотрієнко",
  "Негода",
  "Ногачевська",
  "Опенько",
  "Осадко",
  "Павленко",
  "Павлишина",
  "Павлів",
  "Пагутяк",
  "Паламарчук",
  "Палій",
  "Паращук",
  "Пасічник",
  "Пендик",
  "Петик",
  "Петлюра",
  "Петренко",
  "Петрина",
  "Петришина",
  "Петрів",
  "Плаксій",
  "Погиба",
  "Поліщук",
  "Пономарів",
  "Поривай",
  "Поривайло",
  "Потебенько",
  "Потоцька",
  "Пригода",
  "Приймак",
  "Притула",
  "Прядун",
  "Розпутня",
  "Романишина",
  "Ромей",
  "Роменець",
  "Ромочко",
  "Савицька",
  "Саєнко",
  "Свидригайло",
  "Семеночко",
  "Семещук",
  "Сердюк",
  "Силецька",
  "Сідлецька",
  "Сідляк",
  "Сірко",
  "Скиба",
  "Скоропадська",
  "Слободян",
  "Сосюра",
  "Сплюха",
  "Спотикач",
  "Степанець",
  "Стигайло",
  "Сторожук",
  "Сторчак",
  "Стоян",
  "Сучак",
  "Сушко",
  "Тарасюк",
  "Тиндарей",
  "Ткаченко",
  "Третяк",
  "Троян",
  "Трублаєвська",
  "Трясило",
  "Трясун",
  "Уманець",
  "Унич",
  "Усич",
  "Федоришина",
  "Цушко",
  "Червоній",
  "Шамрило",
  "Шевченко",
  "Шестак",
  "Шиндарей",
  "Шиян",
  "Шкараба",
  "Шудрик",
  "Шумило",
  "Шупик",
  "Шухевич",
  "Щербак",
  "Юрчишина",
  "Юхно",
  "Ющик",
  "Ющук",
  "Яворівська",
  "Ялова",
  "Ялюк",
  "Янюк",
  "Ярмак",
  "Яцишина",
  "Яцьків",
  "Ящук"
];

},{}],785:[function(require,module,exports){
module["exports"] = [
  "Адамівна",
  "Азарівна",
  "Алевтинівна",
  "Альбертівна",
  "Анастасівна",
  "Анатоліївна",
  "Андріївна",
  "Антонівна",
  "Аркадіївна",
  "Арсенівна",
  "Арсеніївна",
  "Артемівна",
  "Архипівна",
  "Аскольдівна",
  "Афанасіївна",
  "Білославівна",
  "Богданівна",
  "Божемирівна",
  "Боженівна",
  "Болеславівна",
  "Боримирівна",
  "Борисівна",
  "Бориславівна",
  "Братиславівна",
  "В’ячеславівна",
  "Вадимівна",
  "Валентинівна",
  "Валеріївна",
  "Василівна",
  "Вікторівна",
  "Віталіївна",
  "Владиславівна",
  "Володимирівна",
  "Всеволодівна",
  "Всеславівна",
  "Гаврилівна",
  "Гарасимівна",
  "Георгіївна",
  "Гнатівна",
  "Гордіївна",
  "Григоріївна",
  "Данилівна",
  "Даромирівна",
  "Денисівна",
  "Дмитрівна",
  "Добромирівна",
  "Доброславівна",
  "Євгенівна",
  "Захарівна",
  "Захаріївна",
  "Збориславівна",
  "Звенимирівна",
  "Звениславівна",
  "Зеновіївна",
  "Зиновіївна",
  "Златомирівна",
  "Зореславівна",
  "Іванівна",
  "Ігорівна",
  "Ізяславівна",
  "Корнеліївна",
  "Корнилівна",
  "Корніївна",
  "Костянтинівна",
  "Лаврентіївна",
  "Любомирівна",
  "Макарівна",
  "Максимівна",
  "Марківна",
  "Маркіянівна",
  "Матвіївна",
  "Мечиславівна",
  "Микитівна",
  "Миколаївна",
  "Миронівна",
  "Мирославівна",
  "Михайлівна",
  "Мстиславівна",
  "Назарівна",
  "Назаріївна",
  "Натанівна",
  "Немирівна",
  "Несторівна",
  "Олегівна",
  "Олександрівна",
  "Олексіївна",
  "Олельківна",
  "Омелянівна",
  "Орестівна",
  "Орхипівна",
  "Остапівна",
  "Охрімівна",
  "Павлівна",
  "Панасівна",
  "Пантелеймонівна",
  "Петрівна",
  "Пилипівна",
  "Радимирівна",
  "Радимівна",
  "Родіонівна",
  "Романівна",
  "Ростиславівна",
  "Русланівна",
  "Святославівна",
  "Сергіївна",
  "Славутівна",
  "Станіславівна",
  "Степанівна",
  "Стефаніївна",
  "Тарасівна",
  "Тимофіївна",
  "Тихонівна",
  "Устимівна",
  "Юріївна",
  "Юхимівна",
  "Ярославівна"
];

},{}],786:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.male_first_name = require("./male_first_name");
name.male_middle_name = require("./male_middle_name");
name.male_last_name = require("./male_last_name");
name.female_first_name = require("./female_first_name");
name.female_middle_name = require("./female_middle_name");
name.female_last_name = require("./female_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./female_first_name":783,"./female_last_name":784,"./female_middle_name":785,"./male_first_name":787,"./male_last_name":788,"./male_middle_name":789,"./name":790,"./prefix":791,"./suffix":792,"./title":793}],787:[function(require,module,exports){
module["exports"] = [
  "Августин",
  "Аврелій",
  "Адам",
  "Адріян",
  "Азарій",
  "Алевтин",
  "Альберт",
  "Анастас",
  "Анастасій",
  "Анатолій",
  "Андрій",
  "Антін",
  "Антон",
  "Антоній",
  "Аркадій",
  "Арсен",
  "Арсеній",
  "Артем",
  "Архип",
  "Аскольд",
  "Афанасій",
  "Біломир",
  "Білослав",
  "Богдан",
  "Божемир",
  "Божен",
  "Болеслав",
  "Боримир",
  "Боримисл",
  "Борис",
  "Борислав",
  "Братимир",
  "Братислав",
  "Братомил",
  "Братослав",
  "Брячислав",
  "Будимир",
  "Буйтур",
  "Буревіст",
  "В’ячеслав",
  "Вадим",
  "Валентин",
  "Валерій",
  "Василь",
  "Велемир",
  "Віктор",
  "Віталій",
  "Влад",
  "Владислав",
  "Володимир",
  "Володислав",
  "Всевлад",
  "Всеволод",
  "Всеслав",
  "Гаврило",
  "Гарнослав",
  "Геннадій",
  "Георгій",
  "Герасим",
  "Гліб",
  "Гнат",
  "Гордій",
  "Горимир",
  "Горислав",
  "Градимир",
  "Григорій",
  "Далемир",
  "Данило",
  "Дарій",
  "Даромир",
  "Денис",
  "Дмитро",
  "Добромир",
  "Добромисл",
  "Доброслав",
  "Євген",
  "Єремій",
  "Захар",
  "Захарій",
  "Зборислав",
  "Звенигор",
  "Звенимир",
  "Звенислав",
  "Земислав",
  "Зеновій",
  "Зиновій",
  "Злат",
  "Златомир",
  "Зоремир",
  "Зореслав",
  "Зорян",
  "Іван",
  "Ігор",
  "Ізяслав",
  "Ілля",
  "Кий",
  "Корнелій",
  "Корнилій",
  "Корнило",
  "Корній",
  "Костянтин",
  "Кузьма",
  "Лаврентій",
  "Лаврін",
  "Лад",
  "Ладислав",
  "Ладо",
  "Ладомир",
  "Левко",
  "Листвич",
  "Лук’ян",
  "Любодар",
  "Любозар",
  "Любомир",
  "Макар",
  "Максим",
  "Мар’ян",
  "Маркіян",
  "Марко",
  "Матвій",
  "Мечислав",
  "Микита",
  "Микола",
  "Мирон",
  "Мирослав",
  "Михайло",
  "Мстислав",
  "Мусій",
  "Назар",
  "Назарій",
  "Натан",
  "Немир",
  "Нестор",
  "Олег",
  "Олександр",
  "Олексій",
  "Олелько",
  "Олесь",
  "Омелян",
  "Орест",
  "Орхип",
  "Остап",
  "Охрім",
  "Павло",
  "Панас",
  "Пантелеймон",
  "Петро",
  "Пилип",
  "Подолян",
  "Потап",
  "Радим",
  "Радимир",
  "Ратибор",
  "Ратимир",
  "Родіон",
  "Родослав",
  "Роксолан",
  "Роман",
  "Ростислав",
  "Руслан",
  "Святополк",
  "Святослав",
  "Семибор",
  "Сергій",
  "Синьоок",
  "Славолюб",
  "Славомир",
  "Славута",
  "Сніжан",
  "Сологуб",
  "Станіслав",
  "Степан",
  "Стефаній",
  "Стожар",
  "Тарас",
  "Тиміш",
  "Тимофій",
  "Тихон",
  "Тур",
  "Устим",
  "Хвалимир",
  "Хорив",
  "Чорнота",
  "Щастислав",
  "Щек",
  "Юліан",
  "Юрій",
  "Юхим",
  "Ян",
  "Ярема",
  "Яровид",
  "Яромил",
  "Яромир",
  "Ярополк",
  "Ярослав"
];

},{}],788:[function(require,module,exports){
module["exports"] = [
  "Андрухович",
  "Бабух",
  "Балабан",
  "Балабух",
  "Балакун",
  "Балицький",
  "Бамбула",
  "Бандера",
  "Барановський",
  "Бачей",
  "Башук",
  "Бердник",
  "Білич",
  "Бондаренко",
  "Борецький",
  "Боровський",
  "Борочко",
  "Боярчук",
  "Брицький",
  "Бурмило",
  "Бутько",
  "Василин",
  "Василишин",
  "Васильківський",
  "Вергун",
  "Вередун",
  "Верещук",
  "Витребенько",
  "Вітряк",
  "Волощук",
  "Гайдук",
  "Гайовий",
  "Гайчук",
  "Галаєнко",
  "Галатей",
  "Галаціон",
  "Гаман",
  "Гамула",
  "Ганич",
  "Гарай",
  "Гарун",
  "Гладківський",
  "Гладух",
  "Глинський",
  "Гнатишин",
  "Гойко",
  "Головець",
  "Горбач",
  "Гордійчук",
  "Горовий",
  "Городоцький",
  "Гречко",
  "Григоришин",
  "Гриневецький",
  "Гриневський",
  "Гришко",
  "Громико",
  "Данилишин",
  "Данилко",
  "Демків",
  "Демчишин",
  "Дзюб’як",
  "Дзюба",
  "Дідух",
  "Дмитришин",
  "Дмитрук",
  "Довгалевський",
  "Дурдинець",
  "Євенко",
  "Євпак",
  "Ємець",
  "Єрмак",
  "Забіла",
  "Зварич",
  "Зінкевич",
  "Зленко",
  "Іванишин",
  "Іванів",
  "Іванців",
  "Калач",
  "Кандиба",
  "Карпух",
  "Каськів",
  "Кивач",
  "Коваленко",
  "Ковальський",
  "Коломієць",
  "Коман",
  "Компанієць",
  "Кононець",
  "Кордун",
  "Корецький",
  "Корнїйчук",
  "Коров’як",
  "Коцюбинський",
  "Кулинич",
  "Кульчицький",
  "Лагойда",
  "Лазірко",
  "Лановий",
  "Латаний",
  "Латанський",
  "Лахман",
  "Левадовський",
  "Ликович",
  "Линдик",
  "Ліхно",
  "Лобачевський",
  "Ломовий",
  "Луговий",
  "Луцький",
  "Луцьків",
  "Лученко",
  "Лучко",
  "Лютий",
  "Лящук",
  "Магера",
  "Мазайло",
  "Мазило",
  "Мазун",
  "Майборода",
  "Майстренко",
  "Маковецький",
  "Малкович",
  "Мамій",
  "Маринич",
  "Марієвський",
  "Марків",
  "Махно",
  "Миклашевський",
  "Миклухо",
  "Милославський",
  "Михайлюк",
  "Міняйло",
  "Могилевський",
  "Москаль",
  "Москалюк",
  "Мотрієнко",
  "Негода",
  "Ногачевський",
  "Опенько",
  "Осадко",
  "Павленко",
  "Павлишин",
  "Павлів",
  "Пагутяк",
  "Паламарчук",
  "Палій",
  "Паращук",
  "Пасічник",
  "Пендик",
  "Петик",
  "Петлюра",
  "Петренко",
  "Петрин",
  "Петришин",
  "Петрів",
  "Плаксій",
  "Погиба",
  "Поліщук",
  "Пономарів",
  "Поривай",
  "Поривайло",
  "Потебенько",
  "Потоцький",
  "Пригода",
  "Приймак",
  "Притула",
  "Прядун",
  "Розпутній",
  "Романишин",
  "Романів",
  "Ромей",
  "Роменець",
  "Ромочко",
  "Савицький",
  "Саєнко",
  "Свидригайло",
  "Семеночко",
  "Семещук",
  "Сердюк",
  "Силецький",
  "Сідлецький",
  "Сідляк",
  "Сірко",
  "Скиба",
  "Скоропадський",
  "Слободян",
  "Сосюра",
  "Сплюх",
  "Спотикач",
  "Стахів",
  "Степанець",
  "Стецьків",
  "Стигайло",
  "Сторожук",
  "Сторчак",
  "Стоян",
  "Сучак",
  "Сушко",
  "Тарасюк",
  "Тиндарей",
  "Ткаченко",
  "Третяк",
  "Троян",
  "Трублаєвський",
  "Трясило",
  "Трясун",
  "Уманець",
  "Унич",
  "Усич",
  "Федоришин",
  "Хитрово",
  "Цимбалістий",
  "Цушко",
  "Червоній",
  "Шамрило",
  "Шевченко",
  "Шестак",
  "Шиндарей",
  "Шиян",
  "Шкараба",
  "Шудрик",
  "Шумило",
  "Шупик",
  "Шухевич",
  "Щербак",
  "Юрчишин",
  "Юхно",
  "Ющик",
  "Ющук",
  "Яворівський",
  "Яловий",
  "Ялюк",
  "Янюк",
  "Ярмак",
  "Яцишин",
  "Яцьків",
  "Ящук"
];

},{}],789:[function(require,module,exports){
module["exports"] = [
  "Адамович",
  "Азарович",
  "Алевтинович",
  "Альбертович",
  "Анастасович",
  "Анатолійович",
  "Андрійович",
  "Антонович",
  "Аркадійович",
  "Арсенійович",
  "Арсенович",
  "Артемович",
  "Архипович",
  "Аскольдович",
  "Афанасійович",
  "Білославович",
  "Богданович",
  "Божемирович",
  "Боженович",
  "Болеславович",
  "Боримирович",
  "Борисович",
  "Бориславович",
  "Братиславович",
  "В’ячеславович",
  "Вадимович",
  "Валентинович",
  "Валерійович",
  "Васильович",
  "Вікторович",
  "Віталійович",
  "Владиславович",
  "Володимирович",
  "Всеволодович",
  "Всеславович",
  "Гаврилович",
  "Герасимович",
  "Георгійович",
  "Гнатович",
  "Гордійович",
  "Григорійович",
  "Данилович",
  "Даромирович",
  "Денисович",
  "Дмитрович",
  "Добромирович",
  "Доброславович",
  "Євгенович",
  "Захарович",
  "Захарійович",
  "Збориславович",
  "Звенимирович",
  "Звениславович",
  "Зеновійович",
  "Зиновійович",
  "Златомирович",
  "Зореславович",
  "Іванович",
  "Ігорович",
  "Ізяславович",
  "Корнелійович",
  "Корнилович",
  "Корнійович",
  "Костянтинович",
  "Лаврентійович",
  "Любомирович",
  "Макарович",
  "Максимович",
  "Маркович",
  "Маркіянович",
  "Матвійович",
  "Мечиславович",
  "Микитович",
  "Миколайович",
  "Миронович",
  "Мирославович",
  "Михайлович",
  "Мстиславович",
  "Назарович",
  "Назарійович",
  "Натанович",
  "Немирович",
  "Несторович",
  "Олегович",
  "Олександрович",
  "Олексійович",
  "Олелькович",
  "Омелянович",
  "Орестович",
  "Орхипович",
  "Остапович",
  "Охрімович",
  "Павлович",
  "Панасович",
  "Пантелеймонович",
  "Петрович",
  "Пилипович",
  "Радимирович",
  "Радимович",
  "Родіонович",
  "Романович",
  "Ростиславович",
  "Русланович",
  "Святославович",
  "Сергійович",
  "Славутович",
  "Станіславович",
  "Степанович",
  "Стефанович",
  "Тарасович",
  "Тимофійович",
  "Тихонович",
  "Устимович",
  "Юрійович",
  "Юхимович",
  "Ярославович"
];

},{}],790:[function(require,module,exports){
module.exports=require(647)
},{"/Users/a/dev/faker.js/lib/locales/ru/name/name.js":647}],791:[function(require,module,exports){
module["exports"] = [
  "Пан",
  "Пані"
];

},{}],792:[function(require,module,exports){
module["exports"] = [
  "проф.",
  "доц.",
  "докт. пед. наук",
  "докт. політ. наук",
  "докт. філол. наук",
  "докт. філос. наук",
  "докт. і. наук",
  "докт. юрид. наук",
  "докт. техн. наук",
  "докт. психол. наук",
  "канд. пед. наук",
  "канд. політ. наук",
  "канд. філол. наук",
  "канд. філос. наук",
  "канд. і. наук",
  "канд. юрид. наук",
  "канд. техн. наук",
  "канд. психол. наук"
];

},{}],793:[function(require,module,exports){
module["exports"] = {
  "descriptor": [
    "Головний",
    "Генеральний",
    "Провідний",
    "Національний",
    "Регіональний",
    "Обласний",
    "Районний",
    "Глобальний",
    "Міжнародний",
    "Центральний"
  ],
  "level": [
    "маркетинговий",
    "оптимізаційний",
    "страховий",
    "функціональний",
    "інтеграційний",
    "логістичний"
  ],
  "job": [
    "інженер",
    "агент",
    "адміністратор",
    "аналітик",
    "архітектор",
    "дизайнер",
    "керівник",
    "консультант",
    "координатор",
    "менеджер",
    "планувальник",
    "помічник",
    "розробник",
    "спеціаліст",
    "співробітник",
    "технік"
  ]
};

},{}],794:[function(require,module,exports){
module["exports"] = [
  "(044) ###-##-##",
  "(050) ###-##-##",
  "(063) ###-##-##",
  "(066) ###-##-##",
  "(073) ###-##-##",
  "(091) ###-##-##",
  "(092) ###-##-##",
  "(093) ###-##-##",
  "(094) ###-##-##",
  "(095) ###-##-##",
  "(096) ###-##-##",
  "(097) ###-##-##",
  "(098) ###-##-##",
  "(099) ###-##-##"
];

},{}],795:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":794,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],796:[function(require,module,exports){
module["exports"] = [
  "#{city_root}"
];

},{}],797:[function(require,module,exports){
module["exports"] = [
  "Bắc Giang",
  "Bắc Kạn",
  "Bắc Ninh",
  "Cao Bằng",
  "Điện Biên",
  "Hà Giang",
  "Hà Nam",
  "Hà Tây",
  "Hải Dương",
  "TP Hải Phòng",
  "Hòa Bình",
  "Hưng Yên",
  "Lai Châu",
  "Lào Cai",
  "Lạng Sơn",
  "Nam Định",
  "Ninh Bình",
  "Phú Thọ",
  "Quảng Ninh",
  "Sơn La",
  "Thái Bình",
  "Thái Nguyên",
  "Tuyên Quang",
  "Vĩnh Phúc",
  "Yên Bái",
  "TP Đà Nẵng",
  "Bình Định",
  "Đắk Lắk",
  "Đắk Nông",
  "Gia Lai",
  "Hà Tĩnh",
  "Khánh Hòa",
  "Kon Tum",
  "Nghệ An",
  "Phú Yên",
  "Quảng Bình",
  "Quảng Nam",
  "Quảng Ngãi",
  "Quảng Trị",
  "Thanh Hóa",
  "Thừa Thiên Huế",
  "TP TP. Hồ Chí Minh",
  "An Giang",
  "Bà Rịa Vũng Tàu",
  "Bạc Liêu",
  "Bến Tre",
  "Bình Dương",
  "Bình Phước",
  "Bình Thuận",
  "Cà Mau",
  "TP Cần Thơ",
  "Đồng Nai",
  "Đồng Tháp",
  "Hậu Giang",
  "Kiên Giang",
  "Lâm Đồng",
  "Long An",
  "Ninh Thuận",
  "Sóc Trăng",
  "Tây Ninh",
  "Tiền Giang",
  "Trà Vinh",
  "Vĩnh Long"
];

},{}],798:[function(require,module,exports){
module["exports"] = [
  "Avon",
  "Bedfordshire",
  "Berkshire",
  "Borders",
  "Buckinghamshire",
  "Cambridgeshire",
  "Central",
  "Cheshire",
  "Cleveland",
  "Clwyd",
  "Cornwall",
  "County Antrim",
  "County Armagh",
  "County Down",
  "County Fermanagh",
  "County Londonderry",
  "County Tyrone",
  "Cumbria",
  "Derbyshire",
  "Devon",
  "Dorset",
  "Dumfries and Galloway",
  "Durham",
  "Dyfed",
  "East Sussex",
  "Essex",
  "Fife",
  "Gloucestershire",
  "Grampian",
  "Greater Manchester",
  "Gwent",
  "Gwynedd County",
  "Hampshire",
  "Herefordshire",
  "Hertfordshire",
  "Highlands and Islands",
  "Humberside",
  "Isle of Wight",
  "Kent",
  "Lancashire",
  "Leicestershire",
  "Lincolnshire",
  "Lothian",
  "Merseyside",
  "Mid Glamorgan",
  "Norfolk",
  "North Yorkshire",
  "Northamptonshire",
  "Northumberland",
  "Nottinghamshire",
  "Oxfordshire",
  "Powys",
  "Rutland",
  "Shropshire",
  "Somerset",
  "South Glamorgan",
  "South Yorkshire",
  "Staffordshire",
  "Strathclyde",
  "Suffolk",
  "Surrey",
  "Tayside",
  "Tyne and Wear",
  "Việt Nam",
  "Warwickshire",
  "West Glamorgan",
  "West Midlands",
  "West Sussex",
  "West Yorkshire",
  "Wiltshire",
  "Worcestershire"
];

},{}],799:[function(require,module,exports){
module["exports"] = [
  "Việt Nam"
];

},{}],800:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_root = require("./city_root");
address.city = require("./city");
address.county = require("./county");
address.default_country = require("./default_country");

},{"./city":796,"./city_root":797,"./county":798,"./default_country":799}],801:[function(require,module,exports){
module.exports=require(208)
},{"/Users/a/dev/faker.js/lib/locales/en_GB/cell_phone/formats.js":208}],802:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./formats":801,"/Users/a/dev/faker.js/lib/locales/de/cell_phone/index.js":29}],803:[function(require,module,exports){
var company = {};
module['exports'] = company;
company.prefix = require("./prefix");
company.name = require("./name");

},{"./name":804,"./prefix":805}],804:[function(require,module,exports){
module["exports"] = [
  "#{prefix} #{Name.last_name}"
];

},{}],805:[function(require,module,exports){
module["exports"] = [
  "Công ty",
  "Cty TNHH",
  "Cty",
  "Cửa hàng",
  "Trung tâm",
  "Chi nhánh"
];

},{}],806:[function(require,module,exports){
var vi = {};
module['exports'] = vi;
vi.title = "Vietnamese";
vi.address = require("./address");
vi.internet = require("./internet");
vi.phone_number = require("./phone_number");
vi.cell_phone = require("./cell_phone");
vi.name = require("./name");
vi.company = require("./company");
vi.lorem = require("./lorem");

},{"./address":800,"./cell_phone":802,"./company":803,"./internet":808,"./lorem":809,"./name":812,"./phone_number":816}],807:[function(require,module,exports){
module["exports"] = [
  "com",
  "net",
  "info",
  "vn",
  "com.vn"
];

},{}],808:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./domain_suffix":807,"/Users/a/dev/faker.js/lib/locales/de_CH/internet/index.js":88}],809:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"./words":810,"/Users/a/dev/faker.js/lib/locales/de/lorem/index.js":38}],810:[function(require,module,exports){
module["exports"] = [
  "đã",
  "đang",
  "ừ",
  "ờ",
  "á",
  "không",
  "biết",
  "gì",
  "hết",
  "đâu",
  "nha",
  "thế",
  "thì",
  "là",
  "đánh",
  "đá",
  "đập",
  "phá",
  "viết",
  "vẽ",
  "tô",
  "thuê",
  "mướn",
  "mượn",
  "mua",
  "một",
  "hai",
  "ba",
  "bốn",
  "năm",
  "sáu",
  "bảy",
  "tám",
  "chín",
  "mười",
  "thôi",
  "việc",
  "nghỉ",
  "làm",
  "nhà",
  "cửa",
  "xe",
  "đạp",
  "ác",
  "độc",
  "khoảng",
  "khoan",
  "thuyền",
  "tàu",
  "bè",
  "lầu",
  "xanh",
  "đỏ",
  "tím",
  "vàng",
  "kim",
  "chỉ",
  "khâu",
  "may",
  "vá",
  "em",
  "anh",
  "yêu",
  "thương",
  "thích",
  "con",
  "cái",
  "bàn",
  "ghế",
  "tủ",
  "quần",
  "áo",
  "nón",
  "dép",
  "giày",
  "lỗi",
  "được",
  "ghét",
  "giết",
  "chết",
  "hết",
  "tôi",
  "bạn",
  "tui",
  "trời",
  "trăng",
  "mây",
  "gió",
  "máy",
  "hàng",
  "hóa",
  "leo",
  "núi",
  "bơi",
  "biển",
  "chìm",
  "xuồng",
  "nước",
  "ngọt",
  "ruộng",
  "đồng",
  "quê",
  "hương"
];

},{}],811:[function(require,module,exports){
module["exports"] = [
  "Phạm",
  "Nguyễn",
  "Trần",
  "Lê",
  "Lý",
  "Hoàng",
  "Phan",
  "Vũ",
  "Tăng",
  "Đặng",
  "Bùi",
  "Đỗ",
  "Hồ",
  "Ngô",
  "Dương",
  "Đào",
  "Đoàn",
  "Vương",
  "Trịnh",
  "Đinh",
  "Lâm",
  "Phùng",
  "Mai",
  "Tô",
  "Trương",
  "Hà"
];

},{}],812:[function(require,module,exports){
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.name = require("./name");

},{"./first_name":811,"./last_name":813,"./name":814}],813:[function(require,module,exports){
module["exports"] = [
  "Nam",
  "Trung",
  "Thanh",
  "Thị",
  "Văn",
  "Dương",
  "Tăng",
  "Quốc",
  "Như",
  "Phạm",
  "Nguyễn",
  "Trần",
  "Lê",
  "Lý",
  "Hoàng",
  "Phan",
  "Vũ",
  "Tăng",
  "Đặng",
  "Bùi",
  "Đỗ",
  "Hồ",
  "Ngô",
  "Dương",
  "Đào",
  "Đoàn",
  "Vương",
  "Trịnh",
  "Đinh",
  "Lâm",
  "Phùng",
  "Mai",
  "Tô",
  "Trương",
  "Hà",
  "Vinh",
  "Nhung",
  "Hòa",
  "Tiến",
  "Tâm",
  "Bửu",
  "Loan",
  "Hiền",
  "Hải",
  "Vân",
  "Kha",
  "Minh",
  "Nhân",
  "Triệu",
  "Tuân",
  "Hữu",
  "Đức",
  "Phú",
  "Khoa",
  "Thắgn",
  "Sơn",
  "Dung",
  "Tú",
  "Trinh",
  "Thảo",
  "Sa",
  "Kim",
  "Long",
  "Thi",
  "Cường",
  "Ngọc",
  "Sinh",
  "Khang",
  "Phong",
  "Thắm",
  "Thu",
  "Thủy",
  "Nhàn"
];

},{}],814:[function(require,module,exports){
module["exports"] = [
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name} #{last_name}"
];

},{}],815:[function(require,module,exports){
module.exports=require(213)
},{"/Users/a/dev/faker.js/lib/locales/en_GB/phone_number/formats.js":213}],816:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":815,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],817:[function(require,module,exports){
module["exports"] = [
  "#####",
  "####",
  "###",
  "##",
  "#"
];

},{}],818:[function(require,module,exports){
module.exports=require(695)
},{"/Users/a/dev/faker.js/lib/locales/sv/address/city.js":695}],819:[function(require,module,exports){
module["exports"] = [
  "长",
  "上",
  "南",
  "西",
  "北",
  "诸",
  "宁",
  "珠",
  "武",
  "衡",
  "成",
  "福",
  "厦",
  "贵",
  "吉",
  "海",
  "太",
  "济",
  "安",
  "吉",
  "包"
];

},{}],820:[function(require,module,exports){
module["exports"] = [
  "沙市",
  "京市",
  "宁市",
  "安市",
  "乡县",
  "海市",
  "码市",
  "汉市",
  "阳市",
  "都市",
  "州市",
  "门市",
  "阳市",
  "口市",
  "原市",
  "南市",
  "徽市",
  "林市",
  "头市"
];

},{}],821:[function(require,module,exports){
module["exports"] = [
  "中国"
];

},{}],822:[function(require,module,exports){
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":817,"./city":818,"./city_prefix":819,"./city_suffix":820,"./default_country":821,"./postcode":823,"./state":824,"./state_abbr":825,"./street_address":826,"./street_name":827,"./street_suffix":828}],823:[function(require,module,exports){
module.exports=require(621)
},{"/Users/a/dev/faker.js/lib/locales/ru/address/postcode.js":621}],824:[function(require,module,exports){
module["exports"] = [
  "北京市",
  "上海市",
  "天津市",
  "重庆市",
  "黑龙江省",
  "吉林省",
  "辽宁省",
  "内蒙古",
  "河北省",
  "新疆",
  "甘肃省",
  "青海省",
  "陕西省",
  "宁夏",
  "河南省",
  "山东省",
  "山西省",
  "安徽省",
  "湖北省",
  "湖南省",
  "江苏省",
  "四川省",
  "贵州省",
  "云南省",
  "广西省",
  "西藏",
  "浙江省",
  "江西省",
  "广东省",
  "福建省",
  "台湾省",
  "海南省",
  "香港",
  "澳门"
];

},{}],825:[function(require,module,exports){
module["exports"] = [
  "京",
  "沪",
  "津",
  "渝",
  "黑",
  "吉",
  "辽",
  "蒙",
  "冀",
  "新",
  "甘",
  "青",
  "陕",
  "宁",
  "豫",
  "鲁",
  "晋",
  "皖",
  "鄂",
  "湘",
  "苏",
  "川",
  "黔",
  "滇",
  "桂",
  "藏",
  "浙",
  "赣",
  "粤",
  "闽",
  "台",
  "琼",
  "港",
  "澳"
];

},{}],826:[function(require,module,exports){
module["exports"] = [
  "#{street_name}#{building_number}号"
];

},{}],827:[function(require,module,exports){
module["exports"] = [
  "#{Name.last_name}#{street_suffix}"
];

},{}],828:[function(require,module,exports){
module["exports"] = [
  "巷",
  "街",
  "路",
  "桥",
  "侬",
  "旁",
  "中心",
  "栋"
];

},{}],829:[function(require,module,exports){
var zh_CN = {};
module['exports'] = zh_CN;
zh_CN.title = "Chinese";
zh_CN.address = require("./address");
zh_CN.name = require("./name");
zh_CN.phone_number = require("./phone_number");

},{"./address":822,"./name":831,"./phone_number":835}],830:[function(require,module,exports){
module["exports"] = [
  "王",
  "李",
  "张",
  "刘",
  "陈",
  "杨",
  "黄",
  "吴",
  "赵",
  "周",
  "徐",
  "孙",
  "马",
  "朱",
  "胡",
  "林",
  "郭",
  "何",
  "高",
  "罗",
  "郑",
  "梁",
  "谢",
  "宋",
  "唐",
  "许",
  "邓",
  "冯",
  "韩",
  "曹",
  "曾",
  "彭",
  "萧",
  "蔡",
  "潘",
  "田",
  "董",
  "袁",
  "于",
  "余",
  "叶",
  "蒋",
  "杜",
  "苏",
  "魏",
  "程",
  "吕",
  "丁",
  "沈",
  "任",
  "姚",
  "卢",
  "傅",
  "钟",
  "姜",
  "崔",
  "谭",
  "廖",
  "范",
  "汪",
  "陆",
  "金",
  "石",
  "戴",
  "贾",
  "韦",
  "夏",
  "邱",
  "方",
  "侯",
  "邹",
  "熊",
  "孟",
  "秦",
  "白",
  "江",
  "阎",
  "薛",
  "尹",
  "段",
  "雷",
  "黎",
  "史",
  "龙",
  "陶",
  "贺",
  "顾",
  "毛",
  "郝",
  "龚",
  "邵",
  "万",
  "钱",
  "严",
  "赖",
  "覃",
  "洪",
  "武",
  "莫",
  "孔"
];

},{}],831:[function(require,module,exports){
arguments[4][812][0].apply(exports,arguments)
},{"./first_name":830,"./last_name":832,"./name":833,"/Users/a/dev/faker.js/lib/locales/vi/name/index.js":812}],832:[function(require,module,exports){
module["exports"] = [
  "绍齐",
  "博文",
  "梓晨",
  "胤祥",
  "瑞霖",
  "明哲",
  "天翊",
  "凯瑞",
  "健雄",
  "耀杰",
  "潇然",
  "子涵",
  "越彬",
  "钰轩",
  "智辉",
  "致远",
  "俊驰",
  "雨泽",
  "烨磊",
  "晟睿",
  "文昊",
  "修洁",
  "黎昕",
  "远航",
  "旭尧",
  "鸿涛",
  "伟祺",
  "荣轩",
  "越泽",
  "浩宇",
  "瑾瑜",
  "皓轩",
  "擎苍",
  "擎宇",
  "志泽",
  "子轩",
  "睿渊",
  "弘文",
  "哲瀚",
  "雨泽",
  "楷瑞",
  "建辉",
  "晋鹏",
  "天磊",
  "绍辉",
  "泽洋",
  "鑫磊",
  "鹏煊",
  "昊强",
  "伟宸",
  "博超",
  "君浩",
  "子骞",
  "鹏涛",
  "炎彬",
  "鹤轩",
  "越彬",
  "风华",
  "靖琪",
  "明辉",
  "伟诚",
  "明轩",
  "健柏",
  "修杰",
  "志泽",
  "弘文",
  "峻熙",
  "嘉懿",
  "煜城",
  "懿轩",
  "烨伟",
  "苑博",
  "伟泽",
  "熠彤",
  "鸿煊",
  "博涛",
  "烨霖",
  "烨华",
  "煜祺",
  "智宸",
  "正豪",
  "昊然",
  "明杰",
  "立诚",
  "立轩",
  "立辉",
  "峻熙",
  "弘文",
  "熠彤",
  "鸿煊",
  "烨霖",
  "哲瀚",
  "鑫鹏",
  "昊天",
  "思聪",
  "展鹏",
  "笑愚",
  "志强",
  "炫明",
  "雪松",
  "思源",
  "智渊",
  "思淼",
  "晓啸",
  "天宇",
  "浩然",
  "文轩",
  "鹭洋",
  "振家",
  "乐驹",
  "晓博",
  "文博",
  "昊焱",
  "立果",
  "金鑫",
  "锦程",
  "嘉熙",
  "鹏飞",
  "子默",
  "思远",
  "浩轩",
  "语堂",
  "聪健",
  "明",
  "文",
  "果",
  "思",
  "鹏",
  "驰",
  "涛",
  "琪",
  "浩",
  "航",
  "彬"
];

},{}],833:[function(require,module,exports){
module["exports"] = [
  "#{first_name}#{last_name}"
];

},{}],834:[function(require,module,exports){
module["exports"] = [
  "###-########",
  "####-########",
  "###########"
];

},{}],835:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":834,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],836:[function(require,module,exports){
module.exports=require(314)
},{"/Users/a/dev/faker.js/lib/locales/fr/address/building_number.js":314}],837:[function(require,module,exports){
module.exports=require(695)
},{"/Users/a/dev/faker.js/lib/locales/sv/address/city.js":695}],838:[function(require,module,exports){
module["exports"] = [
  "臺北",
  "新北",
  "桃園",
  "臺中",
  "臺南",
  "高雄",
  "基隆",
  "新竹",
  "嘉義",
  "苗栗",
  "彰化",
  "南投",
  "雲林",
  "屏東",
  "宜蘭",
  "花蓮",
  "臺東",
  "澎湖",
  "金門",
  "連江"
];

},{}],839:[function(require,module,exports){
module["exports"] = [
  "縣",
  "市"
];

},{}],840:[function(require,module,exports){
module["exports"] = [
  "Taiwan (R.O.C.)"
];

},{}],841:[function(require,module,exports){
arguments[4][822][0].apply(exports,arguments)
},{"./building_number":836,"./city":837,"./city_prefix":838,"./city_suffix":839,"./default_country":840,"./postcode":842,"./state":843,"./state_abbr":844,"./street_address":845,"./street_name":846,"./street_suffix":847,"/Users/a/dev/faker.js/lib/locales/zh_CN/address/index.js":822}],842:[function(require,module,exports){
module.exports=require(621)
},{"/Users/a/dev/faker.js/lib/locales/ru/address/postcode.js":621}],843:[function(require,module,exports){
module["exports"] = [
  "福建省",
  "台灣省"
];

},{}],844:[function(require,module,exports){
module["exports"] = [
  "北",
  "新北",
  "桃",
  "中",
  "南",
  "高",
  "基",
  "竹市",
  "嘉市",
  "竹縣",
  "苗",
  "彰",
  "投",
  "雲",
  "嘉縣",
  "宜",
  "花",
  "東",
  "澎",
  "金",
  "馬"
];

},{}],845:[function(require,module,exports){
module["exports"] = [
  "#{street_name}#{building_number}號"
];

},{}],846:[function(require,module,exports){
module.exports=require(827)
},{"/Users/a/dev/faker.js/lib/locales/zh_CN/address/street_name.js":827}],847:[function(require,module,exports){
module["exports"] = [
  "街",
  "路",
  "北路",
  "南路",
  "東路",
  "西路"
];

},{}],848:[function(require,module,exports){
var zh_TW = {};
module['exports'] = zh_TW;
zh_TW.title = "Chinese (Taiwan)";
zh_TW.address = require("./address");
zh_TW.name = require("./name");
zh_TW.phone_number = require("./phone_number");

},{"./address":841,"./name":850,"./phone_number":854}],849:[function(require,module,exports){
module["exports"] = [
  "王",
  "李",
  "張",
  "劉",
  "陳",
  "楊",
  "黃",
  "吳",
  "趙",
  "週",
  "徐",
  "孫",
  "馬",
  "朱",
  "胡",
  "林",
  "郭",
  "何",
  "高",
  "羅",
  "鄭",
  "梁",
  "謝",
  "宋",
  "唐",
  "許",
  "鄧",
  "馮",
  "韓",
  "曹",
  "曾",
  "彭",
  "蕭",
  "蔡",
  "潘",
  "田",
  "董",
  "袁",
  "於",
  "餘",
  "葉",
  "蔣",
  "杜",
  "蘇",
  "魏",
  "程",
  "呂",
  "丁",
  "沈",
  "任",
  "姚",
  "盧",
  "傅",
  "鐘",
  "姜",
  "崔",
  "譚",
  "廖",
  "範",
  "汪",
  "陸",
  "金",
  "石",
  "戴",
  "賈",
  "韋",
  "夏",
  "邱",
  "方",
  "侯",
  "鄒",
  "熊",
  "孟",
  "秦",
  "白",
  "江",
  "閻",
  "薛",
  "尹",
  "段",
  "雷",
  "黎",
  "史",
  "龍",
  "陶",
  "賀",
  "顧",
  "毛",
  "郝",
  "龔",
  "邵",
  "萬",
  "錢",
  "嚴",
  "賴",
  "覃",
  "洪",
  "武",
  "莫",
  "孔"
];

},{}],850:[function(require,module,exports){
arguments[4][812][0].apply(exports,arguments)
},{"./first_name":849,"./last_name":851,"./name":852,"/Users/a/dev/faker.js/lib/locales/vi/name/index.js":812}],851:[function(require,module,exports){
module["exports"] = [
  "紹齊",
  "博文",
  "梓晨",
  "胤祥",
  "瑞霖",
  "明哲",
  "天翊",
  "凱瑞",
  "健雄",
  "耀傑",
  "瀟然",
  "子涵",
  "越彬",
  "鈺軒",
  "智輝",
  "致遠",
  "俊馳",
  "雨澤",
  "燁磊",
  "晟睿",
  "文昊",
  "修潔",
  "黎昕",
  "遠航",
  "旭堯",
  "鴻濤",
  "偉祺",
  "榮軒",
  "越澤",
  "浩宇",
  "瑾瑜",
  "皓軒",
  "擎蒼",
  "擎宇",
  "志澤",
  "子軒",
  "睿淵",
  "弘文",
  "哲瀚",
  "雨澤",
  "楷瑞",
  "建輝",
  "晉鵬",
  "天磊",
  "紹輝",
  "澤洋",
  "鑫磊",
  "鵬煊",
  "昊強",
  "偉宸",
  "博超",
  "君浩",
  "子騫",
  "鵬濤",
  "炎彬",
  "鶴軒",
  "越彬",
  "風華",
  "靖琪",
  "明輝",
  "偉誠",
  "明軒",
  "健柏",
  "修傑",
  "志澤",
  "弘文",
  "峻熙",
  "嘉懿",
  "煜城",
  "懿軒",
  "燁偉",
  "苑博",
  "偉澤",
  "熠彤",
  "鴻煊",
  "博濤",
  "燁霖",
  "燁華",
  "煜祺",
  "智宸",
  "正豪",
  "昊然",
  "明杰",
  "立誠",
  "立軒",
  "立輝",
  "峻熙",
  "弘文",
  "熠彤",
  "鴻煊",
  "燁霖",
  "哲瀚",
  "鑫鵬",
  "昊天",
  "思聰",
  "展鵬",
  "笑愚",
  "志強",
  "炫明",
  "雪松",
  "思源",
  "智淵",
  "思淼",
  "曉嘯",
  "天宇",
  "浩然",
  "文軒",
  "鷺洋",
  "振家",
  "樂駒",
  "曉博",
  "文博",
  "昊焱",
  "立果",
  "金鑫",
  "錦程",
  "嘉熙",
  "鵬飛",
  "子默",
  "思遠",
  "浩軒",
  "語堂",
  "聰健"
];

},{}],852:[function(require,module,exports){
module.exports=require(833)
},{"/Users/a/dev/faker.js/lib/locales/zh_CN/name/name.js":833}],853:[function(require,module,exports){
module["exports"] = [
  "0#-#######",
  "02-########",
  "09##-######"
];

},{}],854:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./formats":853,"/Users/a/dev/faker.js/lib/locales/de/phone_number/index.js":47}],855:[function(require,module,exports){

var Lorem = function (faker) {
  var self = this;
  var Helpers = faker.helpers;

  self.words = function (num) {
      if (typeof num == 'undefined') { num = 3; }
      return Helpers.shuffle(faker.definitions.lorem.words).slice(0, num);
  };

  self.sentence = function (wordCount, range) {
      if (typeof wordCount == 'undefined') { wordCount = 3; }
      if (typeof range == 'undefined') { range = 7; }

      // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back
      //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

      return  faker.lorem.words(wordCount + faker.random.number(range)).join(' ');
  };

  self.sentences = function (sentenceCount) {
      if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
      var sentences = [];
      for (sentenceCount; sentenceCount > 0; sentenceCount--) {
        sentences.push(faker.lorem.sentence());
      }
      return sentences.join("\n");
  };

  self.paragraph = function (sentenceCount) {
      if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
      return faker.lorem.sentences(sentenceCount + faker.random.number(3));
  };

  self.paragraphs = function (paragraphCount, separator) {
    if (typeof separator === "undefined") {
      separator = "\n \r";
    }
    if (typeof paragraphCount == 'undefined') { paragraphCount = 3; }
    var paragraphs = [];
    for (paragraphCount; paragraphCount > 0; paragraphCount--) {
        paragraphs.push(faker.lorem.paragraph());
    }
    return paragraphs.join(separator);
  }
  
  return self;
};


module["exports"] = Lorem;

},{}],856:[function(require,module,exports){
function Name (faker) {

  this.firstName = function (gender) {
    if (typeof faker.definitions.name.male_first_name !== "undefined" && typeof faker.definitions.name.female_first_name !== "undefined") {
      // some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,
      // we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      if (gender === 0) {
        return faker.random.arrayElement(faker.locales[faker.locale].name.male_first_name)
      } else {
        return faker.random.arrayElement(faker.locales[faker.locale].name.female_first_name);
      }
    }
    return faker.random.arrayElement(faker.definitions.name.first_name);
  };

  this.lastName = function (gender) {
    if (typeof faker.definitions.name.male_last_name !== "undefined" && typeof faker.definitions.name.female_last_name !== "undefined") {
      // some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian
      // see above comment of firstName method
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      if (gender === 0) {
        return faker.random.arrayElement(faker.locales[faker.locale].name.male_last_name);
      } else {
        return faker.random.arrayElement(faker.locales[faker.locale].name.female_last_name);
      }
    }
    return faker.random.arrayElement(faker.definitions.name.last_name);
  };

  this.findName = function (firstName, lastName, gender) {
      var r = faker.random.number(8);
      var prefix, suffix;
      // in particular locales first and last names split by gender,
      // thus we keep consistency by passing 0 as male and 1 as female
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      firstName = firstName || faker.name.firstName(gender);
      lastName = lastName || faker.name.lastName(gender);
      switch (r) {
      case 0:
          prefix = faker.name.prefix();
          if (prefix) {
              return prefix + " " + firstName + " " + lastName;
          }
      case 1:
          suffix = faker.name.prefix();
          if (suffix) {
              return firstName + " " + lastName + " " + suffix;
          }
      }

      return firstName + " " + lastName;
  };

  this.jobTitle = function () {
    return  faker.name.jobDescriptor() + " " +
      faker.name.jobArea() + " " +
      faker.name.jobType();
  };

  this.prefix = function () {
      return faker.random.arrayElement(faker.definitions.name.prefix);
  };

  this.suffix = function () {
      return faker.random.arrayElement(faker.definitions.name.suffix);
  };

  this.title = function() {
      var descriptor  = faker.random.arrayElement(faker.definitions.name.title.descriptor),
          level       = faker.random.arrayElement(faker.definitions.name.title.level),
          job         = faker.random.arrayElement(faker.definitions.name.title.job);

      return descriptor + " " + level + " " + job;
  };

  this.jobDescriptor = function () {
    return faker.random.arrayElement(faker.definitions.name.title.descriptor);
  };

  this.jobArea = function () {
    return faker.random.arrayElement(faker.definitions.name.title.level);
  };

  this.jobType = function () {
    return faker.random.arrayElement(faker.definitions.name.title.job);
  };

}

module['exports'] = Name;
},{}],857:[function(require,module,exports){
var Phone = function (faker) {
  var self = this;

  self.phoneNumber = function (format) {
      format = format || faker.phone.phoneFormats();
      return faker.helpers.replaceSymbolWithNumber(format);
  };

  // FIXME: this is strange passing in an array index.
  self.phoneNumberFormat = function (phoneFormatsArrayIndex) {
      phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
      return faker.helpers.replaceSymbolWithNumber(faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
  };

  self.phoneFormats = function () {
    return faker.random.arrayElement(faker.definitions.phone_number.formats);
  };
  
  return self;

};

module['exports'] = Phone;
},{}],858:[function(require,module,exports){
var mersenne = require('../vendor/mersenne');

function Random (faker) {
  
  // returns a single random number based on a max number or range
  this.number = function (options) {

    if (typeof options === "number") {
      options = {
        max: options
      };
    }

    options = options || {};

    if (typeof options.min === "undefined") {
      options.min = 0;
    }

    if (typeof options.max === "undefined") {
      options.max = 99999;
    }
    if (typeof options.precision === "undefined") {
      options.precision = 1;
    }

    // Make the range inclusive of the max value
    var max = options.max;
    if (max >= 0) {
      max += options.precision;
    } 

    var randomNumber = options.precision * Math.floor(
      mersenne.rand(max / options.precision, options.min / options.precision));

    return randomNumber;

  }

  // takes an array and returns a random element of the array
  this.arrayElement = function (array) {
      array = array || ["a", "b", "c"];
      var r = faker.random.number({ max: array.length - 1 });
      return array[r];
  }

  // takes an object and returns the randomly key or value
  this.objectElement = function (object, field) {
      object = object || { "foo": "bar", "too": "car" };
      var array = Object.keys(object);
      var key = faker.random.arrayElement(array);

      return field === "key" ? key : object[key];
  }

  this.uuid = function () {
      var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
      var replacePlaceholders = function (placeholder) {
          var random = Math.random()*16|0;
          var value = placeholder == 'x' ? random : (random &0x3 | 0x8);
          return value.toString(16);
      };
      return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
  }

  this.boolean =function () {
      return !!faker.random.number(1)
  }

  return this;

}

module['exports'] = Random;



// module.exports = random;

},{"../vendor/mersenne":859}],859:[function(require,module,exports){
// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
// an almost straight conversion from the original program, mt19937ar.c,
// translated by y. okada on July 17, 2006.
// and modified a little at july 20, 2006, but there are not any substantial differences.
// in this program, procedure descriptions and comments of original source code were not removed.
// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
// lines commented with /* and */ are original comments.
// lines commented with // are additional comments in this JavaScript version.
// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

function MersenneTwister19937()
{
	/* constants should be scoped inside the class */
	var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
	/* Period parameters */
	//c//#define N 624
	//c//#define M 397
	//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
	//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
	//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
	N = 624;
	M = 397;
	MATRIX_A = 0x9908b0df;   /* constant vector a */
	UPPER_MASK = 0x80000000; /* most significant w-r bits */
	LOWER_MASK = 0x7fffffff; /* least significant r bits */
	//c//static unsigned long mt[N]; /* the array for the state vector  */
	//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
	var mt = new Array(N);   /* the array for the state vector  */
	var mti = N+1;           /* mti==N+1 means mt[N] is not initialized */

	function unsigned32 (n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
	{
		return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
	}

	function subtraction32 (n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) : n1 - n2;
	}

	function addition32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return unsigned32((n1 + n2) & 0xffffffff)
	}

	function multiplication32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		var sum = 0;
		for (var i = 0; i < 32; ++i){
			if ((n1 >>> i) & 0x1){
				sum = addition32(sum, unsigned32(n2 << i));
			}
		}
		return sum;
	}

	/* initializes mt[N] with a seed */
	//c//void init_genrand(unsigned long s)
	this.init_genrand = function (s)
	{
		//c//mt[0]= s & 0xffffffff;
		mt[0]= unsigned32(s & 0xffffffff);
		for (mti=1; mti<N; mti++) {
			mt[mti] = 
			//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
			addition32(multiplication32(1812433253, unsigned32(mt[mti-1] ^ (mt[mti-1] >>> 30))), mti);
			/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
			/* In the previous versions, MSBs of the seed affect   */
			/* only MSBs of the array mt[].                        */
			/* 2002/01/09 modified by Makoto Matsumoto             */
			//c//mt[mti] &= 0xffffffff;
			mt[mti] = unsigned32(mt[mti] & 0xffffffff);
			/* for >32 bit machines */
		}
	}

	/* initialize by an array with array-length */
	/* init_key is the array for initializing keys */
	/* key_length is its length */
	/* slight change for C++, 2004/2/26 */
	//c//void init_by_array(unsigned long init_key[], int key_length)
	this.init_by_array = function (init_key, key_length)
	{
		//c//int i, j, k;
		var i, j, k;
		//c//init_genrand(19650218);
		this.init_genrand(19650218);
		i=1; j=0;
		k = (N>key_length ? N : key_length);
		for (; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
			//c//	+ init_key[j] + j; /* non linear */
			mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1664525)), init_key[j]), j);
			mt[i] = 
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			unsigned32(mt[i] & 0xffffffff);
			i++; j++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
			if (j>=key_length) j=0;
		}
		for (k=N-1; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
			//c//- i; /* non linear */
			mt[i] = subtraction32(unsigned32((dbg=mt[i]) ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1566083941)), i);
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			mt[i] = unsigned32(mt[i] & 0xffffffff);
			i++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
		}
		mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
	}

    /* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
    var mag01 = [0x0, MATRIX_A];

	/* generates a random number on [0,0xffffffff]-interval */
	//c//unsigned long genrand_int32(void)
	this.genrand_int32 = function ()
	{
		//c//unsigned long y;
		//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
		var y;
		/* mag01[x] = x * MATRIX_A  for x=0,1 */

		if (mti >= N) { /* generate N words at one time */
			//c//int kk;
			var kk;

			if (mti == N+1)   /* if init_genrand() has not been called, */
				//c//init_genrand(5489); /* a default initial seed is used */
				this.init_genrand(5489); /* a default initial seed is used */

			for (kk=0;kk<N-M;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			for (;kk<N-1;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
			//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
			y = unsigned32((mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK));
			mt[N-1] = unsigned32(mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1]);
			mti = 0;
		}

		y = mt[mti++];

		/* Tempering */
		//c//y ^= (y >> 11);
		//c//y ^= (y << 7) & 0x9d2c5680;
		//c//y ^= (y << 15) & 0xefc60000;
		//c//y ^= (y >> 18);
		y = unsigned32(y ^ (y >>> 11));
		y = unsigned32(y ^ ((y << 7) & 0x9d2c5680));
		y = unsigned32(y ^ ((y << 15) & 0xefc60000));
		y = unsigned32(y ^ (y >>> 18));

		return y;
	}

	/* generates a random number on [0,0x7fffffff]-interval */
	//c//long genrand_int31(void)
	this.genrand_int31 = function ()
	{
		//c//return (genrand_int32()>>1);
		return (this.genrand_int32()>>>1);
	}

	/* generates a random number on [0,1]-real-interval */
	//c//double genrand_real1(void)
	this.genrand_real1 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967295.0);
		return this.genrand_int32()*(1.0/4294967295.0);
		/* divided by 2^32-1 */
	}

	/* generates a random number on [0,1)-real-interval */
	//c//double genrand_real2(void)
	this.genrand_real2 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967296.0);
		return this.genrand_int32()*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on (0,1)-real-interval */
	//c//double genrand_real3(void)
	this.genrand_real3 = function ()
	{
		//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
		return ((this.genrand_int32()) + 0.5)*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on [0,1) with 53-bit resolution*/
	//c//double genrand_res53(void)
	this.genrand_res53 = function ()
	{
		//c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
		var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;
		return(a*67108864.0+b)*(1.0/9007199254740992.0);
	}
	/* These real versions are due to Isaku Wada, 2002/01/09 added */
}

//  Exports: Public API

//  Export the twister class
exports.MersenneTwister19937 = MersenneTwister19937;

//  Export a simplified function to generate random numbers
var gen = new MersenneTwister19937;
gen.init_genrand((new Date).getTime() % 1000000000);

// Added max, min range functionality, Marak Squires Sept 11 2014
exports.rand = function(max, min) {
    if (max === undefined)
        {
        min = 0;
        max = 32768;
        }
    return Math.floor(gen.genrand_real2() * (max - min) + min);
}
exports.seed = function(S) {
    if (typeof(S) != 'number')
        {
        throw new Error("seed(S) must take numeric argument; is " + typeof(S));
        }
    gen.init_genrand(S);
}
exports.seed_array = function(A) {
    if (typeof(A) != 'object')
        {
        throw new Error("seed_array(A) must take array of numbers; is " + typeof(A));
        }
    gen.init_by_array(A);
}


},{}],860:[function(require,module,exports){
/*
 * password-generator
 * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
 * MIT Licensed
 */
(function (root) {

  var localName, consonant, letter, password, vowel;
  letter = /[a-zA-Z]$/;
  vowel = /[aeiouAEIOU]$/;
  consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;


  // Defines the name of the local variable the passwordGenerator library will use
  // this is specially useful if window.passwordGenerator is already being used
  // by your application and you want a different name. For example:
  //    // Declare before including the passwordGenerator library
  //    var localPasswordGeneratorLibraryName = 'pass';
  localName = root.localPasswordGeneratorLibraryName || "generatePassword",

  password = function (length, memorable, pattern, prefix) {
    var char, n;
    if (length == null) {
      length = 10;
    }
    if (memorable == null) {
      memorable = true;
    }
    if (pattern == null) {
      pattern = /\w/;
    }
    if (prefix == null) {
      prefix = '';
    }
    if (prefix.length >= length) {
      return prefix;
    }
    if (memorable) {
      if (prefix.match(consonant)) {
        pattern = vowel;
      } else {
        pattern = consonant;
      }
    }
    n = Math.floor(Math.random() * 94) + 33;
    char = String.fromCharCode(n);
    if (memorable) {
      char = char.toLowerCase();
    }
    if (!char.match(pattern)) {
      return password(length, memorable, pattern, prefix);
    }
    return password(length, memorable, pattern, "" + prefix + char);
  };


  ((typeof exports !== 'undefined') ? exports : root)[localName] = password;
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = password;
    }
  }

  // Establish the root object, `window` in the browser, or `global` on the server.
}(this));
},{}],861:[function(require,module,exports){
/*

Copyright (c) 2012-2014 Jeffrey Mealo

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

The license for that script is as follows:

"THE BEER-WARE LICENSE" (Revision 42):

<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic
*/

function rnd(a, b) {
    //calling rnd() with no arguments is identical to rnd(0, 100)
    a = a || 0;
    b = b || 100;

    if (typeof b === 'number' && typeof a === 'number') {
        //rnd(int min, int max) returns integer between min, max
        return (function (min, max) {
            if (min > max) {
                throw new RangeError('expected min <= max; got min = ' + min + ', max = ' + max);
            }
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }(a, b));
    }

    if (Object.prototype.toString.call(a) === "[object Array]") {
        //returns a random element from array (a), even weighting
        return a[Math.floor(Math.random() * a.length)];
    }

    if (a && typeof a === 'object') {
        //returns a random key from the passed object; keys are weighted by the decimal probability in their value
        return (function (obj) {
            var rand = rnd(0, 100) / 100, min = 0, max = 0, key, return_val;

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    max = obj[key] + min;
                    return_val = key;
                    if (rand >= min && rand <= max) {
                        break;
                    }
                    min = min + obj[key];
                }
            }

            return return_val;
        }(a));
    }

    throw new TypeError('Invalid arguments passed to rnd. (' + (b ? a + ', ' + b : a) + ')');
}

function randomLang() {
    return rnd(['AB', 'AF', 'AN', 'AR', 'AS', 'AZ', 'BE', 'BG', 'BN', 'BO', 'BR', 'BS', 'CA', 'CE', 'CO', 'CS',
                'CU', 'CY', 'DA', 'DE', 'EL', 'EN', 'EO', 'ES', 'ET', 'EU', 'FA', 'FI', 'FJ', 'FO', 'FR', 'FY',
                'GA', 'GD', 'GL', 'GV', 'HE', 'HI', 'HR', 'HT', 'HU', 'HY', 'ID', 'IS', 'IT', 'JA', 'JV', 'KA',
                'KG', 'KO', 'KU', 'KW', 'KY', 'LA', 'LB', 'LI', 'LN', 'LT', 'LV', 'MG', 'MK', 'MN', 'MO', 'MS',
                'MT', 'MY', 'NB', 'NE', 'NL', 'NN', 'NO', 'OC', 'PL', 'PT', 'RM', 'RO', 'RU', 'SC', 'SE', 'SK',
                'SL', 'SO', 'SQ', 'SR', 'SV', 'SW', 'TK', 'TR', 'TY', 'UK', 'UR', 'UZ', 'VI', 'VO', 'YI', 'ZH']);
}

function randomBrowserAndOS() {
    var browser = rnd({
        chrome:    .45132810566,
        iexplorer: .27477061836,
        firefox:   .19384170608,
        safari:    .06186781118,
        opera:     .01574236955
    }),
    os = {
        chrome:  {win: .89,  mac: .09 , lin: .02},
        firefox: {win: .83,  mac: .16,  lin: .01},
        opera:   {win: .91,  mac: .03 , lin: .06},
        safari:  {win: .04 , mac: .96  },
        iexplorer: ['win']
    };

    return [browser, rnd(os[browser])];
}

function randomProc(arch) {
    var procs = {
        lin:['i686', 'x86_64'],
        mac: {'Intel' : .48, 'PPC': .01, 'U; Intel':.48, 'U; PPC' :.01},
        win:['', 'WOW64', 'Win64; x64']
    };
    return rnd(procs[arch]);
}

function randomRevision(dots) {
    var return_val = '';
    //generate a random revision
    //dots = 2 returns .x.y where x & y are between 0 and 9
    for (var x = 0; x < dots; x++) {
        return_val += '.' + rnd(0, 9);
    }
    return return_val;
}

var version_string = {
    net: function () {
        return [rnd(1, 4), rnd(0, 9), rnd(10000, 99999), rnd(0, 9)].join('.');
    },
    nt: function () {
        return rnd(5, 6) + '.' + rnd(0, 3);
    },
    ie: function () {
        return rnd(7, 11);
    },
    trident: function () {
        return rnd(3, 7) + '.' + rnd(0, 1);
    },
    osx: function (delim) {
        return [10, rnd(5, 10), rnd(0, 9)].join(delim || '.');
    },
    chrome: function () {
        return [rnd(13, 39), 0, rnd(800, 899), 0].join('.');
    },
    presto: function () {
        return '2.9.' + rnd(160, 190);
    },
    presto2: function () {
        return rnd(10, 12) + '.00';
    },
    safari: function () {
        return rnd(531, 538) + '.' + rnd(0, 2) + '.' + rnd(0,2);
    }
};

var browser = {
    firefox: function firefox(arch) {
        //https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference
        var firefox_ver = rnd(5, 15) + randomRevision(2),
            gecko_ver = 'Gecko/20100101 Firefox/' + firefox_ver,
            proc = randomProc(arch),
            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + ((proc) ? '; ' + proc : '')
            : (arch === 'mac') ? '(Macintosh; ' + proc + ' Mac OS X ' + version_string.osx()
            : '(X11; Linux ' + proc;

        return 'Mozilla/5.0 ' + os_ver + '; rv:' + firefox_ver.slice(0, -2) + ') ' + gecko_ver;
    },

    iexplorer: function iexplorer() {
        var ver = version_string.ie();

        if (ver >= 11) {
            //http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
            return 'Mozilla/5.0 (Windows NT 6.' + rnd(1,3) + '; Trident/7.0; ' + rnd(['Touch; ', '']) + 'rv:11.0) like Gecko';
        }

        //http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
        return 'Mozilla/5.0 (compatible; MSIE ' + ver + '.0; Windows NT ' + version_string.nt() + '; Trident/' +
            version_string.trident() + ((rnd(0, 1) === 1) ? '; .NET CLR ' + version_string.net() : '') + ')';
    },

    opera: function opera(arch) {
        //http://www.opera.com/docs/history/
        var presto_ver = ' Presto/' + version_string.presto() + ' Version/' + version_string.presto2() + ')',
            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + '; U; ' + randomLang() + presto_ver
            : (arch === 'lin') ? '(X11; Linux ' + randomProc(arch) + '; U; ' + randomLang() + presto_ver
            : '(Macintosh; Intel Mac OS X ' + version_string.osx() + ' U; ' + randomLang() + ' Presto/' +
            version_string.presto() + ' Version/' + version_string.presto2() + ')';

        return 'Opera/' + rnd(9, 14) + '.' + rnd(0, 99) + ' ' + os_ver;
    },

    safari: function safari(arch) {
        var safari = version_string.safari(),
            ver = rnd(4, 7) + '.' + rnd(0,1) + '.' + rnd(0,10),
            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X '+ version_string.osx('_') + ' rv:' + rnd(2, 6) + '.0; '+ randomLang() + ') '
            : '(Windows; U; Windows NT ' + version_string.nt() + ')';

        return 'Mozilla/5.0 ' + os_ver + 'AppleWebKit/' + safari + ' (KHTML, like Gecko) Version/' + ver + ' Safari/' + safari;
    },

    chrome: function chrome(arch) {
        var safari = version_string.safari(),
            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X ' + version_string.osx('_') + ') '
            : (arch === 'win') ? '(Windows; U; Windows NT ' + version_string.nt() + ')'
            : '(X11; Linux ' + randomProc(arch);

        return 'Mozilla/5.0 ' + os_ver + ' AppleWebKit/' + safari + ' (KHTML, like Gecko) Chrome/' + version_string.chrome() + ' Safari/' + safari;
    }
};

exports.generate = function generate() {
    var random = randomBrowserAndOS();
    return browser[random[0]](random[1]);
};

},{}]},{},[1])(1)
});
;(function() {
    "use strict";

    var ember$data$lib$system$adapter$$get = Ember.get;

    /**
      An adapter is an object that receives requests from a store and
      translates them into the appropriate action to take against your
      persistence layer. The persistence layer is usually an HTTP API, but
      may be anything, such as the browser's local storage. Typically the
      adapter is not invoked directly instead its functionality is accessed
      through the `store`.

      ### Creating an Adapter

      Create a new subclass of `DS.Adapter` in the `app/adapters` folder:

      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.Adapter.extend({
        // ...your code here
      });
      ```

      Model-specific adapters can be created by putting your adapter
      class in an `app/adapters/` + `model-name` + `.js` file of the application.

      ```app/adapters/post.js
      import DS from 'ember-data';

      export default DS.Adapter.extend({
        // ...Post-specific adapter code goes here
      });
      ```

      `DS.Adapter` is an abstract base class that you should override in your
      application to customize it for your backend. The minimum set of methods
      that you should implement is:

        * `findRecord()`
        * `createRecord()`
        * `updateRecord()`
        * `deleteRecord()`
        * `findAll()`
        * `query()`

      To improve the network performance of your application, you can optimize
      your adapter by overriding these lower-level methods:

        * `findMany()`


      For an example implementation, see `DS.RESTAdapter`, the
      included REST adapter.

      @class Adapter
      @namespace DS
      @extends Ember.Object
    */

    var ember$data$lib$system$adapter$$Adapter = Ember.Object.extend({

      /**
        If you would like your adapter to use a custom serializer you can
        set the `defaultSerializer` property to be the name of the custom
        serializer.
         Note the `defaultSerializer` serializer has a lower priority than
        a model specific serializer (i.e. `PostSerializer`) or the
        `application` serializer.
         ```app/adapters/django.js
        import DS from 'ember-data';
         export default DS.Adapter.extend({
          defaultSerializer: 'django'
        });
        ```
         @property defaultSerializer
        @type {String}
      */
      defaultSerializer: '-default',

      /**
        The `findRecord()` method is invoked when the store is asked for a record that
        has not previously been loaded. In response to `findRecord()` being called, you
        should query your persistence layer for a record with the given ID. Once
        found, you can asynchronously call the store's `push()` method to push
        the record into the store.
         Here is an example `findRecord` implementation:
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.Adapter.extend({
          findRecord: function(store, type, id, snapshot) {
            var url = [type.modelName, id].join('/');
             return new Ember.RSVP.Promise(function(resolve, reject) {
              jQuery.getJSON(url).then(function(data) {
                Ember.run(null, resolve, data);
              }, function(jqXHR) {
                jqXHR.then = null; // tame jQuery's ill mannered promises
                Ember.run(null, reject, jqXHR);
              });
            });
          }
        });
        ```
         @method findRecord
        @param {DS.Store} store
        @param {DS.Model} type
        @param {String} id
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      findRecord: null,

      /**
        The `findAll()` method is used to retrieve all records for a given type.
         Example
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.Adapter.extend({
          findAll: function(store, type, sinceToken) {
            var url = type;
            var query = { since: sinceToken };
            return new Ember.RSVP.Promise(function(resolve, reject) {
              jQuery.getJSON(url, query).then(function(data) {
                Ember.run(null, resolve, data);
              }, function(jqXHR) {
                jqXHR.then = null; // tame jQuery's ill mannered promises
                Ember.run(null, reject, jqXHR);
              });
            });
          }
        });
        ```
         @method findAll
        @param {DS.Store} store
        @param {DS.Model} type
        @param {String} sinceToken
        @param {DS.SnapshotRecordArray} snapshotRecordArray
        @return {Promise} promise
      */
      findAll: null,

      /**
        This method is called when you call `query` on the store.
         Example
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.Adapter.extend({
          query: function(store, type, query) {
            var url = type;
            return new Ember.RSVP.Promise(function(resolve, reject) {
              jQuery.getJSON(url, query).then(function(data) {
                Ember.run(null, resolve, data);
              }, function(jqXHR) {
                jqXHR.then = null; // tame jQuery's ill mannered promises
                Ember.run(null, reject, jqXHR);
              });
            });
          }
        });
        ```
         @private
        @method query
        @param {DS.Store} store
        @param {DS.Model} type
        @param {Object} query
        @param {DS.AdapterPopulatedRecordArray} recordArray
        @return {Promise} promise
      */
      query: null,

      /**
        The `queryRecord()` method is invoked when the store is asked for a single
        record through a query object.
         In response to `queryRecord()` being called, you should always fetch fresh
        data. Once found, you can asynchronously call the store's `push()` method
        to push the record into the store.
         Here is an example `queryRecord` implementation:
         Example
         ```javascript
        App.ApplicationAdapter = DS.Adapter.extend({
          queryRecord: function(store, typeClass, query) {
            var url = [type.typeKey, id].join('/');
             return new Ember.RSVP.Promise(function(resolve, reject) {
              jQuery.getJSON(url, query).then(function(data) {
                Ember.run(null, resolve, data);
              }, function(jqXHR) {
                jqXHR.then = null; // tame jQuery's ill mannered promises
                Ember.run(null, reject, jqXHR);
              });
            });
          }
        });
        ```
         @method queryRecord
        @param {DS.Store} store
        @param {subclass of DS.Model} type
        @param {Object} query
        @param {String} id
        @return {Promise} promise
      */
      queryRecord: null,

      /**
        If the globally unique IDs for your records should be generated on the client,
        implement the `generateIdForRecord()` method. This method will be invoked
        each time you create a new record, and the value returned from it will be
        assigned to the record's `primaryKey`.
         Most traditional REST-like HTTP APIs will not use this method. Instead, the ID
        of the record will be set by the server, and your adapter will update the store
        with the new ID when it calls `didCreateRecord()`. Only implement this method if
        you intend to generate record IDs on the client-side.
         The `generateIdForRecord()` method will be invoked with the requesting store as
        the first parameter and the newly created record as the second parameter:
         ```javascript
        generateIdForRecord: function(store, inputProperties) {
          var uuid = App.generateUUIDWithStatisticallyLowOddsOfCollision();
          return uuid;
        }
        ```
         @method generateIdForRecord
        @param {DS.Store} store
        @param {DS.Model} type   the DS.Model class of the record
        @param {Object} inputProperties a hash of properties to set on the
          newly created record.
        @return {(String|Number)} id
      */
      generateIdForRecord: null,

      /**
        Proxies to the serializer's `serialize` method.
         Example
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.Adapter.extend({
          createRecord: function(store, type, snapshot) {
            var data = this.serialize(snapshot, { includeId: true });
            var url = type;
             // ...
          }
        });
        ```
         @method serialize
        @param {DS.Snapshot} snapshot
        @param {Object}   options
        @return {Object} serialized snapshot
      */
      serialize: function (snapshot, options) {
        return ember$data$lib$system$adapter$$get(snapshot.record, 'store').serializerFor(snapshot.modelName).serialize(snapshot, options);
      },

      /**
        Implement this method in a subclass to handle the creation of
        new records.
         Serializes the record and send it to the server.
         Example
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.Adapter.extend({
          createRecord: function(store, type, snapshot) {
            var data = this.serialize(snapshot, { includeId: true });
            var url = type;
             return new Ember.RSVP.Promise(function(resolve, reject) {
              jQuery.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
                data: data
              }).then(function(data) {
                Ember.run(null, resolve, data);
              }, function(jqXHR) {
                jqXHR.then = null; // tame jQuery's ill mannered promises
                Ember.run(null, reject, jqXHR);
              });
            });
          }
        });
        ```
         @method createRecord
        @param {DS.Store} store
        @param {DS.Model} type   the DS.Model class of the record
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      createRecord: null,

      /**
        Implement this method in a subclass to handle the updating of
        a record.
         Serializes the record update and send it to the server.
         Example
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.Adapter.extend({
          updateRecord: function(store, type, snapshot) {
            var data = this.serialize(snapshot, { includeId: true });
            var id = snapshot.id;
            var url = [type, id].join('/');
             return new Ember.RSVP.Promise(function(resolve, reject) {
              jQuery.ajax({
                type: 'PUT',
                url: url,
                dataType: 'json',
                data: data
              }).then(function(data) {
                Ember.run(null, resolve, data);
              }, function(jqXHR) {
                jqXHR.then = null; // tame jQuery's ill mannered promises
                Ember.run(null, reject, jqXHR);
              });
            });
          }
        });
        ```
         @method updateRecord
        @param {DS.Store} store
        @param {DS.Model} type   the DS.Model class of the record
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      updateRecord: null,

      /**
        Implement this method in a subclass to handle the deletion of
        a record.
         Sends a delete request for the record to the server.
         Example
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.Adapter.extend({
          deleteRecord: function(store, type, snapshot) {
            var data = this.serialize(snapshot, { includeId: true });
            var id = snapshot.id;
            var url = [type, id].join('/');
             return new Ember.RSVP.Promise(function(resolve, reject) {
              jQuery.ajax({
                type: 'DELETE',
                url: url,
                dataType: 'json',
                data: data
              }).then(function(data) {
                Ember.run(null, resolve, data);
              }, function(jqXHR) {
                jqXHR.then = null; // tame jQuery's ill mannered promises
                Ember.run(null, reject, jqXHR);
              });
            });
          }
        });
        ```
         @method deleteRecord
        @param {DS.Store} store
        @param {DS.Model} type   the DS.Model class of the record
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      deleteRecord: null,

      /**
        By default the store will try to coalesce all `fetchRecord` calls within the same runloop
        into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.
        You can opt out of this behaviour by either not implementing the findMany hook or by setting
        coalesceFindRequests to false
         @property coalesceFindRequests
        @type {boolean}
      */
      coalesceFindRequests: true,

      /**
        Find multiple records at once if coalesceFindRequests is true
         @method findMany
        @param {DS.Store} store
        @param {DS.Model} type   the DS.Model class of the records
        @param {Array}    ids
        @param {Array} snapshots
        @return {Promise} promise
      */

      /**
        Organize records into groups, each of which is to be passed to separate
        calls to `findMany`.
         For example, if your api has nested URLs that depend on the parent, you will
        want to group records by their parent.
         The default implementation returns the records as a single group.
         @method groupRecordsForFindMany
        @param {DS.Store} store
        @param {Array} snapshots
        @return {Array}  an array of arrays of records, each of which is to be
                          loaded separately by `findMany`.
      */
      groupRecordsForFindMany: function (store, snapshots) {
        return [snapshots];
      },

      /**
        This method is used by the store to determine if the store should
        reload a record from the adapter when a record is requested by
        `store.findRecord`.
         If this method returns true the store will re fetch a record form
        the adapter. If is method returns false the store will resolve
        immediately using the cached record.
         @method shouldReloadRecord
        @param {DS.Store} store
        @param {DS.Snapshot} snapshot
        @return {Boolean}
      */
      shouldReloadRecord: function (store, snapshot) {
        return false;
      },

      /**
        This method is used by the store to determine if the store should
        reload all records from the adapter when records are requested by
        `store.findAll`.
         If this method returns true the store will re fetch all records form
        the adapter. If is method returns false the store will resolve
        immediately using the cached record.
         @method shouldReloadRecord
        @param {DS.Store} store
        @param {DS.SnapshotRecordArray} snapshotRecordArray
        @return {Boolean}
      */
      shouldReloadAll: function (store, snapshotRecordArray) {
        var modelName = snapshotRecordArray.type.modelName;
        Ember.deprecate('The default behavior of shouldReloadAll will change in Ember Data 2.0 to always return false when there is at least one "' + modelName + '" record in the store. If you would like to preserve the current behavior please override shouldReloadAll in you adapter:application and return true.');
        return true;
      },

      /**
        This method is used by the store to determine if the store should
        reload a record after the `store.findRecord` method resolves a
        chached record.
         This method is *only* checked by the store when the store is
        returning a cached record.
         If this method returns true the store will re-fetch a record form
        the adapter.
         @method shouldBackgroundReloadRecord
        @param {DS.Store} store
        @param {DS.Snapshot} snapshot
        @return {Boolean}
      */
      shouldBackgroundReloadRecord: function (store, snapshot) {
        Ember.deprecate('The default behavior of `shouldBackgroundReloadRecord` will change in Ember Data 2.0 to always return true. If you would like to preserve the current behavior please override `shouldBackgroundReloadRecord` in you adapter:application and return false.');
        return false;
      },

      /**
        This method is used by the store to determine if the store should
        reload a record array after the `store.findAll` method resolves
        with a chached record array.
         This method is *only* checked by the store when the store is
        returning a cached record array.
         If this method returns true the store will re-fetch all records
        form the adapter.
         @method shouldBackgroundReloadAll
        @param {DS.Store} store
        @param {DS.SnapshotRecordArray} snapshotRecordArray
        @return {Boolean}
      */
      shouldBackgroundReloadAll: function (store, snapshotRecordArray) {
        return true;
      }
    });

    var ember$data$lib$system$adapter$$default = ember$data$lib$system$adapter$$Adapter;

    /**
      @module ember-data
    */
    var ember$data$lib$adapters$fixture$adapter$$get = Ember.get;
    var ember$data$lib$adapters$fixture$adapter$$fmt = Ember.String.fmt;
    var ember$data$lib$adapters$fixture$adapter$$indexOf = Ember.ArrayPolyfills.indexOf;

    var ember$data$lib$adapters$fixture$adapter$$counter = 0;

    var ember$data$lib$adapters$fixture$adapter$$default = ember$data$lib$system$adapter$$default.extend({
      // by default, fixtures are already in normalized form
      serializer: null,
      // The fixture adapter does not support coalesceFindRequests
      coalesceFindRequests: false,

      /**
        If `simulateRemoteResponse` is `true` the `FixtureAdapter` will
        wait a number of milliseconds before resolving promises with the
        fixture values. The wait time can be configured via the `latency`
        property.
         @property simulateRemoteResponse
        @type {Boolean}
        @default true
      */
      simulateRemoteResponse: true,

      /**
        By default the `FixtureAdapter` will simulate a wait of the
        `latency` milliseconds before resolving promises with the fixture
        values. This behavior can be turned off via the
        `simulateRemoteResponse` property.
         @property latency
        @type {Number}
        @default 50
      */
      latency: 50,

      /**
        Implement this method in order to provide data associated with a type
         @method fixturesForType
        @param {DS.Model} typeClass
        @return {Array}
      */
      fixturesForType: function (typeClass) {
        if (typeClass.FIXTURES) {
          var fixtures = Ember.A(typeClass.FIXTURES);
          return fixtures.map(function (fixture) {
            var fixtureIdType = typeof fixture.id;
            if (fixtureIdType !== "number" && fixtureIdType !== "string") {
              throw new Error(ember$data$lib$adapters$fixture$adapter$$fmt("the id property must be defined as a number or string for fixture %@", [fixture]));
            }
            fixture.id = fixture.id + "";
            return fixture;
          });
        }
        return null;
      },

      /**
        Implement this method in order to query fixtures data
         @method queryFixtures
        @param {Array} fixtures
        @param {Object} query
        @param {DS.Model} typeClass
        @return {(Promise|Array)}
      */
      queryFixtures: function (fixtures, query, typeClass) {
        Ember.assert("Not implemented: You must override the DS.FixtureAdapter::queryFixtures method to support querying the fixture store.");
      },

      /**
        @method updateFixtures
        @param {DS.Model} typeClass
        @param {Array} fixture
      */
      updateFixtures: function (typeClass, fixture) {
        if (!typeClass.FIXTURES) {
          typeClass.FIXTURES = [];
        }

        var fixtures = typeClass.FIXTURES;

        this.deleteLoadedFixture(typeClass, fixture);

        fixtures.push(fixture);
      },

      /**
        Implement this method in order to provide json for CRUD methods
         @method mockJSON
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {DS.Snapshot} snapshot
      */
      mockJSON: function (store, typeClass, snapshot) {
        return store.serializerFor(snapshot.modelName).serialize(snapshot, { includeId: true });
      },

      /**
        @method generateIdForRecord
        @param {DS.Store} store
        @return {String} id
      */
      generateIdForRecord: function (store) {
        return "fixture-" + ember$data$lib$adapters$fixture$adapter$$counter++;
      },

      /**
        @method find
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {String} id
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      find: function (store, typeClass, id, snapshot) {
        var fixtures = this.fixturesForType(typeClass);
        var fixture;

        Ember.assert("Unable to find fixtures for model type " + typeClass.toString() + ". If you're defining your fixtures using `Model.FIXTURES = ...`, please change it to `Model.reopenClass({ FIXTURES: ... })`.", fixtures);

        if (fixtures) {
          fixture = Ember.A(fixtures).findBy("id", id);
        }

        if (fixture) {
          return this.simulateRemoteCall(function () {
            return fixture;
          }, this);
        }
      },

      /**
        @method findMany
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Array} ids
        @param {Array} snapshots
        @return {Promise} promise
      */
      findMany: function (store, typeClass, ids, snapshots) {
        var fixtures = this.fixturesForType(typeClass);

        Ember.assert("Unable to find fixtures for model type " + typeClass.toString(), fixtures);

        if (fixtures) {
          fixtures = fixtures.filter(function (item) {
            return ember$data$lib$adapters$fixture$adapter$$indexOf.call(ids, item.id) !== -1;
          });
        }

        if (fixtures) {
          return this.simulateRemoteCall(function () {
            return fixtures;
          }, this);
        }
      },

      /**
        @private
        @method findAll
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @return {Promise} promise
      */
      findAll: function (store, typeClass) {
        var fixtures = this.fixturesForType(typeClass);

        Ember.assert("Unable to find fixtures for model type " + typeClass.toString(), fixtures);

        return this.simulateRemoteCall(function () {
          return fixtures;
        }, this);
      },

      /**
        @private
        @method findQuery
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} query
        @param {DS.AdapterPopulatedRecordArray} array
        @return {Promise} promise
      */
      findQuery: function (store, typeClass, query, array) {
        var fixtures = this.fixturesForType(typeClass);

        Ember.assert("Unable to find fixtures for model type " + typeClass.toString(), fixtures);

        fixtures = this.queryFixtures(fixtures, query, typeClass);

        if (fixtures) {
          return this.simulateRemoteCall(function () {
            return fixtures;
          }, this);
        }
      },

      /**
        @method createRecord
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      createRecord: function (store, typeClass, snapshot) {
        var fixture = this.mockJSON(store, typeClass, snapshot);

        this.updateFixtures(typeClass, fixture);

        return this.simulateRemoteCall(function () {
          return fixture;
        }, this);
      },

      /**
        @method updateRecord
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      updateRecord: function (store, typeClass, snapshot) {
        var fixture = this.mockJSON(store, typeClass, snapshot);

        this.updateFixtures(typeClass, fixture);

        return this.simulateRemoteCall(function () {
          return fixture;
        }, this);
      },

      /**
        @method deleteRecord
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      deleteRecord: function (store, typeClass, snapshot) {
        this.deleteLoadedFixture(typeClass, snapshot);

        return this.simulateRemoteCall(function () {
          // no payload in a deletion
          return null;
        });
      },

      /*
        @method deleteLoadedFixture
        @private
        @param typeClass
        @param snapshot
      */
      deleteLoadedFixture: function (typeClass, snapshot) {
        var existingFixture = this.findExistingFixture(typeClass, snapshot);

        if (existingFixture) {
          var index = ember$data$lib$adapters$fixture$adapter$$indexOf.call(typeClass.FIXTURES, existingFixture);
          typeClass.FIXTURES.splice(index, 1);
          return true;
        }
      },

      /*
        @method findExistingFixture
        @private
        @param typeClass
        @param snapshot
      */
      findExistingFixture: function (typeClass, snapshot) {
        var fixtures = this.fixturesForType(typeClass);
        var id = snapshot.id;

        return this.findFixtureById(fixtures, id);
      },

      /*
        @method findFixtureById
        @private
        @param fixtures
        @param id
      */
      findFixtureById: function (fixtures, id) {
        return Ember.A(fixtures).find(function (r) {
          if ("" + ember$data$lib$adapters$fixture$adapter$$get(r, "id") === "" + id) {
            return true;
          } else {
            return false;
          }
        });
      },

      /*
        @method simulateRemoteCall
        @private
        @param callback
        @param context
      */
      simulateRemoteCall: function (callback, context) {
        var adapter = this;

        return new Ember.RSVP.Promise(function (resolve) {
          var value = Ember.copy(callback.call(context), true);
          if (ember$data$lib$adapters$fixture$adapter$$get(adapter, "simulateRemoteResponse")) {
            // Schedule with setTimeout
            Ember.run.later(function () {
              resolve(value);
            }, ember$data$lib$adapters$fixture$adapter$$get(adapter, "latency"));
          } else {
            // Asynchronous, but at the of the runloop with zero latency
            Ember.run.schedule("actions", null, function () {
              resolve(value);
            });
          }
        }, "DS: FixtureAdapter#simulateRemoteCall");
      }
    });

    var ember$data$lib$adapters$errors$$EmberError = Ember.Error;
    var ember$data$lib$adapters$errors$$create = Ember.create;

    var ember$data$lib$adapters$errors$$forEach = Ember.ArrayPolyfills.forEach;
    var ember$data$lib$adapters$errors$$SOURCE_POINTER_REGEXP = /data\/(attributes|relationships)\/(.*)/;

    /**
      @class AdapterError
      @namespace DS
    */
    function ember$data$lib$adapters$errors$$AdapterError(errors, message) {
      message = message || "Adapter operation failed";

      ember$data$lib$adapters$errors$$EmberError.call(this, message);

      this.errors = errors || [{
        title: "Adapter Error",
        details: message
      }];
    }

    ember$data$lib$adapters$errors$$AdapterError.prototype = ember$data$lib$adapters$errors$$create(ember$data$lib$adapters$errors$$EmberError.prototype);

    /**
      A `DS.InvalidError` is used by an adapter to signal the external API
      was unable to process a request because the content was not
      semantically correct or meaningful per the API. Usually this means a
      record failed some form of server side validation. When a promise
      from an adapter is rejected with a `DS.InvalidError` the record will
      transition to the `invalid` state and the errors will be set to the
      `errors` property on the record.

      For Ember Data to correctly map errors to their corresponding
      properties on the model, Ember Data expects each error to be
      a valid json-api error object with a `source/pointer` that matches
      the property name. For example if you had a Post model that
      looked like this.

      ```app/models/post.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        title: DS.attr('string'),
        content: DS.attr('string')
      });
      ```

      To show an error from the server related to the `title` and
      `content` properties your adapter could return a promise that
      rejects with a `DS.InvalidError` object that looks like this:

      ```app/adapters/post.js
      import Ember from 'ember';
      import DS from 'ember-data';

      export default DS.RESTAdapter.extend({
        updateRecord: function() {
          // Fictional adapter that always rejects
          return Ember.RSVP.reject(new DS.InvalidError([
            {
              details: 'Must be unique',
              source: { pointer: 'data/attributes/title' }
            },
            {
              details: 'Must not be blank',
              source: { pointer: 'data/attributes/content'}
            }
          ]));
        }
      });
      ```

      Your backend may use different property names for your records the
      store will attempt extract and normalize the errors using the
      serializer's `extractErrors` method before the errors get added to
      the the model. As a result, it is safe for the `InvalidError` to
      wrap the error payload unaltered.

      @class InvalidError
      @namespace DS
    */
    function ember$data$lib$adapters$errors$$InvalidError(errors) {
      if (!Ember.isArray(errors)) {
        Ember.deprecate("`InvalidError` expects json-api formatted errors.");
        errors = ember$data$lib$adapters$errors$$errorsHashToArray(errors);
      }
      ember$data$lib$adapters$errors$$AdapterError.call(this, errors, "The adapter rejected the commit because it was invalid");
    }

    ember$data$lib$adapters$errors$$InvalidError.prototype = ember$data$lib$adapters$errors$$create(ember$data$lib$adapters$errors$$AdapterError.prototype);

    /**
      @class TimeoutError
      @namespace DS
    */
    function ember$data$lib$adapters$errors$$TimeoutError() {
      ember$data$lib$adapters$errors$$AdapterError.call(this, null, "The adapter operation timed out");
    }

    ember$data$lib$adapters$errors$$TimeoutError.prototype = ember$data$lib$adapters$errors$$create(ember$data$lib$adapters$errors$$AdapterError.prototype);

    /**
      @class AbortError
      @namespace DS
    */
    function ember$data$lib$adapters$errors$$AbortError() {
      ember$data$lib$adapters$errors$$AdapterError.call(this, null, "The adapter operation was aborted");
    }

    ember$data$lib$adapters$errors$$AbortError.prototype = ember$data$lib$adapters$errors$$create(ember$data$lib$adapters$errors$$AdapterError.prototype);

    /**
      @private
    */
    function ember$data$lib$adapters$errors$$errorsHashToArray(errors) {
      var out = [];

      if (Ember.isPresent(errors)) {
        ember$data$lib$adapters$errors$$forEach.call(Ember.keys(errors), function (key) {
          var messages = Ember.makeArray(errors[key]);
          for (var i = 0; i < messages.length; i++) {
            out.push({
              title: "Invalid Attribute",
              details: messages[i],
              source: {
                pointer: "data/attributes/" + key
              }
            });
          }
        });
      }

      return out;
    }

    function ember$data$lib$adapters$errors$$errorsArrayToHash(errors) {
      var out = {};

      if (Ember.isPresent(errors)) {
        ember$data$lib$adapters$errors$$forEach.call(errors, function (error) {
          if (error.source && error.source.pointer) {
            var key = error.source.pointer.match(ember$data$lib$adapters$errors$$SOURCE_POINTER_REGEXP);

            if (key) {
              key = key[2];
              out[key] = out[key] || [];
              out[key].push(error.details || error.title);
            }
          }
        });
      }

      return out;
    }
    var ember$data$lib$system$map$$Map = Ember.Map;
    var ember$data$lib$system$map$$MapWithDefault = Ember.MapWithDefault;

    var ember$data$lib$system$map$$default = ember$data$lib$system$map$$Map;
    var ember$data$lib$adapters$build$url$mixin$$get = Ember.get;

    /**

      WARNING: This interface is likely to change in order to accomodate https://github.com/emberjs/rfcs/pull/4

      ## Using BuildURLMixin

      To use url building, include the mixin when extending an adapter, and call `buildURL` where needed.
      The default behaviour is designed for RESTAdapter.

      ### Example

      ```javascript
      export default DS.Adapter.extend(BuildURLMixin, {
        findRecord: function(store, type, id, snapshot) {
          var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');
          return this.ajax(url, 'GET');
        }
      });
      ```

      ### Attributes

      The `host` and `namespace` attributes will be used if defined, and are optional.

      @class BuildURLMixin
      @namespace DS
    */
    var ember$data$lib$adapters$build$url$mixin$$BuildURLMixin = Ember.Mixin.create({
      /**
        Builds a URL for a given type and optional ID.
         By default, it pluralizes the type's name (for example, 'post'
        becomes 'posts' and 'person' becomes 'people'). To override the
        pluralization see [pathForType](#method_pathForType).
         If an ID is specified, it adds the ID to the path generated
        for the type, separated by a `/`.
         When called by RESTAdapter.findMany() the `id` and `snapshot` parameters
        will be arrays of ids and snapshots.
         @method buildURL
        @param {String} modelName
        @param {(String|Array|Object)} id single id or array of ids or query
        @param {(DS.Snapshot|Array)} snapshot single snapshot or array of snapshots
        @param {String} requestType
        @param {Object} query object of query parameters to send for query requests.
        @return {String} url
      */
      buildURL: function (modelName, id, snapshot, requestType, query) {
        switch (requestType) {
          case 'find':
            // The `find` case is deprecated
            return this.urlForFind(id, modelName, snapshot);
          case 'findRecord':
            return this.urlForFindRecord(id, modelName, snapshot);
          case 'findAll':
            return this.urlForFindAll(modelName);
          case 'findQuery':
            // The `findQuery` case is deprecated
            return this.urlForFindQuery(query, modelName);
          case 'query':
            return this.urlForQuery(query, modelName);
          case 'findMany':
            return this.urlForFindMany(id, modelName, snapshot);
          case 'findHasMany':
            return this.urlForFindHasMany(id, modelName);
          case 'findBelongsTo':
            return this.urlForFindBelongsTo(id, modelName);
          case 'createRecord':
            return this.urlForCreateRecord(modelName, snapshot);
          case 'updateRecord':
            return this.urlForUpdateRecord(id, modelName, snapshot);
          case 'deleteRecord':
            return this.urlForDeleteRecord(id, modelName, snapshot);
          default:
            return this._buildURL(modelName, id);
        }
      },

      /**
        @method _buildURL
        @private
        @param {String} modelName
        @param {String} id
        @return {String} url
      */
      _buildURL: function (modelName, id) {
        var url = [];
        var host = ember$data$lib$adapters$build$url$mixin$$get(this, 'host');
        var prefix = this.urlPrefix();
        var path;

        if (modelName) {
          path = this.pathForType(modelName);
          if (path) {
            url.push(path);
          }
        }

        if (id) {
          url.push(encodeURIComponent(id));
        }
        if (prefix) {
          url.unshift(prefix);
        }

        url = url.join('/');
        if (!host && url && url.charAt(0) !== '/') {
          url = '/' + url;
        }

        return url;
      },

      /**
       * @method urlForFind
       * @param {String} id
       * @param {String} modelName
       * @param {DS.Snapshot} snapshot
       * @return {String} url
       * @deprecated Use [urlForFindRecord](#method_urlForFindRecord) instead
       */
      urlForFind: ember$data$lib$adapters$build$url$mixin$$urlForFind,

      /**
       * @method urlForFind
       * @param {String} id
       * @param {String} modelName
       * @param {DS.Snapshot} snapshot
       * @return {String} url
       */
      urlForFindRecord: function (id, modelName, snapshot) {
        if (this.urlForFind !== ember$data$lib$adapters$build$url$mixin$$urlForFind) {
          Ember.deprecate('BuildURLMixin#urlForFind has been deprecated and renamed to `urlForFindRecord`.');
          return this.urlForFind(id, modelName, snapshot);
        }
        return this._buildURL(modelName, id);
      },

      /**
       * @method urlForFindAll
       * @param {String} modelName
       * @return {String} url
       */
      urlForFindAll: function (modelName) {
        return this._buildURL(modelName);
      },

      /**
       * @method urlForFindQuery
       * @param {Object} query
       * @param {String} modelName
       * @return {String} url
       * @deprecated Use [urlForQuery](#method_urlForQuery) instead
       */
      urlForFindQuery: ember$data$lib$adapters$build$url$mixin$$urlForFindQuery,

      /**
       * @method urlForQuery
       * @param {Object} query
       * @param {String} modelName
       * @return {String} url
       */
      urlForQuery: function (query, modelName) {
        if (this.urlForFindQuery !== ember$data$lib$adapters$build$url$mixin$$urlForFindQuery) {
          Ember.deprecate('BuildURLMixin#urlForFindQuery has been deprecated and renamed to `urlForQuery`.');
          return this.urlForFindQuery(query, modelName);
        }
        return this._buildURL(modelName);
      },

      /**
       * @method urlForFindMany
       * @param {Array} ids
       * @param {String} modelName
       * @param {Array} snapshots
       * @return {String} url
       */
      urlForFindMany: function (ids, modelName, snapshots) {
        return this._buildURL(modelName);
      },

      /**
       * @method urlForFindHasMany
       * @param {String} id
       * @param {String} modelName
       * @return {String} url
       */
      urlForFindHasMany: function (id, modelName) {
        return this._buildURL(modelName, id);
      },

      /**
       * @method urlForFindBelongTo
       * @param {String} id
       * @param {String} modelName
       * @return {String} url
       */
      urlForFindBelongsTo: function (id, modelName) {
        return this._buildURL(modelName, id);
      },

      /**
       * @method urlForCreateRecord
       * @param {String} modelName
       * @param {DS.Snapshot} snapshot
       * @return {String} url
       */
      urlForCreateRecord: function (modelName, snapshot) {
        return this._buildURL(modelName);
      },

      /**
       * @method urlForUpdateRecord
       * @param {String} id
       * @param {String} modelName
       * @param {DS.Snapshot} snapshot
       * @return {String} url
       */
      urlForUpdateRecord: function (id, modelName, snapshot) {
        return this._buildURL(modelName, id);
      },

      /**
       * @method urlForDeleteRecord
       * @param {String} id
       * @param {String} modelName
       * @param {DS.Snapshot} snapshot
       * @return {String} url
       */
      urlForDeleteRecord: function (id, modelName, snapshot) {
        return this._buildURL(modelName, id);
      },

      /**
        @method urlPrefix
        @private
        @param {String} path
        @param {String} parentURL
        @return {String} urlPrefix
      */
      urlPrefix: function (path, parentURL) {
        var host = ember$data$lib$adapters$build$url$mixin$$get(this, 'host');
        var namespace = ember$data$lib$adapters$build$url$mixin$$get(this, 'namespace');
        var url = [];

        if (path) {
          // Protocol relative url
          //jscs:disable disallowEmptyBlocks
          if (/^\/\//.test(path)) {} else if (path.charAt(0) === '/') {
            //jscs:enable disallowEmptyBlocks
            if (host) {
              path = path.slice(1);
              url.push(host);
            }
            // Relative path
          } else if (!/^http(s)?:\/\//.test(path)) {
            url.push(parentURL);
          }
        } else {
          if (host) {
            url.push(host);
          }
          if (namespace) {
            url.push(namespace);
          }
        }

        if (path) {
          url.push(path);
        }

        return url.join('/');
      },

      /**
        Determines the pathname for a given type.
         By default, it pluralizes the type's name (for example,
        'post' becomes 'posts' and 'person' becomes 'people').
         ### Pathname customization
         For example if you have an object LineItem with an
        endpoint of "/line_items/".
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.RESTAdapter.extend({
          pathForType: function(modelName) {
            var decamelized = Ember.String.decamelize(modelName);
            return Ember.String.pluralize(decamelized);
          }
        });
        ```
         @method pathForType
        @param {String} modelName
        @return {String} path
      **/
      pathForType: function (modelName) {
        var camelized = Ember.String.camelize(modelName);
        return Ember.String.pluralize(camelized);
      }
    });

    function ember$data$lib$adapters$build$url$mixin$$urlForFind(id, modelName, snapshot) {
      Ember.deprecate('BuildURLMixin#urlForFind has been deprecated and renamed to `urlForFindRecord`.');
      return this._buildURL(modelName, id);
    }

    function ember$data$lib$adapters$build$url$mixin$$urlForFindQuery(query, modelName) {
      Ember.deprecate('BuildURLMixin#urlForFindQuery has been deprecated and renamed to `urlForQuery`.');
      return this._buildURL(modelName);
    }

    var ember$data$lib$adapters$build$url$mixin$$default = ember$data$lib$adapters$build$url$mixin$$BuildURLMixin;

    var ember$data$lib$adapters$rest$adapter$$get = Ember.get;
    var ember$data$lib$adapters$rest$adapter$$set = Ember.set;
    var ember$data$lib$adapters$rest$adapter$$forEach = Ember.ArrayPolyfills.forEach;/**
      The REST adapter allows your store to communicate with an HTTP server by
      transmitting JSON via XHR. Most Ember.js apps that consume a JSON API
      should use the REST adapter.
    
      This adapter is designed around the idea that the JSON exchanged with
      the server should be conventional.
    
      ## JSON Structure
    
      The REST adapter expects the JSON returned from your server to follow
      these conventions.
    
      ### Object Root
    
      The JSON payload should be an object that contains the record inside a
      root property. For example, in response to a `GET` request for
      `/posts/1`, the JSON should look like this:
    
      ```js
      {
        "post": {
          "id": 1,
          "title": "I'm Running to Reform the W3C's Tag",
          "author": "Yehuda Katz"
        }
      }
      ```
    
      Similarly, in response to a `GET` request for `/posts`, the JSON should
      look like this:
    
      ```js
      {
        "posts": [
          {
            "id": 1,
            "title": "I'm Running to Reform the W3C's Tag",
            "author": "Yehuda Katz"
          },
          {
            "id": 2,
            "title": "Rails is omakase",
            "author": "D2H"
          }
        ]
      }
      ```
    
      ### Conventional Names
    
      Attribute names in your JSON payload should be the camelCased versions of
      the attributes in your Ember.js models.
    
      For example, if you have a `Person` model:
    
      ```app/models/person.js
      import DS from 'ember-data';
    
      export default DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string')
      });
      ```
    
      The JSON returned should look like this:
    
      ```js
      {
        "person": {
          "id": 5,
          "firstName": "Barack",
          "lastName": "Obama",
          "occupation": "President"
        }
      }
      ```
    
      ## Customization
    
      ### Endpoint path customization
    
      Endpoint paths can be prefixed with a `namespace` by setting the namespace
      property on the adapter:
    
      ```app/adapters/application.js
      import DS from 'ember-data';
    
      export default DS.RESTAdapter.extend({
        namespace: 'api/1'
      });
      ```
      Requests for `App.Person` would now target `/api/1/people/1`.
    
      ### Host customization
    
      An adapter can target other hosts by setting the `host` property.
    
      ```app/adapters/application.js
      import DS from 'ember-data';
    
      export default DS.RESTAdapter.extend({
        host: 'https://api.example.com'
      });
      ```
    
      ### Headers customization
    
      Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary
      headers can be set as key/value pairs on the `RESTAdapter`'s `headers`
      object and Ember Data will send them along with each ajax request.
    
    
      ```app/adapters/application.js
      import DS from 'ember-data';
    
      export default DS.RESTAdapter.extend({
        headers: {
          "API_KEY": "secret key",
          "ANOTHER_HEADER": "Some header value"
        }
      });
      ```
    
      `headers` can also be used as a computed property to support dynamic
      headers. In the example below, the `session` object has been
      injected into an adapter by Ember's container.
    
      ```app/adapters/application.js
      import DS from 'ember-data';
    
      export default DS.RESTAdapter.extend({
        headers: function() {
          return {
            "API_KEY": this.get("session.authToken"),
            "ANOTHER_HEADER": "Some header value"
          };
        }.property("session.authToken")
      });
      ```
    
      In some cases, your dynamic headers may require data from some
      object outside of Ember's observer system (for example
      `document.cookie`). You can use the
      [volatile](/api/classes/Ember.ComputedProperty.html#method_volatile)
      function to set the property into a non-cached mode causing the headers to
      be recomputed with every request.
    
      ```app/adapters/application.js
      import DS from 'ember-data';
    
      export default DS.RESTAdapter.extend({
        headers: function() {
          return {
            "API_KEY": Ember.get(document.cookie.match(/apiKey\=([^;]*)/), "1"),
            "ANOTHER_HEADER": "Some header value"
          };
        }.property().volatile()
      });
      ```
    
      @class RESTAdapter
      @constructor
      @namespace DS
      @extends DS.Adapter
      @uses DS.BuildURLMixin
    */
    var ember$data$lib$adapters$rest$adapter$$RestAdapter = ember$data$lib$system$adapter$$default.extend(ember$data$lib$adapters$build$url$mixin$$default, {
      defaultSerializer: "-rest",

      /**
        By default, the RESTAdapter will send the query params sorted alphabetically to the
        server.
         For example:
         ```js
          store.query('posts', { sort: 'price', category: 'pets' });
        ```
         will generate a requests like this `/posts?category=pets&sort=price`, even if the
        parameters were specified in a different order.
         That way the generated URL will be deterministic and that simplifies caching mechanisms
        in the backend.
         Setting `sortQueryParams` to a falsey value will respect the original order.
         In case you want to sort the query parameters with a different criteria, set
        `sortQueryParams` to your custom sort function.
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.RESTAdapter.extend({
          sortQueryParams: function(params) {
            var sortedKeys = Object.keys(params).sort().reverse();
            var len = sortedKeys.length, newParams = {};
             for (var i = 0; i < len; i++) {
              newParams[sortedKeys[i]] = params[sortedKeys[i]];
            }
            return newParams;
          }
        });
        ```
         @method sortQueryParams
        @param {Object} obj
        @return {Object}
      */
      sortQueryParams: function (obj) {
        var keys = Ember.keys(obj);
        var len = keys.length;
        if (len < 2) {
          return obj;
        }
        var newQueryParams = {};
        var sortedKeys = keys.sort();

        for (var i = 0; i < len; i++) {
          newQueryParams[sortedKeys[i]] = obj[sortedKeys[i]];
        }
        return newQueryParams;
      },

      /**
        By default the RESTAdapter will send each find request coming from a `store.find`
        or from accessing a relationship separately to the server. If your server supports passing
        ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests
        within a single runloop.
         For example, if you have an initial payload of:
         ```javascript
        {
          post: {
            id: 1,
            comments: [1, 2]
          }
        }
        ```
         By default calling `post.get('comments')` will trigger the following requests(assuming the
        comments haven't been loaded before):
         ```
        GET /comments/1
        GET /comments/2
        ```
         If you set coalesceFindRequests to `true` it will instead trigger the following request:
         ```
        GET /comments?ids[]=1&ids[]=2
        ```
         Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`
        relationships accessed within the same runloop. If you set `coalesceFindRequests: true`
         ```javascript
        store.findRecord('comment', 1);
        store.findRecord('comment', 2);
        ```
         will also send a request to: `GET /comments?ids[]=1&ids[]=2`
         Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app
        `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.
         @property coalesceFindRequests
        @type {boolean}
      */
      coalesceFindRequests: false,

      /**
        Endpoint paths can be prefixed with a `namespace` by setting the namespace
        property on the adapter:
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.RESTAdapter.extend({
          namespace: 'api/1'
        });
        ```
         Requests for `App.Post` would now target `/api/1/post/`.
         @property namespace
        @type {String}
      */

      /**
        An adapter can target other hosts by setting the `host` property.
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.RESTAdapter.extend({
          host: 'https://api.example.com'
        });
        ```
         Requests for `App.Post` would now target `https://api.example.com/post/`.
         @property host
        @type {String}
      */

      /**
        Some APIs require HTTP headers, e.g. to provide an API
        key. Arbitrary headers can be set as key/value pairs on the
        `RESTAdapter`'s `headers` object and Ember Data will send them
        along with each ajax request. For dynamic headers see [headers
        customization](/api/data/classes/DS.RESTAdapter.html#toc_headers-customization).
         ```app/adapters/application.js
        import DS from 'ember-data';
         export default DS.RESTAdapter.extend({
          headers: {
            "API_KEY": "secret key",
            "ANOTHER_HEADER": "Some header value"
          }
        });
        ```
         @property headers
        @type {Object}
       */

      /**
        @method find
        @param {DS.Store} store
        @param {DS.Model} type
        @param {String} id
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
        @deprecated Use [findRecord](#method_findRecord) instead
      */
      find: function (store, type, id, snapshot) {
        Ember.deprecate("RestAdapter#find has been deprecated and renamed to `findRecord`.");
        return this.ajax(this.buildURL(type.modelName, id, snapshot, "find"), "GET");
      },

      /**
        Called by the store in order to fetch the JSON for a given
        type and ID.
         The `findRecord` method makes an Ajax request to a URL computed by
        `buildURL`, and returns a promise for the resulting payload.
         This method performs an HTTP `GET` request with the id provided as part of the query string.
         @method findRecord
        @param {DS.Store} store
        @param {DS.Model} type
        @param {String} id
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      findRecord: function (store, type, id, snapshot) {
        var find = ember$data$lib$adapters$rest$adapter$$RestAdapter.prototype.find;
        if (find !== this.find) {
          Ember.deprecate("RestAdapter#find has been deprecated and renamed to `findRecord`.");
          return this.find(store, type, id, snapshot);
        }
        return this.ajax(this.buildURL(type.modelName, id, snapshot, "findRecord"), "GET");
      },

      /**
        Called by the store in order to fetch a JSON array for all
        of the records for a given type.
         The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
        promise for the resulting payload.
         @private
        @method findAll
        @param {DS.Store} store
        @param {DS.Model} type
        @param {String} sinceToken
        @return {Promise} promise
      */
      findAll: function (store, type, sinceToken) {
        var query, url;

        if (sinceToken) {
          query = { since: sinceToken };
        }

        url = this.buildURL(type.modelName, null, null, "findAll");

        return this.ajax(url, "GET", { data: query });
      },

      /**
        Called by the store in order to fetch a JSON array for
        the records that match a particular query.
         The `findQuery` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
        promise for the resulting payload.
         The `query` argument is a simple JavaScript object that will be passed directly
        to the server as parameters.
         @private
        @method findQuery
        @param {DS.Store} store
        @param {DS.Model} type
        @param {Object} query
        @return {Promise} promise
        @deprecated Use [query](#method_query) instead
      */
      findQuery: function (store, type, query) {
        Ember.deprecate("RestAdapter#findQuery has been deprecated and renamed to `query`.");
        var url = this.buildURL(type.modelName, null, null, "findQuery", query);

        if (this.sortQueryParams) {
          query = this.sortQueryParams(query);
        }

        return this.ajax(url, "GET", { data: query });
      },

      /**
        Called by the store in order to fetch a JSON array for
        the records that match a particular query.
         The `findQuery` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
        promise for the resulting payload.
         The `query` argument is a simple JavaScript object that will be passed directly
        to the server as parameters.
         @private
        @method query
        @param {DS.Store} store
        @param {DS.Model} type
        @param {Object} query
        @return {Promise} promise
      */
      query: function (store, type, query) {
        var findQuery = ember$data$lib$adapters$rest$adapter$$RestAdapter.prototype.findQuery;
        if (findQuery !== this.findQuery) {
          Ember.deprecate("RestAdapter#findQuery has been deprecated and renamed to `query`.");
          return this.findQuery(store, type, query);
        }

        var url = this.buildURL(type.modelName, null, null, "query", query);

        if (this.sortQueryParams) {
          query = this.sortQueryParams(query);
        }

        return this.ajax(url, "GET", { data: query });
      },

      /**
        Called by the store in order to fetch several records together if `coalesceFindRequests` is true
         For example, if the original payload looks like:
         ```js
        {
          "id": 1,
          "title": "Rails is omakase",
          "comments": [ 1, 2, 3 ]
        }
        ```
         The IDs will be passed as a URL-encoded Array of IDs, in this form:
         ```
        ids[]=1&ids[]=2&ids[]=3
        ```
         Many servers, such as Rails and PHP, will automatically convert this URL-encoded array
        into an Array for you on the server-side. If you want to encode the
        IDs, differently, just override this (one-line) method.
         The `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
        promise for the resulting payload.
         @method findMany
        @param {DS.Store} store
        @param {DS.Model} type
        @param {Array} ids
        @param {Array} snapshots
        @return {Promise} promise
      */
      findMany: function (store, type, ids, snapshots) {
        var url = this.buildURL(type.modelName, ids, snapshots, "findMany");
        return this.ajax(url, "GET", { data: { ids: ids } });
      },

      /**
        Called by the store in order to fetch a JSON array for
        the unloaded records in a has-many relationship that were originally
        specified as a URL (inside of `links`).
         For example, if your original payload looks like this:
         ```js
        {
          "post": {
            "id": 1,
            "title": "Rails is omakase",
            "links": { "comments": "/posts/1/comments" }
          }
        }
        ```
         This method will be called with the parent record and `/posts/1/comments`.
         The `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.
         @method findHasMany
        @param {DS.Store} store
        @param {DS.Snapshot} snapshot
        @param {String} url
        @return {Promise} promise
      */
      findHasMany: function (store, snapshot, url, relationship) {
        var id = snapshot.id;
        var type = snapshot.modelName;

        url = this.urlPrefix(url, this.buildURL(type, id, null, "findHasMany"));

        return this.ajax(url, "GET");
      },

      /**
        Called by the store in order to fetch a JSON array for
        the unloaded records in a belongs-to relationship that were originally
        specified as a URL (inside of `links`).
         For example, if your original payload looks like this:
         ```js
        {
          "person": {
            "id": 1,
            "name": "Tom Dale",
            "links": { "group": "/people/1/group" }
          }
        }
        ```
         This method will be called with the parent record and `/people/1/group`.
         The `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.
         @method findBelongsTo
        @param {DS.Store} store
        @param {DS.Snapshot} snapshot
        @param {String} url
        @return {Promise} promise
      */
      findBelongsTo: function (store, snapshot, url, relationship) {
        var id = snapshot.id;
        var type = snapshot.modelName;

        url = this.urlPrefix(url, this.buildURL(type, id, null, "findBelongsTo"));
        return this.ajax(url, "GET");
      },

      /**
        Called by the store when a newly created record is
        saved via the `save` method on a model record instance.
         The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request
        to a URL computed by `buildURL`.
         See `serialize` for information on how to customize the serialized form
        of a record.
         @method createRecord
        @param {DS.Store} store
        @param {DS.Model} type
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      createRecord: function (store, type, snapshot) {
        var data = {};
        var serializer = store.serializerFor(type.modelName);
        var url = this.buildURL(type.modelName, null, snapshot, "createRecord");

        serializer.serializeIntoHash(data, type, snapshot, { includeId: true });

        return this.ajax(url, "POST", { data: data });
      },

      /**
        Called by the store when an existing record is saved
        via the `save` method on a model record instance.
         The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request
        to a URL computed by `buildURL`.
         See `serialize` for information on how to customize the serialized form
        of a record.
         @method updateRecord
        @param {DS.Store} store
        @param {DS.Model} type
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      updateRecord: function (store, type, snapshot) {
        var data = {};
        var serializer = store.serializerFor(type.modelName);

        serializer.serializeIntoHash(data, type, snapshot);

        var id = snapshot.id;
        var url = this.buildURL(type.modelName, id, snapshot, "updateRecord");

        return this.ajax(url, "PUT", { data: data });
      },

      /**
        Called by the store when a record is deleted.
         The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.
         @method deleteRecord
        @param {DS.Store} store
        @param {DS.Model} type
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      deleteRecord: function (store, type, snapshot) {
        var id = snapshot.id;

        return this.ajax(this.buildURL(type.modelName, id, snapshot, "deleteRecord"), "DELETE");
      },

      _stripIDFromURL: function (store, snapshot) {
        var url = this.buildURL(snapshot.modelName, snapshot.id, snapshot);

        var expandedURL = url.split("/");
        //Case when the url is of the format ...something/:id
        var lastSegment = expandedURL[expandedURL.length - 1];
        var id = snapshot.id;
        if (lastSegment === id) {
          expandedURL[expandedURL.length - 1] = "";
        } else if (ember$data$lib$adapters$rest$adapter$$endsWith(lastSegment, "?id=" + id)) {
          //Case when the url is of the format ...something?id=:id
          expandedURL[expandedURL.length - 1] = lastSegment.substring(0, lastSegment.length - id.length - 1);
        }

        return expandedURL.join("/");
      },

      // http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
      maxURLLength: 2048,

      /**
        Organize records into groups, each of which is to be passed to separate
        calls to `findMany`.
         This implementation groups together records that have the same base URL but
        differing ids. For example `/comments/1` and `/comments/2` will be grouped together
        because we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`
         It also supports urls where ids are passed as a query param, such as `/comments?id=1`
        but not those where there is more than 1 query param such as `/comments?id=2&name=David`
        Currently only the query param of `id` is supported. If you need to support others, please
        override this or the `_stripIDFromURL` method.
         It does not group records that have differing base urls, such as for example: `/posts/1/comments/2`
        and `/posts/2/comments/3`
         @method groupRecordsForFindMany
        @param {DS.Store} store
        @param {Array} snapshots
        @return {Array}  an array of arrays of records, each of which is to be
                          loaded separately by `findMany`.
      */
      groupRecordsForFindMany: function (store, snapshots) {
        var groups = ember$data$lib$system$map$$MapWithDefault.create({ defaultValue: function () {
            return [];
          } });
        var adapter = this;
        var maxURLLength = this.maxURLLength;

        ember$data$lib$adapters$rest$adapter$$forEach.call(snapshots, function (snapshot) {
          var baseUrl = adapter._stripIDFromURL(store, snapshot);
          groups.get(baseUrl).push(snapshot);
        });

        function splitGroupToFitInUrl(group, maxURLLength, paramNameLength) {
          var baseUrl = adapter._stripIDFromURL(store, group[0]);
          var idsSize = 0;
          var splitGroups = [[]];

          ember$data$lib$adapters$rest$adapter$$forEach.call(group, function (snapshot) {
            var additionalLength = encodeURIComponent(snapshot.id).length + paramNameLength;
            if (baseUrl.length + idsSize + additionalLength >= maxURLLength) {
              idsSize = 0;
              splitGroups.push([]);
            }

            idsSize += additionalLength;

            var lastGroupIndex = splitGroups.length - 1;
            splitGroups[lastGroupIndex].push(snapshot);
          });

          return splitGroups;
        }

        var groupsArray = [];
        groups.forEach(function (group, key) {
          var paramNameLength = "&ids%5B%5D=".length;
          var splitGroups = splitGroupToFitInUrl(group, maxURLLength, paramNameLength);

          ember$data$lib$adapters$rest$adapter$$forEach.call(splitGroups, function (splitGroup) {
            groupsArray.push(splitGroup);
          });
        });

        return groupsArray;
      },

      /**
        Takes an ajax response, and returns an error payload.
         @method ajaxError
        @deprecated Use [handleResponse](#method_handleResponse) instead
        @param  {Object} jqXHR
        @param  {Object} responseText
        @param  {Object} errorThrown
        @return {Object} jqXHR
      */

      /**
        Takes an ajax response, and returns the json payload.
         @method ajaxSuccess
        @deprecated Use [handleResponse](#method_handleResponse) instead
        @param  {Object} jqXHR
        @param  {Object} jsonPayload
        @return {Object} jsonPayload
      */

      /**
        Takes an ajax response, and returns the json payload or an error.
         By default this hook just returns the json payload passed to it.
        You might want to override it in two cases:
         1. Your API might return useful results in the response headers.
        Response headers are passed in as the second argument.
         2. Your API might return errors as successful responses with status code
        200 and an Errors text or object. You can return a `DS.InvalidError` or a
        `DS.AdapterError` (or a sub class) from this hook and it will automatically
        reject the promise and put your record into the invalid or error state.
         Returning a `DS.InvalidError` from this method will cause the
        record to transition into the `invalid` state and make the
        `errors` object available on the record. When returning an
        `DS.InvalidError` the store will attempt to normalize the error data
        returned from the server using the serializer's `extractErrors`
        method.
         @method handleResponse
        @param  {Number} status
        @param  {Object} headers
        @param  {Object} payload
        @return {Object | DS.AdapterError} response
      */
      handleResponse: function (status, headers, payload) {
        if (this.isSuccess(status, headers, payload)) {
          return payload;
        } else if (this.isInvalid(status, headers, payload)) {
          return new ember$data$lib$adapters$errors$$InvalidError(payload.errors);
        }

        var errors = this.normalizeErrorResponse(status, headers, payload);

        return new ember$data$lib$adapters$errors$$AdapterError(errors);
      },

      /**
        Default `handleResponse` implementation uses this hook to decide if the
        response is a success.
         @method isSuccess
        @param  {Number} status
        @param  {Object} headers
        @param  {Object} payload
        @return {Boolean}
      */
      isSuccess: function (status, headers, payload) {
        return status >= 200 && status < 300 || status === 304;
      },

      /**
        Default `handleResponse` implementation uses this hook to decide if the
        response is a an invalid error.
         @method isInvalid
        @param  {Number} status
        @param  {Object} headers
        @param  {Object} payload
        @return {Boolean}
      */
      isInvalid: function (status, headers, payload) {
        return status === 422;
      },

      /**
        Takes a URL, an HTTP method and a hash of data, and makes an
        HTTP request.
         When the server responds with a payload, Ember Data will call into `extractSingle`
        or `extractArray` (depending on whether the original query was for one record or
        many records).
         By default, `ajax` method has the following behavior:
         * It sets the response `dataType` to `"json"`
        * If the HTTP method is not `"GET"`, it sets the `Content-Type` to be
          `application/json; charset=utf-8`
        * If the HTTP method is not `"GET"`, it stringifies the data passed in. The
          data is the serialized record in the case of a save.
        * Registers success and failure handlers.
         @method ajax
        @private
        @param {String} url
        @param {String} type The request type GET, POST, PUT, DELETE etc.
        @param {Object} options
        @return {Promise} promise
      */
      ajax: function (url, type, options) {
        var adapter = this;

        return new Ember.RSVP.Promise(function (resolve, reject) {
          var hash = adapter.ajaxOptions(url, type, options);

          hash.success = function (payload, textStatus, jqXHR) {
            var response = undefined;

            if (adapter.ajaxSuccess) {
              Ember.deprecate("`ajaxSuccess` has been deprecated. Use `isSuccess`, `isInvalid` or `handleResponse` instead.");
              response = adapter.ajaxSuccess(jqXHR, payload);
            }

            if (!(response instanceof ember$data$lib$adapters$errors$$AdapterError)) {
              response = adapter.handleResponse(jqXHR.status, ember$data$lib$adapters$rest$adapter$$parseResponseHeaders(jqXHR.getAllResponseHeaders()), response || payload);
            }

            if (response instanceof ember$data$lib$adapters$errors$$AdapterError) {
              Ember.run(null, reject, response);
            } else {
              Ember.run(null, resolve, response);
            }
          };

          hash.error = function (jqXHR, textStatus, errorThrown) {
            var error = undefined;

            if (adapter.ajaxError) {
              Ember.deprecate("`ajaxError` has been deprecated. Use `isSuccess`, `isInvalid` or `handleResponse` instead.");
              error = adapter.ajaxError(jqXHR, textStatus, errorThrown);
            }

            if (!(error instanceof Error)) {
              if (errorThrown instanceof Error) {
                error = errorThrown;
              } else if (textStatus === "timeout") {
                error = new ember$data$lib$adapters$errors$$TimeoutError();
              } else if (textStatus === "abort") {
                error = new ember$data$lib$adapters$errors$$AbortError();
              } else {
                error = adapter.handleResponse(jqXHR.status, ember$data$lib$adapters$rest$adapter$$parseResponseHeaders(jqXHR.getAllResponseHeaders()), adapter.parseErrorResponse(jqXHR.responseText) || errorThrown);
              }
            }

            Ember.run(null, reject, error);
          };

          Ember.$.ajax(hash);
        }, "DS: RESTAdapter#ajax " + type + " to " + url);
      },

      /**
        @method ajaxOptions
        @private
        @param {String} url
        @param {String} type The request type GET, POST, PUT, DELETE etc.
        @param {Object} options
        @return {Object}
      */
      ajaxOptions: function (url, type, options) {
        var hash = options || {};
        hash.url = url;
        hash.type = type;
        hash.dataType = "json";
        hash.context = this;

        if (hash.data && type !== "GET") {
          hash.contentType = "application/json; charset=utf-8";
          hash.data = JSON.stringify(hash.data);
        }

        var headers = ember$data$lib$adapters$rest$adapter$$get(this, "headers");
        if (headers !== undefined) {
          hash.beforeSend = function (xhr) {
            ember$data$lib$adapters$rest$adapter$$forEach.call(Ember.keys(headers), function (key) {
              xhr.setRequestHeader(key, headers[key]);
            });
          };
        }

        return hash;
      },

      /**
        @method parseErrorResponse
        @private
        @param {String} responseText
        @return {Object}
      */
      parseErrorResponse: function (responseText) {
        var json = responseText;

        try {
          json = Ember.$.parseJSON(responseText);
        } catch (e) {}

        return json;
      },

      /**
        @method normalizeErrorResponse
        @private
        @param  {Number} status
        @param  {Object} headers
        @param  {Object} payload
        @return {Object} errors payload
      */
      normalizeErrorResponse: function (status, headers, payload) {
        if (payload && typeof payload === "object" && payload.errors) {
          return payload.errors;
        } else {
          return [{
            status: "" + status,
            title: "The backend responded with an error",
            details: "" + payload
          }];
        }
      }
    });

    function ember$data$lib$adapters$rest$adapter$$parseResponseHeaders(headerStr) {
      var headers = Ember.create(null);
      if (!headerStr) {
        return headers;
      }

      var headerPairs = headerStr.split("\r\n");
      for (var i = 0; i < headerPairs.length; i++) {
        var headerPair = headerPairs[i];
        // Can't use split() here because it does the wrong thing
        // if the header value has the string ": " in it.
        var index = headerPair.indexOf(": ");
        if (index > 0) {
          var key = headerPair.substring(0, index);
          var val = headerPair.substring(index + 2);
          headers[key] = val;
        }
      }

      return headers;
    }

    //From http://stackoverflow.com/questions/280634/endswith-in-javascript
    function ember$data$lib$adapters$rest$adapter$$endsWith(string, suffix) {
      if (typeof String.prototype.endsWith !== "function") {
        return string.indexOf(suffix, string.length - suffix.length) !== -1;
      } else {
        return string.endsWith(suffix);
      }
    }

    if (Ember.platform.hasPropertyAccessors) {
      Ember.defineProperty(ember$data$lib$adapters$rest$adapter$$RestAdapter.prototype, "maxUrlLength", {
        enumerable: false,
        get: function () {
          Ember.deprecate("maxUrlLength has been deprecated (wrong casing). You should use maxURLLength instead.");
          return this.maxURLLength;
        },

        set: function (value) {
          Ember.deprecate("maxUrlLength has been deprecated (wrong casing). You should use maxURLLength instead.");
          ember$data$lib$adapters$rest$adapter$$set(this, "maxURLLength", value);
        }
      });
    }

    var ember$data$lib$adapters$rest$adapter$$default = ember$data$lib$adapters$rest$adapter$$RestAdapter;

    var ember$data$lib$adapters$json$api$adapter$$default = ember$data$lib$adapters$rest$adapter$$default.extend({
      defaultSerializer: '-json-api',

      /**
        @method ajaxOptions
        @private
        @param {String} url
        @param {String} type The request type GET, POST, PUT, DELETE etc.
        @param {Object} options
        @return {Object}
      */
      ajaxOptions: function (url, type, options) {
        var hash = this._super.apply(this, arguments);

        if (hash.contentType) {
          hash.contentType = 'application/vnd.api+json';
        }

        var beforeSend = hash.beforeSend;
        hash.beforeSend = function (xhr) {
          xhr.setRequestHeader('Accept', 'application/vnd.api+json');
          if (beforeSend) {
            beforeSend(xhr);
          }
        };

        return hash;
      },

      /**
        @method findMany
        @param {DS.Store} store
        @param {DS.Model} type
        @param {Array} ids
        @param {Array} snapshots
        @return {Promise} promise
      */
      findMany: function (store, type, ids, snapshots) {
        var url = this.buildURL(type.modelName, ids, snapshots, 'findMany');
        return this.ajax(url, 'GET', { data: { filter: { id: ids.join(',') } } });
      },

      /**
        @method pathForType
        @param {String} modelName
        @return {String} path
      **/
      pathForType: function (modelName) {
        var dasherized = Ember.String.dasherize(modelName);
        return Ember.String.pluralize(dasherized);
      },

      // TODO: Remove this once we have a better way to override HTTP verbs.
      /**
        @method updateRecord
        @param {DS.Store} store
        @param {DS.Model} type
        @param {DS.Snapshot} snapshot
        @return {Promise} promise
      */
      updateRecord: function (store, type, snapshot) {
        var data = {};
        var serializer = store.serializerFor(type.modelName);

        serializer.serializeIntoHash(data, type, snapshot, { includeId: true });

        var id = snapshot.id;
        var url = this.buildURL(type.modelName, id, snapshot, 'updateRecord');

        return this.ajax(url, 'PATCH', { data: data });
      }
    });

    var ember$lib$main$$default = Ember;

    var ember$inflector$lib$lib$system$inflector$$capitalize = ember$lib$main$$default.String.capitalize;

    var ember$inflector$lib$lib$system$inflector$$BLANK_REGEX = /^\s*$/;
    var ember$inflector$lib$lib$system$inflector$$LAST_WORD_DASHED_REGEX = /([\w/-]+[_/-])([a-z\d]+$)/;
    var ember$inflector$lib$lib$system$inflector$$LAST_WORD_CAMELIZED_REGEX = /([\w/-]+)([A-Z][a-z\d]*$)/;
    var ember$inflector$lib$lib$system$inflector$$CAMELIZED_REGEX = /[A-Z][a-z\d]*$/;

    function ember$inflector$lib$lib$system$inflector$$loadUncountable(rules, uncountable) {
      for (var i = 0, length = uncountable.length; i < length; i++) {
        rules.uncountable[uncountable[i].toLowerCase()] = true;
      }
    }

    function ember$inflector$lib$lib$system$inflector$$loadIrregular(rules, irregularPairs) {
      var pair;

      for (var i = 0, length = irregularPairs.length; i < length; i++) {
        pair = irregularPairs[i];

        //pluralizing
        rules.irregular[pair[0].toLowerCase()] = pair[1];
        rules.irregular[pair[1].toLowerCase()] = pair[1];

        //singularizing
        rules.irregularInverse[pair[1].toLowerCase()] = pair[0];
        rules.irregularInverse[pair[0].toLowerCase()] = pair[0];
      }
    }

    /**
      Inflector.Ember provides a mechanism for supplying inflection rules for your
      application. Ember includes a default set of inflection rules, and provides an
      API for providing additional rules.

      Examples:

      Creating an inflector with no rules.

      ```js
      var inflector = new Ember.Inflector();
      ```

      Creating an inflector with the default ember ruleset.

      ```js
      var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);

      inflector.pluralize('cow'); //=> 'kine'
      inflector.singularize('kine'); //=> 'cow'
      ```

      Creating an inflector and adding rules later.

      ```javascript
      var inflector = Ember.Inflector.inflector;

      inflector.pluralize('advice'); // => 'advices'
      inflector.uncountable('advice');
      inflector.pluralize('advice'); // => 'advice'

      inflector.pluralize('formula'); // => 'formulas'
      inflector.irregular('formula', 'formulae');
      inflector.pluralize('formula'); // => 'formulae'

      // you would not need to add these as they are the default rules
      inflector.plural(/$/, 's');
      inflector.singular(/s$/i, '');
      ```

      Creating an inflector with a nondefault ruleset.

      ```javascript
      var rules = {
        plurals:  [ /$/, 's' ],
        singular: [ /\s$/, '' ],
        irregularPairs: [
          [ 'cow', 'kine' ]
        ],
        uncountable: [ 'fish' ]
      };

      var inflector = new Ember.Inflector(rules);
      ```

      @class Inflector
      @namespace Ember
    */
    function ember$inflector$lib$lib$system$inflector$$Inflector(ruleSet) {
      ruleSet = ruleSet || {};
      ruleSet.uncountable = ruleSet.uncountable || ember$inflector$lib$lib$system$inflector$$makeDictionary();
      ruleSet.irregularPairs = ruleSet.irregularPairs || ember$inflector$lib$lib$system$inflector$$makeDictionary();

      var rules = this.rules = {
        plurals: ruleSet.plurals || [],
        singular: ruleSet.singular || [],
        irregular: ember$inflector$lib$lib$system$inflector$$makeDictionary(),
        irregularInverse: ember$inflector$lib$lib$system$inflector$$makeDictionary(),
        uncountable: ember$inflector$lib$lib$system$inflector$$makeDictionary()
      };

      ember$inflector$lib$lib$system$inflector$$loadUncountable(rules, ruleSet.uncountable);
      ember$inflector$lib$lib$system$inflector$$loadIrregular(rules, ruleSet.irregularPairs);

      this.enableCache();
    }

    if (!Object.create && !Object.create(null).hasOwnProperty) {
      throw new Error('This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg');
    }

    function ember$inflector$lib$lib$system$inflector$$makeDictionary() {
      var cache = Object.create(null);
      cache['_dict'] = null;
      delete cache['_dict'];
      return cache;
    }

    ember$inflector$lib$lib$system$inflector$$Inflector.prototype = {
      /**
        @public
         As inflections can be costly, and commonly the same subset of words are repeatedly
        inflected an optional cache is provided.
         @method enableCache
      */
      enableCache: function () {
        this.purgeCache();

        this.singularize = function (word) {
          this._cacheUsed = true;
          return this._sCache[word] || (this._sCache[word] = this._singularize(word));
        };

        this.pluralize = function (word) {
          this._cacheUsed = true;
          return this._pCache[word] || (this._pCache[word] = this._pluralize(word));
        };
      },

      /**
        @public
         @method purgedCache
      */
      purgeCache: function () {
        this._cacheUsed = false;
        this._sCache = ember$inflector$lib$lib$system$inflector$$makeDictionary();
        this._pCache = ember$inflector$lib$lib$system$inflector$$makeDictionary();
      },

      /**
        @public
        disable caching
         @method disableCache;
      */
      disableCache: function () {
        this._sCache = null;
        this._pCache = null;
        this.singularize = function (word) {
          return this._singularize(word);
        };

        this.pluralize = function (word) {
          return this._pluralize(word);
        };
      },

      /**
        @method plural
        @param {RegExp} regex
        @param {String} string
      */
      plural: function (regex, string) {
        if (this._cacheUsed) {
          this.purgeCache();
        }
        this.rules.plurals.push([regex, string.toLowerCase()]);
      },

      /**
        @method singular
        @param {RegExp} regex
        @param {String} string
      */
      singular: function (regex, string) {
        if (this._cacheUsed) {
          this.purgeCache();
        }
        this.rules.singular.push([regex, string.toLowerCase()]);
      },

      /**
        @method uncountable
        @param {String} regex
      */
      uncountable: function (string) {
        if (this._cacheUsed) {
          this.purgeCache();
        }
        ember$inflector$lib$lib$system$inflector$$loadUncountable(this.rules, [string.toLowerCase()]);
      },

      /**
        @method irregular
        @param {String} singular
        @param {String} plural
      */
      irregular: function (singular, plural) {
        if (this._cacheUsed) {
          this.purgeCache();
        }
        ember$inflector$lib$lib$system$inflector$$loadIrregular(this.rules, [[singular, plural]]);
      },

      /**
        @method pluralize
        @param {String} word
      */
      pluralize: function (word) {
        return this._pluralize(word);
      },

      _pluralize: function (word) {
        return this.inflect(word, this.rules.plurals, this.rules.irregular);
      },
      /**
        @method singularize
        @param {String} word
      */
      singularize: function (word) {
        return this._singularize(word);
      },

      _singularize: function (word) {
        return this.inflect(word, this.rules.singular, this.rules.irregularInverse);
      },

      /**
        @protected
         @method inflect
        @param {String} word
        @param {Object} typeRules
        @param {Object} irregular
      */
      inflect: function (word, typeRules, irregular) {
        var inflection, substitution, result, lowercase, wordSplit, firstPhrase, lastWord, isBlank, isCamelized, isUncountable, isIrregular, rule;

        isBlank = !word || ember$inflector$lib$lib$system$inflector$$BLANK_REGEX.test(word);

        isCamelized = ember$inflector$lib$lib$system$inflector$$CAMELIZED_REGEX.test(word);
        firstPhrase = '';

        if (isBlank) {
          return word;
        }

        lowercase = word.toLowerCase();
        wordSplit = ember$inflector$lib$lib$system$inflector$$LAST_WORD_DASHED_REGEX.exec(word) || ember$inflector$lib$lib$system$inflector$$LAST_WORD_CAMELIZED_REGEX.exec(word);
        if (wordSplit) {
          firstPhrase = wordSplit[1];
          lastWord = wordSplit[2].toLowerCase();
        }

        isUncountable = this.rules.uncountable[lowercase] || this.rules.uncountable[lastWord];

        if (isUncountable) {
          return word;
        }

        isIrregular = irregular && (irregular[lowercase] || irregular[lastWord]);

        if (isIrregular) {
          if (irregular[lowercase]) {
            return isIrregular;
          } else {
            isIrregular = isCamelized ? ember$inflector$lib$lib$system$inflector$$capitalize(isIrregular) : isIrregular;
            return firstPhrase + isIrregular;
          }
        }

        for (var i = typeRules.length, min = 0; i > min; i--) {
          inflection = typeRules[i - 1];
          rule = inflection[0];

          if (rule.test(word)) {
            break;
          }
        }

        inflection = inflection || [];

        rule = inflection[0];
        substitution = inflection[1];

        result = word.replace(rule, substitution);

        return result;
      }
    };

    var ember$inflector$lib$lib$system$inflector$$default = ember$inflector$lib$lib$system$inflector$$Inflector;

    function ember$inflector$lib$lib$system$string$$pluralize(word) {
      return ember$inflector$lib$lib$system$inflector$$default.inflector.pluralize(word);
    }

    function ember$inflector$lib$lib$system$string$$singularize(word) {
      return ember$inflector$lib$lib$system$inflector$$default.inflector.singularize(word);
    }

    var ember$inflector$lib$lib$system$inflections$$default = {
      plurals: [[/$/, 's'], [/s$/i, 's'], [/^(ax|test)is$/i, '$1es'], [/(octop|vir)us$/i, '$1i'], [/(octop|vir)i$/i, '$1i'], [/(alias|status)$/i, '$1es'], [/(bu)s$/i, '$1ses'], [/(buffal|tomat)o$/i, '$1oes'], [/([ti])um$/i, '$1a'], [/([ti])a$/i, '$1a'], [/sis$/i, 'ses'], [/(?:([^f])fe|([lr])f)$/i, '$1$2ves'], [/(hive)$/i, '$1s'], [/([^aeiouy]|qu)y$/i, '$1ies'], [/(x|ch|ss|sh)$/i, '$1es'], [/(matr|vert|ind)(?:ix|ex)$/i, '$1ices'], [/^(m|l)ouse$/i, '$1ice'], [/^(m|l)ice$/i, '$1ice'], [/^(ox)$/i, '$1en'], [/^(oxen)$/i, '$1'], [/(quiz)$/i, '$1zes']],

      singular: [[/s$/i, ''], [/(ss)$/i, '$1'], [/(n)ews$/i, '$1ews'], [/([ti])a$/i, '$1um'], [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis'], [/(^analy)(sis|ses)$/i, '$1sis'], [/([^f])ves$/i, '$1fe'], [/(hive)s$/i, '$1'], [/(tive)s$/i, '$1'], [/([lr])ves$/i, '$1f'], [/([^aeiouy]|qu)ies$/i, '$1y'], [/(s)eries$/i, '$1eries'], [/(m)ovies$/i, '$1ovie'], [/(x|ch|ss|sh)es$/i, '$1'], [/^(m|l)ice$/i, '$1ouse'], [/(bus)(es)?$/i, '$1'], [/(o)es$/i, '$1'], [/(shoe)s$/i, '$1'], [/(cris|test)(is|es)$/i, '$1is'], [/^(a)x[ie]s$/i, '$1xis'], [/(octop|vir)(us|i)$/i, '$1us'], [/(alias|status)(es)?$/i, '$1'], [/^(ox)en/i, '$1'], [/(vert|ind)ices$/i, '$1ex'], [/(matr)ices$/i, '$1ix'], [/(quiz)zes$/i, '$1'], [/(database)s$/i, '$1']],

      irregularPairs: [['person', 'people'], ['man', 'men'], ['child', 'children'], ['sex', 'sexes'], ['move', 'moves'], ['cow', 'kine'], ['zombie', 'zombies']],

      uncountable: ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'jeans', 'police']
    };

    ember$inflector$lib$lib$system$inflector$$default.inflector = new ember$inflector$lib$lib$system$inflector$$default(ember$inflector$lib$lib$system$inflections$$default);

    var ember$inflector$lib$lib$utils$register$helper$$default = ember$inflector$lib$lib$utils$register$helper$$registerHelper;

    function ember$inflector$lib$lib$utils$register$helper$$registerHelperIteration1(name, helperFunction) {
      //earlier versions of ember with htmlbars used this
      ember$lib$main$$default.HTMLBars.helpers[name] = helperFunction;
    }

    function ember$inflector$lib$lib$utils$register$helper$$registerHelperIteration2(name, helperFunction) {
      //registerHelper has been made private as _registerHelper
      //this is kept here if anyone is using it
      ember$lib$main$$default.HTMLBars.registerHelper(name, helperFunction);
    }

    function ember$inflector$lib$lib$utils$register$helper$$registerHelperIteration3(name, helperFunction) {
      //latest versin of ember uses this
      ember$lib$main$$default.HTMLBars._registerHelper(name, helperFunction);
    }
    function ember$inflector$lib$lib$utils$register$helper$$registerHelper(name, helperFunction) {
      if (ember$lib$main$$default.HTMLBars) {
        var fn = ember$lib$main$$default.HTMLBars.makeBoundHelper(helperFunction);

        if (ember$lib$main$$default.HTMLBars._registerHelper) {
          if (ember$lib$main$$default.HTMLBars.helpers) {
            ember$inflector$lib$lib$utils$register$helper$$registerHelperIteration1(name, fn);
          } else {
            ember$inflector$lib$lib$utils$register$helper$$registerHelperIteration3(name, fn);
          }
        } else if (ember$lib$main$$default.HTMLBars.registerHelper) {
          ember$inflector$lib$lib$utils$register$helper$$registerHelperIteration2(name, fn);
        }
      } else if (ember$lib$main$$default.Handlebars) {
        ember$lib$main$$default.Handlebars.helper(name, helperFunction);
      }
    }

    /**
     *
     * If you have Ember Inflector (such as if Ember Data is present),
     * singularize a word. For example, turn "oxen" into "ox".
     *
     * Example:
     *
     * {{singularize myProperty}}
     * {{singularize "oxen"}}
     *
     * @for Ember.HTMLBars.helpers
     * @method singularize
     * @param {String|Property} word word to singularize
    */
    ember$inflector$lib$lib$utils$register$helper$$default('singularize', function (params) {
      return ember$inflector$lib$lib$system$string$$singularize(params[0]);
    });

    /**
     *
     * If you have Ember Inflector (such as if Ember Data is present),
     * pluralize a word. For example, turn "ox" into "oxen".
     *
     * Example:
     *
     * {{pluralize count myProperty}}
     * {{pluralize 1 "oxen"}}
     * {{pluralize myProperty}}
     * {{pluralize "ox"}}
     *
     * @for Ember.HTMLBars.helpers
     * @method pluralize
     * @param {Number|Property} [count] count of objects
     * @param {String|Property} word word to pluralize
    */
    ember$inflector$lib$lib$utils$register$helper$$default('pluralize', function (params) {
      var count, word;

      if (params.length === 1) {
        word = params[0];
        return ember$inflector$lib$lib$system$string$$pluralize(word);
      } else {
        count = params[0];
        word = params[1];

        if (count !== 1) {
          word = ember$inflector$lib$lib$system$string$$pluralize(word);
        }
        return count + ' ' + word;
      }
    });

    if (ember$lib$main$$default.EXTEND_PROTOTYPES === true || ember$lib$main$$default.EXTEND_PROTOTYPES.String) {
      /**
        See {{#crossLink "Ember.String/pluralize"}}{{/crossLink}}
         @method pluralize
        @for String
      */
      String.prototype.pluralize = function () {
        return ember$inflector$lib$lib$system$string$$pluralize(this);
      };

      /**
        See {{#crossLink "Ember.String/singularize"}}{{/crossLink}}
         @method singularize
        @for String
      */
      String.prototype.singularize = function () {
        return ember$inflector$lib$lib$system$string$$singularize(this);
      };
    }

    ember$inflector$lib$lib$system$inflector$$default.defaultRules = ember$inflector$lib$lib$system$inflections$$default;
    ember$lib$main$$default.Inflector = ember$inflector$lib$lib$system$inflector$$default;

    ember$lib$main$$default.String.pluralize = ember$inflector$lib$lib$system$string$$pluralize;
    ember$lib$main$$default.String.singularize = ember$inflector$lib$lib$system$string$$singularize;
    var ember$inflector$lib$main$$default = ember$inflector$lib$lib$system$inflector$$default;

    if (typeof define !== "undefined" && define.amd) {
      define("ember-inflector", ["exports"], function (__exports__) {
        __exports__["default"] = ember$inflector$lib$lib$system$inflector$$default;
        return ember$inflector$lib$lib$system$inflector$$default;
      });
    } else if (typeof module !== "undefined" && module["exports"]) {
      module["exports"] = ember$inflector$lib$lib$system$inflector$$default;
    }

    /**
      @module ember-data
    */

    var activemodel$adapter$lib$system$active$model$adapter$$decamelize = Ember.String.decamelize;
    var activemodel$adapter$lib$system$active$model$adapter$$underscore = Ember.String.underscore;

    /**
      The ActiveModelAdapter is a subclass of the RESTAdapter designed to integrate
      with a JSON API that uses an underscored naming convention instead of camelCasing.
      It has been designed to work out of the box with the
      [active\_model\_serializers](http://github.com/rails-api/active_model_serializers)
      Ruby gem. This Adapter expects specific settings using ActiveModel::Serializers,
      `embed :ids, embed_in_root: true` which sideloads the records.

      This adapter extends the DS.RESTAdapter by making consistent use of the camelization,
      decamelization and pluralization methods to normalize the serialized JSON into a
      format that is compatible with a conventional Rails backend and Ember Data.

      ## JSON Structure

      The ActiveModelAdapter expects the JSON returned from your server to follow
      the REST adapter conventions substituting underscored keys for camelcased ones.

      Unlike the DS.RESTAdapter, async relationship keys must be the singular form
      of the relationship name, followed by "_id" for DS.belongsTo relationships,
      or "_ids" for DS.hasMany relationships.

      ### Conventional Names

      Attribute names in your JSON payload should be the underscored versions of
      the attributes in your Ember.js models.

      For example, if you have a `Person` model:

      ```js
      App.FamousPerson = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string')
      });
      ```

      The JSON returned should look like this:

      ```js
      {
        "famous_person": {
          "id": 1,
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation": "President"
        }
      }
      ```

      Let's imagine that `Occupation` is just another model:

      ```js
      App.Person = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.belongsTo('occupation')
      });

      App.Occupation = DS.Model.extend({
        name: DS.attr('string'),
        salary: DS.attr('number'),
        people: DS.hasMany('person')
      });
      ```

      The JSON needed to avoid extra server calls, should look like this:

      ```js
      {
        "people": [{
          "id": 1,
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation_id": 1
        }],

        "occupations": [{
          "id": 1,
          "name": "President",
          "salary": 100000,
          "person_ids": [1]
        }]
      }
      ```

      @class ActiveModelAdapter
      @constructor
      @namespace DS
      @extends DS.RESTAdapter
    **/

    var activemodel$adapter$lib$system$active$model$adapter$$ActiveModelAdapter = ember$data$lib$adapters$rest$adapter$$default.extend({
      defaultSerializer: "-active-model",
      /**
        The ActiveModelAdapter overrides the `pathForType` method to build
        underscored URLs by decamelizing and pluralizing the object type name.
         ```js
          this.pathForType("famousPerson");
          //=> "famous_people"
        ```
         @method pathForType
        @param {String} modelName
        @return String
      */
      pathForType: function (modelName) {
        var decamelized = activemodel$adapter$lib$system$active$model$adapter$$decamelize(modelName);
        var underscored = activemodel$adapter$lib$system$active$model$adapter$$underscore(decamelized);
        return ember$inflector$lib$lib$system$string$$pluralize(underscored);
      },

      /**
        The ActiveModelAdapter overrides the `handleResponse` method
        to format errors passed to a DS.InvalidError for all
        422 Unprocessable Entity responses.
         A 422 HTTP response from the server generally implies that the request
        was well formed but the API was unable to process it because the
        content was not semantically correct or meaningful per the API.
         For more information on 422 HTTP Error code see 11.2 WebDAV RFC 4918
        https://tools.ietf.org/html/rfc4918#section-11.2
         @method ajaxError
        @param {Object} jqXHR
        @return error
      */
      handleResponse: function (status, headers, payload) {
        if (this.isInvalid(status, headers, payload)) {
          var errors = ember$data$lib$adapters$errors$$errorsHashToArray(payload.errors);

          return new ember$data$lib$adapters$errors$$InvalidError(errors);
        } else {
          return this._super.apply(this, arguments);
        }
      }
    });

    var activemodel$adapter$lib$system$active$model$adapter$$default = activemodel$adapter$lib$system$active$model$adapter$$ActiveModelAdapter;

    var ember$data$lib$system$serializer$$Serializer = Ember.Object.extend({

      /*
        This is only to be used temporarily during the transition from the old
        serializer API to the new one.
         This makes the store and the built-in serializers use the new Serializer API.
          ## Custom Serializers
         If you have custom serializers you need to do the following:
         1. Opt-in to the new Serializer API by setting `isNewSerializerAPI` to `true`
            when extending one of the built-in serializers. This indicates that the
            store should call `normalizeResponse` instead of `extract` and to expect
            a JSON-API Document back.
        2. If you have a custom `extract` hooks you need to refactor it to the new
            `normalizeResponse` hooks and make sure it returns a JSON-API Document.
        3. If you have a custom `normalize` method you need to make sure it also
            returns a JSON-API Document with the record in question as the primary
            data.
         @property isNewSerializerAPI
      */
      isNewSerializerAPI: false,

      /**
        The `store` property is the application's `store` that contains all records.
        It's injected as a service.
        It can be used to push records from a non flat data structure server
        response.
         @property store
        @type {DS.Store}
        @public
      */

      /**
        The `extract` method is used to deserialize the payload received from your
        data source into the form that Ember Data expects.
         @method extract
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object}
      */
      extract: null,

      /**
        The `serialize` method is used when a record is saved in order to convert
        the record into the form that your external data source expects.
         `serialize` takes an optional `options` hash with a single option:
         - `includeId`: If this is `true`, `serialize` should include the ID
          in the serialized object it builds.
         @method serialize
        @param {DS.Model} record
        @param {Object} [options]
        @return {Object}
      */
      serialize: null,

      /**
        The `normalize` method is used to convert a payload received from your
        external data source into the normalized form `store.push()` expects. You
        should override this method, munge the hash and return the normalized
        payload.
         @method normalize
        @param {DS.Model} typeClass
        @param {Object} hash
        @return {Object}
      */
      normalize: function (typeClass, hash) {
        return hash;
      }

    });

    var ember$data$lib$system$serializer$$default = ember$data$lib$system$serializer$$Serializer;
    var ember$data$lib$system$coerce$id$$default = ember$data$lib$system$coerce$id$$coerceId;
    // Used by the store to normalize IDs entering the store.  Despite the fact
    // that developers may provide IDs as numbers (e.g., `store.find(Person, 1)`),
    // it is important that internally we use strings, since IDs may be serialized
    // and lose type information.  For example, Ember's router may put a record's
    // ID into the URL, and if we later try to deserialize that URL and find the
    // corresponding record, we will not know if it is a string or a number.

    function ember$data$lib$system$coerce$id$$coerceId(id) {
      return id == null || id === '' ? null : id + '';
    }
    var ember$data$lib$system$normalize$model$name$$default = ember$data$lib$system$normalize$model$name$$normalizeModelName;
    /**
      All modelNames are dasherized internally. Changing this function may
      require changes to other normalization hooks (such as typeForRoot).
      @method normalizeModelName
      @public
      @param {String} modelName
      @return {String} if the adapter can generate one, an ID
      @for DS
    */
    function ember$data$lib$system$normalize$model$name$$normalizeModelName(modelName) {
      return Ember.String.dasherize(modelName);
    }

    var ember$data$lib$serializers$json$serializer$$get = Ember.get;
    var ember$data$lib$serializers$json$serializer$$isNone = Ember.isNone;
    var ember$data$lib$serializers$json$serializer$$map = Ember.ArrayPolyfills.map;
    var ember$data$lib$serializers$json$serializer$$merge = Ember.merge;

    /*
      Ember Data 2.0 Serializer:

      In Ember Data a Serializer is used to serialize and deserialize
      records when they are transferred in and out of an external source.
      This process involves normalizing property names, transforming
      attribute values and serializing relationships.

      By default Ember Data recommends using the JSONApiSerializer.

      `JSONSerializer` is useful for simpler or legacy backends that may
      not support the http://jsonapi.org/ spec.

      `JSONSerializer` normalizes a JSON payload that looks like:

      ```js
        App.User = DS.Model.extend({
          name: DS.attr(),
          friends: DS.hasMany('user'),
          house: DS.belongsTo('location'),
        });
      ```
      ```js
        { id: 1,
          name: 'Sebastian',
          friends: [3, 4],
          links: {
            house: '/houses/lefkada'
          }
        }
      ```
      to JSONApi format that the Ember Data store expects.

      You can customize how JSONSerializer processes it's payload by passing options in
      the attrs hash or by subclassing the JSONSerializer and overriding hooks:

        -To customize how a single record is normalized, use the `normalize` hook
        -To customize how JSONSerializer normalizes the whole server response, use the
          normalizeResponse hook
        -To customize how JSONSerializer normalizes a specific response from the server,
          use one of the many specific normalizeResponse hooks
        -To customize how JSONSerializer normalizes your attributes or relationships,
          use the extractAttributes and extractRelationships hooks.

      JSONSerializer normalization process follows these steps:
        - `normalizeResponse` - entry method to the Serializer
        - `normalizeCreateRecordResponse` - a normalizeResponse for a specific operation is called
        - `normalizeSingleResponse`|`normalizeArrayResponse` - for methods like `createRecord` we expect
          a single record back, while for methods like `findAll` we expect multiple methods back
        - `normalize` - normalizeArray iterates and calls normalize for each of it's records while normalizeSingle
          calls it once. This is the method you most likely want to subclass
        - `extractId` | `extractAttributes` | `extractRelationships` - normalize delegates to these methods to
          turn the record payload into the JSONApi format

      @class JSONSerializer
      @namespace DS
      @extends DS.Serializer
    */

    /**
      In Ember Data a Serializer is used to serialize and deserialize
      records when they are transferred in and out of an external source.
      This process involves normalizing property names, transforming
      attribute values and serializing relationships.

      For maximum performance Ember Data recommends you use the
      [RESTSerializer](DS.RESTSerializer.html) or one of its subclasses.

      `JSONSerializer` is useful for simpler or legacy backends that may
      not support the http://jsonapi.org/ spec.

      @class JSONSerializer
      @namespace DS
      @extends DS.Serializer
    */
    var ember$data$lib$serializers$json$serializer$$JSONSerializer = ember$data$lib$system$serializer$$default.extend({

      /**
        The primaryKey is used when serializing and deserializing
        data. Ember Data always uses the `id` property to store the id of
        the record. The external source may not always follow this
        convention. In these cases it is useful to override the
        primaryKey property to match the primaryKey of your external
        store.
         Example
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          primaryKey: '_id'
        });
        ```
         @property primaryKey
        @type {String}
        @default 'id'
      */
      primaryKey: "id",

      /**
        The `attrs` object can be used to declare a simple mapping between
        property names on `DS.Model` records and payload keys in the
        serialized JSON object representing the record. An object with the
        property `key` can also be used to designate the attribute's key on
        the response payload.
         Example
         ```app/models/person.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          firstName: DS.attr('string'),
          lastName: DS.attr('string'),
          occupation: DS.attr('string'),
          admin: DS.attr('boolean')
        });
        ```
         ```app/serializers/person.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          attrs: {
            admin: 'is_admin',
            occupation: { key: 'career' }
          }
        });
        ```
         You can also remove attributes by setting the `serialize` key to
        false in your mapping object.
         Example
         ```app/serializers/person.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          attrs: {
            admin: {serialize: false},
            occupation: { key: 'career' }
          }
        });
        ```
         When serialized:
         ```javascript
        {
          "firstName": "Harry",
          "lastName": "Houdini",
          "career": "magician"
        }
        ```
         Note that the `admin` is now not included in the payload.
         @property attrs
        @type {Object}
      */
      mergedProperties: ["attrs"],

      /**
       Given a subclass of `DS.Model` and a JSON object this method will
       iterate through each attribute of the `DS.Model` and invoke the
       `DS.Transform#deserialize` method on the matching property of the
       JSON object.  This method is typically called after the
       serializer's `normalize` method.
        @method applyTransforms
       @private
       @param {DS.Model} typeClass
       @param {Object} data The data to transform
       @return {Object} data The transformed data object
      */
      applyTransforms: function (typeClass, data) {
        typeClass.eachTransformedAttribute(function applyTransform(key, typeClass) {
          if (!data.hasOwnProperty(key)) {
            return;
          }

          var transform = this.transformFor(typeClass);
          data[key] = transform.deserialize(data[key]);
        }, this);

        return data;
      },

      /*
        The `normalizeResponse` method is used to normalize a payload from the
        server to a JSON-API Document.
         http://jsonapi.org/format/#document-structure
         This method delegates to a more specific normalize method based on
        the `requestType`.
         To override this method with a custom one, make sure to call
        `return this._super(store, primaryModelClass, payload, id, requestType)` with your
        pre-processed data.
         Here's an example of using `normalizeResponse` manually:
         ```javascript
        socket.on('message', function(message) {
          var data = message.data;
          var modelClass = store.modelFor(data.modelName);
          var serializer = store.serializerFor(data.modelName);
          var json = serializer.normalizeSingleResponse(store, modelClass, data, data.id);
           store.push(normalized);
        });
        ```
         @method normalizeResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeResponse: function (store, primaryModelClass, payload, id, requestType) {
        switch (requestType) {
          case "findRecord":
            return this.normalizeFindRecordResponse.apply(this, arguments);
          case "queryRecord":
            return this.normalizeQueryRecordResponse.apply(this, arguments);
          case "findAll":
            return this.normalizeFindAllResponse.apply(this, arguments);
          case "findBelongsTo":
            return this.normalizeFindBelongsToResponse.apply(this, arguments);
          case "findHasMany":
            return this.normalizeFindHasManyResponse.apply(this, arguments);
          case "findMany":
            return this.normalizeFindManyResponse.apply(this, arguments);
          case "query":
            return this.normalizeQueryResponse.apply(this, arguments);
          case "createRecord":
            return this.normalizeCreateRecordResponse.apply(this, arguments);
          case "deleteRecord":
            return this.normalizeDeleteRecordResponse.apply(this, arguments);
          case "updateRecord":
            return this.normalizeUpdateRecordResponse.apply(this, arguments);
        }
      },

      /*
        @method normalizeFindRecordResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeFindRecordResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeSingleResponse.apply(this, arguments);
      },

      /*
        @method normalizeQueryRecordResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeQueryRecordResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeSingleResponse.apply(this, arguments);
      },

      /*
        @method normalizeFindAllResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeFindAllResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeArrayResponse.apply(this, arguments);
      },

      /*
        @method normalizeFindBelongsToResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeFindBelongsToResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeSingleResponse.apply(this, arguments);
      },

      /*
        @method normalizeFindHasManyResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeFindHasManyResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeArrayResponse.apply(this, arguments);
      },

      /*
        @method normalizeFindManyResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeFindManyResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeArrayResponse.apply(this, arguments);
      },

      /*
        @method normalizeQueryResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeQueryResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeArrayResponse.apply(this, arguments);
      },

      /*
        @method normalizeCreateRecordResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeCreateRecordResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeSaveResponse.apply(this, arguments);
      },

      /*
        @method normalizeDeleteRecordResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeDeleteRecordResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeSaveResponse.apply(this, arguments);
      },

      /*
        @method normalizeUpdateRecordResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeUpdateRecordResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeSaveResponse.apply(this, arguments);
      },

      /*
        @method normalizeSaveResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeSaveResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this.normalizeSingleResponse.apply(this, arguments);
      },

      /*
        @method normalizeSingleResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeSingleResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, true);
      },

      /*
        @method normalizeArrayResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @return {Object} JSON-API Document
      */
      normalizeArrayResponse: function (store, primaryModelClass, payload, id, requestType) {
        return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, false);
      },

      /*
        @method _normalizeResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @param {Boolean} isSingle
        @return {Object} JSON-API Document
        @private
      */
      _normalizeResponse: function (store, primaryModelClass, payload, id, requestType, isSingle) {
        var _this = this;

        var documentHash = {
          data: null,
          included: []
        };

        var meta = this.extractMeta(store, primaryModelClass, payload);
        if (meta) {
          Ember.assert("The `meta` returned from `extractMeta` has to be an object, not \"" + Ember.typeOf(meta) + "\".", Ember.typeOf(meta) === "object");
          documentHash.meta = meta;
        }

        if (isSingle) {
          var _normalize = this.normalize(primaryModelClass, payload);

          var data = _normalize.data;

          documentHash.data = data;
        } else {
          documentHash.data = payload.map(function (item) {
            var _normalize2 = _this.normalize(primaryModelClass, item);

            var data = _normalize2.data;

            return data;
          });
        }

        return documentHash;
      },

      /**
        Normalizes a part of the JSON payload returned by
        the server. You should override this method, munge the hash
        and call super if you have generic normalization to do.
         It takes the type of the record that is being normalized
        (as a DS.Model class), the property where the hash was
        originally found, and the hash to normalize.
         You can use this method, for example, to normalize underscored keys to camelized
        or other general-purpose normalizations.
         Example
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          normalize: function(typeClass, hash) {
            var fields = Ember.get(typeClass, 'fields');
            fields.forEach(function(field) {
              var payloadField = Ember.String.underscore(field);
              if (field === payloadField) { return; }
               hash[field] = hash[payloadField];
              delete hash[payloadField];
            });
            return this._super.apply(this, arguments);
          }
        });
        ```
         @method normalize
        @param {DS.Model} typeClass
        @param {Object} hash
        @return {Object}
      */
      normalize: function (typeClass, hash) {
        if (this.get("isNewSerializerAPI")) {
          return ember$data$lib$serializers$json$serializer$$_newNormalize.apply(this, arguments);
        }

        if (!hash) {
          return hash;
        }

        this.normalizeId(hash);
        this.normalizeAttributes(typeClass, hash);
        this.normalizeRelationships(typeClass, hash);

        this.normalizeUsingDeclaredMapping(typeClass, hash);
        this.applyTransforms(typeClass, hash);
        return hash;
      },

      /*
        Returns the resource's ID.
         @method extractId
        @param {Object} resourceHash
        @return {String}
      */
      extractId: function (resourceHash) {
        var primaryKey = ember$data$lib$serializers$json$serializer$$get(this, "primaryKey");
        var id = resourceHash[primaryKey];
        return ember$data$lib$system$coerce$id$$default(id);
      },

      /*
        Returns the resource's attributes formatted as a JSON-API "attributes object".
         http://jsonapi.org/format/#document-resource-object-attributes
         @method extractId
        @param {Object} resourceHash
        @return {Object}
      */
      extractAttributes: function (modelClass, resourceHash) {
        var attributeKey;
        var attributes = {};

        modelClass.eachAttribute(function (key) {
          attributeKey = this.keyForAttribute(key, "deserialize");
          if (resourceHash.hasOwnProperty(attributeKey)) {
            attributes[key] = resourceHash[attributeKey];
          }
        }, this);

        return attributes;
      },

      /*
        Returns a relationship formatted as a JSON-API "relationship object".
         http://jsonapi.org/format/#document-resource-object-relationships
         @method extractRelationship
        @param {Object} relationshipModelName
        @param {Object} relationshipHash
        @return {Object}
      */
      extractRelationship: function (relationshipModelName, relationshipHash) {
        if (Ember.isNone(relationshipHash)) {
          return null;
        }
        /*
          When `relationshipHash` is an object it usually means that the relationship
          is polymorphic. It could however also be embedded resources that the
          EmbeddedRecordsMixin has be able to process.
        */
        if (Ember.typeOf(relationshipHash) === "object") {
          if (relationshipHash.id) {
            relationshipHash.id = ember$data$lib$system$coerce$id$$default(relationshipHash.id);
          }
          if (relationshipHash.type) {
            relationshipHash.type = this.modelNameFromPayloadKey(relationshipHash.type);
          }
          return relationshipHash;
        }
        return { id: ember$data$lib$system$coerce$id$$default(relationshipHash), type: relationshipModelName };
      },

      /*
        Returns the resource's relationships formatted as a JSON-API "relationships object".
         http://jsonapi.org/format/#document-resource-object-relationships
         @method extractRelationships
        @param {Object} modelClass
        @param {Object} resourceHash
        @return {Object}
      */
      extractRelationships: function (modelClass, resourceHash) {
        var relationships = {};

        modelClass.eachRelationship(function (key, relationshipMeta) {
          var relationship = null;
          var relationshipKey = this.keyForRelationship(key, relationshipMeta.kind, "deserialize");
          if (resourceHash.hasOwnProperty(relationshipKey)) {
            var data = null;
            var relationshipHash = resourceHash[relationshipKey];
            if (relationshipMeta.kind === "belongsTo") {
              data = this.extractRelationship(relationshipMeta.type, relationshipHash);
            } else if (relationshipMeta.kind === "hasMany") {
              data = Ember.A(relationshipHash).map(function (item) {
                return this.extractRelationship(relationshipMeta.type, item);
              }, this);
            }
            relationship = { data: data };
          }

          var linkKey = this.keyForLink(key, relationshipMeta.kind);
          if (resourceHash.links && resourceHash.links.hasOwnProperty(linkKey)) {
            var related = resourceHash.links[linkKey];
            relationship = relationship || {};
            relationship.links = { related: related };
          }

          if (relationship) {
            relationships[key] = relationship;
          }
        }, this);

        return relationships;
      },

      /**
        @method modelNameFromPayloadKey
        @param {String} key
        @return {String} the model's modelName
      */
      modelNameFromPayloadKey: function (key) {
        return ember$data$lib$system$normalize$model$name$$default(key);
      },

      /**
        You can use this method to normalize all payloads, regardless of whether they
        represent single records or an array.
         For example, you might want to remove some extraneous data from the payload:
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          normalizePayload: function(payload) {
            delete payload.version;
            delete payload.status;
            return payload;
          }
        });
        ```
         @method normalizePayload
        @param {Object} payload
        @return {Object} the normalized payload
      */
      normalizePayload: function (payload) {
        return payload;
      },

      /**
        @method normalizeAttributes
        @private
      */
      normalizeAttributes: function (typeClass, hash) {
        var payloadKey;

        if (this.keyForAttribute) {
          typeClass.eachAttribute(function (key) {
            payloadKey = this.keyForAttribute(key, "deserialize");
            if (key === payloadKey) {
              return;
            }
            if (!hash.hasOwnProperty(payloadKey)) {
              return;
            }

            hash[key] = hash[payloadKey];
            delete hash[payloadKey];
          }, this);
        }
      },

      /**
        @method normalizeRelationships
        @private
      */
      normalizeRelationships: function (typeClass, hash) {
        var payloadKey;

        if (this.keyForRelationship) {
          typeClass.eachRelationship(function (key, relationship) {
            payloadKey = this.keyForRelationship(key, relationship.kind, "deserialize");
            if (key === payloadKey) {
              return;
            }
            if (!hash.hasOwnProperty(payloadKey)) {
              return;
            }

            hash[key] = hash[payloadKey];
            delete hash[payloadKey];
          }, this);
        }
      },

      /**
        @method normalizeUsingDeclaredMapping
        @private
      */
      normalizeUsingDeclaredMapping: function (typeClass, hash) {
        var attrs = ember$data$lib$serializers$json$serializer$$get(this, "attrs");
        var payloadKey, key;

        if (attrs) {
          for (key in attrs) {
            payloadKey = this._getMappedKey(key);
            if (!hash.hasOwnProperty(payloadKey)) {
              continue;
            }

            if (payloadKey !== key) {
              hash[key] = hash[payloadKey];
              delete hash[payloadKey];
            }
          }
        }
      },

      /**
        @method normalizeId
        @private
      */
      normalizeId: function (hash) {
        var primaryKey = ember$data$lib$serializers$json$serializer$$get(this, "primaryKey");

        if (primaryKey === "id") {
          return;
        }

        hash.id = hash[primaryKey];
        delete hash[primaryKey];
      },

      /**
        @method normalizeErrors
        @private
      */
      normalizeErrors: function (typeClass, hash) {
        this.normalizeId(hash);
        this.normalizeAttributes(typeClass, hash);
        this.normalizeRelationships(typeClass, hash);
        this.normalizeUsingDeclaredMapping(typeClass, hash);
      },

      /**
        Looks up the property key that was set by the custom `attr` mapping
        passed to the serializer.
         @method _getMappedKey
        @private
        @param {String} key
        @return {String} key
      */
      _getMappedKey: function (key) {
        var attrs = ember$data$lib$serializers$json$serializer$$get(this, "attrs");
        var mappedKey;
        if (attrs && attrs[key]) {
          mappedKey = attrs[key];
          //We need to account for both the { title: 'post_title' } and
          //{ title: { key: 'post_title' }} forms
          if (mappedKey.key) {
            mappedKey = mappedKey.key;
          }
          if (typeof mappedKey === "string") {
            key = mappedKey;
          }
        }

        return key;
      },

      /**
        Check attrs.key.serialize property to inform if the `key`
        can be serialized
         @method _canSerialize
        @private
        @param {String} key
        @return {boolean} true if the key can be serialized
      */
      _canSerialize: function (key) {
        var attrs = ember$data$lib$serializers$json$serializer$$get(this, "attrs");

        return !attrs || !attrs[key] || attrs[key].serialize !== false;
      },

      /**
        When attrs.key.serialize is set to true then
        it takes priority over the other checks and the related
        attribute/relationship will be serialized
         @method _mustSerialize
        @private
        @param {String} key
        @return {boolean} true if the key must be serialized
      */
      _mustSerialize: function (key) {
        var attrs = ember$data$lib$serializers$json$serializer$$get(this, "attrs");

        return attrs && attrs[key] && attrs[key].serialize === true;
      },

      /**
        Check if the given hasMany relationship should be serialized
         @method _shouldSerializeHasMany
        @private
        @param {DS.Snapshot} snapshot
        @param {String} key
        @param {String} relationshipType
        @return {boolean} true if the hasMany relationship should be serialized
      */
      _shouldSerializeHasMany: function (snapshot, key, relationship) {
        var relationshipType = snapshot.type.determineRelationshipType(relationship, this.store);
        if (this._mustSerialize(key)) {
          return true;
        }
        return this._canSerialize(key) && (relationshipType === "manyToNone" || relationshipType === "manyToMany");
      },

      // SERIALIZE
      /**
        Called when a record is saved in order to convert the
        record into JSON.
         By default, it creates a JSON object with a key for
        each attribute and belongsTo relationship.
         For example, consider this model:
         ```app/models/comment.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          title: DS.attr(),
          body: DS.attr(),
           author: DS.belongsTo('user')
        });
        ```
         The default serialization would create a JSON object like:
         ```javascript
        {
          "title": "Rails is unagi",
          "body": "Rails? Omakase? O_O",
          "author": 12
        }
        ```
         By default, attributes are passed through as-is, unless
        you specified an attribute type (`DS.attr('date')`). If
        you specify a transform, the JavaScript value will be
        serialized when inserted into the JSON hash.
         By default, belongs-to relationships are converted into
        IDs when inserted into the JSON hash.
         ## IDs
         `serialize` takes an options hash with a single option:
        `includeId`. If this option is `true`, `serialize` will,
        by default include the ID in the JSON object it builds.
         The adapter passes in `includeId: true` when serializing
        a record for `createRecord`, but not for `updateRecord`.
         ## Customization
         Your server may expect a different JSON format than the
        built-in serialization format.
         In that case, you can implement `serialize` yourself and
        return a JSON hash of your choosing.
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          serialize: function(snapshot, options) {
            var json = {
              POST_TTL: snapshot.attr('title'),
              POST_BDY: snapshot.attr('body'),
              POST_CMS: snapshot.hasMany('comments', { ids: true })
            }
             if (options.includeId) {
              json.POST_ID_ = snapshot.id;
            }
             return json;
          }
        });
        ```
         ## Customizing an App-Wide Serializer
         If you want to define a serializer for your entire
        application, you'll probably want to use `eachAttribute`
        and `eachRelationship` on the record.
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          serialize: function(snapshot, options) {
            var json = {};
             snapshot.eachAttribute(function(name) {
              json[serverAttributeName(name)] = snapshot.attr(name);
            })
             snapshot.eachRelationship(function(name, relationship) {
              if (relationship.kind === 'hasMany') {
                json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
              }
            });
             if (options.includeId) {
              json.ID_ = snapshot.id;
            }
             return json;
          }
        });
         function serverAttributeName(attribute) {
          return attribute.underscore().toUpperCase();
        }
         function serverHasManyName(name) {
          return serverAttributeName(name.singularize()) + "_IDS";
        }
        ```
         This serializer will generate JSON that looks like this:
         ```javascript
        {
          "TITLE": "Rails is omakase",
          "BODY": "Yep. Omakase.",
          "COMMENT_IDS": [ 1, 2, 3 ]
        }
        ```
         ## Tweaking the Default JSON
         If you just want to do some small tweaks on the default JSON,
        you can call super first and make the tweaks on the returned
        JSON.
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          serialize: function(snapshot, options) {
            var json = this._super.apply(this, arguments);
             json.subject = json.title;
            delete json.title;
             return json;
          }
        });
        ```
         @method serialize
        @param {DS.Snapshot} snapshot
        @param {Object} options
        @return {Object} json
      */
      serialize: function (snapshot, options) {
        var json = {};

        if (options && options.includeId) {
          var id = snapshot.id;

          if (id) {
            json[ember$data$lib$serializers$json$serializer$$get(this, "primaryKey")] = id;
          }
        }

        snapshot.eachAttribute(function (key, attribute) {
          this.serializeAttribute(snapshot, json, key, attribute);
        }, this);

        snapshot.eachRelationship(function (key, relationship) {
          if (relationship.kind === "belongsTo") {
            this.serializeBelongsTo(snapshot, json, relationship);
          } else if (relationship.kind === "hasMany") {
            this.serializeHasMany(snapshot, json, relationship);
          }
        }, this);

        return json;
      },

      /**
        You can use this method to customize how a serialized record is added to the complete
        JSON hash to be sent to the server. By default the JSON Serializer does not namespace
        the payload and just sends the raw serialized JSON object.
        If your server expects namespaced keys, you should consider using the RESTSerializer.
        Otherwise you can override this method to customize how the record is added to the hash.
         For example, your server may expect underscored root objects.
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          serializeIntoHash: function(data, type, snapshot, options) {
            var root = Ember.String.decamelize(type.modelName);
            data[root] = this.serialize(snapshot, options);
          }
        });
        ```
         @method serializeIntoHash
        @param {Object} hash
        @param {DS.Model} typeClass
        @param {DS.Snapshot} snapshot
        @param {Object} options
      */
      serializeIntoHash: function (hash, typeClass, snapshot, options) {
        ember$data$lib$serializers$json$serializer$$merge(hash, this.serialize(snapshot, options));
      },

      /**
       `serializeAttribute` can be used to customize how `DS.attr`
       properties are serialized
        For example if you wanted to ensure all your attributes were always
       serialized as properties on an `attributes` object you could
       write:
        ```app/serializers/application.js
       import DS from 'ember-data';
        export default DS.JSONSerializer.extend({
         serializeAttribute: function(snapshot, json, key, attributes) {
           json.attributes = json.attributes || {};
           this._super(snapshot, json.attributes, key, attributes);
         }
       });
       ```
        @method serializeAttribute
       @param {DS.Snapshot} snapshot
       @param {Object} json
       @param {String} key
       @param {Object} attribute
      */
      serializeAttribute: function (snapshot, json, key, attribute) {
        var type = attribute.type;

        if (this._canSerialize(key)) {
          var value = snapshot.attr(key);
          if (type) {
            var transform = this.transformFor(type);
            value = transform.serialize(value);
          }

          // if provided, use the mapping provided by `attrs` in
          // the serializer
          var payloadKey = this._getMappedKey(key);

          if (payloadKey === key && this.keyForAttribute) {
            payloadKey = this.keyForAttribute(key, "serialize");
          }

          json[payloadKey] = value;
        }
      },

      /**
       `serializeBelongsTo` can be used to customize how `DS.belongsTo`
       properties are serialized.
        Example
        ```app/serializers/post.js
       import DS from 'ember-data';
        export default DS.JSONSerializer.extend({
         serializeBelongsTo: function(snapshot, json, relationship) {
           var key = relationship.key;
            var belongsTo = snapshot.belongsTo(key);
            key = this.keyForRelationship ? this.keyForRelationship(key, "belongsTo", "serialize") : key;
            json[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();
         }
       });
       ```
        @method serializeBelongsTo
       @param {DS.Snapshot} snapshot
       @param {Object} json
       @param {Object} relationship
      */
      serializeBelongsTo: function (snapshot, json, relationship) {
        var key = relationship.key;

        if (this._canSerialize(key)) {
          var belongsToId = snapshot.belongsTo(key, { id: true });

          // if provided, use the mapping provided by `attrs` in
          // the serializer
          var payloadKey = this._getMappedKey(key);
          if (payloadKey === key && this.keyForRelationship) {
            payloadKey = this.keyForRelationship(key, "belongsTo", "serialize");
          }

          //Need to check whether the id is there for new&async records
          if (ember$data$lib$serializers$json$serializer$$isNone(belongsToId)) {
            json[payloadKey] = null;
          } else {
            json[payloadKey] = belongsToId;
          }

          if (relationship.options.polymorphic) {
            this.serializePolymorphicType(snapshot, json, relationship);
          }
        }
      },

      /**
       `serializeHasMany` can be used to customize how `DS.hasMany`
       properties are serialized.
        Example
        ```app/serializers/post.js
       import DS from 'ember-data';
        export default DS.JSONSerializer.extend({
         serializeHasMany: function(snapshot, json, relationship) {
           var key = relationship.key;
           if (key === 'comments') {
             return;
           } else {
             this._super.apply(this, arguments);
           }
         }
       });
       ```
        @method serializeHasMany
       @param {DS.Snapshot} snapshot
       @param {Object} json
       @param {Object} relationship
      */
      serializeHasMany: function (snapshot, json, relationship) {
        var key = relationship.key;

        if (this._shouldSerializeHasMany(snapshot, key, relationship)) {
          var payloadKey;

          // if provided, use the mapping provided by `attrs` in
          // the serializer
          payloadKey = this._getMappedKey(key);
          if (payloadKey === key && this.keyForRelationship) {
            payloadKey = this.keyForRelationship(key, "hasMany", "serialize");
          }
          json[payloadKey] = snapshot.hasMany(key, { ids: true });
          // TODO support for polymorphic manyToNone and manyToMany relationships
        }
      },

      /**
        You can use this method to customize how polymorphic objects are
        serialized. Objects are considered to be polymorphic if
        `{ polymorphic: true }` is pass as the second argument to the
        `DS.belongsTo` function.
         Example
         ```app/serializers/comment.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          serializePolymorphicType: function(snapshot, json, relationship) {
            var key = relationship.key,
                belongsTo = snapshot.belongsTo(key);
            key = this.keyForAttribute ? this.keyForAttribute(key, "serialize") : key;
             if (Ember.isNone(belongsTo)) {
              json[key + "_type"] = null;
            } else {
              json[key + "_type"] = belongsTo.modelName;
            }
          }
        });
        ```
         @method serializePolymorphicType
        @param {DS.Snapshot} snapshot
        @param {Object} json
        @param {Object} relationship
      */
      serializePolymorphicType: Ember.K,

      // EXTRACT

      /**
        The `extract` method is used to deserialize payload data from the
        server. By default the `JSONSerializer` does not push the records
        into the store. However records that subclass `JSONSerializer`
        such as the `RESTSerializer` may push records into the store as
        part of the extract call.
         This method delegates to a more specific extract method based on
        the `requestType`.
         To override this method with a custom one, make sure to call
        `return this._super(store, type, payload, id, requestType)` with your
        pre-processed data.
         Here's an example of using `extract` manually:
         ```javascript
        socket.on('message', function(message) {
          var data = message.data;
          var typeClass = store.modelFor(message.modelName);
          var serializer = store.serializerFor(typeClass.modelName);
          var record = serializer.extract(store, typeClass, data, data.id, 'single');
           store.push(message.modelName, record);
        });
        ```
         @method extract
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} json The deserialized payload
      */
      extract: function (store, typeClass, payload, id, requestType) {
        this.extractMeta(store, typeClass.modelName, payload);

        var specificExtract = "extract" + requestType.charAt(0).toUpperCase() + requestType.substr(1);
        return this[specificExtract](store, typeClass, payload, id, requestType);
      },

      /**
        `extractFindAll` is a hook into the extract method used when a
        call is made to `DS.Store#findAll`. By default this method is an
        alias for [extractArray](#method_extractArray).
         @method extractFindAll
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Array} array An array of deserialized objects
      */
      extractFindAll: function (store, typeClass, payload, id, requestType) {
        return this.extractArray(store, typeClass, payload, id, requestType);
      },
      /**
        `extractFindQuery` is a hook into the extract method used when a
        call is made to `DS.Store#findQuery`. By default this method is an
        alias for [extractArray](#method_extractArray).
         @method extractFindQuery
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Array} array An array of deserialized objects
      */
      extractFindQuery: function (store, typeClass, payload, id, requestType) {
        return this.extractArray(store, typeClass, payload, id, requestType);
      },
      /**
        TODO: remove this in a couple of days
         `extractQueryRecord` is a hook into the extract method used when a
        call is made to `DS.Store#queryRecord`. By default this method is an
        alias for [extractSingle](#method_extractSingle).
         @method extractQueryRecord
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} object A hash of deserialized object
      */
      extractQueryRecord: function (store, typeClass, payload, id, requestType) {
        return this.extractSingle(store, typeClass, payload, id, requestType);
      },
      /**
        `extractFindMany` is a hook into the extract method used when a
        call is made to `DS.Store#findMany`. By default this method is
        alias for [extractArray](#method_extractArray).
         @method extractFindMany
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Array} array An array of deserialized objects
      */
      extractFindMany: function (store, typeClass, payload, id, requestType) {
        return this.extractArray(store, typeClass, payload, id, requestType);
      },
      /**
        `extractFindHasMany` is a hook into the extract method used when a
        call is made to `DS.Store#findHasMany`. By default this method is
        alias for [extractArray](#method_extractArray).
         @method extractFindHasMany
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Array} array An array of deserialized objects
      */
      extractFindHasMany: function (store, typeClass, payload, id, requestType) {
        return this.extractArray(store, typeClass, payload, id, requestType);
      },

      /**
        `extractCreateRecord` is a hook into the extract method used when a
        call is made to `DS.Model#save` and the record is new. By default
        this method is alias for [extractSave](#method_extractSave).
         @method extractCreateRecord
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} json The deserialized payload
      */
      extractCreateRecord: function (store, typeClass, payload, id, requestType) {
        return this.extractSave(store, typeClass, payload, id, requestType);
      },
      /**
        `extractUpdateRecord` is a hook into the extract method used when
        a call is made to `DS.Model#save` and the record has been updated.
        By default this method is alias for [extractSave](#method_extractSave).
         @method extractUpdateRecord
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} json The deserialized payload
      */
      extractUpdateRecord: function (store, typeClass, payload, id, requestType) {
        return this.extractSave(store, typeClass, payload, id, requestType);
      },
      /**
        `extractDeleteRecord` is a hook into the extract method used when
        a call is made to `DS.Model#save` and the record has been deleted.
        By default this method is alias for [extractSave](#method_extractSave).
         @method extractDeleteRecord
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} json The deserialized payload
      */
      extractDeleteRecord: function (store, typeClass, payload, id, requestType) {
        return this.extractSave(store, typeClass, payload, id, requestType);
      },

      /**
        `extractFind` is a hook into the extract method used when
        a call is made to `DS.Store#find`. By default this method is
        alias for [extractSingle](#method_extractSingle).
         @method extractFind
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} json The deserialized payload
      */
      extractFind: function (store, typeClass, payload, id, requestType) {
        return this.extractSingle(store, typeClass, payload, id, requestType);
      },

      /**
        `extractFindBelongsTo` is a hook into the extract method used when
        a call is made to `DS.Store#findBelongsTo`. By default this method is
        alias for [extractSingle](#method_extractSingle).
         @method extractFindBelongsTo
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} json The deserialized payload
      */
      extractFindBelongsTo: function (store, typeClass, payload, id, requestType) {
        return this.extractSingle(store, typeClass, payload, id, requestType);
      },
      /**
        `extractSave` is a hook into the extract method used when a call
        is made to `DS.Model#save`. By default this method is alias
        for [extractSingle](#method_extractSingle).
         @method extractSave
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} json The deserialized payload
      */
      extractSave: function (store, typeClass, payload, id, requestType) {
        return this.extractSingle(store, typeClass, payload, id, requestType);
      },

      /**
        `extractSingle` is used to deserialize a single record returned
        from the adapter.
         Example
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          extractSingle: function(store, typeClass, payload) {
            payload.comments = payload._embedded.comment;
            delete payload._embedded;
             return this._super(store, typeClass, payload);
          },
        });
        ```
         @method extractSingle
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Object} json The deserialized payload
      */
      extractSingle: function (store, typeClass, payload, id, requestType) {
        var normalizedPayload = this.normalizePayload(payload);
        return this.normalize(typeClass, normalizedPayload);
      },

      /**
        `extractArray` is used to deserialize an array of records
        returned from the adapter.
         Example
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          extractArray: function(store, typeClass, payload) {
            return payload.map(function(json) {
              return this.extractSingle(store, typeClass, json);
            }, this);
          }
        });
        ```
         @method extractArray
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} arrayPayload
        @param {(String|Number)} id
        @param {String} requestType
        @return {Array} array An array of deserialized objects
      */
      extractArray: function (store, typeClass, arrayPayload, id, requestType) {
        var normalizedPayload = this.normalizePayload(arrayPayload);
        var serializer = this;

        return ember$data$lib$serializers$json$serializer$$map.call(normalizedPayload, function (singlePayload) {
          return serializer.normalize(typeClass, singlePayload);
        });
      },

      /**
        `extractMeta` is used to deserialize any meta information in the
        adapter payload. By default Ember Data expects meta information to
        be located on the `meta` property of the payload object.
         Example
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          extractMeta: function(store, typeClass, payload) {
            if (payload && payload._pagination) {
              store.setMetadataFor(typeClass, payload._pagination);
              delete payload._pagination;
            }
          }
        });
        ```
         @method extractMeta
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
      */
      extractMeta: function (store, typeClass, payload) {
        if (this.get("isNewSerializerAPI")) {
          return ember$data$lib$serializers$json$serializer$$_newExtractMeta.apply(this, arguments);
        }

        if (payload && payload.meta) {
          store.setMetadataFor(typeClass, payload.meta);
          delete payload.meta;
        }
      },

      /**
        `extractErrors` is used to extract model errors when a call is made
        to `DS.Model#save` which fails with an `InvalidError`. By default
        Ember Data expects error information to be located on the `errors`
        property of the payload object.
         Example
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          extractErrors: function(store, typeClass, payload, id) {
            if (payload && typeof payload === 'object' && payload._problems) {
              payload = payload._problems;
              this.normalizeErrors(typeClass, payload);
            }
            return payload;
          }
        });
        ```
         @method extractErrors
        @param {DS.Store} store
        @param {DS.Model} typeClass
        @param {Object} payload
        @param {(String|Number)} id
        @return {Object} json The deserialized errors
      */
      extractErrors: function (store, typeClass, payload, id) {
        if (payload && typeof payload === "object" && payload.errors) {
          payload = ember$data$lib$adapters$errors$$errorsArrayToHash(payload.errors);
          this.normalizeErrors(typeClass, payload);
        }

        return payload;
      },

      /**
       `keyForAttribute` can be used to define rules for how to convert an
       attribute name in your model to a key in your JSON.
        Example
        ```app/serializers/application.js
       import DS from 'ember-data';
        export default DS.RESTSerializer.extend({
         keyForAttribute: function(attr, method) {
           return Ember.String.underscore(attr).toUpperCase();
         }
       });
       ```
        @method keyForAttribute
       @param {String} key
       @param {String} method
       @return {String} normalized key
      */
      keyForAttribute: function (key, method) {
        return key;
      },

      /**
       `keyForRelationship` can be used to define a custom key when
       serializing and deserializing relationship properties. By default
       `JSONSerializer` does not provide an implementation of this method.
        Example
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          keyForRelationship: function(key, relationship, method) {
            return 'rel_' + Ember.String.underscore(key);
          }
        });
        ```
        @method keyForRelationship
       @param {String} key
       @param {String} typeClass
       @param {String} method
       @return {String} normalized key
      */
      keyForRelationship: function (key, typeClass, method) {
        return key;
      },

      /**
       `keyForLink` can be used to define a custom key when deserializing link
       properties.
        @method keyForLink
       @param {String} key
       @param {String} kind `belongsTo` or `hasMany`
       @return {String} normalized key
      */
      keyForLink: function (key, kind) {
        return key;
      },

      // HELPERS

      /**
       @method transformFor
       @private
       @param {String} attributeType
       @param {Boolean} skipAssertion
       @return {DS.Transform} transform
      */
      transformFor: function (attributeType, skipAssertion) {
        var transform = this.container.lookup("transform:" + attributeType);
        Ember.assert("Unable to find transform for '" + attributeType + "'", skipAssertion || !!transform);
        return transform;
      }
    });

    /*
      @method _newNormalize
      @param {DS.Model} modelClass
      @param {Object} resourceHash
      @return {Object}
      @private
    */
    function ember$data$lib$serializers$json$serializer$$_newNormalize(modelClass, resourceHash) {
      var data = null;

      if (resourceHash) {
        this.normalizeUsingDeclaredMapping(modelClass, resourceHash);

        data = {
          id: this.extractId(resourceHash),
          type: modelClass.modelName,
          attributes: this.extractAttributes(modelClass, resourceHash),
          relationships: this.extractRelationships(modelClass, resourceHash)
        };

        this.applyTransforms(modelClass, data.attributes);
      }

      return { data: data };
    }

    /*
      @method _newExtractMeta
      @param {DS.Store} store
      @param {DS.Model} modelClass
      @param {Object} payload
      @return {Object}
      @private
    */
    function ember$data$lib$serializers$json$serializer$$_newExtractMeta(store, modelClass, payload) {
      if (payload && payload.hasOwnProperty("meta")) {
        var meta = payload.meta;
        delete payload.meta;
        return meta;
      }
    }

    var ember$data$lib$serializers$json$serializer$$default = ember$data$lib$serializers$json$serializer$$JSONSerializer;
    var ember$data$lib$system$promise$proxies$$Promise = Ember.RSVP.Promise;
    var ember$data$lib$system$promise$proxies$$get = Ember.get;

    /**
      A `PromiseArray` is an object that acts like both an `Ember.Array`
      and a promise. When the promise is resolved the resulting value
      will be set to the `PromiseArray`'s `content` property. This makes
      it easy to create data bindings with the `PromiseArray` that will be
      updated when the promise resolves.

      For more information see the [Ember.PromiseProxyMixin
      documentation](/api/classes/Ember.PromiseProxyMixin.html).

      Example

      ```javascript
      var promiseArray = DS.PromiseArray.create({
        promise: $.getJSON('/some/remote/data.json')
      });

      promiseArray.get('length'); // 0

      promiseArray.then(function() {
        promiseArray.get('length'); // 100
      });
      ```

      @class PromiseArray
      @namespace DS
      @extends Ember.ArrayProxy
      @uses Ember.PromiseProxyMixin
    */
    var ember$data$lib$system$promise$proxies$$PromiseArray = Ember.ArrayProxy.extend(Ember.PromiseProxyMixin);

    /**
      A `PromiseObject` is an object that acts like both an `Ember.Object`
      and a promise. When the promise is resolved, then the resulting value
      will be set to the `PromiseObject`'s `content` property. This makes
      it easy to create data bindings with the `PromiseObject` that will
      be updated when the promise resolves.

      For more information see the [Ember.PromiseProxyMixin
      documentation](/api/classes/Ember.PromiseProxyMixin.html).

      Example

      ```javascript
      var promiseObject = DS.PromiseObject.create({
        promise: $.getJSON('/some/remote/data.json')
      });

      promiseObject.get('name'); // null

      promiseObject.then(function() {
        promiseObject.get('name'); // 'Tomster'
      });
      ```

      @class PromiseObject
      @namespace DS
      @extends Ember.ObjectProxy
      @uses Ember.PromiseProxyMixin
    */
    var ember$data$lib$system$promise$proxies$$PromiseObject = Ember.ObjectProxy.extend(Ember.PromiseProxyMixin);

    var ember$data$lib$system$promise$proxies$$promiseObject = function (promise, label) {
      return ember$data$lib$system$promise$proxies$$PromiseObject.create({
        promise: ember$data$lib$system$promise$proxies$$Promise.resolve(promise, label)
      });
    };

    var ember$data$lib$system$promise$proxies$$promiseArray = function (promise, label) {
      return ember$data$lib$system$promise$proxies$$PromiseArray.create({
        promise: ember$data$lib$system$promise$proxies$$Promise.resolve(promise, label)
      });
    };

    /**
      A PromiseManyArray is a PromiseArray that also proxies certain method calls
      to the underlying manyArray.
      Right now we proxy:

        * `reload()`
        * `createRecord()`
        * `on()`
        * `one()`
        * `trigger()`
        * `off()`
        * `has()`

      @class PromiseManyArray
      @namespace DS
      @extends Ember.ArrayProxy
    */

    function ember$data$lib$system$promise$proxies$$proxyToContent(method) {
      return function () {
        var content = ember$data$lib$system$promise$proxies$$get(this, 'content');
        return content[method].apply(content, arguments);
      };
    }

    var ember$data$lib$system$promise$proxies$$PromiseManyArray = ember$data$lib$system$promise$proxies$$PromiseArray.extend({
      reload: function () {
        //I don't think this should ever happen right now, but worth guarding if we refactor the async relationships
        Ember.assert('You are trying to reload an async manyArray before it has been created', ember$data$lib$system$promise$proxies$$get(this, 'content'));
        return ember$data$lib$system$promise$proxies$$PromiseManyArray.create({
          promise: ember$data$lib$system$promise$proxies$$get(this, 'content').reload()
        });
      },

      createRecord: ember$data$lib$system$promise$proxies$$proxyToContent('createRecord'),

      on: ember$data$lib$system$promise$proxies$$proxyToContent('on'),

      one: ember$data$lib$system$promise$proxies$$proxyToContent('one'),

      trigger: ember$data$lib$system$promise$proxies$$proxyToContent('trigger'),

      off: ember$data$lib$system$promise$proxies$$proxyToContent('off'),

      has: ember$data$lib$system$promise$proxies$$proxyToContent('has')
    });

    var ember$data$lib$system$promise$proxies$$promiseManyArray = function (promise, label) {
      return ember$data$lib$system$promise$proxies$$PromiseManyArray.create({
        promise: ember$data$lib$system$promise$proxies$$Promise.resolve(promise, label)
      });
    };

    var ember$data$lib$system$model$errors$$get = Ember.get;
    var ember$data$lib$system$model$errors$$isEmpty = Ember.isEmpty;
    var ember$data$lib$system$model$errors$$map = Ember.ArrayPolyfills.map;

    var ember$data$lib$system$model$errors$$default = Ember.Object.extend(Ember.Enumerable, Ember.Evented, {
      /**
        Register with target handler
         @method registerHandlers
        @param {Object} target
        @param {Function} becameInvalid
        @param {Function} becameValid
      */
      registerHandlers: function (target, becameInvalid, becameValid) {
        this.on('becameInvalid', target, becameInvalid);
        this.on('becameValid', target, becameValid);
      },

      /**
        @property errorsByAttributeName
        @type {Ember.MapWithDefault}
        @private
      */
      errorsByAttributeName: Ember.computed(function () {
        return ember$data$lib$system$map$$MapWithDefault.create({
          defaultValue: function () {
            return Ember.A();
          }
        });
      }),

      /**
        Returns errors for a given attribute
         ```javascript
        var user = store.createRecord('user', {
          username: 'tomster',
          email: 'invalidEmail'
        });
        user.save().catch(function(){
          user.get('errors').errorsFor('email'); // returns:
          // [{attribute: "email", message: "Doesn't look like a valid email."}]
        });
        ```
         @method errorsFor
        @param {String} attribute
        @return {Array}
      */
      errorsFor: function (attribute) {
        return ember$data$lib$system$model$errors$$get(this, 'errorsByAttributeName').get(attribute);
      },

      /**
        An array containing all of the error messages for this
        record. This is useful for displaying all errors to the user.
         ```handlebars
        {{#each model.errors.messages as |message|}}
          <div class="error">
            {{message}}
          </div>
        {{/each}}
        ```
         @property messages
        @type {Array}
      */
      messages: Ember.computed.mapBy('content', 'message'),

      /**
        @property content
        @type {Array}
        @private
      */
      content: Ember.computed(function () {
        return Ember.A();
      }),

      /**
        @method unknownProperty
        @private
      */
      unknownProperty: function (attribute) {
        var errors = this.errorsFor(attribute);
        if (ember$data$lib$system$model$errors$$isEmpty(errors)) {
          return null;
        }
        return errors;
      },

      /**
        @method nextObject
        @private
      */
      nextObject: function (index, previousObject, context) {
        return ember$data$lib$system$model$errors$$get(this, 'content').objectAt(index);
      },

      /**
        Total number of errors.
         @property length
        @type {Number}
        @readOnly
      */
      length: Ember.computed.oneWay('content.length').readOnly(),

      /**
        @property isEmpty
        @type {Boolean}
        @readOnly
      */
      isEmpty: Ember.computed.not('length').readOnly(),

      /**
        Adds error messages to a given attribute and sends
        `becameInvalid` event to the record.
         Example:
         ```javascript
        if (!user.get('username') {
          user.get('errors').add('username', 'This field is required');
        }
        ```
         @method add
        @param {String} attribute
        @param {(Array|String)} messages
      */
      add: function (attribute, messages) {
        var wasEmpty = ember$data$lib$system$model$errors$$get(this, 'isEmpty');

        messages = this._findOrCreateMessages(attribute, messages);
        ember$data$lib$system$model$errors$$get(this, 'content').addObjects(messages);
        ember$data$lib$system$model$errors$$get(this, 'errorsByAttributeName').get(attribute).addObjects(messages);

        this.notifyPropertyChange(attribute);
        this.enumerableContentDidChange();

        if (wasEmpty && !ember$data$lib$system$model$errors$$get(this, 'isEmpty')) {
          this.trigger('becameInvalid');
        }
      },

      /**
        @method _findOrCreateMessages
        @private
      */
      _findOrCreateMessages: function (attribute, messages) {
        var errors = this.errorsFor(attribute);

        return ember$data$lib$system$model$errors$$map.call(Ember.makeArray(messages), function (message) {
          return errors.findBy('message', message) || {
            attribute: attribute,
            message: message
          };
        });
      },

      /**
        Removes all error messages from the given attribute and sends
        `becameValid` event to the record if there no more errors left.
         Example:
         ```app/models/user.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          email: DS.attr('string'),
          twoFactorAuth: DS.attr('boolean'),
          phone: DS.attr('string')
        });
        ```
         ```app/routes/user/edit.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          actions: {
            save: function(user) {
               if (!user.get('twoFactorAuth')) {
                 user.get('errors').remove('phone');
               }
               user.save();
             }
          }
        });
        ```
         @method remove
        @param {String} attribute
      */
      remove: function (attribute) {
        if (ember$data$lib$system$model$errors$$get(this, 'isEmpty')) {
          return;
        }

        var content = ember$data$lib$system$model$errors$$get(this, 'content').rejectBy('attribute', attribute);
        ember$data$lib$system$model$errors$$get(this, 'content').setObjects(content);
        ember$data$lib$system$model$errors$$get(this, 'errorsByAttributeName')["delete"](attribute);

        this.notifyPropertyChange(attribute);
        this.enumerableContentDidChange();

        if (ember$data$lib$system$model$errors$$get(this, 'isEmpty')) {
          this.trigger('becameValid');
        }
      },

      /**
        Removes all error messages and sends `becameValid` event
        to the record.
         Example:
         ```app/routes/user/edit.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          actions: {
            retrySave: function(user) {
               user.get('errors').clear();
               user.save();
             }
          }
        });
        ```
         @method clear
      */
      clear: function () {
        if (ember$data$lib$system$model$errors$$get(this, 'isEmpty')) {
          return;
        }

        ember$data$lib$system$model$errors$$get(this, 'content').clear();
        ember$data$lib$system$model$errors$$get(this, 'errorsByAttributeName').clear();
        this.enumerableContentDidChange();

        this.trigger('becameValid');
      },

      /**
        Checks if there is error messages for the given attribute.
         ```app/routes/user/edit.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          actions: {
            save: function(user) {
               if (user.get('errors').has('email')) {
                 return alert('Please update your email before attempting to save.');
               }
               user.save();
             }
          }
        });
        ```
         @method has
        @param {String} attribute
        @return {Boolean} true if there some errors on given attribute
      */
      has: function (attribute) {
        return !ember$data$lib$system$model$errors$$isEmpty(this.errorsFor(attribute));
      }
    });

    /**
      @module ember-data
    */

    var ember$data$lib$system$model$model$$get = Ember.get;
    var ember$data$lib$system$model$model$$forEach = Ember.ArrayPolyfills.forEach;
    var ember$data$lib$system$model$model$$indexOf = Ember.ArrayPolyfills.indexOf;

    function ember$data$lib$system$model$model$$intersection(array1, array2) {
      var result = [];
      ember$data$lib$system$model$model$$forEach.call(array1, function (element) {
        if (ember$data$lib$system$model$model$$indexOf.call(array2, element) >= 0) {
          result.push(element);
        }
      });

      return result;
    }

    var ember$data$lib$system$model$model$$RESERVED_MODEL_PROPS = ["currentState", "data", "store"];

    var ember$data$lib$system$model$model$$retrieveFromCurrentState = Ember.computed("currentState", function (key) {
      return ember$data$lib$system$model$model$$get(this._internalModel.currentState, key);
    }).readOnly();

    /**

      The model class that all Ember Data records descend from.
      This is the public API of Ember Data models. If you are using Ember Data
      in your application, this is the class you should use.
      If you are working on Ember Data internals, you most likely want to be dealing
      with `InternalModel`

      @class Model
      @namespace DS
      @extends Ember.Object
      @uses Ember.Evented
    */
    var ember$data$lib$system$model$model$$Model = Ember.Object.extend(Ember.Evented, {
      _recordArrays: undefined,
      _relationships: undefined,
      _internalModel: null,

      store: null,

      /**
        If this property is `true` the record is in the `empty`
        state. Empty is the first state all records enter after they have
        been created. Most records created by the store will quickly
        transition to the `loading` state if data needs to be fetched from
        the server or the `created` state if the record is created on the
        client. A record can also enter the empty state if the adapter is
        unable to locate the record.
         @property isEmpty
        @type {Boolean}
        @readOnly
      */
      isEmpty: ember$data$lib$system$model$model$$retrieveFromCurrentState,
      /**
        If this property is `true` the record is in the `loading` state. A
        record enters this state when the store asks the adapter for its
        data. It remains in this state until the adapter provides the
        requested data.
         @property isLoading
        @type {Boolean}
        @readOnly
      */
      isLoading: ember$data$lib$system$model$model$$retrieveFromCurrentState,
      /**
        If this property is `true` the record is in the `loaded` state. A
        record enters this state when its data is populated. Most of a
        record's lifecycle is spent inside substates of the `loaded`
        state.
         Example
         ```javascript
        var record = store.createRecord('model');
        record.get('isLoaded'); // true
         store.find('model', 1).then(function(model) {
          model.get('isLoaded'); // true
        });
        ```
         @property isLoaded
        @type {Boolean}
        @readOnly
      */
      isLoaded: ember$data$lib$system$model$model$$retrieveFromCurrentState,
      /**
        If this property is `true` the record is in the `dirty` state. The
        record has local changes that have not yet been saved by the
        adapter. This includes records that have been created (but not yet
        saved) or deleted.
         Example
         ```javascript
        var record = store.createRecord('model');
        record.get('isDirty'); // true
         store.find('model', 1).then(function(model) {
          model.get('isDirty'); // false
          model.set('foo', 'some value');
          model.get('isDirty'); // true
        });
        ```
         @property isDirty
        @type {Boolean}
        @readOnly
        @deprecated
      */
      isDirty: Ember.computed("currentState.isDirty", function () {
        Ember.deprecate("DS.Model#isDirty has been deprecated please use hasDirtyAttributes instead");
        return this.get("currentState.isDirty");
      }),
      /**
        If this property is `true` the record is in the `dirty` state. The
        record has local changes that have not yet been saved by the
        adapter. This includes records that have been created (but not yet
        saved) or deleted.
         Example
         ```javascript
        var record = store.createRecord('model');
        record.get('hasDirtyAttributes'); // true
         store.find('model', 1).then(function(model) {
          model.get('hasDirtyAttributes'); // false
          model.set('foo', 'some value');
          model.get('hasDirtyAttributes'); // true
        });
        ```
         @property hasDirtyAttributes
        @type {Boolean}
        @readOnly
      */
      hasDirtyAttributes: Ember.computed("currentState.isDirty", function () {
        return this.get("currentState.isDirty");
      }),
      /**
        If this property is `true` the record is in the `saving` state. A
        record enters the saving state when `save` is called, but the
        adapter has not yet acknowledged that the changes have been
        persisted to the backend.
         Example
         ```javascript
        var record = store.createRecord('model');
        record.get('isSaving'); // false
        var promise = record.save();
        record.get('isSaving'); // true
        promise.then(function() {
          record.get('isSaving'); // false
        });
        ```
         @property isSaving
        @type {Boolean}
        @readOnly
      */
      isSaving: ember$data$lib$system$model$model$$retrieveFromCurrentState,
      /**
        If this property is `true` the record is in the `deleted` state
        and has been marked for deletion. When `isDeleted` is true and
        `isDirty` is true, the record is deleted locally but the deletion
        was not yet persisted. When `isSaving` is true, the change is
        in-flight. When both `isDirty` and `isSaving` are false, the
        change has persisted.
         Example
         ```javascript
        var record = store.createRecord('model');
        record.get('isDeleted');    // false
        record.deleteRecord();
         // Locally deleted
        record.get('isDeleted');    // true
        record.get('isDirty');      // true
        record.get('isSaving');     // false
         // Persisting the deletion
        var promise = record.save();
        record.get('isDeleted');    // true
        record.get('isSaving');     // true
         // Deletion Persisted
        promise.then(function() {
          record.get('isDeleted');  // true
          record.get('isSaving');   // false
          record.get('isDirty');    // false
        });
        ```
         @property isDeleted
        @type {Boolean}
        @readOnly
      */
      isDeleted: ember$data$lib$system$model$model$$retrieveFromCurrentState,
      /**
        If this property is `true` the record is in the `new` state. A
        record will be in the `new` state when it has been created on the
        client and the adapter has not yet report that it was successfully
        saved.
         Example
         ```javascript
        var record = store.createRecord('model');
        record.get('isNew'); // true
         record.save().then(function(model) {
          model.get('isNew'); // false
        });
        ```
         @property isNew
        @type {Boolean}
        @readOnly
      */
      isNew: ember$data$lib$system$model$model$$retrieveFromCurrentState,
      /**
        If this property is `true` the record is in the `valid` state.
         A record will be in the `valid` state when the adapter did not report any
        server-side validation failures.
         @property isValid
        @type {Boolean}
        @readOnly
      */
      isValid: ember$data$lib$system$model$model$$retrieveFromCurrentState,
      /**
        If the record is in the dirty state this property will report what
        kind of change has caused it to move into the dirty
        state. Possible values are:
         - `created` The record has been created by the client and not yet saved to the adapter.
        - `updated` The record has been updated by the client and not yet saved to the adapter.
        - `deleted` The record has been deleted by the client and not yet saved to the adapter.
         Example
         ```javascript
        var record = store.createRecord('model');
        record.get('dirtyType'); // 'created'
        ```
         @property dirtyType
        @type {String}
        @readOnly
      */
      dirtyType: ember$data$lib$system$model$model$$retrieveFromCurrentState,

      /**
        If `true` the adapter reported that it was unable to save local
        changes to the backend for any reason other than a server-side
        validation error.
         Example
         ```javascript
        record.get('isError'); // false
        record.set('foo', 'valid value');
        record.save().then(null, function() {
          record.get('isError'); // true
        });
        ```
         @property isError
        @type {Boolean}
        @readOnly
      */
      isError: false,

      /**
        If `true` the store is attempting to reload the record form the adapter.
         Example
         ```javascript
        record.get('isReloading'); // false
        record.reload();
        record.get('isReloading'); // true
        ```
         @property isReloading
        @type {Boolean}
        @readOnly
      */
      isReloading: false,

      /**
        All ember models have an id property. This is an identifier
        managed by an external source. These are always coerced to be
        strings before being used internally. Note when declaring the
        attributes for a model it is an error to declare an id
        attribute.
         ```javascript
        var record = store.createRecord('model');
        record.get('id'); // null
         store.find('model', 1).then(function(model) {
          model.get('id'); // '1'
        });
        ```
         @property id
        @type {String}
      */
      id: null,

      /**
        @property currentState
        @private
        @type {Object}
      */

      /**
        When the record is in the `invalid` state this object will contain
        any errors returned by the adapter. When present the errors hash
        contains keys corresponding to the invalid property names
        and values which are arrays of Javascript objects with two keys:
         - `message` A string containing the error message from the backend
        - `attribute` The name of the property associated with this error message
         ```javascript
        record.get('errors.length'); // 0
        record.set('foo', 'invalid value');
        record.save().catch(function() {
          record.get('errors').get('foo');
          // [{message: 'foo should be a number.', attribute: 'foo'}]
        });
        ```
         The `errors` property us useful for displaying error messages to
        the user.
         ```handlebars
        <label>Username: {{input value=username}} </label>
        {{#each model.errors.username as |error|}}
          <div class="error">
            {{error.message}}
          </div>
        {{/each}}
        <label>Email: {{input value=email}} </label>
        {{#each model.errors.email as |error|}}
          <div class="error">
            {{error.message}}
          </div>
        {{/each}}
        ```
          You can also access the special `messages` property on the error
        object to get an array of all the error strings.
         ```handlebars
        {{#each model.errors.messages as |message|}}
          <div class="error">
            {{message}}
          </div>
        {{/each}}
        ```
         @property errors
        @type {DS.Errors}
      */
      errors: Ember.computed(function () {
        var errors = ember$data$lib$system$model$errors$$default.create();

        errors.registerHandlers(this._internalModel, function () {
          this.send("becameInvalid");
        }, function () {
          this.send("becameValid");
        });

        return errors;
      }).readOnly(),

      /**
        Create a JSON representation of the record, using the serialization
        strategy of the store's adapter.
        `serialize` takes an optional hash as a parameter, currently
        supported options are:
        - `includeId`: `true` if the record's ID should be included in the
          JSON representation.
         @method serialize
        @param {Object} options
        @return {Object} an object whose values are primitive JSON values only
      */
      serialize: function (options) {
        return this.store.serialize(this, options);
      },

      /**
        Use [DS.JSONSerializer](DS.JSONSerializer.html) to
        get the JSON representation of a record.
         `toJSON` takes an optional hash as a parameter, currently
        supported options are:
         - `includeId`: `true` if the record's ID should be included in the
          JSON representation.
         @method toJSON
        @param {Object} options
        @return {Object} A JSON representation of the object.
      */
      toJSON: function (options) {
        // container is for lazy transform lookups
        var serializer = this.store.serializerFor("-default");
        var snapshot = this._internalModel.createSnapshot();

        return serializer.serialize(snapshot, options);
      },

      /**
        Fired when the record is ready to be interacted with,
        that is either loaded from the server or created locally.
         @event ready
      */
      ready: Ember.K,

      /**
        Fired when the record is loaded from the server.
         @event didLoad
      */
      didLoad: Ember.K,

      /**
        Fired when the record is updated.
         @event didUpdate
      */
      didUpdate: Ember.K,

      /**
        Fired when a new record is commited to the server.
         @event didCreate
      */
      didCreate: Ember.K,

      /**
        Fired when the record is deleted.
         @event didDelete
      */
      didDelete: Ember.K,

      /**
        Fired when the record becomes invalid.
         @event becameInvalid
      */
      becameInvalid: Ember.K,

      /**
        Fired when the record enters the error state.
         @event becameError
      */
      becameError: Ember.K,

      /**
        Fired when the record is rolled back.
         @event rolledBack
      */
      rolledBack: Ember.K,

      /**
        @property data
        @private
        @type {Object}
      */
      data: Ember.computed.readOnly("_internalModel._data"),

      //TODO Do we want to deprecate these?
      /**
        @method send
        @private
        @param {String} name
        @param {Object} context
      */
      send: function (name, context) {
        return this._internalModel.send(name, context);
      },

      /**
        @method transitionTo
        @private
        @param {String} name
      */
      transitionTo: function (name) {
        return this._internalModel.transitionTo(name);
      },

      /**
        Marks the record as deleted but does not save it. You must call
        `save` afterwards if you want to persist it. You might use this
        method if you want to allow the user to still `rollbackAttributes()`
        after a delete it was made.
         Example
         ```app/routes/model/delete.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          actions: {
            softDelete: function() {
              this.controller.get('model').deleteRecord();
            },
            confirm: function() {
              this.controller.get('model').save();
            },
            undo: function() {
              this.controller.get('model').rollbackAttributes();
            }
          }
        });
        ```
         @method deleteRecord
      */
      deleteRecord: function () {
        this._internalModel.deleteRecord();
      },

      /**
        Same as `deleteRecord`, but saves the record immediately.
         Example
         ```app/routes/model/delete.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          actions: {
            delete: function() {
              var controller = this.controller;
              controller.get('model').destroyRecord().then(function() {
                controller.transitionToRoute('model.index');
              });
            }
          }
        });
        ```
         @method destroyRecord
        @param {Object} options
        @return {Promise} a promise that will be resolved when the adapter returns
        successfully or rejected if the adapter returns with an error.
      */
      destroyRecord: function (options) {
        this.deleteRecord();
        return this.save(options);
      },

      /**
        @method unloadRecord
        @private
      */
      unloadRecord: function () {
        if (this.isDestroyed) {
          return;
        }
        this._internalModel.unloadRecord();
      },

      /**
        @method _notifyProperties
        @private
      */
      _notifyProperties: function (keys) {
        Ember.beginPropertyChanges();
        var key;
        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];
          this.notifyPropertyChange(key);
        }
        Ember.endPropertyChanges();
      },

      /**
        Returns an object, whose keys are changed properties, and value is
        an [oldProp, newProp] array.
         Example
         ```app/models/mascot.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          name: attr('string')
        });
        ```
         ```javascript
        var mascot = store.createRecord('mascot');
        mascot.changedAttributes(); // {}
        mascot.set('name', 'Tomster');
        mascot.changedAttributes(); // {name: [undefined, 'Tomster']}
        ```
         @method changedAttributes
        @return {Object} an object, whose keys are changed properties,
          and value is an [oldProp, newProp] array.
      */
      changedAttributes: function () {
        var oldData = ember$data$lib$system$model$model$$get(this._internalModel, "_data");
        var newData = ember$data$lib$system$model$model$$get(this._internalModel, "_attributes");
        var diffData = Ember.create(null);

        var newDataKeys = Ember.keys(newData);

        for (var i = 0, _length = newDataKeys.length; i < _length; i++) {
          var key = newDataKeys[i];
          diffData[key] = [oldData[key], newData[key]];
        }

        return diffData;
      },

      //TODO discuss with tomhuda about events/hooks
      //Bring back as hooks?
      /**
        @method adapterWillCommit
        @private
      adapterWillCommit: function() {
        this.send('willCommit');
      },
       /**
        @method adapterDidDirty
        @private
      adapterDidDirty: function() {
        this.send('becomeDirty');
        this.updateRecordArraysLater();
      },
      */

      /**
        If the model `isDirty` this function will discard any unsaved
        changes. If the model `isNew` it will be removed from the store.
         Example
         ```javascript
        record.get('name'); // 'Untitled Document'
        record.set('name', 'Doc 1');
        record.get('name'); // 'Doc 1'
        record.rollback();
        record.get('name'); // 'Untitled Document'
        ```
         @method rollback
        @deprecated Use `rollbackAttributes()` instead
      */
      rollback: function () {
        Ember.deprecate("Using model.rollback() has been deprecated. Use model.rollbackAttributes() to discard any unsaved changes to a model.");
        this.rollbackAttributes();
      },

      /**
        If the model `isDirty` this function will discard any unsaved
        changes. If the model `isNew` it will be removed from the store.
         Example
         ```javascript
        record.get('name'); // 'Untitled Document'
        record.set('name', 'Doc 1');
        record.get('name'); // 'Doc 1'
        record.rollbackAttributes();
        record.get('name'); // 'Untitled Document'
        ```
         @method rollbackAttributes
      */
      rollbackAttributes: function () {
        this._internalModel.rollbackAttributes();
      },

      /*
        @method _createSnapshot
        @private
      */
      _createSnapshot: function () {
        return this._internalModel.createSnapshot();
      },

      toStringExtension: function () {
        return ember$data$lib$system$model$model$$get(this, "id");
      },

      /**
        Save the record and persist any changes to the record to an
        external source via the adapter.
         Example
         ```javascript
        record.set('name', 'Tomster');
        record.save().then(function() {
          // Success callback
        }, function() {
          // Error callback
        });
        ```
        @method save
        @param {Object} options
        @return {Promise} a promise that will be resolved when the adapter returns
        successfully or rejected if the adapter returns with an error.
      */
      save: function (options) {
        var model = this;
        return ember$data$lib$system$promise$proxies$$PromiseObject.create({
          promise: this._internalModel.save(options).then(function () {
            return model;
          })
        });
      },

      /**
        Reload the record from the adapter.
         This will only work if the record has already finished loading
        and has not yet been modified (`isLoaded` but not `isDirty`,
        or `isSaving`).
         Example
         ```app/routes/model/view.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          actions: {
            reload: function() {
              this.controller.get('model').reload().then(function(model) {
                // do something with the reloaded model
              });
            }
          }
        });
        ```
         @method reload
        @return {Promise} a promise that will be resolved with the record when the
        adapter returns successfully or rejected if the adapter returns
        with an error.
      */
      reload: function () {
        var model = this;
        return ember$data$lib$system$promise$proxies$$PromiseObject.create({
          promise: this._internalModel.reload().then(function () {
            return model;
          })
        });
      },

      /**
        Override the default event firing from Ember.Evented to
        also call methods with the given name.
         @method trigger
        @private
        @param {String} name
      */
      trigger: function (name) {
        var length = arguments.length;
        var args = new Array(length - 1);

        for (var i = 1; i < length; i++) {
          args[i - 1] = arguments[i];
        }

        Ember.tryInvoke(this, name, args);
        this._super.apply(this, arguments);
      },

      willDestroy: function () {
        //TODO Move!
        this._internalModel.clearRelationships();
        this._internalModel.recordObjectWillDestroy();
        this._super.apply(this, arguments);
        //TODO should we set internalModel to null here?
      },

      // This is a temporary solution until we refactor DS.Model to not
      // rely on the data property.
      willMergeMixin: function (props) {
        var constructor = this.constructor;
        Ember.assert("`" + ember$data$lib$system$model$model$$intersection(Ember.keys(props), ember$data$lib$system$model$model$$RESERVED_MODEL_PROPS)[0] + "` is a reserved property name on DS.Model objects. Please choose a different property name for " + constructor.toString(), !ember$data$lib$system$model$model$$intersection(Ember.keys(props), ember$data$lib$system$model$model$$RESERVED_MODEL_PROPS)[0]);
      },

      attr: function () {
        Ember.assert("The `attr` method is not available on DS.Model, a DS.Snapshot was probably expected. Are you passing a DS.Model instead of a DS.Snapshot to your serializer?", false);
      },

      belongsTo: function () {
        Ember.assert("The `belongsTo` method is not available on DS.Model, a DS.Snapshot was probably expected. Are you passing a DS.Model instead of a DS.Snapshot to your serializer?", false);
      },

      hasMany: function () {
        Ember.assert("The `hasMany` method is not available on DS.Model, a DS.Snapshot was probably expected. Are you passing a DS.Model instead of a DS.Snapshot to your serializer?", false);
      }
    });

    ember$data$lib$system$model$model$$Model.reopenClass({
      /**
        Alias DS.Model's `create` method to `_create`. This allows us to create DS.Model
        instances from within the store, but if end users accidentally call `create()`
        (instead of `createRecord()`), we can raise an error.
         @method _create
        @private
        @static
      */
      _create: ember$data$lib$system$model$model$$Model.create,

      /**
        Override the class' `create()` method to raise an error. This
        prevents end users from inadvertently calling `create()` instead
        of `createRecord()`. The store is still able to create instances
        by calling the `_create()` method. To create an instance of a
        `DS.Model` use [store.createRecord](DS.Store.html#method_createRecord).
         @method create
        @private
        @static
      */
      create: function () {
        throw new Ember.Error("You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.");
      },

      /**
       Represents the model's class name as a string. This can be used to look up the model through
       DS.Store's modelFor method.
        `modelName` is generated for you by Ember Data. It will be a lowercased, dasherized string.
       For example:
        ```javascript
       store.modelFor('post').modelName; // 'post'
       store.modelFor('blog-post').modelName; // 'blog-post'
       ```
        The most common place you'll want to access `modelName` is in your serializer's `payloadKeyFromModelName` method. For example, to change payload
       keys to underscore (instead of dasherized), you might use the following code:
        ```javascript
       export default var PostSerializer = DS.RESTSerializer.extend({
         payloadKeyFromModelName: function(modelName) {
           return Ember.String.underscore(modelName);
         }
       });
       ```
       @property
       @type String
       @readonly
      */
      modelName: null
    });

    var ember$data$lib$system$model$model$$default = ember$data$lib$system$model$model$$Model;

    var ember$data$lib$system$store$serializer$response$$forEach = Ember.ArrayPolyfills.forEach;
    var ember$data$lib$system$store$serializer$response$$map = Ember.ArrayPolyfills.map;
    var ember$data$lib$system$store$serializer$response$$get = Ember.get;

    /**
      This is a helper method that always returns a JSON-API Document.

      If the current serializer has `isNewSerializerAPI` set to `true`
      this helper calls `normalizeResponse` instead of `extract`.

      All the built-in serializers get `isNewSerializerAPI` set to `true` automatically
      if the feature flag is enabled.

      @method normalizeResponseHelper
      @param {DS.Serializer} serializer
      @param {DS.Store} store
      @param {subclass of DS.Model} modelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    function ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, modelClass, payload, id, requestType) {
      if (serializer.get('isNewSerializerAPI')) {
        return serializer.normalizeResponse(store, modelClass, payload, id, requestType);
      } else {
        Ember.deprecate('Your custom serializer uses the old version of the Serializer API, with `extract` hooks. Please upgrade your serializers to the new Serializer API using `normalizeResponse` hooks instead.');
        var serializerPayload = serializer.extract(store, modelClass, payload, id, requestType);
        return ember$data$lib$system$store$serializer$response$$_normalizeSerializerPayload(modelClass, serializerPayload);
      }
    }

    /**
      Convert the payload from `serializer.extract` to a JSON-API Document.

      @method _normalizeSerializerPayload
      @private
      @param {subclass of DS.Model} modelClass
      @param {Object} payload
      @return {Object} JSON-API Document
    */
    function ember$data$lib$system$store$serializer$response$$_normalizeSerializerPayload(modelClass, payload) {
      var data = null;

      if (payload) {
        if (Ember.isArray(payload)) {
          data = ember$data$lib$system$store$serializer$response$$map.call(payload, function (payload) {
            return ember$data$lib$system$store$serializer$response$$_normalizeSerializerPayloadItem(modelClass, payload);
          });
        } else {
          data = ember$data$lib$system$store$serializer$response$$_normalizeSerializerPayloadItem(modelClass, payload);
        }
      }

      return { data: data };
    }

    /**
      Convert the payload representing a single record from `serializer.extract` to
      a JSON-API Resource Object.

      @method _normalizeSerializerPayloadItem
      @private
      @param {subclass of DS.Model} modelClass
      @param {Object} payload
      @return {Object} JSON-API Resource Object
    */
    function ember$data$lib$system$store$serializer$response$$_normalizeSerializerPayloadItem(modelClass, itemPayload) {
      var item = {};

      item.id = '' + itemPayload.id;
      item.type = modelClass.modelName;
      item.attributes = {};
      item.relationships = {};

      modelClass.eachAttribute(function (name) {
        if (itemPayload.hasOwnProperty(name)) {
          item.attributes[name] = itemPayload[name];
        }
      });

      modelClass.eachRelationship(function (key, relationshipMeta) {
        var relationship, value;

        if (itemPayload.hasOwnProperty(key)) {
          var relationshipData;

          (function () {
            relationship = {};
            value = itemPayload[key];
            var normalizeRelationshipData = function (value, relationshipMeta) {
              if (Ember.isNone(value)) {
                return null;
              }
              //Temporary support for https://github.com/emberjs/data/issues/3271
              if (value instanceof ember$data$lib$system$model$model$$default) {
                value = { id: value.id, type: value.constructor.modelName };
              }
              if (Ember.typeOf(value) === 'object') {
                Ember.assert('Ember Data expected a number or string to represent the record(s) in the `' + key + '` relationship instead it found an object. If this is a polymorphic relationship please specify a `type` key. If this is an embedded relationship please include the `DS.EmbeddedRecordsMixin` and specify the `' + key + '` property in your serializer\'s attrs object.', value.type);
                if (value.id) {
                  value.id = '' + value.id;
                }
                return value;
              }

              Ember.assert('A ' + relationshipMeta.parentType + ' record was pushed into the store with the value of ' + key + ' being ' + Ember.inspect(value) + ', but ' + key + ' is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.', !Ember.isArray(value));
              return { id: '' + value, type: relationshipMeta.type };
            };

            if (relationshipMeta.kind === 'belongsTo') {
              relationship.data = normalizeRelationshipData(value, relationshipMeta);
              //handle the belongsTo polymorphic case, where { post:1, postType: 'video' }
              if (relationshipMeta.options && relationshipMeta.options.polymorphic && itemPayload[key + 'Type']) {
                relationship.data.type = itemPayload[key + 'Type'];
              }
            } else if (relationshipMeta.kind === 'hasMany') {
              //|| [] because the hasMany could be === null
              Ember.assert('A ' + relationshipMeta.parentType + ' record was pushed into the store with the value of ' + key + ' being \'' + Ember.inspect(value) + '\', but ' + key + ' is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.', Ember.isArray(value) || value === null);

              relationshipData = Ember.A(value || []);

              relationship.data = ember$data$lib$system$store$serializer$response$$map.call(relationshipData, function (item) {
                return normalizeRelationshipData(item, relationshipMeta);
              });
            }
          })();
        }

        if (itemPayload.links && itemPayload.links.hasOwnProperty(key)) {
          relationship = relationship || {};
          value = itemPayload.links[key];

          relationship.links = {
            related: value
          };
        }

        if (relationship) {
          relationship.meta = ember$data$lib$system$store$serializer$response$$get(itemPayload, 'meta.' + key);
          item.relationships[key] = relationship;
        }
      });

      return item;
    }

    /**
      Push a JSON-API Document to the store.

      This will push both primary data located in `data` and secondary data located
      in `included` (if present).

      @method pushPayload
      @param {DS.Store} store
      @param {Object} payload
      @return {DS.Model|Array} one or multiple records from `data`
    */
    function ember$data$lib$system$store$serializer$response$$pushPayload(store, payload) {
      var result = ember$data$lib$system$store$serializer$response$$pushPayloadData(store, payload);
      ember$data$lib$system$store$serializer$response$$pushPayloadIncluded(store, payload);
      return result;
    }

    /**
      Push the primary data of a JSON-API Document to the store.

      This method only pushes the primary data located in `data`.

      @method pushPayloadData
      @param {DS.Store} store
      @param {Object} payload
      @return {DS.Model|Array} one or multiple records from `data`
    */
    function ember$data$lib$system$store$serializer$response$$pushPayloadData(store, payload) {
      var result;
      if (payload && payload.data) {
        if (Ember.isArray(payload.data)) {
          result = ember$data$lib$system$store$serializer$response$$map.call(payload.data, function (item) {
            return ember$data$lib$system$store$serializer$response$$_pushResourceObject(store, item);
          });
        } else {
          result = ember$data$lib$system$store$serializer$response$$_pushResourceObject(store, payload.data);
        }
      }
      return result;
    }

    /**
      Push the secondary data of a JSON-API Document to the store.

      This method only pushes the secondary data located in `included`.

      @method pushPayloadIncluded
      @param {DS.Store} store
      @param {Object} payload
      @return {Array} an array containing zero or more records from `included`
    */
    function ember$data$lib$system$store$serializer$response$$pushPayloadIncluded(store, payload) {
      var result;
      if (payload && payload.included && Ember.isArray(payload.included)) {
        result = ember$data$lib$system$store$serializer$response$$map.call(payload.included, function (item) {
          return ember$data$lib$system$store$serializer$response$$_pushResourceObject(store, item);
        });
      }
      return result;
    }

    /**
      Push a single JSON-API Resource Object to the store.

      @method _pushResourceObject
      @private
      @param {Object} resourceObject
      @return {DS.Model} a record
    */
    function ember$data$lib$system$store$serializer$response$$_pushResourceObject(store, resourceObject) {
      return store.push({ data: resourceObject });
    }

    /**
      This method converts a JSON-API Resource Object to a format that DS.Store
      understands.

      TODO: This method works as an interim until DS.Store understands JSON-API.

      @method convertResourceObject
      @param {Object} payload
      @return {Object} an object formatted the way DS.Store understands
    */
    function ember$data$lib$system$store$serializer$response$$convertResourceObject(payload) {
      if (!payload) {
        return payload;
      }

      var data = {
        id: payload.id,
        type: payload.type,
        links: {}
      };

      if (payload.attributes) {
        var attributeKeys = Ember.keys(payload.attributes);
        ember$data$lib$system$store$serializer$response$$forEach.call(attributeKeys, function (key) {
          var attribute = payload.attributes[key];
          data[key] = attribute;
        });
      }
      if (payload.relationships) {
        var relationshipKeys = Ember.keys(payload.relationships);
        ember$data$lib$system$store$serializer$response$$forEach.call(relationshipKeys, function (key) {
          var relationship = payload.relationships[key];
          if (relationship.hasOwnProperty('data')) {
            data[key] = relationship.data;
          } else if (relationship.links && relationship.links.related) {
            data.links[key] = relationship.links.related;
          }
        });
      }
      return data;
    }

    var ember$data$lib$serializers$rest$serializer$$forEach = Ember.ArrayPolyfills.forEach;
    var ember$data$lib$serializers$rest$serializer$$map = Ember.ArrayPolyfills.map;
    var ember$data$lib$serializers$rest$serializer$$camelize = Ember.String.camelize;
    var ember$data$lib$serializers$rest$serializer$$get = Ember.get;

    /**
      Normally, applications will use the `RESTSerializer` by implementing
      the `normalize` method and individual normalizations under
      `normalizeHash`.

      This allows you to do whatever kind of munging you need, and is
      especially useful if your server is inconsistent and you need to
      do munging differently for many different kinds of responses.

      See the `normalize` documentation for more information.

      ## Across the Board Normalization

      There are also a number of hooks that you might find useful to define
      across-the-board rules for your payload. These rules will be useful
      if your server is consistent, or if you're building an adapter for
      an infrastructure service, like Parse, and want to encode service
      conventions.

      For example, if all of your keys are underscored and all-caps, but
      otherwise consistent with the names you use in your models, you
      can implement across-the-board rules for how to convert an attribute
      name in your model to a key in your JSON.

      ```app/serializers/application.js
      import DS from 'ember-data';

      export default DS.RESTSerializer.extend({
        keyForAttribute: function(attr, method) {
          return Ember.String.underscore(attr).toUpperCase();
        }
      });
      ```

      You can also implement `keyForRelationship`, which takes the name
      of the relationship as the first parameter, the kind of
      relationship (`hasMany` or `belongsTo`) as the second parameter, and
      the method (`serialize` or `deserialize`) as the third parameter.

      @class RESTSerializer
      @namespace DS
      @extends DS.JSONSerializer
    */
    var ember$data$lib$serializers$rest$serializer$$RESTSerializer = ember$data$lib$serializers$json$serializer$$default.extend({

      /**
        If you want to do normalizations specific to some part of the payload, you
        can specify those under `normalizeHash`.
         For example, given the following json where the the `IDs` under
        `"comments"` are provided as `_id` instead of `id`.
         ```javascript
        {
          "post": {
            "id": 1,
            "title": "Rails is omakase",
            "comments": [ 1, 2 ]
          },
          "comments": [{
            "_id": 1,
            "body": "FIRST"
          }, {
            "_id": 2,
            "body": "Rails is unagi"
          }]
        }
        ```
         You use `normalizeHash` to normalize just the comments:
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          normalizeHash: {
            comments: function(hash) {
              hash.id = hash._id;
              delete hash._id;
              return hash;
            }
          }
        });
        ```
         The key under `normalizeHash` is usually just the original key
        that was in the original payload. However, key names will be
        impacted by any modifications done in the `normalizePayload`
        method. The `DS.RESTSerializer`'s default implementation makes no
        changes to the payload keys.
         @property normalizeHash
        @type {Object}
        @default undefined
      */

      /**
        Normalizes a part of the JSON payload returned by
        the server. You should override this method, munge the hash
        and call super if you have generic normalization to do.
         It takes the type of the record that is being normalized
        (as a DS.Model class), the property where the hash was
        originally found, and the hash to normalize.
         For example, if you have a payload that looks like this:
         ```js
        {
          "post": {
            "id": 1,
            "title": "Rails is omakase",
            "comments": [ 1, 2 ]
          },
          "comments": [{
            "id": 1,
            "body": "FIRST"
          }, {
            "id": 2,
            "body": "Rails is unagi"
          }]
        }
        ```
         The `normalize` method will be called three times:
         * With `App.Post`, `"posts"` and `{ id: 1, title: "Rails is omakase", ... }`
        * With `App.Comment`, `"comments"` and `{ id: 1, body: "FIRST" }`
        * With `App.Comment`, `"comments"` and `{ id: 2, body: "Rails is unagi" }`
         You can use this method, for example, to normalize underscored keys to camelized
        or other general-purpose normalizations.
         If you want to do normalizations specific to some part of the payload, you
        can specify those under `normalizeHash`.
         For example, if the `IDs` under `"comments"` are provided as `_id` instead of
        `id`, you can specify how to normalize just the comments:
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          normalizeHash: {
            comments: function(hash) {
              hash.id = hash._id;
              delete hash._id;
              return hash;
            }
          }
        });
        ```
         The key under `normalizeHash` is just the original key that was in the original
        payload.
         @method normalize
        @param {DS.Model} typeClass
        @param {Object} hash
        @param {String} prop
        @return {Object}
      */
      normalize: function (typeClass, hash, prop) {
        if (this.get("isNewSerializerAPI")) {
          ember$data$lib$serializers$rest$serializer$$_newNormalize.apply(this, arguments);
          return this._super.apply(this, arguments);
        }

        this.normalizeId(hash);
        this.normalizeAttributes(typeClass, hash);
        this.normalizeRelationships(typeClass, hash);

        this.normalizeUsingDeclaredMapping(typeClass, hash);

        if (this.normalizeHash && this.normalizeHash[prop]) {
          this.normalizeHash[prop](hash);
        }

        this.applyTransforms(typeClass, hash);
        return hash;
      },

      /*
        Normalizes an array of resource payloads and returns a JSON-API Document
        with primary data and, if any, included data as `{ data, included }`.
         @method normalizeArray
        @param {DS.Store} store
        @param {String} modelName
        @param {Object} arrayHash
        @param {String} prop
        @return {Object}
      */
      normalizeArray: function (store, modelName, arrayHash, prop) {
        var documentHash = {
          data: [],
          included: []
        };

        var modelClass = store.modelFor(modelName);
        var serializer = store.serializerFor(modelName);

        Ember.assert("" + this.toString() + " has opted into the new serializer API and expects the " + serializer.toString() + " it collaborates with to also support the new serializer API by setting its `isNewSerializerAPI` property to true.", ember$data$lib$serializers$rest$serializer$$get(serializer, "isNewSerializerAPI"));

        /*jshint loopfunc:true*/
        ember$data$lib$serializers$rest$serializer$$forEach.call(arrayHash, function (hash) {
          var _serializer$normalize = serializer.normalize(modelClass, hash, prop);

          var data = _serializer$normalize.data;
          var included = _serializer$normalize.included;

          documentHash.data.push(data);
          if (included) {
            var _documentHash$included;

            (_documentHash$included = documentHash.included).push.apply(_documentHash$included, included);
          }
        }, this);

        return documentHash;
      },

      /*
        @method _normalizeResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @param {Boolean} isSingle
        @return {Object} JSON-API Document
        @private
      */
      _normalizeResponse: function (store, primaryModelClass, payload, id, requestType, isSingle) {
        var documentHash = {
          data: null,
          included: []
        };

        var meta = this.extractMeta(store, primaryModelClass, payload);
        if (meta) {
          Ember.assert("The `meta` returned from `extractMeta` has to be an object, not \"" + Ember.typeOf(meta) + "\".", Ember.typeOf(meta) === "object");
          documentHash.meta = meta;
        }

        var keys = Ember.keys(payload);

        for (var i = 0, _length = keys.length; i < _length; i++) {
          var prop = keys[i];
          var modelName = prop;
          var forcedSecondary = false;

          /*
            If you want to provide sideloaded records of the same type that the
            primary data you can do that by prefixing the key with `_`.
             Example
             ```
            {
              users: [
                { id: 1, title: 'Tom', manager: 3 },
                { id: 2, title: 'Yehuda', manager: 3 }
              ],
              _users: [
                { id: 3, title: 'Tomster' }
              ]
            }
            ```
             This forces `_users` to be added to `included` instead of `data`.
           */
          if (prop.charAt(0) === "_") {
            forcedSecondary = true;
            modelName = prop.substr(1);
          }

          var typeName = this.modelNameFromPayloadKey(modelName);
          if (!store.modelFactoryFor(typeName)) {
            Ember.warn(this.warnMessageNoModelForKey(modelName, typeName), false);
            continue;
          }

          var isPrimary = !forcedSecondary && this.isPrimaryType(store, typeName, primaryModelClass);
          var value = payload[prop];

          if (value === null) {
            continue;
          }

          /*
            Support primary data as an object instead of an array.
             Example
             ```
            {
              user: { id: 1, title: 'Tom', manager: 3 }
            }
            ```
           */
          if (isPrimary && Ember.typeOf(value) !== "array") {
            var _normalize = this.normalize(primaryModelClass, value, prop);

            var _data = _normalize.data;
            var _included = _normalize.included;

            documentHash.data = _data;
            if (_included) {
              var _documentHash$included2;

              (_documentHash$included2 = documentHash.included).push.apply(_documentHash$included2, _included);
            }
            continue;
          }

          var _normalizeArray = this.normalizeArray(store, typeName, value, prop);

          var data = _normalizeArray.data;
          var included = _normalizeArray.included;

          if (included) {
            var _documentHash$included3;

            (_documentHash$included3 = documentHash.included).push.apply(_documentHash$included3, included);
          }

          if (isSingle) {
            /*jshint loopfunc:true*/
            ember$data$lib$serializers$rest$serializer$$forEach.call(data, function (resource) {

              /*
                Figures out if this is the primary record or not.
                 It's either:
                 1. The record with the same ID as the original request
                2. If it's a newly created record without an ID, the first record
                   in the array
               */
              var isUpdatedRecord = isPrimary && ember$data$lib$system$coerce$id$$default(resource.id) === id;
              var isFirstCreatedRecord = isPrimary && !id && !documentHash.data;

              if (isFirstCreatedRecord || isUpdatedRecord) {
                documentHash.data = resource;
              } else {
                documentHash.included.push(resource);
              }
            });
          } else {
            if (isPrimary) {
              documentHash.data = data;
            } else {
              if (data) {
                var _documentHash$included4;

                (_documentHash$included4 = documentHash.included).push.apply(_documentHash$included4, data);
              }
            }
          }
        }

        return documentHash;
      },

      /**
        Called when the server has returned a payload representing
        a single record, such as in response to a `find` or `save`.
         It is your opportunity to clean up the server's response into the normalized
        form expected by Ember Data.
         If you want, you can just restructure the top-level of your payload, and
        do more fine-grained normalization in the `normalize` method.
         For example, if you have a payload like this in response to a request for
        post 1:
         ```js
        {
          "id": 1,
          "title": "Rails is omakase",
           "_embedded": {
            "comment": [{
              "_id": 1,
              "comment_title": "FIRST"
            }, {
              "_id": 2,
              "comment_title": "Rails is unagi"
            }]
          }
        }
        ```
         You could implement a serializer that looks like this to get your payload
        into shape:
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          // First, restructure the top-level so it's organized by type
          extractSingle: function(store, typeClass, payload, id) {
            var comments = payload._embedded.comment;
            delete payload._embedded;
             payload = { comments: comments, post: payload };
            return this._super(store, typeClass, payload, id);
          },
           normalizeHash: {
            // Next, normalize individual comments, which (after `extract`)
            // are now located under `comments`
            comments: function(hash) {
              hash.id = hash._id;
              hash.title = hash.comment_title;
              delete hash._id;
              delete hash.comment_title;
              return hash;
            }
          }
        })
        ```
         When you call super from your own implementation of `extractSingle`, the
        built-in implementation will find the primary record in your normalized
        payload and push the remaining records into the store.
         The primary record is the single hash found under `post` or the first
        element of the `posts` array.
         The primary record has special meaning when the record is being created
        for the first time or updated (`createRecord` or `updateRecord`). In
        particular, it will update the properties of the record that was saved.
         @method extractSingle
        @param {DS.Store} store
        @param {DS.Model} primaryTypeClass
        @param {Object} rawPayload
        @param {String} recordId
        @return {Object} the primary response to the original request
      */
      extractSingle: function (store, primaryTypeClass, rawPayload, recordId) {
        var payload = this.normalizePayload(rawPayload);
        var primaryRecord;

        for (var prop in payload) {
          var modelName = this.modelNameFromPayloadKey(prop);

          if (!store.modelFactoryFor(modelName)) {
            Ember.warn(this.warnMessageNoModelForKey(prop, modelName), false);
            continue;
          }
          var isPrimary = this.isPrimaryType(store, modelName, primaryTypeClass);
          var value = payload[prop];

          if (value === null) {
            continue;
          }

          // legacy support for singular resources
          if (isPrimary && Ember.typeOf(value) !== "array") {
            primaryRecord = this.normalize(primaryTypeClass, value, prop);
            continue;
          }

          /*jshint loopfunc:true*/
          ember$data$lib$serializers$rest$serializer$$forEach.call(value, function (hash) {
            var typeName = this.modelNameFromPayloadKey(prop);
            var type = store.modelFor(typeName);
            var typeSerializer = store.serializerFor(type.modelName);

            hash = typeSerializer.normalize(type, hash, prop);

            var isFirstCreatedRecord = isPrimary && !recordId && !primaryRecord;
            var isUpdatedRecord = isPrimary && ember$data$lib$system$coerce$id$$default(hash.id) === recordId;

            // find the primary record.
            //
            // It's either:
            // * the record with the same ID as the original request
            // * in the case of a newly created record that didn't have an ID, the first
            //   record in the Array
            if (isFirstCreatedRecord || isUpdatedRecord) {
              primaryRecord = hash;
            } else {
              store.push(modelName, hash);
            }
          }, this);
        }

        return primaryRecord;
      },

      /**
        Called when the server has returned a payload representing
        multiple records, such as in response to a `findAll` or `findQuery`.
         It is your opportunity to clean up the server's response into the normalized
        form expected by Ember Data.
         If you want, you can just restructure the top-level of your payload, and
        do more fine-grained normalization in the `normalize` method.
         For example, if you have a payload like this in response to a request for
        all posts:
         ```js
        {
          "_embedded": {
            "post": [{
              "id": 1,
              "title": "Rails is omakase"
            }, {
              "id": 2,
              "title": "The Parley Letter"
            }],
            "comment": [{
              "_id": 1,
              "comment_title": "Rails is unagi",
              "post_id": 1
            }, {
              "_id": 2,
              "comment_title": "Don't tread on me",
              "post_id": 2
            }]
          }
        }
        ```
         You could implement a serializer that looks like this to get your payload
        into shape:
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          // First, restructure the top-level so it's organized by type
          // and the comments are listed under a post's `comments` key.
          extractArray: function(store, type, payload) {
            var posts = payload._embedded.post;
            var comments = [];
            var postCache = {};
             posts.forEach(function(post) {
              post.comments = [];
              postCache[post.id] = post;
            });
             payload._embedded.comment.forEach(function(comment) {
              comments.push(comment);
              postCache[comment.post_id].comments.push(comment);
              delete comment.post_id;
            });
             payload = { comments: comments, posts: posts };
             return this._super(store, type, payload);
          },
           normalizeHash: {
            // Next, normalize individual comments, which (after `extract`)
            // are now located under `comments`
            comments: function(hash) {
              hash.id = hash._id;
              hash.title = hash.comment_title;
              delete hash._id;
              delete hash.comment_title;
              return hash;
            }
          }
        })
        ```
         When you call super from your own implementation of `extractArray`, the
        built-in implementation will find the primary array in your normalized
        payload and push the remaining records into the store.
         The primary array is the array found under `posts`.
         The primary record has special meaning when responding to `findQuery`
        or `findHasMany`. In particular, the primary array will become the
        list of records in the record array that kicked off the request.
         If your primary array contains secondary (embedded) records of the same type,
        you cannot place these into the primary array `posts`. Instead, place the
        secondary items into an underscore prefixed property `_posts`, which will
        push these items into the store and will not affect the resulting query.
         @method extractArray
        @param {DS.Store} store
        @param {DS.Model} primaryTypeClass
        @param {Object} rawPayload
        @return {Array} The primary array that was returned in response
          to the original query.
      */
      extractArray: function (store, primaryTypeClass, rawPayload) {
        var payload = this.normalizePayload(rawPayload);
        var primaryArray;

        for (var prop in payload) {
          var modelName = prop;
          var forcedSecondary = false;

          if (prop.charAt(0) === "_") {
            forcedSecondary = true;
            modelName = prop.substr(1);
          }

          var typeName = this.modelNameFromPayloadKey(modelName);
          if (!store.modelFactoryFor(typeName)) {
            Ember.warn(this.warnMessageNoModelForKey(prop, typeName), false);
            continue;
          }
          var type = store.modelFor(typeName);
          var typeSerializer = store.serializerFor(type.modelName);
          var isPrimary = !forcedSecondary && this.isPrimaryType(store, typeName, primaryTypeClass);

          /*jshint loopfunc:true*/
          var normalizedArray = ember$data$lib$serializers$rest$serializer$$map.call(payload[prop], function (hash) {
            return typeSerializer.normalize(type, hash, prop);
          }, this);

          if (isPrimary) {
            primaryArray = normalizedArray;
          } else {
            store.pushMany(typeName, normalizedArray);
          }
        }

        return primaryArray;
      },

      isPrimaryType: function (store, typeName, primaryTypeClass) {
        var typeClass = store.modelFor(typeName);
        return typeClass.modelName === primaryTypeClass.modelName;
      },

      /**
        This method allows you to push a payload containing top-level
        collections of records organized per type.
         ```js
        {
          "posts": [{
            "id": "1",
            "title": "Rails is omakase",
            "author", "1",
            "comments": [ "1" ]
          }],
          "comments": [{
            "id": "1",
            "body": "FIRST"
          }],
          "users": [{
            "id": "1",
            "name": "@d2h"
          }]
        }
        ```
         It will first normalize the payload, so you can use this to push
        in data streaming in from your server structured the same way
        that fetches and saves are structured.
         @method pushPayload
        @param {DS.Store} store
        @param {Object} rawPayload
      */
      pushPayload: function (store, rawPayload) {
        if (this.get("isNewSerializerAPI")) {
          ember$data$lib$serializers$rest$serializer$$_newPushPayload.apply(this, arguments);
          return;
        }

        var payload = this.normalizePayload(rawPayload);

        for (var prop in payload) {
          var modelName = this.modelNameFromPayloadKey(prop);
          if (!store.modelFactoryFor(modelName)) {
            Ember.warn(this.warnMessageNoModelForKey(prop, modelName), false);
            continue;
          }
          var typeClass = store.modelFor(modelName);
          var typeSerializer = store.serializerFor(modelName);

          /*jshint loopfunc:true*/
          var normalizedArray = ember$data$lib$serializers$rest$serializer$$map.call(Ember.makeArray(payload[prop]), function (hash) {
            return typeSerializer.normalize(typeClass, hash, prop);
          }, this);

          store.pushMany(modelName, normalizedArray);
        }
      },

      /**
        This method is used to convert each JSON root key in the payload
        into a modelName that it can use to look up the appropriate model for
        that part of the payload.
         For example, your server may send a model name that does not correspond with
        the name of the model in your app. Let's take a look at an example model,
        and an example payload:
         ```app/models/post.js
        import DS from 'ember-data';
         export default DS.Model.extend({
        });
        ```
         ```javascript
          {
            "blog/post": {
              "id": "1
            }
          }
        ```
         Ember Data is going to normalize the payload's root key for the modelName. As a result,
        it will try to look up the "blog/post" model. Since we don't have a model called "blog/post"
        (or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error
        because it cannot find the "blog/post" model.
         Since we want to remove this namespace, we can define a serializer for the application that will
        remove "blog/" from the payload key whenver it's encountered by Ember Data:
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          modelNameFromPayloadKey: function(payloadKey) {
            if (payloadKey === 'blog/post') {
              return this._super(payloadKey.replace('blog/', ''));
            } else {
             return this._super(payloadKey);
            }
          }
        });
        ```
         After refreshing, Ember Data will appropriately look up the "post" model.
         By default the modelName for a model is its
        name in dasherized form. This means that a payload key like "blogPost" would be
        normalized to "blog-post" when Ember Data looks up the model. Usually, Ember Data
        can use the correct inflection to do this for you. Most of the time, you won't
        need to override `modelNameFromPayloadKey` for this purpose.
         @method modelNameFromPayloadKey
        @param {String} key
        @return {String} the model's modelName
      */
      modelNameFromPayloadKey: function (key) {
        return ember$inflector$lib$lib$system$string$$singularize(ember$data$lib$system$normalize$model$name$$default(key));
      },

      // SERIALIZE

      /**
        Called when a record is saved in order to convert the
        record into JSON.
         By default, it creates a JSON object with a key for
        each attribute and belongsTo relationship.
         For example, consider this model:
         ```app/models/comment.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          title: DS.attr(),
          body: DS.attr(),
           author: DS.belongsTo('user')
        });
        ```
         The default serialization would create a JSON object like:
         ```js
        {
          "title": "Rails is unagi",
          "body": "Rails? Omakase? O_O",
          "author": 12
        }
        ```
         By default, attributes are passed through as-is, unless
        you specified an attribute type (`DS.attr('date')`). If
        you specify a transform, the JavaScript value will be
        serialized when inserted into the JSON hash.
         By default, belongs-to relationships are converted into
        IDs when inserted into the JSON hash.
         ## IDs
         `serialize` takes an options hash with a single option:
        `includeId`. If this option is `true`, `serialize` will,
        by default include the ID in the JSON object it builds.
         The adapter passes in `includeId: true` when serializing
        a record for `createRecord`, but not for `updateRecord`.
         ## Customization
         Your server may expect a different JSON format than the
        built-in serialization format.
         In that case, you can implement `serialize` yourself and
        return a JSON hash of your choosing.
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          serialize: function(snapshot, options) {
            var json = {
              POST_TTL: snapshot.attr('title'),
              POST_BDY: snapshot.attr('body'),
              POST_CMS: snapshot.hasMany('comments', { ids: true })
            }
             if (options.includeId) {
              json.POST_ID_ = snapshot.id;
            }
             return json;
          }
        });
        ```
         ## Customizing an App-Wide Serializer
         If you want to define a serializer for your entire
        application, you'll probably want to use `eachAttribute`
        and `eachRelationship` on the record.
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          serialize: function(snapshot, options) {
            var json = {};
             snapshot.eachAttribute(function(name) {
              json[serverAttributeName(name)] = snapshot.attr(name);
            })
             snapshot.eachRelationship(function(name, relationship) {
              if (relationship.kind === 'hasMany') {
                json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
              }
            });
             if (options.includeId) {
              json.ID_ = snapshot.id;
            }
             return json;
          }
        });
         function serverAttributeName(attribute) {
          return attribute.underscore().toUpperCase();
        }
         function serverHasManyName(name) {
          return serverAttributeName(name.singularize()) + "_IDS";
        }
        ```
         This serializer will generate JSON that looks like this:
         ```js
        {
          "TITLE": "Rails is omakase",
          "BODY": "Yep. Omakase.",
          "COMMENT_IDS": [ 1, 2, 3 ]
        }
        ```
         ## Tweaking the Default JSON
         If you just want to do some small tweaks on the default JSON,
        you can call super first and make the tweaks on the returned
        JSON.
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          serialize: function(snapshot, options) {
            var json = this._super(snapshot, options);
             json.subject = json.title;
            delete json.title;
             return json;
          }
        });
        ```
         @method serialize
        @param {DS.Snapshot} snapshot
        @param {Object} options
        @return {Object} json
      */
      serialize: function (snapshot, options) {
        return this._super.apply(this, arguments);
      },

      /**
        You can use this method to customize the root keys serialized into the JSON.
        By default the REST Serializer sends the modelName of a model, which is a camelized
        version of the name.
         For example, your server may expect underscored root objects.
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          serializeIntoHash: function(data, type, record, options) {
            var root = Ember.String.decamelize(type.modelName);
            data[root] = this.serialize(record, options);
          }
        });
        ```
         @method serializeIntoHash
        @param {Object} hash
        @param {DS.Model} typeClass
        @param {DS.Snapshot} snapshot
        @param {Object} options
      */
      serializeIntoHash: function (hash, typeClass, snapshot, options) {
        var normalizedRootKey = this.payloadKeyFromModelName(typeClass.modelName);
        hash[normalizedRootKey] = this.serialize(snapshot, options);
      },

      /**
        You can use `payloadKeyFromModelName` to override the root key for an outgoing
        request. By default, the RESTSerializer returns a camelized version of the
        model's name.
         For a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer
        will send it to the server with `tacoParty` as the root key in the JSON payload:
         ```js
        {
          "tacoParty": {
            "id": "1",
            "location": "Matthew Beale's House"
          }
        }
        ```
         For example, your server may expect dasherized root objects:
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.RESTSerializer.extend({
          payloadKeyFromModelName: function(modelName) {
            return Ember.String.dasherize(modelName);
          }
        });
        ```
         Given a `TacoParty' model, calling `save` on a tacoModel would produce an outgoing
        request like:
         ```js
        {
          "taco-party": {
            "id": "1",
            "location": "Matthew Beale's House"
          }
        }
        ```
         @method payloadKeyFromModelName
        @param {String} modelName
        @return {String}
      */
      payloadKeyFromModelName: function (modelName) {
        return ember$data$lib$serializers$rest$serializer$$camelize(modelName);
      },

      /**
       Deprecated. Use modelNameFromPayloadKey instead
         @method typeForRoot
        @param {String} modelName
        @return {String}
        @deprecated
      */
      typeForRoot: function (modelName) {
        Ember.deprecate("typeForRoot is deprecated. Use modelNameFromPayloadKey instead.");
        return this.modelNameFromPayloadKey(modelName);
      },

      /**
        You can use this method to customize how polymorphic objects are serialized.
        By default the JSON Serializer creates the key by appending `Type` to
        the attribute and value from the model's camelcased model name.
         @method serializePolymorphicType
        @param {DS.Snapshot} snapshot
        @param {Object} json
        @param {Object} relationship
      */
      serializePolymorphicType: function (snapshot, json, relationship) {
        var key = relationship.key;
        var belongsTo = snapshot.belongsTo(key);
        key = this.keyForAttribute ? this.keyForAttribute(key, "serialize") : key;
        if (Ember.isNone(belongsTo)) {
          json[key + "Type"] = null;
        } else {
          json[key + "Type"] = Ember.String.camelize(belongsTo.modelName);
        }
      }
    });

    Ember.runInDebug(function () {
      ember$data$lib$serializers$rest$serializer$$RESTSerializer.reopen({
        warnMessageNoModelForKey: function (prop, typeKey) {
          return "Encountered \"" + prop + "\" in payload, but no model was found for model name \"" + typeKey + "\" (resolved model name using " + this.constructor.toString() + ".modelNameFromPayloadKey(\"" + prop + "\"))";
        }
      });
    });

    var ember$data$lib$serializers$rest$serializer$$default = ember$data$lib$serializers$rest$serializer$$RESTSerializer;

    /*
      @method _newNormalize
      @param {DS.Model} modelClass
      @param {Object} resourceHash
      @param {String} prop
      @return {Object}
      @private
    */
    function ember$data$lib$serializers$rest$serializer$$_newNormalize(modelClass, resourceHash, prop) {
      if (this.normalizeHash && this.normalizeHash[prop]) {
        this.normalizeHash[prop](resourceHash);
      }
    }

    /*
      @method _newPushPayload
      @param {DS.Store} store
      @param {Object} rawPayload
    */
    function ember$data$lib$serializers$rest$serializer$$_newPushPayload(store, rawPayload) {
      var documentHash = {
        data: [],
        included: []
      };
      var payload = this.normalizePayload(rawPayload);

      for (var prop in payload) {
        var modelName = this.modelNameFromPayloadKey(prop);
        if (!store.modelFactoryFor(modelName)) {
          Ember.warn(this.warnMessageNoModelForKey(prop, modelName), false);
          continue;
        }
        var type = store.modelFor(modelName);
        var typeSerializer = store.serializerFor(type.modelName);

        /*jshint loopfunc:true*/
        ember$data$lib$serializers$rest$serializer$$forEach.call(Ember.makeArray(payload[prop]), function (hash) {
          var _typeSerializer$normalize = typeSerializer.normalize(type, hash, prop);

          var data = _typeSerializer$normalize.data;
          var included = _typeSerializer$normalize.included;

          documentHash.data.push(data);
          if (included) {
            var _documentHash$included5;

            (_documentHash$included5 = documentHash.included).push.apply(_documentHash$included5, included);
          }
        }, this);
      }

      ember$data$lib$system$store$serializer$response$$pushPayload(store, documentHash);
    }
    /**
      @module ember-data
    */

    var activemodel$adapter$lib$system$active$model$serializer$$forEach = Ember.EnumerableUtils.forEach;
    var activemodel$adapter$lib$system$active$model$serializer$$camelize = Ember.String.camelize;
    var activemodel$adapter$lib$system$active$model$serializer$$classify = Ember.String.classify;
    var activemodel$adapter$lib$system$active$model$serializer$$decamelize = Ember.String.decamelize;
    var activemodel$adapter$lib$system$active$model$serializer$$underscore = Ember.String.underscore;

    /**
      The ActiveModelSerializer is a subclass of the RESTSerializer designed to integrate
      with a JSON API that uses an underscored naming convention instead of camelCasing.
      It has been designed to work out of the box with the
      [active\_model\_serializers](http://github.com/rails-api/active_model_serializers)
      Ruby gem. This Serializer expects specific settings using ActiveModel::Serializers,
      `embed :ids, embed_in_root: true` which sideloads the records.

      This serializer extends the DS.RESTSerializer by making consistent
      use of the camelization, decamelization and pluralization methods to
      normalize the serialized JSON into a format that is compatible with
      a conventional Rails backend and Ember Data.

      ## JSON Structure

      The ActiveModelSerializer expects the JSON returned from your server
      to follow the REST adapter conventions substituting underscored keys
      for camelcased ones.

      ### Conventional Names

      Attribute names in your JSON payload should be the underscored versions of
      the attributes in your Ember.js models.

      For example, if you have a `Person` model:

      ```js
      App.FamousPerson = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string')
      });
      ```

      The JSON returned should look like this:

      ```js
      {
        "famous_person": {
          "id": 1,
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation": "President"
        }
      }
      ```

      Let's imagine that `Occupation` is just another model:

      ```js
      App.Person = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.belongsTo('occupation')
      });

      App.Occupation = DS.Model.extend({
        name: DS.attr('string'),
        salary: DS.attr('number'),
        people: DS.hasMany('person')
      });
      ```

      The JSON needed to avoid extra server calls, should look like this:

      ```js
      {
        "people": [{
          "id": 1,
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation_id": 1
        }],

        "occupations": [{
          "id": 1,
          "name": "President",
          "salary": 100000,
          "person_ids": [1]
        }]
      }
      ```

      @class ActiveModelSerializer
      @namespace DS
      @extends DS.RESTSerializer
    */
    var activemodel$adapter$lib$system$active$model$serializer$$ActiveModelSerializer = ember$data$lib$serializers$rest$serializer$$default.extend({
      // SERIALIZE

      /**
        Converts camelCased attributes to underscored when serializing.
         @method keyForAttribute
        @param {String} attribute
        @return String
      */
      keyForAttribute: function (attr) {
        return activemodel$adapter$lib$system$active$model$serializer$$decamelize(attr);
      },

      /**
        Underscores relationship names and appends "_id" or "_ids" when serializing
        relationship keys.
         @method keyForRelationship
        @param {String} relationshipModelName
        @param {String} kind
        @return String
      */
      keyForRelationship: function (relationshipModelName, kind) {
        var key = activemodel$adapter$lib$system$active$model$serializer$$decamelize(relationshipModelName);
        if (kind === "belongsTo") {
          return key + "_id";
        } else if (kind === "hasMany") {
          return ember$inflector$lib$lib$system$string$$singularize(key) + "_ids";
        } else {
          return key;
        }
      },

      /**
       `keyForLink` can be used to define a custom key when deserializing link
       properties. The `ActiveModelSerializer` camelizes link keys by default.
        @method keyForLink
       @param {String} key
       @param {String} kind `belongsTo` or `hasMany`
       @return {String} normalized key
      */
      keyForLink: function (key, relationshipKind) {
        return activemodel$adapter$lib$system$active$model$serializer$$camelize(key);
      },

      /*
        Does not serialize hasMany relationships by default.
      */
      serializeHasMany: Ember.K,

      /**
       Underscores the JSON root keys when serializing.
         @method payloadKeyFromModelName
        @param {String} modelName
        @return {String}
      */
      payloadKeyFromModelName: function (modelName) {
        return activemodel$adapter$lib$system$active$model$serializer$$underscore(activemodel$adapter$lib$system$active$model$serializer$$decamelize(modelName));
      },

      /**
        Serializes a polymorphic type as a fully capitalized model name.
         @method serializePolymorphicType
        @param {DS.Snapshot} snapshot
        @param {Object} json
        @param {Object} relationship
      */
      serializePolymorphicType: function (snapshot, json, relationship) {
        var key = relationship.key;
        var belongsTo = snapshot.belongsTo(key);
        var jsonKey = activemodel$adapter$lib$system$active$model$serializer$$underscore(key + "_type");

        if (Ember.isNone(belongsTo)) {
          json[jsonKey] = null;
        } else {
          json[jsonKey] = activemodel$adapter$lib$system$active$model$serializer$$classify(belongsTo.modelName).replace(/(\/)([a-z])/g, function (match, separator, chr) {
            return match.toUpperCase();
          }).replace("/", "::");
        }
      },

      // EXTRACT

      /**
        Add extra step to `DS.RESTSerializer.normalize` so links are normalized.
         If your payload looks like:
         ```js
        {
          "post": {
            "id": 1,
            "title": "Rails is omakase",
            "links": { "flagged_comments": "api/comments/flagged" }
          }
        }
        ```
         The normalized version would look like this
         ```js
        {
          "post": {
            "id": 1,
            "title": "Rails is omakase",
            "links": { "flaggedComments": "api/comments/flagged" }
          }
        }
        ```
         @method normalize
        @param {subclass of DS.Model} typeClass
        @param {Object} hash
        @param {String} prop
        @return Object
      */
      normalize: function (typeClass, hash, prop) {
        this.normalizeLinks(hash);
        return this._super(typeClass, hash, prop);
      },

      /**
        Convert `snake_cased` links  to `camelCase`
         @method normalizeLinks
        @param {Object} data
      */

      normalizeLinks: function (data) {
        if (data.links) {
          var links = data.links;

          for (var link in links) {
            var camelizedLink = activemodel$adapter$lib$system$active$model$serializer$$camelize(link);

            if (camelizedLink !== link) {
              links[camelizedLink] = links[link];
              delete links[link];
            }
          }
        }
      },

      /**
        Normalize the polymorphic type from the JSON.
         Normalize:
        ```js
          {
            id: "1"
            minion: { type: "evil_minion", id: "12"}
          }
        ```
         To:
        ```js
          {
            id: "1"
            minion: { type: "evilMinion", id: "12"}
          }
        ```
         @param {Subclass of DS.Model} typeClass
        @method normalizeRelationships
        @private
      */
      normalizeRelationships: function (typeClass, hash) {

        if (this.keyForRelationship) {
          typeClass.eachRelationship(function (key, relationship) {
            var payloadKey, payload;
            if (relationship.options.polymorphic) {
              payloadKey = this.keyForAttribute(key, "deserialize");
              payload = hash[payloadKey];
              if (payload && payload.type) {
                payload.type = this.modelNameFromPayloadKey(payload.type);
              } else if (payload && relationship.kind === "hasMany") {
                var self = this;
                activemodel$adapter$lib$system$active$model$serializer$$forEach(payload, function (single) {
                  single.type = self.modelNameFromPayloadKey(single.type);
                });
              }
            } else {
              payloadKey = this.keyForRelationship(key, relationship.kind, "deserialize");
              if (!hash.hasOwnProperty(payloadKey)) {
                return;
              }
              payload = hash[payloadKey];
            }

            hash[key] = payload;

            if (key !== payloadKey) {
              delete hash[payloadKey];
            }
          }, this);
        }
      },
      modelNameFromPayloadKey: function (key) {
        var convertedFromRubyModule = activemodel$adapter$lib$system$active$model$serializer$$camelize(ember$inflector$lib$lib$system$string$$singularize(key)).replace(/(^|\:)([A-Z])/g, function (match, separator, chr) {
          return match.toLowerCase();
        }).replace("::", "/");
        return ember$data$lib$system$normalize$model$name$$default(convertedFromRubyModule);
      }
    });

    var activemodel$adapter$lib$system$active$model$serializer$$default = activemodel$adapter$lib$system$active$model$serializer$$ActiveModelSerializer;
    function ember$data$lib$system$container$proxy$$ContainerProxy(container) {
      this.container = container;
    }

    ember$data$lib$system$container$proxy$$ContainerProxy.prototype.aliasedFactory = function (path, preLookup) {
      var _this = this;

      return {
        create: function () {
          if (preLookup) {
            preLookup();
          }

          return _this.container.lookup(path);
        }
      };
    };

    ember$data$lib$system$container$proxy$$ContainerProxy.prototype.registerAlias = function (source, dest, preLookup) {
      var factory = this.aliasedFactory(dest, preLookup);

      return this.container.register(source, factory);
    };

    ember$data$lib$system$container$proxy$$ContainerProxy.prototype.registerDeprecation = function (deprecated, valid) {
      var preLookupCallback = function () {
        Ember.deprecate("You tried to look up '" + deprecated + "', " + "but this has been deprecated in favor of '" + valid + "'.", false);
      };

      return this.registerAlias(deprecated, valid, preLookupCallback);
    };

    ember$data$lib$system$container$proxy$$ContainerProxy.prototype.registerDeprecations = function (proxyPairs) {
      var i, proxyPair, deprecated, valid;

      for (i = proxyPairs.length; i > 0; i--) {
        proxyPair = proxyPairs[i - 1];
        deprecated = proxyPair["deprecated"];
        valid = proxyPair["valid"];

        this.registerDeprecation(deprecated, valid);
      }
    };

    var ember$data$lib$system$container$proxy$$default = ember$data$lib$system$container$proxy$$ContainerProxy;
    var activemodel$adapter$lib$setup$container$$default = activemodel$adapter$lib$setup$container$$setupActiveModelAdapter;
    function activemodel$adapter$lib$setup$container$$setupActiveModelAdapter(registry, application) {
      var proxy = new ember$data$lib$system$container$proxy$$default(registry);
      proxy.registerDeprecations([{ deprecated: "serializer:_ams", valid: "serializer:-active-model" }, { deprecated: "adapter:_ams", valid: "adapter:-active-model" }]);

      registry.register("serializer:-active-model", activemodel$adapter$lib$system$active$model$serializer$$default.extend({ isNewSerializerAPI: true }));
      registry.register("adapter:-active-model", activemodel$adapter$lib$system$active$model$adapter$$default);
    }
    var ember$data$lib$core$$DS = Ember.Namespace.create({
      VERSION: '1.13.3'
    });

    if (Ember.libraries) {
      Ember.libraries.registerCoreLibrary('Ember Data', ember$data$lib$core$$DS.VERSION);
    }

    //jshint ignore: line
    var ember$data$lib$core$$EMBER_DATA_FEATURES = {};

    Ember.merge(Ember.FEATURES, ember$data$lib$core$$EMBER_DATA_FEATURES);

    var ember$data$lib$core$$default = ember$data$lib$core$$DS;
    var ember$data$lib$system$store$common$$get = Ember.get;
    function ember$data$lib$system$store$common$$_bind(fn) {
      var args = Array.prototype.slice.call(arguments, 1);

      return function () {
        return fn.apply(undefined, args);
      };
    }

    function ember$data$lib$system$store$common$$_guard(promise, test) {
      var guarded = promise["finally"](function () {
        if (!test()) {
          guarded._subscribers.length = 0;
        }
      });

      return guarded;
    }

    function ember$data$lib$system$store$common$$_objectIsAlive(object) {
      return !(ember$data$lib$system$store$common$$get(object, "isDestroyed") || ember$data$lib$system$store$common$$get(object, "isDestroying"));
    }

    function ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, type) {
      var serializer = adapter.serializer;

      if (serializer === undefined) {
        serializer = store.serializerFor(type);
      }

      if (serializer === null || serializer === undefined) {
        serializer = {
          extract: function (store, type, payload) {
            return payload;
          }
        };
      }

      return serializer;
    }

    var ember$data$lib$system$store$finders$$Promise = Ember.RSVP.Promise;
    var ember$data$lib$system$store$finders$$map = Ember.ArrayPolyfills.map;
    var ember$data$lib$system$store$finders$$get = Ember.get;
    function ember$data$lib$system$store$finders$$_find(adapter, store, typeClass, id, internalModel, options) {
      var snapshot = internalModel.createSnapshot(options);
      var promise;
      if (!adapter.findRecord) {
        Ember.deprecate("Adapter#find has been deprecated and renamed to `findRecord`.");
        promise = adapter.find(store, typeClass, id, snapshot);
      } else {
        promise = adapter.findRecord(store, typeClass, id, snapshot);
      }
      var serializer = ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, internalModel.type.modelName);
      var label = "DS: Handle Adapter#find of " + typeClass + " with id: " + id;

      promise = ember$data$lib$system$store$finders$$Promise.cast(promise, label);
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, store));

      return promise.then(function (adapterPayload) {
        Ember.assert("You made a request for a " + typeClass.typeClassKey + " with id " + id + ", but the adapter's response did not have any data", adapterPayload);
        return store._adapterRun(function () {
          var requestType = ember$data$lib$system$store$finders$$get(serializer, "isNewSerializerAPI") ? "findRecord" : "find";
          var payload = ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, typeClass, adapterPayload, id, requestType);
          //TODO Optimize
          var record = ember$data$lib$system$store$serializer$response$$pushPayload(store, payload);
          return record._internalModel;
        });
      }, function (error) {
        internalModel.notFound();
        if (internalModel.isEmpty()) {
          internalModel.unloadRecord();
        }

        throw error;
      }, "DS: Extract payload of '" + typeClass + "'");
    }

    function ember$data$lib$system$store$finders$$_findMany(adapter, store, typeClass, ids, internalModels) {
      var snapshots = Ember.A(internalModels).invoke("createSnapshot");
      var promise = adapter.findMany(store, typeClass, ids, snapshots);
      var serializer = ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, typeClass.modelName);
      var label = "DS: Handle Adapter#findMany of " + typeClass;

      if (promise === undefined) {
        throw new Error("adapter.findMany returned undefined, this was very likely a mistake");
      }

      promise = ember$data$lib$system$store$finders$$Promise.cast(promise, label);
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, store));

      return promise.then(function (adapterPayload) {
        return store._adapterRun(function () {
          var payload = ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, typeClass, adapterPayload, null, "findMany");
          //TODO Optimize, no need to materialize here
          var records = ember$data$lib$system$store$serializer$response$$pushPayload(store, payload);
          return ember$data$lib$system$store$finders$$map.call(records, function (record) {
            return record._internalModel;
          });
        });
      }, null, "DS: Extract payload of " + typeClass);
    }

    function ember$data$lib$system$store$finders$$_findHasMany(adapter, store, internalModel, link, relationship) {
      var snapshot = internalModel.createSnapshot();
      var typeClass = store.modelFor(relationship.type);
      var promise = adapter.findHasMany(store, snapshot, link, relationship);
      var serializer = ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, relationship.type);
      var label = "DS: Handle Adapter#findHasMany of " + internalModel + " : " + relationship.type;

      promise = ember$data$lib$system$store$finders$$Promise.cast(promise, label);
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, store));
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, internalModel));

      return promise.then(function (adapterPayload) {
        return store._adapterRun(function () {
          var payload = ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, typeClass, adapterPayload, null, "findHasMany");
          //TODO Use a non record creating push
          var records = ember$data$lib$system$store$serializer$response$$pushPayload(store, payload);
          var recordArray = ember$data$lib$system$store$finders$$map.call(records, function (record) {
            return record._internalModel;
          });
          if (serializer.get("isNewSerializerAPI")) {
            recordArray.meta = payload.meta;
          }
          return recordArray;
        });
      }, null, "DS: Extract payload of " + internalModel + " : hasMany " + relationship.type);
    }

    function ember$data$lib$system$store$finders$$_findBelongsTo(adapter, store, internalModel, link, relationship) {
      var snapshot = internalModel.createSnapshot();
      var typeClass = store.modelFor(relationship.type);
      var promise = adapter.findBelongsTo(store, snapshot, link, relationship);
      var serializer = ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, relationship.type);
      var label = "DS: Handle Adapter#findBelongsTo of " + internalModel + " : " + relationship.type;

      promise = ember$data$lib$system$store$finders$$Promise.cast(promise, label);
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, store));
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, internalModel));

      return promise.then(function (adapterPayload) {
        return store._adapterRun(function () {
          var payload = ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, typeClass, adapterPayload, null, "findBelongsTo");

          if (!payload.data) {
            return null;
          }

          //TODO Optimize
          var record = ember$data$lib$system$store$serializer$response$$pushPayload(store, payload);
          return record._internalModel;
        });
      }, null, "DS: Extract payload of " + internalModel + " : " + relationship.type);
    }

    function ember$data$lib$system$store$finders$$_findAll(adapter, store, typeClass, sinceToken, options) {
      var modelName = typeClass.modelName;
      var recordArray = store.peekAll(modelName);
      var snapshotArray = recordArray.createSnapshot(options);
      var promise = adapter.findAll(store, typeClass, sinceToken, snapshotArray);
      var serializer = ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, modelName);
      var label = "DS: Handle Adapter#findAll of " + typeClass;

      promise = ember$data$lib$system$store$finders$$Promise.cast(promise, label);
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, store));

      return promise.then(function (adapterPayload) {
        store._adapterRun(function () {
          var payload = ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, typeClass, adapterPayload, null, "findAll");
          //TODO Optimize
          ember$data$lib$system$store$serializer$response$$pushPayload(store, payload);
        });

        store.didUpdateAll(typeClass);
        return store.peekAll(modelName);
      }, null, "DS: Extract payload of findAll " + typeClass);
    }

    function ember$data$lib$system$store$finders$$_query(adapter, store, typeClass, query, recordArray) {
      var modelName = typeClass.modelName;
      var promise;

      if (!adapter.query) {
        Ember.deprecate("Adapter#findQuery has been deprecated and renamed to `query`.");
        promise = adapter.findQuery(store, typeClass, query, recordArray);
      } else {
        promise = adapter.query(store, typeClass, query, recordArray);
      }

      var serializer = ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, modelName);
      var label = "DS: Handle Adapter#findQuery of " + typeClass;

      promise = ember$data$lib$system$store$finders$$Promise.cast(promise, label);
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, store));

      return promise.then(function (adapterPayload) {
        var records;
        store._adapterRun(function () {
          var requestType = ember$data$lib$system$store$finders$$get(serializer, "isNewSerializerAPI") ? "query" : "findQuery";
          var payload = ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, typeClass, adapterPayload, null, requestType);
          //TODO Optimize
          records = ember$data$lib$system$store$serializer$response$$pushPayload(store, payload);
        });

        recordArray.loadRecords(records);
        return recordArray;
      }, null, "DS: Extract payload of findQuery " + typeClass);
    }

    function ember$data$lib$system$store$finders$$_queryRecord(adapter, store, typeClass, query) {
      var modelName = typeClass.modelName;
      var promise = adapter.queryRecord(store, typeClass, query);
      var serializer = ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, modelName);
      var label = "DS: Handle Adapter#queryRecord of " + typeClass;

      promise = ember$data$lib$system$store$finders$$Promise.cast(promise, label);
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, store));

      return promise.then(function (adapterPayload) {
        var record;
        store._adapterRun(function () {
          var payload = ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, typeClass, adapterPayload, null, "queryRecord");
          //TODO Optimize
          record = ember$data$lib$system$store$serializer$response$$pushPayload(store, payload);
        });

        return record;
      }, null, "DS: Extract payload of queryRecord " + typeClass);
    }
    function ember$data$lib$system$snapshot$record$array$$SnapshotRecordArray(recordArray, meta, adapterOptions) {
      this._snapshots = null;
      this._recordArray = recordArray;
      this.length = recordArray.get('length');
      this.type = recordArray.get('type');
      this.meta = meta;
      this.adapterOptions = adapterOptions;
    }

    ember$data$lib$system$snapshot$record$array$$SnapshotRecordArray.prototype.snapshots = function () {
      if (this._snapshots) {
        return this._snapshots;
      }
      var recordArray = this._recordArray;
      this._snapshots = recordArray.invoke('createSnapshot');

      return this._snapshots;
    };

    var ember$data$lib$system$snapshot$record$array$$default = ember$data$lib$system$snapshot$record$array$$SnapshotRecordArray;

    var ember$data$lib$system$record$arrays$record$array$$get = Ember.get;
    var ember$data$lib$system$record$arrays$record$array$$set = Ember.set;

    var ember$data$lib$system$record$arrays$record$array$$default = Ember.ArrayProxy.extend(Ember.Evented, {
      /**
        The model type contained by this record array.
         @property type
        @type DS.Model
      */
      type: null,

      /**
        The array of client ids backing the record array. When a
        record is requested from the record array, the record
        for the client id at the same index is materialized, if
        necessary, by the store.
         @property content
        @private
        @type Ember.Array
      */
      content: null,

      /**
        The flag to signal a `RecordArray` is finished loading data.
         Example
         ```javascript
        var people = store.peekAll('person');
        people.get('isLoaded'); // true
        ```
         @property isLoaded
        @type Boolean
      */
      isLoaded: false,
      /**
        The flag to signal a `RecordArray` is currently loading data.
         Example
         ```javascript
        var people = store.peekAll('person');
        people.get('isUpdating'); // false
        people.update();
        people.get('isUpdating'); // true
        ```
         @property isUpdating
        @type Boolean
      */
      isUpdating: false,

      /**
        The store that created this record array.
         @property store
        @private
        @type DS.Store
      */
      store: null,

      /**
        Retrieves an object from the content by index.
         @method objectAtContent
        @private
        @param {Number} index
        @return {DS.Model} record
      */
      objectAtContent: function (index) {
        var content = ember$data$lib$system$record$arrays$record$array$$get(this, "content");
        var internalModel = content.objectAt(index);
        return internalModel && internalModel.getRecord();
      },

      /**
        Used to get the latest version of all of the records in this array
        from the adapter.
         Example
         ```javascript
        var people = store.peekAll('person');
        people.get('isUpdating'); // false
        people.update();
        people.get('isUpdating'); // true
        ```
         @method update
      */
      update: function () {
        if (ember$data$lib$system$record$arrays$record$array$$get(this, "isUpdating")) {
          return;
        }

        var store = ember$data$lib$system$record$arrays$record$array$$get(this, "store");
        var modelName = ember$data$lib$system$record$arrays$record$array$$get(this, "type.modelName");

        return store.findAll(modelName, { reload: true });
      },

      /**
        Adds an internal model to the `RecordArray` without duplicates
         @method addInternalModel
        @private
        @param {InternalModel} internalModel
        @param {number} an optional index to insert at
      */
      addInternalModel: function (internalModel, idx) {
        var content = ember$data$lib$system$record$arrays$record$array$$get(this, "content");
        if (idx === undefined) {
          content.addObject(internalModel);
        } else if (!content.contains(internalModel)) {
          content.insertAt(idx, internalModel);
        }
      },

      /**
        Removes an internalModel to the `RecordArray`.
         @method removeInternalModel
        @private
        @param {InternalModel} internalModel
      */
      removeInternalModel: function (internalModel) {
        ember$data$lib$system$record$arrays$record$array$$get(this, "content").removeObject(internalModel);
      },

      /**
        Saves all of the records in the `RecordArray`.
         Example
         ```javascript
        var messages = store.peekAll('message');
        messages.forEach(function(message) {
          message.set('hasBeenSeen', true);
        });
        messages.save();
        ```
         @method save
        @return {DS.PromiseArray} promise
      */
      save: function () {
        var recordArray = this;
        var promiseLabel = "DS: RecordArray#save " + ember$data$lib$system$record$arrays$record$array$$get(this, "type");
        var promise = Ember.RSVP.all(this.invoke("save"), promiseLabel).then(function (array) {
          return recordArray;
        }, null, "DS: RecordArray#save return RecordArray");

        return ember$data$lib$system$promise$proxies$$PromiseArray.create({ promise: promise });
      },

      _dissociateFromOwnRecords: function () {
        var array = this;

        this.get("content").forEach(function (record) {
          var recordArrays = record._recordArrays;

          if (recordArrays) {
            recordArrays["delete"](array);
          }
        });
      },

      /**
        @method _unregisterFromManager
        @private
      */
      _unregisterFromManager: function () {
        var manager = ember$data$lib$system$record$arrays$record$array$$get(this, "manager");
        manager.unregisterRecordArray(this);
      },

      willDestroy: function () {
        this._unregisterFromManager();
        this._dissociateFromOwnRecords();
        ember$data$lib$system$record$arrays$record$array$$set(this, "content", undefined);
        this._super.apply(this, arguments);
      },

      createSnapshot: function (options) {
        var adapterOptions = options && options.adapterOptions;
        var meta = this.get("meta");
        return new ember$data$lib$system$snapshot$record$array$$default(this, meta, adapterOptions);
      }
    });

    /**
      @module ember-data
    */

    var ember$data$lib$system$record$arrays$filtered$record$array$$get = Ember.get;

    var ember$data$lib$system$record$arrays$filtered$record$array$$default = ember$data$lib$system$record$arrays$record$array$$default.extend({
      /**
        The filterFunction is a function used to test records from the store to
        determine if they should be part of the record array.
         Example
         ```javascript
        var allPeople = store.peekAll('person');
        allPeople.mapBy('name'); // ["Tom Dale", "Yehuda Katz", "Trek Glowacki"]
         var people = store.filter('person', function(person) {
          if (person.get('name').match(/Katz$/)) { return true; }
        });
        people.mapBy('name'); // ["Yehuda Katz"]
         var notKatzFilter = function(person) {
          return !person.get('name').match(/Katz$/);
        };
        people.set('filterFunction', notKatzFilter);
        people.mapBy('name'); // ["Tom Dale", "Trek Glowacki"]
        ```
         @method filterFunction
        @param {DS.Model} record
        @return {Boolean} `true` if the record should be in the array
      */
      filterFunction: null,
      isLoaded: true,

      replace: function () {
        var type = ember$data$lib$system$record$arrays$filtered$record$array$$get(this, "type").toString();
        throw new Error("The result of a client-side filter (on " + type + ") is immutable.");
      },

      /**
        @method updateFilter
        @private
      */
      _updateFilter: function () {
        var manager = ember$data$lib$system$record$arrays$filtered$record$array$$get(this, "manager");
        manager.updateFilter(this, ember$data$lib$system$record$arrays$filtered$record$array$$get(this, "type"), ember$data$lib$system$record$arrays$filtered$record$array$$get(this, "filterFunction"));
      },

      updateFilter: Ember.observer(function () {
        Ember.run.once(this, this._updateFilter);
      }, "filterFunction")
    });

    var ember$data$lib$system$clone$null$$default = ember$data$lib$system$clone$null$$cloneNull;

    function ember$data$lib$system$clone$null$$cloneNull(source) {
      var clone = Ember.create(null);
      for (var key in source) {
        clone[key] = source[key];
      }
      return clone;
    }

    /**
      @module ember-data
    */

    var ember$data$lib$system$record$arrays$adapter$populated$record$array$$get = Ember.get;

    var ember$data$lib$system$record$arrays$adapter$populated$record$array$$default = ember$data$lib$system$record$arrays$record$array$$default.extend({
      query: null,

      replace: function () {
        var type = ember$data$lib$system$record$arrays$adapter$populated$record$array$$get(this, "type").toString();
        throw new Error("The result of a server query (on " + type + ") is immutable.");
      },

      /**
        @method load
        @private
        @param {Array} data
      */
      load: function (data) {
        var store = ember$data$lib$system$record$arrays$adapter$populated$record$array$$get(this, "store");
        var type = ember$data$lib$system$record$arrays$adapter$populated$record$array$$get(this, "type");
        var modelName = type.modelName;
        var records = store.pushMany(modelName, data);

        this.loadRecords(records);
      },

      /**
        @method loadRecords
        @param {Array} records
        @private
      */
      loadRecords: function (records) {
        var store = ember$data$lib$system$record$arrays$adapter$populated$record$array$$get(this, "store");
        var type = ember$data$lib$system$record$arrays$adapter$populated$record$array$$get(this, "type");
        var modelName = type.modelName;
        var meta = store.metadataFor(modelName);

        //TODO Optimize
        var internalModels = Ember.A(records).mapBy("_internalModel");
        this.setProperties({
          content: Ember.A(internalModels),
          isLoaded: true,
          meta: ember$data$lib$system$clone$null$$default(meta)
        });

        internalModels.forEach(function (record) {
          this.manager.recordArraysForRecord(record).add(this);
        }, this);

        // TODO: should triggering didLoad event be the last action of the runLoop?
        Ember.run.once(this, "trigger", "didLoad");
      }
    });

    var ember$data$lib$system$ordered$set$$EmberOrderedSet = Ember.OrderedSet;
    var ember$data$lib$system$ordered$set$$guidFor = Ember.guidFor;

    var ember$data$lib$system$ordered$set$$OrderedSet = function () {
      this._super$constructor();
    };

    ember$data$lib$system$ordered$set$$OrderedSet.create = function () {
      var Constructor = this;
      return new Constructor();
    };

    ember$data$lib$system$ordered$set$$OrderedSet.prototype = Ember.create(ember$data$lib$system$ordered$set$$EmberOrderedSet.prototype);
    ember$data$lib$system$ordered$set$$OrderedSet.prototype.constructor = ember$data$lib$system$ordered$set$$OrderedSet;
    ember$data$lib$system$ordered$set$$OrderedSet.prototype._super$constructor = ember$data$lib$system$ordered$set$$EmberOrderedSet;

    ember$data$lib$system$ordered$set$$OrderedSet.prototype.addWithIndex = function (obj, idx) {
      var guid = ember$data$lib$system$ordered$set$$guidFor(obj);
      var presenceSet = this.presenceSet;
      var list = this.list;

      if (presenceSet[guid] === true) {
        return;
      }

      presenceSet[guid] = true;

      if (idx === undefined || idx == null) {
        list.push(obj);
      } else {
        list.splice(idx, 0, obj);
      }

      this.size += 1;

      return this;
    };

    var ember$data$lib$system$ordered$set$$default = ember$data$lib$system$ordered$set$$OrderedSet;
    var ember$data$lib$system$record$array$manager$$get = Ember.get;
    var ember$data$lib$system$record$array$manager$$forEach = Ember.ArrayPolyfills.forEach;
    var ember$data$lib$system$record$array$manager$$indexOf = Ember.ArrayPolyfills.indexOf;

    var ember$data$lib$system$record$array$manager$$default = Ember.Object.extend({
      init: function () {
        var _this = this;

        this.filteredRecordArrays = ember$data$lib$system$map$$MapWithDefault.create({
          defaultValue: function () {
            return [];
          }
        });

        this.liveRecordArrays = ember$data$lib$system$map$$MapWithDefault.create({
          defaultValue: function (typeClass) {
            return _this.createRecordArray(typeClass);
          }
        });

        this.changedRecords = [];
        this._adapterPopulatedRecordArrays = [];
      },

      recordDidChange: function (record) {
        if (this.changedRecords.push(record) !== 1) {
          return;
        }

        Ember.run.schedule("actions", this, this.updateRecordArrays);
      },

      recordArraysForRecord: function (record) {
        record._recordArrays = record._recordArrays || ember$data$lib$system$ordered$set$$default.create();
        return record._recordArrays;
      },

      /**
        This method is invoked whenever data is loaded into the store by the
        adapter or updated by the adapter, or when a record has changed.
         It updates all record arrays that a record belongs to.
         To avoid thrashing, it only runs at most once per run loop.
         @method updateRecordArrays
      */
      updateRecordArrays: function () {
        ember$data$lib$system$record$array$manager$$forEach.call(this.changedRecords, function (record) {
          if (record.isDeleted()) {
            this._recordWasDeleted(record);
          } else {
            this._recordWasChanged(record);
          }
        }, this);

        this.changedRecords.length = 0;
      },

      _recordWasDeleted: function (record) {
        var recordArrays = record._recordArrays;

        if (!recordArrays) {
          return;
        }

        recordArrays.forEach(function (array) {
          array.removeInternalModel(record);
        });

        record._recordArrays = null;
      },

      _recordWasChanged: function (record) {
        var typeClass = record.type;
        var recordArrays = this.filteredRecordArrays.get(typeClass);
        var filter;
        ember$data$lib$system$record$array$manager$$forEach.call(recordArrays, function (array) {
          filter = ember$data$lib$system$record$array$manager$$get(array, "filterFunction");
          this.updateFilterRecordArray(array, filter, typeClass, record);
        }, this);
      },

      //Need to update live arrays on loading
      recordWasLoaded: function (record) {
        var typeClass = record.type;
        var recordArrays = this.filteredRecordArrays.get(typeClass);
        var filter;

        ember$data$lib$system$record$array$manager$$forEach.call(recordArrays, function (array) {
          filter = ember$data$lib$system$record$array$manager$$get(array, "filterFunction");
          this.updateFilterRecordArray(array, filter, typeClass, record);
        }, this);

        if (this.liveRecordArrays.has(typeClass)) {
          var liveRecordArray = this.liveRecordArrays.get(typeClass);
          this._addRecordToRecordArray(liveRecordArray, record);
        }
      },
      /**
        Update an individual filter.
         @method updateFilterRecordArray
        @param {DS.FilteredRecordArray} array
        @param {Function} filter
        @param {DS.Model} typeClass
        @param {InternalModel} record
      */
      updateFilterRecordArray: function (array, filter, typeClass, record) {
        var shouldBeInArray = filter(record.getRecord());
        var recordArrays = this.recordArraysForRecord(record);
        if (shouldBeInArray) {
          this._addRecordToRecordArray(array, record);
        } else {
          recordArrays["delete"](array);
          array.removeInternalModel(record);
        }
      },

      _addRecordToRecordArray: function (array, record) {
        var recordArrays = this.recordArraysForRecord(record);
        if (!recordArrays.has(array)) {
          array.addInternalModel(record);
          recordArrays.add(array);
        }
      },

      populateLiveRecordArray: function (array, modelName) {
        var typeMap = this.store.typeMapFor(modelName);
        var records = typeMap.records;
        var record;

        for (var i = 0, l = records.length; i < l; i++) {
          record = records[i];

          if (!record.isDeleted() && !record.isEmpty()) {
            this._addRecordToRecordArray(array, record);
          }
        }
      },

      /**
        This method is invoked if the `filterFunction` property is
        changed on a `DS.FilteredRecordArray`.
         It essentially re-runs the filter from scratch. This same
        method is invoked when the filter is created in th first place.
         @method updateFilter
        @param {Array} array
        @param {String} modelName
        @param {Function} filter
      */
      updateFilter: function (array, modelName, filter) {
        var typeMap = this.store.typeMapFor(modelName);
        var records = typeMap.records;
        var record;

        for (var i = 0, l = records.length; i < l; i++) {
          record = records[i];

          if (!record.isDeleted() && !record.isEmpty()) {
            this.updateFilterRecordArray(array, filter, modelName, record);
          }
        }
      },

      /**
        Get the `DS.RecordArray` for a type, which contains all loaded records of
        given type.
         @method liveRecordArrayFor
        @param {Class} typeClass
        @return {DS.RecordArray}
      */
      liveRecordArrayFor: function (typeClass) {
        return this.liveRecordArrays.get(typeClass);
      },

      /**
        Create a `DS.RecordArray` for a type.
         @method createRecordArray
        @param {Class} typeClass
        @return {DS.RecordArray}
      */
      createRecordArray: function (typeClass) {
        var array = ember$data$lib$system$record$arrays$record$array$$default.create({
          type: typeClass,
          content: Ember.A(),
          store: this.store,
          isLoaded: true,
          manager: this
        });

        return array;
      },

      /**
        Create a `DS.FilteredRecordArray` for a type and register it for updates.
         @method createFilteredRecordArray
        @param {DS.Model} typeClass
        @param {Function} filter
        @param {Object} query (optional
        @return {DS.FilteredRecordArray}
      */
      createFilteredRecordArray: function (typeClass, filter, query) {
        var array = ember$data$lib$system$record$arrays$filtered$record$array$$default.create({
          query: query,
          type: typeClass,
          content: Ember.A(),
          store: this.store,
          manager: this,
          filterFunction: filter
        });

        this.registerFilteredRecordArray(array, typeClass, filter);

        return array;
      },

      /**
        Create a `DS.AdapterPopulatedRecordArray` for a type with given query.
         @method createAdapterPopulatedRecordArray
        @param {DS.Model} typeClass
        @param {Object} query
        @return {DS.AdapterPopulatedRecordArray}
      */
      createAdapterPopulatedRecordArray: function (typeClass, query) {
        var array = ember$data$lib$system$record$arrays$adapter$populated$record$array$$default.create({
          type: typeClass,
          query: query,
          content: Ember.A(),
          store: this.store,
          manager: this
        });

        this._adapterPopulatedRecordArrays.push(array);

        return array;
      },

      /**
        Register a RecordArray for a given type to be backed by
        a filter function. This will cause the array to update
        automatically when records of that type change attribute
        values or states.
         @method registerFilteredRecordArray
        @param {DS.RecordArray} array
        @param {DS.Model} typeClass
        @param {Function} filter
      */
      registerFilteredRecordArray: function (array, typeClass, filter) {
        var recordArrays = this.filteredRecordArrays.get(typeClass);
        recordArrays.push(array);

        this.updateFilter(array, typeClass, filter);
      },

      /**
        Unregister a RecordArray.
        So manager will not update this array.
         @method unregisterRecordArray
        @param {DS.RecordArray} array
      */
      unregisterRecordArray: function (array) {
        var typeClass = array.type;

        // unregister filtered record array
        var recordArrays = this.filteredRecordArrays.get(typeClass);
        var index = ember$data$lib$system$record$array$manager$$indexOf.call(recordArrays, array);
        if (index !== -1) {
          recordArrays.splice(index, 1);

          // unregister live record array
        } else if (this.liveRecordArrays.has(typeClass)) {
          var liveRecordArrayForType = this.liveRecordArrayFor(typeClass);
          if (array === liveRecordArrayForType) {
            this.liveRecordArrays["delete"](typeClass);
          }
        }
      },

      willDestroy: function () {
        this._super.apply(this, arguments);

        this.filteredRecordArrays.forEach(function (value) {
          ember$data$lib$system$record$array$manager$$forEach.call(ember$data$lib$system$record$array$manager$$flatten(value), ember$data$lib$system$record$array$manager$$destroy);
        });
        this.liveRecordArrays.forEach(ember$data$lib$system$record$array$manager$$destroy);
        ember$data$lib$system$record$array$manager$$forEach.call(this._adapterPopulatedRecordArrays, ember$data$lib$system$record$array$manager$$destroy);
      }
    });

    function ember$data$lib$system$record$array$manager$$destroy(entry) {
      entry.destroy();
    }

    function ember$data$lib$system$record$array$manager$$flatten(list) {
      var length = list.length;
      var result = Ember.A();

      for (var i = 0; i < length; i++) {
        result = result.concat(list[i]);
      }

      return result;
    }

    /**
     * The `ContainerInstanceCache` serves as a lazy cache for looking up
     * instances of serializers and adapters. It has some additional logic for
     * finding the 'fallback' adapter or serializer.
     *
     * The 'fallback' adapter or serializer is an adapter or serializer that is looked up
     * when the preferred lookup fails. For example, say you try to look up `adapter:post`,
     * but there is no entry (app/adapters/post.js in EmberCLI) for `adapter:post` in the registry.
     *
     * The `fallbacks` array passed will then be used; the first entry in the fallbacks array
     * that exists in the container will then be cached for `adapter:post`. So, the next time you
     * look up `adapter:post`, you'll get the `adapter:application` instance (or whatever the fallback
     * was if `adapter:application` doesn't exist).
     *
     * @private
     * @class ContainerInstanceCache
     *
    */
    function ember$data$lib$system$store$container$instance$cache$$ContainerInstanceCache(container) {
      this._container = container;
      this._cache = ember$lib$main$$default.create(null);
    }

    ember$data$lib$system$store$container$instance$cache$$ContainerInstanceCache.prototype = ember$lib$main$$default.create(null);

    ember$lib$main$$default.merge(ember$data$lib$system$store$container$instance$cache$$ContainerInstanceCache.prototype, {
      get: function (type, preferredKey, fallbacks) {
        var cache = this._cache;
        var preferredLookupKey = '' + type + ':' + preferredKey;

        if (!(preferredLookupKey in cache)) {
          var instance = this.instanceFor(preferredLookupKey) || this._findInstance(type, fallbacks);
          if (instance) {
            cache[preferredLookupKey] = instance;
          }
        }
        return cache[preferredLookupKey];
      },

      _findInstance: function (type, fallbacks) {
        for (var i = 0, _length = fallbacks.length; i < _length; i++) {
          var fallback = fallbacks[i];
          var lookupKey = '' + type + ':' + fallback;
          var instance = this.instanceFor(lookupKey);

          if (instance) {
            return instance;
          }
        }
      },

      instanceFor: function (key) {
        if (key === 'adapter:-rest') {
          ember$lib$main$$default.deprecate('You are currently using the default DS.RESTAdapter adapter. For Ember 2.0 the default adapter will be DS.JSONAPIAdapter. If you would like to continue using DS.RESTAdapter please create an application adapter that extends DS.RESTAdapter.');
        }

        var cache = this._cache;
        if (!cache[key]) {
          var instance = this._container.lookup(key);
          if (instance) {
            cache[key] = instance;
          }
        }
        return cache[key];
      },

      destroy: function () {
        var cache = this._cache;
        var cacheEntries = ember$lib$main$$default.keys(cache);

        for (var i = 0, _length2 = cacheEntries.length; i < _length2; i++) {
          var cacheKey = cacheEntries[i];
          var cacheEntry = cache[cacheKey];
          if (cacheEntry) {
            cacheEntry.destroy();
          }
        }
        this._container = null;
      },

      constructor: ember$data$lib$system$store$container$instance$cache$$ContainerInstanceCache,

      toString: function () {
        return 'ContainerInstanceCache';
      }
    });

    var ember$data$lib$system$store$container$instance$cache$$default = ember$data$lib$system$store$container$instance$cache$$ContainerInstanceCache;
    function ember$data$lib$system$merge$$merge(original, updates) {
      if (!updates || typeof updates !== 'object') {
        return original;
      }

      var props = Ember.keys(updates);
      var prop;
      var length = props.length;

      for (var i = 0; i < length; i++) {
        prop = props[i];
        original[prop] = updates[prop];
      }

      return original;
    }

    var ember$data$lib$system$merge$$default = ember$data$lib$system$merge$$merge;

    var ember$data$lib$system$model$states$$get = Ember.get;
    /*
      This file encapsulates the various states that a record can transition
      through during its lifecycle.
    */
    /**
      ### State

      Each record has a `currentState` property that explicitly tracks what
      state a record is in at any given time. For instance, if a record is
      newly created and has not yet been sent to the adapter to be saved,
      it would be in the `root.loaded.created.uncommitted` state.  If a
      record has had local modifications made to it that are in the
      process of being saved, the record would be in the
      `root.loaded.updated.inFlight` state. (This state paths will be
      explained in more detail below.)

      Events are sent by the record or its store to the record's
      `currentState` property. How the state reacts to these events is
      dependent on which state it is in. In some states, certain events
      will be invalid and will cause an exception to be raised.

      States are hierarchical and every state is a substate of the
      `RootState`. For example, a record can be in the
      `root.deleted.uncommitted` state, then transition into the
      `root.deleted.inFlight` state. If a child state does not implement
      an event handler, the state manager will attempt to invoke the event
      on all parent states until the root state is reached. The state
      hierarchy of a record is described in terms of a path string. You
      can determine a record's current state by getting the state's
      `stateName` property:

      ```javascript
      record.get('currentState.stateName');
      //=> "root.created.uncommitted"
       ```

      The hierarchy of valid states that ship with ember data looks like
      this:

      ```text
      * root
        * deleted
          * saved
          * uncommitted
          * inFlight
        * empty
        * loaded
          * created
            * uncommitted
            * inFlight
          * saved
          * updated
            * uncommitted
            * inFlight
        * loading
      ```

      The `DS.Model` states are themselves stateless. What that means is
      that, the hierarchical states that each of *those* points to is a
      shared data structure. For performance reasons, instead of each
      record getting its own copy of the hierarchy of states, each record
      points to this global, immutable shared instance. How does a state
      know which record it should be acting on? We pass the record
      instance into the state's event handlers as the first argument.

      The record passed as the first parameter is where you should stash
      state about the record if needed; you should never store data on the state
      object itself.

      ### Events and Flags

      A state may implement zero or more events and flags.

      #### Events

      Events are named functions that are invoked when sent to a record. The
      record will first look for a method with the given name on the
      current state. If no method is found, it will search the current
      state's parent, and then its grandparent, and so on until reaching
      the top of the hierarchy. If the root is reached without an event
      handler being found, an exception will be raised. This can be very
      helpful when debugging new features.

      Here's an example implementation of a state with a `myEvent` event handler:

      ```javascript
      aState: DS.State.create({
        myEvent: function(manager, param) {
          console.log("Received myEvent with", param);
        }
      })
      ```

      To trigger this event:

      ```javascript
      record.send('myEvent', 'foo');
      //=> "Received myEvent with foo"
      ```

      Note that an optional parameter can be sent to a record's `send()` method,
      which will be passed as the second parameter to the event handler.

      Events should transition to a different state if appropriate. This can be
      done by calling the record's `transitionTo()` method with a path to the
      desired state. The state manager will attempt to resolve the state path
      relative to the current state. If no state is found at that path, it will
      attempt to resolve it relative to the current state's parent, and then its
      parent, and so on until the root is reached. For example, imagine a hierarchy
      like this:

          * created
            * uncommitted <-- currentState
            * inFlight
          * updated
            * inFlight

      If we are currently in the `uncommitted` state, calling
      `transitionTo('inFlight')` would transition to the `created.inFlight` state,
      while calling `transitionTo('updated.inFlight')` would transition to
      the `updated.inFlight` state.

      Remember that *only events* should ever cause a state transition. You should
      never call `transitionTo()` from outside a state's event handler. If you are
      tempted to do so, create a new event and send that to the state manager.

      #### Flags

      Flags are Boolean values that can be used to introspect a record's current
      state in a more user-friendly way than examining its state path. For example,
      instead of doing this:

      ```javascript
      var statePath = record.get('stateManager.currentPath');
      if (statePath === 'created.inFlight') {
        doSomething();
      }
      ```

      You can say:

      ```javascript
      if (record.get('isNew') && record.get('isSaving')) {
        doSomething();
      }
      ```

      If your state does not set a value for a given flag, the value will
      be inherited from its parent (or the first place in the state hierarchy
      where it is defined).

      The current set of flags are defined below. If you want to add a new flag,
      in addition to the area below, you will also need to declare it in the
      `DS.Model` class.


       * [isEmpty](DS.Model.html#property_isEmpty)
       * [isLoading](DS.Model.html#property_isLoading)
       * [isLoaded](DS.Model.html#property_isLoaded)
       * [isDirty](DS.Model.html#property_isDirty)
       * [isSaving](DS.Model.html#property_isSaving)
       * [isDeleted](DS.Model.html#property_isDeleted)
       * [isNew](DS.Model.html#property_isNew)
       * [isValid](DS.Model.html#property_isValid)

      @namespace DS
      @class RootState
    */

    function ember$data$lib$system$model$states$$didSetProperty(internalModel, context) {
      if (context.value === context.originalValue) {
        delete internalModel._attributes[context.name];
        internalModel.send('propertyWasReset', context.name);
      } else if (context.value !== context.oldValue) {
        internalModel.send('becomeDirty');
      }

      internalModel.updateRecordArraysLater();
    }

    // Implementation notes:
    //
    // Each state has a boolean value for all of the following flags:
    //
    // * isLoaded: The record has a populated `data` property. When a
    //   record is loaded via `store.find`, `isLoaded` is false
    //   until the adapter sets it. When a record is created locally,
    //   its `isLoaded` property is always true.
    // * isDirty: The record has local changes that have not yet been
    //   saved by the adapter. This includes records that have been
    //   created (but not yet saved) or deleted.
    // * isSaving: The record has been committed, but
    //   the adapter has not yet acknowledged that the changes have
    //   been persisted to the backend.
    // * isDeleted: The record was marked for deletion. When `isDeleted`
    //   is true and `isDirty` is true, the record is deleted locally
    //   but the deletion was not yet persisted. When `isSaving` is
    //   true, the change is in-flight. When both `isDirty` and
    //   `isSaving` are false, the change has persisted.
    // * isError: The adapter reported that it was unable to save
    //   local changes to the backend. This may also result in the
    //   record having its `isValid` property become false if the
    //   adapter reported that server-side validations failed.
    // * isNew: The record was created on the client and the adapter
    //   did not yet report that it was successfully saved.
    // * isValid: The adapter did not report any server-side validation
    //   failures.

    // The dirty state is a abstract state whose functionality is
    // shared between the `created` and `updated` states.
    //
    // The deleted state shares the `isDirty` flag with the
    // subclasses of `DirtyState`, but with a very different
    // implementation.
    //
    // Dirty states have three child states:
    //
    // `uncommitted`: the store has not yet handed off the record
    //   to be saved.
    // `inFlight`: the store has handed off the record to be saved,
    //   but the adapter has not yet acknowledged success.
    // `invalid`: the record has invalid information and cannot be
    //   send to the adapter yet.
    var ember$data$lib$system$model$states$$DirtyState = {
      initialState: 'uncommitted',

      // FLAGS
      isDirty: true,

      // SUBSTATES

      // When a record first becomes dirty, it is `uncommitted`.
      // This means that there are local pending changes, but they
      // have not yet begun to be saved, and are not invalid.
      uncommitted: {
        // EVENTS
        didSetProperty: ember$data$lib$system$model$states$$didSetProperty,

        //TODO(Igor) reloading now triggers a
        //loadingData event, though it seems fine?
        loadingData: Ember.K,

        propertyWasReset: function (internalModel, name) {
          var length = Ember.keys(internalModel._attributes).length;
          var stillDirty = length > 0;

          if (!stillDirty) {
            internalModel.send('rolledBack');
          }
        },

        pushedData: Ember.K,

        becomeDirty: Ember.K,

        willCommit: function (internalModel) {
          internalModel.transitionTo('inFlight');
        },

        reloadRecord: function (internalModel, resolve) {
          resolve(internalModel.store.reloadRecord(internalModel));
        },

        rolledBack: function (internalModel) {
          internalModel.transitionTo('loaded.saved');
        },

        becameInvalid: function (internalModel) {
          internalModel.transitionTo('invalid');
        },

        rollback: function (internalModel) {
          internalModel.rollbackAttributes();
          internalModel.triggerLater('ready');
        }
      },

      // Once a record has been handed off to the adapter to be
      // saved, it is in the 'in flight' state. Changes to the
      // record cannot be made during this window.
      inFlight: {
        // FLAGS
        isSaving: true,

        // EVENTS
        didSetProperty: ember$data$lib$system$model$states$$didSetProperty,
        becomeDirty: Ember.K,
        pushedData: Ember.K,

        unloadRecord: ember$data$lib$system$model$states$$assertAgainstUnloadRecord,

        // TODO: More robust semantics around save-while-in-flight
        willCommit: Ember.K,

        didCommit: function (internalModel) {
          var dirtyType = ember$data$lib$system$model$states$$get(this, 'dirtyType');

          internalModel.transitionTo('saved');
          internalModel.send('invokeLifecycleCallbacks', dirtyType);
        },

        becameInvalid: function (internalModel) {
          internalModel.transitionTo('invalid');
          internalModel.send('invokeLifecycleCallbacks');
        },

        becameError: function (internalModel) {
          internalModel.transitionTo('uncommitted');
          internalModel.triggerLater('becameError', internalModel);
        }
      },

      // A record is in the `invalid` if the adapter has indicated
      // the the record failed server-side invalidations.
      invalid: {
        // FLAGS
        isValid: false,

        // EVENTS
        deleteRecord: function (internalModel) {
          internalModel.transitionTo('deleted.uncommitted');
          internalModel.disconnectRelationships();
        },

        didSetProperty: function (internalModel, context) {
          internalModel.removeErrorMessageFromAttribute(context.name);

          ember$data$lib$system$model$states$$didSetProperty(internalModel, context);
        },

        becomeDirty: Ember.K,

        pushedData: Ember.K,

        willCommit: function (internalModel) {
          internalModel.clearErrorMessages();
          internalModel.transitionTo('inFlight');
        },

        rolledBack: function (internalModel) {
          internalModel.clearErrorMessages();
          internalModel.triggerLater('ready');
        },

        becameValid: function (internalModel) {
          internalModel.transitionTo('uncommitted');
        },

        invokeLifecycleCallbacks: function (internalModel) {
          internalModel.triggerLater('becameInvalid', internalModel);
        },

        exit: function (internalModel) {
          internalModel._inFlightAttributes = Ember.create(null);
        }
      }
    };

    // The created and updated states are created outside the state
    // chart so we can reopen their substates and add mixins as
    // necessary.

    function ember$data$lib$system$model$states$$deepClone(object) {
      var clone = {};
      var value;

      for (var prop in object) {
        value = object[prop];
        if (value && typeof value === 'object') {
          clone[prop] = ember$data$lib$system$model$states$$deepClone(value);
        } else {
          clone[prop] = value;
        }
      }

      return clone;
    }

    function ember$data$lib$system$model$states$$mixin(original, hash) {
      for (var prop in hash) {
        original[prop] = hash[prop];
      }

      return original;
    }

    function ember$data$lib$system$model$states$$dirtyState(options) {
      var newState = ember$data$lib$system$model$states$$deepClone(ember$data$lib$system$model$states$$DirtyState);
      return ember$data$lib$system$model$states$$mixin(newState, options);
    }

    var ember$data$lib$system$model$states$$createdState = ember$data$lib$system$model$states$$dirtyState({
      dirtyType: 'created',
      // FLAGS
      isNew: true
    });

    ember$data$lib$system$model$states$$createdState.invalid.rolledBack = function (internalModel) {
      internalModel.transitionTo('deleted.saved');
    };
    ember$data$lib$system$model$states$$createdState.uncommitted.rolledBack = function (internalModel) {
      internalModel.transitionTo('deleted.saved');
    };

    var ember$data$lib$system$model$states$$updatedState = ember$data$lib$system$model$states$$dirtyState({
      dirtyType: 'updated'
    });

    ember$data$lib$system$model$states$$createdState.uncommitted.deleteRecord = function (internalModel) {
      internalModel.disconnectRelationships();
      internalModel.transitionTo('deleted.saved');
      internalModel.send('invokeLifecycleCallbacks');
    };

    ember$data$lib$system$model$states$$createdState.uncommitted.rollback = function (internalModel) {
      ember$data$lib$system$model$states$$DirtyState.uncommitted.rollback.apply(this, arguments);
      internalModel.transitionTo('deleted.saved');
    };

    ember$data$lib$system$model$states$$createdState.uncommitted.pushedData = function (internalModel) {
      internalModel.transitionTo('loaded.updated.uncommitted');
      internalModel.triggerLater('didLoad');
    };

    ember$data$lib$system$model$states$$createdState.uncommitted.propertyWasReset = Ember.K;

    function ember$data$lib$system$model$states$$assertAgainstUnloadRecord(internalModel) {
      Ember.assert('You can only unload a record which is not inFlight. `' + internalModel + '`', false);
    }

    ember$data$lib$system$model$states$$updatedState.inFlight.unloadRecord = ember$data$lib$system$model$states$$assertAgainstUnloadRecord;

    ember$data$lib$system$model$states$$updatedState.uncommitted.deleteRecord = function (internalModel) {
      internalModel.transitionTo('deleted.uncommitted');
      internalModel.disconnectRelationships();
    };

    var ember$data$lib$system$model$states$$RootState = {
      // FLAGS
      isEmpty: false,
      isLoading: false,
      isLoaded: false,
      isDirty: false,
      isSaving: false,
      isDeleted: false,
      isNew: false,
      isValid: true,

      // DEFAULT EVENTS

      // Trying to roll back if you're not in the dirty state
      // doesn't change your state. For example, if you're in the
      // in-flight state, rolling back the record doesn't move
      // you out of the in-flight state.
      rolledBack: Ember.K,
      unloadRecord: function (internalModel) {
        // clear relationships before moving to deleted state
        // otherwise it fails
        internalModel.clearRelationships();
        internalModel.transitionTo('deleted.saved');
      },

      propertyWasReset: Ember.K,

      // SUBSTATES

      // A record begins its lifecycle in the `empty` state.
      // If its data will come from the adapter, it will
      // transition into the `loading` state. Otherwise, if
      // the record is being created on the client, it will
      // transition into the `created` state.
      empty: {
        isEmpty: true,

        // EVENTS
        loadingData: function (internalModel, promise) {
          internalModel._loadingPromise = promise;
          internalModel.transitionTo('loading');
        },

        loadedData: function (internalModel) {
          internalModel.transitionTo('loaded.created.uncommitted');
          internalModel.triggerLater('ready');
        },

        pushedData: function (internalModel) {
          internalModel.transitionTo('loaded.saved');
          internalModel.triggerLater('didLoad');
          internalModel.triggerLater('ready');
        }
      },

      // A record enters this state when the store asks
      // the adapter for its data. It remains in this state
      // until the adapter provides the requested data.
      //
      // Usually, this process is asynchronous, using an
      // XHR to retrieve the data.
      loading: {
        // FLAGS
        isLoading: true,

        exit: function (internalModel) {
          internalModel._loadingPromise = null;
        },

        // EVENTS
        pushedData: function (internalModel) {
          internalModel.transitionTo('loaded.saved');
          internalModel.triggerLater('didLoad');
          internalModel.triggerLater('ready');
          //TODO this seems out of place here
          internalModel.didCleanError();
        },

        becameError: function (internalModel) {
          internalModel.triggerLater('becameError', internalModel);
        },

        notFound: function (internalModel) {
          internalModel.transitionTo('empty');
        }
      },

      // A record enters this state when its data is populated.
      // Most of a record's lifecycle is spent inside substates
      // of the `loaded` state.
      loaded: {
        initialState: 'saved',

        // FLAGS
        isLoaded: true,

        //TODO(Igor) Reloading now triggers a loadingData event,
        //but it should be ok?
        loadingData: Ember.K,

        // SUBSTATES

        // If there are no local changes to a record, it remains
        // in the `saved` state.
        saved: {
          setup: function (internalModel) {
            var attrs = internalModel._attributes;
            var isDirty = Ember.keys(attrs).length > 0;

            if (isDirty) {
              internalModel.adapterDidDirty();
            }
          },

          // EVENTS
          didSetProperty: ember$data$lib$system$model$states$$didSetProperty,

          pushedData: Ember.K,

          becomeDirty: function (internalModel) {
            internalModel.transitionTo('updated.uncommitted');
          },

          willCommit: function (internalModel) {
            internalModel.transitionTo('updated.inFlight');
          },

          reloadRecord: function (internalModel, resolve) {
            resolve(internalModel.store.reloadRecord(internalModel));
          },

          deleteRecord: function (internalModel) {
            internalModel.transitionTo('deleted.uncommitted');
            internalModel.disconnectRelationships();
          },

          unloadRecord: function (internalModel) {
            // clear relationships before moving to deleted state
            // otherwise it fails
            internalModel.clearRelationships();
            internalModel.transitionTo('deleted.saved');
          },

          didCommit: function (internalModel) {
            internalModel.send('invokeLifecycleCallbacks', ember$data$lib$system$model$states$$get(internalModel, 'lastDirtyType'));
          },

          // loaded.saved.notFound would be triggered by a failed
          // `reload()` on an unchanged record
          notFound: Ember.K

        },

        // A record is in this state after it has been locally
        // created but before the adapter has indicated that
        // it has been saved.
        created: ember$data$lib$system$model$states$$createdState,

        // A record is in this state if it has already been
        // saved to the server, but there are new local changes
        // that have not yet been saved.
        updated: ember$data$lib$system$model$states$$updatedState
      },

      // A record is in this state if it was deleted from the store.
      deleted: {
        initialState: 'uncommitted',
        dirtyType: 'deleted',

        // FLAGS
        isDeleted: true,
        isLoaded: true,
        isDirty: true,

        // TRANSITIONS
        setup: function (internalModel) {
          internalModel.updateRecordArrays();
        },

        // SUBSTATES

        // When a record is deleted, it enters the `start`
        // state. It will exit this state when the record
        // starts to commit.
        uncommitted: {

          // EVENTS

          willCommit: function (internalModel) {
            internalModel.transitionTo('inFlight');
          },

          rollback: function (internalModel) {
            internalModel.rollbackAttributes();
            internalModel.triggerLater('ready');
          },

          pushedData: Ember.K,
          becomeDirty: Ember.K,
          deleteRecord: Ember.K,

          rolledBack: function (internalModel) {
            internalModel.transitionTo('loaded.saved');
            internalModel.triggerLater('ready');
          }
        },

        // After a record starts committing, but
        // before the adapter indicates that the deletion
        // has saved to the server, a record is in the
        // `inFlight` substate of `deleted`.
        inFlight: {
          // FLAGS
          isSaving: true,

          // EVENTS

          unloadRecord: ember$data$lib$system$model$states$$assertAgainstUnloadRecord,

          // TODO: More robust semantics around save-while-in-flight
          willCommit: Ember.K,
          didCommit: function (internalModel) {
            internalModel.transitionTo('saved');

            internalModel.send('invokeLifecycleCallbacks');
          },

          becameError: function (internalModel) {
            internalModel.transitionTo('uncommitted');
            internalModel.triggerLater('becameError', internalModel);
          },

          becameInvalid: function (internalModel) {
            internalModel.transitionTo('invalid');
            internalModel.triggerLater('becameInvalid', internalModel);
          }
        },

        // Once the adapter indicates that the deletion has
        // been saved, the record enters the `saved` substate
        // of `deleted`.
        saved: {
          // FLAGS
          isDirty: false,

          setup: function (internalModel) {
            var store = internalModel.store;
            store._dematerializeRecord(internalModel);
          },

          invokeLifecycleCallbacks: function (internalModel) {
            internalModel.triggerLater('didDelete', internalModel);
            internalModel.triggerLater('didCommit', internalModel);
          },

          willCommit: Ember.K,

          didCommit: Ember.K
        },

        invalid: {
          isValid: false,

          didSetProperty: function (internalModel, context) {
            internalModel.removeErrorMessageFromAttribute(context.name);

            ember$data$lib$system$model$states$$didSetProperty(internalModel, context);
          },

          deleteRecord: Ember.K,
          becomeDirty: Ember.K,
          willCommit: Ember.K,

          rolledBack: function (internalModel) {
            internalModel.clearErrorMessages();
            internalModel.transitionTo('loaded.saved');
            internalModel.triggerLater('ready');
          },

          becameValid: function (internalModel) {
            internalModel.transitionTo('uncommitted');
          }

        }
      },

      invokeLifecycleCallbacks: function (internalModel, dirtyType) {
        if (dirtyType === 'created') {
          internalModel.triggerLater('didCreate', internalModel);
        } else {
          internalModel.triggerLater('didUpdate', internalModel);
        }

        internalModel.triggerLater('didCommit', internalModel);
      }
    };

    function ember$data$lib$system$model$states$$wireState(object, parent, name) {
      /*jshint proto:true*/
      // TODO: Use Object.create and copy instead
      object = ember$data$lib$system$model$states$$mixin(parent ? Ember.create(parent) : {}, object);
      object.parentState = parent;
      object.stateName = name;

      for (var prop in object) {
        if (!object.hasOwnProperty(prop) || prop === 'parentState' || prop === 'stateName') {
          continue;
        }
        if (typeof object[prop] === 'object') {
          object[prop] = ember$data$lib$system$model$states$$wireState(object[prop], object, name + '.' + prop);
        }
      }

      return object;
    }

    ember$data$lib$system$model$states$$RootState = ember$data$lib$system$model$states$$wireState(ember$data$lib$system$model$states$$RootState, null, 'root');

    var ember$data$lib$system$model$states$$default = ember$data$lib$system$model$states$$RootState;

    var ember$data$lib$system$relationships$state$relationship$$forEach = Ember.ArrayPolyfills.forEach;

    function ember$data$lib$system$relationships$state$relationship$$Relationship(store, record, inverseKey, relationshipMeta) {
      this.members = new ember$data$lib$system$ordered$set$$default();
      this.canonicalMembers = new ember$data$lib$system$ordered$set$$default();
      this.store = store;
      this.key = relationshipMeta.key;
      this.inverseKey = inverseKey;
      this.record = record;
      this.isAsync = relationshipMeta.options.async;
      this.relationshipMeta = relationshipMeta;
      //This probably breaks for polymorphic relationship in complex scenarios, due to
      //multiple possible modelNames
      this.inverseKeyForImplicit = this.record.constructor.modelName + this.key;
      this.linkPromise = null;
      this.meta = null;
      this.hasData = false;
    }

    ember$data$lib$system$relationships$state$relationship$$Relationship.prototype = {
      constructor: ember$data$lib$system$relationships$state$relationship$$Relationship,

      destroy: Ember.K,

      updateMeta: function (meta) {
        this.meta = meta;
      },

      clear: function () {
        var members = this.members.list;
        var member;

        while (members.length > 0) {
          member = members[0];
          this.removeRecord(member);
        }
      },

      disconnect: function () {
        this.members.forEach(function (member) {
          this.removeRecordFromInverse(member);
        }, this);
      },

      reconnect: function () {
        this.members.forEach(function (member) {
          this.addRecordToInverse(member);
        }, this);
      },

      removeRecords: function (records) {
        var self = this;
        ember$data$lib$system$relationships$state$relationship$$forEach.call(records, function (record) {
          self.removeRecord(record);
        });
      },

      addRecords: function (records, idx) {
        var self = this;
        ember$data$lib$system$relationships$state$relationship$$forEach.call(records, function (record) {
          self.addRecord(record, idx);
          if (idx !== undefined) {
            idx++;
          }
        });
      },

      addCanonicalRecords: function (records, idx) {
        for (var i = 0; i < records.length; i++) {
          if (idx !== undefined) {
            this.addCanonicalRecord(records[i], i + idx);
          } else {
            this.addCanonicalRecord(records[i]);
          }
        }
      },

      addCanonicalRecord: function (record, idx) {
        if (!this.canonicalMembers.has(record)) {
          this.canonicalMembers.add(record);
          if (this.inverseKey) {
            record._relationships.get(this.inverseKey).addCanonicalRecord(this.record);
          } else {
            if (!record._implicitRelationships[this.inverseKeyForImplicit]) {
              record._implicitRelationships[this.inverseKeyForImplicit] = new ember$data$lib$system$relationships$state$relationship$$Relationship(this.store, record, this.key, { options: {} });
            }
            record._implicitRelationships[this.inverseKeyForImplicit].addCanonicalRecord(this.record);
          }
        }
        this.flushCanonicalLater();
        this.setHasData(true);
      },

      removeCanonicalRecords: function (records, idx) {
        for (var i = 0; i < records.length; i++) {
          if (idx !== undefined) {
            this.removeCanonicalRecord(records[i], i + idx);
          } else {
            this.removeCanonicalRecord(records[i]);
          }
        }
      },

      removeCanonicalRecord: function (record, idx) {
        if (this.canonicalMembers.has(record)) {
          this.removeCanonicalRecordFromOwn(record);
          if (this.inverseKey) {
            this.removeCanonicalRecordFromInverse(record);
          } else {
            if (record._implicitRelationships[this.inverseKeyForImplicit]) {
              record._implicitRelationships[this.inverseKeyForImplicit].removeCanonicalRecord(this.record);
            }
          }
        }
        this.flushCanonicalLater();
      },

      addRecord: function (record, idx) {
        if (!this.members.has(record)) {
          this.members.addWithIndex(record, idx);
          this.notifyRecordRelationshipAdded(record, idx);
          if (this.inverseKey) {
            record._relationships.get(this.inverseKey).addRecord(this.record);
          } else {
            if (!record._implicitRelationships[this.inverseKeyForImplicit]) {
              record._implicitRelationships[this.inverseKeyForImplicit] = new ember$data$lib$system$relationships$state$relationship$$Relationship(this.store, record, this.key, { options: {} });
            }
            record._implicitRelationships[this.inverseKeyForImplicit].addRecord(this.record);
          }
          this.record.updateRecordArraysLater();
        }
        this.setHasData(true);
      },

      removeRecord: function (record) {
        if (this.members.has(record)) {
          this.removeRecordFromOwn(record);
          if (this.inverseKey) {
            this.removeRecordFromInverse(record);
          } else {
            if (record._implicitRelationships[this.inverseKeyForImplicit]) {
              record._implicitRelationships[this.inverseKeyForImplicit].removeRecord(this.record);
            }
          }
        }
      },

      addRecordToInverse: function (record) {
        if (this.inverseKey) {
          record._relationships.get(this.inverseKey).addRecord(this.record);
        }
      },

      removeRecordFromInverse: function (record) {
        var inverseRelationship = record._relationships.get(this.inverseKey);
        //Need to check for existence, as the record might unloading at the moment
        if (inverseRelationship) {
          inverseRelationship.removeRecordFromOwn(this.record);
        }
      },

      removeRecordFromOwn: function (record) {
        this.members["delete"](record);
        this.notifyRecordRelationshipRemoved(record);
        this.record.updateRecordArrays();
      },

      removeCanonicalRecordFromInverse: function (record) {
        var inverseRelationship = record._relationships.get(this.inverseKey);
        //Need to check for existence, as the record might unloading at the moment
        if (inverseRelationship) {
          inverseRelationship.removeCanonicalRecordFromOwn(this.record);
        }
      },

      removeCanonicalRecordFromOwn: function (record) {
        this.canonicalMembers["delete"](record);
        this.flushCanonicalLater();
      },

      flushCanonical: function () {
        this.willSync = false;
        //a hack for not removing new records
        //TODO remove once we have proper diffing
        var newRecords = [];
        for (var i = 0; i < this.members.list.length; i++) {
          if (this.members.list[i].isNew()) {
            newRecords.push(this.members.list[i]);
          }
        }
        //TODO(Igor) make this less abysmally slow
        this.members = this.canonicalMembers.copy();
        for (i = 0; i < newRecords.length; i++) {
          this.members.add(newRecords[i]);
        }
      },

      flushCanonicalLater: function () {
        if (this.willSync) {
          return;
        }
        this.willSync = true;
        var self = this;
        this.store._backburner.join(function () {
          self.store._backburner.schedule("syncRelationships", self, self.flushCanonical);
        });
      },

      updateLink: function (link) {
        Ember.warn("You have pushed a record of type '" + this.record.type.modelName + "' with '" + this.key + "' as a link, but the association is not an async relationship.", this.isAsync);
        Ember.assert("You have pushed a record of type '" + this.record.type.modelName + "' with '" + this.key + "' as a link, but the value of that link is not a string.", typeof link === "string" || link === null);
        if (link !== this.link) {
          this.link = link;
          this.linkPromise = null;
          this.record.notifyPropertyChange(this.key);
        }
      },

      findLink: function () {
        if (this.linkPromise) {
          return this.linkPromise;
        } else {
          var promise = this.fetchLink();
          this.linkPromise = promise;
          return promise.then(function (result) {
            return result;
          });
        }
      },

      updateRecordsFromAdapter: function (records) {
        //TODO(Igor) move this to a proper place
        var self = this;
        //TODO Once we have adapter support, we need to handle updated and canonical changes
        self.computeChanges(records);
        self.setHasData(true);
      },

      notifyRecordRelationshipAdded: Ember.K,
      notifyRecordRelationshipRemoved: Ember.K,

      setHasData: function (value) {
        this.hasData = value;
      }
    };

    var ember$data$lib$system$relationships$state$relationship$$default = ember$data$lib$system$relationships$state$relationship$$Relationship;

    var ember$data$lib$system$many$array$$get = Ember.get;
    var ember$data$lib$system$many$array$$set = Ember.set;
    var ember$data$lib$system$many$array$$filter = Ember.ArrayPolyfills.filter;

    var ember$data$lib$system$many$array$$default = Ember.Object.extend(Ember.MutableArray, Ember.Evented, {
      init: function () {
        this.currentState = Ember.A([]);
      },

      record: null,

      canonicalState: null,
      currentState: null,

      length: 0,

      objectAt: function (index) {
        //Ember observers such as 'firstObject', 'lastObject' might do out of bounds accesses
        if (!this.currentState[index]) {
          return undefined;
        }
        return this.currentState[index].getRecord();
      },

      flushCanonical: function () {
        //TODO make this smarter, currently its plenty stupid
        var toSet = ember$data$lib$system$many$array$$filter.call(this.canonicalState, function (internalModel) {
          return !internalModel.isDeleted();
        });

        //a hack for not removing new records
        //TODO remove once we have proper diffing
        var newRecords = this.currentState.filter(function (internalModel) {
          return internalModel.isNew();
        });
        toSet = toSet.concat(newRecords);
        var oldLength = this.length;
        this.arrayContentWillChange(0, this.length, toSet.length);
        this.set('length', toSet.length);
        this.currentState = toSet;
        this.arrayContentDidChange(0, oldLength, this.length);
        //TODO Figure out to notify only on additions and maybe only if unloaded
        this.relationship.notifyHasManyChanged();
        this.record.updateRecordArrays();
      },
      /**
        `true` if the relationship is polymorphic, `false` otherwise.
         @property {Boolean} isPolymorphic
        @private
      */
      isPolymorphic: false,

      /**
        The loading state of this array
         @property {Boolean} isLoaded
      */
      isLoaded: false,

      /**
        The relationship which manages this array.
         @property {ManyRelationship} relationship
        @private
      */
      relationship: null,

      /**
        Metadata associated with the request for async hasMany relationships.
         Example
         Given that the server returns the following JSON payload when fetching a
        hasMany relationship:
         ```js
        {
          "comments": [{
            "id": 1,
            "comment": "This is the first comment",
          }, {
            // ...
          }],
           "meta": {
            "page": 1,
            "total": 5
          }
        }
        ```
         You can then access the metadata via the `meta` property:
         ```js
        post.get('comments').then(function(comments) {
          var meta = comments.get('meta');
           // meta.page => 1
          // meta.total => 5
        });
        ```
         @property {Object} meta
        @public
      */
      meta: null,

      internalReplace: function (idx, amt, objects) {
        if (!objects) {
          objects = [];
        }
        this.arrayContentWillChange(idx, amt, objects.length);
        this.currentState.splice.apply(this.currentState, [idx, amt].concat(objects));
        this.set('length', this.currentState.length);
        this.arrayContentDidChange(idx, amt, objects.length);
        if (objects) {
          //TODO(Igor) probably needed only for unloaded records
          this.relationship.notifyHasManyChanged();
        }
        this.record.updateRecordArrays();
      },

      //TODO(Igor) optimize
      internalRemoveRecords: function (records) {
        var index;
        for (var i = 0; i < records.length; i++) {
          index = this.currentState.indexOf(records[i]);
          this.internalReplace(index, 1);
        }
      },

      //TODO(Igor) optimize
      internalAddRecords: function (records, idx) {
        if (idx === undefined) {
          idx = this.currentState.length;
        }
        this.internalReplace(idx, 0, records);
      },

      replace: function (idx, amt, objects) {
        var records;
        if (amt > 0) {
          records = this.currentState.slice(idx, idx + amt);
          this.get('relationship').removeRecords(records);
        }
        var map = objects.map || Ember.ArrayPolyfills.map;
        if (objects) {
          this.get('relationship').addRecords(map.call(objects, function (obj) {
            return obj._internalModel;
          }), idx);
        }
      },
      /**
        Used for async `hasMany` arrays
        to keep track of when they will resolve.
         @property {Ember.RSVP.Promise} promise
        @private
      */
      promise: null,

      /**
        @method loadingRecordsCount
        @param {Number} count
        @private
      */
      loadingRecordsCount: function (count) {
        this.loadingRecordsCount = count;
      },

      /**
        @method loadedRecord
        @private
      */
      loadedRecord: function () {
        this.loadingRecordsCount--;
        if (this.loadingRecordsCount === 0) {
          ember$data$lib$system$many$array$$set(this, 'isLoaded', true);
          this.trigger('didLoad');
        }
      },

      /**
        @method reload
        @public
      */
      reload: function () {
        return this.relationship.reload();
      },

      /**
        Saves all of the records in the `ManyArray`.
         Example
         ```javascript
        store.find('inbox', 1).then(function(inbox) {
          inbox.get('messages').then(function(messages) {
            messages.forEach(function(message) {
              message.set('isRead', true);
            });
            messages.save()
          });
        });
        ```
         @method save
        @return {DS.PromiseArray} promise
      */
      save: function () {
        var manyArray = this;
        var promiseLabel = 'DS: ManyArray#save ' + ember$data$lib$system$many$array$$get(this, 'type');
        var promise = Ember.RSVP.all(this.invoke('save'), promiseLabel).then(function (array) {
          return manyArray;
        }, null, 'DS: ManyArray#save return ManyArray');

        return ember$data$lib$system$promise$proxies$$PromiseArray.create({ promise: promise });
      },

      /**
        Create a child record within the owner
         @method createRecord
        @private
        @param {Object} hash
        @return {DS.Model} record
      */
      createRecord: function (hash) {
        var store = ember$data$lib$system$many$array$$get(this, 'store');
        var type = ember$data$lib$system$many$array$$get(this, 'type');
        var record;

        Ember.assert('You cannot add \'' + type.modelName + '\' records to this polymorphic relationship.', !ember$data$lib$system$many$array$$get(this, 'isPolymorphic'));

        record = store.createRecord(type.modelName, hash);
        this.pushObject(record);

        return record;
      },

      /**
        @method addRecord
        @param {DS.Model} record
        @deprecated Use `addObject()` instead
      */
      addRecord: function (record) {
        Ember.deprecate('Using manyArray.addRecord() has been deprecated. You should use manyArray.addObject() instead.');
        this.addObject(record);
      },

      /**
        @method removeRecord
        @param {DS.Model} record
        @deprecated Use `removeObject()` instead
      */
      removeRecord: function (record) {
        Ember.deprecate('Using manyArray.removeRecord() has been deprecated. You should use manyArray.removeObject() instead.');
        this.removeObject(record);
      }
    });

    /**
      Assert that `addedRecord` has a valid type so it can be added to the
      relationship of the `record`.

      The assert basically checks if the `addedRecord` can be added to the
      relationship (specified via `relationshipMeta`) of the `record`.

      This utility should only be used internally, as both record parameters must
      be an InternalModel and the `relationshipMeta` needs to be the meta
      information about the relationship, retrieved via
      `record.relationshipFor(key)`.

      @method assertPolymorphicType
      @param {InternalModel} record
      @param {RelationshipMeta} relationshipMeta retrieved via
             `record.relationshipFor(key)`
      @param {InternalModel} addedRecord record which
             should be added/set for the relationship
    */
    var ember$data$lib$utils$$assertPolymorphicType = function (record, relationshipMeta, addedRecord) {
      var addedType = addedRecord.type.modelName;
      var recordType = record.type.modelName;
      var key = relationshipMeta.key;
      var typeClass = record.store.modelFor(relationshipMeta.type);

      var assertionMessage = 'You cannot add a record of type \'' + addedType + '\' to the \'' + recordType + '.' + key + '\' relationship (only \'' + typeClass.modelName + '\' allowed)';

      ember$lib$main$$default.assert(assertionMessage, ember$data$lib$utils$$checkPolymorphic(typeClass, addedRecord));
    };

    function ember$data$lib$utils$$checkPolymorphic(typeClass, addedRecord) {
      if (typeClass.__isMixin) {
        //TODO Need to do this in order to support mixins, should convert to public api
        //once it exists in Ember
        return typeClass.__mixin.detect(addedRecord.type.PrototypeMixin);
      }
      if (ember$lib$main$$default.MODEL_FACTORY_INJECTIONS) {
        typeClass = typeClass.superclass;
      }
      return typeClass.detect(addedRecord.type);
    }

    var ember$data$lib$system$relationships$state$has$many$$map = Ember.ArrayPolyfills.map;

    var ember$data$lib$system$relationships$state$has$many$$ManyRelationship = function (store, record, inverseKey, relationshipMeta) {
      this._super$constructor(store, record, inverseKey, relationshipMeta);
      this.belongsToType = relationshipMeta.type;
      this.canonicalState = [];
      this.manyArray = ember$data$lib$system$many$array$$default.create({
        canonicalState: this.canonicalState,
        store: this.store,
        relationship: this,
        type: this.store.modelFor(this.belongsToType),
        record: record
      });
      this.isPolymorphic = relationshipMeta.options.polymorphic;
      this.manyArray.isPolymorphic = this.isPolymorphic;
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype = Ember.create(ember$data$lib$system$relationships$state$relationship$$default.prototype);
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.constructor = ember$data$lib$system$relationships$state$has$many$$ManyRelationship;
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype._super$constructor = ember$data$lib$system$relationships$state$relationship$$default;

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.destroy = function () {
      this.manyArray.destroy();
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype._super$updateMeta = ember$data$lib$system$relationships$state$relationship$$default.prototype.updateMeta;
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.updateMeta = function (meta) {
      this._super$updateMeta(meta);
      this.manyArray.set("meta", meta);
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype._super$addCanonicalRecord = ember$data$lib$system$relationships$state$relationship$$default.prototype.addCanonicalRecord;
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.addCanonicalRecord = function (record, idx) {
      if (this.canonicalMembers.has(record)) {
        return;
      }
      if (idx !== undefined) {
        this.canonicalState.splice(idx, 0, record);
      } else {
        this.canonicalState.push(record);
      }
      this._super$addCanonicalRecord(record, idx);
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype._super$addRecord = ember$data$lib$system$relationships$state$relationship$$default.prototype.addRecord;
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.addRecord = function (record, idx) {
      if (this.members.has(record)) {
        return;
      }
      this._super$addRecord(record, idx);
      this.manyArray.internalAddRecords([record], idx);
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype._super$removeCanonicalRecordFromOwn = ember$data$lib$system$relationships$state$relationship$$default.prototype.removeCanonicalRecordFromOwn;
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.removeCanonicalRecordFromOwn = function (record, idx) {
      var i = idx;
      if (!this.canonicalMembers.has(record)) {
        return;
      }
      if (i === undefined) {
        i = this.canonicalState.indexOf(record);
      }
      if (i > -1) {
        this.canonicalState.splice(i, 1);
      }
      this._super$removeCanonicalRecordFromOwn(record, idx);
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype._super$flushCanonical = ember$data$lib$system$relationships$state$relationship$$default.prototype.flushCanonical;
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.flushCanonical = function () {
      this.manyArray.flushCanonical();
      this._super$flushCanonical();
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype._super$removeRecordFromOwn = ember$data$lib$system$relationships$state$relationship$$default.prototype.removeRecordFromOwn;
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.removeRecordFromOwn = function (record, idx) {
      if (!this.members.has(record)) {
        return;
      }
      this._super$removeRecordFromOwn(record, idx);
      if (idx !== undefined) {
        //TODO(Igor) not used currently, fix
        this.manyArray.currentState.removeAt(idx);
      } else {
        this.manyArray.internalRemoveRecords([record]);
      }
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.notifyRecordRelationshipAdded = function (record, idx) {
      ember$data$lib$utils$$assertPolymorphicType(this.record, this.relationshipMeta, record);

      this.record.notifyHasManyAdded(this.key, record, idx);
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.reload = function () {
      var self = this;
      if (this.link) {
        return this.fetchLink();
      } else {
        return this.store.scheduleFetchMany(this.manyArray.toArray()).then(function () {
          //Goes away after the manyArray refactor
          self.manyArray.set("isLoaded", true);
          return self.manyArray;
        });
      }
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.computeChanges = function (records) {
      var members = this.canonicalMembers;
      var recordsToRemove = [];
      var length;
      var record;
      var i;

      records = ember$data$lib$system$relationships$state$has$many$$setForArray(records);

      members.forEach(function (member) {
        if (records.has(member)) {
          return;
        }

        recordsToRemove.push(member);
      });

      this.removeCanonicalRecords(recordsToRemove);

      // Using records.toArray() since currently using
      // removeRecord can modify length, messing stuff up
      // forEach since it directly looks at "length" each
      // iteration
      records = records.toArray();
      length = records.length;
      for (i = 0; i < length; i++) {
        record = records[i];
        this.removeCanonicalRecord(record);
        this.addCanonicalRecord(record, i);
      }
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.fetchLink = function () {
      var _this = this;

      return this.store.findHasMany(this.record, this.link, this.relationshipMeta).then(function (records) {
        if (records.hasOwnProperty("meta")) {
          _this.updateMeta(records.meta);
        }
        _this.store._backburner.join(function () {
          _this.updateRecordsFromAdapter(records);
        });
        return _this.manyArray;
      });
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.findRecords = function () {
      var manyArray = this.manyArray;
      //TODO CLEANUP
      return this.store.findMany(ember$data$lib$system$relationships$state$has$many$$map.call(manyArray.toArray(), function (rec) {
        return rec._internalModel;
      })).then(function () {
        //Goes away after the manyArray refactor
        manyArray.set("isLoaded", true);
        return manyArray;
      });
    };
    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.notifyHasManyChanged = function () {
      this.record.notifyHasManyAdded(this.key);
    };

    ember$data$lib$system$relationships$state$has$many$$ManyRelationship.prototype.getRecords = function () {
      //TODO(Igor) sync server here, once our syncing is not stupid
      if (this.isAsync) {
        var self = this;
        var promise;
        if (this.link) {
          promise = this.findLink().then(function () {
            return self.findRecords();
          });
        } else {
          promise = this.findRecords();
        }
        return ember$data$lib$system$promise$proxies$$PromiseManyArray.create({
          content: this.manyArray,
          promise: promise
        });
      } else {
        Ember.assert("You looked up the '" + this.key + "' relationship on a '" + this.record.type.modelName + "' with id " + this.record.id + " but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`DS.hasMany({ async: true })`)", this.manyArray.isEvery("isEmpty", false));

        //TODO(Igor) WTF DO I DO HERE?
        if (!this.manyArray.get("isDestroyed")) {
          this.manyArray.set("isLoaded", true);
        }
        return this.manyArray;
      }
    };

    function ember$data$lib$system$relationships$state$has$many$$setForArray(array) {
      var set = new ember$data$lib$system$ordered$set$$default();

      if (array) {
        for (var i = 0, l = array.length; i < l; i++) {
          set.add(array[i]);
        }
      }

      return set;
    }

    var ember$data$lib$system$relationships$state$has$many$$default = ember$data$lib$system$relationships$state$has$many$$ManyRelationship;

    var ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship = function (store, record, inverseKey, relationshipMeta) {
      this._super$constructor(store, record, inverseKey, relationshipMeta);
      this.record = record;
      this.key = relationshipMeta.key;
      this.inverseRecord = null;
      this.canonicalState = null;
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype = Ember.create(ember$data$lib$system$relationships$state$relationship$$default.prototype);
    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.constructor = ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship;
    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype._super$constructor = ember$data$lib$system$relationships$state$relationship$$default;

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.setRecord = function (newRecord) {
      if (newRecord) {
        this.addRecord(newRecord);
      } else if (this.inverseRecord) {
        this.removeRecord(this.inverseRecord);
      }
      this.setHasData(true);
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.setCanonicalRecord = function (newRecord) {
      if (newRecord) {
        this.addCanonicalRecord(newRecord);
      } else if (this.inverseRecord) {
        this.removeCanonicalRecord(this.inverseRecord);
      }
      this.setHasData(true);
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype._super$addCanonicalRecord = ember$data$lib$system$relationships$state$relationship$$default.prototype.addCanonicalRecord;
    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.addCanonicalRecord = function (newRecord) {
      if (this.canonicalMembers.has(newRecord)) {
        return;
      }

      if (this.canonicalState) {
        this.removeCanonicalRecord(this.canonicalState);
      }

      this.canonicalState = newRecord;
      this._super$addCanonicalRecord(newRecord);
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype._super$flushCanonical = ember$data$lib$system$relationships$state$relationship$$default.prototype.flushCanonical;
    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.flushCanonical = function () {
      //temporary fix to not remove newly created records if server returned null.
      //TODO remove once we have proper diffing
      if (this.inverseRecord && this.inverseRecord.isNew() && !this.canonicalState) {
        return;
      }
      this.inverseRecord = this.canonicalState;
      this.record.notifyBelongsToChanged(this.key);
      this._super$flushCanonical();
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype._super$addRecord = ember$data$lib$system$relationships$state$relationship$$default.prototype.addRecord;
    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.addRecord = function (newRecord) {
      if (this.members.has(newRecord)) {
        return;
      }

      ember$data$lib$utils$$assertPolymorphicType(this.record, this.relationshipMeta, newRecord);

      if (this.inverseRecord) {
        this.removeRecord(this.inverseRecord);
      }

      this.inverseRecord = newRecord;
      this._super$addRecord(newRecord);
      this.record.notifyBelongsToChanged(this.key);
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.setRecordPromise = function (newPromise) {
      var content = newPromise.get && newPromise.get("content");
      Ember.assert("You passed in a promise that did not originate from an EmberData relationship. You can only pass promises that come from a belongsTo or hasMany relationship to the get call.", content !== undefined);
      this.setRecord(content ? content._internalModel : content);
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype._super$removeRecordFromOwn = ember$data$lib$system$relationships$state$relationship$$default.prototype.removeRecordFromOwn;
    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.removeRecordFromOwn = function (record) {
      if (!this.members.has(record)) {
        return;
      }
      this.inverseRecord = null;
      this._super$removeRecordFromOwn(record);
      this.record.notifyBelongsToChanged(this.key);
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype._super$removeCanonicalRecordFromOwn = ember$data$lib$system$relationships$state$relationship$$default.prototype.removeCanonicalRecordFromOwn;
    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.removeCanonicalRecordFromOwn = function (record) {
      if (!this.canonicalMembers.has(record)) {
        return;
      }
      this.canonicalState = null;
      this._super$removeCanonicalRecordFromOwn(record);
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.findRecord = function () {
      if (this.inverseRecord) {
        return this.store._findByInternalModel(this.inverseRecord);
      } else {
        return Ember.RSVP.Promise.resolve(null);
      }
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.fetchLink = function () {
      var self = this;
      return this.store.findBelongsTo(this.record, this.link, this.relationshipMeta).then(function (record) {
        if (record) {
          self.addRecord(record);
        }
        return record;
      });
    };

    ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship.prototype.getRecord = function () {
      //TODO(Igor) flushCanonical here once our syncing is not stupid
      if (this.isAsync) {
        var promise;
        if (this.link) {
          var self = this;
          promise = this.findLink().then(function () {
            return self.findRecord();
          });
        } else {
          promise = this.findRecord();
        }

        return ember$data$lib$system$promise$proxies$$PromiseObject.create({
          promise: promise,
          content: this.inverseRecord ? this.inverseRecord.getRecord() : null
        });
      } else {
        if (this.inverseRecord === null) {
          return null;
        }
        var toReturn = this.inverseRecord.getRecord();
        Ember.assert("You looked up the '" + this.key + "' relationship on a '" + this.record.type.modelName + "' with id " + this.record.id + " but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`DS.belongsTo({ async: true })`)", toReturn === null || !toReturn.get("isEmpty"));
        return toReturn;
      }
    };

    var ember$data$lib$system$relationships$state$belongs$to$$default = ember$data$lib$system$relationships$state$belongs$to$$BelongsToRelationship;

    var ember$data$lib$system$relationships$state$create$$get = Ember.get;

    var ember$data$lib$system$relationships$state$create$$createRelationshipFor = function (record, relationshipMeta, store) {
      var inverseKey;
      var inverse = record.type.inverseFor(relationshipMeta.key, store);

      if (inverse) {
        inverseKey = inverse.name;
      }

      if (relationshipMeta.kind === "hasMany") {
        return new ember$data$lib$system$relationships$state$has$many$$default(store, record, inverseKey, relationshipMeta);
      } else {
        return new ember$data$lib$system$relationships$state$belongs$to$$default(store, record, inverseKey, relationshipMeta);
      }
    };

    var ember$data$lib$system$relationships$state$create$$Relationships = function (record) {
      this.record = record;
      this.initializedRelationships = Ember.create(null);
    };

    ember$data$lib$system$relationships$state$create$$Relationships.prototype.has = function (key) {
      return !!this.initializedRelationships[key];
    };

    ember$data$lib$system$relationships$state$create$$Relationships.prototype.get = function (key) {
      var relationships = this.initializedRelationships;
      var relationshipsByName = ember$data$lib$system$relationships$state$create$$get(this.record.type, "relationshipsByName");
      if (!relationships[key] && relationshipsByName.get(key)) {
        relationships[key] = ember$data$lib$system$relationships$state$create$$createRelationshipFor(this.record, relationshipsByName.get(key), this.record.store);
      }
      return relationships[key];
    };

    var ember$data$lib$system$relationships$state$create$$default = ember$data$lib$system$relationships$state$create$$Relationships;

    var ember$data$lib$system$snapshot$$get = Ember.get;

    /**
      @class Snapshot
      @namespace DS
      @private
      @constructor
      @param {DS.Model} internalModel The model to create a snapshot from
    */
    function ember$data$lib$system$snapshot$$Snapshot(internalModel) {
      this._attributes = Ember.create(null);
      this._belongsToRelationships = Ember.create(null);
      this._belongsToIds = Ember.create(null);
      this._hasManyRelationships = Ember.create(null);
      this._hasManyIds = Ember.create(null);

      var record = internalModel.getRecord();
      this.record = record;
      record.eachAttribute(function (keyName) {
        this._attributes[keyName] = ember$data$lib$system$snapshot$$get(record, keyName);
      }, this);

      this.id = internalModel.id;
      this._internalModel = internalModel;
      this.type = internalModel.type;
      this.modelName = internalModel.type.modelName;

      this._changedAttributes = record.changedAttributes();

      // The following code is here to keep backwards compatibility when accessing
      // `constructor` directly.
      //
      // With snapshots you should use `type` instead of `constructor`.
      //
      // Remove for Ember Data 1.0.
      if (Ember.platform.hasPropertyAccessors) {
        var callDeprecate = true;

        Ember.defineProperty(this, 'constructor', {
          get: function () {
            // Ugly hack since accessing error.stack (done in `Ember.deprecate()`)
            // causes the internals of Chrome to access the constructor, which then
            // causes an infinite loop if accessed and calls `Ember.deprecate()`
            // again.
            if (callDeprecate) {
              callDeprecate = false;
              Ember.deprecate('Usage of `snapshot.constructor` is deprecated, use `snapshot.type` instead.');
              callDeprecate = true;
            }

            return this.type;
          }
        });
      } else {
        this.constructor = this.type;
      }
    }

    ember$data$lib$system$snapshot$$Snapshot.prototype = {
      constructor: ember$data$lib$system$snapshot$$Snapshot,

      /**
        The id of the snapshot's underlying record
         Example
         ```javascript
        // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
        postSnapshot.id; // => '1'
        ```
         @property id
        @type {String}
      */
      id: null,

      /**
        The underlying record for this snapshot. Can be used to access methods and
        properties defined on the record.
         Example
         ```javascript
        var json = snapshot.record.toJSON();
        ```
         @property record
        @type {DS.Model}
      */
      record: null,

      /**
        The type of the underlying record for this snapshot, as a DS.Model.
         @property type
        @type {DS.Model}
      */
      type: null,

      /**
        The name of the type of the underlying record for this snapshot, as a string.
         @property modelName
        @type {String}
      */
      modelName: null,

      /**
        Returns the value of an attribute.
         Example
         ```javascript
        // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
        postSnapshot.attr('author'); // => 'Tomster'
        postSnapshot.attr('title'); // => 'Ember.js rocks'
        ```
         Note: Values are loaded eagerly and cached when the snapshot is created.
         @method attr
        @param {String} keyName
        @return {Object} The attribute value or undefined
      */
      attr: function (keyName) {
        if (keyName in this._attributes) {
          return this._attributes[keyName];
        }
        throw new Ember.Error('Model \'' + Ember.inspect(this.record) + '\' has no attribute named \'' + keyName + '\' defined.');
      },

      /**
        Returns all attributes and their corresponding values.
         Example
         ```javascript
        // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
        postSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }
        ```
         @method attributes
        @return {Object} All attributes of the current snapshot
      */
      attributes: function () {
        return Ember.copy(this._attributes);
      },

      /**
        Returns all changed attributes and their old and new values.
         Example
         ```javascript
        // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
        postModel.set('title', 'Ember.js rocks!');
        postSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }
        ```
         @method changedAttributes
        @return {Object} All changed attributes of the current snapshot
      */
      changedAttributes: function () {
        var changedAttributes = Ember.create(null);
        var changedAttributeKeys = Ember.keys(this._changedAttributes);

        for (var i = 0, _length = changedAttributeKeys.length; i < _length; i++) {
          var key = changedAttributeKeys[i];
          changedAttributes[key] = Ember.copy(this._changedAttributes[key]);
        }

        return changedAttributes;
      },

      /**
        Returns the current value of a belongsTo relationship.
         `belongsTo` takes an optional hash of options as a second parameter,
        currently supported options are:
        - `id`: set to `true` if you only want the ID of the related record to be
          returned.
         Example
         ```javascript
        // store.push('post', { id: 1, title: 'Hello World' });
        // store.createRecord('comment', { body: 'Lorem ipsum', post: post });
        commentSnapshot.belongsTo('post'); // => DS.Snapshot
        commentSnapshot.belongsTo('post', { id: true }); // => '1'
         // store.push('comment', { id: 1, body: 'Lorem ipsum' });
        commentSnapshot.belongsTo('post'); // => undefined
        ```
         Calling `belongsTo` will return a new Snapshot as long as there's any known
        data for the relationship available, such as an ID. If the relationship is
        known but unset, `belongsTo` will return `null`. If the contents of the
        relationship is unknown `belongsTo` will return `undefined`.
         Note: Relationships are loaded lazily and cached upon first access.
         @method belongsTo
        @param {String} keyName
        @param {Object} [options]
        @return {(DS.Snapshot|String|null|undefined)} A snapshot or ID of a known
          relationship or null if the relationship is known but unset. undefined
          will be returned if the contents of the relationship is unknown.
      */
      belongsTo: function (keyName, options) {
        var id = options && options.id;
        var relationship, inverseRecord, hasData;
        var result;

        if (id && keyName in this._belongsToIds) {
          return this._belongsToIds[keyName];
        }

        if (!id && keyName in this._belongsToRelationships) {
          return this._belongsToRelationships[keyName];
        }

        relationship = this._internalModel._relationships.get(keyName);
        if (!(relationship && relationship.relationshipMeta.kind === 'belongsTo')) {
          throw new Ember.Error('Model \'' + Ember.inspect(this.record) + '\' has no belongsTo relationship named \'' + keyName + '\' defined.');
        }

        hasData = ember$data$lib$system$snapshot$$get(relationship, 'hasData');
        inverseRecord = ember$data$lib$system$snapshot$$get(relationship, 'inverseRecord');

        if (hasData) {
          if (inverseRecord && !inverseRecord.isDeleted()) {
            if (id) {
              result = ember$data$lib$system$snapshot$$get(inverseRecord, 'id');
            } else {
              result = inverseRecord.createSnapshot();
            }
          } else {
            result = null;
          }
        }

        if (id) {
          this._belongsToIds[keyName] = result;
        } else {
          this._belongsToRelationships[keyName] = result;
        }

        return result;
      },

      /**
        Returns the current value of a hasMany relationship.
         `hasMany` takes an optional hash of options as a second parameter,
        currently supported options are:
        - `ids`: set to `true` if you only want the IDs of the related records to be
          returned.
         Example
         ```javascript
        // store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });
        postSnapshot.hasMany('comments'); // => [DS.Snapshot, DS.Snapshot]
        postSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']
         // store.push('post', { id: 1, title: 'Hello World' });
        postSnapshot.hasMany('comments'); // => undefined
        ```
         Note: Relationships are loaded lazily and cached upon first access.
         @method hasMany
        @param {String} keyName
        @param {Object} [options]
        @return {(Array|undefined)} An array of snapshots or IDs of a known
          relationship or an empty array if the relationship is known but unset.
          undefined will be returned if the contents of the relationship is unknown.
      */
      hasMany: function (keyName, options) {
        var ids = options && options.ids;
        var relationship, members, hasData;
        var results;

        if (ids && keyName in this._hasManyIds) {
          return this._hasManyIds[keyName];
        }

        if (!ids && keyName in this._hasManyRelationships) {
          return this._hasManyRelationships[keyName];
        }

        relationship = this._internalModel._relationships.get(keyName);
        if (!(relationship && relationship.relationshipMeta.kind === 'hasMany')) {
          throw new Ember.Error('Model \'' + Ember.inspect(this.record) + '\' has no hasMany relationship named \'' + keyName + '\' defined.');
        }

        hasData = ember$data$lib$system$snapshot$$get(relationship, 'hasData');
        members = ember$data$lib$system$snapshot$$get(relationship, 'members');

        if (hasData) {
          results = [];
          members.forEach(function (member) {
            if (!member.isDeleted()) {
              if (ids) {
                results.push(member.id);
              } else {
                results.push(member.createSnapshot());
              }
            }
          });
        }

        if (ids) {
          this._hasManyIds[keyName] = results;
        } else {
          this._hasManyRelationships[keyName] = results;
        }

        return results;
      },

      /**
        Iterates through all the attributes of the model, calling the passed
        function on each attribute.
         Example
         ```javascript
        snapshot.eachAttribute(function(name, meta) {
          // ...
        });
        ```
         @method eachAttribute
        @param {Function} callback the callback to execute
        @param {Object} [binding] the value to which the callback's `this` should be bound
      */
      eachAttribute: function (callback, binding) {
        this.record.eachAttribute(callback, binding);
      },

      /**
        Iterates through all the relationships of the model, calling the passed
        function on each relationship.
         Example
         ```javascript
        snapshot.eachRelationship(function(name, relationship) {
          // ...
        });
        ```
         @method eachRelationship
        @param {Function} callback the callback to execute
        @param {Object} [binding] the value to which the callback's `this` should be bound
      */
      eachRelationship: function (callback, binding) {
        this.record.eachRelationship(callback, binding);
      },

      /**
        @method get
        @param {String} keyName
        @return {Object} The property value
        @deprecated Use [attr](#method_attr), [belongsTo](#method_belongsTo) or [hasMany](#method_hasMany) instead
      */
      get: function (keyName) {
        Ember.deprecate('Using DS.Snapshot.get() is deprecated. Use .attr(), .belongsTo() or .hasMany() instead.');

        if (keyName === 'id') {
          return this.id;
        }

        if (keyName in this._attributes) {
          return this.attr(keyName);
        }

        var relationship = this._internalModel._relationships.get(keyName);

        if (relationship && relationship.relationshipMeta.kind === 'belongsTo') {
          return this.belongsTo(keyName);
        }
        if (relationship && relationship.relationshipMeta.kind === 'hasMany') {
          return this.hasMany(keyName);
        }

        return ember$data$lib$system$snapshot$$get(this.record, keyName);
      },

      /**
        @method serialize
        @param {Object} options
        @return {Object} an object whose values are primitive JSON values only
       */
      serialize: function (options) {
        return this.record.store.serializerFor(this.modelName).serialize(this, options);
      },

      /**
        @method unknownProperty
        @param {String} keyName
        @return {Object} The property value
        @deprecated Use [attr](#method_attr), [belongsTo](#method_belongsTo) or [hasMany](#method_hasMany) instead
      */
      unknownProperty: function (keyName) {
        return this.get(keyName);
      },

      /**
        @method _createSnapshot
        @private
      */
      _createSnapshot: function () {
        Ember.deprecate('You called _createSnapshot on what\'s already a DS.Snapshot. You shouldn\'t manually create snapshots in your adapter since the store passes snapshots to adapters by default.');
        return this;
      }
    };

    Ember.defineProperty(ember$data$lib$system$snapshot$$Snapshot.prototype, 'typeKey', {
      enumerable: false,
      get: function () {
        Ember.deprecate('Snapshot.typeKey is deprecated. Use snapshot.modelName instead.');
        return this.modelName;
      },
      set: function () {
        Ember.assert('Setting snapshot.typeKey is not supported. In addition, Snapshot.typeKey has been deprecated for Snapshot.modelName.');
      }
    });

    var ember$data$lib$system$snapshot$$default = ember$data$lib$system$snapshot$$Snapshot;

    var ember$data$lib$system$model$internal$model$$Promise = Ember.RSVP.Promise;
    var ember$data$lib$system$model$internal$model$$get = Ember.get;
    var ember$data$lib$system$model$internal$model$$set = Ember.set;
    var ember$data$lib$system$model$internal$model$$forEach = Ember.ArrayPolyfills.forEach;
    var ember$data$lib$system$model$internal$model$$map = Ember.ArrayPolyfills.map;

    var ember$data$lib$system$model$internal$model$$_extractPivotNameCache = Ember.create(null);
    var ember$data$lib$system$model$internal$model$$_splitOnDotCache = Ember.create(null);

    function ember$data$lib$system$model$internal$model$$splitOnDot(name) {
      return ember$data$lib$system$model$internal$model$$_splitOnDotCache[name] || (ember$data$lib$system$model$internal$model$$_splitOnDotCache[name] = name.split("."));
    }

    function ember$data$lib$system$model$internal$model$$extractPivotName(name) {
      return ember$data$lib$system$model$internal$model$$_extractPivotNameCache[name] || (ember$data$lib$system$model$internal$model$$_extractPivotNameCache[name] = ember$data$lib$system$model$internal$model$$splitOnDot(name)[0]);
    }

    function ember$data$lib$system$model$internal$model$$retrieveFromCurrentState(key) {
      return function () {
        return ember$data$lib$system$model$internal$model$$get(this.currentState, key);
      };
    }

    /**
      `InternalModel` is the Model class that we use internally inside Ember Data to represent models.
      Internal ED methods should only deal with `InternalModel` objects. It is a fast, plain Javascript class.

      We expose `DS.Model` to application code, by materializing a `DS.Model` from `InternalModel` lazily, as
      a performance optimization.

      `InternalModel` should never be exposed to application code. At the boundaries of the system, in places
      like `find`, `push`, etc. we convert between Models and InternalModels.

      We need to make sure that the properties from `InternalModel` are correctly exposed/proxied on `Model`
      if they are needed.

      @class InternalModel
    */

    var ember$data$lib$system$model$internal$model$$InternalModel = function InternalModel(type, id, store, container, data) {
      this.type = type;
      this.id = id;
      this.store = store;
      this.container = container;
      this._data = data || Ember.create(null);
      this.modelName = type.modelName;
      this.dataHasInitialized = false;
      //Look into making this lazy
      this._deferredTriggers = [];
      this._attributes = Ember.create(null);
      this._inFlightAttributes = Ember.create(null);
      this._relationships = new ember$data$lib$system$relationships$state$create$$default(this);
      this.currentState = ember$data$lib$system$model$states$$default.empty;
      this.isReloading = false;
      this.isError = false;
      this.error = null;
      /*
        implicit relationships are relationship which have not been declared but the inverse side exists on
        another record somewhere
        For example if there was
         ```app/models/comment.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          name: DS.attr()
        })
        ```
         but there is also
         ```app/models/post.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          name: DS.attr(),
          comments: DS.hasMany('comment')
        })
        ```
         would have a implicit post relationship in order to be do things like remove ourselves from the post
        when we are deleted
      */
      this._implicitRelationships = Ember.create(null);
    };

    ember$data$lib$system$model$internal$model$$InternalModel.prototype = {
      isEmpty: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("isEmpty"),
      isLoading: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("isLoading"),
      isLoaded: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("isLoaded"),
      hasDirtyAttributes: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("hasDirtyAttributes"),
      isSaving: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("isSaving"),
      isDeleted: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("isDeleted"),
      isNew: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("isNew"),
      isValid: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("isValid"),
      dirtyType: ember$data$lib$system$model$internal$model$$retrieveFromCurrentState("dirtyType"),

      constructor: ember$data$lib$system$model$internal$model$$InternalModel,
      materializeRecord: function () {
        Ember.assert("Materialized " + this.modelName + " record with id:" + this.id + "more than once", this.record === null || this.record === undefined);
        // lookupFactory should really return an object that creates
        // instances with the injections applied
        this.record = this.type._create({
          id: this.id,
          store: this.store,
          container: this.container,
          _internalModel: this,
          currentState: ember$data$lib$system$model$internal$model$$get(this, "currentState"),
          isError: this.isError,
          error: this.error
        });
        this._triggerDeferredTriggers();
      },

      recordObjectWillDestroy: function () {
        this.record = null;
      },

      deleteRecord: function () {
        this.send("deleteRecord");
      },

      save: function (options) {
        var promiseLabel = "DS: Model#save " + this;
        var resolver = Ember.RSVP.defer(promiseLabel);

        this.store.scheduleSave(this, resolver, options);
        return resolver.promise;
      },

      startedReloading: function () {
        this.isReloading = true;
        if (this.record) {
          ember$data$lib$system$model$internal$model$$set(this.record, "isReloading", true);
        }
      },

      finishedReloading: function () {
        this.isReloading = false;
        if (this.record) {
          ember$data$lib$system$model$internal$model$$set(this.record, "isReloading", false);
        }
      },

      reload: function () {
        this.startedReloading();
        var record = this;
        var promiseLabel = "DS: Model#reload of " + this;
        return new ember$data$lib$system$model$internal$model$$Promise(function (resolve) {
          record.send("reloadRecord", resolve);
        }, promiseLabel).then(function () {
          record.didCleanError();
          return record;
        }, function (error) {
          record.didError(error);
          throw error;
        }, "DS: Model#reload complete, update flags")["finally"](function () {
          record.finishedReloading();
          record.updateRecordArrays();
        });
      },

      getRecord: function () {
        if (!this.record) {
          this.materializeRecord();
        }
        return this.record;
      },

      unloadRecord: function () {
        this.send("unloadRecord");
      },

      eachRelationship: function (callback, binding) {
        return this.type.eachRelationship(callback, binding);
      },

      eachAttribute: function (callback, binding) {
        return this.type.eachAttribute(callback, binding);
      },

      inverseFor: function (key) {
        return this.type.inverseFor(key);
      },

      setupData: function (data) {
        var changedKeys = this._changedKeys(data.attributes);
        ember$data$lib$system$merge$$default(this._data, data.attributes);
        this.pushedData();
        if (this.record) {
          this.record._notifyProperties(changedKeys);
        }
        this.didInitalizeData();
      },

      becameReady: function () {
        Ember.run.schedule("actions", this.store.recordArrayManager, this.store.recordArrayManager.recordWasLoaded, this);
      },

      didInitalizeData: function () {
        if (!this.dataHasInitialized) {
          this.becameReady();
          this.dataHasInitialized = true;
        }
      },

      destroy: function () {
        if (this.record) {
          return this.record.destroy();
        }
      },

      /**
        @method createSnapshot
        @private
      */
      createSnapshot: function (options) {
        var adapterOptions = options && options.adapterOptions;
        var snapshot = new ember$data$lib$system$snapshot$$default(this);
        snapshot.adapterOptions = adapterOptions;
        return snapshot;
      },

      /**
        @method loadingData
        @private
        @param {Promise} promise
      */
      loadingData: function (promise) {
        this.send("loadingData", promise);
      },

      /**
        @method loadedData
        @private
      */
      loadedData: function () {
        this.send("loadedData");
        this.didInitalizeData();
      },

      /**
        @method notFound
        @private
      */
      notFound: function () {
        this.send("notFound");
      },

      /**
        @method pushedData
        @private
      */
      pushedData: function () {
        this.send("pushedData");
      },

      flushChangedAttributes: function () {
        this._inFlightAttributes = this._attributes;
        this._attributes = Ember.create(null);
      },

      /**
        @method adapterWillCommit
        @private
      */
      adapterWillCommit: function () {
        this.send("willCommit");
      },

      /**
        @method adapterDidDirty
        @private
      */
      adapterDidDirty: function () {
        this.send("becomeDirty");
        this.updateRecordArraysLater();
      },

      /**
        @method send
        @private
        @param {String} name
        @param {Object} context
      */
      send: function (name, context) {
        var currentState = ember$data$lib$system$model$internal$model$$get(this, "currentState");

        if (!currentState[name]) {
          this._unhandledEvent(currentState, name, context);
        }

        return currentState[name](this, context);
      },

      notifyHasManyAdded: function (key, record, idx) {
        if (this.record) {
          this.record.notifyHasManyAdded(key, record, idx);
        }
      },

      notifyHasManyRemoved: function (key, record, idx) {
        if (this.record) {
          this.record.notifyHasManyRemoved(key, record, idx);
        }
      },

      notifyBelongsToChanged: function (key, record) {
        if (this.record) {
          this.record.notifyBelongsToChanged(key, record);
        }
      },

      notifyPropertyChange: function (key) {
        if (this.record) {
          this.record.notifyPropertyChange(key);
        }
      },

      rollbackAttributes: function () {
        var dirtyKeys = Ember.keys(this._attributes);

        this._attributes = Ember.create(null);

        if (ember$data$lib$system$model$internal$model$$get(this, "isError")) {
          this._inFlightAttributes = Ember.create(null);
          this.didCleanError();
        }

        //Eventually rollback will always work for relationships
        //For now we support it only out of deleted state, because we
        //have an explicit way of knowing when the server acked the relationship change
        if (this.isDeleted()) {
          //TODO: Should probably move this to the state machine somehow
          this.becameReady();
          this.reconnectRelationships();
        }

        if (this.isNew()) {
          this.clearRelationships();
        }

        if (this.isValid()) {
          this._inFlightAttributes = Ember.create(null);
        }

        this.send("rolledBack");

        this.record._notifyProperties(dirtyKeys);
      },
      /**
        @method transitionTo
        @private
        @param {String} name
      */
      transitionTo: function (name) {
        // POSSIBLE TODO: Remove this code and replace with
        // always having direct reference to state objects

        var pivotName = ember$data$lib$system$model$internal$model$$extractPivotName(name);
        var currentState = ember$data$lib$system$model$internal$model$$get(this, "currentState");
        var state = currentState;

        do {
          if (state.exit) {
            state.exit(this);
          }
          state = state.parentState;
        } while (!state.hasOwnProperty(pivotName));

        var path = ember$data$lib$system$model$internal$model$$splitOnDot(name);
        var setups = [];
        var enters = [];
        var i, l;

        for (i = 0, l = path.length; i < l; i++) {
          state = state[path[i]];

          if (state.enter) {
            enters.push(state);
          }
          if (state.setup) {
            setups.push(state);
          }
        }

        for (i = 0, l = enters.length; i < l; i++) {
          enters[i].enter(this);
        }

        ember$data$lib$system$model$internal$model$$set(this, "currentState", state);
        //TODO Consider whether this is the best approach for keeping these two in sync
        if (this.record) {
          ember$data$lib$system$model$internal$model$$set(this.record, "currentState", state);
        }

        for (i = 0, l = setups.length; i < l; i++) {
          setups[i].setup(this);
        }

        this.updateRecordArraysLater();
      },

      _unhandledEvent: function (state, name, context) {
        var errorMessage = "Attempted to handle event `" + name + "` ";
        errorMessage += "on " + String(this) + " while in state ";
        errorMessage += state.stateName + ". ";

        if (context !== undefined) {
          errorMessage += "Called with " + Ember.inspect(context) + ".";
        }

        throw new Ember.Error(errorMessage);
      },

      triggerLater: function () {
        var length = arguments.length;
        var args = new Array(length);

        for (var i = 0; i < length; i++) {
          args[i] = arguments[i];
        }

        if (this._deferredTriggers.push(args) !== 1) {
          return;
        }
        Ember.run.scheduleOnce("actions", this, "_triggerDeferredTriggers");
      },

      _triggerDeferredTriggers: function () {
        //TODO: Before 1.0 we want to remove all the events that happen on the pre materialized record,
        //but for now, we queue up all the events triggered before the record was materialized, and flush
        //them once we have the record
        if (!this.record) {
          return;
        }
        for (var i = 0, l = this._deferredTriggers.length; i < l; i++) {
          this.record.trigger.apply(this.record, this._deferredTriggers[i]);
        }

        this._deferredTriggers.length = 0;
      },
      /**
        @method clearRelationships
        @private
      */
      clearRelationships: function () {
        this.eachRelationship(function (name, relationship) {
          if (this._relationships.has(name)) {
            var rel = this._relationships.get(name);
            //TODO(Igor) figure out whether we want to clear or disconnect
            rel.clear();
            rel.destroy();
          }
        }, this);
        var model = this;
        ember$data$lib$system$model$internal$model$$forEach.call(Ember.keys(this._implicitRelationships), function (key) {
          model._implicitRelationships[key].clear();
          model._implicitRelationships[key].destroy();
        });
      },

      disconnectRelationships: function () {
        this.eachRelationship(function (name, relationship) {
          this._relationships.get(name).disconnect();
        }, this);
        var model = this;
        ember$data$lib$system$model$internal$model$$forEach.call(Ember.keys(this._implicitRelationships), function (key) {
          model._implicitRelationships[key].disconnect();
        });
      },

      reconnectRelationships: function () {
        this.eachRelationship(function (name, relationship) {
          this._relationships.get(name).reconnect();
        }, this);
        var model = this;
        ember$data$lib$system$model$internal$model$$forEach.call(Ember.keys(this._implicitRelationships), function (key) {
          model._implicitRelationships[key].reconnect();
        });
      },

      /**
        When a find request is triggered on the store, the user can optionally pass in
        attributes and relationships to be preloaded. These are meant to behave as if they
        came back from the server, except the user obtained them out of band and is informing
        the store of their existence. The most common use case is for supporting client side
        nested URLs, such as `/posts/1/comments/2` so the user can do
        `store.find('comment', 2, {post:1})` without having to fetch the post.
         Preloaded data can be attributes and relationships passed in either as IDs or as actual
        models.
         @method _preloadData
        @private
        @param {Object} preload
      */
      _preloadData: function (preload) {
        var record = this;
        //TODO(Igor) consider the polymorphic case
        ember$data$lib$system$model$internal$model$$forEach.call(Ember.keys(preload), function (key) {
          var preloadValue = ember$data$lib$system$model$internal$model$$get(preload, key);
          var relationshipMeta = record.type.metaForProperty(key);
          if (relationshipMeta.isRelationship) {
            record._preloadRelationship(key, preloadValue);
          } else {
            record._data[key] = preloadValue;
          }
        });
      },

      _preloadRelationship: function (key, preloadValue) {
        var relationshipMeta = this.type.metaForProperty(key);
        var type = relationshipMeta.type;
        if (relationshipMeta.kind === "hasMany") {
          this._preloadHasMany(key, preloadValue, type);
        } else {
          this._preloadBelongsTo(key, preloadValue, type);
        }
      },

      _preloadHasMany: function (key, preloadValue, type) {
        Ember.assert("You need to pass in an array to set a hasMany property on a record", Ember.isArray(preloadValue));
        var internalModel = this;

        var recordsToSet = ember$data$lib$system$model$internal$model$$map.call(preloadValue, function (recordToPush) {
          return internalModel._convertStringOrNumberIntoInternalModel(recordToPush, type);
        });
        //We use the pathway of setting the hasMany as if it came from the adapter
        //because the user told us that they know this relationships exists already
        this._relationships.get(key).updateRecordsFromAdapter(recordsToSet);
      },

      _preloadBelongsTo: function (key, preloadValue, type) {
        var recordToSet = this._convertStringOrNumberIntoInternalModel(preloadValue, type);

        //We use the pathway of setting the hasMany as if it came from the adapter
        //because the user told us that they know this relationships exists already
        this._relationships.get(key).setRecord(recordToSet);
      },

      _convertStringOrNumberIntoInternalModel: function (value, type) {
        if (typeof value === "string" || typeof value === "number") {
          return this.store._internalModelForId(type, value);
        }
        if (value._internalModel) {
          return value._internalModel;
        }
        return value;
      },

      /**
        @method updateRecordArrays
        @private
      */
      updateRecordArrays: function () {
        this._updatingRecordArraysLater = false;
        this.store.dataWasUpdated(this.type, this);
      },

      setId: function (id) {
        this.id = id;
        //TODO figure out whether maybe we should proxy
        ember$data$lib$system$model$internal$model$$set(this.record, "id", id);
      },

      didError: function (error) {
        this.error = error;
        this.isError = true;

        if (this.record) {
          this.record.setProperties({
            isError: true,
            error: error
          });
        }
      },

      didCleanError: function () {
        this.isError = false;
        if (this.record) {
          this.record.setProperties({
            isError: false,
            error: null
          });
        }
      },
      /**
        If the adapter did not return a hash in response to a commit,
        merge the changed attributes and relationships into the existing
        saved data.
         @method adapterDidCommit
      */
      adapterDidCommit: function (data) {
        if (data) {
          data = data.attributes;
        }

        this.didCleanError();
        var changedKeys = this._changedKeys(data);

        ember$data$lib$system$merge$$default(this._data, this._inFlightAttributes);
        if (data) {
          ember$data$lib$system$merge$$default(this._data, data);
        }

        this._inFlightAttributes = Ember.create(null);

        this.send("didCommit");
        this.updateRecordArraysLater();

        if (!data) {
          return;
        }

        this.record._notifyProperties(changedKeys);
      },

      /**
        @method updateRecordArraysLater
        @private
      */
      updateRecordArraysLater: function () {
        // quick hack (something like this could be pushed into run.once
        if (this._updatingRecordArraysLater) {
          return;
        }
        this._updatingRecordArraysLater = true;
        Ember.run.schedule("actions", this, this.updateRecordArrays);
      },

      addErrorMessageToAttribute: function (attribute, message) {
        var record = this.getRecord();
        ember$data$lib$system$model$internal$model$$get(record, "errors").add(attribute, message);
      },

      removeErrorMessageFromAttribute: function (attribute) {
        var record = this.getRecord();
        ember$data$lib$system$model$internal$model$$get(record, "errors").remove(attribute);
      },

      clearErrorMessages: function () {
        var record = this.getRecord();
        ember$data$lib$system$model$internal$model$$get(record, "errors").clear();
      },

      // FOR USE DURING COMMIT PROCESS

      /**
        @method adapterDidInvalidate
        @private
      */
      adapterDidInvalidate: function (errors) {
        var attribute;

        for (attribute in errors) {
          if (errors.hasOwnProperty(attribute)) {
            this.addErrorMessageToAttribute(attribute, errors[attribute]);
          }
        }

        this._saveWasRejected();
      },

      /**
        @method adapterDidError
        @private
      */
      adapterDidError: function (error) {
        this.send("becameError");
        this.didError(error);
        this._saveWasRejected();
      },

      _saveWasRejected: function () {
        var keys = Ember.keys(this._inFlightAttributes);
        for (var i = 0; i < keys.length; i++) {
          if (this._attributes[keys[i]] === undefined) {
            this._attributes[keys[i]] = this._inFlightAttributes[keys[i]];
          }
        }
        this._inFlightAttributes = Ember.create(null);
      },

      /**
        @method _changedKeys
         Ember Data has 3 buckets for storing the value of an attribute on an internalModel.
         `_data` holds all of the attributes that have been acknowledged by
        a backend via the adapter. When rollbackAttributes is called on a model all
        attributes will revert to the record's state in `_data`.
         `_attributes` holds any change the user has made to an attribute
        that has not been acknowledged by the adapter. Any values in
        `_attributes` are have priority over values in `_data`.
         `_inFlightAttributes`. When a record is being synced with the
        backend the values in `_attributes` are copied to
        `_inFlightAttributes`. This way if the backend acknowledges the
        save but does not return the new state Ember Data can copy the
        values from `_inFlightAttributes` to `_data`. Without having to
        worry about changes made to `_attributes` while the save was
        happenign.
          Changed keys builds a list of all of the values that may have been
        changed by the backend after a successful save.
         It does this by iterating over each key, value pair in the payload
        returned from the server after a save. If the `key` is found in
        `_attributes` then the user has a local changed to the attribute
        that has not been synced with the server and the key is not
        included in the list of changed keys.
      
        If the value, for a key differs from the value in what Ember Data
        believes to be the truth about the backend state (A merger of the
        `_data` and `_inFlightAttributes` objects where
        `_inFlightAttributes` has priority) then that means the backend
        has updated the value and the key is added to the list of changed
        keys.
         @private
      */
      _changedKeys: function (updates) {
        var changedKeys = [];

        if (updates) {
          var original, i, value, key;
          var keys = Ember.keys(updates);
          var length = keys.length;

          original = ember$data$lib$system$merge$$default(Ember.create(null), this._data);
          original = ember$data$lib$system$merge$$default(original, this._inFlightAttributes);

          for (i = 0; i < length; i++) {
            key = keys[i];
            value = updates[key];

            // A value in _attributes means the user has a local change to
            // this attributes. We never override this value when merging
            // updates from the backend so we should not sent a change
            // notification if the server value differs from the original.
            if (this._attributes[key] !== undefined) {
              continue;
            }

            if (!Ember.isEqual(original[key], value)) {
              changedKeys.push(key);
            }
          }
        }

        return changedKeys;
      },

      toString: function () {
        if (this.record) {
          return this.record.toString();
        } else {
          return "<" + this.modelName + ":" + this.id + ">";
        }
      }
    };

    var ember$data$lib$system$model$internal$model$$default = ember$data$lib$system$model$internal$model$$InternalModel;

    var ember$data$lib$system$store$$Backburner = Ember._Backburner || Ember.Backburner || Ember.__loader.require("backburner")["default"] || Ember.__loader.require("backburner")["Backburner"];

    //Shim Backburner.join
    if (!ember$data$lib$system$store$$Backburner.prototype.join) {
      var ember$data$lib$system$store$$isString = function (suspect) {
        return typeof suspect === "string";
      };

      ember$data$lib$system$store$$Backburner.prototype.join = function () {
        var method, target;

        if (this.currentInstance) {
          var length = arguments.length;
          if (length === 1) {
            method = arguments[0];
            target = null;
          } else {
            target = arguments[0];
            method = arguments[1];
          }

          if (ember$data$lib$system$store$$isString(method)) {
            method = target[method];
          }

          if (length === 1) {
            return method();
          } else if (length === 2) {
            return method.call(target);
          } else {
            var args = new Array(length - 2);
            for (var i = 0, l = length - 2; i < l; i++) {
              args[i] = arguments[i + 2];
            }
            return method.apply(target, args);
          }
        } else {
          return this.run.apply(this, arguments);
        }
      };
    }

    //Get the materialized model from the internalModel/promise that returns
    //an internal model and return it in a promiseObject. Useful for returning
    //from find methods
    function ember$data$lib$system$store$$promiseRecord(internalModel, label) {
      var toReturn = internalModel.then(function (model) {
        return model.getRecord();
      });
      return ember$data$lib$system$promise$proxies$$promiseObject(toReturn, label);
    }

    var ember$data$lib$system$store$$get = Ember.get;
    var ember$data$lib$system$store$$set = Ember.set;
    var ember$data$lib$system$store$$once = Ember.run.once;
    var ember$data$lib$system$store$$isNone = Ember.isNone;
    var ember$data$lib$system$store$$forEach = Ember.ArrayPolyfills.forEach;
    var ember$data$lib$system$store$$indexOf = Ember.ArrayPolyfills.indexOf;
    var ember$data$lib$system$store$$map = Ember.ArrayPolyfills.map;
    var ember$data$lib$system$store$$Promise = Ember.RSVP.Promise;
    var ember$data$lib$system$store$$copy = Ember.copy;
    var ember$data$lib$system$store$$Store;

    var ember$data$lib$system$store$$Service = Ember.Service;
    if (!ember$data$lib$system$store$$Service) {
      ember$data$lib$system$store$$Service = Ember.Object;
    }

    // Implementors Note:
    //
    //   The variables in this file are consistently named according to the following
    //   scheme:
    //
    //   * +id+ means an identifier managed by an external source, provided inside
    //     the data provided by that source. These are always coerced to be strings
    //     before being used internally.
    //   * +clientId+ means a transient numerical identifier generated at runtime by
    //     the data store. It is important primarily because newly created objects may
    //     not yet have an externally generated id.
    //   * +internalModel+ means a record internalModel object, which holds metadata about a
    //     record, even if it has not yet been fully materialized.
    //   * +type+ means a DS.Model.

    /**
      The store contains all of the data for records loaded from the server.
      It is also responsible for creating instances of `DS.Model` that wrap
      the individual data for a record, so that they can be bound to in your
      Handlebars templates.

      Define your application's store like this:

      ```app/stores/application.js
      import DS from 'ember-data';

      export default DS.Store.extend({
      });
      ```

      Most Ember.js applications will only have a single `DS.Store` that is
      automatically created by their `Ember.Application`.

      You can retrieve models from the store in several ways. To retrieve a record
      for a specific id, use `DS.Store`'s `find()` method:

      ```javascript
      store.find('person', 123).then(function (person) {
      });
      ```

      By default, the store will talk to your backend using a standard
      REST mechanism. You can customize how the store talks to your
      backend by specifying a custom adapter:

      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.Adapter.extend({
      });
      ```

      You can learn more about writing a custom adapter by reading the `DS.Adapter`
      documentation.

      ### Store createRecord() vs. push() vs. pushPayload()

      The store provides multiple ways to create new record objects. They have
      some subtle differences in their use which are detailed below:

      [createRecord](#method_createRecord) is used for creating new
      records on the client side. This will return a new record in the
      `created.uncommitted` state. In order to persist this record to the
      backend you will need to call `record.save()`.

      [push](#method_push) is used to notify Ember Data's store of new or
      updated records that exist in the backend. This will return a record
      in the `loaded.saved` state. The primary use-case for `store#push` is
      to notify Ember Data about record updates (full or partial) that happen
      outside of the normal adapter methods (for example
      [SSE](http://dev.w3.org/html5/eventsource/) or [Web
      Sockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).

      [pushPayload](#method_pushPayload) is a convenience wrapper for
      `store#push` that will deserialize payloads if the
      Serializer implements a `pushPayload` method.

      Note: When creating a new record using any of the above methods
      Ember Data will update `DS.RecordArray`s such as those returned by
      `store#peekAll()`, `store#findAll()` or `store#filter()`. This means any
      data bindings or computed properties that depend on the RecordArray
      will automatically be synced to include the new or updated record
      values.

      @class Store
      @namespace DS
      @extends Ember.Service
    */
    ember$data$lib$system$store$$Store = ember$data$lib$system$store$$Service.extend({

      /**
        @method init
        @private
      */
      init: function () {
        this._backburner = new ember$data$lib$system$store$$Backburner(["normalizeRelationships", "syncRelationships", "finished"]);
        // internal bookkeeping; not observable
        this.typeMaps = {};
        this.recordArrayManager = ember$data$lib$system$record$array$manager$$default.create({
          store: this
        });
        this._pendingSave = [];
        this._instanceCache = new ember$data$lib$system$store$container$instance$cache$$default(this.container);
        //Used to keep track of all the find requests that need to be coalesced
        this._pendingFetch = ember$data$lib$system$map$$Map.create();
      },

      /**
        The adapter to use to communicate to a backend server or other persistence layer.
         This can be specified as an instance, class, or string.
         If you want to specify `app/adapters/custom.js` as a string, do:
         ```js
        adapter: 'custom'
        ```
         @property adapter
        @default DS.RESTAdapter
        @type {(DS.Adapter|String)}
      */
      adapter: "-rest",

      /**
        Returns a JSON representation of the record using a custom
        type-specific serializer, if one exists.
         The available options are:
         * `includeId`: `true` if the record's ID should be included in
          the JSON representation
         @method serialize
        @private
        @param {DS.Model} record the record to serialize
        @param {Object} options an options hash
      */
      serialize: function (record, options) {
        var snapshot = record._internalModel.createSnapshot();
        return snapshot.serialize(options);
      },

      /**
        This property returns the adapter, after resolving a possible
        string key.
         If the supplied `adapter` was a class, or a String property
        path resolved to a class, this property will instantiate the
        class.
         This property is cacheable, so the same instance of a specified
        adapter class should be used for the lifetime of the store.
         @property defaultAdapter
        @private
        @return DS.Adapter
      */
      defaultAdapter: Ember.computed("adapter", function () {
        var adapter = ember$data$lib$system$store$$get(this, "adapter");

        Ember.assert("You tried to set `adapter` property to an instance of `DS.Adapter`, where it should be a name", typeof adapter === "string");

        adapter = this.retrieveManagedInstance("adapter", adapter);

        return adapter;
      }),

      // .....................
      // . CREATE NEW RECORD .
      // .....................

      /**
        Create a new record in the current store. The properties passed
        to this method are set on the newly created record.
         To create a new instance of `App.Post`:
         ```js
        store.createRecord('post', {
          title: "Rails is omakase"
        });
        ```
         @method createRecord
        @param {String} modelName
        @param {Object} inputProperties a hash of properties to set on the
          newly created record.
        @return {DS.Model} record
      */
      createRecord: function (modelName, inputProperties) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var typeClass = this.modelFor(modelName);
        var properties = ember$data$lib$system$store$$copy(inputProperties) || Ember.create(null);

        // If the passed properties do not include a primary key,
        // give the adapter an opportunity to generate one. Typically,
        // client-side ID generators will use something like uuid.js
        // to avoid conflicts.

        if (ember$data$lib$system$store$$isNone(properties.id)) {
          properties.id = this._generateId(modelName, properties);
        }

        // Coerce ID to a string
        properties.id = ember$data$lib$system$coerce$id$$default(properties.id);

        var internalModel = this.buildInternalModel(typeClass, properties.id);
        var record = internalModel.getRecord();

        // Move the record out of its initial `empty` state into
        // the `loaded` state.
        internalModel.loadedData();

        // Set the properties specified on the record.
        record.setProperties(properties);

        internalModel.eachRelationship(function (key, descriptor) {
          internalModel._relationships.get(key).setHasData(true);
        });

        return record;
      },

      /**
        If possible, this method asks the adapter to generate an ID for
        a newly created record.
         @method _generateId
        @private
        @param {String} modelName
        @param {Object} properties from the new record
        @return {String} if the adapter can generate one, an ID
      */
      _generateId: function (modelName, properties) {
        var adapter = this.adapterFor(modelName);

        if (adapter && adapter.generateIdForRecord) {
          return adapter.generateIdForRecord(this, modelName, properties);
        }

        return null;
      },

      // .................
      // . DELETE RECORD .
      // .................

      /**
        For symmetry, a record can be deleted via the store.
         Example
         ```javascript
        var post = store.createRecord('post', {
          title: "Rails is omakase"
        });
         store.deleteRecord(post);
        ```
         @method deleteRecord
        @param {DS.Model} record
      */
      deleteRecord: function (record) {
        record.deleteRecord();
      },

      /**
        For symmetry, a record can be unloaded via the store. Only
        non-dirty records can be unloaded.
         Example
         ```javascript
        store.find('post', 1).then(function(post) {
          store.unloadRecord(post);
        });
        ```
         @method unloadRecord
        @param {DS.Model} record
      */
      unloadRecord: function (record) {
        record.unloadRecord();
      },

      // ................
      // . FIND RECORDS .
      // ................

      /**
        This is the main entry point into finding records. The first parameter to
        this method is the model's name as a string.
         ---
         To find a record by ID, pass the `id` as the second parameter:
         ```javascript
        store.find('person', 1);
        ```
         The `find` method will always return a **promise** that will be resolved
        with the record. If the record was already in the store, the promise will
        be resolved immediately. Otherwise, the store will ask the adapter's `find`
        method to find the necessary data.
         The `find` method will always resolve its promise with the same object for
        a given type and `id`.
         ---
         You can optionally `preload` specific attributes and relationships that you know of
        by passing them as the third argument to find.
         For example, if your Ember route looks like `/posts/1/comments/2` and your API route
        for the comment also looks like `/posts/1/comments/2` if you want to fetch the comment
        without fetching the post you can pass in the post to the `find` call:
         ```javascript
        store.find('comment', 2, { preload: { post: 1 } });
        ```
         If you have access to the post model you can also pass the model itself:
         ```javascript
        store.find('post', 1).then(function (myPostModel) {
          store.find('comment', 2, {post: myPostModel});
        });
        ```
         This way, your adapter's `find` or `buildURL` method will be able to look up the
        relationship on the record and construct the nested URL without having to first
        fetch the post.
         ---
         To find all records for a type, call `findAll`:
         ```javascript
        store.findAll('person');
        ```
         This will ask the adapter's `findAll` method to find the records for the
        given type, and return a promise that will be resolved once the server
        returns the values. The promise will resolve into all records of this type
        present in the store, even if the server only returns a subset of them.
         @method find
        @param {String} modelName
        @param {(Object|String|Integer|null)} id
        @param {Object} options
        @return {Promise} promise
      */
      find: function (modelName, id, preload) {
        Ember.assert("You need to pass a type to the store's find method", arguments.length >= 1);
        Ember.assert("You may not pass `" + id + "` as id to the store's find method", arguments.length === 1 || !Ember.isNone(id));
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");

        if (arguments.length === 1) {
          Ember.deprecate("Using store.find(type) has been deprecated. Use store.findAll(type) to retrieve all records for a given type.");
          return this.findAll(modelName);
        }

        // We are passed a query instead of an id.
        if (Ember.typeOf(id) === "object") {
          Ember.deprecate("Calling store.find() with a query object is deprecated. Use store.query() instead.");
          return this.query(modelName, id);
        }
        var options = ember$data$lib$system$store$$deprecatePreload(preload, this.modelFor(modelName), "find");
        return this.findRecord(modelName, ember$data$lib$system$coerce$id$$default(id), options);
      },

      /**
        This method returns a fresh record for a given type and id combination.
         @method fetchById
        @deprecated Use [findRecord](#method_findRecord) instead
        @param {String} modelName
        @param {(String|Integer)} id
        @param {Object} options
        @return {Promise} promise
      */
      fetchById: function (modelName, id, preload) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var options = ember$data$lib$system$store$$deprecatePreload(preload, this.modelFor(modelName), "fetchById");
        Ember.deprecate("Using store.fetchById(type, id) has been deprecated. Use store.findRecord(type, id, { reload: true }) to reload a record for a given type.");
        if (this.hasRecordForId(modelName, id)) {
          return this.peekRecord(modelName, id).reload();
        } else {
          return this.findRecord(modelName, id, options);
        }
      },

      /**
        This method returns a fresh collection from the server, regardless of if there is already records
        in the store or not.
         @method fetchAll
        @deprecated Use [findAll](#method_findAll) instead
        @param {String} modelName
        @return {Promise} promise
      */
      fetchAll: function (modelName) {
        Ember.deprecate("Using store.fetchAll(type) has been deprecated. Use store.findAll(type, { reload: true }) to retrieve all records for a given type.");
        return this.findAll(modelName, { reload: true });
      },

      /**
        @method fetch
        @param {String} modelName
        @param {(String|Integer)} id
        @param {Object} preload - optional set of attributes and relationships passed in either as IDs or as actual models
        @return {Promise} promise
        @deprecated Use [findRecord](#method_findRecord) instead
      */
      fetch: function (modelName, id, preload) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        Ember.deprecate("Using store.fetch() has been deprecated. Use store.findRecord for fetching individual records or store.findAll for collections");
        return this.findRecord(modelName, id, { reload: true, preload: preload });
      },

      /**
        This method returns a record for a given type and id combination.
         @method findById
        @private
        @param {String} modelName
        @param {(String|Integer)} id
        @param {Object} options
        @return {Promise} promise
      */
      findById: function (modelName, id, preload) {
        Ember.deprecate("Using store.findById() has been deprecated. Use store.findRecord() to return a record for a given type and id combination.");
        var options = ember$data$lib$system$store$$deprecatePreload(preload, this.modelFor(modelName), "findById");
        return this.findRecord(modelName, id, options);
      },

      /**
        This method returns a record for a given type and id combination.
         The `findRecord` method will always return a **promise** that will be
        resolved with the record. If the record was already in the store,
        the promise will be resolved immediately. Otherwise, the store
        will ask the adapter's `find` method to find the necessary data.
         The `findRecord` method will always resolve its promise with the same
        object for a given type and `id`.
         Example
         ```app/routes/post.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          model: function(params) {
            return this.store.findRecord('post', params.post_id);
          }
        });
        ```
         If you would like to force the record to reload, instead of
        loading it from the cache when present you can set `reload: true`
        in the options object for `findRecord`.
         ```app/routes/post/edit.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          model: function(params) {
            return this.store.findRecord('post', params.post_id, { reload: true });
          }
        });
        ```
         @method findRecord
        @param {String} modelName
        @param {(String|Integer)} id
        @param {Object} options
        @return {Promise} promise
      */
      findRecord: function (modelName, id, options) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var internalModel = this._internalModelForId(modelName, id);
        options = options || {};

        return this._findByInternalModel(internalModel, options);
      },

      _findByInternalModel: function (internalModel, options) {
        options = options || {};

        if (options.preload) {
          internalModel._preloadData(options.preload);
        }

        var fetchedInternalModel = this._fetchOrResolveInternalModel(internalModel, options);

        return ember$data$lib$system$store$$promiseRecord(fetchedInternalModel, "DS: Store#findRecord " + internalModel.typeKey + " with id: " + ember$data$lib$system$store$$get(internalModel, "id"));
      },

      _fetchOrResolveInternalModel: function (internalModel, options) {
        var typeClass = internalModel.type;
        var adapter = this.adapterFor(typeClass.modelName);
        // Always fetch the model if it is not loaded
        if (internalModel.isEmpty()) {
          return this.scheduleFetch(internalModel, options);
        }

        //TODO double check about reloading
        if (internalModel.isLoading()) {
          return internalModel._loadingPromise;
        }

        // Refetch if the reload option is passed
        if (options.reload) {
          return this.scheduleFetch(internalModel, options);
        }

        // Refetch the record if the adapter thinks the record is stale
        var snapshot = internalModel.createSnapshot();
        snapshot.adapterOptions = options && options.adapterOptions;
        if (adapter.shouldReloadRecord(this, snapshot)) {
          return this.scheduleFetch(internalModel, options);
        }

        // Trigger the background refetch if all the previous checks fail
        if (adapter.shouldBackgroundReloadRecord(this, snapshot)) {
          this.scheduleFetch(internalModel, options);
        }

        // Return the cached record
        return ember$data$lib$system$store$$Promise.resolve(internalModel);
      },
      /**
        This method makes a series of requests to the adapter's `find` method
        and returns a promise that resolves once they are all loaded.
         @private
        @method findByIds
        @param {String} modelName
        @param {Array} ids
        @return {Promise} promise
      */
      findByIds: function (modelName, ids) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var store = this;

        return ember$data$lib$system$promise$proxies$$promiseArray(Ember.RSVP.all(ember$data$lib$system$store$$map.call(ids, function (id) {
          return store.findRecord(modelName, id);
        })).then(Ember.A, null, "DS: Store#findByIds of " + modelName + " complete"));
      },

      /**
        This method is called by `findRecord` if it discovers that a particular
        type/id pair hasn't been loaded yet to kick off a request to the
        adapter.
         @method fetchRecord
        @private
        @param {InternalModel} internalModel model
        @return {Promise} promise
       */
      // TODO rename this to have an underscore
      fetchRecord: function (internalModel, options) {
        var typeClass = internalModel.type;
        var id = internalModel.id;
        var adapter = this.adapterFor(typeClass.modelName);

        Ember.assert("You tried to find a record but you have no adapter (for " + typeClass + ")", adapter);
        Ember.assert("You tried to find a record but your adapter (for " + typeClass + ") does not implement 'findRecord'", typeof adapter.findRecord === "function" || typeof adapter.find === "function");

        var promise = ember$data$lib$system$store$finders$$_find(adapter, this, typeClass, id, internalModel, options);
        return promise;
      },

      scheduleFetchMany: function (records) {
        var internalModels = ember$data$lib$system$store$$map.call(records, function (record) {
          return record._internalModel;
        });
        return ember$data$lib$system$store$$Promise.all(ember$data$lib$system$store$$map.call(internalModels, this.scheduleFetch, this));
      },

      scheduleFetch: function (internalModel, options) {
        var typeClass = internalModel.type;

        if (internalModel._loadingPromise) {
          return internalModel._loadingPromise;
        }

        var resolver = Ember.RSVP.defer("Fetching " + typeClass + "with id: " + internalModel.id);
        var pendingFetchItem = {
          record: internalModel,
          resolver: resolver,
          options: options
        };
        var promise = resolver.promise;

        internalModel.loadingData(promise);

        if (!this._pendingFetch.get(typeClass)) {
          this._pendingFetch.set(typeClass, [pendingFetchItem]);
        } else {
          this._pendingFetch.get(typeClass).push(pendingFetchItem);
        }
        Ember.run.scheduleOnce("afterRender", this, this.flushAllPendingFetches);

        return promise;
      },

      flushAllPendingFetches: function () {
        if (this.isDestroyed || this.isDestroying) {
          return;
        }

        this._pendingFetch.forEach(this._flushPendingFetchForType, this);
        this._pendingFetch = ember$data$lib$system$map$$Map.create();
      },

      _flushPendingFetchForType: function (pendingFetchItems, typeClass) {
        var store = this;
        var adapter = store.adapterFor(typeClass.modelName);
        var shouldCoalesce = !!adapter.findMany && adapter.coalesceFindRequests;
        var records = Ember.A(pendingFetchItems).mapBy("record");

        function _fetchRecord(recordResolverPair) {
          recordResolverPair.resolver.resolve(store.fetchRecord(recordResolverPair.record, recordResolverPair.options)); // TODO adapter options
        }

        function resolveFoundRecords(records) {
          ember$data$lib$system$store$$forEach.call(records, function (record) {
            var pair = Ember.A(pendingFetchItems).findBy("record", record);
            if (pair) {
              var resolver = pair.resolver;
              resolver.resolve(record);
            }
          });
          return records;
        }

        function makeMissingRecordsRejector(requestedRecords) {
          return function rejectMissingRecords(resolvedRecords) {
            resolvedRecords = Ember.A(resolvedRecords);
            var missingRecords = requestedRecords.reject(function (record) {
              return resolvedRecords.contains(record);
            });
            if (missingRecords.length) {
              Ember.warn("Ember Data expected to find records with the following ids in the adapter response but they were missing: " + Ember.inspect(Ember.A(missingRecords).mapBy("id")), false);
            }
            rejectRecords(missingRecords);
          };
        }

        function makeRecordsRejector(records) {
          return function (error) {
            rejectRecords(records, error);
          };
        }

        function rejectRecords(records, error) {
          ember$data$lib$system$store$$forEach.call(records, function (record) {
            var pair = Ember.A(pendingFetchItems).findBy("record", record);
            if (pair) {
              var resolver = pair.resolver;
              resolver.reject(error);
            }
          });
        }

        if (pendingFetchItems.length === 1) {
          _fetchRecord(pendingFetchItems[0]);
        } else if (shouldCoalesce) {

          // TODO: Improve records => snapshots => records => snapshots
          //
          // We want to provide records to all store methods and snapshots to all
          // adapter methods. To make sure we're doing that we're providing an array
          // of snapshots to adapter.groupRecordsForFindMany(), which in turn will
          // return grouped snapshots instead of grouped records.
          //
          // But since the _findMany() finder is a store method we need to get the
          // records from the grouped snapshots even though the _findMany() finder
          // will once again convert the records to snapshots for adapter.findMany()

          var snapshots = Ember.A(records).invoke("createSnapshot");
          var groups = adapter.groupRecordsForFindMany(this, snapshots);
          ember$data$lib$system$store$$forEach.call(groups, function (groupOfSnapshots) {
            var groupOfRecords = Ember.A(groupOfSnapshots).mapBy("_internalModel");
            var requestedRecords = Ember.A(groupOfRecords);
            var ids = requestedRecords.mapBy("id");
            if (ids.length > 1) {
              ember$data$lib$system$store$finders$$_findMany(adapter, store, typeClass, ids, requestedRecords).then(resolveFoundRecords).then(makeMissingRecordsRejector(requestedRecords)).then(null, makeRecordsRejector(requestedRecords));
            } else if (ids.length === 1) {
              var pair = Ember.A(pendingFetchItems).findBy("record", groupOfRecords[0]);
              _fetchRecord(pair);
            } else {
              Ember.assert("You cannot return an empty array from adapter's method groupRecordsForFindMany", false);
            }
          });
        } else {
          ember$data$lib$system$store$$forEach.call(pendingFetchItems, _fetchRecord);
        }
      },

      /**
        Get a record by a given type and ID without triggering a fetch.
         This method will synchronously return the record if it is available in the store,
        otherwise it will return `null`. A record is available if it has been fetched earlier, or
        pushed manually into the store.
         _Note: This is an synchronous method and does not return a promise._
         ```js
        var post = store.getById('post', 1);
         post.get('id'); // 1
        ```
         @method getById
        @param {String} modelName
        @param {String|Integer} id
        @return {DS.Model|null} record
      */
      getById: function (modelName, id) {
        Ember.deprecate("Using store.getById() has been deprecated. Use store.peekRecord to get a record by a given type and ID without triggering a fetch.");
        return this.peekRecord(modelName, id);
      },

      /**
        Get a record by a given type and ID without triggering a fetch.
         This method will synchronously return the record if it is available in the store,
        otherwise it will return `null`. A record is available if it has been fetched earlier, or
        pushed manually into the store.
         _Note: This is an synchronous method and does not return a promise._
         ```js
        var post = store.peekRecord('post', 1);
         post.get('id'); // 1
        ```
         @method peekRecord
        @param {String} modelName
        @param {String|Integer} id
        @return {DS.Model|null} record
      */
      peekRecord: function (modelName, id) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        if (this.hasRecordForId(modelName, id)) {
          return this._internalModelForId(modelName, id).getRecord();
        } else {
          return null;
        }
      },

      /**
        This method is called by the record's `reload` method.
         This method calls the adapter's `find` method, which returns a promise. When
        **that** promise resolves, `reloadRecord` will resolve the promise returned
        by the record's `reload`.
         @method reloadRecord
        @private
        @param {DS.Model} internalModel
        @return {Promise} promise
      */
      reloadRecord: function (internalModel) {
        var modelName = internalModel.type.modelName;
        var adapter = this.adapterFor(modelName);
        var id = internalModel.id;

        Ember.assert("You cannot reload a record without an ID", id);
        Ember.assert("You tried to reload a record but you have no adapter (for " + modelName + ")", adapter);
        Ember.assert("You tried to reload a record but your adapter does not implement `findRecord`", typeof adapter.findRecord === "function" || typeof adapter.find === "function");

        return this.scheduleFetch(internalModel);
      },

      /**
        Returns true if a record for a given type and ID is already loaded.
         @method hasRecordForId
        @param {(String|DS.Model)} modelName
        @param {(String|Integer)} inputId
        @return {Boolean}
      */
      hasRecordForId: function (modelName, inputId) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var typeClass = this.modelFor(modelName);
        var id = ember$data$lib$system$coerce$id$$default(inputId);
        var internalModel = this.typeMapFor(typeClass).idToRecord[id];
        return !!internalModel && internalModel.isLoaded();
      },

      /**
        Returns id record for a given type and ID. If one isn't already loaded,
        it builds a new record and leaves it in the `empty` state.
         @method recordForId
        @private
        @param {String} modelName
        @param {(String|Integer)} id
        @return {DS.Model} record
      */
      recordForId: function (modelName, id) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        return this._internalModelForId(modelName, id).getRecord();
      },

      _internalModelForId: function (typeName, inputId) {
        var typeClass = this.modelFor(typeName);
        var id = ember$data$lib$system$coerce$id$$default(inputId);
        var idToRecord = this.typeMapFor(typeClass).idToRecord;
        var record = idToRecord[id];

        if (!record || !idToRecord[id]) {
          record = this.buildInternalModel(typeClass, id);
        }

        return record;
      },

      /**
        @method findMany
        @private
        @param {Array} internalModels
        @return {Promise} promise
      */
      findMany: function (internalModels) {
        var store = this;
        return ember$data$lib$system$store$$Promise.all(ember$data$lib$system$store$$map.call(internalModels, function (internalModel) {
          return store._findByInternalModel(internalModel);
        }));
      },

      /**
        If a relationship was originally populated by the adapter as a link
        (as opposed to a list of IDs), this method is called when the
        relationship is fetched.
         The link (which is usually a URL) is passed through unchanged, so the
        adapter can make whatever request it wants.
         The usual use-case is for the server to register a URL as a link, and
        then use that URL in the future to make a request for the relationship.
         @method findHasMany
        @private
        @param {DS.Model} owner
        @param {any} link
        @param {(Relationship)} relationship
        @return {Promise} promise
      */
      findHasMany: function (owner, link, relationship) {
        var adapter = this.adapterFor(owner.type.modelName);

        Ember.assert("You tried to load a hasMany relationship but you have no adapter (for " + owner.type + ")", adapter);
        Ember.assert("You tried to load a hasMany relationship from a specified `link` in the original payload but your adapter does not implement `findHasMany`", typeof adapter.findHasMany === "function");

        return ember$data$lib$system$store$finders$$_findHasMany(adapter, this, owner, link, relationship);
      },

      /**
        @method findBelongsTo
        @private
        @param {DS.Model} owner
        @param {any} link
        @param {Relationship} relationship
        @return {Promise} promise
      */
      findBelongsTo: function (owner, link, relationship) {
        var adapter = this.adapterFor(owner.type.modelName);

        Ember.assert("You tried to load a belongsTo relationship but you have no adapter (for " + owner.type + ")", adapter);
        Ember.assert("You tried to load a belongsTo relationship from a specified `link` in the original payload but your adapter does not implement `findBelongsTo`", typeof adapter.findBelongsTo === "function");

        return ember$data$lib$system$store$finders$$_findBelongsTo(adapter, this, owner, link, relationship);
      },

      /**
        This method delegates a query to the adapter. This is the one place where
        adapter-level semantics are exposed to the application.
         Exposing queries this way seems preferable to creating an abstract query
        language for all server-side queries, and then require all adapters to
        implement them.
         The call made to the server, using a Rails backend, will look something like this:
         ```
        Started GET "/api/v1/person?page=1"
        Processing by Api::V1::PersonsController#index as HTML
        Parameters: {"page"=>"1"}
        ```
         If you do something like this:
         ```javascript
        store.query('person', {ids: [1, 2, 3]});
        ```
         The call to the server, using a Rails backend, will look something like this:
         ```
        Started GET "/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3"
        Processing by Api::V1::PersonsController#index as HTML
        Parameters: {"ids"=>["1", "2", "3"]}
        ```
         This method returns a promise, which is resolved with a `RecordArray`
        once the server returns.
         @method query
        @param {String} modelName
        @param {any} query an opaque query to be used by the adapter
        @return {Promise} promise
      */
      query: function (modelName, query) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var typeClass = this.modelFor(modelName);
        var array = this.recordArrayManager.createAdapterPopulatedRecordArray(typeClass, query);

        var adapter = this.adapterFor(modelName);

        Ember.assert("You tried to load a query but you have no adapter (for " + typeClass + ")", adapter);
        Ember.assert("You tried to load a query but your adapter does not implement `query`", typeof adapter.query === "function" || typeof adapter.findQuery === "function");

        return ember$data$lib$system$promise$proxies$$promiseArray(ember$data$lib$system$store$finders$$_query(adapter, this, typeClass, query, array));
      },

      /**
        This method delegates a query to the adapter. This is the one place where
        adapter-level semantics are exposed to the application.
         Exposing queries this way seems preferable to creating an abstract query
        language for all server-side queries, and then require all adapters to
        implement them.
         This method returns a promise, which is resolved with a `RecordObject`
        once the server returns.
         @method queryRecord
        @param {String or subclass of DS.Model} type
        @param {any} query an opaque query to be used by the adapter
        @return {Promise} promise
      */
      queryRecord: function (modelName, query) {
        Ember.assert("You need to pass a type to the store's queryRecord method", modelName);
        Ember.assert("You need to pass a query hash to the store's queryRecord method", query);
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");

        var typeClass = this.modelFor(modelName);
        var adapter = this.adapterFor(modelName);

        Ember.assert("You tried to make a query but you have no adapter (for " + typeClass + ")", adapter);
        Ember.assert("You tried to make a query but your adapter does not implement `queryRecord`", typeof adapter.queryRecord === "function");

        return ember$data$lib$system$promise$proxies$$promiseObject(ember$data$lib$system$store$finders$$_queryRecord(adapter, this, typeClass, query));
      },

      /**
        This method delegates a query to the adapter. This is the one place where
        adapter-level semantics are exposed to the application.
         Exposing queries this way seems preferable to creating an abstract query
        language for all server-side queries, and then require all adapters to
        implement them.
         This method returns a promise, which is resolved with a `RecordArray`
        once the server returns.
         @method query
        @param {String} modelName
        @param {any} query an opaque query to be used by the adapter
        @return {Promise} promise
        @deprecated Use `store.query instead`
      */
      findQuery: function (modelName, query) {
        Ember.deprecate("store#findQuery is deprecated. You should use store#query instead.");
        return this.query(modelName, query);
      },

      /**
        `findAll` ask the adapter's `findAll` method to find the records
        for the given type, and return a promise that will be resolved
        once the server returns the values. The promise will resolve into
        all records of this type present in the store, even if the server
        only returns a subset of them.
         ```app/routes/authors.js
        import Ember from 'ember';
         export default Ember.Route.extend({
          model: function(params) {
            return this.store.findAll('author');
          }
        });
        ```
         @method findAll
        @param {String} modelName
        @param {Object} options
        @return {DS.AdapterPopulatedRecordArray}
      */
      findAll: function (modelName, options) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var typeClass = this.modelFor(modelName);

        return this._fetchAll(typeClass, this.peekAll(modelName), options);
      },

      /**
        @method _fetchAll
        @private
        @param {DS.Model} typeClass
        @param {DS.RecordArray} array
        @return {Promise} promise
      */
      _fetchAll: function (typeClass, array, options) {
        options = options || {};
        var adapter = this.adapterFor(typeClass.modelName);
        var sinceToken = this.typeMapFor(typeClass).metadata.since;

        ember$data$lib$system$store$$set(array, "isUpdating", true);

        Ember.assert("You tried to load all records but you have no adapter (for " + typeClass + ")", adapter);
        Ember.assert("You tried to load all records but your adapter does not implement `findAll`", typeof adapter.findAll === "function");
        if (options.reload) {
          return ember$data$lib$system$promise$proxies$$promiseArray(ember$data$lib$system$store$finders$$_findAll(adapter, this, typeClass, sinceToken, options));
        }
        var snapshotArray = array.createSnapshot(options);
        if (adapter.shouldReloadAll(this, snapshotArray)) {
          return ember$data$lib$system$promise$proxies$$promiseArray(ember$data$lib$system$store$finders$$_findAll(adapter, this, typeClass, sinceToken, options));
        }
        if (adapter.shouldBackgroundReloadAll(this, snapshotArray)) {
          ember$data$lib$system$promise$proxies$$promiseArray(ember$data$lib$system$store$finders$$_findAll(adapter, this, typeClass, sinceToken, options));
        }
        return ember$data$lib$system$promise$proxies$$promiseArray(ember$data$lib$system$store$$Promise.resolve(array));
      },

      /**
        @method didUpdateAll
        @param {DS.Model} typeClass
        @private
      */
      didUpdateAll: function (typeClass) {
        var liveRecordArray = this.recordArrayManager.liveRecordArrayFor(typeClass);
        ember$data$lib$system$store$$set(liveRecordArray, "isUpdating", false);
      },

      /**
        This method returns a filtered array that contains all of the
        known records for a given type in the store.
         Note that because it's just a filter, the result will contain any
        locally created records of the type, however, it will not make a
        request to the backend to retrieve additional records. If you
        would like to request all the records from the backend please use
        [store.find](#method_find).
         Also note that multiple calls to `all` for a given type will always
        return the same `RecordArray`.
         Example
         ```javascript
        var localPosts = store.all('post');
        ```
         @method all
        @param {String} modelName
        @return {DS.RecordArray}
      */
      all: function (modelName) {
        Ember.deprecate("Using store.all() has been deprecated. Use store.peekAll() to get all records by a given type without triggering a fetch.");
        return this.peekAll(modelName);
      },

      /**
        This method returns a filtered array that contains all of the
        known records for a given type in the store.
         Note that because it's just a filter, the result will contain any
        locally created records of the type, however, it will not make a
        request to the backend to retrieve additional records. If you
        would like to request all the records from the backend please use
        [store.find](#method_find).
         Also note that multiple calls to `peekAll` for a given type will always
        return the same `RecordArray`.
         Example
         ```javascript
        var localPosts = store.peekAll('post');
        ```
         @method peekAll
        @param {String} modelName
        @return {DS.RecordArray}
      */
      peekAll: function (modelName) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var typeClass = this.modelFor(modelName);

        var liveRecordArray = this.recordArrayManager.liveRecordArrayFor(typeClass);
        this.recordArrayManager.populateLiveRecordArray(liveRecordArray, typeClass);

        return liveRecordArray;
      },

      /**
       This method unloads all records in the store.
        Optionally you can pass a type which unload all records for a given type.
        ```javascript
       store.unloadAll();
       store.unloadAll('post');
       ```
        @method unloadAll
       @param {String=} modelName
      */
      unloadAll: function (modelName) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), !modelName || typeof modelName === "string");
        if (arguments.length === 0) {
          var typeMaps = this.typeMaps;
          var keys = Ember.keys(typeMaps);

          var types = ember$data$lib$system$store$$map.call(keys, byType);

          ember$data$lib$system$store$$forEach.call(types, this.unloadAll, this);
        } else {
          var typeClass = this.modelFor(modelName);
          var typeMap = this.typeMapFor(typeClass);
          var records = typeMap.records.slice();
          var record;

          for (var i = 0; i < records.length; i++) {
            record = records[i];
            record.unloadRecord();
            record.destroy(); // maybe within unloadRecord
          }

          typeMap.metadata = Ember.create(null);
        }

        function byType(entry) {
          return typeMaps[entry]["type"].modelName;
        }
      },

      /**
        Takes a type and filter function, and returns a live RecordArray that
        remains up to date as new records are loaded into the store or created
        locally.
         The filter function takes a materialized record, and returns true
        if the record should be included in the filter and false if it should
        not.
         Example
         ```javascript
        store.filter('post', function(post) {
          return post.get('unread');
        });
        ```
         The filter function is called once on all records for the type when
        it is created, and then once on each newly loaded or created record.
         If any of a record's properties change, or if it changes state, the
        filter function will be invoked again to determine whether it should
        still be in the array.
         Optionally you can pass a query, which is the equivalent of calling
        [find](#method_find) with that same query, to fetch additional records
        from the server. The results returned by the server could then appear
        in the filter if they match the filter function.
         The query itself is not used to filter records, it's only sent to your
        server for you to be able to do server-side filtering. The filter
        function will be applied on the returned results regardless.
         Example
         ```javascript
        store.filter('post', { unread: true }, function(post) {
          return post.get('unread');
        }).then(function(unreadPosts) {
          unreadPosts.get('length'); // 5
          var unreadPost = unreadPosts.objectAt(0);
          unreadPost.set('unread', false);
          unreadPosts.get('length'); // 4
        });
        ```
         @method filter
        @param {String} modelName
        @param {Object} query optional query
        @param {Function} filter
        @return {DS.PromiseArray}
      */
      filter: function (modelName, query, filter) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");

        if (!Ember.ENV.ENABLE_DS_FILTER) {
          Ember.deprecate("The filter API will be moved into a plugin soon. To enable store.filter using an environment flag, or to use an alternative, you can visit the ember-data-filter addon page", false, {
            url: "https://github.com/ember-data/ember-data-filter"
          });
        }

        var promise;
        var length = arguments.length;
        var array;
        var hasQuery = length === 3;

        // allow an optional server query
        if (hasQuery) {
          promise = this.query(modelName, query);
        } else if (arguments.length === 2) {
          filter = query;
        }

        modelName = this.modelFor(modelName);

        if (hasQuery) {
          array = this.recordArrayManager.createFilteredRecordArray(modelName, filter, query);
        } else {
          array = this.recordArrayManager.createFilteredRecordArray(modelName, filter);
        }

        promise = promise || ember$data$lib$system$store$$Promise.cast(array);

        return ember$data$lib$system$promise$proxies$$promiseArray(promise.then(function () {
          return array;
        }, null, "DS: Store#filter of " + modelName));
      },

      /**
        This method returns if a certain record is already loaded
        in the store. Use this function to know beforehand if a find()
        will result in a request or that it will be a cache hit.
          Example
         ```javascript
        store.recordIsLoaded('post', 1); // false
        store.find('post', 1).then(function() {
          store.recordIsLoaded('post', 1); // true
        });
        ```
         @method recordIsLoaded
        @param {String} modelName
        @param {string} id
        @return {boolean}
      */
      recordIsLoaded: function (modelName, id) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        return this.hasRecordForId(modelName, id);
      },

      /**
        This method returns the metadata for a specific type.
         @method metadataFor
        @param {String} modelName
        @return {object}
      */
      metadataFor: function (modelName) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var typeClass = this.modelFor(modelName);
        return this.typeMapFor(typeClass).metadata;
      },

      /**
        This method sets the metadata for a specific type.
         @method setMetadataFor
        @param {String} modelName
        @param {Object} metadata metadata to set
        @return {object}
      */
      setMetadataFor: function (modelName, metadata) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var typeClass = this.modelFor(modelName);
        Ember.merge(this.typeMapFor(typeClass).metadata, metadata);
      },

      // ............
      // . UPDATING .
      // ............

      /**
        If the adapter updates attributes the record will notify
        the store to update its  membership in any filters.
        To avoid thrashing, this method is invoked only once per
        run loop per record.
         @method dataWasUpdated
        @private
        @param {Class} type
        @param {InternalModel} internalModel
      */
      dataWasUpdated: function (type, internalModel) {
        this.recordArrayManager.recordDidChange(internalModel);
      },

      // ..............
      // . PERSISTING .
      // ..............

      /**
        This method is called by `record.save`, and gets passed a
        resolver for the promise that `record.save` returns.
         It schedules saving to happen at the end of the run loop.
         @method scheduleSave
        @private
        @param {InternalModel} internalModel
        @param {Resolver} resolver
        @param {Object} options
      */
      scheduleSave: function (internalModel, resolver, options) {
        var snapshot = internalModel.createSnapshot(options);
        internalModel.flushChangedAttributes();
        internalModel.adapterWillCommit();
        this._pendingSave.push({
          snapshot: snapshot,
          resolver: resolver
        });
        ember$data$lib$system$store$$once(this, "flushPendingSave");
      },

      /**
        This method is called at the end of the run loop, and
        flushes any records passed into `scheduleSave`
         @method flushPendingSave
        @private
      */
      flushPendingSave: function () {
        var pending = this._pendingSave.slice();
        this._pendingSave = [];

        ember$data$lib$system$store$$forEach.call(pending, function (pendingItem) {
          var snapshot = pendingItem.snapshot;
          var resolver = pendingItem.resolver;
          var record = snapshot._internalModel;
          var adapter = this.adapterFor(record.type.modelName);
          var operation;

          if (ember$data$lib$system$store$$get(record, "currentState.stateName") === "root.deleted.saved") {
            return resolver.resolve();
          } else if (record.isNew()) {
            operation = "createRecord";
          } else if (record.isDeleted()) {
            operation = "deleteRecord";
          } else {
            operation = "updateRecord";
          }

          resolver.resolve(ember$data$lib$system$store$$_commit(adapter, this, operation, snapshot));
        }, this);
      },

      /**
        This method is called once the promise returned by an
        adapter's `createRecord`, `updateRecord` or `deleteRecord`
        is resolved.
         If the data provides a server-generated ID, it will
        update the record and the store's indexes.
         @method didSaveRecord
        @private
        @param {InternalModel} internalModel the in-flight internal model
        @param {Object} data optional data (see above)
      */
      didSaveRecord: function (internalModel, dataArg) {
        var data;
        if (dataArg) {
          data = dataArg.data;
        }
        if (data) {
          // normalize relationship IDs into records
          this._backburner.schedule("normalizeRelationships", this, "_setupRelationships", internalModel, internalModel.type, data);
          this.updateId(internalModel, data);
        }

        //We first make sure the primary data has been updated
        //TODO try to move notification to the user to the end of the runloop
        internalModel.adapterDidCommit(data);
      },

      /**
        This method is called once the promise returned by an
        adapter's `createRecord`, `updateRecord` or `deleteRecord`
        is rejected with a `DS.InvalidError`.
         @method recordWasInvalid
        @private
        @param {InternalModel} internalModel
        @param {Object} errors
      */
      recordWasInvalid: function (internalModel, errors) {
        internalModel.adapterDidInvalidate(errors);
      },

      /**
        This method is called once the promise returned by an
        adapter's `createRecord`, `updateRecord` or `deleteRecord`
        is rejected (with anything other than a `DS.InvalidError`).
         @method recordWasError
        @private
        @param {InternalModel} internalModel
        @param {Error} error
      */
      recordWasError: function (internalModel, error) {
        internalModel.adapterDidError(error);
      },

      /**
        When an adapter's `createRecord`, `updateRecord` or `deleteRecord`
        resolves with data, this method extracts the ID from the supplied
        data.
         @method updateId
        @private
        @param {InternalModel} internalModel
        @param {Object} data
      */
      updateId: function (internalModel, data) {
        var oldId = internalModel.id;
        var id = ember$data$lib$system$coerce$id$$default(data.id);

        Ember.assert("An adapter cannot assign a new id to a record that already has an id. " + internalModel + " had id: " + oldId + " and you tried to update it with " + id + ". This likely happened because your server returned data in response to a find or update that had a different id than the one you sent.", oldId === null || id === oldId);

        this.typeMapFor(internalModel.type).idToRecord[id] = internalModel;

        internalModel.setId(id);
      },

      /**
        Returns a map of IDs to client IDs for a given type.
         @method typeMapFor
        @private
        @param {DS.Model} typeClass
        @return {Object} typeMap
      */
      typeMapFor: function (typeClass) {
        var typeMaps = ember$data$lib$system$store$$get(this, "typeMaps");
        var guid = Ember.guidFor(typeClass);
        var typeMap = typeMaps[guid];

        if (typeMap) {
          return typeMap;
        }

        typeMap = {
          idToRecord: Ember.create(null),
          records: [],
          metadata: Ember.create(null),
          type: typeClass
        };

        typeMaps[guid] = typeMap;

        return typeMap;
      },

      // ................
      // . LOADING DATA .
      // ................

      /**
        This internal method is used by `push`.
         @method _load
        @private
        @param {(String|DS.Model)} type
        @param {Object} data
      */
      _load: function (data) {
        var id = ember$data$lib$system$coerce$id$$default(data.id);
        var internalModel = this._internalModelForId(data.type, id);

        internalModel.setupData(data);

        this.recordArrayManager.recordDidChange(internalModel);

        return internalModel;
      },

      /*
        In case someone defined a relationship to a mixin, for example:
        ```
          var Comment = DS.Model.extend({
            owner: belongsTo('commentable'. { polymorphic: true})
          });
          var Commentable = Ember.Mixin.create({
            comments: hasMany('comment')
          });
        ```
        we want to look up a Commentable class which has all the necessary
        relationship metadata. Thus, we look up the mixin and create a mock
        DS.Model, so we can access the relationship CPs of the mixin (`comments`)
        in this case
      */

      _modelForMixin: function (modelName) {
        var normalizedModelName = ember$data$lib$system$normalize$model$name$$default(modelName);
        var registry = this.container._registry ? this.container._registry : this.container;
        var mixin = registry.resolve("mixin:" + normalizedModelName);
        if (mixin) {
          //Cache the class as a model
          registry.register("model:" + normalizedModelName, DS.Model.extend(mixin));
        }
        var factory = this.modelFactoryFor(normalizedModelName);
        if (factory) {
          factory.__isMixin = true;
          factory.__mixin = mixin;
        }

        return factory;
      },

      /**
        Returns a model class for a particular key. Used by
        methods that take a type key (like `find`, `createRecord`,
        etc.)
         @method modelFor
        @param {String} modelName
        @return {DS.Model}
      */
      modelFor: function (modelName) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");

        var factory = this.modelFactoryFor(modelName);
        if (!factory) {
          //Support looking up mixins as base types for polymorphic relationships
          factory = this._modelForMixin(modelName);
        }
        if (!factory) {
          throw new Ember.Error("No model was found for '" + modelName + "'");
        }
        factory.modelName = factory.modelName || ember$data$lib$system$normalize$model$name$$default(modelName);

        // deprecate typeKey
        if (!("typeKey" in factory)) {
          Ember.defineProperty(factory, "typeKey", {
            enumerable: true,
            configurable: false,
            get: function () {
              Ember.deprecate("Usage of `typeKey` has been deprecated and will be removed in Ember Data 1.0. It has been replaced by `modelName` on the model class.");
              var typeKey = this.modelName;
              if (typeKey) {
                typeKey = Ember.String.camelize(this.modelName);
              }
              return typeKey;
            },
            set: function () {
              Ember.assert("Setting typeKey is not supported. In addition, typeKey has also been deprecated in favor of modelName. Setting modelName is also not supported.");
            }
          });
        }

        return factory;
      },

      modelFactoryFor: function (modelName) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var normalizedKey = ember$data$lib$system$normalize$model$name$$default(modelName);
        return this.container.lookupFactory("model:" + normalizedKey);
      },

      /**
        Push some data for a given type into the store.
         This method expects normalized data:
         * The ID is a key named `id` (an ID is mandatory)
        * The names of attributes are the ones you used in
          your model's `DS.attr`s.
        * Your relationships must be:
          * represented as IDs or Arrays of IDs
          * represented as model instances
          * represented as URLs, under the `links` key
         For this model:
         ```app/models/person.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          firstName: DS.attr(),
          lastName: DS.attr(),
           children: DS.hasMany('person')
        });
        ```
         To represent the children as IDs:
         ```js
        {
          id: 1,
          firstName: "Tom",
          lastName: "Dale",
          children: [1, 2, 3]
        }
        ```
         To represent the children relationship as a URL:
         ```js
        {
          id: 1,
          firstName: "Tom",
          lastName: "Dale",
          links: {
            children: "/people/1/children"
          }
        }
        ```
         If you're streaming data or implementing an adapter, make sure
        that you have converted the incoming data into this form. The
        store's [normalize](#method_normalize) method is a convenience
        helper for converting a json payload into the form Ember Data
        expects.
         ```js
        store.push('person', store.normalize('person', data));
        ```
         This method can be used both to push in brand new
        records, as well as to update existing records.
         @method push
        @param {String} modelName
        @param {Object} data
        @return {DS.Model|Array} the record(s) that was created or
          updated.
      */
      push: function (modelNameArg, dataArg) {
        var _this = this;

        var data, modelName;

        if (Ember.typeOf(modelNameArg) === "object" && Ember.typeOf(dataArg) === "undefined") {
          data = modelNameArg;
        } else {
          Ember.assert("Expected an object as `data` in a call to `push` for " + modelNameArg + " , but was " + Ember.typeOf(dataArg), Ember.typeOf(dataArg) === "object");
          Ember.assert("You must include an `id` for " + modelNameArg + " in an object passed to `push`", dataArg.id != null && dataArg.id !== "");
          data = ember$data$lib$system$store$serializer$response$$_normalizeSerializerPayload(this.modelFor(modelNameArg), dataArg);
          modelName = modelNameArg;
          Ember.deprecate("store.push(type, data) has been deprecated. Please provide a JSON-API document object as the first and only argument to store.push.");
          Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string" || typeof data === "undefined");
        }

        if (data.included) {
          ember$data$lib$system$store$$forEach.call(data.included, function (recordData) {
            return _this._pushInternalModel(recordData);
          });
        }

        if (Ember.typeOf(data.data) === "array") {
          var internalModels = ember$data$lib$system$store$$map.call(data.data, function (recordData) {
            return _this._pushInternalModel(recordData);
          });
          return ember$data$lib$system$store$$map.call(internalModels, function (internalModel) {
            return internalModel.getRecord();
          });
        }

        var internalModel = this._pushInternalModel(data.data || data);

        return internalModel.getRecord();
      },

      _pushInternalModel: function (data) {
        var modelName = data.type;
        Ember.assert("Expected an object as `data` in a call to `push` for " + modelName + " , but was " + Ember.typeOf(data), Ember.typeOf(data) === "object");
        Ember.assert("You must include an `id` for " + modelName + " in an object passed to `push`", data.id != null && data.id !== "");

        var type = this.modelFor(modelName);
        var filter = Ember.ArrayPolyfills.filter;

        // If Ember.ENV.DS_WARN_ON_UNKNOWN_KEYS is set to true and the payload
        // contains unknown keys, log a warning.

        if (Ember.ENV.DS_WARN_ON_UNKNOWN_KEYS) {
          Ember.warn("The payload for '" + type.modelName + "' contains these unknown keys: " + Ember.inspect(filter.call(Ember.keys(data), function (key) {
            return !(key === "id" || key === "links" || ember$data$lib$system$store$$get(type, "fields").has(key) || key.match(/Type$/));
          })) + ". Make sure they've been defined in your model.", filter.call(Ember.keys(data), function (key) {
            return !(key === "id" || key === "links" || ember$data$lib$system$store$$get(type, "fields").has(key) || key.match(/Type$/));
          }).length === 0);
        }

        // Actually load the record into the store.
        var internalModel = this._load(data);

        var store = this;

        this._backburner.join(function () {
          store._backburner.schedule("normalizeRelationships", store, "_setupRelationships", internalModel, type, data);
        });

        return internalModel;
      },

      _setupRelationships: function (record, type, data) {
        // If the payload contains relationships that are specified as
        // IDs, normalizeRelationships will convert them into DS.Model instances
        // (possibly unloaded) before we push the payload into the
        // store.

        data = ember$data$lib$system$store$$normalizeRelationships(this, type, data);

        // Now that the pushed record as well as any related records
        // are in the store, create the data structures used to track
        // relationships.
        ember$data$lib$system$store$$setupRelationships(this, record, data);
      },

      /**
        Push some raw data into the store.
         This method can be used both to push in brand new
        records, as well as to update existing records. You
        can push in more than one type of object at once.
        All objects should be in the format expected by the
        serializer.
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.ActiveModelSerializer;
        ```
         ```js
        var pushData = {
          posts: [
            { id: 1, post_title: "Great post", comment_ids: [2] }
          ],
          comments: [
            { id: 2, comment_body: "Insightful comment" }
          ]
        }
         store.pushPayload(pushData);
        ```
         By default, the data will be deserialized using a default
        serializer (the application serializer if it exists).
         Alternatively, `pushPayload` will accept a model type which
        will determine which serializer will process the payload.
        However, the serializer itself (processing this data via
        `normalizePayload`) will not know which model it is
        deserializing.
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.ActiveModelSerializer;
        ```
         ```app/serializers/post.js
        import DS from 'ember-data';
         export default DS.JSONSerializer;
        ```
         ```js
        store.pushPayload('comment', pushData); // Will use the application serializer
        store.pushPayload('post', pushData); // Will use the post serializer
        ```
         @method pushPayload
        @param {String} modelName Optionally, a model type used to determine which serializer will be used
        @param {Object} inputPayload
      */
      pushPayload: function (modelName, inputPayload) {
        var serializer;
        var payload;
        if (!inputPayload) {
          payload = modelName;
          serializer = ember$data$lib$system$store$$defaultSerializer(this.container);
          Ember.assert("You cannot use `store#pushPayload` without a modelName unless your default serializer defines `pushPayload`", typeof serializer.pushPayload === "function");
        } else {
          payload = inputPayload;
          Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
          serializer = this.serializerFor(modelName);
        }
        var store = this;
        this._adapterRun(function () {
          serializer.pushPayload(store, payload);
        });
      },

      /**
        `normalize` converts a json payload into the normalized form that
        [push](#method_push) expects.
         Example
         ```js
        socket.on('message', function(message) {
          var modelName = message.model;
          var data = message.data;
          store.push(modelName, store.normalize(modelName, data));
        });
        ```
         @method normalize
        @param {String} modelName The name of the model type for this payload
        @param {Object} payload
        @return {Object} The normalized payload
      */
      normalize: function (modelName, payload) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        var serializer = this.serializerFor(modelName);
        var model = this.modelFor(modelName);
        return serializer.normalize(model, payload);
      },

      /**
        @method update
        @param {String} modelName
        @param {Object} data
        @return {DS.Model} the record that was updated.
        @deprecated Use [push](#method_push) instead
      */
      update: function (modelName, data) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        Ember.deprecate("Using store.update() has been deprecated since store.push() now handles partial updates. You should use store.push() instead.");
        return this.push(modelName, data);
      },

      /**
        If you have an Array of normalized data to push,
        you can call `pushMany` with the Array, and it will
        call `push` repeatedly for you.
         @method pushMany
        @param {String} modelName
        @param {Array} datas
        @return {Array}
      */
      pushMany: function (modelName, datas) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        Ember.deprecate("Using store.pushMany() has been deprecated since store.push() now handles multiple items. You should use store.push() instead.");
        var length = datas.length;
        var result = new Array(length);

        for (var i = 0; i < length; i++) {
          result[i] = this.push(modelName, datas[i]);
        }

        return result;
      },

      /**
        @method metaForType
        @param {String} modelName
        @param {Object} metadata
        @deprecated Use [setMetadataFor](#method_setMetadataFor) instead
      */
      metaForType: function (modelName, metadata) {
        Ember.assert("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelName === "string");
        Ember.deprecate("Using store.metaForType() has been deprecated. Use store.setMetadataFor() to set metadata for a specific type.");
        this.setMetadataFor(modelName, metadata);
      },

      /**
        Build a brand new record for a given type, ID, and
        initial data.
         @method buildRecord
        @private
        @param {DS.Model} type
        @param {String} id
        @param {Object} data
        @return {InternalModel} internal model
      */
      buildInternalModel: function (type, id, data) {
        var typeMap = this.typeMapFor(type);
        var idToRecord = typeMap.idToRecord;

        Ember.assert("The id " + id + " has already been used with another record of type " + type.toString() + ".", !id || !idToRecord[id]);
        Ember.assert("`" + Ember.inspect(type) + "` does not appear to be an ember-data model", typeof type._create === "function");

        // lookupFactory should really return an object that creates
        // instances with the injections applied
        var internalModel = new ember$data$lib$system$model$internal$model$$default(type, id, this, this.container, data);

        // if we're creating an item, this process will be done
        // later, once the object has been persisted.
        if (id) {
          idToRecord[id] = internalModel;
        }

        typeMap.records.push(internalModel);

        return internalModel;
      },

      //Called by the state machine to notify the store that the record is ready to be interacted with
      recordWasLoaded: function (record) {
        this.recordArrayManager.recordWasLoaded(record);
      },

      // ...............
      // . DESTRUCTION .
      // ...............

      /**
        @method dematerializeRecord
        @private
        @param {DS.Model} record
        @deprecated Use [unloadRecord](#method_unloadRecord) instead
      */
      dematerializeRecord: function (record) {
        Ember.deprecate("Using store.dematerializeRecord() has been deprecated since it was intended for private use only. You should use store.unloadRecord() instead.");
        this._dematerializeRecord(record);
      },

      /**
        When a record is destroyed, this un-indexes it and
        removes it from any record arrays so it can be GCed.
         @method _dematerializeRecord
        @private
        @param {InternalModel} internalModel
      */
      _dematerializeRecord: function (internalModel) {
        var type = internalModel.type;
        var typeMap = this.typeMapFor(type);
        var id = internalModel.id;

        internalModel.updateRecordArrays();

        if (id) {
          delete typeMap.idToRecord[id];
        }

        var loc = ember$data$lib$system$store$$indexOf.call(typeMap.records, internalModel);
        typeMap.records.splice(loc, 1);
      },

      // ......................
      // . PER-TYPE ADAPTERS
      // ......................

      /**
        Returns an instance of the adapter for a given type. For
        example, `adapterFor('person')` will return an instance of
        `App.PersonAdapter`.
         If no `App.PersonAdapter` is found, this method will look
        for an `App.ApplicationAdapter` (the default adapter for
        your entire application).
         If no `App.ApplicationAdapter` is found, it will return
        the value of the `defaultAdapter`.
         @method adapterFor
        @private
        @param {String} modelName
        @return DS.Adapter
      */
      adapterFor: function (modelOrClass) {
        var modelName;

        Ember.deprecate("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelName), typeof modelOrClass === "string");

        if (typeof modelOrClass !== "string") {
          modelName = modelOrClass.modelName;
        } else {
          modelName = modelOrClass;
        }

        return this.lookupAdapter(modelName);
      },

      _adapterRun: function (fn) {
        return this._backburner.run(fn);
      },

      // ..............................
      // . RECORD CHANGE NOTIFICATION .
      // ..............................

      /**
        Returns an instance of the serializer for a given type. For
        example, `serializerFor('person')` will return an instance of
        `App.PersonSerializer`.
         If no `App.PersonSerializer` is found, this method will look
        for an `App.ApplicationSerializer` (the default serializer for
        your entire application).
         if no `App.ApplicationSerializer` is found, it will attempt
        to get the `defaultSerializer` from the `PersonAdapter`
        (`adapterFor('person')`).
         If a serializer cannot be found on the adapter, it will fall back
        to an instance of `DS.JSONSerializer`.
         @method serializerFor
        @private
        @param {String} modelName the record to serialize
        @return {DS.Serializer}
      */
      serializerFor: function (modelOrClass) {
        var modelName;

        Ember.deprecate("Passing classes to store methods has been removed. Please pass a dasherized string instead of " + Ember.inspect(modelOrClass), typeof modelOrClass === "string");
        if (typeof modelOrClass !== "string") {
          modelName = modelOrClass.modelName;
        } else {
          modelName = modelOrClass;
        }

        var fallbacks = ["application", this.adapterFor(modelName).get("defaultSerializer"), "-default"];

        var serializer = this.lookupSerializer(modelName, fallbacks);
        return serializer;
      },

      /**
        Retrieve a particular instance from the
        container cache. If not found, creates it and
        placing it in the cache.
         Enabled a store to manage local instances of
        adapters and serializers.
         @method retrieveManagedInstance
        @private
        @param {String} modelName the object modelName
        @param {String} name the object name
        @param {Array} fallbacks the fallback objects to lookup if the lookup for modelName or 'application' fails
        @return {Ember.Object}
      */
      retrieveManagedInstance: function (type, modelName, fallbacks) {
        var normalizedModelName = ember$data$lib$system$normalize$model$name$$default(modelName);

        var instance = this._instanceCache.get(type, normalizedModelName, fallbacks);
        ember$data$lib$system$store$$set(instance, "store", this);
        return instance;
      },

      lookupAdapter: function (name) {
        return this.retrieveManagedInstance("adapter", name, this.get("_adapterFallbacks"));
      },

      _adapterFallbacks: Ember.computed("adapter", function () {
        var adapter = this.get("adapter");
        return ["application", adapter, "-rest"];
      }),

      lookupSerializer: function (name, fallbacks) {
        return this.retrieveManagedInstance("serializer", name, fallbacks);
      },

      willDestroy: function () {
        this.recordArrayManager.destroy();

        this.unloadAll();

        for (var cacheKey in this._containerCache) {
          this._containerCache[cacheKey].destroy();
          delete this._containerCache[cacheKey];
        }

        delete this._containerCache;
      }

    });

    function ember$data$lib$system$store$$normalizeRelationships(store, type, data, record) {
      data.relationships = data.relationships || {};
      type.eachRelationship(function (key, relationship) {
        var kind = relationship.kind;
        var value;
        if (data.relationships[key] && data.relationships[key].data) {
          value = data.relationships[key].data;
          if (kind === "belongsTo") {
            data.relationships[key].data = ember$data$lib$system$store$$deserializeRecordId(store, key, relationship, value);
          } else if (kind === "hasMany") {
            data.relationships[key].data = ember$data$lib$system$store$$deserializeRecordIds(store, key, relationship, value);
          }
        }
      });

      return data;
    }

    function ember$data$lib$system$store$$deserializeRecordId(store, key, relationship, id) {
      if (ember$data$lib$system$store$$isNone(id)) {
        return;
      }

      Ember.assert("A " + relationship.parentType + " record was pushed into the store with the value of " + key + " being " + Ember.inspect(id) + ", but " + key + " is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.", !Ember.isArray(id));

      //TODO:Better asserts
      return store._internalModelForId(id.type, id.id);
    }

    function ember$data$lib$system$store$$deserializeRecordIds(store, key, relationship, ids) {
      if (ember$data$lib$system$store$$isNone(ids)) {
        return;
      }

      Ember.assert("A " + relationship.parentType + " record was pushed into the store with the value of " + key + " being '" + Ember.inspect(ids) + "', but " + key + " is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.", Ember.isArray(ids));
      return ember$data$lib$system$store$$map.call(ids, function (id) {
        return ember$data$lib$system$store$$deserializeRecordId(store, key, relationship, id);
      });
    }

    // Delegation to the adapter and promise management

    function ember$data$lib$system$store$$defaultSerializer(container) {
      return container.lookup("serializer:application") || container.lookup("serializer:-default");
    }

    function ember$data$lib$system$store$$_commit(adapter, store, operation, snapshot) {
      var internalModel = snapshot._internalModel;
      var modelName = snapshot.modelName;
      var typeClass = store.modelFor(modelName);
      var promise = adapter[operation](store, typeClass, snapshot);
      var serializer = ember$data$lib$system$store$serializers$$serializerForAdapter(store, adapter, modelName);
      var label = "DS: Extract and notify about " + operation + " completion of " + internalModel;

      Ember.assert("Your adapter's '" + operation + "' method must return a value, but it returned `undefined", promise !== undefined);

      promise = ember$data$lib$system$store$$Promise.cast(promise, label);
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, store));
      promise = ember$data$lib$system$store$common$$_guard(promise, ember$data$lib$system$store$common$$_bind(ember$data$lib$system$store$common$$_objectIsAlive, internalModel));

      return promise.then(function (adapterPayload) {
        store._adapterRun(function () {
          var payload, data;
          if (adapterPayload) {
            payload = ember$data$lib$system$store$serializer$response$$normalizeResponseHelper(serializer, store, typeClass, adapterPayload, snapshot.id, operation);
            data = ember$data$lib$system$store$serializer$response$$convertResourceObject(payload.data);
          }
          store.didSaveRecord(internalModel, ember$data$lib$system$store$serializer$response$$_normalizeSerializerPayload(internalModel.type, data));
        });

        return internalModel;
      }, function (error) {
        if (error instanceof ember$data$lib$adapters$errors$$InvalidError) {
          var errors = serializer.extractErrors(store, typeClass, error, snapshot.id);
          store.recordWasInvalid(internalModel, errors);
        } else {
          store.recordWasError(internalModel, error);
        }

        throw error;
      }, label);
    }

    function ember$data$lib$system$store$$setupRelationships(store, record, data) {
      var typeClass = record.type;
      if (!data.relationships) {
        return;
      }

      typeClass.eachRelationship(function (key, descriptor) {
        var kind = descriptor.kind;
        if (!data.relationships[key]) {
          return;
        }

        var relationship;

        if (data.relationships[key].links && data.relationships[key].links.related) {
          relationship = record._relationships.get(key);
          relationship.updateLink(data.relationships[key].links.related);
        }

        if (data.relationships[key].meta) {
          relationship = record._relationships.get(key);
          relationship.updateMeta(data.relationships[key].meta);
        }
        var value = data.relationships[key].data;

        if (value !== undefined) {
          if (kind === "belongsTo") {
            relationship = record._relationships.get(key);
            relationship.setCanonicalRecord(value);
          } else if (kind === "hasMany") {
            relationship = record._relationships.get(key);
            relationship.updateRecordsFromAdapter(value);
          }
        }
      });
    }

    function ember$data$lib$system$store$$deprecatePreload(preloadOrOptions, type, methodName) {
      if (preloadOrOptions) {
        var modelProperties = [];
        var fields = Ember.get(type, "fields");
        fields.forEach(function (fieldType, key) {
          modelProperties.push(key);
        });

        var preloadDetected = false;
        for (var i = 0, _length = modelProperties.length; i < _length; i++) {
          var key = modelProperties[i];
          if (typeof preloadOrOptions[key] !== "undefined") {
            preloadDetected = true;
            break;
          }
        }

        if (preloadDetected) {
          Ember.deprecate("Passing a preload argument to `store." + methodName + "` is deprecated. Please move it to the preload key on the " + methodName + " `options` argument.");
          var preload = preloadOrOptions;
          return {
            preload: preload
          };
        }
      }
      return preloadOrOptions;
    }

    var ember$data$lib$system$store$$default = ember$data$lib$system$store$$Store;

    var ember$data$lib$serializers$json$api$serializer$$dasherize = Ember.String.dasherize;
    var ember$data$lib$serializers$json$api$serializer$$map = Ember.EnumerableUtils.map;

    var ember$data$lib$serializers$json$api$serializer$$default = ember$data$lib$serializers$json$serializer$$default.extend({

      /*
        This is only to be used temporarily during the transition from the old
        serializer API to the new one.
         `JSONAPISerializer` only supports the new Serializer API.
         @property isNewSerializerAPI
      */
      isNewSerializerAPI: true,

      /*
        @method _normalizeRelationshipDataHelper
        @param {Object} relationshipDataHash
        @return {Object}
        @private
      */
      _normalizeRelationshipDataHelper: function (relationshipDataHash) {
        var type = this.modelNameFromPayloadKey(relationshipDataHash.type);
        relationshipDataHash.type = type;
        return relationshipDataHash;
      },

      /*
        @method _normalizeResourceHelper
        @param {Object} resourceHash
        @return {Object}
        @private
      */
      _normalizeResourceHelper: function (resourceHash) {
        var modelName = this.modelNameFromPayloadKey(resourceHash.type);
        var modelClass = this.store.modelFor(modelName);
        var serializer = this.store.serializerFor(modelName);

        var _serializer$normalize = serializer.normalize(modelClass, resourceHash);

        var data = _serializer$normalize.data;

        return data;
      },

      /**
        @method _normalizeResponse
        @param {DS.Store} store
        @param {DS.Model} primaryModelClass
        @param {Object} payload
        @param {String|Number} id
        @param {String} requestType
        @param {Boolean} isSingle
        @return {Object} JSON-API Document
        @private
      */
      _normalizeResponse: function (store, primaryModelClass, payload, id, requestType, isSingle) {

        if (Ember.typeOf(payload.data) === 'object') {
          payload.data = this._normalizeResourceHelper(payload.data);
        } else {
          payload.data = ember$data$lib$serializers$json$api$serializer$$map(payload.data, this._normalizeResourceHelper, this);
        }

        if (Ember.typeOf(payload.included) === 'array') {
          payload.included = ember$data$lib$serializers$json$api$serializer$$map(payload.included, this._normalizeResourceHelper, this);
        }

        return payload;
      },

      /*
        @method extractAttributes
        @param {DS.Model} modelClass
        @param {Object} resourceHash
        @return {Object}
      */
      extractAttributes: function (modelClass, resourceHash) {
        var _this = this;

        var attributes = {};

        if (resourceHash.attributes) {
          modelClass.eachAttribute(function (key) {
            var attributeKey = _this.keyForAttribute(key, 'deserialize');
            if (resourceHash.attributes.hasOwnProperty(attributeKey)) {
              attributes[key] = resourceHash.attributes[attributeKey];
            }
          });
        }

        return attributes;
      },

      /*
        @method extractRelationship
        @param {Object} relationshipHash
        @return {Object}
      */
      extractRelationship: function (relationshipHash) {

        if (Ember.typeOf(relationshipHash.data) === 'object') {
          relationshipHash.data = this._normalizeRelationshipDataHelper(relationshipHash.data);
        }

        if (Ember.typeOf(relationshipHash.data) === 'array') {
          relationshipHash.data = ember$data$lib$serializers$json$api$serializer$$map(relationshipHash.data, this._normalizeRelationshipDataHelper, this);
        }

        return relationshipHash;
      },

      /*
        @method extractRelationships
        @param {Object} modelClass
        @param {Object} resourceHash
        @return {Object}
      */
      extractRelationships: function (modelClass, resourceHash) {
        var _this2 = this;

        var relationships = {};

        if (resourceHash.relationships) {
          modelClass.eachRelationship(function (key, relationshipMeta) {
            var relationshipKey = _this2.keyForRelationship(key, relationshipMeta.kind, 'deserialize');
            if (resourceHash.relationships.hasOwnProperty(relationshipKey)) {

              var relationshipHash = resourceHash.relationships[relationshipKey];
              relationships[key] = _this2.extractRelationship(relationshipHash);
            }
          });
        }

        return relationships;
      },

      /*
        @method extractType
        @param {DS.Model} modelClass
        @param {Object} resourceHash
        @return {String}
        @private
      */
      _extractType: function (modelClass, resourceHash) {
        return this.modelNameFromPayloadKey(resourceHash.type);
      },

      /**
        @method modelNameFromPayloadKey
        @param {String} key
        @return {String} the model's modelName
      */
      modelNameFromPayloadKey: function (key) {
        return ember$inflector$lib$lib$system$string$$singularize(ember$data$lib$system$normalize$model$name$$default(key));
      },

      /**
        @method payloadKeyFromModelName
        @param {String} modelName
        @return {String}
      */
      payloadKeyFromModelName: function (modelName) {
        return ember$inflector$lib$lib$system$string$$pluralize(modelName);
      },

      /*
        @method normalize
        @param {DS.Model} modelClass
        @param {Object} resourceHash
        @return {String}
      */
      normalize: function (modelClass, resourceHash) {
        this.normalizeUsingDeclaredMapping(modelClass, resourceHash);

        var data = {
          id: this.extractId(resourceHash),
          type: this._extractType(modelClass, resourceHash),
          attributes: this.extractAttributes(modelClass, resourceHash),
          relationships: this.extractRelationships(modelClass, resourceHash)
        };

        this.applyTransforms(modelClass, data.attributes);

        return { data: data };
      },

      /**
       @method keyForAttribute
       @param {String} key
       @param {String} method
       @return {String} normalized key
      */
      keyForAttribute: function (key, method) {
        return ember$data$lib$serializers$json$api$serializer$$dasherize(key);
      },

      /**
       @method keyForRelationship
       @param {String} key
       @param {String} typeClass
       @param {String} method
       @return {String} normalized key
      */
      keyForRelationship: function (key, typeClass, method) {
        return ember$data$lib$serializers$json$api$serializer$$dasherize(key);
      },

      /**
        @method serialize
        @param {DS.Snapshot} snapshot
        @param {Object} options
        @return {Object} json
      */
      serialize: function (snapshot, options) {
        var data = this._super.apply(this, arguments);
        data.type = this.payloadKeyFromModelName(snapshot.modelName);
        return { data: data };
      },

      /**
       @method serializeAttribute
       @param {DS.Snapshot} snapshot
       @param {Object} json
       @param {String} key
       @param {Object} attribute
      */
      serializeAttribute: function (snapshot, json, key, attribute) {
        var type = attribute.type;

        if (this._canSerialize(key)) {
          json.attributes = json.attributes || {};

          var value = snapshot.attr(key);
          if (type) {
            var transform = this.transformFor(type);
            value = transform.serialize(value);
          }

          var payloadKey = this._getMappedKey(key);
          if (payloadKey === key) {
            payloadKey = this.keyForAttribute(key, 'serialize');
          }

          json.attributes[payloadKey] = value;
        }
      },

      /**
       @method serializeBelongsTo
       @param {DS.Snapshot} snapshot
       @param {Object} json
       @param {Object} relationship
      */
      serializeBelongsTo: function (snapshot, json, relationship) {
        var key = relationship.key;

        if (this._canSerialize(key)) {
          var belongsTo = snapshot.belongsTo(key);
          if (belongsTo !== undefined) {

            json.relationships = json.relationships || {};

            var payloadKey = this._getMappedKey(key);
            if (payloadKey === key) {
              payloadKey = this.keyForRelationship(key, 'belongsTo', 'serialize');
            }

            var data = null;
            if (belongsTo) {
              data = {
                type: this.payloadKeyFromModelName(belongsTo.modelName),
                id: belongsTo.id
              };
            }

            json.relationships[payloadKey] = { data: data };
          }
        }
      },

      /**
       @method serializeHasMany
       @param {DS.Snapshot} snapshot
       @param {Object} json
       @param {Object} relationship
      */
      serializeHasMany: function (snapshot, json, relationship) {
        var key = relationship.key;

        if (this._shouldSerializeHasMany(snapshot, key, relationship)) {
          var hasMany = snapshot.hasMany(key);
          if (hasMany !== undefined) {

            json.relationships = json.relationships || {};

            var payloadKey = this._getMappedKey(key);
            if (payloadKey === key && this.keyForRelationship) {
              payloadKey = this.keyForRelationship(key, 'hasMany', 'serialize');
            }

            var data = ember$data$lib$serializers$json$api$serializer$$map(hasMany, function (item) {
              return {
                type: item.modelName,
                id: item.id
              };
            });

            json.relationships[payloadKey] = { data: data };
          }
        }
      }
    });

    var ember$data$lib$initializers$store$$default = ember$data$lib$initializers$store$$initializeStore;

    /**
      Configures a registry for use with an Ember-Data
      store. Accepts an optional namespace argument.

      @method initializeStore
      @param {Ember.Registry} registry
      @param {Object} [application] an application namespace
    */
    function ember$data$lib$initializers$store$$initializeStore(registry, application) {
      Ember.deprecate("Specifying a custom Store for Ember Data on your global namespace as `App.Store` " + "has been deprecated. Please use `App.ApplicationStore` instead.", !(application && application.Store));

      registry.optionsForType("serializer", { singleton: false });
      registry.optionsForType("adapter", { singleton: false });

      // allow older names to be looked up
      var proxy = new ember$data$lib$system$container$proxy$$default(registry);
      proxy.registerDeprecations([{ deprecated: "serializer:_default", valid: "serializer:-default" }, { deprecated: "serializer:_rest", valid: "serializer:-rest" }, { deprecated: "adapter:_rest", valid: "adapter:-rest" }]);

      // new go forward paths
      registry.register("serializer:-default", ember$data$lib$serializers$json$serializer$$default.extend({ isNewSerializerAPI: true }));
      registry.register("serializer:-rest", ember$data$lib$serializers$rest$serializer$$default.extend({ isNewSerializerAPI: true }));
      registry.register("adapter:-rest", ember$data$lib$adapters$rest$adapter$$default);

      registry.register("adapter:-json-api", ember$data$lib$adapters$json$api$adapter$$default);
      registry.register("serializer:-json-api", ember$data$lib$serializers$json$api$serializer$$default);

      var store;
      if (registry.has("store:main")) {
        Ember.deprecate("Registering a custom store as `store:main` or defining a store in app/store.js has been deprecated. Please move you store to `service:store` or define your custom store in `app/services/store.js`");
        store = registry.lookup("store:main");
      } else {
        var storeMainProxy = new ember$data$lib$system$container$proxy$$default(registry);
        storeMainProxy.registerDeprecations([{ deprecated: "store:main", valid: "service:store" }]);
      }

      if (registry.has("store:application")) {
        Ember.deprecate("Registering a custom store as `store:application` or defining a store in app/stores/application.js has been deprecated. Please move you store to `service:store` or define your custom store in `app/services/store.js`");
        store = registry.lookup("store:application");
      } else {
        var storeApplicationProxy = new ember$data$lib$system$container$proxy$$default(registry);
        storeApplicationProxy.registerDeprecations([{ deprecated: "store:application", valid: "service:store" }]);
      }

      if (store) {
        registry.register("service:store", store, { instantiate: false });
      } else {
        registry.register("service:store", application && application.Store || ember$data$lib$system$store$$default);
      }
    }

    var ember$data$lib$transforms$base$$default = Ember.Object.extend({
      /**
        When given a deserialized value from a record attribute this
        method must return the serialized value.
         Example
         ```javascript
        serialize: function(deserialized) {
          return Ember.isEmpty(deserialized) ? null : Number(deserialized);
        }
        ```
         @method serialize
        @param deserialized The deserialized value
        @return The serialized value
      */
      serialize: null,

      /**
        When given a serialize value from a JSON object this method must
        return the deserialized value for the record attribute.
         Example
         ```javascript
        deserialize: function(serialized) {
          return empty(serialized) ? null : Number(serialized);
        }
        ```
         @method deserialize
        @param serialized The serialized value
        @return The deserialized value
      */
      deserialize: null
    });

    var ember$data$lib$transforms$number$$empty = Ember.isEmpty;

    function ember$data$lib$transforms$number$$isNumber(value) {
      return value === value && value !== Infinity && value !== -Infinity;
    }

    var ember$data$lib$transforms$number$$default = ember$data$lib$transforms$base$$default.extend({
      deserialize: function (serialized) {
        var transformed;

        if (ember$data$lib$transforms$number$$empty(serialized)) {
          return null;
        } else {
          transformed = Number(serialized);

          return ember$data$lib$transforms$number$$isNumber(transformed) ? transformed : null;
        }
      },

      serialize: function (deserialized) {
        var transformed;

        if (ember$data$lib$transforms$number$$empty(deserialized)) {
          return null;
        } else {
          transformed = Number(deserialized);

          return ember$data$lib$transforms$number$$isNumber(transformed) ? transformed : null;
        }
      }
    });

    // Date.prototype.toISOString shim
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
    var ember$data$lib$transforms$date$$toISOString = Date.prototype.toISOString || function () {
      function pad(number) {
        if (number < 10) {
          return '0' + number;
        }
        return number;
      }

      return this.getUTCFullYear() + '-' + pad(this.getUTCMonth() + 1) + '-' + pad(this.getUTCDate()) + 'T' + pad(this.getUTCHours()) + ':' + pad(this.getUTCMinutes()) + ':' + pad(this.getUTCSeconds()) + '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
    };

    if (Ember.SHIM_ES5) {
      if (!Date.prototype.toISOString) {
        Date.prototype.toISOString = ember$data$lib$transforms$date$$toISOString;
      }
    }

    var ember$data$lib$transforms$date$$default = ember$data$lib$transforms$base$$default.extend({
      deserialize: function (serialized) {
        var type = typeof serialized;

        if (type === 'string') {
          return new Date(Ember.Date.parse(serialized));
        } else if (type === 'number') {
          return new Date(serialized);
        } else if (serialized === null || serialized === undefined) {
          // if the value is null return null
          // if the value is not present in the data return undefined
          return serialized;
        } else {
          return null;
        }
      },

      serialize: function (date) {
        if (date instanceof Date) {
          return ember$data$lib$transforms$date$$toISOString.call(date);
        } else {
          return null;
        }
      }
    });

    var ember$data$lib$transforms$string$$none = Ember.isNone;

    var ember$data$lib$transforms$string$$default = ember$data$lib$transforms$base$$default.extend({
      deserialize: function (serialized) {
        return ember$data$lib$transforms$string$$none(serialized) ? null : String(serialized);
      },
      serialize: function (deserialized) {
        return ember$data$lib$transforms$string$$none(deserialized) ? null : String(deserialized);
      }
    });

    var ember$data$lib$transforms$boolean$$default = ember$data$lib$transforms$base$$default.extend({
      deserialize: function (serialized) {
        var type = typeof serialized;

        if (type === "boolean") {
          return serialized;
        } else if (type === "string") {
          return serialized.match(/^true$|^t$|^1$/i) !== null;
        } else if (type === "number") {
          return serialized === 1;
        } else {
          return false;
        }
      },

      serialize: function (deserialized) {
        return Boolean(deserialized);
      }
    });

    var ember$data$lib$initializers$transforms$$default = ember$data$lib$initializers$transforms$$initializeTransforms;

    /**
      Configures a registry for use with Ember-Data
      transforms.

      @method initializeTransforms
      @param {Ember.Registry} registry
    */
    function ember$data$lib$initializers$transforms$$initializeTransforms(registry) {
      registry.register('transform:boolean', ember$data$lib$transforms$boolean$$default);
      registry.register('transform:date', ember$data$lib$transforms$date$$default);
      registry.register('transform:number', ember$data$lib$transforms$number$$default);
      registry.register('transform:string', ember$data$lib$transforms$string$$default);
    }
    var ember$data$lib$initializers$store$injections$$default = ember$data$lib$initializers$store$injections$$initializeStoreInjections;
    /**
      Configures a registry with injections on Ember applications
      for the Ember-Data store. Accepts an optional namespace argument.

      @method initializeStoreInjections
      @param {Ember.Registry} registry
    */
    function ember$data$lib$initializers$store$injections$$initializeStoreInjections(registry) {
      registry.injection('controller', 'store', 'service:store');
      registry.injection('route', 'store', 'service:store');
      registry.injection('data-adapter', 'store', 'service:store');
    }
    var ember$new$computed$lib$utils$can$use$new$syntax$$supportsSetterGetter;

    try {
      ember$lib$main$$default.computed({
        set: function () {},
        get: function () {}
      });
      ember$new$computed$lib$utils$can$use$new$syntax$$supportsSetterGetter = true;
    } catch (e) {
      ember$new$computed$lib$utils$can$use$new$syntax$$supportsSetterGetter = false;
    }

    var ember$new$computed$lib$utils$can$use$new$syntax$$default = ember$new$computed$lib$utils$can$use$new$syntax$$supportsSetterGetter;
    var ember$new$computed$lib$main$$default = ember$new$computed$lib$main$$newComputed;

    var ember$new$computed$lib$main$$computed = ember$lib$main$$default.computed;

    function ember$new$computed$lib$main$$newComputed() {
      var polyfillArguments = [];
      var config = arguments[arguments.length - 1];

      if (typeof config === 'function' || ember$new$computed$lib$utils$can$use$new$syntax$$default) {
        return ember$new$computed$lib$main$$computed.apply(undefined, arguments);
      }

      for (var i = 0, l = arguments.length - 1; i < l; i++) {
        polyfillArguments.push(arguments[i]);
      }

      var func;
      if (config.set) {
        func = function (key, value) {
          if (arguments.length > 1) {
            return config.set.call(this, key, value);
          } else {
            return config.get.call(this, key);
          }
        };
      } else {
        func = function (key) {
          return config.get.call(this, key);
        };
      }

      polyfillArguments.push(func);

      return ember$new$computed$lib$main$$computed.apply(undefined, polyfillArguments);
    }

    var ember$new$computed$lib$main$$computedKeys = ember$lib$main$$default.keys(ember$new$computed$lib$main$$computed);

    for (var ember$new$computed$lib$main$$i = 0, ember$new$computed$lib$main$$l = ember$new$computed$lib$main$$computedKeys.length; ember$new$computed$lib$main$$i < ember$new$computed$lib$main$$l; ember$new$computed$lib$main$$i++) {
      ember$new$computed$lib$main$$newComputed[ember$new$computed$lib$main$$computedKeys[ember$new$computed$lib$main$$i]] = ember$new$computed$lib$main$$computed[ember$new$computed$lib$main$$computedKeys[ember$new$computed$lib$main$$i]];
    }
    var ember$data$lib$system$model$attributes$$default = ember$data$lib$system$model$attributes$$attr;

    /**
      @module ember-data
    */

    var ember$data$lib$system$model$attributes$$get = Ember.get;

    /**
      @class Model
      @namespace DS
    */
    ember$data$lib$system$model$model$$default.reopenClass({
      /**
        A map whose keys are the attributes of the model (properties
        described by DS.attr) and whose values are the meta object for the
        property.
         Example
         ```app/models/person.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          firstName: attr('string'),
          lastName: attr('string'),
          birthday: attr('date')
        });
        ```
         ```javascript
        import Ember from 'ember';
        import Person from 'app/models/person';
         var attributes = Ember.get(Person, 'attributes')
         attributes.forEach(function(name, meta) {
          console.log(name, meta);
        });
         // prints:
        // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
        // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
        // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
        ```
         @property attributes
        @static
        @type {Ember.Map}
        @readOnly
      */
      attributes: Ember.computed(function () {
        var map = ember$data$lib$system$map$$Map.create();

        this.eachComputedProperty(function (name, meta) {
          if (meta.isAttribute) {
            Ember.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from " + this.toString(), name !== "id");

            meta.name = name;
            map.set(name, meta);
          }
        });

        return map;
      }).readOnly(),

      /**
        A map whose keys are the attributes of the model (properties
        described by DS.attr) and whose values are type of transformation
        applied to each attribute. This map does not include any
        attributes that do not have an transformation type.
         Example
         ```app/models/person.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          firstName: attr(),
          lastName: attr('string'),
          birthday: attr('date')
        });
        ```
         ```javascript
        import Ember from 'ember';
        import Person from 'app/models/person';
         var transformedAttributes = Ember.get(Person, 'transformedAttributes')
         transformedAttributes.forEach(function(field, type) {
          console.log(field, type);
        });
         // prints:
        // lastName string
        // birthday date
        ```
         @property transformedAttributes
        @static
        @type {Ember.Map}
        @readOnly
      */
      transformedAttributes: Ember.computed(function () {
        var map = ember$data$lib$system$map$$Map.create();

        this.eachAttribute(function (key, meta) {
          if (meta.type) {
            map.set(key, meta.type);
          }
        });

        return map;
      }).readOnly(),

      /**
        Iterates through the attributes of the model, calling the passed function on each
        attribute.
         The callback method you provide should have the following signature (all
        parameters are optional):
         ```javascript
        function(name, meta);
        ```
         - `name` the name of the current property in the iteration
        - `meta` the meta object for the attribute property in the iteration
         Note that in addition to a callback, you can also pass an optional target
        object that will be set as `this` on the context.
         Example
         ```javascript
        import DS from 'ember-data';
         var Person = DS.Model.extend({
          firstName: attr('string'),
          lastName: attr('string'),
          birthday: attr('date')
        });
         Person.eachAttribute(function(name, meta) {
          console.log(name, meta);
        });
         // prints:
        // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
        // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
        // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
       ```
         @method eachAttribute
        @param {Function} callback The callback to execute
        @param {Object} [binding] the value to which the callback's `this` should be bound
        @static
      */
      eachAttribute: function (callback, binding) {
        ember$data$lib$system$model$attributes$$get(this, "attributes").forEach(function (meta, name) {
          callback.call(binding, name, meta);
        }, binding);
      },

      /**
        Iterates through the transformedAttributes of the model, calling
        the passed function on each attribute. Note the callback will not be
        called for any attributes that do not have an transformation type.
         The callback method you provide should have the following signature (all
        parameters are optional):
         ```javascript
        function(name, type);
        ```
         - `name` the name of the current property in the iteration
        - `type` a string containing the name of the type of transformed
          applied to the attribute
         Note that in addition to a callback, you can also pass an optional target
        object that will be set as `this` on the context.
         Example
         ```javascript
        import DS from 'ember-data';
         var Person = DS.Model.extend({
          firstName: attr(),
          lastName: attr('string'),
          birthday: attr('date')
        });
         Person.eachTransformedAttribute(function(name, type) {
          console.log(name, type);
        });
         // prints:
        // lastName string
        // birthday date
       ```
         @method eachTransformedAttribute
        @param {Function} callback The callback to execute
        @param {Object} [binding] the value to which the callback's `this` should be bound
        @static
      */
      eachTransformedAttribute: function (callback, binding) {
        ember$data$lib$system$model$attributes$$get(this, "transformedAttributes").forEach(function (type, name) {
          callback.call(binding, name, type);
        });
      }
    });

    ember$data$lib$system$model$model$$default.reopen({
      eachAttribute: function (callback, binding) {
        this.constructor.eachAttribute(callback, binding);
      }
    });

    function ember$data$lib$system$model$attributes$$getDefaultValue(record, options, key) {
      if (typeof options.defaultValue === "function") {
        return options.defaultValue.apply(null, arguments);
      } else {
        return options.defaultValue;
      }
    }

    function ember$data$lib$system$model$attributes$$hasValue(record, key) {
      return key in record._attributes || key in record._inFlightAttributes || key in record._data;
    }

    function ember$data$lib$system$model$attributes$$getValue(record, key) {
      if (key in record._attributes) {
        return record._attributes[key];
      } else if (key in record._inFlightAttributes) {
        return record._inFlightAttributes[key];
      } else {
        return record._data[key];
      }
    }

    /**
      `DS.attr` defines an attribute on a [DS.Model](/api/data/classes/DS.Model.html).
      By default, attributes are passed through as-is, however you can specify an
      optional type to have the value automatically transformed.
      Ember Data ships with four basic transform types: `string`, `number`,
      `boolean` and `date`. You can define your own transforms by subclassing
      [DS.Transform](/api/data/classes/DS.Transform.html).

      Note that you cannot use `attr` to define an attribute of `id`.

      `DS.attr` takes an optional hash as a second parameter, currently
      supported options are:

      - `defaultValue`: Pass a string or a function to be called to set the attribute
                        to a default value if none is supplied.

      Example

      ```app/models/user.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        username: DS.attr('string'),
        email: DS.attr('string'),
        verified: DS.attr('boolean', { defaultValue: false })
      });
      ```

      Default value can also be a function. This is useful it you want to return
      a new object for each attribute.

      ```app/models/user.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        username: attr('string'),
        email: attr('string'),
        settings: attr({defaultValue: function() {
          return {};
        }})
      });
      ```

      @namespace
      @method attr
      @for DS
      @param {String} type the attribute type
      @param {Object} options a hash of options
      @return {Attribute}
    */
    function ember$data$lib$system$model$attributes$$attr(type, options) {
      if (typeof type === "object") {
        options = type;
        type = undefined;
      } else {
        options = options || {};
      }

      var meta = {
        type: type,
        isAttribute: true,
        options: options
      };

      return ember$new$computed$lib$main$$default({
        get: function (key) {
          var internalModel = this._internalModel;
          if (ember$data$lib$system$model$attributes$$hasValue(internalModel, key)) {
            return ember$data$lib$system$model$attributes$$getValue(internalModel, key);
          } else {
            return ember$data$lib$system$model$attributes$$getDefaultValue(this, options, key);
          }
        },
        set: function (key, value) {
          Ember.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from " + this.constructor.toString(), key !== "id");
          var internalModel = this._internalModel;
          var oldValue = ember$data$lib$system$model$attributes$$getValue(internalModel, key);

          if (value !== oldValue) {
            // Add the new value to the changed attributes hash; it will get deleted by
            // the 'didSetProperty' handler if it is no different from the original value
            internalModel._attributes[key] = value;

            this._internalModel.send("didSetProperty", {
              name: key,
              oldValue: oldValue,
              originalValue: internalModel._data[key],
              value: value
            });
          }

          return value;
        }
      }).meta(meta);
    }
    var ember$data$lib$system$model$$default = ember$data$lib$system$model$model$$default;
    var ember$data$lib$system$debug$debug$adapter$$get = Ember.get;
    var ember$data$lib$system$debug$debug$adapter$$capitalize = Ember.String.capitalize;
    var ember$data$lib$system$debug$debug$adapter$$underscore = Ember.String.underscore;
    var ember$data$lib$system$debug$debug$adapter$$_Ember = Ember;
    var ember$data$lib$system$debug$debug$adapter$$assert = ember$data$lib$system$debug$debug$adapter$$_Ember.assert;

    var ember$data$lib$system$debug$debug$adapter$$default = Ember.DataAdapter.extend({
      getFilters: function () {
        return [{ name: 'isNew', desc: 'New' }, { name: 'isModified', desc: 'Modified' }, { name: 'isClean', desc: 'Clean' }];
      },

      detect: function (typeClass) {
        return typeClass !== ember$data$lib$system$model$$default && ember$data$lib$system$model$$default.detect(typeClass);
      },

      columnsForType: function (typeClass) {
        var columns = [{
          name: 'id',
          desc: 'Id'
        }];
        var count = 0;
        var self = this;
        ember$data$lib$system$debug$debug$adapter$$get(typeClass, 'attributes').forEach(function (meta, name) {
          if (count++ > self.attributeLimit) {
            return false;
          }
          var desc = ember$data$lib$system$debug$debug$adapter$$capitalize(ember$data$lib$system$debug$debug$adapter$$underscore(name).replace('_', ' '));
          columns.push({ name: name, desc: desc });
        });
        return columns;
      },

      getRecords: function (modelClass, modelName) {
        if (arguments.length < 2) {
          // Legacy Ember.js < 1.13 support
          var containerKey = modelClass._debugContainerKey;
          if (containerKey) {
            var match = containerKey.match(/model:(.*)/);
            if (match) {
              modelName = match[1];
            }
          }
        }
        ember$data$lib$system$debug$debug$adapter$$assert('Cannot find model name. Please upgrade to Ember.js >= 1.13 for Ember Inspector support', !!modelName);
        return this.get('store').peekAll(modelName);
      },

      getRecordColumnValues: function (record) {
        var self = this;
        var count = 0;
        var columnValues = { id: ember$data$lib$system$debug$debug$adapter$$get(record, 'id') };

        record.eachAttribute(function (key) {
          if (count++ > self.attributeLimit) {
            return false;
          }
          var value = ember$data$lib$system$debug$debug$adapter$$get(record, key);
          columnValues[key] = value;
        });
        return columnValues;
      },

      getRecordKeywords: function (record) {
        var keywords = [];
        var keys = Ember.A(['id']);
        record.eachAttribute(function (key) {
          keys.push(key);
        });
        keys.forEach(function (key) {
          keywords.push(ember$data$lib$system$debug$debug$adapter$$get(record, key));
        });
        return keywords;
      },

      getRecordFilterValues: function (record) {
        return {
          isNew: record.get('isNew'),
          isModified: record.get('hasDirtyAttributes') && !record.get('isNew'),
          isClean: !record.get('hasDirtyAttributes')
        };
      },

      getRecordColor: function (record) {
        var color = 'black';
        if (record.get('isNew')) {
          color = 'green';
        } else if (record.get('hasDirtyAttributes')) {
          color = 'blue';
        }
        return color;
      },

      observeRecord: function (record, recordUpdated) {
        var releaseMethods = Ember.A();
        var self = this;
        var keysToObserve = Ember.A(['id', 'isNew', 'hasDirtyAttributes']);

        record.eachAttribute(function (key) {
          keysToObserve.push(key);
        });

        keysToObserve.forEach(function (key) {
          var handler = function () {
            recordUpdated(self.wrapRecord(record));
          };
          Ember.addObserver(record, key, handler);
          releaseMethods.push(function () {
            Ember.removeObserver(record, key, handler);
          });
        });

        var release = function () {
          releaseMethods.forEach(function (fn) {
            fn();
          });
        };

        return release;
      }

    });

    var ember$data$lib$initializers$data$adapter$$default = ember$data$lib$initializers$data$adapter$$initializeDebugAdapter;

    /**
      Configures a registry with injections on Ember applications
      for the Ember-Data store. Accepts an optional namespace argument.

      @method initializeStoreInjections
      @param {Ember.Registry} registry
    */
    function ember$data$lib$initializers$data$adapter$$initializeDebugAdapter(registry) {
      registry.register("data-adapter:main", ember$data$lib$system$debug$debug$adapter$$default);
    }
    var ember$data$lib$instance$initializers$initialize$store$service$$default = ember$data$lib$instance$initializers$initialize$store$service$$initializeStoreService;
    /**
     Configures a registry for use with an Ember-Data
     store.

     @method initializeStore
     @param {Ember.ApplicationInstance} applicationOrRegistry
     */
    function ember$data$lib$instance$initializers$initialize$store$service$$initializeStoreService(applicationOrRegistry) {
      var registry, container;
      if (applicationOrRegistry.registry && applicationOrRegistry.container) {
        // initializeStoreService was registered with an
        // instanceInitializer. The first argument is the application
        // instance.
        registry = applicationOrRegistry.registry;
        container = applicationOrRegistry.container;
      } else {
        // initializeStoreService was called by an initializer instead of
        // an instanceInitializer. The first argument is a registy. This
        // case allows ED to support Ember pre 1.12
        registry = applicationOrRegistry;
        if (registry.container) {
          // Support Ember 1.10 - 1.11
          container = registry.container();
        } else {
          // Support Ember 1.9
          container = registry;
        }
      }

      // Eagerly generate the store so defaultStore is populated.
      container.lookup('service:store');
    }
    var ember$data$lib$setup$container$$default = ember$data$lib$setup$container$$setupContainer;
    function ember$data$lib$setup$container$$setupContainer(registry, application) {
      // application is not a required argument. This ensures
      // testing setups can setup a container without booting an
      // entire ember application.

      ember$data$lib$setup$container$$initializeInjects(registry, application);
      ember$data$lib$instance$initializers$initialize$store$service$$default(registry);
    }

    function ember$data$lib$setup$container$$initializeInjects(registry, application) {
      ember$data$lib$initializers$data$adapter$$default(registry, application);
      ember$data$lib$initializers$transforms$$default(registry, application);
      ember$data$lib$initializers$store$injections$$default(registry, application);
      activemodel$adapter$lib$setup$container$$default(registry, application);
      ember$data$lib$initializers$store$$default(registry, application);
    }

    var ember$data$lib$ember$initializer$$K = Ember.K;

    /**
      @module ember-data
    */

    /*

      This code initializes Ember-Data onto an Ember application.

      If an Ember.js developer defines a subclass of DS.Store on their application,
      as `App.StoreService` (or via a module system that resolves to `service:store`)
      this code will automatically instantiate it and make it available on the
      router.

      Additionally, after an application's controllers have been injected, they will
      each have the store made available to them.

      For example, imagine an Ember.js application with the following classes:

      App.StoreService = DS.Store.extend({
        adapter: 'custom'
      });

      App.PostsController = Ember.ArrayController.extend({
        // ...
      });

      When the application is initialized, `App.ApplicationStore` will automatically be
      instantiated, and the instance of `App.PostsController` will have its `store`
      property set to that instance.

      Note that this code will only be run if the `ember-application` package is
      loaded. If Ember Data is being used in an environment other than a
      typical application (e.g., node.js where only `ember-runtime` is available),
      this code will be ignored.
    */

    Ember.onLoad('Ember.Application', function (Application) {

      Application.initializer({
        name: 'ember-data',
        initialize: ember$data$lib$setup$container$$initializeInjects
      });

      if (Application.instanceInitializer) {
        Application.instanceInitializer({
          name: 'ember-data',
          initialize: ember$data$lib$instance$initializers$initialize$store$service$$default
        });
      } else {
        Application.initializer({
          name: 'ember-data-store-service',
          after: 'ember-data',
          initialize: ember$data$lib$instance$initializers$initialize$store$service$$default
        });
      }

      // Deprecated initializers to satisfy old code that depended on them
      Application.initializer({
        name: 'store',
        after: 'ember-data',
        initialize: ember$data$lib$ember$initializer$$K
      });

      Application.initializer({
        name: 'activeModelAdapter',
        before: 'store',
        initialize: ember$data$lib$ember$initializer$$K
      });

      Application.initializer({
        name: 'transforms',
        before: 'store',
        initialize: ember$data$lib$ember$initializer$$K
      });

      Application.initializer({
        name: 'data-adapter',
        before: 'store',
        initialize: ember$data$lib$ember$initializer$$K
      });

      Application.initializer({
        name: 'injectStore',
        before: 'store',
        initialize: ember$data$lib$ember$initializer$$K
      });
    });
    Ember.Date = Ember.Date || {};

    var origParse = Date.parse;
    var numericKeys = [1, 4, 5, 6, 7, 10, 11];

    /**
      @method parse
      @param {Date} date
      @return {Number} timestamp
    */
    Ember.Date.parse = function (date) {
      var timestamp, struct;
      var minutesOffset = 0;

      // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
      // before falling back to any implementation-specific date parsing, so that’s what we do, even if native
      // implementations could be faster
      //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
      if (struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date)) {
        // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
        for (var i = 0, k; k = numericKeys[i]; ++i) {
          struct[k] = +struct[k] || 0;
        }

        // allow undefined days and months
        struct[2] = (+struct[2] || 1) - 1;
        struct[3] = +struct[3] || 1;

        if (struct[8] !== 'Z' && struct[9] !== undefined) {
          minutesOffset = struct[10] * 60 + struct[11];

          if (struct[9] === '+') {
            minutesOffset = 0 - minutesOffset;
          }
        }

        timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
      } else {
        timestamp = origParse ? origParse(date) : NaN;
      }

      return timestamp;
    };

    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Date) {
      Date.parse = Ember.Date.parse;
    }

    ember$data$lib$system$model$$default.reopen({

      /**
        Provides info about the model for debugging purposes
        by grouping the properties into more semantic groups.
         Meant to be used by debugging tools such as the Chrome Ember Extension.
         - Groups all attributes in "Attributes" group.
        - Groups all belongsTo relationships in "Belongs To" group.
        - Groups all hasMany relationships in "Has Many" group.
        - Groups all flags in "Flags" group.
        - Flags relationship CPs as expensive properties.
         @method _debugInfo
        @for DS.Model
        @private
      */
      _debugInfo: function () {
        var attributes = ['id'];
        var relationships = { belongsTo: [], hasMany: [] };
        var expensiveProperties = [];

        this.eachAttribute(function (name, meta) {
          attributes.push(name);
        }, this);

        this.eachRelationship(function (name, relationship) {
          relationships[relationship.kind].push(name);
          expensiveProperties.push(name);
        });

        var groups = [{
          name: 'Attributes',
          properties: attributes,
          expand: true
        }, {
          name: 'Belongs To',
          properties: relationships.belongsTo,
          expand: true
        }, {
          name: 'Has Many',
          properties: relationships.hasMany,
          expand: true
        }, {
          name: 'Flags',
          properties: ['isLoaded', 'hasDirtyAttributes', 'isSaving', 'isDeleted', 'isError', 'isNew', 'isValid']
        }];

        return {
          propertyInfo: {
            // include all other mixins / properties (not just the grouped ones)
            includeOtherProperties: true,
            groups: groups,
            // don't pre-calculate unless cached
            expensiveProperties: expensiveProperties
          }
        };
      }
    });

    var ember$data$lib$system$debug$debug$info$$default = ember$data$lib$system$model$$default;
    var ember$data$lib$system$debug$$default = ember$data$lib$system$debug$debug$adapter$$default;
    var ember$data$lib$serializers$embedded$records$mixin$$get = Ember.get;
    var ember$data$lib$serializers$embedded$records$mixin$$set = Ember.set;
    var ember$data$lib$serializers$embedded$records$mixin$$forEach = Ember.ArrayPolyfills.forEach;
    var ember$data$lib$serializers$embedded$records$mixin$$camelize = Ember.String.camelize;

    /**
      ## Using Embedded Records

      `DS.EmbeddedRecordsMixin` supports serializing embedded records.

      To set up embedded records, include the mixin when extending a serializer
      then define and configure embedded (model) relationships.

      Below is an example of a per-type serializer ('post' type).

      ```app/serializers/post.js
      import DS from 'ember-data';

      export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
        attrs: {
          author: { embedded: 'always' },
          comments: { serialize: 'ids' }
        }
      });
      ```
      Note that this use of `{ embedded: 'always' }` is unrelated to
      the `{ embedded: 'always' }` that is defined as an option on `DS.attr` as part of
      defining a model while working with the ActiveModelSerializer.  Nevertheless,
      using `{ embedded: 'always' }` as an option to DS.attr is not a valid way to setup
      embedded records.

      The `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:

      ```js
      {
        serialize: 'records',
        deserialize: 'records'
      }
      ```

      ### Configuring Attrs

      A resource's `attrs` option may be set to use `ids`, `records` or false for the
      `serialize`  and `deserialize` settings.

      The `attrs` property can be set on the ApplicationSerializer or a per-type
      serializer.

      In the case where embedded JSON is expected while extracting a payload (reading)
      the setting is `deserialize: 'records'`, there is no need to use `ids` when
      extracting as that is the default behavior without this mixin if you are using
      the vanilla EmbeddedRecordsMixin. Likewise, to embed JSON in the payload while
      serializing `serialize: 'records'` is the setting to use. There is an option of
      not embedding JSON in the serialized payload by using `serialize: 'ids'`. If you
      do not want the relationship sent at all, you can use `serialize: false`.


      ### EmbeddedRecordsMixin defaults
      If you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`
      will behave in the following way:

      BelongsTo: `{ serialize: 'id', deserialize: 'id' }`
      HasMany:   `{ serialize: false, deserialize: 'ids' }`

      ### Model Relationships

      Embedded records must have a model defined to be extracted and serialized. Note that
      when defining any relationships on your model such as `belongsTo` and `hasMany`, you
      should not both specify `async:true` and also indicate through the serializer's
      `attrs` attribute that the related model should be embedded for deserialization.
      If a model is declared embedded for deserialization (`embedded: 'always'`,
      `deserialize: 'record'` or `deserialize: 'records'`), then do not use `async:true`.

      To successfully extract and serialize embedded records the model relationships
      must be setup correcty See the
      [defining relationships](/guides/models/defining-models/#toc_defining-relationships)
      section of the **Defining Models** guide page.

      Records without an `id` property are not considered embedded records, model
      instances must have an `id` property to be used with Ember Data.

      ### Example JSON payloads, Models and Serializers

      **When customizing a serializer it is important to grok what the customizations
      are. Please read the docs for the methods this mixin provides, in case you need
      to modify it to fit your specific needs.**

      For example review the docs for each method of this mixin:
      * [normalize](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_normalize)
      * [serializeBelongsTo](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeBelongsTo)
      * [serializeHasMany](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeHasMany)

      @class EmbeddedRecordsMixin
      @namespace DS
    */
    var ember$data$lib$serializers$embedded$records$mixin$$EmbeddedRecordsMixin = Ember.Mixin.create({

      /**
        Normalize the record and recursively normalize/extract all the embedded records
        while pushing them into the store as they are encountered
         A payload with an attr configured for embedded records needs to be extracted:
         ```js
        {
          "post": {
            "id": "1"
            "title": "Rails is omakase",
            "comments": [{
              "id": "1",
              "body": "Rails is unagi"
            }, {
              "id": "2",
              "body": "Omakase O_o"
            }]
          }
        }
        ```
       @method normalize
       @param {DS.Model} typeClass
       @param {Object} hash to be normalized
       @param {String} prop the hash has been referenced by
       @return {Object} the normalized hash
      **/
      normalize: function (typeClass, hash, prop) {
        var normalizedHash = this._super(typeClass, hash, prop);
        return this._extractEmbeddedRecords(this, this.store, typeClass, normalizedHash);
      },

      keyForRelationship: function (key, typeClass, method) {
        if (method === 'serialize' && this.hasSerializeRecordsOption(key) || method === 'deserialize' && this.hasDeserializeRecordsOption(key)) {
          return this.keyForAttribute(key, method);
        } else {
          return this._super(key, typeClass, method) || key;
        }
      },

      /**
        Serialize `belongsTo` relationship when it is configured as an embedded object.
         This example of an author model belongs to a post model:
         ```js
        Post = DS.Model.extend({
          title:    DS.attr('string'),
          body:     DS.attr('string'),
          author:   DS.belongsTo('author')
        });
         Author = DS.Model.extend({
          name:     DS.attr('string'),
          post:     DS.belongsTo('post')
        });
        ```
         Use a custom (type) serializer for the post model to configure embedded author
         ```app/serializers/post.js
        import DS from 'ember-data;
         export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
          attrs: {
            author: { embedded: 'always' }
          }
        })
        ```
         A payload with an attribute configured for embedded records can serialize
        the records together under the root attribute's payload:
         ```js
        {
          "post": {
            "id": "1"
            "title": "Rails is omakase",
            "author": {
              "id": "2"
              "name": "dhh"
            }
          }
        }
        ```
         @method serializeBelongsTo
        @param {DS.Snapshot} snapshot
        @param {Object} json
        @param {Object} relationship
      */
      serializeBelongsTo: function (snapshot, json, relationship) {
        var attr = relationship.key;
        if (this.noSerializeOptionSpecified(attr)) {
          this._super(snapshot, json, relationship);
          return;
        }
        var includeIds = this.hasSerializeIdsOption(attr);
        var includeRecords = this.hasSerializeRecordsOption(attr);
        var embeddedSnapshot = snapshot.belongsTo(attr);
        var key;
        if (includeIds) {
          key = this.keyForRelationship(attr, relationship.kind, 'serialize');
          if (!embeddedSnapshot) {
            json[key] = null;
          } else {
            json[key] = embeddedSnapshot.id;
          }
        } else if (includeRecords) {
          key = this.keyForAttribute(attr, 'serialize');
          if (!embeddedSnapshot) {
            json[key] = null;
          } else {
            json[key] = embeddedSnapshot.record.serialize({ includeId: true });
            this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json[key]);
          }
        }
      },

      /**
        Serialize `hasMany` relationship when it is configured as embedded objects.
         This example of a post model has many comments:
         ```js
        Post = DS.Model.extend({
          title:    DS.attr('string'),
          body:     DS.attr('string'),
          comments: DS.hasMany('comment')
        });
         Comment = DS.Model.extend({
          body:     DS.attr('string'),
          post:     DS.belongsTo('post')
        });
        ```
         Use a custom (type) serializer for the post model to configure embedded comments
         ```app/serializers/post.js
        import DS from 'ember-data;
         export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
          attrs: {
            comments: {embedded: 'always'}
          }
        })
        ```
         A payload with an attribute configured for embedded records can serialize
        the records together under the root attribute's payload:
         ```js
        {
          "post": {
            "id": "1"
            "title": "Rails is omakase",
            "body": "I want this for my ORM, I want that for my template language..."
            "comments": [{
              "id": "1",
              "body": "Rails is unagi"
            }, {
              "id": "2",
              "body": "Omakase O_o"
            }]
          }
        }
        ```
         The attrs options object can use more specific instruction for extracting and
        serializing. When serializing, an option to embed `ids` or `records` can be set.
        When extracting the only option is `records`.
         So `{ embedded: 'always' }` is shorthand for:
        `{ serialize: 'records', deserialize: 'records' }`
         To embed the `ids` for a related object (using a hasMany relationship):
         ```app/serializers/post.js
        import DS from 'ember-data;
         export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
          attrs: {
            comments: { serialize: 'ids', deserialize: 'records' }
          }
        })
        ```
         ```js
        {
          "post": {
            "id": "1"
            "title": "Rails is omakase",
            "body": "I want this for my ORM, I want that for my template language..."
            "comments": ["1", "2"]
          }
        }
        ```
         @method serializeHasMany
        @param {DS.Snapshot} snapshot
        @param {Object} json
        @param {Object} relationship
      */
      serializeHasMany: function (snapshot, json, relationship) {
        var attr = relationship.key;
        if (this.noSerializeOptionSpecified(attr)) {
          this._super(snapshot, json, relationship);
          return;
        }
        var includeIds = this.hasSerializeIdsOption(attr);
        var includeRecords = this.hasSerializeRecordsOption(attr);
        var key, hasMany;
        if (includeIds) {
          key = this.keyForRelationship(attr, relationship.kind, 'serialize');
          json[key] = snapshot.hasMany(attr, { ids: true });
        } else if (includeRecords) {
          key = this.keyForAttribute(attr, 'serialize');
          hasMany = snapshot.hasMany(attr);

          Ember.warn('The embedded relationship \'' + key + '\' is undefined for \'' + snapshot.modelName + '\' with id \'' + snapshot.id + '\'. Please include it in your original payload.', Ember.typeOf(hasMany) !== 'undefined');

          json[key] = Ember.A(hasMany).map(function (embeddedSnapshot) {
            var embeddedJson = embeddedSnapshot.record.serialize({ includeId: true });
            this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, embeddedJson);
            return embeddedJson;
          }, this);
        }
      },

      /**
        When serializing an embedded record, modify the property (in the json payload)
        that refers to the parent record (foreign key for relationship).
         Serializing a `belongsTo` relationship removes the property that refers to the
        parent record
         Serializing a `hasMany` relationship does not remove the property that refers to
        the parent record.
         @method removeEmbeddedForeignKey
        @param {DS.Snapshot} snapshot
        @param {DS.Snapshot} embeddedSnapshot
        @param {Object} relationship
        @param {Object} json
      */
      removeEmbeddedForeignKey: function (snapshot, embeddedSnapshot, relationship, json) {
        if (relationship.kind === 'hasMany') {
          return;
        } else if (relationship.kind === 'belongsTo') {
          var parentRecord = snapshot.type.inverseFor(relationship.key, this.store);
          if (parentRecord) {
            var name = parentRecord.name;
            var embeddedSerializer = this.store.serializerFor(embeddedSnapshot.modelName);
            var parentKey = embeddedSerializer.keyForRelationship(name, parentRecord.kind, 'deserialize');
            if (parentKey) {
              delete json[parentKey];
            }
          }
        }
      },

      // checks config for attrs option to embedded (always) - serialize and deserialize
      hasEmbeddedAlwaysOption: function (attr) {
        var option = this.attrsOption(attr);
        return option && option.embedded === 'always';
      },

      // checks config for attrs option to serialize ids
      hasSerializeRecordsOption: function (attr) {
        var alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);
        var option = this.attrsOption(attr);
        return alwaysEmbed || option && option.serialize === 'records';
      },

      // checks config for attrs option to serialize records
      hasSerializeIdsOption: function (attr) {
        var option = this.attrsOption(attr);
        return option && (option.serialize === 'ids' || option.serialize === 'id');
      },

      // checks config for attrs option to serialize records
      noSerializeOptionSpecified: function (attr) {
        var option = this.attrsOption(attr);
        return !(option && (option.serialize || option.embedded));
      },

      // checks config for attrs option to deserialize records
      // a defined option object for a resource is treated the same as
      // `deserialize: 'records'`
      hasDeserializeRecordsOption: function (attr) {
        var alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);
        var option = this.attrsOption(attr);
        return alwaysEmbed || option && option.deserialize === 'records';
      },

      attrsOption: function (attr) {
        var attrs = this.get('attrs');
        return attrs && (attrs[ember$data$lib$serializers$embedded$records$mixin$$camelize(attr)] || attrs[attr]);
      },

      /**
       @method _extractEmbeddedRecords
       @private
      */
      _extractEmbeddedRecords: function (serializer, store, typeClass, partial) {
        if (this.get('isNewSerializerAPI')) {
          return ember$data$lib$serializers$embedded$records$mixin$$_newExtractEmbeddedRecords.apply(this, arguments);
        }

        typeClass.eachRelationship(function (key, relationship) {
          if (serializer.hasDeserializeRecordsOption(key)) {
            var embeddedTypeClass = store.modelFor(relationship.type);
            if (relationship.kind === 'hasMany') {
              if (relationship.options.polymorphic) {
                this._extractEmbeddedHasManyPolymorphic(store, key, partial);
              } else {
                this._extractEmbeddedHasMany(store, key, embeddedTypeClass, partial);
              }
            }
            if (relationship.kind === 'belongsTo') {
              if (relationship.options.polymorphic) {
                this._extractEmbeddedBelongsToPolymorphic(store, key, partial);
              } else {
                this._extractEmbeddedBelongsTo(store, key, embeddedTypeClass, partial);
              }
            }
          }
        }, this);

        return partial;
      },

      /**
       @method _extractEmbeddedHasMany
       @private
      */
      _extractEmbeddedHasMany: function (store, key, embeddedTypeClass, hash) {
        if (this.get('isNewSerializerAPI')) {
          return ember$data$lib$serializers$embedded$records$mixin$$_newExtractEmbeddedHasMany.apply(this, arguments);
        }

        if (!hash[key]) {
          return hash;
        }

        var ids = [];

        var embeddedSerializer = store.serializerFor(embeddedTypeClass.modelName);
        ember$data$lib$serializers$embedded$records$mixin$$forEach.call(hash[key], function (data) {
          var embeddedRecord = embeddedSerializer.normalize(embeddedTypeClass, data, null);
          store.push(embeddedTypeClass.modelName, embeddedRecord);
          ids.push(embeddedRecord.id);
        });

        hash[key] = ids;
        return hash;
      },

      /**
       @method _extractEmbeddedHasManyPolymorphic
       @private
      */
      _extractEmbeddedHasManyPolymorphic: function (store, key, hash) {
        if (!hash[key]) {
          return hash;
        }

        var ids = [];

        ember$data$lib$serializers$embedded$records$mixin$$forEach.call(hash[key], function (data) {
          var modelName = data.type;
          var embeddedSerializer = store.serializerFor(modelName);
          var embeddedTypeClass = store.modelFor(modelName);
          // var primaryKey = embeddedSerializer.get('primaryKey');

          var embeddedRecord = embeddedSerializer.normalize(embeddedTypeClass, data, null);
          store.push(embeddedTypeClass.modelName, embeddedRecord);
          ids.push({ id: embeddedRecord.id, type: modelName });
        });

        hash[key] = ids;
        return hash;
      },

      /**
       @method _extractEmbeddedBelongsTo
       @private
      */
      _extractEmbeddedBelongsTo: function (store, key, embeddedTypeClass, hash) {
        if (this.get('isNewSerializerAPI')) {
          return ember$data$lib$serializers$embedded$records$mixin$$_newExtractEmbeddedBelongsTo.apply(this, arguments);
        }

        if (!hash[key]) {
          return hash;
        }

        var embeddedSerializer = store.serializerFor(embeddedTypeClass.modelName);
        var embeddedRecord = embeddedSerializer.normalize(embeddedTypeClass, hash[key], null);
        store.push(embeddedTypeClass.modelName, embeddedRecord);

        hash[key] = embeddedRecord.id;
        return hash;
      },

      /**
       @method _extractEmbeddedBelongsToPolymorphic
       @private
      */
      _extractEmbeddedBelongsToPolymorphic: function (store, key, hash) {
        if (!hash[key]) {
          return hash;
        }

        var data = hash[key];
        var modelName = data.type;
        var embeddedSerializer = store.serializerFor(modelName);
        var embeddedTypeClass = store.modelFor(modelName);
        // var primaryKey = embeddedSerializer.get('primaryKey');

        var embeddedRecord = embeddedSerializer.normalize(embeddedTypeClass, data, null);
        store.push(embeddedTypeClass.modelName, embeddedRecord);

        hash[key] = embeddedRecord.id;
        hash[key + 'Type'] = modelName;
        return hash;
      },

      /**
       @method _normalizeEmbeddedRelationship
       @private
      */
      _normalizeEmbeddedRelationship: function (store, relationshipMeta, relationshipHash) {
        var modelName = relationshipMeta.type;
        if (relationshipMeta.options.polymorphic) {
          modelName = relationshipHash.type;
        }
        var modelClass = store.modelFor(modelName);
        var serializer = store.serializerFor(modelName);

        return serializer.normalize(modelClass, relationshipHash, null);
      }

    });

    var ember$data$lib$serializers$embedded$records$mixin$$default = ember$data$lib$serializers$embedded$records$mixin$$EmbeddedRecordsMixin;

    /*
     @method _newExtractEmbeddedRecords
     @private
    */
    function ember$data$lib$serializers$embedded$records$mixin$$_newExtractEmbeddedRecords(serializer, store, typeClass, partial) {
      var _this = this;

      typeClass.eachRelationship(function (key, relationship) {
        if (serializer.hasDeserializeRecordsOption(key)) {
          if (relationship.kind === 'hasMany') {
            _this._extractEmbeddedHasMany(store, key, partial, relationship);
          }
          if (relationship.kind === 'belongsTo') {
            _this._extractEmbeddedBelongsTo(store, key, partial, relationship);
          }
        }
      }, this);
      return partial;
    }

    /*
     @method _newExtractEmbeddedHasMany
     @private
    */
    function ember$data$lib$serializers$embedded$records$mixin$$_newExtractEmbeddedHasMany(store, key, hash, relationshipMeta) {
      var _this2 = this;

      var relationshipHash = ember$data$lib$serializers$embedded$records$mixin$$get(hash, 'data.relationships.' + key + '.data');
      if (!relationshipHash) {
        return;
      }

      var hasMany = relationshipHash.map(function (item) {
        var _normalizeEmbeddedRelationship = _this2._normalizeEmbeddedRelationship(store, relationshipMeta, item);

        var data = _normalizeEmbeddedRelationship.data;
        var included = _normalizeEmbeddedRelationship.included;

        hash.included = hash.included || [];
        hash.included.push(data);
        if (included) {
          var _hash$included;

          (_hash$included = hash.included).push.apply(_hash$included, included);
        }

        return { id: data.id, type: data.type };
      });

      var relationship = { data: hasMany };
      ember$data$lib$serializers$embedded$records$mixin$$set(hash, 'data.relationships.' + key, relationship);
    }

    /*
     @method _newExtractEmbeddedBelongsTo
     @private
    */
    function ember$data$lib$serializers$embedded$records$mixin$$_newExtractEmbeddedBelongsTo(store, key, hash, relationshipMeta) {
      var relationshipHash = ember$data$lib$serializers$embedded$records$mixin$$get(hash, 'data.relationships.' + key + '.data');
      if (!relationshipHash) {
        return;
      }

      var _normalizeEmbeddedRelationship2 = this._normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash);

      var data = _normalizeEmbeddedRelationship2.data;
      var included = _normalizeEmbeddedRelationship2.included;

      hash.included = hash.included || [];
      hash.included.push(data);
      if (included) {
        var _hash$included2;

        (_hash$included2 = hash.included).push.apply(_hash$included2, included);
      }

      var belongsTo = { id: data.id, type: data.type };
      var relationship = { data: belongsTo };

      ember$data$lib$serializers$embedded$records$mixin$$set(hash, 'data.relationships.' + key, relationship);
    }

    /**
      `DS.belongsTo` is used to define One-To-One and One-To-Many
      relationships on a [DS.Model](/api/data/classes/DS.Model.html).


      `DS.belongsTo` takes an optional hash as a second parameter, currently
      supported options are:

      - `async`: A boolean value used to explicitly declare this to be an async relationship.
      - `inverse`: A string used to identify the inverse property on a
        related model in a One-To-Many relationship. See [Explicit Inverses](#toc_explicit-inverses)

      #### One-To-One
      To declare a one-to-one relationship between two models, use
      `DS.belongsTo`:

      ```app/models/user.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        profile: DS.belongsTo('profile')
      });
      ```

      ```app/models/profile.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        user: DS.belongsTo('user')
      });
      ```

      #### One-To-Many
      To declare a one-to-many relationship between two models, use
      `DS.belongsTo` in combination with `DS.hasMany`, like this:

      ```app/models/post.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        comments: DS.hasMany('comment')
      });
      ```

      ```app/models/comment.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        post: DS.belongsTo('post')
      });
      ```

      You can avoid passing a string as the first parameter. In that case Ember Data
      will infer the type from the key name.

      ```app/models/comment.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        post: DS.belongsTo()
      });
      ```

      will lookup for a Post type.

      @namespace
      @method belongsTo
      @for DS
      @param {String} modelName (optional) type of the relationship
      @param {Object} options (optional) a hash of options
      @return {Ember.computed} relationship
    */
    function ember$data$lib$system$relationships$belongs$to$$belongsTo(modelName, options) {
      var opts, userEnteredModelName;
      if (typeof modelName === "object") {
        opts = modelName;
        userEnteredModelName = undefined;
      } else {
        opts = options;
        userEnteredModelName = modelName;
      }

      if (typeof userEnteredModelName === "string") {
        userEnteredModelName = ember$data$lib$system$normalize$model$name$$default(userEnteredModelName);
      }

      Ember.assert("The first argument to DS.belongsTo must be a string representing a model type key, not an instance of " + Ember.inspect(userEnteredModelName) + ". E.g., to define a relation to the Person model, use DS.belongsTo('person')", typeof userEnteredModelName === "string" || typeof userEnteredModelName === "undefined");

      opts = opts || {};

      var shouldWarnAsync = false;
      if (typeof opts.async === "undefined") {
        shouldWarnAsync = true;
      }

      var meta = {
        type: userEnteredModelName,
        isRelationship: true,
        options: opts,
        kind: "belongsTo",
        key: null,
        shouldWarnAsync: shouldWarnAsync
      };

      return ember$new$computed$lib$main$$default({
        get: function (key) {
          Ember.warn("You provided a serialize option on the \"" + key + "\" property in the \"" + this._internalModel.modelName + "\" class, this belongs in the serializer. See DS.Serializer and it's implementations http://emberjs.com/api/data/classes/DS.Serializer.html", !opts.hasOwnProperty("serialize"));
          Ember.warn("You provided an embedded option on the \"" + key + "\" property in the \"" + this._internalModel.modelName + "\" class, this belongs in the serializer. See DS.EmbeddedRecordsMixin http://emberjs.com/api/data/classes/DS.EmbeddedRecordsMixin.html", !opts.hasOwnProperty("embedded"));

          if (meta.shouldWarnAsync) {
            Ember.deprecate("In Ember Data 2.0, relationships will be asynchronous by default. You must set `" + key + ": DS.belongsTo('" + modelName + "', { async: false })` if you wish for a relationship remain synchronous.");
            meta.shouldWarnAsycn = false;
          }

          return this._internalModel._relationships.get(key).getRecord();
        },
        set: function (key, value) {
          if (value === undefined) {
            value = null;
          }
          if (value && value.then) {
            this._internalModel._relationships.get(key).setRecordPromise(value);
          } else if (value) {
            this._internalModel._relationships.get(key).setRecord(value._internalModel);
          } else {
            this._internalModel._relationships.get(key).setRecord(value);
          }

          return this._internalModel._relationships.get(key).getRecord();
        }
      }).meta(meta);
    }

    /*
      These observers observe all `belongsTo` relationships on the record. See
      `relationships/ext` to see how these observers get their dependencies.
    */
    ember$data$lib$system$model$$default.reopen({
      notifyBelongsToChanged: function (key) {
        this.notifyPropertyChange(key);
      }
    });

    var ember$data$lib$system$relationships$belongs$to$$default = ember$data$lib$system$relationships$belongs$to$$belongsTo;

    /**
      `DS.hasMany` is used to define One-To-Many and Many-To-Many
      relationships on a [DS.Model](/api/data/classes/DS.Model.html).

      `DS.hasMany` takes an optional hash as a second parameter, currently
      supported options are:

      - `async`: A boolean value used to explicitly declare this to be an async relationship.
      - `inverse`: A string used to identify the inverse property on a related model.

      #### One-To-Many
      To declare a one-to-many relationship between two models, use
      `DS.belongsTo` in combination with `DS.hasMany`, like this:

      ```app/models/post.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        comments: DS.hasMany('comment')
      });
      ```

      ```app/models/comment.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        post: DS.belongsTo('post')
      });
      ```

      #### Many-To-Many
      To declare a many-to-many relationship between two models, use
      `DS.hasMany`:

      ```app/models/post.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        tags: DS.hasMany('tag')
      });
      ```

      ```app/models/tag.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        posts: DS.hasMany('post')
      });
      ```

      You can avoid passing a string as the first parameter. In that case Ember Data
      will infer the type from the singularized key name.

      ```app/models/post.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        tags: DS.hasMany()
      });
      ```

      will lookup for a Tag type.

      #### Explicit Inverses

      Ember Data will do its best to discover which relationships map to
      one another. In the one-to-many code above, for example, Ember Data
      can figure out that changing the `comments` relationship should update
      the `post` relationship on the inverse because post is the only
      relationship to that model.

      However, sometimes you may have multiple `belongsTo`/`hasManys` for the
      same type. You can specify which property on the related model is
      the inverse using `DS.hasMany`'s `inverse` option:

      ```app/models/comment.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        onePost: DS.belongsTo('post'),
        twoPost: DS.belongsTo('post'),
        redPost: DS.belongsTo('post'),
        bluePost: DS.belongsTo('post')
      });
      ```

      ```app/models/post.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        comments: DS.hasMany('comment', {
          inverse: 'redPost'
        })
      });
      ```

      You can also specify an inverse on a `belongsTo`, which works how
      you'd expect.

      @namespace
      @method hasMany
      @for DS
      @param {String} type (optional) type of the relationship
      @param {Object} options (optional) a hash of options
      @return {Ember.computed} relationship
    */
    function ember$data$lib$system$relationships$has$many$$hasMany(type, options) {
      if (typeof type === "object") {
        options = type;
        type = undefined;
      }

      Ember.assert("The first argument to DS.hasMany must be a string representing a model type key, not an instance of " + Ember.inspect(type) + ". E.g., to define a relation to the Comment model, use DS.hasMany('comment')", typeof type === "string" || typeof type === "undefined");

      options = options || {};

      var shouldWarnAsync = false;
      if (typeof options.async === "undefined") {
        shouldWarnAsync = true;
      }

      if (typeof type === "string") {
        type = ember$data$lib$system$normalize$model$name$$default(type);
      }

      // Metadata about relationships is stored on the meta of
      // the relationship. This is used for introspection and
      // serialization. Note that `key` is populated lazily
      // the first time the CP is called.
      var meta = {
        type: type,
        isRelationship: true,
        options: options,
        kind: "hasMany",
        key: null,
        shouldWarnAsync: shouldWarnAsync
      };

      return ember$new$computed$lib$main$$default({
        get: function (key) {
          if (meta.shouldWarnAsync) {
            Ember.deprecate("In Ember Data 2.0, relationships will be asynchronous by default. You must set `" + key + ": DS.hasMany('" + type + "', { async: false })` if you wish for a relationship remain synchronous.");
            meta.shouldWarnAsync = false;
          }
          var relationship = this._internalModel._relationships.get(key);
          return relationship.getRecords();
        },
        set: function (key, records) {
          var relationship = this._internalModel._relationships.get(key);
          relationship.clear();
          Ember.assert("You must pass an array of records to set a hasMany relationship", Ember.isArray(records));
          relationship.addRecords(Ember.A(records).mapBy("_internalModel"));
          return relationship.getRecords();
        }
      }).meta(meta);
    }

    ember$data$lib$system$model$$default.reopen({
      notifyHasManyAdded: function (key) {
        //We need to notifyPropertyChange in the adding case because we need to make sure
        //we fetch the newly added record in case it is unloaded
        //TODO(Igor): Consider whether we could do this only if the record state is unloaded

        //Goes away once hasMany is double promisified
        this.notifyPropertyChange(key);
      }
    });

    var ember$data$lib$system$relationships$has$many$$default = ember$data$lib$system$relationships$has$many$$hasMany;
    function ember$data$lib$system$relationship$meta$$typeForRelationshipMeta(meta) {
      var modelName;

      modelName = meta.type || meta.key;
      if (meta.kind === 'hasMany') {
        modelName = ember$inflector$lib$lib$system$string$$singularize(ember$data$lib$system$normalize$model$name$$default(modelName));
      }
      return modelName;
    }

    function ember$data$lib$system$relationship$meta$$relationshipFromMeta(meta) {
      return {
        key: meta.key,
        kind: meta.kind,
        type: ember$data$lib$system$relationship$meta$$typeForRelationshipMeta(meta),
        options: meta.options,
        parentType: meta.parentType,
        isRelationship: true
      };
    }

    var ember$data$lib$system$relationships$ext$$get = Ember.get;
    var ember$data$lib$system$relationships$ext$$filter = Ember.ArrayPolyfills.filter;

    var ember$data$lib$system$relationships$ext$$relationshipsDescriptor = Ember.computed(function () {
      if (Ember.testing === true && ember$data$lib$system$relationships$ext$$relationshipsDescriptor._cacheable === true) {
        ember$data$lib$system$relationships$ext$$relationshipsDescriptor._cacheable = false;
      }

      var map = new ember$data$lib$system$map$$MapWithDefault({
        defaultValue: function () {
          return [];
        }
      });

      // Loop through each computed property on the class
      this.eachComputedProperty(function (name, meta) {
        // If the computed property is a relationship, add
        // it to the map.
        if (meta.isRelationship) {
          meta.key = name;
          var relationshipsForType = map.get(ember$data$lib$system$relationship$meta$$typeForRelationshipMeta(meta));

          relationshipsForType.push({
            name: name,
            kind: meta.kind
          });
        }
      });

      return map;
    }).readOnly();

    var ember$data$lib$system$relationships$ext$$relatedTypesDescriptor = Ember.computed(function () {
      if (Ember.testing === true && ember$data$lib$system$relationships$ext$$relatedTypesDescriptor._cacheable === true) {
        ember$data$lib$system$relationships$ext$$relatedTypesDescriptor._cacheable = false;
      }

      var modelName;
      var types = Ember.A();

      // Loop through each computed property on the class,
      // and create an array of the unique types involved
      // in relationships
      this.eachComputedProperty(function (name, meta) {
        if (meta.isRelationship) {
          meta.key = name;
          modelName = ember$data$lib$system$relationship$meta$$typeForRelationshipMeta(meta);

          Ember.assert("You specified a hasMany (" + meta.type + ") on " + meta.parentType + " but " + meta.type + " was not found.", modelName);

          if (!types.contains(modelName)) {
            Ember.assert("Trying to sideload " + name + " on " + this.toString() + " but the type doesn't exist.", !!modelName);
            types.push(modelName);
          }
        }
      });

      return types;
    }).readOnly();

    var ember$data$lib$system$relationships$ext$$relationshipsByNameDescriptor = Ember.computed(function () {
      if (Ember.testing === true && ember$data$lib$system$relationships$ext$$relationshipsByNameDescriptor._cacheable === true) {
        ember$data$lib$system$relationships$ext$$relationshipsByNameDescriptor._cacheable = false;
      }

      var map = ember$data$lib$system$map$$Map.create();

      this.eachComputedProperty(function (name, meta) {
        if (meta.isRelationship) {
          meta.key = name;
          var relationship = ember$data$lib$system$relationship$meta$$relationshipFromMeta(meta);
          relationship.type = ember$data$lib$system$relationship$meta$$typeForRelationshipMeta(meta);
          map.set(name, relationship);
        }
      });

      return map;
    }).readOnly();

    /**
      @module ember-data
    */

    /*
      This file defines several extensions to the base `DS.Model` class that
      add support for one-to-many relationships.
    */

    /**
      @class Model
      @namespace DS
    */
    ember$data$lib$system$model$$default.reopen({

      /**
        This Ember.js hook allows an object to be notified when a property
        is defined.
         In this case, we use it to be notified when an Ember Data user defines a
        belongs-to relationship. In that case, we need to set up observers for
        each one, allowing us to track relationship changes and automatically
        reflect changes in the inverse has-many array.
         This hook passes the class being set up, as well as the key and value
        being defined. So, for example, when the user does this:
         ```javascript
        DS.Model.extend({
          parent: DS.belongsTo('user')
        });
        ```
         This hook would be called with "parent" as the key and the computed
        property returned by `DS.belongsTo` as the value.
         @method didDefineProperty
        @param {Object} proto
        @param {String} key
        @param {Ember.ComputedProperty} value
      */
      didDefineProperty: function (proto, key, value) {
        // Check if the value being set is a computed property.
        if (value instanceof Ember.ComputedProperty) {

          // If it is, get the metadata for the relationship. This is
          // populated by the `DS.belongsTo` helper when it is creating
          // the computed property.
          var meta = value.meta();

          meta.parentType = proto.constructor;
        }
      }
    });

    /*
      These DS.Model extensions add class methods that provide relationship
      introspection abilities about relationships.

      A note about the computed properties contained here:

      **These properties are effectively sealed once called for the first time.**
      To avoid repeatedly doing expensive iteration over a model's fields, these
      values are computed once and then cached for the remainder of the runtime of
      your application.

      If your application needs to modify a class after its initial definition
      (for example, using `reopen()` to add additional attributes), make sure you
      do it before using your model with the store, which uses these properties
      extensively.
    */

    ember$data$lib$system$model$$default.reopenClass({

      /**
        For a given relationship name, returns the model type of the relationship.
         For example, if you define a model like this:
         ```app/models/post.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          comments: DS.hasMany('comment')
        });
       ```
         Calling `App.Post.typeForRelationship('comments')` will return `App.Comment`.
         @method typeForRelationship
        @static
        @param {String} name the name of the relationship
        @param {store} store an instance of DS.Store
        @return {DS.Model} the type of the relationship, or undefined
      */
      typeForRelationship: function (name, store) {
        var relationship = ember$data$lib$system$relationships$ext$$get(this, "relationshipsByName").get(name);
        return relationship && store.modelFor(relationship.type);
      },

      inverseMap: Ember.computed(function () {
        return Ember.create(null);
      }),

      /**
        Find the relationship which is the inverse of the one asked for.
         For example, if you define models like this:
         ```app/models/post.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          comments: DS.hasMany('message')
        });
        ```
         ```app/models/message.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          owner: DS.belongsTo('post')
        });
        ```
         App.Post.inverseFor('comments') -> { type: App.Message, name: 'owner', kind: 'belongsTo' }
        App.Message.inverseFor('owner') -> { type: App.Post, name: 'comments', kind: 'hasMany' }
         @method inverseFor
        @static
        @param {String} name the name of the relationship
        @return {Object} the inverse relationship, or null
      */
      inverseFor: function (name, store) {
        var inverseMap = ember$data$lib$system$relationships$ext$$get(this, "inverseMap");
        if (inverseMap[name]) {
          return inverseMap[name];
        } else {
          var inverse = this._findInverseFor(name, store);
          inverseMap[name] = inverse;
          return inverse;
        }
      },

      //Calculate the inverse, ignoring the cache
      _findInverseFor: function (name, store) {

        var inverseType = this.typeForRelationship(name, store);
        if (!inverseType) {
          return null;
        }

        var propertyMeta = this.metaForProperty(name);
        //If inverse is manually specified to be null, like  `comments: DS.hasMany('message', { inverse: null })`
        var options = propertyMeta.options;
        if (options.inverse === null) {
          return null;
        }

        var inverseName, inverseKind, inverse;

        Ember.warn("Detected a reflexive relationship by the name of '" + name + "' without an inverse option. Look at http://emberjs.com/guides/models/defining-models/#toc_reflexive-relation for how to explicitly specify inverses.", options.inverse || propertyMeta.type !== propertyMeta.parentType.modelName);

        //If inverse is specified manually, return the inverse
        if (options.inverse) {
          inverseName = options.inverse;
          inverse = Ember.get(inverseType, "relationshipsByName").get(inverseName);

          Ember.assert("We found no inverse relationships by the name of '" + inverseName + "' on the '" + inverseType.modelName + "' model. This is most likely due to a missing attribute on your model definition.", !Ember.isNone(inverse));

          inverseKind = inverse.kind;
        } else {
          //No inverse was specified manually, we need to use a heuristic to guess one
          var possibleRelationships = findPossibleInverses(this, inverseType);

          if (possibleRelationships.length === 0) {
            return null;
          }

          var filteredRelationships = ember$data$lib$system$relationships$ext$$filter.call(possibleRelationships, function (possibleRelationship) {
            var optionsForRelationship = inverseType.metaForProperty(possibleRelationship.name).options;
            return name === optionsForRelationship.inverse;
          });

          Ember.assert("You defined the '" + name + "' relationship on " + this + ", but you defined the inverse relationships of type " + inverseType.toString() + " multiple times. Look at http://emberjs.com/guides/models/defining-models/#toc_explicit-inverses for how to explicitly specify inverses", filteredRelationships.length < 2);

          if (filteredRelationships.length === 1) {
            possibleRelationships = filteredRelationships;
          }

          Ember.assert("You defined the '" + name + "' relationship on " + this + ", but multiple possible inverse relationships of type " + this + " were found on " + inverseType + ". Look at http://emberjs.com/guides/models/defining-models/#toc_explicit-inverses for how to explicitly specify inverses", possibleRelationships.length === 1);

          inverseName = possibleRelationships[0].name;
          inverseKind = possibleRelationships[0].kind;
        }

        function findPossibleInverses(type, inverseType, relationshipsSoFar) {
          var possibleRelationships = relationshipsSoFar || [];

          var relationshipMap = ember$data$lib$system$relationships$ext$$get(inverseType, "relationships");
          if (!relationshipMap) {
            return possibleRelationships;
          }

          var relationships = relationshipMap.get(type.modelName);

          relationships = ember$data$lib$system$relationships$ext$$filter.call(relationships, function (relationship) {
            var optionsForRelationship = inverseType.metaForProperty(relationship.name).options;

            if (!optionsForRelationship.inverse) {
              return true;
            }

            return name === optionsForRelationship.inverse;
          });

          if (relationships) {
            possibleRelationships.push.apply(possibleRelationships, relationships);
          }

          //Recurse to support polymorphism
          if (type.superclass) {
            findPossibleInverses(type.superclass, inverseType, possibleRelationships);
          }

          return possibleRelationships;
        }

        return {
          type: inverseType,
          name: inverseName,
          kind: inverseKind
        };
      },

      /**
        The model's relationships as a map, keyed on the type of the
        relationship. The value of each entry is an array containing a descriptor
        for each relationship with that type, describing the name of the relationship
        as well as the type.
         For example, given the following model definition:
         ```app/models/blog.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          users: DS.hasMany('user'),
          owner: DS.belongsTo('user'),
          posts: DS.hasMany('post')
        });
        ```
         This computed property would return a map describing these
        relationships, like this:
         ```javascript
        import Ember from 'ember';
        import Blog from 'app/models/blog';
         var relationships = Ember.get(Blog, 'relationships');
        relationships.get(App.User);
        //=> [ { name: 'users', kind: 'hasMany' },
        //     { name: 'owner', kind: 'belongsTo' } ]
        relationships.get(App.Post);
        //=> [ { name: 'posts', kind: 'hasMany' } ]
        ```
         @property relationships
        @static
        @type Ember.Map
        @readOnly
      */

      relationships: ember$data$lib$system$relationships$ext$$relationshipsDescriptor,

      /**
        A hash containing lists of the model's relationships, grouped
        by the relationship kind. For example, given a model with this
        definition:
         ```app/models/blog.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          users: DS.hasMany('user'),
          owner: DS.belongsTo('user'),
           posts: DS.hasMany('post')
        });
        ```
         This property would contain the following:
         ```javascript
        import Ember from 'ember';
        import Blog from 'app/models/blog';
         var relationshipNames = Ember.get(Blog, 'relationshipNames');
        relationshipNames.hasMany;
        //=> ['users', 'posts']
        relationshipNames.belongsTo;
        //=> ['owner']
        ```
         @property relationshipNames
        @static
        @type Object
        @readOnly
      */
      relationshipNames: Ember.computed(function () {
        var names = {
          hasMany: [],
          belongsTo: []
        };

        this.eachComputedProperty(function (name, meta) {
          if (meta.isRelationship) {
            names[meta.kind].push(name);
          }
        });

        return names;
      }),

      /**
        An array of types directly related to a model. Each type will be
        included once, regardless of the number of relationships it has with
        the model.
         For example, given a model with this definition:
         ```app/models/blog.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          users: DS.hasMany('user'),
          owner: DS.belongsTo('user'),
           posts: DS.hasMany('post')
        });
        ```
         This property would contain the following:
         ```javascript
        import Ember from 'ember';
        import Blog from 'app/models/blog';
         var relatedTypes = Ember.get(Blog, 'relatedTypes');
        //=> [ App.User, App.Post ]
        ```
         @property relatedTypes
        @static
        @type Ember.Array
        @readOnly
      */
      relatedTypes: ember$data$lib$system$relationships$ext$$relatedTypesDescriptor,

      /**
        A map whose keys are the relationships of a model and whose values are
        relationship descriptors.
         For example, given a model with this
        definition:
         ```app/models/blog.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          users: DS.hasMany('user'),
          owner: DS.belongsTo('user'),
           posts: DS.hasMany('post')
        });
        ```
         This property would contain the following:
         ```javascript
        import Ember from 'ember';
        import Blog from 'app/models/blog';
         var relationshipsByName = Ember.get(Blog, 'relationshipsByName');
        relationshipsByName.get('users');
        //=> { key: 'users', kind: 'hasMany', type: App.User }
        relationshipsByName.get('owner');
        //=> { key: 'owner', kind: 'belongsTo', type: App.User }
        ```
         @property relationshipsByName
        @static
        @type Ember.Map
        @readOnly
      */
      relationshipsByName: ember$data$lib$system$relationships$ext$$relationshipsByNameDescriptor,

      /**
        A map whose keys are the fields of the model and whose values are strings
        describing the kind of the field. A model's fields are the union of all of its
        attributes and relationships.
         For example:
         ```app/models/blog.js
        import DS from 'ember-data';
         export default DS.Model.extend({
          users: DS.hasMany('user'),
          owner: DS.belongsTo('user'),
           posts: DS.hasMany('post'),
           title: DS.attr('string')
        });
        ```
         ```js
        import Ember from 'ember';
        import Blog from 'app/models/blog';
         var fields = Ember.get(Blog, 'fields');
        fields.forEach(function(kind, field) {
          console.log(field, kind);
        });
         // prints:
        // users, hasMany
        // owner, belongsTo
        // posts, hasMany
        // title, attribute
        ```
         @property fields
        @static
        @type Ember.Map
        @readOnly
      */
      fields: Ember.computed(function () {
        var map = ember$data$lib$system$map$$Map.create();

        this.eachComputedProperty(function (name, meta) {
          if (meta.isRelationship) {
            map.set(name, meta.kind);
          } else if (meta.isAttribute) {
            map.set(name, "attribute");
          }
        });

        return map;
      }).readOnly(),

      /**
        Given a callback, iterates over each of the relationships in the model,
        invoking the callback with the name of each relationship and its relationship
        descriptor.
         @method eachRelationship
        @static
        @param {Function} callback the callback to invoke
        @param {any} binding the value to which the callback's `this` should be bound
      */
      eachRelationship: function (callback, binding) {
        ember$data$lib$system$relationships$ext$$get(this, "relationshipsByName").forEach(function (relationship, name) {
          callback.call(binding, name, relationship);
        });
      },

      /**
        Given a callback, iterates over each of the types related to a model,
        invoking the callback with the related type's class. Each type will be
        returned just once, regardless of how many different relationships it has
        with a model.
         @method eachRelatedType
        @static
        @param {Function} callback the callback to invoke
        @param {any} binding the value to which the callback's `this` should be bound
      */
      eachRelatedType: function (callback, binding) {
        ember$data$lib$system$relationships$ext$$get(this, "relatedTypes").forEach(function (type) {
          callback.call(binding, type);
        });
      },

      determineRelationshipType: function (knownSide, store) {
        var knownKey = knownSide.key;
        var knownKind = knownSide.kind;
        var inverse = this.inverseFor(knownKey, store);
        var key, otherKind;

        if (!inverse) {
          return knownKind === "belongsTo" ? "oneToNone" : "manyToNone";
        }

        key = inverse.name;
        otherKind = inverse.kind;

        if (otherKind === "belongsTo") {
          return knownKind === "belongsTo" ? "oneToOne" : "manyToOne";
        } else {
          return knownKind === "belongsTo" ? "oneToMany" : "manyToMany";
        }
      }

    });

    ember$data$lib$system$model$$default.reopen({
      /**
        Given a callback, iterates over each of the relationships in the model,
        invoking the callback with the name of each relationship and its relationship
        descriptor.
          The callback method you provide should have the following signature (all
        parameters are optional):
         ```javascript
        function(name, descriptor);
        ```
         - `name` the name of the current property in the iteration
        - `descriptor` the meta object that describes this relationship
         The relationship descriptor argument is an object with the following properties.
        - **key** <span class="type">String</span> the name of this relationship on the Model
       - **kind** <span class="type">String</span> "hasMany" or "belongsTo"
       - **options** <span class="type">Object</span> the original options hash passed when the relationship was declared
       - **parentType** <span class="type">DS.Model</span> the type of the Model that owns this relationship
       - **type** <span class="type">DS.Model</span> the type of the related Model
         Note that in addition to a callback, you can also pass an optional target
        object that will be set as `this` on the context.
         Example
         ```app/serializers/application.js
        import DS from 'ember-data';
         export default DS.JSONSerializer.extend({
          serialize: function(record, options) {
            var json = {};
             record.eachRelationship(function(name, descriptor) {
              if (descriptor.kind === 'hasMany') {
                var serializedHasManyName = name.toUpperCase() + '_IDS';
                json[name.toUpperCase()] = record.get(name).mapBy('id');
              }
            });
             return json;
          }
        });
        ```
         @method eachRelationship
        @param {Function} callback the callback to invoke
        @param {any} binding the value to which the callback's `this` should be bound
      */
      eachRelationship: function (callback, binding) {
        this.constructor.eachRelationship(callback, binding);
      },

      relationshipFor: function (name) {
        return ember$data$lib$system$relationships$ext$$get(this.constructor, "relationshipsByName").get(name);
      },

      inverseFor: function (key) {
        return this.constructor.inverseFor(key, this.store);
      }

    });

    /**
      Ember Data
      @module ember-data
      @main ember-data
    */

    if (Ember.VERSION.match(/^1\.[0-7]\./)) {
      throw new Ember.Error("Ember Data requires at least Ember 1.8.0, but you have " + Ember.VERSION + ". Please upgrade your version of Ember, then upgrade Ember Data");
    }

    if (Ember.VERSION.match(/^1\.12\.0/)) {
      throw new Ember.Error("Ember Data does not work with Ember 1.12.0. Please upgrade to Ember 1.12.1 or higher.");
    }

    // support RSVP 2.x via resolve,  but prefer RSVP 3.x's Promise.cast
    Ember.RSVP.Promise.cast = Ember.RSVP.Promise.cast || Ember.RSVP.resolve;ember$data$lib$core$$default.Store = ember$data$lib$system$store$$Store;
    ember$data$lib$core$$default.PromiseArray = ember$data$lib$system$promise$proxies$$PromiseArray;
    ember$data$lib$core$$default.PromiseObject = ember$data$lib$system$promise$proxies$$PromiseObject;

    ember$data$lib$core$$default.PromiseManyArray = ember$data$lib$system$promise$proxies$$PromiseManyArray;

    ember$data$lib$core$$default.Model = ember$data$lib$system$model$$default;
    ember$data$lib$core$$default.RootState = ember$data$lib$system$model$states$$default;
    ember$data$lib$core$$default.attr = ember$data$lib$system$model$attributes$$default;
    ember$data$lib$core$$default.Errors = ember$data$lib$system$model$errors$$default;

    ember$data$lib$core$$default.InternalModel = ember$data$lib$system$model$internal$model$$default;
    ember$data$lib$core$$default.Snapshot = ember$data$lib$system$snapshot$$default;

    ember$data$lib$core$$default.Adapter = ember$data$lib$system$adapter$$default;

    ember$data$lib$core$$default.AdapterError = ember$data$lib$adapters$errors$$AdapterError;
    ember$data$lib$core$$default.InvalidError = ember$data$lib$adapters$errors$$InvalidError;
    ember$data$lib$core$$default.TimeoutError = ember$data$lib$adapters$errors$$TimeoutError;
    ember$data$lib$core$$default.AbortError = ember$data$lib$adapters$errors$$AbortError;

    ember$data$lib$core$$default.errorsHashToArray = ember$data$lib$adapters$errors$$errorsHashToArray;
    ember$data$lib$core$$default.errorsArrayToHash = ember$data$lib$adapters$errors$$errorsArrayToHash;

    ember$data$lib$core$$default.Serializer = ember$data$lib$system$serializer$$default;

    ember$data$lib$core$$default.DebugAdapter = ember$data$lib$system$debug$$default;

    ember$data$lib$core$$default.RecordArray = ember$data$lib$system$record$arrays$record$array$$default;
    ember$data$lib$core$$default.FilteredRecordArray = ember$data$lib$system$record$arrays$filtered$record$array$$default;
    ember$data$lib$core$$default.AdapterPopulatedRecordArray = ember$data$lib$system$record$arrays$adapter$populated$record$array$$default;
    ember$data$lib$core$$default.ManyArray = ember$data$lib$system$many$array$$default;

    ember$data$lib$core$$default.RecordArrayManager = ember$data$lib$system$record$array$manager$$default;

    ember$data$lib$core$$default.RESTAdapter = ember$data$lib$adapters$rest$adapter$$default;
    ember$data$lib$core$$default.BuildURLMixin = ember$data$lib$adapters$build$url$mixin$$default;

    ember$data$lib$core$$default.RESTSerializer = ember$data$lib$serializers$rest$serializer$$default;
    ember$data$lib$core$$default.JSONSerializer = ember$data$lib$serializers$json$serializer$$default;

    ember$data$lib$core$$default.JSONAPIAdapter = ember$data$lib$adapters$json$api$adapter$$default;
    ember$data$lib$core$$default.JSONAPISerializer = ember$data$lib$serializers$json$api$serializer$$default;

    ember$data$lib$core$$default.Transform = ember$data$lib$transforms$base$$default;
    ember$data$lib$core$$default.DateTransform = ember$data$lib$transforms$date$$default;
    ember$data$lib$core$$default.StringTransform = ember$data$lib$transforms$string$$default;
    ember$data$lib$core$$default.NumberTransform = ember$data$lib$transforms$number$$default;
    ember$data$lib$core$$default.BooleanTransform = ember$data$lib$transforms$boolean$$default;

    var ember$data$lib$main$$_ActiveModelAdapter = activemodel$adapter$lib$system$active$model$adapter$$default;
    var ember$data$lib$main$$_ActiveModelSerializer = activemodel$adapter$lib$system$active$model$serializer$$default;

    if (Ember.platform.hasPropertyAccessors) {
      Ember.defineProperty(ember$data$lib$core$$default, "ActiveModelAdapter", {
        get: function () {
          if (ember$data$lib$main$$_ActiveModelSerializer === activemodel$adapter$lib$system$active$model$adapter$$default) {
            Ember.deprecate("The ActiveModelAdapter has been moved into a plugin. It will not be bundled with Ember Data in 2.0", false, {
              url: "https://github.com/ember-data/active-model-adapter"
            });
          }
          return ember$data$lib$main$$_ActiveModelAdapter;
        },
        set: function (ActiveModelAdapter) {
          ember$data$lib$main$$_ActiveModelAdapter = ActiveModelAdapter;
        }
      });
      Ember.defineProperty(ember$data$lib$core$$default, "ActiveModelSerializer", {
        get: function () {
          if (ember$data$lib$main$$_ActiveModelSerializer === activemodel$adapter$lib$system$active$model$serializer$$default) {
            Ember.deprecate("The ActiveModelSerializer has been moved into a plugin. It will not be bundled with Ember Data in 2.0", false, {
              url: "https://github.com/ember-data/active-model-adapter"
            });
          }
          return ember$data$lib$main$$_ActiveModelSerializer;
        },
        set: function (ActiveModelSerializer) {
          ember$data$lib$main$$_ActiveModelSerializer = ActiveModelSerializer;
        }
      });
    } else {
      ember$data$lib$core$$default.ActiveModelAdapter = activemodel$adapter$lib$system$active$model$adapter$$default;
      ember$data$lib$core$$default.ActiveModelSerializer = activemodel$adapter$lib$system$active$model$serializer$$default;
    }
    ember$data$lib$core$$default.EmbeddedRecordsMixin = ember$data$lib$serializers$embedded$records$mixin$$default;

    ember$data$lib$core$$default.belongsTo = ember$data$lib$system$relationships$belongs$to$$default;
    ember$data$lib$core$$default.hasMany = ember$data$lib$system$relationships$has$many$$default;

    ember$data$lib$core$$default.Relationship = ember$data$lib$system$relationships$state$relationship$$default;

    ember$data$lib$core$$default.ContainerProxy = ember$data$lib$system$container$proxy$$default;

    ember$data$lib$core$$default._setupContainer = ember$data$lib$setup$container$$default;

    Ember.defineProperty(ember$data$lib$core$$default, "normalizeModelName", {
      enumerable: true,
      writable: false,
      configurable: false,
      value: ember$data$lib$system$normalize$model$name$$default
    });

    var ember$data$lib$main$$_FixtureAdapter = ember$data$lib$adapters$fixture$adapter$$default;

    if (Ember.platform.hasPropertyAccessors) {
      Ember.defineProperty(ember$data$lib$core$$default, "FixtureAdapter", {
        get: function () {
          if (ember$data$lib$main$$_FixtureAdapter === ember$data$lib$adapters$fixture$adapter$$default) {
            Ember.deprecate("DS.FixtureAdapter has been deprecated and moved into an unsupported addon: https://github.com/emberjs/ember-data-fixture-adapter/tree/master");
          }
          return ember$data$lib$main$$_FixtureAdapter;
        },
        set: function (FixtureAdapter) {
          ember$data$lib$main$$_FixtureAdapter = FixtureAdapter;
        }
      });
    } else {
      ember$data$lib$core$$default.FixtureAdapter = ember$data$lib$adapters$fixture$adapter$$default;
    }

    Ember.lookup.DS = ember$data$lib$core$$default;

    var ember$data$lib$main$$default = ember$data$lib$core$$default;
}).call(this);


;define('ember-chosen', ['ember-chosen/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {
  'use strict';
  var keys = Object.keys || __Ember__['default'].keys;
  var forEach = Array.prototype.forEach && function(array, cb) {
    array.forEach(cb);
  } || __Ember__['default'].EnumerableUtils.forEach;

  forEach(keys(__index__), (function(key) {
    __exports__[key] = __index__[key];
  }));
});

define('ember-chosen/components/ember-chosen', ['exports', 'ember', 'ember-chosen/templates/components/ember-chosen'], function (exports, Ember, layout) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'select',
    layout: layout['default'],

    classNames: ['ember-chosen'],
    classNameBindings: ['isRTL:chosen-rtl'],

    attributeBindings: ['multiple', 'disabled', 'style'],

    ////////////////
    //! Variables //
    ////////////////

    isRTL: false,

    multiple: false,

    disabled: false,

    /*
     * The content path where the group name is located.
     * OPTIONAL
     */
    optionGroupPath: '',

    /*
     * The content path where the value is located.
     * REQUIRED
     */
    optionValuePath: '',

    /*
     * The content path where the label is located. 
     * REQUIRED
     */
    optionLabelPath: '',

    /*
     * Hides the empty option.
     */
    skipEmptyItem: false,

    /*
     * Content that is sent to the ember-chosen.
     * This is used to build the options array.
     */
    content: null,

    /*
     * The action to execute on change.
     */
    action: '',

    ///////////////
    //! Settings //
    ///////////////

    /*
     * Placeholder text for both the multiple version of the chosen
     * and the single version.
     */
    placeholder: 'Select an Option',

    /*
     * Chosen default options.
     * Reference: http://harvesthq.github.io/chosen/options.html
     */
    allowSingleDeselect: false,
    disableSearch: false,
    disableSearchThreshold: 0,
    enableSplitWordSearch: true,
    inheritSelectClasses: true,
    maxSelectedOptions: 'Infinity',
    noResultsText: 'No Results Match',
    searchContains: false,
    singleBackstrokeDelete: true,
    width: '100%',
    displayDisabledOptions: true,
    displaySelectedOptions: true,
    includeGroupLabelInSelected: false,

    /*
     * Aliased properties to the placeholder for easier setting.
     */
    placeholderTextMultiple: Ember['default'].computed.alias('placeholder'),
    placeholderTextSingle: Ember['default'].computed.alias('placeholder'),

    ///////////////
    //! Computed //
    ///////////////

    /*
     * Validates the optionGroupPath in the content array.
     */
    validGroupPath: Ember['default'].computed('optionGroupPath', {
      get: function get() {
        var that = this,
            validGroupPath,
            lastObject = that.get('content.lastObject');

        if (!that.get('optionGroupPath')) {
          return false;
        }

        if (lastObject.hasOwnProperty(that.get('optionGroupPath'))) {
          validGroupPath = true;
        } else {
          console.log('%c%s#validGroupPath Invalid optionGroupPath `%s`.', 'color: red', // http://www.w3schools.com/html/html_colornames.asp
          that.toString(), that.get('optionGroupPath'));

          validGroupPath = false;
        }

        return validGroupPath;
      }
    }),

    /*
     * Built options from the content sent in to the ember-select.
     */
    options: Ember['default'].computed('content', 'optionValuePath', 'optionLabelPath', 'optionGroupPath', 'value', 'disabled', {
      get: function get() {
        var that = this,
            groupNames = [],
            groups = [],
            options = Ember['default'].A();

        if (!that.get('content')) {
          return null;
        }

        if (that.get('validGroupPath')) {
          groupNames = that.get('content').mapBy(that.get('optionGroupPath'));
          groups = _.uniq(groupNames);

          /*  /
          console.log(
            "%c%s#options creating groups: %O from %O",
            "color: purple", // http://www.w3schools.com/html/html_colornames.asp
            that.toString(),
            groups,
            groupNames
          );
          //*/

          // Build the options with groups
          groups.forEach(function (group) {
            var groupOptions = [];

            that.get('content').filterBy(that.get('optionGroupPath'), group).forEach(function (option) {
              if (typeof option.get === 'undefined' && typeof option !== 'string') {
                option = Ember['default'].Object.create(option);
              }

              groupOptions.push({
                value: that._lookupOptionValue(option),
                label: that._lookupOptionLabel(option),
                selected: that._checkSelected(that._lookupOptionValue(option))
              });
            });

            options.push({
              label: group,
              options: groupOptions
            });
          });
        } else {
          // Build the options array
          that.get('content').forEach(function (option) {
            if (typeof option.get === 'undefined' && typeof option !== 'string') {
              option = Ember['default'].Object.create(option);
            }

            options.push({
              value: that._lookupOptionValue(option),
              label: that._lookupOptionLabel(option),
              selected: that._checkSelected(that._lookupOptionValue(option))
            });
          });
        }

        /*  /
        console.log(
          "%c%s#options: %O, value: %O",
          "color: purple", // http://www.w3schools.com/html/html_colornames.asp
          that.toString(),
          options,
          that.get('value')
        );
        //*/

        that._updateChosen();

        return options;
      }
    }),

    /*
     * Initializes the settings for th chosen select box.
     * Reformatts the camelized properties to underscired settings for chosen.
     */
    settings: Ember['default'].computed('isRtl', 'multiple', 'disabled', 'placeholder', 'allowSingleDeselect', 'disableSearch', 'disableSearchThreshold', 'enableSplitWordSearch', 'inheritSelectClasses', 'maxSelectedOptions', 'noResultsText', 'placeholderTextMultiple', 'placeholderTextSingle', 'searchContains', 'singleBackstrokeDelete', 'width', 'displayDisabledOptions', 'displaySelectedOptions', 'includeGroupLabelInSelected', function () {
      var that = this,
          properties = that.getProperties('prompt', 'isRtl', 'multiple', 'allowSingleDeselect', 'disableSearch', 'disableSearchThreshold', 'enableSplitWordSearch', 'inheritSelectClasses', 'maxSelectedOptions', 'noResultsText', 'placeholderTextMultiple', 'placeholderTextSingle', 'searchContains', 'singleBackstrokeDelete', 'width', 'displayDisabledOptions', 'displaySelectedOptions', 'includeGroupLabelInSelected'),
          settings = {};

      for (var prop in properties) {
        if (!properties.hasOwnProperty(prop)) {
          continue;
        }

        // Convert the camelized properties to underscored for chosen.
        settings[Ember['default'].String.underscore(prop)] = properties[prop];
      }

      that._updateChosen();

      return settings;
    }),

    style: Ember['default'].computed({
      get: function get() {
        var that = this,
            style = String('width: ' + that.get('width'));

        return Ember['default'].String.htmlSafe(style);
      }
    }),

    /////////////
    //! Events //
    /////////////

    didInsertElement: function didInsertElement() {
      this._setup();
    },

    willDestroyElement: function willDestroyElement() {
      this._teardown();
    },

    /*
     * Default change event. Linked to the chosen change event.
     */
    change: function change() {
      this.send('valueUpdate', this.$().val());
    },

    ////////////////
    //! Functions //
    ////////////////

    /*
     * Updates the chosen select box.
     */
    _updateChosen: function _updateChosen() {
      var that = this;

      Ember['default'].run.next(that, function () {
        /*  /
        console.log(
          "%c%s#_updateChosen...",
          "color: purple", // http://www.w3schools.com/html/html_colornames.asp
          that.toString()
        );
        //*/

        that.$().trigger('chosen:updated');
      });
    },

    /*
     * Looks up the option's value
     */
    _lookupOptionValue: function _lookupOptionValue(option) {
      var that = this,
          optionValue,
          lookupPath = null;

      if (that.get('optionValuePath')) {
        lookupPath = that.get('optionValuePath');
      } else {
        if (that.get('optionLabelPath')) {
          lookupPath = that.get('optionLabelPath');
        }
      }

      optionValue = lookupPath ? option.get(lookupPath) : option;

      return optionValue;
    },

    /*
     * Looks up the option's label
     */
    _lookupOptionLabel: function _lookupOptionLabel(option) {
      var that = this,
          optionLabel,
          lookupPath = null;

      if (that.get('optionLabelPath')) {
        lookupPath = that.get('optionLabelPath');
      } else {
        if (that.get('optionValuePath')) {
          lookupPath = that.get('optionValuePath');
        }
      }

      optionLabel = lookupPath ? option.get(lookupPath) : option;

      return optionLabel;
    },

    /*
     * Checks to see if a value is selected
     */
    _checkSelected: function _checkSelected(optionValue) {
      var that = this,
          value = that.get('value'),
          selected = false;

      if (Ember['default'].$.isArray(value)) {
        var found = _.indexOf(value, optionValue);

        if (found !== -1) {
          selected = true;
        }
      } else {
        if (String(value) === String(optionValue) && optionValue !== undefined) {
          selected = true;
        } else {
          selected = false;
        }
      }

      return selected;
    },

    /*
     * Initializes the chosen select.
     */
    _setup: function _setup() {
      var that = this;

      // If there is no content assume that we are using block content and attempt to select the appropriate option.
      if (!that.get('content')) {
        // Look for the selection via it's value.
        var foundSelectedOption = that.$('option[value="' + that.get('value') + '"]');

        // If not found, look for selection via it's HTML content.
        if (foundSelectedOption.length === 0) {
          foundSelectedOption = that.$('option').filter(function () {
            return Ember['default'].$(this).html() === that.get('value');
          });
        }

        if (foundSelectedOption.length === 0) {
          // If still not found, log notification.
          console.log('%c%s#_setup unable to select option with a value or text of `%s`.', 'color: red', // http://www.w3schools.com/html/html_colornames.asp
          that.toString(), that.get('value'));
        } else {
          // If found, select the option.
          foundSelectedOption.attr('selected', true);
        }
      }

      // Initialize the select box.
      that.$().chosen(that.get('settings'));
    },

    /*
     * Destroys the chosen select.
     */
    _teardown: function _teardown() {
      this.$().chosen('destroy');
    },

    //////////////
    //! Actions //
    //////////////

    actions: {
      /*
       * Handles setting the value when the select box's value changes.
       */
      valueUpdate: function valueUpdate(value) {
        this.set('value', value);

        if (this.get('action')) {
          Ember['default'].run.once(this, 'sendAction');
        }
      }
    }
  });

});
define('ember-chosen/templates/components/ember-chosen', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","yield"]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.2",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1,"disabled","");
            var el2 = dom.createTextNode("Invalid Attributes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 14,
                      "column": 10
                    },
                    "end": {
                      "line": 16,
                      "column": 10
                    }
                  },
                  "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("option");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element1, 'value');
                  morphs[1] = dom.createAttrMorph(element1, 'selected');
                  morphs[2] = dom.createMorphAt(element1,0,0);
                  return morphs;
                },
                statements: [
                  ["attribute","value",["get","option.value"]],
                  ["attribute","selected",["concat",[["subexpr","if",[["get","option.selected"],"selected"],[]]]]],
                  ["content","option.label"]
                ],
                locals: ["option"],
                templates: []
              };
            }());
            var child1 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 10
                    },
                    "end": {
                      "line": 18,
                      "column": 10
                    }
                  },
                  "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("option");
                  dom.setAttribute(el1,"disabled","");
                  var el2 = dom.createTextNode("No Options Available");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() { return []; },
                statements: [

                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 6
                  },
                  "end": {
                    "line": 20,
                    "column": 6
                  }
                },
                "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("optgroup");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element2, 'label');
                morphs[1] = dom.createMorphAt(element2,1,1);
                return morphs;
              },
              statements: [
                ["attribute","label",["get","group.label"]],
                ["block","each",[["get","group.options"]],[],0,1]
              ],
              locals: ["group"],
              templates: [child0, child1]
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 6
                  },
                  "end": {
                    "line": 22,
                    "column": 6
                  }
                },
                "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                dom.setAttribute(el1,"disabled","");
                var el2 = dom.createTextNode("No Options Available");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 23,
                  "column": 4
                }
              },
              "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","each",[["get","options"]],[],0,1]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 6
                  },
                  "end": {
                    "line": 26,
                    "column": 6
                  }
                },
                "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element0, 'value');
                morphs[1] = dom.createAttrMorph(element0, 'selected');
                morphs[2] = dom.createMorphAt(element0,0,0);
                return morphs;
              },
              statements: [
                ["attribute","value",["get","option.value"]],
                ["attribute","selected",["concat",[["subexpr","if",[["get","option.selected"],"selected"],[]]]]],
                ["content","option.label"]
              ],
              locals: ["option"],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 6
                  },
                  "end": {
                    "line": 28,
                    "column": 6
                  }
                },
                "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                dom.setAttribute(el1,"disabled","");
                var el2 = dom.createTextNode("No Options Available");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 4
                }
              },
              "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","each",[["get","options"]],[],0,1]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.2",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","validGroupPath"]],[],0,1]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 0
            }
          },
          "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","unless",[["get","skipEmptyItem"]],[],0,null],
          ["block","if",[["get","invalidAttrs"]],[],1,2]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "modules/ember-chosen/templates/components/ember-chosen.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","hasBlock"]],[],0,1]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('ember-cli-app-version', ['ember-cli-app-version/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {
  'use strict';
  var keys = Object.keys || __Ember__['default'].keys;
  var forEach = Array.prototype.forEach && function(array, cb) {
    array.forEach(cb);
  } || __Ember__['default'].EnumerableUtils.forEach;

  forEach(keys(__index__), (function(key) {
    __exports__[key] = __index__[key];
  }));
});

define('ember-cli-content-security-policy', ['ember-cli-content-security-policy/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {
  'use strict';
  var keys = Object.keys || __Ember__['default'].keys;
  var forEach = Array.prototype.forEach && function(array, cb) {
    array.forEach(cb);
  } || __Ember__['default'].EnumerableUtils.forEach;

  forEach(keys(__index__), (function(key) {
    __exports__[key] = __index__[key];
  }));
});

define('ember-cli-mirage', ['ember-cli-mirage/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {
  'use strict';
  var keys = Object.keys || __Ember__['default'].keys;
  var forEach = Array.prototype.forEach && function(array, cb) {
    array.forEach(cb);
  } || __Ember__['default'].EnumerableUtils.forEach;

  forEach(keys(__index__), (function(key) {
    __exports__[key] = __index__[key];
  }));
});

define('ember-cli-mirage/controller', ['exports', 'ember', 'ember-cli-mirage/shorthands/index', 'ember-cli-mirage/response'], function (exports, Ember, shorthandHandlers, Response) {

  'use strict';

  var isArray = _.isArray;
  var isBlank = Ember['default'].isBlank;
  var typeOf = Ember['default'].typeOf;
  var keys = _.keys;

  var defaultCodes = {
    get: 200,
    put: 204,
    post: 201,
    'delete': 204
  };

  exports['default'] = {

    handle: function handle(verb, handler, db, request, customizedCode, options) {
      var code, isEmptyObject;
      var handlerMethod = this._lookupHandlerMethod(verb, handler);
      var response = handlerMethod(handler, db, request, options);

      if (response instanceof Response['default']) {
        return response.toArray();
      } else {
        if (customizedCode) {
          code = customizedCode;
        } else {
          code = defaultCodes[verb];
          isEmptyObject = typeOf(response) === 'object' && keys(response).length === 0;
          if (code === 204 && response && !isEmptyObject && (isArray(response) || !isBlank(response))) {
            code = 200;
          }
        }

        if (response) {
          return [code, { 'Content-Type': 'application/json' }, response];
        } else {
          return [code, {}, undefined];
        }
      }
    },

    _lookupHandlerMethod: function _lookupHandlerMethod(verb, handler) {
      var type = typeof handler;
      type = isArray(handler) ? 'array' : type;

      var handlerMethod;

      if (type === 'function' || type === 'object') {
        handlerMethod = this['_' + type + 'Handler'];
      } else {
        handlerMethod = shorthandHandlers['default'][verb][type];
      }

      return handlerMethod;
    },

    _functionHandler: function _functionHandler(handler, db, request) {
      var data;

      try {
        data = handler(db, request);
      } catch (error) {
        console.error('Mirage: Your custom function handler for the url ' + request.url + ' threw an error:', error.message, error.stack);
      }

      return data;
    },

    _objectHandler: function _objectHandler(object /*, db, request*/) {
      return object;
    }

  };

});
define('ember-cli-mirage/db-collection', ['exports'], function (exports) {

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  /*
    A collection of db records i.e. a database table.
  */

  var DbCollection = (function () {
    function DbCollection(name, initialData) {
      _classCallCheck(this, DbCollection);

      this.name = name;
      this._records = [];

      if (initialData) {
        this.insert(initialData);
      }
    }

    _createClass(DbCollection, [{
      key: 'all',

      /*
        Returns a copy of the data, to prevent inadvertant data manipulation.
      */
      value: function all() {
        return JSON.parse(JSON.stringify(this._records));
      }
    }, {
      key: 'insert',
      value: function insert(data) {
        var copy = data ? JSON.parse(JSON.stringify(data)) : {};
        var records = this._records;
        var returnData = undefined;

        if (!_.isArray(copy)) {
          var attrs = copy;
          if (attrs.id === undefined || attrs.id === null) {
            attrs.id = records.length + 1;
          }

          records.push(attrs);
          returnData = JSON.parse(JSON.stringify(attrs));
        } else {
          returnData = [];
          copy.forEach(function (data) {
            if (data.id === undefined || data.id === null) {
              data.id = records.length + 1;
            }

            records.push(data);
            returnData.push(data);
            returnData = returnData.map(function (r) {
              return JSON.parse(JSON.stringify(r));
            });
          });
        }

        return returnData;
      }
    }, {
      key: 'find',
      value: function find(ids) {
        if (_.isArray(ids)) {
          var records = this._findRecords(ids).filter(function (r) {
            return r !== undefined;
          });

          // Return a copy
          return records.map(function (r) {
            return JSON.parse(JSON.stringify(r));
          });
        } else {
          var record = this._findRecord(ids);
          if (!record) {
            return null;
          }

          // Return a copy
          return JSON.parse(JSON.stringify(record));
        }
      }
    }, {
      key: 'where',
      value: function where(query) {
        var records = this._findRecordsWhere(query);

        return records.map(function (r) {
          return JSON.parse(JSON.stringify(r));
        });
      }
    }, {
      key: 'update',
      value: function update(target, attrs) {
        var _this = this;

        var records = undefined;

        if (typeof attrs === 'undefined') {
          var _ret = (function () {
            attrs = target;
            var changedRecords = [];
            _this._records.forEach(function (record) {
              var oldRecord = _.assign({}, record);

              for (var attr in attrs) {
                record[attr] = attrs[attr];
              }

              if (!_.isEqual(oldRecord, record)) {
                changedRecords.push(record);
              }
            });

            return {
              v: changedRecords
            };
          })();

          if (typeof _ret === 'object') return _ret.v;
        } else if (typeof target === 'number' || typeof target === 'string') {
          var id = target;
          var record = this._findRecord(id);

          for (var attr in attrs) {
            record[attr] = attrs[attr];
          }

          return record;
        } else if (_.isArray(target)) {
          var ids = target;
          records = this._findRecords(ids);

          records.forEach(function (record) {
            for (var attr in attrs) {
              record[attr] = attrs[attr];
            }
          });

          return records;
        } else if (typeof target === 'object') {
          var query = target;
          records = this._findRecordsWhere(query);

          records.forEach(function (record) {
            for (var attr in attrs) {
              record[attr] = attrs[attr];
            }
          });

          return records;
        }
      }
    }, {
      key: 'remove',
      value: function remove(target) {
        var _this2 = this;

        var records = undefined;

        if (typeof target === 'undefined') {
          this._records = [];
        } else if (typeof target === 'number' || typeof target === 'string') {
          var record = this._findRecord(target);
          var index = this._records.indexOf(record);
          this._records.splice(index, 1);
        } else if (_.isArray(target)) {
          records = this._findRecords(target);
          records.forEach(function (record) {
            var index = _this2._records.indexOf(record);
            _this2._records.splice(index, 1);
          });
        } else if (typeof target === 'object') {
          records = this._findRecordsWhere(target);
          records.forEach(function (record) {
            var index = _this2._records.indexOf(record);
            _this2._records.splice(index, 1);
          });
        }
      }
    }, {
      key: '_findRecord',

      /*
        Private methods.
         These return the actual db objects, whereas the public
        API query methods return copies.
      */

      value: function _findRecord(id) {
        var allDigitsRegex = /^\d+$/;

        // If parses, coerce to integer
        if (typeof id === 'string' && allDigitsRegex.test(id)) {
          id = parseInt(id, 10);
        }

        var record = this._records.filter(function (obj) {
          return obj.id === id;
        })[0];

        return record;
      }
    }, {
      key: '_findRecords',
      value: function _findRecords(ids) {
        var _this3 = this;

        var records = ids.map(function (id) {
          return _this3._findRecord(id);
        });

        return records;
      }
    }, {
      key: '_findRecordsWhere',
      value: function _findRecordsWhere(query) {
        var records = this._records;

        var _loop = function (queryKey) {
          records = records.filter(function (r) {
            return String(r[queryKey]) === String(query[queryKey]);
          });
        };

        for (var queryKey in query) {
          _loop(queryKey);
        }

        return records;
      }
    }]);

    return DbCollection;
  })();

  exports['default'] = DbCollection;

});
define('ember-cli-mirage/db', ['exports', 'ember-cli-mirage/db-collection'], function (exports, DbCollection) {

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Db = (function () {
    function Db(initialData) {
      _classCallCheck(this, Db);

      this._collections = [];

      if (initialData) {
        this.loadData(initialData);
      }
    }

    _createClass(Db, [{
      key: 'loadData',
      value: function loadData(data) {
        for (var key in data) {
          this.createCollection(key, data[key]);
        }
      }
    }, {
      key: 'createCollection',
      value: function createCollection(name, initialData) {
        var newCollection = new DbCollection['default'](name, initialData);

        Object.defineProperty(this, name, {
          get: function get() {
            var recordsCopy = newCollection.all();

            ['insert', 'find', 'where', 'update', 'remove'].forEach(function (method) {
              recordsCopy[method] = newCollection[method].bind(newCollection);
            });

            return recordsCopy;
          }
        });

        this._collections.push(newCollection);

        return this;
      }
    }, {
      key: 'createCollections',
      value: function createCollections() {
        var _this = this;

        for (var _len = arguments.length, collections = Array(_len), _key = 0; _key < _len; _key++) {
          collections[_key] = arguments[_key];
        }

        collections.forEach(function (c) {
          return _this.createCollection(c);
        });
      }
    }, {
      key: 'emptyData',
      value: function emptyData() {
        this._collections.forEach(function (c) {
          return c.remove();
        });
      }
    }]);

    return Db;
  })();

  exports['default'] = Db;

});
define('ember-cli-mirage/factory', ['exports'], function (exports) {

  'use strict';

  var Factory = function Factory() {
    this.build = function (sequence) {
      var object = {};
      var attrs = this.attrs || {};

      _.keys(attrs).forEach(function (key) {
        var type = typeof attrs[key];

        if (type === 'function') {
          object[key] = attrs[key].call(attrs, sequence);
        } else {
          object[key] = attrs[key];
        }
      });

      return object;
    };
  };

  Factory.extend = function (attrs) {
    // Merge the new attributes with existing ones. If conflict, new ones win.
    var newAttrs = _.assign({}, this.attrs, attrs);

    var Subclass = function Subclass() {
      this.attrs = newAttrs;
      Factory.call(this);
    };

    // Copy extend
    Subclass.extend = Factory.extend;

    // Store a reference on the class for future subclasses
    Subclass.attrs = newAttrs;

    return Subclass;
  };

  exports['default'] = Factory;

});
define('ember-cli-mirage/faker', ['exports'], function (exports) {

  'use strict';

  var list = {
    random: function random() {
      var items = arguments.length > 0 ? arguments : [];

      return function () {
        return faker.random.arrayElement(items);
      };
    },

    cycle: function cycle() {
      var items = arguments.length > 0 ? arguments : [];

      return function (i) {
        return items[i % items.length];
      };
    }
  };

  faker.list = list;

  exports['default'] = faker;

});
define('ember-cli-mirage/index', ['exports', 'ember-cli-mirage/factory', 'ember-cli-mirage/response', 'ember-cli-mirage/faker', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/orm/associations/has-many', 'ember-cli-mirage/orm/associations/belongs-to'], function (exports, Factory, Response, faker, Model, _hasMany, _belongsTo) {

  'use strict';

  exports['default'] = {
    Factory: Factory['default'],
    Response: Response['default'],
    hasMany: function hasMany(type) {
      return new _hasMany['default'](type);
    },
    belongsTo: function belongsTo(type) {
      return new _belongsTo['default'](type);
    }
  };

  exports.faker = faker['default'];
  exports.Model = Model['default'];
  exports.hasMany = _hasMany['default'];
  exports.belongsTo = _belongsTo['default'];

});
define('ember-cli-mirage/orm/associations/association', ['exports'], function (exports) {

  'use strict';

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Association = function Association(type) {
    _classCallCheck(this, Association);

    this.type = type;

    // The model type that owns this association
    this.owner = '';

    // The model type this association refers to
    this.target = '';
  };

  exports['default'] = Association;

});
define('ember-cli-mirage/orm/associations/belongs-to', ['exports', 'ember-cli-mirage/orm/associations/association', 'ember-cli-mirage/utils/inflector'], function (exports, Association, inflector) {

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var BelongsTo = (function (_Association) {
    _inherits(BelongsTo, _Association);

    function BelongsTo() {
      _classCallCheck(this, BelongsTo);

      _get(Object.getPrototypeOf(BelongsTo.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(BelongsTo, [{
      key: 'getForeignKeyArray',

      /*
        The belongsTo association adds a fk to the owner of the association
      */
      value: function getForeignKeyArray() {
        return [this.owner, this.target + '_id'];
      }
    }, {
      key: 'getForeignKey',
      value: function getForeignKey() {
        return this.target + '_id';
      }
    }, {
      key: 'addMethodsToModel',
      value: function addMethodsToModel(model, key, schema) {
        var association = this;
        var foreignKey = this.getForeignKey();

        var associationHash = {};
        associationHash[key] = this;
        model.belongsToAssociations = _.assign(model.belongsToAssociations, associationHash);
        model.associationKeys.push(key);
        model.associationIdKeys.push(foreignKey);

        Object.defineProperty(model, this.getForeignKey(), {

          /*
            object.parent_id
              - returns the associated parent's id
          */
          get: function get() {
            return this.attrs[foreignKey];
          },

          /*
            object.parent_id = (parentId)
              - sets the associated parent (via id)
          */
          set: function set(id) {
            if (id && !schema[association.target].find(id)) {
              throw 'Couldn\'t find ' + association.target + ' with id = ' + id;
            }

            this.attrs[foreignKey] = id;
            return this;
          }
        });

        Object.defineProperty(model, key, {
          /*
            object.parent
              - returns the associated parent
          */
          get: function get() {
            var foreignKeyId = this[foreignKey];
            if (foreignKeyId) {
              association._tempParent = null;
              return schema[association.target].find(foreignKeyId);
            } else if (association._tempParent) {
              return association._tempParent;
            } else {
              return null;
            }
          },

          /*
            object.parent = (parentModel)
              - sets the associated parent (via model)
          */
          set: function set(newModel) {
            if (newModel && newModel.isNew()) {
              this[foreignKey] = null;
              association._tempParent = newModel;
            } else if (newModel) {
              association._tempParent = null;
              this[foreignKey] = newModel.id;
            } else {
              association._tempParent = null;
              this[foreignKey] = null;
            }
          }
        });

        /*
          object.newParent
            - creates a new unsaved associated parent
        */
        model['new' + inflector.capitalize(key)] = function (attrs) {
          var parent = schema[key]['new'](attrs);

          this[key] = parent;

          return parent;
        };

        /*
          object.createParent
            - creates an associated parent, persists directly to db,
              and updates the owner's foreign key
        */
        model['create' + inflector.capitalize(key)] = function (attrs) {
          var parent = schema[key].create(attrs);

          this[foreignKey] = parent.id;

          return parent;
        };
      }
    }]);

    return BelongsTo;
  })(Association['default']);

  exports['default'] = BelongsTo;

});
define('ember-cli-mirage/orm/associations/has-many', ['exports', 'ember-cli-mirage/orm/associations/association', 'ember-cli-mirage/orm/collection', 'ember-cli-mirage/utils/inflector'], function (exports, Association, Collection, inflector) {

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var HasMany = (function (_Association) {
    _inherits(HasMany, _Association);

    function HasMany() {
      _classCallCheck(this, HasMany);

      _get(Object.getPrototypeOf(HasMany.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(HasMany, [{
      key: 'getForeignKeyArray',

      /*
        The hasMany association adds a fk to the target of the association
      */
      value: function getForeignKeyArray() {
        return [this.target, this.owner + '_id'];
      }
    }, {
      key: 'getForeignKey',
      value: function getForeignKey() {
        return this.owner + '_id';
      }
    }, {
      key: 'addMethodsToModel',
      value: function addMethodsToModel(model, key, schema) {
        this._model = model;
        this._key = key;

        var association = this;
        var foreignKey = this.getForeignKey();
        var relationshipIdsKey = association.target + '_ids';

        var associationHash = _defineProperty({}, key, this);
        model.hasManyAssociations = _.assign(model.hasManyAssociations, associationHash);
        model.associationKeys.push(key);
        model.associationIdKeys.push(relationshipIdsKey);

        Object.defineProperty(model, relationshipIdsKey, {

          /*
            object.children_ids
              - returns an array of the associated children's ids
          */
          get: function get() {
            var models = association._cachedChildren || [];

            if (!this.isNew()) {
              var query = _defineProperty({}, foreignKey, this.id);
              var savedModels = schema[association.target].where(query);

              models = savedModels.mergeCollection(models);
            }

            return models.map(function (model) {
              return model.id;
            });
          },

          /*
            object.children_ids = ([childrenIds...])
              - sets the associated parent (via id)
          */
          set: function set(ids) {
            ids = ids || [];

            if (this.isNew()) {
              association._cachedChildren = schema[association.target].find(ids);
            } else {
              // Set current children's fk to null
              var query = _defineProperty({}, foreignKey, this.id);
              schema[association.target].where(query).update(foreignKey, null);

              // Associate the new childrens to this model
              schema[association.target].find(ids).update(foreignKey, this.id);

              // Clear out any old cached children
              association._cachedChildren = [];
            }

            return this;
          }
        });

        Object.defineProperty(model, key, {

          /*
            object.children
              - returns an array of associated children
          */
          get: function get() {
            var tempModels = association._cachedChildren || [];

            if (this.isNew()) {
              return tempModels;
            } else {
              var query = {};
              query[foreignKey] = this.id;
              var savedModels = schema[association.target].where(query);

              return savedModels.mergeCollection(tempModels);
            }
          },

          /*
            object.children = [model1, model2, ...]
              - sets the associated children (via array of models)
              - note: this method will persist unsaved chidren
                + (why? because rails does)
          */
          set: function set(models) {
            models = models ? _.compact(models) : [];

            if (this.isNew()) {
              association._cachedChildren = models instanceof Collection['default'] ? models : new Collection['default'](models);
            } else {

              // Set current children's fk to null
              var query = _defineProperty({}, foreignKey, this.id);
              schema[association.target].where(query).update(foreignKey, null);

              // Save any children that are new
              models.filter(function (model) {
                return model.isNew();
              }).forEach(function (model) {
                return model.save();
              });

              // Associate the new children to this model
              schema[association.target].find(models.map(function (m) {
                return m.id;
              })).update(foreignKey, this.id);

              // Clear out any old cached children
              association._cachedChildren = [];
            }
          }
        });

        /*
          object.newChild
            - creates a new unsaved associated child
        */
        model['new' + inflector.capitalize(association.target)] = function (attrs) {
          if (!this.isNew()) {
            attrs = _.assign(attrs, _defineProperty({}, foreignKey, this.id));
          }

          var child = schema[association.target]['new'](attrs);

          association._cachedChildren = association._cachedChildren || new Collection['default']();
          association._cachedChildren.push(child);

          return child;
        };

        /*
          object.createChild
            - creates an associated child, persists directly to db, and
              updates the target's foreign key
            - parent must be saved
        */
        model['create' + inflector.capitalize(association.target)] = function (attrs) {
          if (this.isNew()) {
            throw 'You cannot call create unless the parent is saved';
          }

          var augmentedAttrs = _.assign(attrs, _defineProperty({}, foreignKey, this.id));
          var child = schema[association.target].create(augmentedAttrs);

          return child;
        };
      }
    }]);

    return HasMany;
  })(Association['default']);

  exports['default'] = HasMany;

});
define('ember-cli-mirage/orm/collection', ['exports'], function (exports) {

  'use strict';

  /*
    An array of models, returned from one of the schema query
    methods (all, find, where). Knows how to update and destroy its models.
  */
  var Collection = function Collection() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (_.isArray(args[0])) {
      args = args[0];
    }
    this.push.apply(this, args);

    this.update = function (key, val) {
      this.forEach(function (model) {
        model.update(key, val);
      });
    };

    this.destroy = function () {
      this.forEach(function (model) {
        model.destroy();
      });
    };

    this.save = function () {
      this.forEach(function (model) {
        model.save();
      });
    };

    this.reload = function () {
      this.forEach(function (model) {
        model.reload();
      });
    };

    this.mergeCollection = function (collection) {
      var _this = this;

      collection.forEach(function (model) {
        _this.push(model);
      });

      return this;
    };

    return this;
  };

  Collection.prototype = Object.create(Array.prototype);

  exports['default'] = Collection;

});
define('ember-cli-mirage/orm/model', ['exports', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/utils/extend', 'ember-cli-mirage/orm/associations/association'], function (exports, inflector, extend, Association) {

  'use strict';

  var Model = function Model(schema, type, attrs, fks) {
    if (!schema) {
      throw 'Mirage: A model requires a schema';
    }
    if (!type) {
      throw 'Mirage: A model requires a type';
    }

    this.toString = function () {
      return 'model:' + type;
    };

    this._schema = schema;
    this.type = type;
    this.fks = fks || [];
    attrs = attrs || {};

    this._setupAttrs(attrs);
    this._setupRelationships(attrs);

    return this;
  };

  /*
    Create or save the model
  */
  Model.prototype.save = function () {
    var collection = inflector.pluralize(this.type);

    if (this.isNew()) {
      // Update the attrs with the db response
      this.attrs = this._schema.db[collection].insert(this.attrs);

      // Ensure the id getter/setter is set
      this._definePlainAttribute('id');
    } else {
      this._schema.db[collection].update(this.attrs.id, this.attrs);
    }

    // Update associated children
    this._saveAssociations();

    return this;
  };

  /*
    Update the db record.
  */
  Model.prototype.update = function (key, val) {
    var _this = this;
    var attrs;
    if (key == null) {
      return this;
    }

    if (typeof key === 'object') {
      attrs = key;
    } else {
      (attrs = {})[key] = val;
    }

    Object.keys(attrs).forEach(function (attr) {
      _this[attr] = attrs[attr];
    });

    this.save();

    return this;
  };

  /*
    Destroy the db record.
  */
  Model.prototype.destroy = function () {
    var collection = inflector.pluralize(this.type);
    this._schema.db[collection].remove(this.attrs.id);
  };

  /*
    Is the model new?
  */
  Model.prototype.isNew = function () {
    return this.attrs.id === undefined || this.attrs.id === null;
  };

  Model.prototype.isSaved = function () {
    return this.attrs.id !== undefined && this.attrs.id !== null;
  };

  /*
    Reload data from the db
  */
  Model.prototype.reload = function () {
    var _this = this;
    var collection = inflector.pluralize(this.type);
    var attrs = this._schema.db[collection].find(this.id);

    Object.keys(attrs).filter(function (attr) {
      return attr !== 'id';
    }).forEach(function (attr) {
      _this[attr] = attrs[attr];
    });
  };

  Model.prototype.addAssociationMethods = function (schema) {
    var _this = this;

    this.hasManyAssociations = {}; // a registry of the model's hasMany associations. Key is key from model definition, value is association instance itself
    this.belongsToAssociations = {}; // a registry of the model's belongsTo associations. Key is key from model definition, value is association instance itself
    this.associationKeys = []; // ex: address.user, user.addresses
    this.associationIdKeys = []; // ex: address.user_id, user.address_ids. may or may not be a fk.

    Object.keys(this.constructor).forEach(function (attr) {
      if (_this.constructor[attr] instanceof Association['default']) {
        var association = _this.constructor[attr];
        association.addMethodsToModel(_this, attr, schema);
      }
    });
  };

  // Private
  /*
    model.attrs represents the persistable attributes, i.e. your db
    table fields.
  */
  Model.prototype._setupAttrs = function (attrs) {
    var _this = this;

    // Filter out association keys
    var hash = Object.keys(attrs).reduce(function (memo, attr) {
      if (_this.associationKeys.indexOf(attr) === -1 && _this.associationIdKeys.indexOf(attr) === -1) {
        memo[attr] = attrs[attr];
      }

      return memo;
    }, {});

    // Ensure fks are there
    this.fks.map(function (fk) {
      hash[fk] = attrs[fk] || null;
    });

    this.attrs = hash;

    // define plain getter/setters for non-association keys
    Object.keys(hash).forEach(function (attr) {
      if (_this.associationKeys.indexOf(attr) === -1 && _this.associationIdKeys.indexOf(attr) === -1) {
        _this._definePlainAttribute(attr);
      }
    });
  };

  /*
    Define getter/setter for a plain attribute
  */
  Model.prototype._definePlainAttribute = function (attr) {
    if (this[attr] !== undefined) {
      return;
    }

    // Ensure the attribute is on the attrs hash
    if (!this.attrs.hasOwnProperty(attr)) {
      this.attrs[attr] = null;
    }

    // Define the getter/setter
    Object.defineProperty(this, attr, {
      get: function get() {
        return this.attrs[attr];
      },
      set: function set(val) {
        this.attrs[attr] = val;return this;
      }
    });
  };

  Model.prototype._setupRelationships = function (attrs) {
    var _this = this;

    // Only want association keys and fks
    var hash = Object.keys(attrs).reduce(function (memo, attr) {
      if (_this.associationKeys.indexOf(attr) > -1 || _this.associationIdKeys.indexOf(attr) > -1 || _this.fks.indexOf(attr) > -1) {
        memo[attr] = attrs[attr];
      }

      return memo;
    }, {});

    Object.keys(hash).forEach(function (attr) {
      _this[attr] = hash[attr];
    });
  };

  Model.prototype._saveAssociations = function () {
    var _this2 = this;

    Object.keys(this.belongsToAssociations).forEach(function (key) {
      var association = _this2.belongsToAssociations[key];
      var parent = _this2[key];
      if (parent.isNew()) {
        var fk = association.getForeignKey();
        parent.save();
        _this2.update(fk, parent.id);
      }
    });

    Object.keys(this.hasManyAssociations).forEach(function (key) {
      var association = _this2.hasManyAssociations[key];
      var children = _this2[key];
      children.update(association.getForeignKey(), _this2.id);
    });
  };

  Model.extend = extend['default'].bind(Model, null);

  Model.toString = function () {
    return 'model';
  };

  exports['default'] = Model;

});
define('ember-cli-mirage/orm/schema', ['exports', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/orm/collection', 'ember-cli-mirage/orm/associations/association'], function (exports, inflector, Collection, Association) {

  'use strict';

  exports['default'] = function (db) {

    if (!db) {
      throw 'Mirage: A schema requires a db';
    }

    this.db = db;
    this._registry = {};

    this.registerModels = function (hash) {
      var _this = this;

      Object.keys(hash).forEach(function (type) {
        _this.registerModel(type, hash[type]);
      });
    };

    this.registerModel = function (type, ModelClass) {
      var _this = this;

      // Store model & fks in registry
      this._registry[type] = this._registry[type] || { 'class': null, foreignKeys: [] }; // we may have created this key before, if another model added fks to it
      this._registry[type]['class'] = ModelClass;

      Object.keys(ModelClass).forEach(function (key) {
        if (ModelClass[key] instanceof Association['default']) {
          var association = ModelClass[key];
          var associatedType = association.type || inflector.singularize(key);
          association.owner = type;
          association.target = associatedType;

          // Update the registry with this association's foreign keys
          var result = association.getForeignKeyArray();
          var fkHolder = result[0];
          var fk = result[1];
          _this._addForeignKeyToRegistry(fkHolder, fk);
        }
      });

      // Add association methods (until we can figure out how to add them as static class methods upon definition)
      ModelClass.prototype.addAssociationMethods(this);

      // Create db, if doesn't exist
      var collection = inflector.pluralize(type);
      if (!this.db[collection]) {
        this.db.createCollection(collection);
      }

      // Create the entity methods
      this[type] = {
        'new': this['new'].bind(this, type),
        create: this.create.bind(this, type),
        all: this.all.bind(this, type),
        find: this.find.bind(this, type),
        where: this.where.bind(this, type)
      };

      return this;
    };

    this['new'] = function (type, attrs) {
      return this._instantiateModel(type, attrs);
    };

    this.create = function (type, attrs) {
      var collection = this._collectionForType(type);
      var augmentedAttrs = collection.insert(attrs);

      return this._instantiateModel(type, augmentedAttrs);
    };

    this.all = function (type) {
      var collection = this._collectionForType(type);

      return this._hydrate(collection, type);
    };

    this.find = function (type, ids) {
      var collection = this._collectionForType(type);
      var records = collection.find(ids);

      if (_.isArray(ids)) {
        if (records.length !== ids.length) {
          throw 'Couldn\'t find all ' + inflector.pluralize(type) + ' with ids: (' + ids.join(',') + ') (found ' + records.length + ' results, but was looking for ' + ids.length + ')';
        }
      }

      return this._hydrate(records, type);
    };

    this.where = function (type, query) {
      var collection = this._collectionForType(type);
      var records = collection.where(query);

      return this._hydrate(records, type);
    };

    /*
      Private methods
    */
    this._collectionForType = function (type) {
      var collection = inflector.pluralize(type);
      if (!this.db[collection]) {
        throw 'Mirage: You\'re trying to find model(s) of type ' + type + ' but this collection doesn\'t exist in the database.';
      }

      return this.db[collection];
    };

    this._addForeignKeyToRegistry = function (type, fk) {
      this._registry[type] = this._registry[type] || { 'class': null, foreignKeys: [] };
      this._registry[type].foreignKeys.push(fk);
    };

    this._instantiateModel = function (type, attrs) {
      var ModelClass = this._modelFor(type);
      var fks = this._foreignKeysFor(type);

      return new ModelClass(this, type, attrs, fks);
    };

    this._modelFor = function (type) {
      return this._registry[type]['class'];
    };

    this._foreignKeysFor = function (type) {
      return this._registry[type].foreignKeys;
    };

    /*
      Takes a record and returns a model, or an array of records
      and returns a collection.
    */
    this._hydrate = function (records, type) {
      var _this = this;

      if (_.isArray(records)) {
        var models = records.map(function (record) {
          return _this._instantiateModel(type, record);
        });

        return new Collection['default'](models);
      } else {
        var record = records;
        return !record ? null : this._instantiateModel(type, record);
      }
    };
  }

});
define('ember-cli-mirage/response', ['exports'], function (exports) {

  'use strict';

  exports['default'] = function (code, headers, data) {
    this.toArray = function () {
      return [code, headers, data];
    };

    return this;
  }

});
define('ember-cli-mirage/server', ['exports', 'ember-cli-mirage/utils/inflector', 'pretender', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/controller'], function (exports, inflector, Pretender, Db, Schema, controller) {

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Server = (function () {
    function Server(options) {
      _classCallCheck(this, Server);

      if (!options || !options.environment) {
        throw 'You must pass an environment in when creating a Mirage server instance';
      }

      this.environment = options.environment;
      this.timing = 400;
      this.namespace = '';

      this._setupStubAliases();

      /*
        Pretender instance with default config.
         TODO: Inject?
      */
      this.interceptor = new Pretender['default'](function () {
        this.prepareBody = function (body) {
          return body ? JSON.stringify(body) : '{"error": "not found"}';
        };

        this.unhandledRequest = function (verb, path) {
          path = decodeURI(path);
          console.error('Mirage: Your Ember app tried to ' + verb + ' \'' + path + '\', but there was no route defined to handle this ' + 'request. Define a route that matches this path in your ' + 'mirage/config.js file.');
        };
      });
      this.pretender = this.interceptor; // alias

      /*
        Db instance
         TODO: Inject?
      */
      this.db = new Db['default']();

      if (options.modelsMap) {
        this.schema = new Schema['default'](this.db);
        this.schema.registerModels(options.modelsMap);
      }

      // TODO: Better way to inject server into test env
      if (this.environment === 'test') {
        window.server = this;
      }
    }

    _createClass(Server, [{
      key: 'loadConfig',
      value: function loadConfig(config) {
        config.call(this);
        this.timing = this.environment === 'test' ? 0 : this.timing || 0;
      }
    }, {
      key: 'stub',

      // TODO: Move all this logic to another object (route?)
      value: function stub(verb, path, handler, code, options) {
        var _this = this;
        path = path[0] === '/' ? path.slice(1) : path;

        this.interceptor[verb].call(this.interceptor, this.namespace + '/' + path, function (request) {
          var response = controller['default'].handle(verb, handler, _this.schema || _this.db, request, code, options);
          var shouldLog = typeof _this.logging !== 'undefined' ? _this.logging : _this.environment !== 'test';

          if (shouldLog) {
            console.log('Successful request: ' + verb.toUpperCase() + ' ' + request.url);
            console.log(response[2]);
          }

          return response;
        }, function () {
          return _this.timing;
        });
      }
    }, {
      key: 'loadFactories',

      /*
        Factory methods
      */
      value: function loadFactories(factoryMap) {
        var _this = this;
        // Store a reference to the factories
        this._factoryMap = factoryMap;

        // Create a collection for each factory
        _.keys(factoryMap).forEach(function (type) {
          _this.db.createCollection(inflector.pluralize(type));
        });
      }
    }, {
      key: 'create',
      value: function create(type, overrides) {
        var collection = inflector.pluralize(type);
        var currentRecords = this.db[collection];
        var sequence = currentRecords ? currentRecords.length : 0;
        if (!this._factoryMap || !this._factoryMap[type]) {
          throw 'You\'re trying to create a ' + type + ', but no factory for this type was found';
        }
        var OriginalFactory = this._factoryMap[type];
        var Factory = OriginalFactory.extend(overrides);
        var factory = new Factory();

        var attrs = factory.build(sequence);
        return this.db[collection].insert(attrs);
      }
    }, {
      key: 'createList',
      value: function createList(type, amount, overrides) {
        var list = [];

        for (var i = 0; i < amount; i++) {
          list.push(this.create(type, overrides));
        }

        return list;
      }
    }, {
      key: 'shutdown',
      value: function shutdown() {
        this.pretender.shutdown();
      }
    }, {
      key: '_setupStubAliases',
      value: function _setupStubAliases() {
        var _this = this;

        [['get'], ['post'], ['put'], ['delete', 'del'], ['patch']].forEach(function (names) {
          var verb = names[0];
          var alias = names[1];

          _this[verb] = function () {
            var args = _this._extractStubArguments.apply(this, arguments);
            args.unshift(verb);
            this.stub.apply(this, args);
          };

          if (alias) {
            _this[alias] = _this[verb];
          }
        });
      }
    }, {
      key: '_extractStubArguments',

      /*
        Given a variable number of arguments, it generates an array of with
        [path, handler, code, options], `path` and `options` being always defined,
        and `handler` and `code` being undefined if not suplied.
      */
      value: function _extractStubArguments() {
        var ary = Array.prototype.slice.call(arguments);
        var argsInitialLength = ary.length;
        var lastArgument = ary[ary.length - 1];
        var options;
        var i = 0;
        if (lastArgument.constructor === Object) {
          argsInitialLength--;
        } else {
          options = { colesce: false };
          ary.push(options);
        }
        for (; i < 5 - ary.length; i++) {
          ary.splice(argsInitialLength, 0, undefined);
        }
        return ary;
      }
    }]);

    return Server;
  })();

  exports['default'] = Server;
  /* path, handler, code, options */ /* path, handler, code, options */

});
define('ember-cli-mirage/shorthands/delete', ['exports', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/shorthands/utils'], function (exports, inflector, utils) {

  'use strict';

  exports['default'] = {

    /*
      Remove the model from the db of type *type*.
       This would remove the user with id :id:
        Ex: this.stub('delete', '/contacts/:id', 'user');
    */
    string: function string(type, db, request) {
      var id = utils['default'].getIdForRequest(request);
      var collection = inflector.pluralize(type);

      if (!db[collection]) {
        console.error('Mirage: The route handler for ' + request.url + ' is trying to remove data from the ' + collection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
      }

      db[collection].remove(id);

      return undefined;
    },

    /*
      Remove the model and child related models from the db.
       This would remove the contact with id `:id`, and well
      as this contact's addresses and phone numbers.
        Ex: this.stub('delete', '/contacts/:id', ['contact', 'addresses', 'numbers');
    */
    array: function array(_array, db, request) {
      var id = utils['default'].getIdForRequest(request);
      var parentType = _array[0];
      var parentCollection = inflector.pluralize(parentType);
      var types = _array.slice(1);

      if (!db[parentCollection]) {
        console.error('Mirage: The route handler for ' + request.url + ' is trying to remove data from the ' + parentCollection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
      }

      db[parentCollection].remove(id);

      var query = {};
      var parentIdKey = parentType + '_id';
      query[parentIdKey] = id;

      types.forEach(function (type) {
        var collection = inflector.pluralize(type);

        if (!db[parentCollection]) {
          console.error('Mirage: The route handler for ' + request.url + ' is trying to remove data from the ' + collection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
        }

        db[collection].remove(query);
      });

      return undefined;
    },

    /*
      Remove the model from the db based on singular version
      of the last portion of the url.
       This would remove contact with id :id:
        Ex: this.stub('delete', '/contacts/:id');
    */
    undefined: (function (_undefined) {
      function undefined(_x, _x2, _x3) {
        return _undefined.apply(this, arguments);
      }

      undefined.toString = function () {
        return _undefined.toString();
      };

      return undefined;
    })(function (undef, db, request) {
      var id = utils['default'].getIdForRequest(request);
      var url = utils['default'].getUrlForRequest(request);
      var urlNoId = id ? url.substr(0, url.lastIndexOf('/')) : url;
      var type = inflector.singularize(urlNoId.substr(urlNoId.lastIndexOf('/') + 1));
      var collection = inflector.pluralize(type);

      db[collection].remove(id);

      return undefined;
    })
  };

});
define('ember-cli-mirage/shorthands/get', ['exports', 'ember-cli-mirage/response', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/shorthands/utils'], function (exports, Response, inflector, utils) {

  'use strict';

  function stringGet(string, db, request, options) {
    var key = string;
    var collection = inflector.pluralize(string);
    var id = utils['default'].getIdForRequest(request);
    var data = {};
    var record;
    options = options || {};

    if (!db[collection]) {
      console.error('Mirage: The route handler for ' + request.url + ' is requesting data from the ' + collection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
    }

    if (id) {
      record = db[collection].find(id);
      if (!record) {
        return new Response['default'](404, {}, {});
      }
      data[key] = record;
    } else if (options.coalesce && request.queryParams && request.queryParams.ids) {
      data[key] = db[collection].find(request.queryParams.ids);
    } else {
      data[key] = db[collection];
    }
    return data;
  }

  /*
    Retrieve *keys* from the db.

    If all keys plural, retrieve all objects from db.
      Ex: this.stub('get', '/contacts', ['contacts', 'pictures']);


    If first is singular, find first by id, and filter all
    subsequent models by related.
      Ex: this.stub('get', '/contacts/:id', ['contact', 'addresses']);
  */
  function arrayGet(array, db, request) {
    var keys = array;
    var data = {};
    var owner;
    var ownerKey;

    keys.forEach(function (key) {
      var collection = inflector.pluralize(key);

      if (!db[collection]) {
        console.error('Mirage: The route handler for ' + request.url + ' is requesting data from the ' + collection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
      }

      // There's an owner. Find only related.
      if (ownerKey) {
        var ownerIdKey = inflector.singularize(ownerKey) + '_id';
        var query = {};
        query[ownerIdKey] = owner.id;
        data[key] = db[collection].where(query);
      } else {

        // TODO: This is a crass way of checking if we're looking for a single model, doens't work for e.g. sheep
        if (inflector.singularize(key) === key) {
          ownerKey = key;
          var id = utils['default'].getIdForRequest(request);
          var model = db[collection].find(id);
          data[key] = model;
          owner = model;
        } else {
          data[key] = db[collection];
        }
      }
    });

    return data;
  }

  /*
    Retrieve objects from the db based on singular version
    of the last portion of the url.

    This would return all contacts:
      Ex: this.stub('get', '/contacts');

    If an id is present, return a single model by id.
      Ex: this.stub('get', '/contacts/:id');

    If the options contain a `coalesce: true` option and the queryParams have `ids`, it
    returns the models with those ids.
      Ex: this.stub('get', '/contacts/:id');
  */
  function undefinedGet(undef, db, request, options) {
    var id = utils['default'].getIdForRequest(request);
    var url = utils['default'].getUrlForRequest(request);
    var type = utils['default'].getTypeFromUrl(url, id);
    var str = id ? type : inflector.pluralize(type);
    return stringGet(str, db, request, options);
  }

  exports['default'] = {
    string: stringGet,
    array: arrayGet,
    undefined: undefinedGet
  };

});
define('ember-cli-mirage/shorthands/index', ['exports', 'ember-cli-mirage/shorthands/get', 'ember-cli-mirage/shorthands/post', 'ember-cli-mirage/shorthands/put', 'ember-cli-mirage/shorthands/delete'], function (exports, get, post, put, del) {

  'use strict';

  exports['default'] = {
    get: get['default'],
    post: post['default'],
    put: put['default'],
    'delete': del['default']
  };

});
define('ember-cli-mirage/shorthands/post', ['exports', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/shorthands/utils'], function (exports, inflector, utils) {

  'use strict';

  exports['default'] = {

    /*
      Push a new model of type *type* to the db.
       For example, this will push a 'user':
        this.stub('post', '/contacts', 'contact');
    */
    string: function string(_string, db, request) {
      var type = _string;
      var collection = inflector.pluralize(_string);
      var postData = utils['default'].getJsonBodyForRequest(request);
      var attrs = postData[type];

      if (!db[collection]) {
        console.error('Mirage: The route handler for ' + request.url + ' is trying to insert data into the ' + collection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
      }

      var model = db[collection].insert(attrs);

      var response = {};
      response[type] = model;

      return response;
    },

    /*
      Push a new model to the db. The type is found
      by singularizing the last portion of the URL.
       For example, this will push a 'contact'.
        this.stub('post', '/contacts');
    */
    undefined: function undefined(undef, db, request) {
      var url = utils['default'].getUrlForRequest(request);
      var type = utils['default'].getTypeFromUrl(url);
      var collection = inflector.pluralize(type);
      var postData = utils['default'].getJsonBodyForRequest(request);
      var attrs = postData[type];

      if (!db[collection]) {
        console.error('Mirage: The route handler for ' + request.url + ' is trying to insert data into the ' + collection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
      }

      var model = db[collection].insert(attrs);

      var response = {};
      response[type] = model;
      return response;
    }

  };

});
define('ember-cli-mirage/shorthands/put', ['exports', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/shorthands/utils'], function (exports, inflector, utils) {

  'use strict';

  exports['default'] = {

    /*
      Update an object from the db, specifying the type.
         this.stub('put', '/contacts/:id', 'user');
    */
    string: function string(type, db, request) {
      var id = utils['default'].getIdForRequest(request);
      var putData = utils['default'].getJsonBodyForRequest(request);
      var attrs = putData[type];
      var collection = inflector.pluralize(type);
      attrs.id = id;

      if (!db[collection]) {
        console.error('Mirage: The route handler for ' + request.url + ' is trying to modify data from the ' + collection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
      }

      var data = db[collection].update(id, attrs);

      var response = {};
      response[type] = data;

      return response;
    },

    /*
      Update an object from the db based on singular version
      of the last portion of the url.
         this.stub('put', '/contacts/:id');
    */
    undefined: function undefined(undef, db, request) {
      var id = utils['default'].getIdForRequest(request);
      var url = utils['default'].getUrlForRequest(request);
      var type = utils['default'].getTypeFromUrl(url, id);
      var collection = inflector.pluralize(type);
      var putData = utils['default'].getJsonBodyForRequest(request);
      var attrs = putData[type];

      if (!db[collection]) {
        console.error('Mirage: The route handler for ' + request.url + ' is trying to modify data from the ' + collection + ' collection, but that collection doesn\'t exist. To create it, create an empty fixture file or factory.');
      }

      var data = db[collection].update(id, attrs);

      var response = {};
      response[type] = data;

      return response;
    }

  };

});
define('ember-cli-mirage/shorthands/utils', ['exports', 'ember-cli-mirage/utils/inflector'], function (exports, inflector) {

  'use strict';

  var allDigitsRegex = /^\d+$/;

  exports['default'] = {

    getIdForRequest: function getIdForRequest(request) {
      var id;

      if (request && request.params && request.params.id) {
        id = request.params.id;
        // If parses, coerce to integer
        if (typeof id === 'string' && allDigitsRegex.test(id)) {
          id = parseInt(request.params.id, 10);
        }
      }

      return id;
    },

    getUrlForRequest: function getUrlForRequest(request) {
      var url;

      if (request && request.url) {
        url = request.url;
      }

      return url;
    },

    getTypeFromUrl: function getTypeFromUrl(url, hasId) {
      var urlNoId = hasId ? url.substr(0, url.lastIndexOf('/')) : url;
      var urlSplit = urlNoId.split('?');
      var urlNoIdNoQuery = urlSplit[0].slice(-1) === '/' ? urlSplit[0].slice(0, -1) : urlSplit[0];
      var type = inflector.singularize(urlNoIdNoQuery.substr(urlNoIdNoQuery.lastIndexOf('/') + 1));

      return type;
    },

    getJsonBodyForRequest: function getJsonBodyForRequest(request) {
      var body;

      if (request && request.requestBody) {
        body = JSON.parse(request.requestBody);
      }

      return body;
    }

  };

});
define('ember-cli-mirage/utils/extend', ['exports'], function (exports) {

  'use strict';

  /* global _ */

  exports['default'] = function (protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function () {
        return parent.apply(this, arguments);
      };
    }

    // Add static properties to the constructor function, if supplied.

    _.assign(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function Surrogate() {
      this.constructor = child;
    };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate();

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) {
      _.assign(child.prototype, protoProps);
    }

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  }

});
define('ember-cli-mirage/utils/inflector', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var singularize = Ember['default'].String.singularize;
	var pluralize = Ember['default'].String.pluralize;
	var capitalize = Ember['default'].String.capitalize;

	exports.singularize = singularize;
	exports.pluralize = pluralize;
	exports.capitalize = capitalize;

});
define('ember-cli-mirage/utils/read-modules', ['exports'], function (exports) {

  'use strict';

  /* global Ember, requirejs, require */
  /*jslint node: true */

  'use strict';

  /*
    This function looks through all files that have been loaded by Ember CLI and
    finds the ones under /mirage/[factories, fixtures, scenarios, models]/, and exports
    a hash containing the names of the files as keys and the data as values.
  */
  exports['default'] = function (prefix) {
    var mirageModuleRegExp = new RegExp('^' + prefix + '/mirage/(factories|fixtures|scenarios|models)');
    var modulesMap = { fixtures: {}, factories: {}, scenarios: {}, models: {} };

    _.keys(requirejs._eak_seen).filter(function (key) {
      return mirageModuleRegExp.test(key);
    }).forEach(function (moduleName) {
      if (moduleName.match('.jshint')) {
        // ignore autogenerated .jshint files
        return;
      }
      var moduleParts = moduleName.split('/');
      var moduleType = moduleParts[moduleParts.length - 2];
      var moduleKey = moduleParts[moduleParts.length - 1];
      Ember.assert('Subdirectories under ' + moduleType + ' are not supported', moduleParts[moduleParts.length - 3] === 'mirage');
      if (moduleType === 'scenario') {
        Ember.assert('Only scenario/default.js is supported at this time.', moduleKey !== 'default');
      }

      var module = require(moduleName, null, null, true);
      if (!module) {
        throw new Error(moduleName + ' must export a ' + moduleType);
      }

      var data = module['default'];

      modulesMap[moduleType][moduleKey] = data;
    });

    return modulesMap;
  }

});
define('ember-cli-mirage/utils/uuid', ['exports'], function (exports) {

  'use strict';

  /*
    UUID generator
  */
  exports['default'] = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

});
;/* jshint ignore:start */



/* jshint ignore:end */
//# sourceMappingURL=vendor.map